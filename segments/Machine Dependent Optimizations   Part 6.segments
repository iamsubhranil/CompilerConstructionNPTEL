[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 13.4, 'text': ' Okay, I think we will get started, right. So, next we will see the graph coloring based', 'tokens': [50364, 1033, 11, 286, 519, 321, 486, 483, 1409, 11, 558, 13, 407, 11, 958, 321, 486, 536, 264, 4295, 23198, 2361, 51034], 'temperature': 0.0, 'avg_logprob': -0.2290596239494555, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.5452791452407837}, {'id': 1, 'seek': 0, 'start': 13.4, 'end': 21.44, 'text': ' register allocation, right. So, this is where we were. So, in doing global register allocation,', 'tokens': [51034, 7280, 27599, 11, 558, 13, 407, 11, 341, 307, 689, 321, 645, 13, 407, 11, 294, 884, 4338, 7280, 27599, 11, 51436], 'temperature': 0.0, 'avg_logprob': -0.2290596239494555, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.5452791452407837}, {'id': 2, 'seek': 0, 'start': 21.44, 'end': 29.2, 'text': ' the idea is to essentially make sure that two variables whose live ranges overlap, they', 'tokens': [51436, 264, 1558, 307, 281, 4476, 652, 988, 300, 732, 9102, 6104, 1621, 22526, 19959, 11, 436, 51824], 'temperature': 0.0, 'avg_logprob': -0.2290596239494555, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.5452791452407837}, {'id': 3, 'seek': 2920, 'start': 29.2, 'end': 35.519999999999996, 'text': ' are allocated different registers, right. So, this information about which live ranges', 'tokens': [50364, 366, 29772, 819, 38351, 11, 558, 13, 407, 11, 341, 1589, 466, 597, 1621, 22526, 50680], 'temperature': 0.0, 'avg_logprob': -0.1767520656833401, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.028547784313559532}, {'id': 4, 'seek': 2920, 'start': 35.519999999999996, 'end': 41.28, 'text': ' are overlapping with which other live ranges can be captured in the form of a graph, right.', 'tokens': [50680, 366, 33535, 365, 597, 661, 1621, 22526, 393, 312, 11828, 294, 264, 1254, 295, 257, 4295, 11, 558, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.1767520656833401, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.028547784313559532}, {'id': 5, 'seek': 2920, 'start': 41.28, 'end': 49.72, 'text': ' So, you can actually graph with nodes representing these variables and two variables kind of', 'tokens': [50968, 407, 11, 291, 393, 767, 4295, 365, 13891, 13460, 613, 9102, 293, 732, 9102, 733, 295, 51390], 'temperature': 0.0, 'avg_logprob': -0.1767520656833401, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.028547784313559532}, {'id': 6, 'seek': 2920, 'start': 49.72, 'end': 54.6, 'text': ' conflict with each other or their live ranges overlap with each other, then you can actually', 'tokens': [51390, 6596, 365, 1184, 661, 420, 641, 1621, 22526, 19959, 365, 1184, 661, 11, 550, 291, 393, 767, 51634], 'temperature': 0.0, 'avg_logprob': -0.1767520656833401, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.028547784313559532}, {'id': 7, 'seek': 5460, 'start': 55.6, 'end': 61.0, 'text': ' between them, right. So, that is essentially what you are going to call this graph as the', 'tokens': [50414, 1296, 552, 11, 558, 13, 407, 11, 300, 307, 4476, 437, 291, 366, 516, 281, 818, 341, 4295, 382, 264, 50684], 'temperature': 0.0, 'avg_logprob': -0.2647907357466848, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.5383598208427429}, {'id': 8, 'seek': 5460, 'start': 61.0, 'end': 68.0, 'text': ' interference graph and in the interference graph, nodes represent the variables, right.', 'tokens': [50684, 24497, 4295, 293, 294, 264, 24497, 4295, 11, 13891, 2906, 264, 9102, 11, 558, 13, 51034], 'temperature': 0.0, 'avg_logprob': -0.2647907357466848, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.5383598208427429}, {'id': 9, 'seek': 5460, 'start': 68.0, 'end': 73.6, 'text': ' That that have to be allocated registers and edges between these variables essentially', 'tokens': [51034, 663, 300, 362, 281, 312, 29772, 38351, 293, 8819, 1296, 613, 9102, 4476, 51314], 'temperature': 0.0, 'avg_logprob': -0.2647907357466848, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.5383598208427429}, {'id': 10, 'seek': 5460, 'start': 73.6, 'end': 79.96000000000001, 'text': ' represent whether there is a conflict between those two variables or not, okay. So, there', 'tokens': [51314, 2906, 1968, 456, 307, 257, 6596, 1296, 729, 732, 9102, 420, 406, 11, 1392, 13, 407, 11, 456, 51632], 'temperature': 0.0, 'avg_logprob': -0.2647907357466848, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.5383598208427429}, {'id': 11, 'seek': 7996, 'start': 79.96, 'end': 85.32, 'text': ' is an edge between V 1 and V 2 if V 1 and V 2 conflict with each other. That means', 'tokens': [50364, 307, 364, 4691, 1296, 691, 502, 293, 691, 568, 498, 691, 502, 293, 691, 568, 6596, 365, 1184, 661, 13, 663, 1355, 50632], 'temperature': 0.0, 'avg_logprob': -0.16470947484860474, 'compression_ratio': 1.6650717703349283, 'no_speech_prob': 0.0994599461555481}, {'id': 12, 'seek': 7996, 'start': 85.32, 'end': 92.08, 'text': ' that the live ranges of these overlap or they are live at the same time. Then this register', 'tokens': [50632, 300, 264, 1621, 22526, 295, 613, 19959, 420, 436, 366, 1621, 412, 264, 912, 565, 13, 1396, 341, 7280, 50970], 'temperature': 0.0, 'avg_logprob': -0.16470947484860474, 'compression_ratio': 1.6650717703349283, 'no_speech_prob': 0.0994599461555481}, {'id': 13, 'seek': 7996, 'start': 92.08, 'end': 97.75999999999999, 'text': ' allocation problem itself will turn into what is called the graph coloring problem.', 'tokens': [50970, 27599, 1154, 2564, 486, 1261, 666, 437, 307, 1219, 264, 4295, 23198, 1154, 13, 51254], 'temperature': 0.0, 'avg_logprob': -0.16470947484860474, 'compression_ratio': 1.6650717703349283, 'no_speech_prob': 0.0994599461555481}, {'id': 14, 'seek': 7996, 'start': 97.75999999999999, 'end': 104.44, 'text': ' Given a graph, we want to color all the nodes of the graph such that, right, two nodes do', 'tokens': [51254, 18600, 257, 4295, 11, 321, 528, 281, 2017, 439, 264, 13891, 295, 264, 4295, 1270, 300, 11, 558, 11, 732, 13891, 360, 51588], 'temperature': 0.0, 'avg_logprob': -0.16470947484860474, 'compression_ratio': 1.6650717703349283, 'no_speech_prob': 0.0994599461555481}, {'id': 15, 'seek': 10444, 'start': 104.44, 'end': 110.0, 'text': ' not have the same color if they have an edge between them, right. That is called the graph', 'tokens': [50364, 406, 362, 264, 912, 2017, 498, 436, 362, 364, 4691, 1296, 552, 11, 558, 13, 663, 307, 1219, 264, 4295, 50642], 'temperature': 0.0, 'avg_logprob': -0.14738678049158166, 'compression_ratio': 2.2323232323232323, 'no_speech_prob': 0.013437889516353607}, {'id': 16, 'seek': 10444, 'start': 110.0, 'end': 114.56, 'text': ' coloring problem, right. So, also chromatic number, right, what is the minimum number', 'tokens': [50642, 23198, 1154, 11, 558, 13, 407, 11, 611, 16209, 2399, 1230, 11, 558, 11, 437, 307, 264, 7285, 1230, 50870], 'temperature': 0.0, 'avg_logprob': -0.14738678049158166, 'compression_ratio': 2.2323232323232323, 'no_speech_prob': 0.013437889516353607}, {'id': 17, 'seek': 10444, 'start': 114.56, 'end': 120.64, 'text': ' of colors that are required to color the graph, right. So, if you find the minimum number', 'tokens': [50870, 295, 4577, 300, 366, 4739, 281, 2017, 264, 4295, 11, 558, 13, 407, 11, 498, 291, 915, 264, 7285, 1230, 51174], 'temperature': 0.0, 'avg_logprob': -0.14738678049158166, 'compression_ratio': 2.2323232323232323, 'no_speech_prob': 0.013437889516353607}, {'id': 18, 'seek': 10444, 'start': 120.64, 'end': 125.84, 'text': ' of colors that are required to color that graph or if you find out whether k colors', 'tokens': [51174, 295, 4577, 300, 366, 4739, 281, 2017, 300, 4295, 420, 498, 291, 915, 484, 1968, 350, 4577, 51434], 'temperature': 0.0, 'avg_logprob': -0.14738678049158166, 'compression_ratio': 2.2323232323232323, 'no_speech_prob': 0.013437889516353607}, {'id': 19, 'seek': 10444, 'start': 125.84, 'end': 132.8, 'text': ' can be used to color that graph, right, that is essentially a graph coloring problem, okay.', 'tokens': [51434, 393, 312, 1143, 281, 2017, 300, 4295, 11, 558, 11, 300, 307, 4476, 257, 4295, 23198, 1154, 11, 1392, 13, 51782], 'temperature': 0.0, 'avg_logprob': -0.14738678049158166, 'compression_ratio': 2.2323232323232323, 'no_speech_prob': 0.013437889516353607}, {'id': 20, 'seek': 13280, 'start': 132.8, 'end': 140.8, 'text': ' Now, given a machine with k registers and given a program, if we can actually construct', 'tokens': [50364, 823, 11, 2212, 257, 3479, 365, 350, 38351, 293, 2212, 257, 1461, 11, 498, 321, 393, 767, 7690, 50764], 'temperature': 0.0, 'avg_logprob': -0.1849408093620749, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.07507353276014328}, {'id': 21, 'seek': 13280, 'start': 140.8, 'end': 146.28, 'text': ' the interference graph for that program and then ask the question can this graph is k', 'tokens': [50764, 264, 24497, 4295, 337, 300, 1461, 293, 550, 1029, 264, 1168, 393, 341, 4295, 307, 350, 51038], 'temperature': 0.0, 'avg_logprob': -0.1849408093620749, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.07507353276014328}, {'id': 22, 'seek': 13280, 'start': 146.28, 'end': 152.36, 'text': ' colorable, is this graph k colorable. And if it is yes, then we can actually allocate', 'tokens': [51038, 2017, 712, 11, 307, 341, 4295, 350, 2017, 712, 13, 400, 498, 309, 307, 2086, 11, 550, 321, 393, 767, 35713, 51342], 'temperature': 0.0, 'avg_logprob': -0.1849408093620749, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.07507353276014328}, {'id': 23, 'seek': 13280, 'start': 152.36, 'end': 159.24, 'text': ' registers for all the variables in that particular graph. If the answer is no, then of course,', 'tokens': [51342, 38351, 337, 439, 264, 9102, 294, 300, 1729, 4295, 13, 759, 264, 1867, 307, 572, 11, 550, 295, 1164, 11, 51686], 'temperature': 0.0, 'avg_logprob': -0.1849408093620749, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.07507353276014328}, {'id': 24, 'seek': 15924, 'start': 159.24, 'end': 164.68, 'text': ' not all variables can be allocated this, but some of them can be allocated and the', 'tokens': [50364, 406, 439, 9102, 393, 312, 29772, 341, 11, 457, 512, 295, 552, 393, 312, 29772, 293, 264, 50636], 'temperature': 0.0, 'avg_logprob': -0.20435442527135214, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.39064767956733704}, {'id': 25, 'seek': 15924, 'start': 164.68, 'end': 167.76000000000002, 'text': ' remaining have to be used from the memory, right.', 'tokens': [50636, 8877, 362, 281, 312, 1143, 490, 264, 4675, 11, 558, 13, 50790], 'temperature': 0.0, 'avg_logprob': -0.20435442527135214, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.39064767956733704}, {'id': 26, 'seek': 15924, 'start': 167.76000000000002, 'end': 173.76000000000002, 'text': ' So, if the k coloring is possible, then based on the color, those variables or those nodes', 'tokens': [50790, 407, 11, 498, 264, 350, 23198, 307, 1944, 11, 550, 2361, 322, 264, 2017, 11, 729, 9102, 420, 729, 13891, 51090], 'temperature': 0.0, 'avg_logprob': -0.20435442527135214, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.39064767956733704}, {'id': 27, 'seek': 15924, 'start': 173.76000000000002, 'end': 178.88, 'text': ' which have the same color are assigned to the same register and all the variables are', 'tokens': [51090, 597, 362, 264, 912, 2017, 366, 13279, 281, 264, 912, 7280, 293, 439, 264, 9102, 366, 51346], 'temperature': 0.0, 'avg_logprob': -0.20435442527135214, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.39064767956733704}, {'id': 28, 'seek': 15924, 'start': 178.88, 'end': 184.88, 'text': ' assigned these colors, okay. Now, let us see how, what is the complexity of this graph', 'tokens': [51346, 13279, 613, 4577, 11, 1392, 13, 823, 11, 718, 505, 536, 577, 11, 437, 307, 264, 14024, 295, 341, 4295, 51646], 'temperature': 0.0, 'avg_logprob': -0.20435442527135214, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.39064767956733704}, {'id': 29, 'seek': 18488, 'start': 185.48, 'end': 190.56, 'text': ' coloring algorithm, right. The complexity of coloring a graph with color greater than', 'tokens': [50394, 23198, 9284, 11, 558, 13, 440, 14024, 295, 23198, 257, 4295, 365, 2017, 5044, 813, 50648], 'temperature': 0.0, 'avg_logprob': -0.16019118085820624, 'compression_ratio': 1.6794258373205742, 'no_speech_prob': 0.699049711227417}, {'id': 30, 'seek': 18488, 'start': 190.56, 'end': 199.56, 'text': ' 3 is NP-hard, okay. And therefore, we have to use heuristic approach to solve this problem,', 'tokens': [50648, 805, 307, 38611, 12, 21491, 11, 1392, 13, 400, 4412, 11, 321, 362, 281, 764, 415, 374, 3142, 3109, 281, 5039, 341, 1154, 11, 51098], 'temperature': 0.0, 'avg_logprob': -0.16019118085820624, 'compression_ratio': 1.6794258373205742, 'no_speech_prob': 0.699049711227417}, {'id': 31, 'seek': 18488, 'start': 199.56, 'end': 205.28, 'text': ' okay. Now, before we go to the heuristic, we will also ask the question what if the', 'tokens': [51098, 1392, 13, 823, 11, 949, 321, 352, 281, 264, 415, 374, 3142, 11, 321, 486, 611, 1029, 264, 1168, 437, 498, 264, 51384], 'temperature': 0.0, 'avg_logprob': -0.16019118085820624, 'compression_ratio': 1.6794258373205742, 'no_speech_prob': 0.699049711227417}, {'id': 32, 'seek': 18488, 'start': 205.28, 'end': 210.2, 'text': ' graph is not k colorable or what if the graph is k colorable, but we are not able to find', 'tokens': [51384, 4295, 307, 406, 350, 2017, 712, 420, 437, 498, 264, 4295, 307, 350, 2017, 712, 11, 457, 321, 366, 406, 1075, 281, 915, 51630], 'temperature': 0.0, 'avg_logprob': -0.16019118085820624, 'compression_ratio': 1.6794258373205742, 'no_speech_prob': 0.699049711227417}, {'id': 33, 'seek': 21020, 'start': 210.2, 'end': 216.79999999999998, 'text': ' that coloring, right. What do we do in those cases? In those cases, of course, we have', 'tokens': [50364, 300, 23198, 11, 558, 13, 708, 360, 321, 360, 294, 729, 3331, 30, 682, 729, 3331, 11, 295, 1164, 11, 321, 362, 50694], 'temperature': 0.0, 'avg_logprob': -0.16416704766104154, 'compression_ratio': 1.892116182572614, 'no_speech_prob': 0.09451591223478317}, {'id': 34, 'seek': 21020, 'start': 216.79999999999998, 'end': 222.76, 'text': ' to spill some of the variables and those variables will be from memory and the remaining variables', 'tokens': [50694, 281, 22044, 512, 295, 264, 9102, 293, 729, 9102, 486, 312, 490, 4675, 293, 264, 8877, 9102, 50992], 'temperature': 0.0, 'avg_logprob': -0.16416704766104154, 'compression_ratio': 1.892116182572614, 'no_speech_prob': 0.09451591223478317}, {'id': 35, 'seek': 21020, 'start': 222.76, 'end': 229.56, 'text': ' will be from the registers. So, essentially given a code, we want to construct the interference', 'tokens': [50992, 486, 312, 490, 264, 38351, 13, 407, 11, 4476, 2212, 257, 3089, 11, 321, 528, 281, 7690, 264, 24497, 51332], 'temperature': 0.0, 'avg_logprob': -0.16416704766104154, 'compression_ratio': 1.892116182572614, 'no_speech_prob': 0.09451591223478317}, {'id': 36, 'seek': 21020, 'start': 229.56, 'end': 235.32, 'text': ' graph for that code and then see whether the graph can be colored using k colors.', 'tokens': [51332, 4295, 337, 300, 3089, 293, 550, 536, 1968, 264, 4295, 393, 312, 14332, 1228, 350, 4577, 13, 51620], 'temperature': 0.0, 'avg_logprob': -0.16416704766104154, 'compression_ratio': 1.892116182572614, 'no_speech_prob': 0.09451591223478317}, {'id': 37, 'seek': 21020, 'start': 235.32, 'end': 240.16, 'text': ' And if they can be colored using k colors, then what are the colors that need to be assigned', 'tokens': [51620, 400, 498, 436, 393, 312, 14332, 1228, 350, 4577, 11, 550, 437, 366, 264, 4577, 300, 643, 281, 312, 13279, 51862], 'temperature': 0.0, 'avg_logprob': -0.16416704766104154, 'compression_ratio': 1.892116182572614, 'no_speech_prob': 0.09451591223478317}, {'id': 38, 'seek': 24016, 'start': 240.35999999999999, 'end': 245.16, 'text': ' for these different nodes? That essentially tells which registers are being assigned to', 'tokens': [50374, 337, 613, 819, 13891, 30, 663, 4476, 5112, 597, 38351, 366, 885, 13279, 281, 50614], 'temperature': 0.0, 'avg_logprob': -0.16375629811347286, 'compression_ratio': 1.7658536585365854, 'no_speech_prob': 0.007684388663619757}, {'id': 39, 'seek': 24016, 'start': 245.16, 'end': 251.28, 'text': ' what variables and which variables share the same register. All of this is basically obtained', 'tokens': [50614, 437, 9102, 293, 597, 9102, 2073, 264, 912, 7280, 13, 1057, 295, 341, 307, 1936, 14879, 50920], 'temperature': 0.0, 'avg_logprob': -0.16375629811347286, 'compression_ratio': 1.7658536585365854, 'no_speech_prob': 0.007684388663619757}, {'id': 40, 'seek': 24016, 'start': 251.28, 'end': 257.32, 'text': ' by doing the graph coloring problem, correct. That is really what we want to do. If it is', 'tokens': [50920, 538, 884, 264, 4295, 23198, 1154, 11, 3006, 13, 663, 307, 534, 437, 321, 528, 281, 360, 13, 759, 309, 307, 51222], 'temperature': 0.0, 'avg_logprob': -0.16375629811347286, 'compression_ratio': 1.7658536585365854, 'no_speech_prob': 0.007684388663619757}, {'id': 41, 'seek': 24016, 'start': 257.32, 'end': 263.8, 'text': ' not k colorable, then which registers or which variables, sorry, which variables are going', 'tokens': [51222, 406, 350, 2017, 712, 11, 550, 597, 38351, 420, 597, 9102, 11, 2597, 11, 597, 9102, 366, 516, 51546], 'temperature': 0.0, 'avg_logprob': -0.16375629811347286, 'compression_ratio': 1.7658536585365854, 'no_speech_prob': 0.007684388663619757}, {'id': 42, 'seek': 26380, 'start': 263.88, 'end': 271.0, 'text': ' to come from memory, which variables are actually going to be spilled, correct. And those variables', 'tokens': [50368, 281, 808, 490, 4675, 11, 597, 9102, 366, 767, 516, 281, 312, 37833, 11, 3006, 13, 400, 729, 9102, 50724], 'temperature': 0.0, 'avg_logprob': -0.19928164421757566, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.4660581648349762}, {'id': 43, 'seek': 26380, 'start': 271.0, 'end': 274.08, 'text': ' which are spilled, how do we handle them, right.', 'tokens': [50724, 597, 366, 37833, 11, 577, 360, 321, 4813, 552, 11, 558, 13, 50878], 'temperature': 0.0, 'avg_logprob': -0.19928164421757566, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.4660581648349762}, {'id': 44, 'seek': 26380, 'start': 274.08, 'end': 281.68, 'text': ' Okay. Now, let us take a bigger example than what we saw earlier, okay. Here I have a sequence', 'tokens': [50878, 1033, 13, 823, 11, 718, 505, 747, 257, 3801, 1365, 813, 437, 321, 1866, 3071, 11, 1392, 13, 1692, 286, 362, 257, 8310, 51258], 'temperature': 0.0, 'avg_logprob': -0.19928164421757566, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.4660581648349762}, {'id': 45, 'seek': 26380, 'start': 281.68, 'end': 287.68, 'text': ' of instructions and as you can see that this sequence of instruction has some conditional', 'tokens': [51258, 295, 9415, 293, 382, 291, 393, 536, 300, 341, 8310, 295, 10951, 575, 512, 27708, 51558], 'temperature': 0.0, 'avg_logprob': -0.19928164421757566, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.4660581648349762}, {'id': 46, 'seek': 28768, 'start': 287.68, 'end': 293.40000000000003, 'text': ' branches and labels and things like that. So, this is no longer a single basic block,', 'tokens': [50364, 14770, 293, 16949, 293, 721, 411, 300, 13, 407, 11, 341, 307, 572, 2854, 257, 2167, 3875, 3461, 11, 50650], 'temperature': 0.0, 'avg_logprob': -0.19351743516467868, 'compression_ratio': 1.8518518518518519, 'no_speech_prob': 0.42436376214027405}, {'id': 47, 'seek': 28768, 'start': 293.40000000000003, 'end': 300.40000000000003, 'text': ' correct. It is not a single basic block because there is a branch instruction here and there', 'tokens': [50650, 3006, 13, 467, 307, 406, 257, 2167, 3875, 3461, 570, 456, 307, 257, 9819, 10951, 510, 293, 456, 51000], 'temperature': 0.0, 'avg_logprob': -0.19351743516467868, 'compression_ratio': 1.8518518518518519, 'no_speech_prob': 0.42436376214027405}, {'id': 48, 'seek': 28768, 'start': 300.40000000000003, 'end': 308.4, 'text': " is a branch instruction here and there are jumps into this code, right, isn't it.", 'tokens': [51000, 307, 257, 9819, 10951, 510, 293, 456, 366, 16704, 666, 341, 3089, 11, 558, 11, 1943, 380, 309, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.19351743516467868, 'compression_ratio': 1.8518518518518519, 'no_speech_prob': 0.42436376214027405}, {'id': 49, 'seek': 28768, 'start': 308.4, 'end': 316.4, 'text': ' So, this is basically a piece of code which is represented using this control flow graph,', 'tokens': [51400, 407, 11, 341, 307, 1936, 257, 2522, 295, 3089, 597, 307, 10379, 1228, 341, 1969, 3095, 4295, 11, 51800], 'temperature': 0.0, 'avg_logprob': -0.19351743516467868, 'compression_ratio': 1.8518518518518519, 'no_speech_prob': 0.42436376214027405}, {'id': 50, 'seek': 31640, 'start': 317.12, 'end': 324.12, 'text': ' right. So, this set of instruction form one basic block. These two instructions form another', 'tokens': [50400, 558, 13, 407, 11, 341, 992, 295, 10951, 1254, 472, 3875, 3461, 13, 1981, 732, 9415, 1254, 1071, 50750], 'temperature': 0.0, 'avg_logprob': -0.18044432928395826, 'compression_ratio': 1.9308510638297873, 'no_speech_prob': 0.005464924965053797}, {'id': 51, 'seek': 31640, 'start': 324.12, 'end': 331.12, 'text': ' basic block. This forms a basic block and this one forms a basic block, right. However,', 'tokens': [50750, 3875, 3461, 13, 639, 6422, 257, 3875, 3461, 293, 341, 472, 6422, 257, 3875, 3461, 11, 558, 13, 2908, 11, 51100], 'temperature': 0.0, 'avg_logprob': -0.18044432928395826, 'compression_ratio': 1.9308510638297873, 'no_speech_prob': 0.005464924965053797}, {'id': 52, 'seek': 31640, 'start': 331.12, 'end': 337.12, 'text': ' when you take this control flow graph and then write it as a linear sequence of instruction,', 'tokens': [51100, 562, 291, 747, 341, 1969, 3095, 4295, 293, 550, 2464, 309, 382, 257, 8213, 8310, 295, 10951, 11, 51400], 'temperature': 0.0, 'avg_logprob': -0.18044432928395826, 'compression_ratio': 1.9308510638297873, 'no_speech_prob': 0.005464924965053797}, {'id': 53, 'seek': 31640, 'start': 337.12, 'end': 343.56, 'text': ' right, it is going to be in one of these two forms. Either you put this instruction first', 'tokens': [51400, 558, 11, 309, 307, 516, 281, 312, 294, 472, 295, 613, 732, 6422, 13, 13746, 291, 829, 341, 10951, 700, 51722], 'temperature': 0.0, 'avg_logprob': -0.18044432928395826, 'compression_ratio': 1.9308510638297873, 'no_speech_prob': 0.005464924965053797}, {'id': 54, 'seek': 34356, 'start': 343.76, 'end': 350.0, 'text': ' and then branch to this and then subsequently this instruction and then code further or', 'tokens': [50374, 293, 550, 9819, 281, 341, 293, 550, 26514, 341, 10951, 293, 550, 3089, 3052, 420, 50686], 'temperature': 0.0, 'avg_logprob': -0.1494725980256733, 'compression_ratio': 1.8166666666666667, 'no_speech_prob': 0.1807188242673874}, {'id': 55, 'seek': 34356, 'start': 350.0, 'end': 355.8, 'text': ' you go this way and then this and then this, right. So, you have to linearize it in some', 'tokens': [50686, 291, 352, 341, 636, 293, 550, 341, 293, 550, 341, 11, 558, 13, 407, 11, 291, 362, 281, 8213, 1125, 309, 294, 512, 50976], 'temperature': 0.0, 'avg_logprob': -0.1494725980256733, 'compression_ratio': 1.8166666666666667, 'no_speech_prob': 0.1807188242673874}, {'id': 56, 'seek': 34356, 'start': 355.8, 'end': 362.8, 'text': ' form, right. So, basic block B 1, B 2, B 3 and B 4 or basic', 'tokens': [50976, 1254, 11, 558, 13, 407, 11, 3875, 3461, 363, 502, 11, 363, 568, 11, 363, 805, 293, 363, 1017, 420, 3875, 51326], 'temperature': 0.0, 'avg_logprob': -0.1494725980256733, 'compression_ratio': 1.8166666666666667, 'no_speech_prob': 0.1807188242673874}, {'id': 57, 'seek': 34356, 'start': 362.88, 'end': 369.88, 'text': ' block B 1, B 3, B 2 and B 4, correct. So, this is going to be the sequence of instructions', 'tokens': [51330, 3461, 363, 502, 11, 363, 805, 11, 363, 568, 293, 363, 1017, 11, 3006, 13, 407, 11, 341, 307, 516, 281, 312, 264, 8310, 295, 9415, 51680], 'temperature': 0.0, 'avg_logprob': -0.1494725980256733, 'compression_ratio': 1.8166666666666667, 'no_speech_prob': 0.1807188242673874}, {'id': 58, 'seek': 36988, 'start': 370.48, 'end': 376.28, 'text': ' and this is the corresponding control flow graph, okay. Now, let us see what happens', 'tokens': [50394, 293, 341, 307, 264, 11760, 1969, 3095, 4295, 11, 1392, 13, 823, 11, 718, 505, 536, 437, 2314, 50684], 'temperature': 0.0, 'avg_logprob': -0.144516360375189, 'compression_ratio': 1.6175115207373272, 'no_speech_prob': 0.029368935152888298}, {'id': 59, 'seek': 36988, 'start': 376.28, 'end': 383.28, 'text': ' in terms of live ranges, right. So, S 1, S 2, S 3, S 4 up to S 6 are the temporary variables', 'tokens': [50684, 294, 2115, 295, 1621, 22526, 11, 558, 13, 407, 11, 318, 502, 11, 318, 568, 11, 318, 805, 11, 318, 1017, 493, 281, 318, 1386, 366, 264, 13413, 9102, 51034], 'temperature': 0.0, 'avg_logprob': -0.144516360375189, 'compression_ratio': 1.6175115207373272, 'no_speech_prob': 0.029368935152888298}, {'id': 60, 'seek': 36988, 'start': 384.76, 'end': 390.76, 'text': ' that we are talking about to which registers need to be allocated, right. So, here are', 'tokens': [51108, 300, 321, 366, 1417, 466, 281, 597, 38351, 643, 281, 312, 29772, 11, 558, 13, 407, 11, 510, 366, 51408], 'temperature': 0.0, 'avg_logprob': -0.144516360375189, 'compression_ratio': 1.6175115207373272, 'no_speech_prob': 0.029368935152888298}, {'id': 61, 'seek': 36988, 'start': 390.76, 'end': 396.36, 'text': ' the live ranges for these variables and the important thing to look at is first let us', 'tokens': [51408, 264, 1621, 22526, 337, 613, 9102, 293, 264, 1021, 551, 281, 574, 412, 307, 700, 718, 505, 51688], 'temperature': 0.0, 'avg_logprob': -0.144516360375189, 'compression_ratio': 1.6175115207373272, 'no_speech_prob': 0.029368935152888298}, {'id': 62, 'seek': 39636, 'start': 396.36, 'end': 402.8, 'text': ' look at S 1. S 1 is being defined here and is used by these instructions and this is', 'tokens': [50364, 574, 412, 318, 502, 13, 318, 502, 307, 885, 7642, 510, 293, 307, 1143, 538, 613, 9415, 293, 341, 307, 50686], 'temperature': 0.0, 'avg_logprob': -0.16580302044025902, 'compression_ratio': 1.9666666666666666, 'no_speech_prob': 0.033377304673194885}, {'id': 63, 'seek': 39636, 'start': 402.8, 'end': 409.8, 'text': ' the last use of S 1. After this in this code there is no use of S 1. So, the live range', 'tokens': [50686, 264, 1036, 764, 295, 318, 502, 13, 2381, 341, 294, 341, 3089, 456, 307, 572, 764, 295, 318, 502, 13, 407, 11, 264, 1621, 3613, 51036], 'temperature': 0.0, 'avg_logprob': -0.16580302044025902, 'compression_ratio': 1.9666666666666666, 'no_speech_prob': 0.033377304673194885}, {'id': 64, 'seek': 39636, 'start': 409.8, 'end': 416.8, 'text': ' of S 1 is from this point to this point, correct. What about the live range of S 2? The live', 'tokens': [51036, 295, 318, 502, 307, 490, 341, 935, 281, 341, 935, 11, 3006, 13, 708, 466, 264, 1621, 3613, 295, 318, 568, 30, 440, 1621, 51386], 'temperature': 0.0, 'avg_logprob': -0.16580302044025902, 'compression_ratio': 1.9666666666666666, 'no_speech_prob': 0.033377304673194885}, {'id': 65, 'seek': 39636, 'start': 417.88, 'end': 424.88, 'text': ' range of S 2, so live range of S 2 is from here, right, till this point, okay, till this', 'tokens': [51440, 3613, 295, 318, 568, 11, 370, 1621, 3613, 295, 318, 568, 307, 490, 510, 11, 558, 11, 4288, 341, 935, 11, 1392, 11, 4288, 341, 51790], 'temperature': 0.0, 'avg_logprob': -0.16580302044025902, 'compression_ratio': 1.9666666666666666, 'no_speech_prob': 0.033377304673194885}, {'id': 66, 'seek': 42636, 'start': 426.36, 'end': 433.2, 'text': ' point, okay. Well, let us take it live range of S 2 is up to here and then it is not being', 'tokens': [50364, 935, 11, 1392, 13, 1042, 11, 718, 505, 747, 309, 1621, 3613, 295, 318, 568, 307, 493, 281, 510, 293, 550, 309, 307, 406, 885, 50706], 'temperature': 0.0, 'avg_logprob': -0.167326783621183, 'compression_ratio': 1.6407766990291262, 'no_speech_prob': 0.009413138031959534}, {'id': 67, 'seek': 42636, 'start': 433.2, 'end': 439.86, 'text': ' used anywhere in this basic block. It is not even used in any of these two basic blocks', 'tokens': [50706, 1143, 4992, 294, 341, 3875, 3461, 13, 467, 307, 406, 754, 1143, 294, 604, 295, 613, 732, 3875, 8474, 51039], 'temperature': 0.0, 'avg_logprob': -0.167326783621183, 'compression_ratio': 1.6407766990291262, 'no_speech_prob': 0.009413138031959534}, {'id': 68, 'seek': 42636, 'start': 439.86, 'end': 445.52000000000004, 'text': ' and only used here, right. In other words what happens is that S 2 starts', 'tokens': [51039, 293, 787, 1143, 510, 11, 558, 13, 682, 661, 2283, 437, 2314, 307, 300, 318, 568, 3719, 51322], 'temperature': 0.0, 'avg_logprob': -0.167326783621183, 'compression_ratio': 1.6407766990291262, 'no_speech_prob': 0.009413138031959534}, {'id': 69, 'seek': 42636, 'start': 445.52000000000004, 'end': 452.52000000000004, 'text': ' its live range here, but its last use is at this point in time. So, if I consider let', 'tokens': [51322, 1080, 1621, 3613, 510, 11, 457, 1080, 1036, 764, 307, 412, 341, 935, 294, 565, 13, 407, 11, 498, 286, 1949, 718, 51672], 'temperature': 0.0, 'avg_logprob': -0.167326783621183, 'compression_ratio': 1.6407766990291262, 'no_speech_prob': 0.009413138031959534}, {'id': 70, 'seek': 45252, 'start': 452.52, 'end': 459.52, 'text': ' us say a point here, technically speaking there is a definition of S 2 prior to this', 'tokens': [50364, 505, 584, 257, 935, 510, 11, 12120, 4124, 456, 307, 257, 7123, 295, 318, 568, 4059, 281, 341, 50714], 'temperature': 0.0, 'avg_logprob': -0.15485121129633306, 'compression_ratio': 1.7857142857142858, 'no_speech_prob': 0.008933198638260365}, {'id': 71, 'seek': 45252, 'start': 459.9, 'end': 466.9, 'text': ' and there is an use of S 2 after this. So, that means that the live range of S 2 is from', 'tokens': [50733, 293, 456, 307, 364, 764, 295, 318, 568, 934, 341, 13, 407, 11, 300, 1355, 300, 264, 1621, 3613, 295, 318, 568, 307, 490, 51083], 'temperature': 0.0, 'avg_logprob': -0.15485121129633306, 'compression_ratio': 1.7857142857142858, 'no_speech_prob': 0.008933198638260365}, {'id': 72, 'seek': 45252, 'start': 466.9, 'end': 473.9, 'text': ' here to here even though it is not being used in either of these basic blocks, right. So,', 'tokens': [51083, 510, 281, 510, 754, 1673, 309, 307, 406, 885, 1143, 294, 2139, 295, 613, 3875, 8474, 11, 558, 13, 407, 11, 51433], 'temperature': 0.0, 'avg_logprob': -0.15485121129633306, 'compression_ratio': 1.7857142857142858, 'no_speech_prob': 0.008933198638260365}, {'id': 73, 'seek': 45252, 'start': 475.79999999999995, 'end': 482.03999999999996, 'text': ' technically speaking the live range of S 2 is something like this, but it goes I think', 'tokens': [51528, 12120, 4124, 264, 1621, 3613, 295, 318, 568, 307, 746, 411, 341, 11, 457, 309, 1709, 286, 519, 51840], 'temperature': 0.0, 'avg_logprob': -0.15485121129633306, 'compression_ratio': 1.7857142857142858, 'no_speech_prob': 0.008933198638260365}, {'id': 74, 'seek': 48204, 'start': 482.04, 'end': 487.08000000000004, 'text': ' the some coloring is kind of missing in my thing. So, let us come to that, okay. It', 'tokens': [50364, 264, 512, 23198, 307, 733, 295, 5361, 294, 452, 551, 13, 407, 11, 718, 505, 808, 281, 300, 11, 1392, 13, 467, 50616], 'temperature': 0.0, 'avg_logprob': -0.22772688335842556, 'compression_ratio': 1.6979591836734693, 'no_speech_prob': 0.011201584711670876}, {'id': 75, 'seek': 48204, 'start': 487.08000000000004, 'end': 494.08000000000004, 'text': ' is actually from here till here or you can think of this as having two live ranges, right,', 'tokens': [50616, 307, 767, 490, 510, 4288, 510, 420, 291, 393, 519, 295, 341, 382, 1419, 732, 1621, 22526, 11, 558, 11, 50966], 'temperature': 0.0, 'avg_logprob': -0.22772688335842556, 'compression_ratio': 1.6979591836734693, 'no_speech_prob': 0.011201584711670876}, {'id': 76, 'seek': 48204, 'start': 494.92, 'end': 500.04, 'text': ' with a break in between, right, also another way of thinking about it. We will see what', 'tokens': [51008, 365, 257, 1821, 294, 1296, 11, 558, 11, 611, 1071, 636, 295, 1953, 466, 309, 13, 492, 486, 536, 437, 51264], 'temperature': 0.0, 'avg_logprob': -0.22772688335842556, 'compression_ratio': 1.6979591836734693, 'no_speech_prob': 0.011201584711670876}, {'id': 77, 'seek': 48204, 'start': 500.04, 'end': 505.04, 'text': ' are the pros and cons of thinking in this way, what do we mean by the holes and other', 'tokens': [51264, 366, 264, 6267, 293, 1014, 295, 1953, 294, 341, 636, 11, 437, 360, 321, 914, 538, 264, 8118, 293, 661, 51514], 'temperature': 0.0, 'avg_logprob': -0.22772688335842556, 'compression_ratio': 1.6979591836734693, 'no_speech_prob': 0.011201584711670876}, {'id': 78, 'seek': 48204, 'start': 505.04, 'end': 510.86, 'text': ' things, okay. Whereas S 3 is being defined here and is continuously', 'tokens': [51514, 721, 11, 1392, 13, 13813, 318, 805, 307, 885, 7642, 510, 293, 307, 15684, 51805], 'temperature': 0.0, 'avg_logprob': -0.22772688335842556, 'compression_ratio': 1.6979591836734693, 'no_speech_prob': 0.011201584711670876}, {'id': 79, 'seek': 51086, 'start': 511.1, 'end': 517.3000000000001, 'text': ' being used in all of these basic blocks including up to this point. So, its live range is kind', 'tokens': [50376, 885, 1143, 294, 439, 295, 613, 3875, 8474, 3009, 493, 281, 341, 935, 13, 407, 11, 1080, 1621, 3613, 307, 733, 50686], 'temperature': 0.0, 'avg_logprob': -0.1188868248816764, 'compression_ratio': 1.6952380952380952, 'no_speech_prob': 0.019070053473114967}, {'id': 80, 'seek': 51086, 'start': 517.3000000000001, 'end': 524.3000000000001, 'text': ' of continuous from here to here, similarly for S 4, S 5 and S 6, right, yeah. So, what', 'tokens': [50686, 295, 10957, 490, 510, 281, 510, 11, 14138, 337, 318, 1017, 11, 318, 1025, 293, 318, 1386, 11, 558, 11, 1338, 13, 407, 11, 437, 51036], 'temperature': 0.0, 'avg_logprob': -0.1188868248816764, 'compression_ratio': 1.6952380952380952, 'no_speech_prob': 0.019070053473114967}, {'id': 81, 'seek': 51086, 'start': 526.02, 'end': 533.02, 'text': " we see here is that there is a hole in the use of S 2's live range in this point, right,", 'tokens': [51122, 321, 536, 510, 307, 300, 456, 307, 257, 5458, 294, 264, 764, 295, 318, 568, 311, 1621, 3613, 294, 341, 935, 11, 558, 11, 51472], 'temperature': 0.0, 'avg_logprob': -0.1188868248816764, 'compression_ratio': 1.6952380952380952, 'no_speech_prob': 0.019070053473114967}, {'id': 82, 'seek': 51086, 'start': 533.02, 'end': 540.02, 'text': ' because these two basic blocks do not use S 2. We can think of this as having a hole,', 'tokens': [51472, 570, 613, 732, 3875, 8474, 360, 406, 764, 318, 568, 13, 492, 393, 519, 295, 341, 382, 1419, 257, 5458, 11, 51822], 'temperature': 0.0, 'avg_logprob': -0.1188868248816764, 'compression_ratio': 1.6952380952380952, 'no_speech_prob': 0.019070053473114967}, {'id': 83, 'seek': 54002, 'start': 540.5799999999999, 'end': 545.8199999999999, 'text': ' but both of these variables are going to be recognized as S 2, right. So, let us stick', 'tokens': [50392, 457, 1293, 295, 613, 9102, 366, 516, 281, 312, 9823, 382, 318, 568, 11, 558, 13, 407, 11, 718, 505, 2897, 50654], 'temperature': 0.0, 'avg_logprob': -0.13313526973546108, 'compression_ratio': 1.75, 'no_speech_prob': 0.010051911696791649}, {'id': 84, 'seek': 54002, 'start': 545.8199999999999, 'end': 551.62, 'text': ' with that for the time being and then see. Now, we can see that S 1 interferes with S', 'tokens': [50654, 365, 300, 337, 264, 565, 885, 293, 550, 536, 13, 823, 11, 321, 393, 536, 300, 318, 502, 25799, 279, 365, 318, 50944], 'temperature': 0.0, 'avg_logprob': -0.13313526973546108, 'compression_ratio': 1.75, 'no_speech_prob': 0.010051911696791649}, {'id': 85, 'seek': 54002, 'start': 551.62, 'end': 558.06, 'text': ' 2, it interferes with S 3, it also interferes with S 4, right. That means that there will', 'tokens': [50944, 568, 11, 309, 25799, 279, 365, 318, 805, 11, 309, 611, 25799, 279, 365, 318, 1017, 11, 558, 13, 663, 1355, 300, 456, 486, 51266], 'temperature': 0.0, 'avg_logprob': -0.13313526973546108, 'compression_ratio': 1.75, 'no_speech_prob': 0.010051911696791649}, {'id': 86, 'seek': 54002, 'start': 558.06, 'end': 565.06, 'text': ' be an edge from S 1 to S 2, S 3 and S 4. S 1 does not interfere with S 5 or S 6, right.', 'tokens': [51266, 312, 364, 4691, 490, 318, 502, 281, 318, 568, 11, 318, 805, 293, 318, 1017, 13, 318, 502, 775, 406, 23946, 365, 318, 1025, 420, 318, 1386, 11, 558, 13, 51616], 'temperature': 0.0, 'avg_logprob': -0.13313526973546108, 'compression_ratio': 1.75, 'no_speech_prob': 0.010051911696791649}, {'id': 87, 'seek': 56506, 'start': 565.06, 'end': 572.06, 'text': ' Like that you have to identify, right, for each variable with what all it interferes.', 'tokens': [50364, 1743, 300, 291, 362, 281, 5876, 11, 558, 11, 337, 1184, 7006, 365, 437, 439, 309, 25799, 279, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.1500390668710073, 'compression_ratio': 1.785, 'no_speech_prob': 0.008425064384937286}, {'id': 88, 'seek': 56506, 'start': 574.06, 'end': 581.06, 'text': ' So, for example, if I take S 5, it interferes with S 6, it also interferes with S 2, because', 'tokens': [50814, 407, 11, 337, 1365, 11, 498, 286, 747, 318, 1025, 11, 309, 25799, 279, 365, 318, 1386, 11, 309, 611, 25799, 279, 365, 318, 568, 11, 570, 51164], 'temperature': 0.0, 'avg_logprob': -0.1500390668710073, 'compression_ratio': 1.785, 'no_speech_prob': 0.008425064384937286}, {'id': 89, 'seek': 56506, 'start': 582.6199999999999, 'end': 587.9, 'text': ' this is actually a live range of S 2. The live range of S 2 is from this point to this', 'tokens': [51242, 341, 307, 767, 257, 1621, 3613, 295, 318, 568, 13, 440, 1621, 3613, 295, 318, 568, 307, 490, 341, 935, 281, 341, 51506], 'temperature': 0.0, 'avg_logprob': -0.1500390668710073, 'compression_ratio': 1.785, 'no_speech_prob': 0.008425064384937286}, {'id': 90, 'seek': 56506, 'start': 587.9, 'end': 593.9, 'text': ' point and again from this point to this point. You could have considered this as contiguous', 'tokens': [51506, 935, 293, 797, 490, 341, 935, 281, 341, 935, 13, 509, 727, 362, 4888, 341, 382, 660, 30525, 51806], 'temperature': 0.0, 'avg_logprob': -0.1500390668710073, 'compression_ratio': 1.785, 'no_speech_prob': 0.008425064384937286}, {'id': 91, 'seek': 59390, 'start': 593.9, 'end': 598.9, 'text': ' across all of these points, but then there is a disadvantage to that, okay. So, we will', 'tokens': [50364, 2108, 439, 295, 613, 2793, 11, 457, 550, 456, 307, 257, 24292, 281, 300, 11, 1392, 13, 407, 11, 321, 486, 50614], 'temperature': 0.0, 'avg_logprob': -0.2554019797932018, 'compression_ratio': 1.5763546798029557, 'no_speech_prob': 0.020243525505065918}, {'id': 92, 'seek': 59390, 'start': 598.9, 'end': 603.74, 'text': ' for the time being consider it like this, right.', 'tokens': [50614, 337, 264, 565, 885, 1949, 309, 411, 341, 11, 558, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.2554019797932018, 'compression_ratio': 1.5763546798029557, 'no_speech_prob': 0.020243525505065918}, {'id': 93, 'seek': 59390, 'start': 603.74, 'end': 610.74, 'text': ' Now, given this interference graph, the question is we can now ask is this graph 3 colorable,', 'tokens': [50856, 823, 11, 2212, 341, 24497, 4295, 11, 264, 1168, 307, 321, 393, 586, 1029, 307, 341, 4295, 805, 2017, 712, 11, 51206], 'temperature': 0.0, 'avg_logprob': -0.2554019797932018, 'compression_ratio': 1.5763546798029557, 'no_speech_prob': 0.020243525505065918}, {'id': 94, 'seek': 59390, 'start': 612.5799999999999, 'end': 619.5799999999999, 'text': ' right. Is this graph 3 colorable? The answer is no. I do not know how you got it, but let', 'tokens': [51298, 558, 13, 1119, 341, 4295, 805, 2017, 712, 30, 440, 1867, 307, 572, 13, 286, 360, 406, 458, 577, 291, 658, 309, 11, 457, 718, 51648], 'temperature': 0.0, 'avg_logprob': -0.2554019797932018, 'compression_ratio': 1.5763546798029557, 'no_speech_prob': 0.020243525505065918}, {'id': 95, 'seek': 61958, 'start': 619.86, 'end': 626.86, 'text': ' us say it is no, okay. Okay, there is a clique having four nodes, right. So, it has to be', 'tokens': [50378, 505, 584, 309, 307, 572, 11, 1392, 13, 1033, 11, 456, 307, 257, 44467, 1419, 1451, 13891, 11, 558, 13, 407, 11, 309, 575, 281, 312, 50728], 'temperature': 0.0, 'avg_logprob': -0.25798404065868524, 'compression_ratio': 1.7417218543046358, 'no_speech_prob': 0.05018368363380432}, {'id': 96, 'seek': 61958, 'start': 629.62, 'end': 634.26, 'text': ' four colorable. It has to be at least four colorable or it has to have at least four', 'tokens': [50866, 1451, 2017, 712, 13, 467, 575, 281, 312, 412, 1935, 1451, 2017, 712, 420, 309, 575, 281, 362, 412, 1935, 1451, 51098], 'temperature': 0.0, 'avg_logprob': -0.25798404065868524, 'compression_ratio': 1.7417218543046358, 'no_speech_prob': 0.05018368363380432}, {'id': 97, 'seek': 61958, 'start': 634.26, 'end': 641.26, 'text': ' colors to color it, right. Okay, now let us ask this question. Is it four colorable? No.', 'tokens': [51098, 4577, 281, 2017, 309, 11, 558, 13, 1033, 11, 586, 718, 505, 1029, 341, 1168, 13, 1119, 309, 1451, 2017, 712, 30, 883, 13, 51448], 'temperature': 0.0, 'avg_logprob': -0.25798404065868524, 'compression_ratio': 1.7417218543046358, 'no_speech_prob': 0.05018368363380432}, {'id': 98, 'seek': 64126, 'start': 641.26, 'end': 648.26, 'text': ' No. Yeah, in this one I have not shown S 2, S 2 S 5, okay. Yeah, S 2 S 5 I have shown,', 'tokens': [50364, 883, 13, 865, 11, 294, 341, 472, 286, 362, 406, 4898, 318, 568, 11, 318, 568, 318, 1025, 11, 1392, 13, 865, 11, 318, 568, 318, 1025, 286, 362, 4898, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.3147502452769178, 'compression_ratio': 1.79375, 'no_speech_prob': 0.008157838135957718}, {'id': 99, 'seek': 64126, 'start': 650.26, 'end': 657.26, 'text': ' right. S 2 S 5 there is an interference. S 2 S 6 there is an interference, yes. Is it', 'tokens': [50814, 558, 13, 318, 568, 318, 1025, 456, 307, 364, 24497, 13, 318, 568, 318, 1386, 456, 307, 364, 24497, 11, 2086, 13, 1119, 309, 51164], 'temperature': 0.0, 'avg_logprob': -0.3147502452769178, 'compression_ratio': 1.79375, 'no_speech_prob': 0.008157838135957718}, {'id': 100, 'seek': 64126, 'start': 657.58, 'end': 660.26, 'text': ' four colorable or no? Yes.', 'tokens': [51180, 1451, 2017, 712, 420, 572, 30, 1079, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.3147502452769178, 'compression_ratio': 1.79375, 'no_speech_prob': 0.008157838135957718}, {'id': 101, 'seek': 64126, 'start': 660.26, 'end': 667.26, 'text': ' So, those who are saying no, those who are saying no are on this side and those who are', 'tokens': [51314, 407, 11, 729, 567, 366, 1566, 572, 11, 729, 567, 366, 1566, 572, 366, 322, 341, 1252, 293, 729, 567, 366, 51664], 'temperature': 0.0, 'avg_logprob': -0.3147502452769178, 'compression_ratio': 1.79375, 'no_speech_prob': 0.008157838135957718}, {'id': 102, 'seek': 66726, 'start': 667.42, 'end': 674.42, 'text': ' on this side, is it? Okay, so let us see if it can be colored using four colors, right.', 'tokens': [50372, 322, 341, 1252, 11, 307, 309, 30, 1033, 11, 370, 718, 505, 536, 498, 309, 393, 312, 14332, 1228, 1451, 4577, 11, 558, 13, 50722], 'temperature': 0.0, 'avg_logprob': -0.263310882780287, 'compression_ratio': 1.6319018404907975, 'no_speech_prob': 0.022702572867274284}, {'id': 103, 'seek': 66726, 'start': 677.18, 'end': 684.18, 'text': ' Is that a valid coloring? For this interference graph, it is a valid coloring, right. You', 'tokens': [50860, 1119, 300, 257, 7363, 23198, 30, 1171, 341, 24497, 4295, 11, 309, 307, 257, 7363, 23198, 11, 558, 13, 509, 51210], 'temperature': 0.0, 'avg_logprob': -0.263310882780287, 'compression_ratio': 1.6319018404907975, 'no_speech_prob': 0.022702572867274284}, {'id': 104, 'seek': 66726, 'start': 686.98, 'end': 691.98, 'text': ' only need four colors. You do not need five, right, because these two nodes have to have', 'tokens': [51350, 787, 643, 1451, 4577, 13, 509, 360, 406, 643, 1732, 11, 558, 11, 570, 613, 732, 13891, 362, 281, 362, 51600], 'temperature': 0.0, 'avg_logprob': -0.263310882780287, 'compression_ratio': 1.6319018404907975, 'no_speech_prob': 0.022702572867274284}, {'id': 105, 'seek': 69198, 'start': 692.1800000000001, 'end': 697.1800000000001, 'text': ' colors which are other than red. This has to have color which is other than red, blue', 'tokens': [50374, 4577, 597, 366, 661, 813, 2182, 13, 639, 575, 281, 362, 2017, 597, 307, 661, 813, 2182, 11, 3344, 50624], 'temperature': 0.0, 'avg_logprob': -0.1867945325243604, 'compression_ratio': 1.74, 'no_speech_prob': 0.01320226863026619}, {'id': 106, 'seek': 69198, 'start': 697.1800000000001, 'end': 703.26, 'text': ' or yellow, right and I can actually give the same color to this because these two do not', 'tokens': [50624, 420, 5566, 11, 558, 293, 286, 393, 767, 976, 264, 912, 2017, 281, 341, 570, 613, 732, 360, 406, 50928], 'temperature': 0.0, 'avg_logprob': -0.1867945325243604, 'compression_ratio': 1.74, 'no_speech_prob': 0.01320226863026619}, {'id': 107, 'seek': 69198, 'start': 703.26, 'end': 710.26, 'text': ' have a overlap, right. Problem? It is okay, right. So, this is four colorable. So, the', 'tokens': [50928, 362, 257, 19959, 11, 558, 13, 11676, 30, 467, 307, 1392, 11, 558, 13, 407, 11, 341, 307, 1451, 2017, 712, 13, 407, 11, 264, 51278], 'temperature': 0.0, 'avg_logprob': -0.1867945325243604, 'compression_ratio': 1.74, 'no_speech_prob': 0.01320226863026619}, {'id': 108, 'seek': 69198, 'start': 713.58, 'end': 718.5, 'text': ' moment I identify this as four colorable and if I have four registers then I will give', 'tokens': [51444, 1623, 286, 5876, 341, 382, 1451, 2017, 712, 293, 498, 286, 362, 1451, 38351, 550, 286, 486, 976, 51690], 'temperature': 0.0, 'avg_logprob': -0.1867945325243604, 'compression_ratio': 1.74, 'no_speech_prob': 0.01320226863026619}, {'id': 109, 'seek': 71850, 'start': 718.82, 'end': 725.82, 'text': ' register 1 to S 1, 2 to S 2, 3 to S 3, 4 to S 4 and again 1 to S 5 and then 3 to S 6.', 'tokens': [50380, 7280, 502, 281, 318, 502, 11, 568, 281, 318, 568, 11, 805, 281, 318, 805, 11, 1017, 281, 318, 1017, 293, 797, 502, 281, 318, 1025, 293, 550, 805, 281, 318, 1386, 13, 50730], 'temperature': 0.0, 'avg_logprob': -0.13528733114594393, 'compression_ratio': 1.905027932960894, 'no_speech_prob': 0.020013241097331047}, {'id': 110, 'seek': 71850, 'start': 729.86, 'end': 733.46, 'text': ' I have to be careful because I should not allocate the same register which was given', 'tokens': [50932, 286, 362, 281, 312, 5026, 570, 286, 820, 406, 35713, 264, 912, 7280, 597, 390, 2212, 51112], 'temperature': 0.0, 'avg_logprob': -0.13528733114594393, 'compression_ratio': 1.905027932960894, 'no_speech_prob': 0.020013241097331047}, {'id': 111, 'seek': 71850, 'start': 733.46, 'end': 739.18, 'text': ' to S 2 or I should not allocate this. Well, I could have allocated S 4 also for this,', 'tokens': [51112, 281, 318, 568, 420, 286, 820, 406, 35713, 341, 13, 1042, 11, 286, 727, 362, 29772, 318, 1017, 611, 337, 341, 11, 51398], 'temperature': 0.0, 'avg_logprob': -0.13528733114594393, 'compression_ratio': 1.905027932960894, 'no_speech_prob': 0.020013241097331047}, {'id': 112, 'seek': 71850, 'start': 739.18, 'end': 744.18, 'text': ' but for this I should not have allocated S 4 or S 3 or S 2. I should only allocate S', 'tokens': [51398, 457, 337, 341, 286, 820, 406, 362, 29772, 318, 1017, 420, 318, 805, 420, 318, 568, 13, 286, 820, 787, 35713, 318, 51648], 'temperature': 0.0, 'avg_logprob': -0.13528733114594393, 'compression_ratio': 1.905027932960894, 'no_speech_prob': 0.020013241097331047}, {'id': 113, 'seek': 74418, 'start': 744.18, 'end': 751.18, 'text': ' 4, right. So, to identify this coloring that problem for K greater than or equal to 3 is', 'tokens': [50364, 1017, 11, 558, 13, 407, 11, 281, 5876, 341, 23198, 300, 1154, 337, 591, 5044, 813, 420, 2681, 281, 805, 307, 50714], 'temperature': 0.0, 'avg_logprob': -0.2612468678018321, 'compression_ratio': 1.5598290598290598, 'no_speech_prob': 0.04678063094615936}, {'id': 114, 'seek': 74418, 'start': 753.2199999999999, 'end': 758.2199999999999, 'text': " NP hot, okay. Now, let us see how Chaitan's graph coloring algorithm works, right. Chaitan", 'tokens': [50816, 38611, 2368, 11, 1392, 13, 823, 11, 718, 505, 536, 577, 761, 1001, 282, 311, 4295, 23198, 9284, 1985, 11, 558, 13, 761, 1001, 282, 51066], 'temperature': 0.0, 'avg_logprob': -0.2612468678018321, 'compression_ratio': 1.5598290598290598, 'no_speech_prob': 0.04678063094615936}, {'id': 115, 'seek': 74418, 'start': 758.2199999999999, 'end': 764.06, 'text': ' was the first one who have kind of formulated this as a graph coloring problem and proposed', 'tokens': [51066, 390, 264, 700, 472, 567, 362, 733, 295, 48936, 341, 382, 257, 4295, 23198, 1154, 293, 10348, 51358], 'temperature': 0.0, 'avg_logprob': -0.2612468678018321, 'compression_ratio': 1.5598290598290598, 'no_speech_prob': 0.04678063094615936}, {'id': 116, 'seek': 74418, 'start': 764.06, 'end': 770.26, 'text': ' a solution to this. He made one key observation which is actually very simple. The sense that', 'tokens': [51358, 257, 3827, 281, 341, 13, 634, 1027, 472, 2141, 14816, 597, 307, 767, 588, 2199, 13, 440, 2020, 300, 51668], 'temperature': 0.0, 'avg_logprob': -0.2612468678018321, 'compression_ratio': 1.5598290598290598, 'no_speech_prob': 0.04678063094615936}, {'id': 117, 'seek': 77026, 'start': 770.26, 'end': 777.26, 'text': ' you take the interference graph and if there is any node with a degree less than K, strictly', 'tokens': [50364, 291, 747, 264, 24497, 4295, 293, 498, 456, 307, 604, 9984, 365, 257, 4314, 1570, 813, 591, 11, 20792, 50714], 'temperature': 0.0, 'avg_logprob': -0.183941220128259, 'compression_ratio': 1.9351351351351351, 'no_speech_prob': 0.07555064558982849}, {'id': 118, 'seek': 77026, 'start': 779.46, 'end': 786.46, 'text': ' less than K, then you can remove that node and then color the rest of the graph, sorry,', 'tokens': [50824, 1570, 813, 591, 11, 550, 291, 393, 4159, 300, 9984, 293, 550, 2017, 264, 1472, 295, 264, 4295, 11, 2597, 11, 51174], 'temperature': 0.0, 'avg_logprob': -0.183941220128259, 'compression_ratio': 1.9351351351351351, 'no_speech_prob': 0.07555064558982849}, {'id': 119, 'seek': 77026, 'start': 787.34, 'end': 792.86, 'text': ' and you can remove that node and you can keep applying this rule again and again and if', 'tokens': [51218, 293, 291, 393, 4159, 300, 9984, 293, 291, 393, 1066, 9275, 341, 4978, 797, 293, 797, 293, 498, 51494], 'temperature': 0.0, 'avg_logprob': -0.183941220128259, 'compression_ratio': 1.9351351351351351, 'no_speech_prob': 0.07555064558982849}, {'id': 120, 'seek': 77026, 'start': 792.86, 'end': 798.42, 'text': ' you are able to do this and then completely remove all the nodes from the graph then that', 'tokens': [51494, 291, 366, 1075, 281, 360, 341, 293, 550, 2584, 4159, 439, 264, 13891, 490, 264, 4295, 550, 300, 51772], 'temperature': 0.0, 'avg_logprob': -0.183941220128259, 'compression_ratio': 1.9351351351351351, 'no_speech_prob': 0.07555064558982849}, {'id': 121, 'seek': 79842, 'start': 798.42, 'end': 804.26, 'text': ' particular graph is K colorable, right. So, what is the idea? Take the graph, find out', 'tokens': [50364, 1729, 4295, 307, 591, 2017, 712, 11, 558, 13, 407, 11, 437, 307, 264, 1558, 30, 3664, 264, 4295, 11, 915, 484, 50656], 'temperature': 0.0, 'avg_logprob': -0.14979603950013506, 'compression_ratio': 1.7821782178217822, 'no_speech_prob': 0.015899043530225754}, {'id': 122, 'seek': 79842, 'start': 804.26, 'end': 810.62, 'text': ' if there is an edge, if there is a node with degree less than K, then remove that node', 'tokens': [50656, 498, 456, 307, 364, 4691, 11, 498, 456, 307, 257, 9984, 365, 4314, 1570, 813, 591, 11, 550, 4159, 300, 9984, 50974], 'temperature': 0.0, 'avg_logprob': -0.14979603950013506, 'compression_ratio': 1.7821782178217822, 'no_speech_prob': 0.015899043530225754}, {'id': 123, 'seek': 79842, 'start': 810.62, 'end': 817.62, 'text': ' along with all its edges, right. Keep doing this again and again and then if you are successful', 'tokens': [50974, 2051, 365, 439, 1080, 8819, 11, 558, 13, 5527, 884, 341, 797, 293, 797, 293, 550, 498, 291, 366, 4406, 51324], 'temperature': 0.0, 'avg_logprob': -0.14979603950013506, 'compression_ratio': 1.7821782178217822, 'no_speech_prob': 0.015899043530225754}, {'id': 124, 'seek': 79842, 'start': 819.6999999999999, 'end': 826.6999999999999, 'text': ' in removing all the nodes from the graph then that graph is K colorable, right. Let us see', 'tokens': [51428, 294, 12720, 439, 264, 13891, 490, 264, 4295, 550, 300, 4295, 307, 591, 2017, 712, 11, 558, 13, 961, 505, 536, 51778], 'temperature': 0.0, 'avg_logprob': -0.14979603950013506, 'compression_ratio': 1.7821782178217822, 'no_speech_prob': 0.015899043530225754}, {'id': 125, 'seek': 82670, 'start': 826.7800000000001, 'end': 833.7800000000001, 'text': ' why this is true or why this helps, right. So, let us take, we take a graph G, right', 'tokens': [50368, 983, 341, 307, 2074, 420, 983, 341, 3665, 11, 558, 13, 407, 11, 718, 505, 747, 11, 321, 747, 257, 4295, 460, 11, 558, 50718], 'temperature': 0.0, 'avg_logprob': -0.14974558980841385, 'compression_ratio': 1.6186046511627907, 'no_speech_prob': 0.005647912155836821}, {'id': 126, 'seek': 82670, 'start': 835.5, 'end': 840.86, 'text': ' and then remove one node which has degree less than K. The resulting node, resulting', 'tokens': [50804, 293, 550, 4159, 472, 9984, 597, 575, 4314, 1570, 813, 591, 13, 440, 16505, 9984, 11, 16505, 51072], 'temperature': 0.0, 'avg_logprob': -0.14974558980841385, 'compression_ratio': 1.6186046511627907, 'no_speech_prob': 0.005647912155836821}, {'id': 127, 'seek': 82670, 'start': 840.86, 'end': 847.86, 'text': ' graph let us call it as G prime, right. The question is if G prime is K colorable, then', 'tokens': [51072, 4295, 718, 505, 818, 309, 382, 460, 5835, 11, 558, 13, 440, 1168, 307, 498, 460, 5835, 307, 591, 2017, 712, 11, 550, 51422], 'temperature': 0.0, 'avg_logprob': -0.14974558980841385, 'compression_ratio': 1.6186046511627907, 'no_speech_prob': 0.005647912155836821}, {'id': 128, 'seek': 82670, 'start': 848.26, 'end': 855.26, 'text': ' G is also K colorable. Why? Because the node that you have removed only has K minus 1 edge', 'tokens': [51442, 460, 307, 611, 591, 2017, 712, 13, 1545, 30, 1436, 264, 9984, 300, 291, 362, 7261, 787, 575, 591, 3175, 502, 4691, 51792], 'temperature': 0.0, 'avg_logprob': -0.14974558980841385, 'compression_ratio': 1.6186046511627907, 'no_speech_prob': 0.005647912155836821}, {'id': 129, 'seek': 85670, 'start': 856.7, 'end': 863.7, 'text': ' at most K minus 1 edges, correct. So, it will at least have one spare color other than', 'tokens': [50364, 412, 881, 591, 3175, 502, 8819, 11, 3006, 13, 407, 11, 309, 486, 412, 1935, 362, 472, 13798, 2017, 661, 813, 50714], 'temperature': 0.0, 'avg_logprob': -0.16809502769919002, 'compression_ratio': 1.785, 'no_speech_prob': 0.0034405493643134832}, {'id': 130, 'seek': 85670, 'start': 863.98, 'end': 870.98, 'text': ' this K minus 1. That color can be given to that node, right. So, I have the graph G prime', 'tokens': [50728, 341, 591, 3175, 502, 13, 663, 2017, 393, 312, 2212, 281, 300, 9984, 11, 558, 13, 407, 11, 286, 362, 264, 4295, 460, 5835, 51078], 'temperature': 0.0, 'avg_logprob': -0.16809502769919002, 'compression_ratio': 1.785, 'no_speech_prob': 0.0034405493643134832}, {'id': 131, 'seek': 85670, 'start': 871.22, 'end': 878.22, 'text': ' and I have the node G, I mean I have the node N. This node has at most K minus 1 edges,', 'tokens': [51090, 293, 286, 362, 264, 9984, 460, 11, 286, 914, 286, 362, 264, 9984, 426, 13, 639, 9984, 575, 412, 881, 591, 3175, 502, 8819, 11, 51440], 'temperature': 0.0, 'avg_logprob': -0.16809502769919002, 'compression_ratio': 1.785, 'no_speech_prob': 0.0034405493643134832}, {'id': 132, 'seek': 85670, 'start': 878.22, 'end': 884.34, 'text': ' right. That means that it is going to be adjacent only to K minus 1 nodes and even if all of', 'tokens': [51440, 558, 13, 663, 1355, 300, 309, 307, 516, 281, 312, 24441, 787, 281, 591, 3175, 502, 13891, 293, 754, 498, 439, 295, 51746], 'temperature': 0.0, 'avg_logprob': -0.16809502769919002, 'compression_ratio': 1.785, 'no_speech_prob': 0.0034405493643134832}, {'id': 133, 'seek': 88434, 'start': 884.34, 'end': 890.3000000000001, 'text': ' these K minus 1 nodes have different colors, I have one more color to be given for this', 'tokens': [50364, 613, 591, 3175, 502, 13891, 362, 819, 4577, 11, 286, 362, 472, 544, 2017, 281, 312, 2212, 337, 341, 50662], 'temperature': 0.0, 'avg_logprob': -0.12001406428325608, 'compression_ratio': 1.6954314720812182, 'no_speech_prob': 0.007255425676703453}, {'id': 134, 'seek': 88434, 'start': 890.3000000000001, 'end': 897.3000000000001, 'text': ' node, correct. Therefore, if I color this graph with K colors,', 'tokens': [50662, 9984, 11, 3006, 13, 7504, 11, 498, 286, 2017, 341, 4295, 365, 591, 4577, 11, 51012], 'temperature': 0.0, 'avg_logprob': -0.12001406428325608, 'compression_ratio': 1.6954314720812182, 'no_speech_prob': 0.007255425676703453}, {'id': 135, 'seek': 88434, 'start': 897.3000000000001, 'end': 904.3000000000001, 'text': ' I can color this entire graph also using K colors, got it, right. So, you can now eliminate', 'tokens': [51012, 286, 393, 2017, 341, 2302, 4295, 611, 1228, 591, 4577, 11, 658, 309, 11, 558, 13, 407, 11, 291, 393, 586, 13819, 51362], 'temperature': 0.0, 'avg_logprob': -0.12001406428325608, 'compression_ratio': 1.6954314720812182, 'no_speech_prob': 0.007255425676703453}, {'id': 136, 'seek': 88434, 'start': 906.1800000000001, 'end': 913.1800000000001, 'text': ' this particular node and now you can apply this idea again and again and then keep removing', 'tokens': [51456, 341, 1729, 9984, 293, 586, 291, 393, 3079, 341, 1558, 797, 293, 797, 293, 550, 1066, 12720, 51806], 'temperature': 0.0, 'avg_logprob': -0.12001406428325608, 'compression_ratio': 1.6954314720812182, 'no_speech_prob': 0.007255425676703453}, {'id': 137, 'seek': 91318, 'start': 913.18, 'end': 920.18, 'text': ' nodes which are which have less than K edges, right. Why do we say strictly less than and', 'tokens': [50364, 13891, 597, 366, 597, 362, 1570, 813, 591, 8819, 11, 558, 13, 1545, 360, 321, 584, 20792, 1570, 813, 293, 50714], 'temperature': 0.0, 'avg_logprob': -0.17120073863438198, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.004988593515008688}, {'id': 138, 'seek': 91318, 'start': 920.78, 'end': 927.78, 'text': ' not less than or equal to? Because if it is equal to, then if the adjacent nodes all have', 'tokens': [50744, 406, 1570, 813, 420, 2681, 281, 30, 1436, 498, 309, 307, 2681, 281, 11, 550, 498, 264, 24441, 13891, 439, 362, 51094], 'temperature': 0.0, 'avg_logprob': -0.17120073863438198, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.004988593515008688}, {'id': 139, 'seek': 91318, 'start': 929.78, 'end': 936.78, 'text': ' different colors, then there will be no color left for this, right. Therefore, in that case,', 'tokens': [51194, 819, 4577, 11, 550, 456, 486, 312, 572, 2017, 1411, 337, 341, 11, 558, 13, 7504, 11, 294, 300, 1389, 11, 51544], 'temperature': 0.0, 'avg_logprob': -0.17120073863438198, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.004988593515008688}, {'id': 140, 'seek': 93678, 'start': 936.9, 'end': 943.9, 'text': ' if it is equal to K, we cannot guarantee that the entire G can be colored using K colors.', 'tokens': [50370, 498, 309, 307, 2681, 281, 591, 11, 321, 2644, 10815, 300, 264, 2302, 460, 393, 312, 14332, 1228, 591, 4577, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.1929078609385389, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.012505128048360348}, {'id': 141, 'seek': 93678, 'start': 944.26, 'end': 950.4599999999999, 'text': ' But if it is less than K, then if G prime is K colorable, then G is also K colorable,', 'tokens': [50738, 583, 498, 309, 307, 1570, 813, 591, 11, 550, 498, 460, 5835, 307, 591, 2017, 712, 11, 550, 460, 307, 611, 591, 2017, 712, 11, 51048], 'temperature': 0.0, 'avg_logprob': -0.1929078609385389, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.012505128048360348}, {'id': 142, 'seek': 93678, 'start': 950.4599999999999, 'end': 955.5, 'text': ' right. So, this is the simple observation that Chai then made and then using this he', 'tokens': [51048, 558, 13, 407, 11, 341, 307, 264, 2199, 14816, 300, 761, 1301, 550, 1027, 293, 550, 1228, 341, 415, 51300], 'temperature': 0.0, 'avg_logprob': -0.1929078609385389, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.012505128048360348}, {'id': 143, 'seek': 93678, 'start': 955.5, 'end': 962.5, 'text': ' proposed this graph coloring algorithm, right. So, let us see where this how this works and', 'tokens': [51300, 10348, 341, 4295, 23198, 9284, 11, 558, 13, 407, 11, 718, 505, 536, 689, 341, 577, 341, 1985, 293, 51650], 'temperature': 0.0, 'avg_logprob': -0.1929078609385389, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.012505128048360348}, {'id': 144, 'seek': 96250, 'start': 962.7, 'end': 969.7, 'text': ' right. Essentially, the idea is that you take the graph repeatedly, remove nodes which have', 'tokens': [50374, 558, 13, 23596, 11, 264, 1558, 307, 300, 291, 747, 264, 4295, 18227, 11, 4159, 13891, 597, 362, 50724], 'temperature': 0.0, 'avg_logprob': -0.18368509080674914, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.007076921872794628}, {'id': 145, 'seek': 96250, 'start': 970.74, 'end': 977.34, 'text': ' fewer than K colors, fewer than K edges, right. So, this step is what we are going to call', 'tokens': [50776, 13366, 813, 591, 4577, 11, 13366, 813, 591, 8819, 11, 558, 13, 407, 11, 341, 1823, 307, 437, 321, 366, 516, 281, 818, 51106], 'temperature': 0.0, 'avg_logprob': -0.18368509080674914, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.007076921872794628}, {'id': 146, 'seek': 96250, 'start': 977.34, 'end': 984.34, 'text': ' as the simplified step. Keep removing the nodes which have less than K edges, right.', 'tokens': [51106, 382, 264, 26335, 1823, 13, 5527, 12720, 264, 13891, 597, 362, 1570, 813, 591, 8819, 11, 558, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.18368509080674914, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.007076921872794628}, {'id': 147, 'seek': 96250, 'start': 985.56, 'end': 991.68, 'text': ' If you end up with an empty graph, then we are done. The simplified step is over. If', 'tokens': [51517, 759, 291, 917, 493, 365, 364, 6707, 4295, 11, 550, 321, 366, 1096, 13, 440, 26335, 1823, 307, 670, 13, 759, 51823], 'temperature': 0.0, 'avg_logprob': -0.18368509080674914, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.007076921872794628}, {'id': 148, 'seek': 99168, 'start': 991.76, 'end': 998.12, 'text': ' you end up with a graph in which all nodes have degree greater than or equal to K, then', 'tokens': [50368, 291, 917, 493, 365, 257, 4295, 294, 597, 439, 13891, 362, 4314, 5044, 813, 420, 2681, 281, 591, 11, 550, 50686], 'temperature': 0.0, 'avg_logprob': -0.15365049341222742, 'compression_ratio': 1.6431924882629108, 'no_speech_prob': 0.007166723255068064}, {'id': 149, 'seek': 99168, 'start': 998.12, 'end': 1005.12, 'text': ' you cannot do simplify anymore, right. At that point in stamp, you have to take the', 'tokens': [50686, 291, 2644, 360, 20460, 3602, 11, 558, 13, 1711, 300, 935, 294, 9921, 11, 291, 362, 281, 747, 264, 51036], 'temperature': 0.0, 'avg_logprob': -0.15365049341222742, 'compression_ratio': 1.6431924882629108, 'no_speech_prob': 0.007166723255068064}, {'id': 150, 'seek': 99168, 'start': 1005.1999999999999, 'end': 1012.1999999999999, 'text': ' decision to spill a variable because now you have a graph which has in which every node', 'tokens': [51040, 3537, 281, 22044, 257, 7006, 570, 586, 291, 362, 257, 4295, 597, 575, 294, 597, 633, 9984, 51390], 'temperature': 0.0, 'avg_logprob': -0.15365049341222742, 'compression_ratio': 1.6431924882629108, 'no_speech_prob': 0.007166723255068064}, {'id': 151, 'seek': 99168, 'start': 1012.8, 'end': 1019.8, 'text': ' has K or more edges. That means that it cannot, it may not be K colorable. It may not be K', 'tokens': [51420, 575, 591, 420, 544, 8819, 13, 663, 1355, 300, 309, 2644, 11, 309, 815, 406, 312, 591, 2017, 712, 13, 467, 815, 406, 312, 591, 51770], 'temperature': 0.0, 'avg_logprob': -0.15365049341222742, 'compression_ratio': 1.6431924882629108, 'no_speech_prob': 0.007166723255068064}, {'id': 152, 'seek': 101980, 'start': 1020.8, 'end': 1027.8, 'text': ' colorable, right. So, you decide and pick one node and then say that this node we are', 'tokens': [50414, 2017, 712, 11, 558, 13, 407, 11, 291, 4536, 293, 1888, 472, 9984, 293, 550, 584, 300, 341, 9984, 321, 366, 50764], 'temperature': 0.0, 'avg_logprob': -0.1583162130311478, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.0054850331507623196}, {'id': 153, 'seek': 101980, 'start': 1028.2, 'end': 1035.2, 'text': ' going to spill. Then you remove that node with all the associated edges, right. Now,', 'tokens': [50784, 516, 281, 22044, 13, 1396, 291, 4159, 300, 9984, 365, 439, 264, 6615, 8819, 11, 558, 13, 823, 11, 51134], 'temperature': 0.0, 'avg_logprob': -0.1583162130311478, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.0054850331507623196}, {'id': 154, 'seek': 101980, 'start': 1035.32, 'end': 1041.04, 'text': ' you have a reduced graph. Now, again start doing your simplify operation. If you can', 'tokens': [51140, 291, 362, 257, 9212, 4295, 13, 823, 11, 797, 722, 884, 428, 20460, 6916, 13, 759, 291, 393, 51426], 'temperature': 0.0, 'avg_logprob': -0.1583162130311478, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.0054850331507623196}, {'id': 155, 'seek': 101980, 'start': 1041.04, 'end': 1047.9199999999998, 'text': ' keep removing more nodes with you know edges a degree less than K, keep removing them.', 'tokens': [51426, 1066, 12720, 544, 13891, 365, 291, 458, 8819, 257, 4314, 1570, 813, 591, 11, 1066, 12720, 552, 13, 51770], 'temperature': 0.0, 'avg_logprob': -0.1583162130311478, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.0054850331507623196}, {'id': 156, 'seek': 104792, 'start': 1047.92, 'end': 1053.1000000000001, 'text': ' If you end up again in a graph in which all nodes have K or more edges, then make one', 'tokens': [50364, 759, 291, 917, 493, 797, 294, 257, 4295, 294, 597, 439, 13891, 362, 591, 420, 544, 8819, 11, 550, 652, 472, 50623], 'temperature': 0.0, 'avg_logprob': -0.19120245821335735, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.014120516367256641}, {'id': 157, 'seek': 104792, 'start': 1053.1000000000001, 'end': 1060.1000000000001, 'text': ' more spill decision. Like this you iterate, right. You cannot, right. The processor does', 'tokens': [50623, 544, 22044, 3537, 13, 1743, 341, 291, 44497, 11, 558, 13, 509, 2644, 11, 558, 13, 440, 15321, 775, 50973], 'temperature': 0.0, 'avg_logprob': -0.19120245821335735, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.014120516367256641}, {'id': 158, 'seek': 104792, 'start': 1064.76, 'end': 1071.76, 'text': ' not have more than K registers, right. You remember it. You are doing it for a specific', 'tokens': [51206, 406, 362, 544, 813, 591, 38351, 11, 558, 13, 509, 1604, 309, 13, 509, 366, 884, 309, 337, 257, 2685, 51556], 'temperature': 0.0, 'avg_logprob': -0.19120245821335735, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.014120516367256641}, {'id': 159, 'seek': 107176, 'start': 1071.76, 'end': 1078.76, 'text': ' reason, right. Okay. So, yes. Not arbitrary. One of the nodes which has degree greater', 'tokens': [50364, 1778, 11, 558, 13, 1033, 13, 407, 11, 2086, 13, 1726, 23211, 13, 1485, 295, 264, 13891, 597, 575, 4314, 5044, 50714], 'temperature': 0.0, 'avg_logprob': -0.29108736038208005, 'compression_ratio': 1.4710743801652892, 'no_speech_prob': 0.06231854856014252}, {'id': 160, 'seek': 107176, 'start': 1086.32, 'end': 1093.32, 'text': ' than K, yes. Possibly. Among the nodes which have degree greater than K, which one to pick?', 'tokens': [51092, 813, 591, 11, 2086, 13, 33112, 3545, 13, 16119, 264, 13891, 597, 362, 4314, 5044, 813, 591, 11, 597, 472, 281, 1888, 30, 51442], 'temperature': 0.0, 'avg_logprob': -0.29108736038208005, 'compression_ratio': 1.4710743801652892, 'no_speech_prob': 0.06231854856014252}, {'id': 161, 'seek': 109332, 'start': 1094.32, 'end': 1101.32, 'text': ' You are saying pick one with certain heuristics. Possibly. We will talk about that. We will', 'tokens': [50414, 509, 366, 1566, 1888, 472, 365, 1629, 415, 374, 6006, 13, 33112, 3545, 13, 492, 486, 751, 466, 300, 13, 492, 486, 50764], 'temperature': 0.0, 'avg_logprob': -0.22024323723532938, 'compression_ratio': 1.625, 'no_speech_prob': 0.014962827786803246}, {'id': 162, 'seek': 109332, 'start': 1102.56, 'end': 1108.36, 'text': ' come back to that point, right. Okay. So, essentially the algorithm works in the following', 'tokens': [50826, 808, 646, 281, 300, 935, 11, 558, 13, 1033, 13, 407, 11, 4476, 264, 9284, 1985, 294, 264, 3480, 51116], 'temperature': 0.0, 'avg_logprob': -0.22024323723532938, 'compression_ratio': 1.625, 'no_speech_prob': 0.014962827786803246}, {'id': 163, 'seek': 109332, 'start': 1108.36, 'end': 1115.36, 'text': ' way, right. Given a program, you compute all the live ranges, build the interference graph,', 'tokens': [51116, 636, 11, 558, 13, 18600, 257, 1461, 11, 291, 14722, 439, 264, 1621, 22526, 11, 1322, 264, 24497, 4295, 11, 51466], 'temperature': 0.0, 'avg_logprob': -0.22024323723532938, 'compression_ratio': 1.625, 'no_speech_prob': 0.014962827786803246}, {'id': 164, 'seek': 109332, 'start': 1115.4399999999998, 'end': 1120.8, 'text': ' right. After you have built the interference graph, do this simplify operation. What does', 'tokens': [51470, 558, 13, 2381, 291, 362, 3094, 264, 24497, 4295, 11, 360, 341, 20460, 6916, 13, 708, 775, 51738], 'temperature': 0.0, 'avg_logprob': -0.22024323723532938, 'compression_ratio': 1.625, 'no_speech_prob': 0.014962827786803246}, {'id': 165, 'seek': 112080, 'start': 1120.8, 'end': 1127.32, 'text': ' simplify do? Keep removing nodes with degree less than or equal to, sorry less than K,', 'tokens': [50364, 20460, 360, 30, 5527, 12720, 13891, 365, 4314, 1570, 813, 420, 2681, 281, 11, 2597, 1570, 813, 591, 11, 50690], 'temperature': 0.0, 'avg_logprob': -0.21042791534872615, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.019582806155085564}, {'id': 166, 'seek': 112080, 'start': 1127.32, 'end': 1134.32, 'text': ' not less than or equal to, degree less than K. If the simplify process is completely over,', 'tokens': [50690, 406, 1570, 813, 420, 2681, 281, 11, 4314, 1570, 813, 591, 13, 759, 264, 20460, 1399, 307, 2584, 670, 11, 51040], 'temperature': 0.0, 'avg_logprob': -0.21042791534872615, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.019582806155085564}, {'id': 167, 'seek': 112080, 'start': 1134.56, 'end': 1141.56, 'text': ' right. So, if you cannot simplify, then select a node and spill and then go back again and', 'tokens': [51052, 558, 13, 407, 11, 498, 291, 2644, 20460, 11, 550, 3048, 257, 9984, 293, 22044, 293, 550, 352, 646, 797, 293, 51402], 'temperature': 0.0, 'avg_logprob': -0.21042791534872615, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.019582806155085564}, {'id': 168, 'seek': 114156, 'start': 1142.56, 'end': 1149.56, 'text': ' then try to do simplify. And if you cannot do again, do this process. After having done', 'tokens': [50414, 550, 853, 281, 360, 20460, 13, 400, 498, 291, 2644, 360, 797, 11, 360, 341, 1399, 13, 2381, 1419, 1096, 50764], 'temperature': 0.0, 'avg_logprob': -0.2032191685267857, 'compression_ratio': 1.8257261410788381, 'no_speech_prob': 0.007950385101139545}, {'id': 169, 'seek': 114156, 'start': 1151.1599999999999, 'end': 1155.8, 'text': ' this, then what you are going to do is that we are once you have simplified the entire', 'tokens': [50844, 341, 11, 550, 437, 291, 366, 516, 281, 360, 307, 300, 321, 366, 1564, 291, 362, 26335, 264, 2302, 51076], 'temperature': 0.0, 'avg_logprob': -0.2032191685267857, 'compression_ratio': 1.8257261410788381, 'no_speech_prob': 0.007950385101139545}, {'id': 170, 'seek': 114156, 'start': 1155.8, 'end': 1161.32, 'text': ' graph, right. After this entire process, you would have simplified and you would have got', 'tokens': [51076, 4295, 11, 558, 13, 2381, 341, 2302, 1399, 11, 291, 576, 362, 26335, 293, 291, 576, 362, 658, 51352], 'temperature': 0.0, 'avg_logprob': -0.2032191685267857, 'compression_ratio': 1.8257261410788381, 'no_speech_prob': 0.007950385101139545}, {'id': 171, 'seek': 114156, 'start': 1161.32, 'end': 1165.8, 'text': ' all the nodes being removed. We need to do the coloring part which is not described in', 'tokens': [51352, 439, 264, 13891, 885, 7261, 13, 492, 643, 281, 360, 264, 23198, 644, 597, 307, 406, 7619, 294, 51576], 'temperature': 0.0, 'avg_logprob': -0.2032191685267857, 'compression_ratio': 1.8257261410788381, 'no_speech_prob': 0.007950385101139545}, {'id': 172, 'seek': 114156, 'start': 1165.8, 'end': 1169.6799999999998, 'text': ' this diagram. I will talk about that later and that is really what is called the reverse', 'tokens': [51576, 341, 10686, 13, 286, 486, 751, 466, 300, 1780, 293, 300, 307, 534, 437, 307, 1219, 264, 9943, 51770], 'temperature': 0.0, 'avg_logprob': -0.2032191685267857, 'compression_ratio': 1.8257261410788381, 'no_speech_prob': 0.007950385101139545}, {'id': 173, 'seek': 116968, 'start': 1169.68, 'end': 1175.68, 'text': ' path. This figure has been wrongly drawn, okay. We will talk about that. So, here is', 'tokens': [50364, 3100, 13, 639, 2573, 575, 668, 2085, 356, 10117, 11, 1392, 13, 492, 486, 751, 466, 300, 13, 407, 11, 510, 307, 50664], 'temperature': 0.0, 'avg_logprob': -0.1453652234421563, 'compression_ratio': 1.5610859728506787, 'no_speech_prob': 0.014811438508331776}, {'id': 174, 'seek': 116968, 'start': 1175.68, 'end': 1182.2, 'text': ' the algorithm for doing this, okay. Before I go into that, maybe I can just talk about', 'tokens': [50664, 264, 9284, 337, 884, 341, 11, 1392, 13, 4546, 286, 352, 666, 300, 11, 1310, 286, 393, 445, 751, 466, 50990], 'temperature': 0.0, 'avg_logprob': -0.1453652234421563, 'compression_ratio': 1.5610859728506787, 'no_speech_prob': 0.014811438508331776}, {'id': 175, 'seek': 116968, 'start': 1182.2, 'end': 1188.0, 'text': ' it here. So, what I do is that whenever I do simplify, what did I say? You can remove', 'tokens': [50990, 309, 510, 13, 407, 11, 437, 286, 360, 307, 300, 5699, 286, 360, 20460, 11, 437, 630, 286, 584, 30, 509, 393, 4159, 51280], 'temperature': 0.0, 'avg_logprob': -0.1453652234421563, 'compression_ratio': 1.5610859728506787, 'no_speech_prob': 0.014811438508331776}, {'id': 176, 'seek': 116968, 'start': 1188.0, 'end': 1195.0, 'text': ' a node from the graph and if it has less than K edges, then we know that if the rest of', 'tokens': [51280, 257, 9984, 490, 264, 4295, 293, 498, 309, 575, 1570, 813, 591, 8819, 11, 550, 321, 458, 300, 498, 264, 1472, 295, 51630], 'temperature': 0.0, 'avg_logprob': -0.1453652234421563, 'compression_ratio': 1.5610859728506787, 'no_speech_prob': 0.014811438508331776}, {'id': 177, 'seek': 119500, 'start': 1195.0, 'end': 1200.08, 'text': ' the graph can be colored, then this can be colored, correct. So, that means that when', 'tokens': [50364, 264, 4295, 393, 312, 14332, 11, 550, 341, 393, 312, 14332, 11, 3006, 13, 407, 11, 300, 1355, 300, 562, 50618], 'temperature': 0.0, 'avg_logprob': -0.13034486770629883, 'compression_ratio': 2.0092165898617513, 'no_speech_prob': 0.00231559039093554}, {'id': 178, 'seek': 119500, 'start': 1200.08, 'end': 1206.72, 'text': ' I want to color this graph, first I should color this part and after having colored this', 'tokens': [50618, 286, 528, 281, 2017, 341, 4295, 11, 700, 286, 820, 2017, 341, 644, 293, 934, 1419, 14332, 341, 50950], 'temperature': 0.0, 'avg_logprob': -0.13034486770629883, 'compression_ratio': 2.0092165898617513, 'no_speech_prob': 0.00231559039093554}, {'id': 179, 'seek': 119500, 'start': 1206.72, 'end': 1212.4, 'text': ' part, I can come and color this node. Then I remove one more node and I have some other', 'tokens': [50950, 644, 11, 286, 393, 808, 293, 2017, 341, 9984, 13, 1396, 286, 4159, 472, 544, 9984, 293, 286, 362, 512, 661, 51234], 'temperature': 0.0, 'avg_logprob': -0.13034486770629883, 'compression_ratio': 2.0092165898617513, 'no_speech_prob': 0.00231559039093554}, {'id': 180, 'seek': 119500, 'start': 1212.4, 'end': 1219.4, 'text': ' graph. What do I say? Color that remaining graph, color this node and then color this', 'tokens': [51234, 4295, 13, 708, 360, 286, 584, 30, 10458, 300, 8877, 4295, 11, 2017, 341, 9984, 293, 550, 2017, 341, 51584], 'temperature': 0.0, 'avg_logprob': -0.13034486770629883, 'compression_ratio': 2.0092165898617513, 'no_speech_prob': 0.00231559039093554}, {'id': 181, 'seek': 119500, 'start': 1219.44, 'end': 1224.4, 'text': ' node. So, what we are going to do is that we are going to color the node in the reverse', 'tokens': [51586, 9984, 13, 407, 11, 437, 321, 366, 516, 281, 360, 307, 300, 321, 366, 516, 281, 2017, 264, 9984, 294, 264, 9943, 51834], 'temperature': 0.0, 'avg_logprob': -0.13034486770629883, 'compression_ratio': 2.0092165898617513, 'no_speech_prob': 0.00231559039093554}, {'id': 182, 'seek': 122440, 'start': 1224.4, 'end': 1230.3600000000001, 'text': ' order in which they have been simplified. That means the first one which I have removed', 'tokens': [50364, 1668, 294, 597, 436, 362, 668, 26335, 13, 663, 1355, 264, 700, 472, 597, 286, 362, 7261, 50662], 'temperature': 0.0, 'avg_logprob': -0.11281142144832972, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.025058450177311897}, {'id': 183, 'seek': 122440, 'start': 1230.3600000000001, 'end': 1235.92, 'text': ' would be the last one to be assigned a color, correct. That means that I need to use some', 'tokens': [50662, 576, 312, 264, 1036, 472, 281, 312, 13279, 257, 2017, 11, 3006, 13, 663, 1355, 300, 286, 643, 281, 764, 512, 50940], 'temperature': 0.0, 'avg_logprob': -0.11281142144832972, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.025058450177311897}, {'id': 184, 'seek': 122440, 'start': 1235.92, 'end': 1241.8000000000002, 'text': ' kind of a data structure to remember in what order I am removing the nodes. Since I am', 'tokens': [50940, 733, 295, 257, 1412, 3877, 281, 1604, 294, 437, 1668, 286, 669, 12720, 264, 13891, 13, 4162, 286, 669, 51234], 'temperature': 0.0, 'avg_logprob': -0.11281142144832972, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.025058450177311897}, {'id': 185, 'seek': 122440, 'start': 1241.8000000000002, 'end': 1247.24, 'text': ' going to color them in the reverse order, the obvious data structure is a stack. So,', 'tokens': [51234, 516, 281, 2017, 552, 294, 264, 9943, 1668, 11, 264, 6322, 1412, 3877, 307, 257, 8630, 13, 407, 11, 51506], 'temperature': 0.0, 'avg_logprob': -0.11281142144832972, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.025058450177311897}, {'id': 186, 'seek': 122440, 'start': 1247.24, 'end': 1254.24, 'text': ' as you keep removing the nodes, you keep pushing them into a stack with an annotation saying', 'tokens': [51506, 382, 291, 1066, 12720, 264, 13891, 11, 291, 1066, 7380, 552, 666, 257, 8630, 365, 364, 48654, 1566, 51856], 'temperature': 0.0, 'avg_logprob': -0.11281142144832972, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.025058450177311897}, {'id': 187, 'seek': 125424, 'start': 1254.24, 'end': 1260.1200000000001, 'text': ' that whether this is removed because you have fewer than k edges or you have removed', 'tokens': [50364, 300, 1968, 341, 307, 7261, 570, 291, 362, 13366, 813, 350, 8819, 420, 291, 362, 7261, 50658], 'temperature': 0.0, 'avg_logprob': -0.1475408931948104, 'compression_ratio': 1.9865470852017937, 'no_speech_prob': 0.006009429227560759}, {'id': 188, 'seek': 125424, 'start': 1260.1200000000001, 'end': 1265.1200000000001, 'text': ' it because you decided as a spill candidate, correct. So, these are the two possibilities.', 'tokens': [50658, 309, 570, 291, 3047, 382, 257, 22044, 11532, 11, 3006, 13, 407, 11, 613, 366, 264, 732, 12178, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.1475408931948104, 'compression_ratio': 1.9865470852017937, 'no_speech_prob': 0.006009429227560759}, {'id': 189, 'seek': 125424, 'start': 1265.1200000000001, 'end': 1271.08, 'text': ' Whenever you remove a node, you remove it because it has fewer than k edges. Therefore,', 'tokens': [50908, 14159, 291, 4159, 257, 9984, 11, 291, 4159, 309, 570, 309, 575, 13366, 813, 350, 8819, 13, 7504, 11, 51206], 'temperature': 0.0, 'avg_logprob': -0.1475408931948104, 'compression_ratio': 1.9865470852017937, 'no_speech_prob': 0.006009429227560759}, {'id': 190, 'seek': 125424, 'start': 1271.08, 'end': 1275.48, 'text': ' there is no spill that is required for that. But if you have removed it because no other', 'tokens': [51206, 456, 307, 572, 22044, 300, 307, 4739, 337, 300, 13, 583, 498, 291, 362, 7261, 309, 570, 572, 661, 51426], 'temperature': 0.0, 'avg_logprob': -0.1475408931948104, 'compression_ratio': 1.9865470852017937, 'no_speech_prob': 0.006009429227560759}, {'id': 191, 'seek': 125424, 'start': 1275.48, 'end': 1280.68, 'text': ' nodes can be removed, you chose this as a spill candidate, then it is going to be spilled.', 'tokens': [51426, 13891, 393, 312, 7261, 11, 291, 5111, 341, 382, 257, 22044, 11532, 11, 550, 309, 307, 516, 281, 312, 37833, 13, 51686], 'temperature': 0.0, 'avg_logprob': -0.1475408931948104, 'compression_ratio': 1.9865470852017937, 'no_speech_prob': 0.006009429227560759}, {'id': 192, 'seek': 128068, 'start': 1281.1200000000001, 'end': 1288.1200000000001, 'text': ' So with that information, you actually push it into a stack. Now, sorry, yeah, go ahead.', 'tokens': [50386, 407, 365, 300, 1589, 11, 291, 767, 2944, 309, 666, 257, 8630, 13, 823, 11, 2597, 11, 1338, 11, 352, 2286, 13, 50736], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 193, 'seek': 128068, 'start': 1288.1200000000001, 'end': 1292.3200000000002, 'text': ' Instead of removing from the graph, can you merge two nodes?', 'tokens': [50736, 7156, 295, 12720, 490, 264, 4295, 11, 393, 291, 22183, 732, 13891, 30, 50946], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 194, 'seek': 128068, 'start': 1292.3200000000002, 'end': 1297.16, 'text': ' You may not be able to merge two nodes, right, because these may be two different variables.', 'tokens': [50946, 509, 815, 406, 312, 1075, 281, 22183, 732, 13891, 11, 558, 11, 570, 613, 815, 312, 732, 819, 9102, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 195, 'seek': 128068, 'start': 1297.16, 'end': 1303.92, 'text': ' They may be having different values, right. But hold on to your question of merging. It', 'tokens': [51188, 814, 815, 312, 1419, 819, 4190, 11, 558, 13, 583, 1797, 322, 281, 428, 1168, 295, 44559, 13, 467, 51526], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 196, 'seek': 128068, 'start': 1303.92, 'end': 1304.92, 'text': ' is actually a…', 'tokens': [51526, 307, 767, 257, 1260, 51576], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 197, 'seek': 128068, 'start': 1304.92, 'end': 1305.92, 'text': ' It is the same register.', 'tokens': [51576, 467, 307, 264, 912, 7280, 13, 51626], 'temperature': 0.0, 'avg_logprob': -0.3564262000881896, 'compression_ratio': 1.5829787234042554, 'no_speech_prob': 0.2803198993206024}, {'id': 198, 'seek': 130592, 'start': 1306.16, 'end': 1311.3600000000001, 'text': ' Yeah, you cannot, yeah, okay. So, let me ask you the question in the following way. So,', 'tokens': [50376, 865, 11, 291, 2644, 11, 1338, 11, 1392, 13, 407, 11, 718, 385, 1029, 291, 264, 1168, 294, 264, 3480, 636, 13, 407, 11, 50636], 'temperature': 0.0, 'avg_logprob': -0.2975327541953639, 'compression_ratio': 1.586046511627907, 'no_speech_prob': 0.12535588443279266}, {'id': 199, 'seek': 130592, 'start': 1311.3600000000001, 'end': 1317.52, 'text': ' two nodes represent two different variables. When can you say that they will, they can', 'tokens': [50636, 732, 13891, 2906, 732, 819, 9102, 13, 1133, 393, 291, 584, 300, 436, 486, 11, 436, 393, 50944], 'temperature': 0.0, 'avg_logprob': -0.2975327541953639, 'compression_ratio': 1.586046511627907, 'no_speech_prob': 0.12535588443279266}, {'id': 200, 'seek': 130592, 'start': 1317.52, 'end': 1318.52, 'text': ' be merged?', 'tokens': [50944, 312, 36427, 30, 50994], 'temperature': 0.0, 'avg_logprob': -0.2975327541953639, 'compression_ratio': 1.586046511627907, 'no_speech_prob': 0.12535588443279266}, {'id': 201, 'seek': 130592, 'start': 1318.52, 'end': 1323.52, 'text': ' They have all the same numbers and there is no less connecting there.', 'tokens': [50994, 814, 362, 439, 264, 912, 3547, 293, 456, 307, 572, 1570, 11015, 456, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.2975327541953639, 'compression_ratio': 1.586046511627907, 'no_speech_prob': 0.12535588443279266}, {'id': 202, 'seek': 130592, 'start': 1323.52, 'end': 1329.52, 'text': ' No, no, no, do not think of this just as a graph, okay. The graph also has a meaning,', 'tokens': [51244, 883, 11, 572, 11, 572, 11, 360, 406, 519, 295, 341, 445, 382, 257, 4295, 11, 1392, 13, 440, 4295, 611, 575, 257, 3620, 11, 51544], 'temperature': 0.0, 'avg_logprob': -0.2975327541953639, 'compression_ratio': 1.586046511627907, 'no_speech_prob': 0.12535588443279266}, {'id': 203, 'seek': 132952, 'start': 1330.12, 'end': 1335.72, 'text': ' right. One of them is S 1, variable S 1. Another is variable S 2. Can I say S 1 is', 'tokens': [50394, 558, 13, 1485, 295, 552, 307, 318, 502, 11, 7006, 318, 502, 13, 3996, 307, 7006, 318, 568, 13, 1664, 286, 584, 318, 502, 307, 50674], 'temperature': 0.0, 'avg_logprob': -0.19779237111409506, 'compression_ratio': 1.6388888888888888, 'no_speech_prob': 0.13654795289039612}, {'id': 204, 'seek': 132952, 'start': 1335.72, 'end': 1342.72, 'text': ' equal to S 2? S 1 has computed something. S 1 maybe has computed i plus 4. S 2 has computed,', 'tokens': [50674, 2681, 281, 318, 568, 30, 318, 502, 575, 40610, 746, 13, 318, 502, 1310, 575, 40610, 741, 1804, 1017, 13, 318, 568, 575, 40610, 11, 51024], 'temperature': 0.0, 'avg_logprob': -0.19779237111409506, 'compression_ratio': 1.6388888888888888, 'no_speech_prob': 0.13654795289039612}, {'id': 205, 'seek': 132952, 'start': 1342.72, 'end': 1349.72, 'text': ' let us say j times 4. Are these two variables the same? Temporary is the same. How can I', 'tokens': [51024, 718, 505, 584, 361, 1413, 1017, 13, 2014, 613, 732, 9102, 264, 912, 30, 8095, 2816, 822, 307, 264, 912, 13, 1012, 393, 286, 51374], 'temperature': 0.0, 'avg_logprob': -0.19779237111409506, 'compression_ratio': 1.6388888888888888, 'no_speech_prob': 0.13654795289039612}, {'id': 206, 'seek': 132952, 'start': 1349.72, 'end': 1355.72, 'text': ' merge them? I cannot. Strictly speaking, I cannot. But there is a point in what you said.', 'tokens': [51374, 22183, 552, 30, 286, 2644, 13, 745, 3740, 356, 4124, 11, 286, 2644, 13, 583, 456, 307, 257, 935, 294, 437, 291, 848, 13, 51674], 'temperature': 0.0, 'avg_logprob': -0.19779237111409506, 'compression_ratio': 1.6388888888888888, 'no_speech_prob': 0.13654795289039612}, {'id': 207, 'seek': 135572, 'start': 1356.42, 'end': 1363.1200000000001, 'text': ' If they have the same value, correct, then I can merge them. If they evaluate the same', 'tokens': [50399, 759, 436, 362, 264, 912, 2158, 11, 3006, 11, 550, 286, 393, 22183, 552, 13, 759, 436, 13059, 264, 912, 50734], 'temperature': 0.0, 'avg_logprob': -0.14792315503384204, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.1031612977385521}, {'id': 208, 'seek': 135572, 'start': 1363.1200000000001, 'end': 1370.1200000000001, 'text': ' thing, then I can merge them, right. That is possible. That we will talk about it little', 'tokens': [50734, 551, 11, 550, 286, 393, 22183, 552, 11, 558, 13, 663, 307, 1944, 13, 663, 321, 486, 751, 466, 309, 707, 51084], 'temperature': 0.0, 'avg_logprob': -0.14792315503384204, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.1031612977385521}, {'id': 209, 'seek': 135572, 'start': 1370.1200000000001, 'end': 1375.24, 'text': ' later, right. So, that is why you cannot say that if node 1 and node 2 are connecting to', 'tokens': [51084, 1780, 11, 558, 13, 407, 11, 300, 307, 983, 291, 2644, 584, 300, 498, 9984, 502, 293, 9984, 568, 366, 11015, 281, 51340], 'temperature': 0.0, 'avg_logprob': -0.14792315503384204, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.1031612977385521}, {'id': 210, 'seek': 135572, 'start': 1375.24, 'end': 1380.52, 'text': ' the same set of edges, I can merge them. No, because these two are two different variables.', 'tokens': [51340, 264, 912, 992, 295, 8819, 11, 286, 393, 22183, 552, 13, 883, 11, 570, 613, 732, 366, 732, 819, 9102, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.14792315503384204, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.1031612977385521}, {'id': 211, 'seek': 138052, 'start': 1380.52, 'end': 1387.52, 'text': ' They possibly hold different values, right. If I merge them, then my program is different,', 'tokens': [50364, 814, 6264, 1797, 819, 4190, 11, 558, 13, 759, 286, 22183, 552, 11, 550, 452, 1461, 307, 819, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.18688797500898252, 'compression_ratio': 1.735408560311284, 'no_speech_prob': 0.1601835936307907}, {'id': 212, 'seek': 138052, 'start': 1387.52, 'end': 1393.4, 'text': ' correct. Yes, sir. Okay. So, what we are going to do is that during the simplify phase as', 'tokens': [50714, 3006, 13, 1079, 11, 4735, 13, 1033, 13, 407, 11, 437, 321, 366, 516, 281, 360, 307, 300, 1830, 264, 20460, 5574, 382, 51008], 'temperature': 0.0, 'avg_logprob': -0.18688797500898252, 'compression_ratio': 1.735408560311284, 'no_speech_prob': 0.1601835936307907}, {'id': 213, 'seek': 138052, 'start': 1393.4, 'end': 1397.6399999999999, 'text': ' we keep removing the nodes, we are going to push them into the stack with the annotation', 'tokens': [51008, 321, 1066, 12720, 264, 13891, 11, 321, 366, 516, 281, 2944, 552, 666, 264, 8630, 365, 264, 48654, 51220], 'temperature': 0.0, 'avg_logprob': -0.18688797500898252, 'compression_ratio': 1.735408560311284, 'no_speech_prob': 0.1601835936307907}, {'id': 214, 'seek': 138052, 'start': 1397.6399999999999, 'end': 1403.6, 'text': ' whether they are removed because they have fewer edges or because they are spill candidates.', 'tokens': [51220, 1968, 436, 366, 7261, 570, 436, 362, 13366, 8819, 420, 570, 436, 366, 22044, 11255, 13, 51518], 'temperature': 0.0, 'avg_logprob': -0.18688797500898252, 'compression_ratio': 1.735408560311284, 'no_speech_prob': 0.1601835936307907}, {'id': 215, 'seek': 138052, 'start': 1403.6, 'end': 1407.8799999999999, 'text': ' Then when you want to color them, you pop these nodes from the stack and then color', 'tokens': [51518, 1396, 562, 291, 528, 281, 2017, 552, 11, 291, 1665, 613, 13891, 490, 264, 8630, 293, 550, 2017, 51732], 'temperature': 0.0, 'avg_logprob': -0.18688797500898252, 'compression_ratio': 1.735408560311284, 'no_speech_prob': 0.1601835936307907}, {'id': 216, 'seek': 140788, 'start': 1407.96, 'end': 1413.8400000000001, 'text': ' them. And as you color them, you keep adding these edges back into the graph and then see', 'tokens': [50368, 552, 13, 400, 382, 291, 2017, 552, 11, 291, 1066, 5127, 613, 8819, 646, 666, 264, 4295, 293, 550, 536, 50662], 'temperature': 0.0, 'avg_logprob': -0.16922758973163107, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.212489515542984}, {'id': 217, 'seek': 140788, 'start': 1413.8400000000001, 'end': 1419.1200000000001, 'text': ' how new colors can be assigned. So, we will go through that process, right, using an example.', 'tokens': [50662, 577, 777, 4577, 393, 312, 13279, 13, 407, 11, 321, 486, 352, 807, 300, 1399, 11, 558, 11, 1228, 364, 1365, 13, 50926], 'temperature': 0.0, 'avg_logprob': -0.16922758973163107, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.212489515542984}, {'id': 218, 'seek': 140788, 'start': 1419.1200000000001, 'end': 1424.8000000000002, 'text': ' But before that, here is this entire algorithm, okay. So, in the forward pass, what you do', 'tokens': [50926, 583, 949, 300, 11, 510, 307, 341, 2302, 9284, 11, 1392, 13, 407, 11, 294, 264, 2128, 1320, 11, 437, 291, 360, 51210], 'temperature': 0.0, 'avg_logprob': -0.16922758973163107, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.212489515542984}, {'id': 219, 'seek': 140788, 'start': 1424.8000000000002, 'end': 1431.0800000000002, 'text': ' is that you after, so first step is of course building the interference graph. Then you', 'tokens': [51210, 307, 300, 291, 934, 11, 370, 700, 1823, 307, 295, 1164, 2390, 264, 24497, 4295, 13, 1396, 291, 51524], 'temperature': 0.0, 'avg_logprob': -0.16922758973163107, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.212489515542984}, {'id': 220, 'seek': 143108, 'start': 1431.08, 'end': 1439.04, 'text': ' keep doing this repeatedly. If G has a node V such that its degree is less than K, right,', 'tokens': [50364, 1066, 884, 341, 18227, 13, 759, 460, 575, 257, 9984, 691, 1270, 300, 1080, 4314, 307, 1570, 813, 591, 11, 558, 11, 50762], 'temperature': 0.0, 'avg_logprob': -0.1616842823643838, 'compression_ratio': 1.6839622641509433, 'no_speech_prob': 0.14479349553585052}, {'id': 221, 'seek': 143108, 'start': 1439.04, 'end': 1445.6999999999998, 'text': ' number of neighbors is less than K, then you can do the simplify step, remove this node,', 'tokens': [50762, 1230, 295, 12512, 307, 1570, 813, 591, 11, 550, 291, 393, 360, 264, 20460, 1823, 11, 4159, 341, 9984, 11, 51095], 'temperature': 0.0, 'avg_logprob': -0.1616842823643838, 'compression_ratio': 1.6839622641509433, 'no_speech_prob': 0.14479349553585052}, {'id': 222, 'seek': 143108, 'start': 1445.6999999999998, 'end': 1450.08, 'text': ' push it into the stack and say there is no spill for this node, right, that this is going', 'tokens': [51095, 2944, 309, 666, 264, 8630, 293, 584, 456, 307, 572, 22044, 337, 341, 9984, 11, 558, 11, 300, 341, 307, 516, 51314], 'temperature': 0.0, 'avg_logprob': -0.1616842823643838, 'compression_ratio': 1.6839622641509433, 'no_speech_prob': 0.14479349553585052}, {'id': 223, 'seek': 143108, 'start': 1450.08, 'end': 1456.12, 'text': ' to be allocated a register, right. After this step, you delete the node V along with all', 'tokens': [51314, 281, 312, 29772, 257, 7280, 11, 558, 13, 2381, 341, 1823, 11, 291, 12097, 264, 9984, 691, 2051, 365, 439, 51616], 'temperature': 0.0, 'avg_logprob': -0.1616842823643838, 'compression_ratio': 1.6839622641509433, 'no_speech_prob': 0.14479349553585052}, {'id': 224, 'seek': 145612, 'start': 1456.2399999999998, 'end': 1461.8, 'text': ' the edges, all the edges that are incident on V, right. And you keep doing this. As long', 'tokens': [50370, 264, 8819, 11, 439, 264, 8819, 300, 366, 9348, 322, 691, 11, 558, 13, 400, 291, 1066, 884, 341, 13, 1018, 938, 50648], 'temperature': 0.0, 'avg_logprob': -0.20385494428811615, 'compression_ratio': 1.5784753363228698, 'no_speech_prob': 0.16540749371051788}, {'id': 225, 'seek': 145612, 'start': 1461.8, 'end': 1468.8, 'text': ' as you can do simplify. If you end up in a sub graph in which all nodes have K or more', 'tokens': [50648, 382, 291, 393, 360, 20460, 13, 759, 291, 917, 493, 294, 257, 1422, 4295, 294, 597, 439, 13891, 362, 591, 420, 544, 50998], 'temperature': 0.0, 'avg_logprob': -0.20385494428811615, 'compression_ratio': 1.5784753363228698, 'no_speech_prob': 0.16540749371051788}, {'id': 226, 'seek': 145612, 'start': 1468.8, 'end': 1474.9199999999998, 'text': ' edges, right, that means that G is non-empty and every node has a degree greater than or', 'tokens': [50998, 8819, 11, 558, 11, 300, 1355, 300, 460, 307, 2107, 12, 4543, 88, 293, 633, 9984, 575, 257, 4314, 5044, 813, 420, 51304], 'temperature': 0.0, 'avg_logprob': -0.20385494428811615, 'compression_ratio': 1.5784753363228698, 'no_speech_prob': 0.16540749371051788}, {'id': 227, 'seek': 145612, 'start': 1474.9199999999998, 'end': 1481.9199999999998, 'text': ' equal to K at this point in time. Then you choose a node for spilling. You can actually', 'tokens': [51304, 2681, 281, 591, 412, 341, 935, 294, 565, 13, 1396, 291, 2826, 257, 9984, 337, 637, 7345, 13, 509, 393, 767, 51654], 'temperature': 0.0, 'avg_logprob': -0.20385494428811615, 'compression_ratio': 1.5784753363228698, 'no_speech_prob': 0.16540749371051788}, {'id': 228, 'seek': 148192, 'start': 1482.44, 'end': 1487.48, 'text': ' choose a node which is least profitable, right, not necessarily an arbitrary node, but the', 'tokens': [50390, 2826, 257, 9984, 597, 307, 1935, 21608, 11, 558, 11, 406, 4725, 364, 23211, 9984, 11, 457, 264, 50642], 'temperature': 0.0, 'avg_logprob': -0.1448610850742885, 'compression_ratio': 1.819672131147541, 'no_speech_prob': 0.02970062382519245}, {'id': 229, 'seek': 148192, 'start': 1487.48, 'end': 1492.48, 'text': ' one which is, which incurs minimum cost. That can be decided using various heuristics,', 'tokens': [50642, 472, 597, 307, 11, 597, 834, 2156, 7285, 2063, 13, 663, 393, 312, 3047, 1228, 3683, 415, 374, 6006, 11, 50892], 'temperature': 0.0, 'avg_logprob': -0.1448610850742885, 'compression_ratio': 1.819672131147541, 'no_speech_prob': 0.02970062382519245}, {'id': 230, 'seek': 148192, 'start': 1492.48, 'end': 1497.72, 'text': ' right. And then you say that that is a node which is going to be spilled. Push that node', 'tokens': [50892, 558, 13, 400, 550, 291, 584, 300, 300, 307, 257, 9984, 597, 307, 516, 281, 312, 37833, 13, 18229, 300, 9984, 51154], 'temperature': 0.0, 'avg_logprob': -0.1448610850742885, 'compression_ratio': 1.819672131147541, 'no_speech_prob': 0.02970062382519245}, {'id': 231, 'seek': 148192, 'start': 1497.72, 'end': 1504.16, 'text': ' into the stack, right, and then say that this is a spill node, right, and then delete that', 'tokens': [51154, 666, 264, 8630, 11, 558, 11, 293, 550, 584, 300, 341, 307, 257, 22044, 9984, 11, 558, 11, 293, 550, 12097, 300, 51476], 'temperature': 0.0, 'avg_logprob': -0.1448610850742885, 'compression_ratio': 1.819672131147541, 'no_speech_prob': 0.02970062382519245}, {'id': 232, 'seek': 148192, 'start': 1504.16, 'end': 1510.0600000000002, 'text': ' node along with all its incident edges. And after you have done this, you go back here', 'tokens': [51476, 9984, 2051, 365, 439, 1080, 9348, 8819, 13, 400, 934, 291, 362, 1096, 341, 11, 291, 352, 646, 510, 51771], 'temperature': 0.0, 'avg_logprob': -0.1448610850742885, 'compression_ratio': 1.819672131147541, 'no_speech_prob': 0.02970062382519245}, {'id': 233, 'seek': 151006, 'start': 1510.26, 'end': 1514.74, 'text': ' and then you start doing this. So, there is a, remember there is a repeat until loop here,', 'tokens': [50374, 293, 550, 291, 722, 884, 341, 13, 407, 11, 456, 307, 257, 11, 1604, 456, 307, 257, 7149, 1826, 6367, 510, 11, 50598], 'temperature': 0.0, 'avg_logprob': -0.1733601943306301, 'compression_ratio': 1.9177489177489178, 'no_speech_prob': 0.034248270094394684}, {'id': 234, 'seek': 151006, 'start': 1514.74, 'end': 1519.8999999999999, 'text': ' okay. So, once you remove one node for spill, again you try to see if you can simplify.', 'tokens': [50598, 1392, 13, 407, 11, 1564, 291, 4159, 472, 9984, 337, 22044, 11, 797, 291, 853, 281, 536, 498, 291, 393, 20460, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.1733601943306301, 'compression_ratio': 1.9177489177489178, 'no_speech_prob': 0.034248270094394684}, {'id': 235, 'seek': 151006, 'start': 1519.8999999999999, 'end': 1526.1399999999999, 'text': ' If you can simplify, keep doing that. If you cannot, come back and then spill one more', 'tokens': [50856, 759, 291, 393, 20460, 11, 1066, 884, 300, 13, 759, 291, 2644, 11, 808, 646, 293, 550, 22044, 472, 544, 51168], 'temperature': 0.0, 'avg_logprob': -0.1733601943306301, 'compression_ratio': 1.9177489177489178, 'no_speech_prob': 0.034248270094394684}, {'id': 236, 'seek': 151006, 'start': 1526.1399999999999, 'end': 1532.34, 'text': ' node and keep doing this until the entire graph, all the nodes in the graphs are removed.', 'tokens': [51168, 9984, 293, 1066, 884, 341, 1826, 264, 2302, 4295, 11, 439, 264, 13891, 294, 264, 24877, 366, 7261, 13, 51478], 'temperature': 0.0, 'avg_logprob': -0.1733601943306301, 'compression_ratio': 1.9177489177489178, 'no_speech_prob': 0.034248270094394684}, {'id': 237, 'seek': 151006, 'start': 1532.34, 'end': 1538.74, 'text': ' As and when the nodes are being removed, they are being pushed into the stack, okay. In', 'tokens': [51478, 1018, 293, 562, 264, 13891, 366, 885, 7261, 11, 436, 366, 885, 9152, 666, 264, 8630, 11, 1392, 13, 682, 51798], 'temperature': 0.0, 'avg_logprob': -0.1733601943306301, 'compression_ratio': 1.9177489177489178, 'no_speech_prob': 0.034248270094394684}, {'id': 238, 'seek': 153874, 'start': 1538.74, 'end': 1542.78, 'text': ' the reverse pass which is the coloring pass, which is what I have not indicated in the', 'tokens': [50364, 264, 9943, 1320, 597, 307, 264, 23198, 1320, 11, 597, 307, 437, 286, 362, 406, 16176, 294, 264, 50566], 'temperature': 0.0, 'avg_logprob': -0.15784889392638474, 'compression_ratio': 1.8716577540106951, 'no_speech_prob': 0.00887653324753046}, {'id': 239, 'seek': 153874, 'start': 1542.78, 'end': 1547.14, 'text': ' diagram, right. In the coloring pass what we are going to do is that we are going to', 'tokens': [50566, 10686, 11, 558, 13, 682, 264, 23198, 1320, 437, 321, 366, 516, 281, 360, 307, 300, 321, 366, 516, 281, 50784], 'temperature': 0.0, 'avg_logprob': -0.15784889392638474, 'compression_ratio': 1.8716577540106951, 'no_speech_prob': 0.00887653324753046}, {'id': 240, 'seek': 153874, 'start': 1547.14, 'end': 1554.98, 'text': ' pop each node from the stack and then see the tag. If the tag is no spill, then we have', 'tokens': [50784, 1665, 1184, 9984, 490, 264, 8630, 293, 550, 536, 264, 6162, 13, 759, 264, 6162, 307, 572, 22044, 11, 550, 321, 362, 51176], 'temperature': 0.0, 'avg_logprob': -0.15784889392638474, 'compression_ratio': 1.8716577540106951, 'no_speech_prob': 0.00887653324753046}, {'id': 241, 'seek': 153874, 'start': 1554.98, 'end': 1562.18, 'text': ' to allocate a register, right. We allocate a register by considering all the edges, right,', 'tokens': [51176, 281, 35713, 257, 7280, 11, 558, 13, 492, 35713, 257, 7280, 538, 8079, 439, 264, 8819, 11, 558, 11, 51536], 'temperature': 0.0, 'avg_logprob': -0.15784889392638474, 'compression_ratio': 1.8716577540106951, 'no_speech_prob': 0.00887653324753046}, {'id': 242, 'seek': 156218, 'start': 1562.18, 'end': 1569.18, 'text': ' that we have removed and then see to which nodes it is incident on, right. Obviously,', 'tokens': [50364, 300, 321, 362, 7261, 293, 550, 536, 281, 597, 13891, 309, 307, 9348, 322, 11, 558, 13, 7580, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.19312595438074182, 'compression_ratio': 1.8836206896551724, 'no_speech_prob': 0.08403411507606506}, {'id': 243, 'seek': 156218, 'start': 1569.18, 'end': 1574.3, 'text': ' since we have removed it and pushed it into the stack with a no spill, right, at this', 'tokens': [50714, 1670, 321, 362, 7261, 309, 293, 9152, 309, 666, 264, 8630, 365, 257, 572, 22044, 11, 558, 11, 412, 341, 50970], 'temperature': 0.0, 'avg_logprob': -0.19312595438074182, 'compression_ratio': 1.8836206896551724, 'no_speech_prob': 0.08403411507606506}, {'id': 244, 'seek': 156218, 'start': 1574.3, 'end': 1581.3, 'text': ' point in time it will only have fewer than k neighbors. Therefore, we can allocate the', 'tokens': [50970, 935, 294, 565, 309, 486, 787, 362, 13366, 813, 350, 12512, 13, 7504, 11, 321, 393, 35713, 264, 51320], 'temperature': 0.0, 'avg_logprob': -0.19312595438074182, 'compression_ratio': 1.8836206896551724, 'no_speech_prob': 0.08403411507606506}, {'id': 245, 'seek': 156218, 'start': 1581.42, 'end': 1586.7, 'text': ' color which is not being assigned to any of its neighbors, right, at this point in time.', 'tokens': [51326, 2017, 597, 307, 406, 885, 13279, 281, 604, 295, 1080, 12512, 11, 558, 11, 412, 341, 935, 294, 565, 13, 51590], 'temperature': 0.0, 'avg_logprob': -0.19312595438074182, 'compression_ratio': 1.8836206896551724, 'no_speech_prob': 0.08403411507606506}, {'id': 246, 'seek': 156218, 'start': 1586.7, 'end': 1591.98, 'text': ' It may eventually have more than k neighbors, but at this point in time as we have popped', 'tokens': [51590, 467, 815, 4728, 362, 544, 813, 350, 12512, 11, 457, 412, 341, 935, 294, 565, 382, 321, 362, 21545, 51854], 'temperature': 0.0, 'avg_logprob': -0.19312595438074182, 'compression_ratio': 1.8836206896551724, 'no_speech_prob': 0.08403411507606506}, {'id': 247, 'seek': 159198, 'start': 1591.98, 'end': 1596.98, 'text': ' the node there is a sub graph that we have. It will only have fewer than k, so I can', 'tokens': [50364, 264, 9984, 456, 307, 257, 1422, 4295, 300, 321, 362, 13, 467, 486, 787, 362, 13366, 813, 350, 11, 370, 286, 393, 50614], 'temperature': 0.0, 'avg_logprob': -0.16407956882398955, 'compression_ratio': 1.703883495145631, 'no_speech_prob': 0.005589435342699289}, {'id': 248, 'seek': 159198, 'start': 1596.98, 'end': 1603.98, 'text': ' always assign a color for this, right. So, that is really what we are going to do, but', 'tokens': [50614, 1009, 6269, 257, 2017, 337, 341, 11, 558, 13, 407, 11, 300, 307, 534, 437, 321, 366, 516, 281, 360, 11, 457, 50964], 'temperature': 0.0, 'avg_logprob': -0.16407956882398955, 'compression_ratio': 1.703883495145631, 'no_speech_prob': 0.005589435342699289}, {'id': 249, 'seek': 159198, 'start': 1604.3, 'end': 1610.7, 'text': ' if the tag says that it is spill, right, then it is a spill node. I will mark v as not being', 'tokens': [50980, 498, 264, 6162, 1619, 300, 309, 307, 22044, 11, 558, 11, 550, 309, 307, 257, 22044, 9984, 13, 286, 486, 1491, 371, 382, 406, 885, 51300], 'temperature': 0.0, 'avg_logprob': -0.16407956882398955, 'compression_ratio': 1.703883495145631, 'no_speech_prob': 0.005589435342699289}, {'id': 250, 'seek': 159198, 'start': 1610.7, 'end': 1617.7, 'text': ' allocated a register and I will reintroduce all the edges, okay and I will continue to', 'tokens': [51300, 29772, 257, 7280, 293, 286, 486, 319, 38132, 384, 439, 264, 8819, 11, 1392, 293, 286, 486, 2354, 281, 51650], 'temperature': 0.0, 'avg_logprob': -0.16407956882398955, 'compression_ratio': 1.703883495145631, 'no_speech_prob': 0.005589435342699289}, {'id': 251, 'seek': 161770, 'start': 1618.1000000000001, 'end': 1625.1000000000001, 'text': ' do this until the stack becomes empty, all right. Let us see how this works. Any questions', 'tokens': [50384, 360, 341, 1826, 264, 8630, 3643, 6707, 11, 439, 558, 13, 961, 505, 536, 577, 341, 1985, 13, 2639, 1651, 50734], 'temperature': 0.0, 'avg_logprob': -0.18137145042419434, 'compression_ratio': 1.6639004149377594, 'no_speech_prob': 0.009029579348862171}, {'id': 252, 'seek': 161770, 'start': 1625.18, 'end': 1627.42, 'text': ' before we go into the details, right.', 'tokens': [50738, 949, 321, 352, 666, 264, 4365, 11, 558, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.18137145042419434, 'compression_ratio': 1.6639004149377594, 'no_speech_prob': 0.009029579348862171}, {'id': 253, 'seek': 161770, 'start': 1627.42, 'end': 1633.38, 'text': ' So, the coloring process is very simple. You pop the element from the stack, see if it', 'tokens': [50850, 407, 11, 264, 23198, 1399, 307, 588, 2199, 13, 509, 1665, 264, 4478, 490, 264, 8630, 11, 536, 498, 309, 51148], 'temperature': 0.0, 'avg_logprob': -0.18137145042419434, 'compression_ratio': 1.6639004149377594, 'no_speech_prob': 0.009029579348862171}, {'id': 254, 'seek': 161770, 'start': 1633.38, 'end': 1639.5, 'text': ' has a tag spill or no spill. If it has a tag spill then of course, you are going to say', 'tokens': [51148, 575, 257, 6162, 22044, 420, 572, 22044, 13, 759, 309, 575, 257, 6162, 22044, 550, 295, 1164, 11, 291, 366, 516, 281, 584, 51454], 'temperature': 0.0, 'avg_logprob': -0.18137145042419434, 'compression_ratio': 1.6639004149377594, 'no_speech_prob': 0.009029579348862171}, {'id': 255, 'seek': 161770, 'start': 1639.5, 'end': 1645.7, 'text': ' that this is not going to be allocated a register, introduce the node and all its incident edges.', 'tokens': [51454, 300, 341, 307, 406, 516, 281, 312, 29772, 257, 7280, 11, 5366, 264, 9984, 293, 439, 1080, 9348, 8819, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.18137145042419434, 'compression_ratio': 1.6639004149377594, 'no_speech_prob': 0.009029579348862171}, {'id': 256, 'seek': 164570, 'start': 1645.7, 'end': 1652.42, 'text': ' If it says no spill then what you need to do is you introduce all the incident edges', 'tokens': [50364, 759, 309, 1619, 572, 22044, 550, 437, 291, 643, 281, 360, 307, 291, 5366, 439, 264, 9348, 8819, 50700], 'temperature': 0.0, 'avg_logprob': -0.13958214069234914, 'compression_ratio': 1.7107843137254901, 'no_speech_prob': 0.00968457106500864}, {'id': 257, 'seek': 164570, 'start': 1652.42, 'end': 1658.02, 'text': ' and then see which are the nodes to which this is a neighbor to, right and you are guaranteed', 'tokens': [50700, 293, 550, 536, 597, 366, 264, 13891, 281, 597, 341, 307, 257, 5987, 281, 11, 558, 293, 291, 366, 18031, 50980], 'temperature': 0.0, 'avg_logprob': -0.13958214069234914, 'compression_ratio': 1.7107843137254901, 'no_speech_prob': 0.00968457106500864}, {'id': 258, 'seek': 164570, 'start': 1658.02, 'end': 1663.14, 'text': ' that this will be less than k, right. That is why you have removed this node and then', 'tokens': [50980, 300, 341, 486, 312, 1570, 813, 350, 11, 558, 13, 663, 307, 983, 291, 362, 7261, 341, 9984, 293, 550, 51236], 'temperature': 0.0, 'avg_logprob': -0.13958214069234914, 'compression_ratio': 1.7107843137254901, 'no_speech_prob': 0.00968457106500864}, {'id': 259, 'seek': 164570, 'start': 1663.14, 'end': 1670.14, 'text': ' put into the stack saying no spill because it has only fewer than k nodes, right. At', 'tokens': [51236, 829, 666, 264, 8630, 1566, 572, 22044, 570, 309, 575, 787, 13366, 813, 350, 13891, 11, 558, 13, 1711, 51586], 'temperature': 0.0, 'avg_logprob': -0.13958214069234914, 'compression_ratio': 1.7107843137254901, 'no_speech_prob': 0.00968457106500864}, {'id': 260, 'seek': 167014, 'start': 1670.3400000000001, 'end': 1675.7, 'text': ' most only k minus 1 colors would have been used. So, you can assign the kth color to', 'tokens': [50374, 881, 787, 350, 3175, 502, 4577, 576, 362, 668, 1143, 13, 407, 11, 291, 393, 6269, 264, 350, 392, 2017, 281, 50642], 'temperature': 0.0, 'avg_logprob': -0.20642043863024032, 'compression_ratio': 1.8529411764705883, 'no_speech_prob': 0.10123230516910553}, {'id': 261, 'seek': 167014, 'start': 1675.7, 'end': 1680.7, 'text': ' this or you can assign, yeah you can assign the kth color to it, right. That is really', 'tokens': [50642, 341, 420, 291, 393, 6269, 11, 1338, 291, 393, 6269, 264, 350, 392, 2017, 281, 309, 11, 558, 13, 663, 307, 534, 50892], 'temperature': 0.0, 'avg_logprob': -0.20642043863024032, 'compression_ratio': 1.8529411764705883, 'no_speech_prob': 0.10123230516910553}, {'id': 262, 'seek': 167014, 'start': 1680.7, 'end': 1686.7, 'text': ' how you color this and you keep doing this and then rebuild this interference graph completely.', 'tokens': [50892, 577, 291, 2017, 341, 293, 291, 1066, 884, 341, 293, 550, 16877, 341, 24497, 4295, 2584, 13, 51192], 'temperature': 0.0, 'avg_logprob': -0.20642043863024032, 'compression_ratio': 1.8529411764705883, 'no_speech_prob': 0.10123230516910553}, {'id': 263, 'seek': 167014, 'start': 1686.7, 'end': 1691.9, 'text': ' By the time all the nodes would have been colored. So, let us see this in the form of', 'tokens': [51192, 3146, 264, 565, 439, 264, 13891, 576, 362, 668, 14332, 13, 407, 11, 718, 505, 536, 341, 294, 264, 1254, 295, 51452], 'temperature': 0.0, 'avg_logprob': -0.20642043863024032, 'compression_ratio': 1.8529411764705883, 'no_speech_prob': 0.10123230516910553}, {'id': 264, 'seek': 167014, 'start': 1691.9, 'end': 1698.26, 'text': ' an example, okay but before we go into that let us talk about the complexity. Since you', 'tokens': [51452, 364, 1365, 11, 1392, 457, 949, 321, 352, 666, 300, 718, 505, 751, 466, 264, 14024, 13, 4162, 291, 51770], 'temperature': 0.0, 'avg_logprob': -0.20642043863024032, 'compression_ratio': 1.8529411764705883, 'no_speech_prob': 0.10123230516910553}, {'id': 265, 'seek': 169826, 'start': 1698.26, 'end': 1703.02, 'text': ' are going to go through all the nodes one by one it is going to have a complexity which', 'tokens': [50364, 366, 516, 281, 352, 807, 439, 264, 13891, 472, 538, 472, 309, 307, 516, 281, 362, 257, 14024, 597, 50602], 'temperature': 0.0, 'avg_logprob': -0.17252795550287986, 'compression_ratio': 1.6861924686192469, 'no_speech_prob': 0.02709047682583332}, {'id': 266, 'seek': 169826, 'start': 1703.02, 'end': 1709.66, 'text': ' is proportional to the number of nodes, okay.', 'tokens': [50602, 307, 24969, 281, 264, 1230, 295, 13891, 11, 1392, 13, 50934], 'temperature': 0.0, 'avg_logprob': -0.17252795550287986, 'compression_ratio': 1.6861924686192469, 'no_speech_prob': 0.02709047682583332}, {'id': 267, 'seek': 169826, 'start': 1709.66, 'end': 1713.94, 'text': ' And this is an algorithm which is actually used in many production compilers. Again there', 'tokens': [50934, 400, 341, 307, 364, 9284, 597, 307, 767, 1143, 294, 867, 4265, 715, 388, 433, 13, 3764, 456, 51148], 'temperature': 0.0, 'avg_logprob': -0.17252795550287986, 'compression_ratio': 1.6861924686192469, 'no_speech_prob': 0.02709047682583332}, {'id': 268, 'seek': 169826, 'start': 1713.94, 'end': 1718.46, 'text': ' are some positives as well as some negatives which we will talk about it little later,', 'tokens': [51148, 366, 512, 35127, 382, 731, 382, 512, 40019, 597, 321, 486, 751, 466, 309, 707, 1780, 11, 51374], 'temperature': 0.0, 'avg_logprob': -0.17252795550287986, 'compression_ratio': 1.6861924686192469, 'no_speech_prob': 0.02709047682583332}, {'id': 269, 'seek': 169826, 'start': 1718.46, 'end': 1725.46, 'text': ' right. We will take an example. So, in this particular case I am going to take this example,', 'tokens': [51374, 558, 13, 492, 486, 747, 364, 1365, 13, 407, 11, 294, 341, 1729, 1389, 286, 669, 516, 281, 747, 341, 1365, 11, 51724], 'temperature': 0.0, 'avg_logprob': -0.17252795550287986, 'compression_ratio': 1.6861924686192469, 'no_speech_prob': 0.02709047682583332}, {'id': 270, 'seek': 172546, 'start': 1726.46, 'end': 1732.9, 'text': ' and these are the live ranges for these variables and let us not worry how I have constructed', 'tokens': [50414, 293, 613, 366, 264, 1621, 22526, 337, 613, 9102, 293, 718, 505, 406, 3292, 577, 286, 362, 17083, 50736], 'temperature': 0.0, 'avg_logprob': -0.20977329678005643, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.09834332019090652}, {'id': 271, 'seek': 172546, 'start': 1732.9, 'end': 1737.22, 'text': ' the interference graph but this is the interference graph, right because it will take you quite', 'tokens': [50736, 264, 24497, 4295, 457, 341, 307, 264, 24497, 4295, 11, 558, 570, 309, 486, 747, 291, 1596, 50952], 'temperature': 0.0, 'avg_logprob': -0.20977329678005643, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.09834332019090652}, {'id': 272, 'seek': 172546, 'start': 1737.22, 'end': 1742.3, 'text': ' some time to figure out all the edges and other things but you can go back and check.', 'tokens': [50952, 512, 565, 281, 2573, 484, 439, 264, 8819, 293, 661, 721, 457, 291, 393, 352, 646, 293, 1520, 13, 51206], 'temperature': 0.0, 'avg_logprob': -0.20977329678005643, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.09834332019090652}, {'id': 273, 'seek': 172546, 'start': 1742.3, 'end': 1749.3, 'text': ' For example if you want to look at B, right, node B interferes with M, E, C and D and also', 'tokens': [51206, 1171, 1365, 498, 291, 528, 281, 574, 412, 363, 11, 558, 11, 9984, 363, 25799, 279, 365, 376, 11, 462, 11, 383, 293, 413, 293, 611, 51556], 'temperature': 0.0, 'avg_logprob': -0.20977329678005643, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.09834332019090652}, {'id': 274, 'seek': 174930, 'start': 1749.3, 'end': 1756.3, 'text': ' K, right. So, you can see that M, E, C, D, J and K, okay, J also, right, J also because', 'tokens': [50364, 591, 11, 558, 13, 407, 11, 291, 393, 536, 300, 376, 11, 462, 11, 383, 11, 413, 11, 508, 293, 591, 11, 1392, 11, 508, 611, 11, 558, 11, 508, 611, 570, 50714], 'temperature': 0.0, 'avg_logprob': -0.2459588399747523, 'compression_ratio': 1.5344827586206897, 'no_speech_prob': 0.13962706923484802}, {'id': 275, 'seek': 174930, 'start': 1767.98, 'end': 1772.98, 'text': ' I think J, yeah I think this is wrong. J should have been from here to here, sorry about that,', 'tokens': [51298, 286, 519, 508, 11, 1338, 286, 519, 341, 307, 2085, 13, 508, 820, 362, 668, 490, 510, 281, 510, 11, 2597, 466, 300, 11, 51548], 'temperature': 0.0, 'avg_logprob': -0.2459588399747523, 'compression_ratio': 1.5344827586206897, 'no_speech_prob': 0.13962706923484802}, {'id': 276, 'seek': 174930, 'start': 1772.98, 'end': 1778.94, 'text': ' right. And remember this also talks about which variables are live out. So, for live', 'tokens': [51548, 558, 13, 400, 1604, 341, 611, 6686, 466, 597, 9102, 366, 1621, 484, 13, 407, 11, 337, 1621, 51846], 'temperature': 0.0, 'avg_logprob': -0.2459588399747523, 'compression_ratio': 1.5344827586206897, 'no_speech_prob': 0.13962706923484802}, {'id': 277, 'seek': 177894, 'start': 1779.54, 'end': 1783.5800000000002, 'text': ' out variables we would like to keep them in the register so that live range is also being,', 'tokens': [50394, 484, 9102, 321, 576, 411, 281, 1066, 552, 294, 264, 7280, 370, 300, 1621, 3613, 307, 611, 885, 11, 50596], 'temperature': 0.0, 'avg_logprob': -0.2713293812491677, 'compression_ratio': 1.5534883720930233, 'no_speech_prob': 0.013834452256560326}, {'id': 278, 'seek': 177894, 'start': 1783.5800000000002, 'end': 1790.5800000000002, 'text': ' I mean that is shown by this extra point over here, extra program point over here, okay,', 'tokens': [50596, 286, 914, 300, 307, 4898, 538, 341, 2857, 935, 670, 510, 11, 2857, 1461, 935, 670, 510, 11, 1392, 11, 50946], 'temperature': 0.0, 'avg_logprob': -0.2713293812491677, 'compression_ratio': 1.5534883720930233, 'no_speech_prob': 0.013834452256560326}, {'id': 279, 'seek': 177894, 'start': 1792.3, 'end': 1798.6200000000001, 'text': ' all fine. So, we have started off with this graph. Let us try to see if K colorable for', 'tokens': [51032, 439, 2489, 13, 407, 11, 321, 362, 1409, 766, 365, 341, 4295, 13, 961, 505, 853, 281, 536, 498, 591, 2017, 712, 337, 51348], 'temperature': 0.0, 'avg_logprob': -0.2713293812491677, 'compression_ratio': 1.5534883720930233, 'no_speech_prob': 0.013834452256560326}, {'id': 280, 'seek': 177894, 'start': 1798.6200000000001, 'end': 1805.6200000000001, 'text': ' K equal to 4, right. Now pick any node arbitrarily which has fewer', 'tokens': [51348, 591, 2681, 281, 1017, 11, 558, 13, 823, 1888, 604, 9984, 19071, 3289, 597, 575, 13366, 51698], 'temperature': 0.0, 'avg_logprob': -0.2713293812491677, 'compression_ratio': 1.5534883720930233, 'no_speech_prob': 0.013834452256560326}, {'id': 281, 'seek': 180562, 'start': 1806.4199999999998, 'end': 1813.4199999999998, 'text': ' than K edges, 4 edges, right. In this case I have picked H, I can remove that, I will', 'tokens': [50404, 813, 591, 8819, 11, 1017, 8819, 11, 558, 13, 682, 341, 1389, 286, 362, 6183, 389, 11, 286, 393, 4159, 300, 11, 286, 486, 50754], 'temperature': 0.0, 'avg_logprob': -0.1897753491813754, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.020952805876731873}, {'id': 282, 'seek': 180562, 'start': 1814.02, 'end': 1821.02, 'text': ' push it into the stack. Next one G, I can remove that. Next one K, F, right, E, I could', 'tokens': [50784, 2944, 309, 666, 264, 8630, 13, 3087, 472, 460, 11, 286, 393, 4159, 300, 13, 3087, 472, 591, 11, 479, 11, 558, 11, 462, 11, 286, 727, 51134], 'temperature': 0.0, 'avg_logprob': -0.1897753491813754, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.020952805876731873}, {'id': 283, 'seek': 180562, 'start': 1828.3, 'end': 1835.3, 'text': ' have removed M also because M has only 3 edges at this point in time, right. Then B, I can', 'tokens': [51498, 362, 7261, 376, 611, 570, 376, 575, 787, 805, 8819, 412, 341, 935, 294, 565, 11, 558, 13, 1396, 363, 11, 286, 393, 51848], 'temperature': 0.0, 'avg_logprob': -0.1897753491813754, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.020952805876731873}, {'id': 284, 'seek': 183562, 'start': 1836.26, 'end': 1843.26, 'text': ' remove D, right. Then of course J and C have 0 edges, I can remove them one by one, right.', 'tokens': [50396, 4159, 413, 11, 558, 13, 1396, 295, 1164, 508, 293, 383, 362, 1958, 8819, 11, 286, 393, 4159, 552, 472, 538, 472, 11, 558, 13, 50746], 'temperature': 0.0, 'avg_logprob': -0.19959187271571396, 'compression_ratio': 1.69377990430622, 'no_speech_prob': 0.015202918089926243}, {'id': 285, 'seek': 183562, 'start': 1844.9799999999998, 'end': 1851.9799999999998, 'text': ' So, as I keep removing them I have pushed them into my stack, right. So, you will see', 'tokens': [50832, 407, 11, 382, 286, 1066, 12720, 552, 286, 362, 9152, 552, 666, 452, 8630, 11, 558, 13, 407, 11, 291, 486, 536, 51182], 'temperature': 0.0, 'avg_logprob': -0.19959187271571396, 'compression_ratio': 1.69377990430622, 'no_speech_prob': 0.015202918089926243}, {'id': 286, 'seek': 183562, 'start': 1853.02, 'end': 1859.1399999999999, 'text': ' this, right. So, this is finally what I have. Now I have to start coloring them. Since J', 'tokens': [51234, 341, 11, 558, 13, 407, 11, 341, 307, 2721, 437, 286, 362, 13, 823, 286, 362, 281, 722, 23198, 552, 13, 4162, 508, 51540], 'temperature': 0.0, 'avg_logprob': -0.19959187271571396, 'compression_ratio': 1.69377990430622, 'no_speech_prob': 0.015202918089926243}, {'id': 287, 'seek': 183562, 'start': 1859.1399999999999, 'end': 1864.8999999999999, 'text': ' is the only node at this point in time I can give one color for this and then I will pop', 'tokens': [51540, 307, 264, 787, 9984, 412, 341, 935, 294, 565, 286, 393, 976, 472, 2017, 337, 341, 293, 550, 286, 486, 1665, 51828], 'temperature': 0.0, 'avg_logprob': -0.19959187271571396, 'compression_ratio': 1.69377990430622, 'no_speech_prob': 0.015202918089926243}, {'id': 288, 'seek': 186490, 'start': 1864.94, 'end': 1871.02, 'text': ' this node. I have given the yellow color for this. Now the next node is C. I see what are', 'tokens': [50366, 341, 9984, 13, 286, 362, 2212, 264, 5566, 2017, 337, 341, 13, 823, 264, 958, 9984, 307, 383, 13, 286, 536, 437, 366, 50670], 'temperature': 0.0, 'avg_logprob': -0.12523001670837403, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.008360596373677254}, {'id': 289, 'seek': 186490, 'start': 1871.02, 'end': 1876.66, 'text': ' the incident edges on this. C and J originally did not have an edge between them. So, it', 'tokens': [50670, 264, 9348, 8819, 322, 341, 13, 383, 293, 508, 7993, 630, 406, 362, 364, 4691, 1296, 552, 13, 407, 11, 309, 50952], 'temperature': 0.0, 'avg_logprob': -0.12523001670837403, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.008360596373677254}, {'id': 290, 'seek': 186490, 'start': 1876.66, 'end': 1883.66, 'text': ' can also be given the same color, right. I can remove that. Then I introduce node D.', 'tokens': [50952, 393, 611, 312, 2212, 264, 912, 2017, 11, 558, 13, 286, 393, 4159, 300, 13, 1396, 286, 5366, 9984, 413, 13, 51302], 'temperature': 0.0, 'avg_logprob': -0.12523001670837403, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.008360596373677254}, {'id': 291, 'seek': 186490, 'start': 1884.26, 'end': 1890.38, 'text': ' Node D has an edge to J as well as an edge to C. So, it has to be any color other than', 'tokens': [51332, 38640, 413, 575, 364, 4691, 281, 508, 382, 731, 382, 364, 4691, 281, 383, 13, 407, 11, 309, 575, 281, 312, 604, 2017, 661, 813, 51638], 'temperature': 0.0, 'avg_logprob': -0.12523001670837403, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.008360596373677254}, {'id': 292, 'seek': 189038, 'start': 1890.38, 'end': 1896.6200000000001, 'text': ' the color of J or C. Fortunately for us J and C share the same color. Therefore, it', 'tokens': [50364, 264, 2017, 295, 508, 420, 383, 13, 20652, 337, 505, 508, 293, 383, 2073, 264, 912, 2017, 13, 7504, 11, 309, 50676], 'temperature': 0.0, 'avg_logprob': -0.14244009898259088, 'compression_ratio': 1.6862745098039216, 'no_speech_prob': 0.05752718448638916}, {'id': 293, 'seek': 189038, 'start': 1896.6200000000001, 'end': 1903.38, 'text': ' has to be any color other than yellow. So, let us say it was given red, right. Then the', 'tokens': [50676, 575, 281, 312, 604, 2017, 661, 813, 5566, 13, 407, 11, 718, 505, 584, 309, 390, 2212, 2182, 11, 558, 13, 1396, 264, 51014], 'temperature': 0.0, 'avg_logprob': -0.14244009898259088, 'compression_ratio': 1.6862745098039216, 'no_speech_prob': 0.05752718448638916}, {'id': 294, 'seek': 189038, 'start': 1903.38, 'end': 1909.74, 'text': ' next one, right. So, D has been now removed from the stack. The next one is B. You put', 'tokens': [51014, 958, 472, 11, 558, 13, 407, 11, 413, 575, 668, 586, 7261, 490, 264, 8630, 13, 440, 958, 472, 307, 363, 13, 509, 829, 51332], 'temperature': 0.0, 'avg_logprob': -0.14244009898259088, 'compression_ratio': 1.6862745098039216, 'no_speech_prob': 0.05752718448638916}, {'id': 295, 'seek': 189038, 'start': 1909.74, 'end': 1916.14, 'text': ' B, right and these are the edges. B has an edge to C, B has an edge to D and B has an', 'tokens': [51332, 363, 11, 558, 293, 613, 366, 264, 8819, 13, 363, 575, 364, 4691, 281, 383, 11, 363, 575, 364, 4691, 281, 413, 293, 363, 575, 364, 51652], 'temperature': 0.0, 'avg_logprob': -0.14244009898259088, 'compression_ratio': 1.6862745098039216, 'no_speech_prob': 0.05752718448638916}, {'id': 296, 'seek': 191614, 'start': 1916.22, 'end': 1922.3400000000001, 'text': ' edge to J. So, it cannot be yellow. It cannot be red. So, let us give it a color blue. We', 'tokens': [50368, 4691, 281, 508, 13, 407, 11, 309, 2644, 312, 5566, 13, 467, 2644, 312, 2182, 13, 407, 11, 718, 505, 976, 309, 257, 2017, 3344, 13, 492, 50674], 'temperature': 0.0, 'avg_logprob': -0.19180103495151182, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.13248954713344574}, {'id': 297, 'seek': 191614, 'start': 1922.3400000000001, 'end': 1929.3400000000001, 'text': ' still have only used three colors. Then we remove B. We have the next node is M and M', 'tokens': [50674, 920, 362, 787, 1143, 1045, 4577, 13, 1396, 321, 4159, 363, 13, 492, 362, 264, 958, 9984, 307, 376, 293, 376, 51024], 'temperature': 0.0, 'avg_logprob': -0.19180103495151182, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.13248954713344574}, {'id': 298, 'seek': 191614, 'start': 1930.3000000000002, 'end': 1937.3000000000002, 'text': ' has edges to B, C and D. Something is wrong. My coloring scheme has gone bad. So, this', 'tokens': [51072, 575, 8819, 281, 363, 11, 383, 293, 413, 13, 6595, 307, 2085, 13, 1222, 23198, 12232, 575, 2780, 1578, 13, 407, 11, 341, 51422], 'temperature': 0.0, 'avg_logprob': -0.19180103495151182, 'compression_ratio': 1.5144508670520231, 'no_speech_prob': 0.13248954713344574}, {'id': 299, 'seek': 193730, 'start': 1937.3, 'end': 1944.3, 'text': ' cannot be red. This has to be green, okay. So, let us try to write it as green. Hopefully,', 'tokens': [50364, 2644, 312, 2182, 13, 639, 575, 281, 312, 3092, 11, 1392, 13, 407, 11, 718, 505, 853, 281, 2464, 309, 382, 3092, 13, 10429, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.3475645065307617, 'compression_ratio': 1.3253968253968254, 'no_speech_prob': 0.044801756739616394}, {'id': 300, 'seek': 193730, 'start': 1947.62, 'end': 1954.62, 'text': ' that will not cause a problem, but that is the only color I can give, right.', 'tokens': [50880, 300, 486, 406, 3082, 257, 1154, 11, 457, 300, 307, 264, 787, 2017, 286, 393, 976, 11, 558, 13, 51230], 'temperature': 0.0, 'avg_logprob': -0.3475645065307617, 'compression_ratio': 1.3253968253968254, 'no_speech_prob': 0.044801756739616394}, {'id': 301, 'seek': 195462, 'start': 1954.62, 'end': 1961.62, 'text': ' So, this has to be green because this cannot be yellow. It cannot be blue. It cannot be', 'tokens': [50364, 407, 11, 341, 575, 281, 312, 3092, 570, 341, 2644, 312, 5566, 13, 467, 2644, 312, 3344, 13, 467, 2644, 312, 50714], 'temperature': 0.0, 'avg_logprob': -0.19448425830938879, 'compression_ratio': 1.5502958579881656, 'no_speech_prob': 0.030165651813149452}, {'id': 302, 'seek': 195462, 'start': 1967.54, 'end': 1974.54, 'text': ' red. Those are the three colors. So, it has to be green, right. Now, what about the next', 'tokens': [51010, 2182, 13, 3950, 366, 264, 1045, 4577, 13, 407, 11, 309, 575, 281, 312, 3092, 11, 558, 13, 823, 11, 437, 466, 264, 958, 51360], 'temperature': 0.0, 'avg_logprob': -0.19448425830938879, 'compression_ratio': 1.5502958579881656, 'no_speech_prob': 0.030165651813149452}, {'id': 303, 'seek': 195462, 'start': 1974.54, 'end': 1981.54, 'text': ' node E? Bad, my bad, okay. But we will try to give a different color for E, okay. Let', 'tokens': [51360, 9984, 462, 30, 11523, 11, 452, 1578, 11, 1392, 13, 583, 321, 486, 853, 281, 976, 257, 819, 2017, 337, 462, 11, 1392, 13, 961, 51710], 'temperature': 0.0, 'avg_logprob': -0.19448425830938879, 'compression_ratio': 1.5502958579881656, 'no_speech_prob': 0.030165651813149452}, {'id': 304, 'seek': 198154, 'start': 1982.54, 'end': 1989.54, 'text': ' us see. Maybe you can suggest me what color to be given for this. Yes, yeah, red or orange,', 'tokens': [50414, 505, 536, 13, 2704, 291, 393, 3402, 385, 437, 2017, 281, 312, 2212, 337, 341, 13, 1079, 11, 1338, 11, 2182, 420, 7671, 11, 50764], 'temperature': 0.0, 'avg_logprob': -0.2512488114206414, 'compression_ratio': 1.5260115606936415, 'no_speech_prob': 0.05414352938532829}, {'id': 305, 'seek': 198154, 'start': 1992.86, 'end': 1999.86, 'text': ' whatever we say, right. Remember, this is not red. This is green, right. That is why', 'tokens': [50930, 2035, 321, 584, 11, 558, 13, 5459, 11, 341, 307, 406, 2182, 13, 639, 307, 3092, 11, 558, 13, 663, 307, 983, 51280], 'temperature': 0.0, 'avg_logprob': -0.2512488114206414, 'compression_ratio': 1.5260115606936415, 'no_speech_prob': 0.05414352938532829}, {'id': 306, 'seek': 198154, 'start': 2000.6599999999999, 'end': 2007.6599999999999, 'text': ' we are changing this. So, this is red, not green. I became color blind when I was doing', 'tokens': [51320, 321, 366, 4473, 341, 13, 407, 11, 341, 307, 2182, 11, 406, 3092, 13, 286, 3062, 2017, 6865, 562, 286, 390, 884, 51670], 'temperature': 0.0, 'avg_logprob': -0.2512488114206414, 'compression_ratio': 1.5260115606936415, 'no_speech_prob': 0.05414352938532829}, {'id': 307, 'seek': 200766, 'start': 2007.66, 'end': 2014.66, 'text': ' this, okay, right, all right. Now, we can remove E also from our stack. Then the next', 'tokens': [50364, 341, 11, 1392, 11, 558, 11, 439, 558, 13, 823, 11, 321, 393, 4159, 462, 611, 490, 527, 8630, 13, 1396, 264, 958, 50714], 'temperature': 0.0, 'avg_logprob': -0.17536231948108208, 'compression_ratio': 1.5202312138728324, 'no_speech_prob': 0.018308382481336594}, {'id': 308, 'seek': 200766, 'start': 2021.98, 'end': 2028.98, 'text': ' one is F and as you introduce F, now there is no problem, okay. Now, F is adjacent to', 'tokens': [51080, 472, 307, 479, 293, 382, 291, 5366, 479, 11, 586, 456, 307, 572, 1154, 11, 1392, 13, 823, 11, 479, 307, 24441, 281, 51430], 'temperature': 0.0, 'avg_logprob': -0.17536231948108208, 'compression_ratio': 1.5202312138728324, 'no_speech_prob': 0.018308382481336594}, {'id': 309, 'seek': 200766, 'start': 2029.22, 'end': 2036.22, 'text': ' J, E and M. So, it cannot be green. It cannot be red. It cannot be yellow. So, we will give', 'tokens': [51442, 508, 11, 462, 293, 376, 13, 407, 11, 309, 2644, 312, 3092, 13, 467, 2644, 312, 2182, 13, 467, 2644, 312, 5566, 13, 407, 11, 321, 486, 976, 51792], 'temperature': 0.0, 'avg_logprob': -0.17536231948108208, 'compression_ratio': 1.5202312138728324, 'no_speech_prob': 0.018308382481336594}, {'id': 310, 'seek': 203622, 'start': 2036.46, 'end': 2043.46, 'text': ' blue for that. The next one is K, right. K is adjacent to B, D and J. Therefore, we', 'tokens': [50376, 3344, 337, 300, 13, 440, 958, 472, 307, 591, 11, 558, 13, 591, 307, 24441, 281, 363, 11, 413, 293, 508, 13, 7504, 11, 321, 50726], 'temperature': 0.0, 'avg_logprob': -0.16045301024978226, 'compression_ratio': 1.5548780487804879, 'no_speech_prob': 0.005926374811679125}, {'id': 311, 'seek': 203622, 'start': 2046.22, 'end': 2053.2200000000003, 'text': ' give a color which is other than blue, red or yellow. And then finally, we have G for', 'tokens': [50864, 976, 257, 2017, 597, 307, 661, 813, 3344, 11, 2182, 420, 5566, 13, 400, 550, 2721, 11, 321, 362, 460, 337, 51214], 'temperature': 0.0, 'avg_logprob': -0.16045301024978226, 'compression_ratio': 1.5548780487804879, 'no_speech_prob': 0.005926374811679125}, {'id': 312, 'seek': 203622, 'start': 2053.94, 'end': 2060.94, 'text': ' which we can give red and then H for which we can give blue, correct. So, effectively', 'tokens': [51250, 597, 321, 393, 976, 2182, 293, 550, 389, 337, 597, 321, 393, 976, 3344, 11, 3006, 13, 407, 11, 8659, 51600], 'temperature': 0.0, 'avg_logprob': -0.16045301024978226, 'compression_ratio': 1.5548780487804879, 'no_speech_prob': 0.005926374811679125}, {'id': 313, 'seek': 206094, 'start': 2061.94, 'end': 2068.94, 'text': " we have colored this using four colors, right. This is how Chaitanya's algorithm works.", 'tokens': [50414, 321, 362, 14332, 341, 1228, 1451, 4577, 11, 558, 13, 639, 307, 577, 761, 1001, 8791, 311, 9284, 1985, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.18797108043323862, 'compression_ratio': 1.8204081632653062, 'no_speech_prob': 0.0184140894562006}, {'id': 314, 'seek': 206094, 'start': 2069.06, 'end': 2074.34, 'text': ' Now let us see what happens if we have three colors, right. Four, it is four colorable.', 'tokens': [50770, 823, 718, 505, 536, 437, 2314, 498, 321, 362, 1045, 4577, 11, 558, 13, 7451, 11, 309, 307, 1451, 2017, 712, 13, 51034], 'temperature': 0.0, 'avg_logprob': -0.18797108043323862, 'compression_ratio': 1.8204081632653062, 'no_speech_prob': 0.0184140894562006}, {'id': 315, 'seek': 206094, 'start': 2074.34, 'end': 2079.78, 'text': ' Let us see if it is three colorable, right. Of course, you only do for the number of registers', 'tokens': [51034, 961, 505, 536, 498, 309, 307, 1045, 2017, 712, 11, 558, 13, 2720, 1164, 11, 291, 787, 360, 337, 264, 1230, 295, 38351, 51306], 'temperature': 0.0, 'avg_logprob': -0.18797108043323862, 'compression_ratio': 1.8204081632653062, 'no_speech_prob': 0.0184140894562006}, {'id': 316, 'seek': 206094, 'start': 2079.78, 'end': 2083.62, 'text': ' that are available in your architecture. But let us say I have another architecture in', 'tokens': [51306, 300, 366, 2435, 294, 428, 9482, 13, 583, 718, 505, 584, 286, 362, 1071, 9482, 294, 51498], 'temperature': 0.0, 'avg_logprob': -0.18797108043323862, 'compression_ratio': 1.8204081632653062, 'no_speech_prob': 0.0184140894562006}, {'id': 317, 'seek': 206094, 'start': 2083.62, 'end': 2089.14, 'text': ' which I have only three registers available. Then what happens in this example? We again', 'tokens': [51498, 597, 286, 362, 787, 1045, 38351, 2435, 13, 1396, 437, 2314, 294, 341, 1365, 30, 492, 797, 51774], 'temperature': 0.0, 'avg_logprob': -0.18797108043323862, 'compression_ratio': 1.8204081632653062, 'no_speech_prob': 0.0184140894562006}, {'id': 318, 'seek': 208914, 'start': 2089.14, 'end': 2095.2599999999998, 'text': ' go through the same way. Now you remove only nodes which have two or fewer edges, right', 'tokens': [50364, 352, 807, 264, 912, 636, 13, 823, 291, 4159, 787, 13891, 597, 362, 732, 420, 13366, 8819, 11, 558, 50670], 'temperature': 0.0, 'avg_logprob': -0.2042257042341335, 'compression_ratio': 1.7401960784313726, 'no_speech_prob': 0.03315477445721626}, {'id': 319, 'seek': 208914, 'start': 2095.2599999999998, 'end': 2102.2599999999998, 'text': ' because K is three. So, H can be removed, G can be removed, but then after this any', 'tokens': [50670, 570, 591, 307, 1045, 13, 407, 11, 389, 393, 312, 7261, 11, 460, 393, 312, 7261, 11, 457, 550, 934, 341, 604, 51020], 'temperature': 0.0, 'avg_logprob': -0.2042257042341335, 'compression_ratio': 1.7401960784313726, 'no_speech_prob': 0.03315477445721626}, {'id': 320, 'seek': 208914, 'start': 2103.02, 'end': 2110.02, 'text': ' node at least has three edges. For example, yeah, every node has three or four edges or', 'tokens': [51058, 9984, 412, 1935, 575, 1045, 8819, 13, 1171, 1365, 11, 1338, 11, 633, 9984, 575, 1045, 420, 1451, 8819, 420, 51408], 'temperature': 0.0, 'avg_logprob': -0.2042257042341335, 'compression_ratio': 1.7401960784313726, 'no_speech_prob': 0.03315477445721626}, {'id': 321, 'seek': 208914, 'start': 2112.3399999999997, 'end': 2117.3399999999997, 'text': ' even more. Nothing even has three. Everything has four edges. Well, F has three edges, correct.', 'tokens': [51524, 754, 544, 13, 6693, 754, 575, 1045, 13, 5471, 575, 1451, 8819, 13, 1042, 11, 479, 575, 1045, 8819, 11, 3006, 13, 51774], 'temperature': 0.0, 'avg_logprob': -0.2042257042341335, 'compression_ratio': 1.7401960784313726, 'no_speech_prob': 0.03315477445721626}, {'id': 322, 'seek': 211734, 'start': 2118.34, 'end': 2124.42, 'text': ' C also has three edges, but they cannot be removed. K also has three edges. They cannot', 'tokens': [50414, 383, 611, 575, 1045, 8819, 11, 457, 436, 2644, 312, 7261, 13, 591, 611, 575, 1045, 8819, 13, 814, 2644, 50718], 'temperature': 0.0, 'avg_logprob': -0.19260936536287007, 'compression_ratio': 1.77, 'no_speech_prob': 0.006406588014215231}, {'id': 323, 'seek': 211734, 'start': 2124.42, 'end': 2131.42, 'text': ' be removed because we have only three registers. We have to take nodes which have fewer than', 'tokens': [50718, 312, 7261, 570, 321, 362, 787, 1045, 38351, 13, 492, 362, 281, 747, 13891, 597, 362, 13366, 813, 51068], 'temperature': 0.0, 'avg_logprob': -0.19260936536287007, 'compression_ratio': 1.77, 'no_speech_prob': 0.006406588014215231}, {'id': 324, 'seek': 211734, 'start': 2131.42, 'end': 2138.42, 'text': ' three. That means two or one, right. So, none of these nodes can now be removed. So, now', 'tokens': [51068, 1045, 13, 663, 1355, 732, 420, 472, 11, 558, 13, 407, 11, 6022, 295, 613, 13891, 393, 586, 312, 7261, 13, 407, 11, 586, 51418], 'temperature': 0.0, 'avg_logprob': -0.19260936536287007, 'compression_ratio': 1.77, 'no_speech_prob': 0.006406588014215231}, {'id': 325, 'seek': 211734, 'start': 2138.6200000000003, 'end': 2145.6200000000003, 'text': ' we have to take a call and spill. So, let us say somehow I pick node B for spilling,', 'tokens': [51428, 321, 362, 281, 747, 257, 818, 293, 22044, 13, 407, 11, 718, 505, 584, 6063, 286, 1888, 9984, 363, 337, 637, 7345, 11, 51778], 'temperature': 0.0, 'avg_logprob': -0.19260936536287007, 'compression_ratio': 1.77, 'no_speech_prob': 0.006406588014215231}, {'id': 326, 'seek': 214562, 'start': 2145.62, 'end': 2152.62, 'text': ' right. So, now I push B with the tag spill, right. Now what happens? B can be removed.', 'tokens': [50364, 558, 13, 407, 11, 586, 286, 2944, 363, 365, 264, 6162, 22044, 11, 558, 13, 823, 437, 2314, 30, 363, 393, 312, 7261, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.19605371428699028, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0018951001111418009}, {'id': 327, 'seek': 214562, 'start': 2154.74, 'end': 2161.74, 'text': ' Now do I have any node which has two edges? K. So, I can say K is no spill, remove K.', 'tokens': [50820, 823, 360, 286, 362, 604, 9984, 597, 575, 732, 8819, 30, 591, 13, 407, 11, 286, 393, 584, 591, 307, 572, 22044, 11, 4159, 591, 13, 51170], 'temperature': 0.0, 'avg_logprob': -0.19605371428699028, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0018951001111418009}, {'id': 328, 'seek': 214562, 'start': 2164.98, 'end': 2171.98, 'text': ' Then C is no spill, I can remove that. Then D. Then almost every node has now M. So, now', 'tokens': [51332, 1396, 383, 307, 572, 22044, 11, 286, 393, 4159, 300, 13, 1396, 413, 13, 1396, 1920, 633, 9984, 575, 586, 376, 13, 407, 11, 586, 51682], 'temperature': 0.0, 'avg_logprob': -0.19605371428699028, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0018951001111418009}, {'id': 329, 'seek': 217562, 'start': 2175.8199999999997, 'end': 2182.8199999999997, 'text': ' we have E, F, J, right. So, here we were trying to color this graph using three colors, but', 'tokens': [50374, 321, 362, 462, 11, 479, 11, 508, 11, 558, 13, 407, 11, 510, 321, 645, 1382, 281, 2017, 341, 4295, 1228, 1045, 4577, 11, 457, 50724], 'temperature': 0.2, 'avg_logprob': -0.31739389195161705, 'compression_ratio': 1.48125, 'no_speech_prob': 0.03479772061109543}, {'id': 330, 'seek': 217562, 'start': 2187.9, 'end': 2194.9, 'text': " then we have ended up with one node tagged as spill. So, Chaitan's algorithm essentially", 'tokens': [50978, 550, 321, 362, 4590, 493, 365, 472, 9984, 40239, 382, 22044, 13, 407, 11, 761, 1001, 282, 311, 9284, 4476, 51328], 'temperature': 0.2, 'avg_logprob': -0.31739389195161705, 'compression_ratio': 1.48125, 'no_speech_prob': 0.03479772061109543}, {'id': 331, 'seek': 217562, 'start': 2195.2999999999997, 'end': 2201.5, 'text': ' says, you have a question? Do you have a question? Yeah.', 'tokens': [51348, 1619, 11, 291, 362, 257, 1168, 30, 1144, 291, 362, 257, 1168, 30, 865, 13, 51658], 'temperature': 0.2, 'avg_logprob': -0.31739389195161705, 'compression_ratio': 1.48125, 'no_speech_prob': 0.03479772061109543}, {'id': 332, 'seek': 220150, 'start': 2201.5, 'end': 2208.5, 'text': ' You have chosen some other node other than B. Yes, very good. Yes. Possibly, possibly,', 'tokens': [50364, 509, 362, 8614, 512, 661, 9984, 661, 813, 363, 13, 1079, 11, 588, 665, 13, 1079, 13, 33112, 3545, 11, 6264, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.2106813000094506, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.04018888995051384}, {'id': 333, 'seek': 220150, 'start': 2209.86, 'end': 2216.14, 'text': ' right. You can try with some spilling some other node and then, see I chose B because', 'tokens': [50782, 558, 13, 509, 393, 853, 365, 512, 637, 7345, 512, 661, 9984, 293, 550, 11, 536, 286, 5111, 363, 570, 51096], 'temperature': 0.0, 'avg_logprob': -0.2106813000094506, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.04018888995051384}, {'id': 334, 'seek': 220150, 'start': 2216.14, 'end': 2222.84, 'text': ' B had more neighbors. By removing that, I am removing so many edges from that, okay.', 'tokens': [51096, 363, 632, 544, 12512, 13, 3146, 12720, 300, 11, 286, 669, 12720, 370, 867, 8819, 490, 300, 11, 1392, 13, 51431], 'temperature': 0.0, 'avg_logprob': -0.2106813000094506, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.04018888995051384}, {'id': 335, 'seek': 220150, 'start': 2222.84, 'end': 2228.78, 'text': ' But it may be the case that B may be required more often, in which case this may not be', 'tokens': [51431, 583, 309, 815, 312, 264, 1389, 300, 363, 815, 312, 4739, 544, 2049, 11, 294, 597, 1389, 341, 815, 406, 312, 51728], 'temperature': 0.0, 'avg_logprob': -0.2106813000094506, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.04018888995051384}, {'id': 336, 'seek': 222878, 'start': 2228.78, 'end': 2232.82, 'text': ' a good decision. That is why you remember you asked the question. Instead of arbitrarily', 'tokens': [50364, 257, 665, 3537, 13, 663, 307, 983, 291, 1604, 291, 2351, 264, 1168, 13, 7156, 295, 19071, 3289, 50566], 'temperature': 0.0, 'avg_logprob': -0.18304259623956243, 'compression_ratio': 1.7307692307692308, 'no_speech_prob': 0.044801730662584305}, {'id': 337, 'seek': 222878, 'start': 2232.82, 'end': 2238.78, 'text': ' spilling, now we may not necessarily arbitrarily pick a node. We may pick it slightly intelligently.', 'tokens': [50566, 637, 7345, 11, 586, 321, 815, 406, 4725, 19071, 3289, 1888, 257, 9984, 13, 492, 815, 1888, 309, 4748, 5613, 2276, 13, 50864], 'temperature': 0.0, 'avg_logprob': -0.18304259623956243, 'compression_ratio': 1.7307692307692308, 'no_speech_prob': 0.044801730662584305}, {'id': 338, 'seek': 222878, 'start': 2238.78, 'end': 2245.78, 'text': ' So one cost that was used by Chaitan in his algorithm is the number of times it is used', 'tokens': [50864, 407, 472, 2063, 300, 390, 1143, 538, 761, 1001, 282, 294, 702, 9284, 307, 264, 1230, 295, 1413, 309, 307, 1143, 51214], 'temperature': 0.0, 'avg_logprob': -0.18304259623956243, 'compression_ratio': 1.7307692307692308, 'no_speech_prob': 0.044801730662584305}, {'id': 339, 'seek': 222878, 'start': 2246.0600000000004, 'end': 2251.6200000000003, 'text': ' divided by the number of edges, okay. So, you are basically taking into account both', 'tokens': [51228, 6666, 538, 264, 1230, 295, 8819, 11, 1392, 13, 407, 11, 291, 366, 1936, 1940, 666, 2696, 1293, 51506], 'temperature': 0.0, 'avg_logprob': -0.18304259623956243, 'compression_ratio': 1.7307692307692308, 'no_speech_prob': 0.044801730662584305}, {'id': 340, 'seek': 222878, 'start': 2251.6200000000003, 'end': 2258.6200000000003, 'text': ' the usage and the number of overlap that it is causing. By doing that, you are actually', 'tokens': [51506, 264, 14924, 293, 264, 1230, 295, 19959, 300, 309, 307, 9853, 13, 3146, 884, 300, 11, 291, 366, 767, 51856], 'temperature': 0.0, 'avg_logprob': -0.18304259623956243, 'compression_ratio': 1.7307692307692308, 'no_speech_prob': 0.044801730662584305}, {'id': 341, 'seek': 225878, 'start': 2258.78, 'end': 2265.78, 'text': ' saying there is no guarantee that this will be optimal, but likely to be efficient. It', 'tokens': [50364, 1566, 456, 307, 572, 10815, 300, 341, 486, 312, 16252, 11, 457, 3700, 281, 312, 7148, 13, 467, 50714], 'temperature': 0.0, 'avg_logprob': -0.3672119322277251, 'compression_ratio': 1.4099378881987579, 'no_speech_prob': 0.03237628936767578}, {'id': 342, 'seek': 225878, 'start': 2265.78, 'end': 2272.78, 'text': ' is a heuristic. So, what you say is correct. If you.', 'tokens': [50714, 307, 257, 415, 374, 3142, 13, 407, 11, 437, 291, 584, 307, 3006, 13, 759, 291, 13, 51064], 'temperature': 0.0, 'avg_logprob': -0.3672119322277251, 'compression_ratio': 1.4099378881987579, 'no_speech_prob': 0.03237628936767578}, {'id': 343, 'seek': 225878, 'start': 2277.6200000000003, 'end': 2284.34, 'text': " Again this is done arbitrarily in Chaitan's algorithm and that by itself can, well that", 'tokens': [51306, 3764, 341, 307, 1096, 19071, 3289, 294, 761, 1001, 282, 311, 9284, 293, 300, 538, 2564, 393, 11, 731, 300, 51642], 'temperature': 0.0, 'avg_logprob': -0.3672119322277251, 'compression_ratio': 1.4099378881987579, 'no_speech_prob': 0.03237628936767578}, {'id': 344, 'seek': 228434, 'start': 2284.34, 'end': 2289.52, 'text': ' can influence to only certain extent. It will not influence in terms of whether something', 'tokens': [50364, 393, 6503, 281, 787, 1629, 8396, 13, 467, 486, 406, 6503, 294, 2115, 295, 1968, 746, 50623], 'temperature': 0.0, 'avg_logprob': -0.20594333780222926, 'compression_ratio': 1.6540284360189574, 'no_speech_prob': 0.015188461169600487}, {'id': 345, 'seek': 228434, 'start': 2289.52, 'end': 2296.52, 'text': ' becomes colorable or not colorable because that is decided by your thing, okay. So, it', 'tokens': [50623, 3643, 2017, 712, 420, 406, 2017, 712, 570, 300, 307, 3047, 538, 428, 551, 11, 1392, 13, 407, 11, 309, 50973], 'temperature': 0.0, 'avg_logprob': -0.20594333780222926, 'compression_ratio': 1.6540284360189574, 'no_speech_prob': 0.015188461169600487}, {'id': 346, 'seek': 228434, 'start': 2296.54, 'end': 2303.54, 'text': ' does not affect any other thing other than what color goes where, okay, all right. Now,', 'tokens': [50974, 775, 406, 3345, 604, 661, 551, 661, 813, 437, 2017, 1709, 689, 11, 1392, 11, 439, 558, 13, 823, 11, 51324], 'temperature': 0.0, 'avg_logprob': -0.20594333780222926, 'compression_ratio': 1.6540284360189574, 'no_speech_prob': 0.015188461169600487}, {'id': 347, 'seek': 228434, 'start': 2303.7400000000002, 'end': 2308.46, 'text': ' let us start coloring this, right. Let us go through the reverse pass. Now, J has to', 'tokens': [51334, 718, 505, 722, 23198, 341, 11, 558, 13, 961, 505, 352, 807, 264, 9943, 1320, 13, 823, 11, 508, 575, 281, 51570], 'temperature': 0.0, 'avg_logprob': -0.20594333780222926, 'compression_ratio': 1.6540284360189574, 'no_speech_prob': 0.015188461169600487}, {'id': 348, 'seek': 230846, 'start': 2308.46, 'end': 2315.46, 'text': ' be given a color, right. So, let us give J yellow color and we give blue color to F,', 'tokens': [50364, 312, 2212, 257, 2017, 11, 558, 13, 407, 11, 718, 505, 976, 508, 5566, 2017, 293, 321, 976, 3344, 2017, 281, 479, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.16591251139738122, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.05674222856760025}, {'id': 349, 'seek': 230846, 'start': 2316.62, 'end': 2321.62, 'text': ' although we could have, sorry, yeah, right, because there is an edge between J and F.', 'tokens': [50772, 4878, 321, 727, 362, 11, 2597, 11, 1338, 11, 558, 11, 570, 456, 307, 364, 4691, 1296, 508, 293, 479, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.16591251139738122, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.05674222856760025}, {'id': 350, 'seek': 230846, 'start': 2321.62, 'end': 2328.62, 'text': ' Next, we remove E because E is connected to both J and F. It has to be given a color other', 'tokens': [51022, 3087, 11, 321, 4159, 462, 570, 462, 307, 4582, 281, 1293, 508, 293, 479, 13, 467, 575, 281, 312, 2212, 257, 2017, 661, 51372], 'temperature': 0.0, 'avg_logprob': -0.16591251139738122, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.05674222856760025}, {'id': 351, 'seek': 230846, 'start': 2329.58, 'end': 2335.38, 'text': ' than blue and yellow. So, these are the three colors that we have. We do not have green', 'tokens': [51420, 813, 3344, 293, 5566, 13, 407, 11, 613, 366, 264, 1045, 4577, 300, 321, 362, 13, 492, 360, 406, 362, 3092, 51710], 'temperature': 0.0, 'avg_logprob': -0.16591251139738122, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.05674222856760025}, {'id': 352, 'seek': 233538, 'start': 2335.7000000000003, 'end': 2341.38, 'text': ' anymore. Remember that. Now, I know why that became red. Okay, now, now let us look at', 'tokens': [50380, 3602, 13, 5459, 300, 13, 823, 11, 286, 458, 983, 300, 3062, 2182, 13, 1033, 11, 586, 11, 586, 718, 505, 574, 412, 50664], 'temperature': 0.0, 'avg_logprob': -0.1833165368916076, 'compression_ratio': 1.6918238993710693, 'no_speech_prob': 0.11128749698400497}, {'id': 353, 'seek': 233538, 'start': 2341.38, 'end': 2348.38, 'text': ' M next, okay. M is connected to E and F. So, it can be given the yellow color. D is connected', 'tokens': [50664, 376, 958, 11, 1392, 13, 376, 307, 4582, 281, 462, 293, 479, 13, 407, 11, 309, 393, 312, 2212, 264, 5566, 2017, 13, 413, 307, 4582, 51014], 'temperature': 0.0, 'avg_logprob': -0.1833165368916076, 'compression_ratio': 1.6918238993710693, 'no_speech_prob': 0.11128749698400497}, {'id': 354, 'seek': 233538, 'start': 2352.98, 'end': 2359.98, 'text': ' to J and M and it can be given the red color. C which is connected to D and M and it can', 'tokens': [51244, 281, 508, 293, 376, 293, 309, 393, 312, 2212, 264, 2182, 2017, 13, 383, 597, 307, 4582, 281, 413, 293, 376, 293, 309, 393, 51594], 'temperature': 0.0, 'avg_logprob': -0.1833165368916076, 'compression_ratio': 1.6918238993710693, 'no_speech_prob': 0.11128749698400497}, {'id': 355, 'seek': 235998, 'start': 2359.98, 'end': 2366.98, 'text': ' be given the blue color, right. Then K which is connected to J and D, right. These are', 'tokens': [50364, 312, 2212, 264, 3344, 2017, 11, 558, 13, 1396, 591, 597, 307, 4582, 281, 508, 293, 413, 11, 558, 13, 1981, 366, 50714], 'temperature': 0.0, 'avg_logprob': -0.22174758622140595, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016844937577843666}, {'id': 356, 'seek': 235998, 'start': 2375.38, 'end': 2380.06, 'text': ' the connections that we have removed. Very good point, yes. So, somehow you have to remember', 'tokens': [51134, 264, 9271, 300, 321, 362, 7261, 13, 4372, 665, 935, 11, 2086, 13, 407, 11, 6063, 291, 362, 281, 1604, 51368], 'temperature': 0.0, 'avg_logprob': -0.22174758622140595, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016844937577843666}, {'id': 357, 'seek': 235998, 'start': 2380.06, 'end': 2385.66, 'text': ' these edges that you have removed also or you can actually look at your original graph', 'tokens': [51368, 613, 8819, 300, 291, 362, 7261, 611, 420, 291, 393, 767, 574, 412, 428, 3380, 4295, 51648], 'temperature': 0.0, 'avg_logprob': -0.22174758622140595, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016844937577843666}, {'id': 358, 'seek': 238566, 'start': 2385.66, 'end': 2392.22, 'text': ' and only connect those edges for the nodes that are already present, correct. So, for', 'tokens': [50364, 293, 787, 1745, 729, 8819, 337, 264, 13891, 300, 366, 1217, 1974, 11, 3006, 13, 407, 11, 337, 50692], 'temperature': 0.0, 'avg_logprob': -0.19121258668225222, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.023035772144794464}, {'id': 359, 'seek': 238566, 'start': 2392.22, 'end': 2398.22, 'text': ' example, B is not there. So, an edge between K and B need not have to be considered, right.', 'tokens': [50692, 1365, 11, 363, 307, 406, 456, 13, 407, 11, 364, 4691, 1296, 591, 293, 363, 643, 406, 362, 281, 312, 4888, 11, 558, 13, 50992], 'temperature': 0.0, 'avg_logprob': -0.19121258668225222, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.023035772144794464}, {'id': 360, 'seek': 238566, 'start': 2398.22, 'end': 2403.22, 'text': ' So, it need not have to be stored. You can actually infer it from other, correct. Now,', 'tokens': [50992, 407, 11, 309, 643, 406, 362, 281, 312, 12187, 13, 509, 393, 767, 13596, 309, 490, 661, 11, 3006, 13, 823, 11, 51242], 'temperature': 0.0, 'avg_logprob': -0.19121258668225222, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.023035772144794464}, {'id': 361, 'seek': 238566, 'start': 2403.22, 'end': 2410.22, 'text': ' what, what is the next node? B. B is a spill node. So, it need not have to be allocated', 'tokens': [51242, 437, 11, 437, 307, 264, 958, 9984, 30, 363, 13, 363, 307, 257, 22044, 9984, 13, 407, 11, 309, 643, 406, 362, 281, 312, 29772, 51592], 'temperature': 0.0, 'avg_logprob': -0.19121258668225222, 'compression_ratio': 1.7425742574257426, 'no_speech_prob': 0.023035772144794464}, {'id': 362, 'seek': 241022, 'start': 2410.8599999999997, 'end': 2417.8599999999997, 'text': ' any color. So, it is not being colored, but now keep introducing all the edges, right.', 'tokens': [50396, 604, 2017, 13, 407, 11, 309, 307, 406, 885, 14332, 11, 457, 586, 1066, 15424, 439, 264, 8819, 11, 558, 13, 50746], 'temperature': 0.0, 'avg_logprob': -0.17490104004576967, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.008924891240894794}, {'id': 363, 'seek': 241022, 'start': 2419.9399999999996, 'end': 2426.9399999999996, 'text': ' And of course, you have G which can be colored and H which can be colored, right. To go back', 'tokens': [50850, 400, 295, 1164, 11, 291, 362, 460, 597, 393, 312, 14332, 293, 389, 597, 393, 312, 14332, 11, 558, 13, 1407, 352, 646, 51200], 'temperature': 0.0, 'avg_logprob': -0.17490104004576967, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.008924891240894794}, {'id': 364, 'seek': 241022, 'start': 2428.1, 'end': 2432.8599999999997, 'text': ' to your question, what would have happened if I have chosen a different color? See for', 'tokens': [51258, 281, 428, 1168, 11, 437, 576, 362, 2011, 498, 286, 362, 8614, 257, 819, 2017, 30, 3008, 337, 51496], 'temperature': 0.0, 'avg_logprob': -0.17490104004576967, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.008924891240894794}, {'id': 365, 'seek': 241022, 'start': 2432.8599999999997, 'end': 2437.9399999999996, 'text': ' example, when I colored F instead of blue if I have chosen red, then the colors would', 'tokens': [51496, 1365, 11, 562, 286, 14332, 479, 2602, 295, 3344, 498, 286, 362, 8614, 2182, 11, 550, 264, 4577, 576, 51750], 'temperature': 0.0, 'avg_logprob': -0.17490104004576967, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.008924891240894794}, {'id': 366, 'seek': 243794, 'start': 2437.94, 'end': 2443.98, 'text': ' have cyclically gone around somewhere else, not necessarily cyclically. Some change would', 'tokens': [50364, 362, 19474, 984, 2780, 926, 4079, 1646, 11, 406, 4725, 19474, 984, 13, 2188, 1319, 576, 50666], 'temperature': 0.0, 'avg_logprob': -0.17491825421651205, 'compression_ratio': 1.7251184834123223, 'no_speech_prob': 0.04143268242478371}, {'id': 367, 'seek': 243794, 'start': 2443.98, 'end': 2450.02, 'text': ' have happened, but in terms of whether it is colorable or not colorable, no other change', 'tokens': [50666, 362, 2011, 11, 457, 294, 2115, 295, 1968, 309, 307, 2017, 712, 420, 406, 2017, 712, 11, 572, 661, 1319, 50968], 'temperature': 0.0, 'avg_logprob': -0.17491825421651205, 'compression_ratio': 1.7251184834123223, 'no_speech_prob': 0.04143268242478371}, {'id': 368, 'seek': 243794, 'start': 2450.02, 'end': 2454.98, 'text': ' would have happened. No additional cost would have changed, right. So, that coloring decision', 'tokens': [50968, 576, 362, 2011, 13, 883, 4497, 2063, 576, 362, 3105, 11, 558, 13, 407, 11, 300, 23198, 3537, 51216], 'temperature': 0.0, 'avg_logprob': -0.17491825421651205, 'compression_ratio': 1.7251184834123223, 'no_speech_prob': 0.04143268242478371}, {'id': 369, 'seek': 243794, 'start': 2454.98, 'end': 2461.98, 'text': ' can be pretty much arbitrary. Choose a color which is not used by any of the previous ones,', 'tokens': [51216, 393, 312, 1238, 709, 23211, 13, 21661, 257, 2017, 597, 307, 406, 1143, 538, 604, 295, 264, 3894, 2306, 11, 51566], 'temperature': 0.0, 'avg_logprob': -0.17491825421651205, 'compression_ratio': 1.7251184834123223, 'no_speech_prob': 0.04143268242478371}, {'id': 370, 'seek': 246198, 'start': 2462.46, 'end': 2469.46, 'text': ' right. So, this graph we have colored it using three colors, but then we have to spill one', 'tokens': [50388, 558, 13, 407, 11, 341, 4295, 321, 362, 14332, 309, 1228, 1045, 4577, 11, 457, 550, 321, 362, 281, 22044, 472, 50738], 'temperature': 0.0, 'avg_logprob': -0.1712921460469564, 'compression_ratio': 1.7439613526570048, 'no_speech_prob': 0.009718690067529678}, {'id': 371, 'seek': 246198, 'start': 2469.46, 'end': 2476.46, 'text': ' node, right. And we have chosen a node which possibly has the least cost, right. If B is', 'tokens': [50738, 9984, 11, 558, 13, 400, 321, 362, 8614, 257, 9984, 597, 6264, 575, 264, 1935, 2063, 11, 558, 13, 759, 363, 307, 51088], 'temperature': 0.0, 'avg_logprob': -0.1712921460469564, 'compression_ratio': 1.7439613526570048, 'no_speech_prob': 0.009718690067529678}, {'id': 372, 'seek': 246198, 'start': 2478.42, 'end': 2482.94, 'text': ' being used more often, then you should have chosen some other node, maybe E or maybe something', 'tokens': [51186, 885, 1143, 544, 2049, 11, 550, 291, 820, 362, 8614, 512, 661, 9984, 11, 1310, 462, 420, 1310, 746, 51412], 'temperature': 0.0, 'avg_logprob': -0.1712921460469564, 'compression_ratio': 1.7439613526570048, 'no_speech_prob': 0.009718690067529678}, {'id': 373, 'seek': 246198, 'start': 2482.94, 'end': 2489.26, 'text': ' else, right at that point in time and then chose to spill that which might have caused', 'tokens': [51412, 1646, 11, 558, 412, 300, 935, 294, 565, 293, 550, 5111, 281, 22044, 300, 597, 1062, 362, 7008, 51728], 'temperature': 0.0, 'avg_logprob': -0.1712921460469564, 'compression_ratio': 1.7439613526570048, 'no_speech_prob': 0.009718690067529678}, {'id': 374, 'seek': 248926, 'start': 2489.26, 'end': 2495.1000000000004, 'text': ' more nodes to spill, right, which might have caused. We do not know. It is a heuristic', 'tokens': [50364, 544, 13891, 281, 22044, 11, 558, 11, 597, 1062, 362, 7008, 13, 492, 360, 406, 458, 13, 467, 307, 257, 415, 374, 3142, 50656], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 375, 'seek': 248926, 'start': 2495.1000000000004, 'end': 2498.1000000000004, 'text': ' algorithm, right. Yes.', 'tokens': [50656, 9284, 11, 558, 13, 1079, 13, 50806], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 376, 'seek': 248926, 'start': 2498.1000000000004, 'end': 2503.1000000000004, 'text': ' Sir, it is still possible, this is not optimal for this matrix.', 'tokens': [50806, 6144, 11, 309, 307, 920, 1944, 11, 341, 307, 406, 16252, 337, 341, 8141, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 377, 'seek': 248926, 'start': 2503.1000000000004, 'end': 2504.1000000000004, 'text': ' Definitely not optimal, yes.', 'tokens': [51056, 12151, 406, 16252, 11, 2086, 13, 51106], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 378, 'seek': 248926, 'start': 2504.1000000000004, 'end': 2505.1000000000004, 'text': ' Because in this case, it is still optimal.', 'tokens': [51106, 1436, 294, 341, 1389, 11, 309, 307, 920, 16252, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 379, 'seek': 248926, 'start': 2505.1000000000004, 'end': 2512.1000000000004, 'text': ' But you cannot color this graph using three colors. That much is sure, right. I mean at', 'tokens': [51156, 583, 291, 2644, 2017, 341, 4295, 1228, 1045, 4577, 13, 663, 709, 307, 988, 11, 558, 13, 286, 914, 412, 51506], 'temperature': 0.0, 'avg_logprob': -0.4032648370621052, 'compression_ratio': 1.616504854368932, 'no_speech_prob': 0.5271522998809814}, {'id': 380, 'seek': 251210, 'start': 2512.1, 'end': 2519.1, 'text': ' least this graph. In general, you cannot guarantee that, okay. I will give you an example little', 'tokens': [50364, 1935, 341, 4295, 13, 682, 2674, 11, 291, 2644, 10815, 300, 11, 1392, 13, 286, 486, 976, 291, 364, 1365, 707, 50714], 'temperature': 0.0, 'avg_logprob': -0.19612724223035446, 'compression_ratio': 1.6227272727272728, 'no_speech_prob': 0.05071950703859329}, {'id': 381, 'seek': 251210, 'start': 2521.86, 'end': 2528.86, 'text': " later on, okay. A case where Chaitin's algorithm would say you need to spill, but you do not", 'tokens': [50852, 1780, 322, 11, 1392, 13, 316, 1389, 689, 761, 1001, 259, 311, 9284, 576, 584, 291, 643, 281, 22044, 11, 457, 291, 360, 406, 51202], 'temperature': 0.0, 'avg_logprob': -0.19612724223035446, 'compression_ratio': 1.6227272727272728, 'no_speech_prob': 0.05071950703859329}, {'id': 382, 'seek': 251210, 'start': 2529.98, 'end': 2534.98, 'text': ' necessarily need to spill. That is also possible. I will give you an example for that, right.', 'tokens': [51258, 4725, 643, 281, 22044, 13, 663, 307, 611, 1944, 13, 286, 486, 976, 291, 364, 1365, 337, 300, 11, 558, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.19612724223035446, 'compression_ratio': 1.6227272727272728, 'no_speech_prob': 0.05071950703859329}, {'id': 383, 'seek': 251210, 'start': 2534.98, 'end': 2541.98, 'text': ' So, do you have a question Phil? Okay, it is not optimal. Definitely not.', 'tokens': [51508, 407, 11, 360, 291, 362, 257, 1168, 7777, 30, 1033, 11, 309, 307, 406, 16252, 13, 12151, 406, 13, 51858], 'temperature': 0.0, 'avg_logprob': -0.19612724223035446, 'compression_ratio': 1.6227272727272728, 'no_speech_prob': 0.05071950703859329}, {'id': 384, 'seek': 254210, 'start': 2542.5, 'end': 2547.5, 'text': ' And depending on what node you choose to spill, right, like what you pointed out earlier,', 'tokens': [50384, 400, 5413, 322, 437, 9984, 291, 2826, 281, 22044, 11, 558, 11, 411, 437, 291, 10932, 484, 3071, 11, 50634], 'temperature': 0.0, 'avg_logprob': -0.15264512101809183, 'compression_ratio': 1.6355140186915889, 'no_speech_prob': 0.03290243074297905}, {'id': 385, 'seek': 254210, 'start': 2547.5, 'end': 2553.42, 'text': ' if I have not chosen B, but I have chosen something else like a E or a M, I may end', 'tokens': [50634, 498, 286, 362, 406, 8614, 363, 11, 457, 286, 362, 8614, 746, 1646, 411, 257, 462, 420, 257, 376, 11, 286, 815, 917, 50930], 'temperature': 0.0, 'avg_logprob': -0.15264512101809183, 'compression_ratio': 1.6355140186915889, 'no_speech_prob': 0.03290243074297905}, {'id': 386, 'seek': 254210, 'start': 2553.42, 'end': 2560.42, 'text': ' up spilling more nodes, right. I may end up, okay. So, the spill heuristic which we talked', 'tokens': [50930, 493, 637, 7345, 544, 13891, 11, 558, 13, 286, 815, 917, 493, 11, 1392, 13, 407, 11, 264, 22044, 415, 374, 3142, 597, 321, 2825, 51280], 'temperature': 0.0, 'avg_logprob': -0.15264512101809183, 'compression_ratio': 1.6355140186915889, 'no_speech_prob': 0.03290243074297905}, {'id': 387, 'seek': 254210, 'start': 2563.18, 'end': 2569.18, 'text': ' about earlier is that you have to identify a node which gives you least cost. Chaitin', 'tokens': [51418, 466, 3071, 307, 300, 291, 362, 281, 5876, 257, 9984, 597, 2709, 291, 1935, 2063, 13, 761, 1001, 259, 51718], 'temperature': 0.0, 'avg_logprob': -0.15264512101809183, 'compression_ratio': 1.6355140186915889, 'no_speech_prob': 0.03290243074297905}, {'id': 388, 'seek': 256918, 'start': 2569.18, 'end': 2576.18, 'text': ' actually defined this cost to be the number of times the node is being used, okay. So,', 'tokens': [50364, 767, 7642, 341, 2063, 281, 312, 264, 1230, 295, 1413, 264, 9984, 307, 885, 1143, 11, 1392, 13, 407, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.1621093383202186, 'compression_ratio': 1.9774774774774775, 'no_speech_prob': 0.00945048313587904}, {'id': 389, 'seek': 256918, 'start': 2576.54, 'end': 2581.02, 'text': ' the spill heuristics takes into account the cost which is the number of times the node', 'tokens': [50732, 264, 22044, 415, 374, 6006, 2516, 666, 2696, 264, 2063, 597, 307, 264, 1230, 295, 1413, 264, 9984, 50956], 'temperature': 0.0, 'avg_logprob': -0.1621093383202186, 'compression_ratio': 1.9774774774774775, 'no_speech_prob': 0.00945048313587904}, {'id': 390, 'seek': 256918, 'start': 2581.02, 'end': 2587.5, 'text': ' is being, the variable is being used and the degree which is the number of adjacent or', 'tokens': [50956, 307, 885, 11, 264, 7006, 307, 885, 1143, 293, 264, 4314, 597, 307, 264, 1230, 295, 24441, 420, 51280], 'temperature': 0.0, 'avg_logprob': -0.1621093383202186, 'compression_ratio': 1.9774774774774775, 'no_speech_prob': 0.00945048313587904}, {'id': 391, 'seek': 256918, 'start': 2587.5, 'end': 2592.94, 'text': ' number of variables with which they interfere. It takes into account a combination of these', 'tokens': [51280, 1230, 295, 9102, 365, 597, 436, 23946, 13, 467, 2516, 666, 2696, 257, 6562, 295, 613, 51552], 'temperature': 0.0, 'avg_logprob': -0.1621093383202186, 'compression_ratio': 1.9774774774774775, 'no_speech_prob': 0.00945048313587904}, {'id': 392, 'seek': 256918, 'start': 2592.94, 'end': 2597.8999999999996, 'text': ' two costs and from what I understand, it is actually cost of n divided by degree of n.', 'tokens': [51552, 732, 5497, 293, 490, 437, 286, 1223, 11, 309, 307, 767, 2063, 295, 297, 6666, 538, 4314, 295, 297, 13, 51800], 'temperature': 0.0, 'avg_logprob': -0.1621093383202186, 'compression_ratio': 1.9774774774774775, 'no_speech_prob': 0.00945048313587904}, {'id': 393, 'seek': 259790, 'start': 2598.1, 'end': 2605.1, 'text': ' So, the more degree you have, the fewer would be the overall cost or the fewer cost you', 'tokens': [50374, 407, 11, 264, 544, 4314, 291, 362, 11, 264, 13366, 576, 312, 264, 4787, 2063, 420, 264, 13366, 2063, 291, 50724], 'temperature': 0.0, 'avg_logprob': -0.14120139678319296, 'compression_ratio': 1.9042553191489362, 'no_speech_prob': 0.016172826290130615}, {'id': 394, 'seek': 259790, 'start': 2605.3, 'end': 2610.86, 'text': ' have, then also it will be more. So, if the cost is higher, then spilling that node is', 'tokens': [50734, 362, 11, 550, 611, 309, 486, 312, 544, 13, 407, 11, 498, 264, 2063, 307, 2946, 11, 550, 637, 7345, 300, 9984, 307, 51012], 'temperature': 0.0, 'avg_logprob': -0.14120139678319296, 'compression_ratio': 1.9042553191489362, 'no_speech_prob': 0.016172826290130615}, {'id': 395, 'seek': 259790, 'start': 2610.86, 'end': 2616.82, 'text': ' not a good decision. If the degree is lower, spilling that node may not be a good decision,', 'tokens': [51012, 406, 257, 665, 3537, 13, 759, 264, 4314, 307, 3126, 11, 637, 7345, 300, 9984, 815, 406, 312, 257, 665, 3537, 11, 51310], 'temperature': 0.0, 'avg_logprob': -0.14120139678319296, 'compression_ratio': 1.9042553191489362, 'no_speech_prob': 0.016172826290130615}, {'id': 396, 'seek': 259790, 'start': 2616.82, 'end': 2623.82, 'text': ' may not be, right. So, it basically uses this ratio of cost to degree as the overall metric', 'tokens': [51310, 815, 406, 312, 11, 558, 13, 407, 11, 309, 1936, 4960, 341, 8509, 295, 2063, 281, 4314, 382, 264, 4787, 20678, 51660], 'temperature': 0.0, 'avg_logprob': -0.14120139678319296, 'compression_ratio': 1.9042553191489362, 'no_speech_prob': 0.016172826290130615}, {'id': 397, 'seek': 262382, 'start': 2624.82, 'end': 2630.9, 'text': ' by we saw, there you go. It is cost of n by degree of n and the one which has fewer cost', 'tokens': [50414, 538, 321, 1866, 11, 456, 291, 352, 13, 467, 307, 2063, 295, 297, 538, 4314, 295, 297, 293, 264, 472, 597, 575, 13366, 2063, 50718], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 398, 'seek': 262382, 'start': 2630.9, 'end': 2634.1000000000004, 'text': ' is what is chosen for spill at that point in time, okay.', 'tokens': [50718, 307, 437, 307, 8614, 337, 22044, 412, 300, 935, 294, 565, 11, 1392, 13, 50878], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 399, 'seek': 262382, 'start': 2634.1000000000004, 'end': 2637.1000000000004, 'text': ' Alright, any questions so far? Nan, right.', 'tokens': [50878, 2798, 11, 604, 1651, 370, 1400, 30, 18852, 11, 558, 13, 51028], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 400, 'seek': 262382, 'start': 2637.1000000000004, 'end': 2640.1000000000004, 'text': ' How will you get the cost?', 'tokens': [51028, 1012, 486, 291, 483, 264, 2063, 30, 51178], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 401, 'seek': 262382, 'start': 2640.1000000000004, 'end': 2647.1000000000004, 'text': ' How will you get the cost? Again, remember we talked about the usage based register allocation', 'tokens': [51178, 1012, 486, 291, 483, 264, 2063, 30, 3764, 11, 1604, 321, 2825, 466, 264, 14924, 2361, 7280, 27599, 51528], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 402, 'seek': 262382, 'start': 2647.1000000000004, 'end': 2651.5, 'text': ' method where we counting the, where we are counting the number of times each variable', 'tokens': [51528, 3170, 689, 321, 13251, 264, 11, 689, 321, 366, 13251, 264, 1230, 295, 1413, 1184, 7006, 51748], 'temperature': 0.0, 'avg_logprob': -0.3106285241933969, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.024432500824332237}, {'id': 403, 'seek': 265150, 'start': 2651.5, 'end': 2658.5, 'text': ' is being used and where we are using the dynamic counts, something similar to that,', 'tokens': [50364, 307, 885, 1143, 293, 689, 321, 366, 1228, 264, 8546, 14893, 11, 746, 2531, 281, 300, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.24617514552840267, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.017627274617552757}, {'id': 404, 'seek': 265150, 'start': 2658.5, 'end': 2665.5, 'text': ' right. Alright, okay. Now, let us see some extensions to this, right. There are three', 'tokens': [50714, 558, 13, 2798, 11, 1392, 13, 823, 11, 718, 505, 536, 512, 25129, 281, 341, 11, 558, 13, 821, 366, 1045, 51064], 'temperature': 0.0, 'avg_logprob': -0.24617514552840267, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.017627274617552757}, {'id': 405, 'seek': 265150, 'start': 2667.18, 'end': 2671.42, 'text': ' possible extensions that people have talked about. One is what is called the optimistic', 'tokens': [51148, 1944, 25129, 300, 561, 362, 2825, 466, 13, 1485, 307, 437, 307, 1219, 264, 19397, 51360], 'temperature': 0.0, 'avg_logprob': -0.24617514552840267, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.017627274617552757}, {'id': 406, 'seek': 265150, 'start': 2671.42, 'end': 2676.98, 'text': ' spill. The other one is coalescing which you talked about and the third one is live range', 'tokens': [51360, 22044, 13, 440, 661, 472, 307, 598, 4229, 2175, 597, 291, 2825, 466, 293, 264, 2636, 472, 307, 1621, 3613, 51638], 'temperature': 0.0, 'avg_logprob': -0.24617514552840267, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.017627274617552757}, {'id': 407, 'seek': 267698, 'start': 2677.02, 'end': 2684.02, 'text': ' splitting. We will introduce that also, right. So, optimistic spill is essentially that when', 'tokens': [50366, 30348, 13, 492, 486, 5366, 300, 611, 11, 558, 13, 407, 11, 19397, 22044, 307, 4476, 300, 562, 50716], 'temperature': 0.0, 'avg_logprob': -0.158609246098718, 'compression_ratio': 1.6603773584905661, 'no_speech_prob': 0.0233420729637146}, {'id': 408, 'seek': 267698, 'start': 2684.1, 'end': 2689.7, 'text': ' the graph cannot be simplified further, we remove one node as a spill node and then tag', 'tokens': [50720, 264, 4295, 2644, 312, 26335, 3052, 11, 321, 4159, 472, 9984, 382, 257, 22044, 9984, 293, 550, 6162, 51000], 'temperature': 0.0, 'avg_logprob': -0.158609246098718, 'compression_ratio': 1.6603773584905661, 'no_speech_prob': 0.0233420729637146}, {'id': 409, 'seek': 267698, 'start': 2689.7, 'end': 2695.86, 'text': ' it as spill. At that point in time we say that because I cannot simplify the graph,', 'tokens': [51000, 309, 382, 22044, 13, 1711, 300, 935, 294, 565, 321, 584, 300, 570, 286, 2644, 20460, 264, 4295, 11, 51308], 'temperature': 0.0, 'avg_logprob': -0.158609246098718, 'compression_ratio': 1.6603773584905661, 'no_speech_prob': 0.0233420729637146}, {'id': 410, 'seek': 267698, 'start': 2695.86, 'end': 2701.02, 'text': ' I have to necessarily spill this. Why do I say that? Because even if I remove the node,', 'tokens': [51308, 286, 362, 281, 4725, 22044, 341, 13, 1545, 360, 286, 584, 300, 30, 1436, 754, 498, 286, 4159, 264, 9984, 11, 51566], 'temperature': 0.0, 'avg_logprob': -0.158609246098718, 'compression_ratio': 1.6603773584905661, 'no_speech_prob': 0.0233420729637146}, {'id': 411, 'seek': 270102, 'start': 2701.34, 'end': 2708.34, 'text': ' I cannot, sorry, I cannot simplify because in the reduced graph it has nodes which are', 'tokens': [50380, 286, 2644, 11, 2597, 11, 286, 2644, 20460, 570, 294, 264, 9212, 4295, 309, 575, 13891, 597, 366, 50730], 'temperature': 0.0, 'avg_logprob': -0.19577388329939407, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.027955777943134308}, {'id': 412, 'seek': 270102, 'start': 2708.86, 'end': 2714.02, 'text': ' adjacent to this. It has at least k nodes which are adjacent to this and therefore by', 'tokens': [50756, 24441, 281, 341, 13, 467, 575, 412, 1935, 350, 13891, 597, 366, 24441, 281, 341, 293, 4412, 538, 51014], 'temperature': 0.0, 'avg_logprob': -0.19577388329939407, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.027955777943134308}, {'id': 413, 'seek': 270102, 'start': 2714.02, 'end': 2719.54, 'text': ' removing this, I cannot guarantee that if the rest can be colored, this can be colored.', 'tokens': [51014, 12720, 341, 11, 286, 2644, 10815, 300, 498, 264, 1472, 393, 312, 14332, 11, 341, 393, 312, 14332, 13, 51290], 'temperature': 0.0, 'avg_logprob': -0.19577388329939407, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.027955777943134308}, {'id': 414, 'seek': 270102, 'start': 2719.54, 'end': 2726.54, 'text': ' So, I am assuming that because it has k neighbors at that point in time, I may not have a free', 'tokens': [51290, 407, 11, 286, 669, 11926, 300, 570, 309, 575, 350, 12512, 412, 300, 935, 294, 565, 11, 286, 815, 406, 362, 257, 1737, 51640], 'temperature': 0.0, 'avg_logprob': -0.19577388329939407, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.027955777943134308}, {'id': 415, 'seek': 272654, 'start': 2727.22, 'end': 2733.98, 'text': ' color, but the k neighbors it has may not necessarily use k different colors. Some of', 'tokens': [50398, 2017, 11, 457, 264, 350, 12512, 309, 575, 815, 406, 4725, 764, 350, 819, 4577, 13, 2188, 295, 50736], 'temperature': 0.0, 'avg_logprob': -0.21127102292817215, 'compression_ratio': 1.5570175438596492, 'no_speech_prob': 0.011975191533565521}, {'id': 416, 'seek': 272654, 'start': 2733.98, 'end': 2740.98, 'text': ' them can possibly use the same color in which case I may still have a color left out, right.', 'tokens': [50736, 552, 393, 6264, 764, 264, 912, 2017, 294, 597, 1389, 286, 815, 920, 362, 257, 2017, 1411, 484, 11, 558, 13, 51086], 'temperature': 0.0, 'avg_logprob': -0.21127102292817215, 'compression_ratio': 1.5570175438596492, 'no_speech_prob': 0.011975191533565521}, {'id': 417, 'seek': 272654, 'start': 2741.02, 'end': 2746.5, 'text': ' I will give you a very, very simple example where this becomes really obvious, right.', 'tokens': [51088, 286, 486, 976, 291, 257, 588, 11, 588, 2199, 1365, 689, 341, 3643, 534, 6322, 11, 558, 13, 51362], 'temperature': 0.0, 'avg_logprob': -0.21127102292817215, 'compression_ratio': 1.5570175438596492, 'no_speech_prob': 0.011975191533565521}, {'id': 418, 'seek': 272654, 'start': 2746.5, 'end': 2753.02, 'text': " So, this Chaitin's algorithm was subsequently improved by Briggs who said that do not take", 'tokens': [51362, 407, 11, 341, 761, 1001, 259, 311, 9284, 390, 26514, 9689, 538, 1603, 32555, 567, 848, 300, 360, 406, 747, 51688], 'temperature': 0.0, 'avg_logprob': -0.21127102292817215, 'compression_ratio': 1.5570175438596492, 'no_speech_prob': 0.011975191533565521}, {'id': 419, 'seek': 275302, 'start': 2753.02, 'end': 2758.5, 'text': ' the decision of spill when you do the simplified step. Take the decision of spill when you', 'tokens': [50364, 264, 3537, 295, 22044, 562, 291, 360, 264, 26335, 1823, 13, 3664, 264, 3537, 295, 22044, 562, 291, 50638], 'temperature': 0.0, 'avg_logprob': -0.15734790455211292, 'compression_ratio': 1.8697478991596639, 'no_speech_prob': 0.03246511518955231}, {'id': 420, 'seek': 275302, 'start': 2758.5, 'end': 2764.7, 'text': ' do the coloring step, okay. That means that you say that this may spill, right, but when', 'tokens': [50638, 360, 264, 23198, 1823, 11, 1392, 13, 663, 1355, 300, 291, 584, 300, 341, 815, 22044, 11, 558, 11, 457, 562, 50948], 'temperature': 0.0, 'avg_logprob': -0.15734790455211292, 'compression_ratio': 1.8697478991596639, 'no_speech_prob': 0.03246511518955231}, {'id': 421, 'seek': 275302, 'start': 2764.7, 'end': 2770.2599999999998, 'text': ' you are introducing the color, check all the neighbors. If you have, you know, k minus', 'tokens': [50948, 291, 366, 15424, 264, 2017, 11, 1520, 439, 264, 12512, 13, 759, 291, 362, 11, 291, 458, 11, 350, 3175, 51226], 'temperature': 0.0, 'avg_logprob': -0.15734790455211292, 'compression_ratio': 1.8697478991596639, 'no_speech_prob': 0.03246511518955231}, {'id': 422, 'seek': 275302, 'start': 2770.2599999999998, 'end': 2777.2599999999998, 'text': ' 1 different colors being used, then obviously this can be colored. But if you have k colors', 'tokens': [51226, 502, 819, 4577, 885, 1143, 11, 550, 2745, 341, 393, 312, 14332, 13, 583, 498, 291, 362, 350, 4577, 51576], 'temperature': 0.0, 'avg_logprob': -0.15734790455211292, 'compression_ratio': 1.8697478991596639, 'no_speech_prob': 0.03246511518955231}, {'id': 423, 'seek': 275302, 'start': 2777.2599999999998, 'end': 2781.58, 'text': ' being used for the adjacent nodes, then this cannot be colored, right. So, that is the', 'tokens': [51576, 885, 1143, 337, 264, 24441, 13891, 11, 550, 341, 2644, 312, 14332, 11, 558, 13, 407, 11, 300, 307, 264, 51792], 'temperature': 0.0, 'avg_logprob': -0.15734790455211292, 'compression_ratio': 1.8697478991596639, 'no_speech_prob': 0.03246511518955231}, {'id': 424, 'seek': 278158, 'start': 2781.58, 'end': 2788.18, 'text': ' decision he says. So, that is Briggs algorithm, right. So, the actual spill decision is taken', 'tokens': [50364, 3537, 415, 1619, 13, 407, 11, 300, 307, 1603, 32555, 9284, 11, 558, 13, 407, 11, 264, 3539, 22044, 3537, 307, 2726, 50694], 'temperature': 0.0, 'avg_logprob': -0.16901409382722815, 'compression_ratio': 1.7722772277227723, 'no_speech_prob': 0.07555174827575684}, {'id': 425, 'seek': 278158, 'start': 2788.18, 'end': 2793.9, 'text': ' during the coloring process, during the coloring phase, right. And when you push it into the', 'tokens': [50694, 1830, 264, 23198, 1399, 11, 1830, 264, 23198, 5574, 11, 558, 13, 400, 562, 291, 2944, 309, 666, 264, 50980], 'temperature': 0.0, 'avg_logprob': -0.16901409382722815, 'compression_ratio': 1.7722772277227723, 'no_speech_prob': 0.07555174827575684}, {'id': 426, 'seek': 278158, 'start': 2793.9, 'end': 2800.54, 'text': ' stack you say it may spill. Do not say it will spill, it may spill, right. So, here', 'tokens': [50980, 8630, 291, 584, 309, 815, 22044, 13, 1144, 406, 584, 309, 486, 22044, 11, 309, 815, 22044, 11, 558, 13, 407, 11, 510, 51312], 'temperature': 0.0, 'avg_logprob': -0.16901409382722815, 'compression_ratio': 1.7722772277227723, 'no_speech_prob': 0.07555174827575684}, {'id': 427, 'seek': 278158, 'start': 2800.54, 'end': 2807.54, 'text': ' is a very, very simple example. Is this graph too colorable? Yes, right. So, now if you', 'tokens': [51312, 307, 257, 588, 11, 588, 2199, 1365, 13, 1119, 341, 4295, 886, 2017, 712, 30, 1079, 11, 558, 13, 407, 11, 586, 498, 291, 51662], 'temperature': 0.0, 'avg_logprob': -0.16901409382722815, 'compression_ratio': 1.7722772277227723, 'no_speech_prob': 0.07555174827575684}, {'id': 428, 'seek': 280754, 'start': 2808.34, 'end': 2815.34, 'text': " apply Chaitin's algorithm what happens? What is the simplified step? Can I simplify? Can", 'tokens': [50404, 3079, 761, 1001, 259, 311, 9284, 437, 2314, 30, 708, 307, 264, 26335, 1823, 30, 1664, 286, 20460, 30, 1664, 50754], 'temperature': 0.0, 'avg_logprob': -0.17088319142659505, 'compression_ratio': 1.5789473684210527, 'no_speech_prob': 0.0782577320933342}, {'id': 429, 'seek': 280754, 'start': 2819.62, 'end': 2826.62, 'text': ' I remove any nodes? Each node has two edges, correct. So, I cannot simplify. If I have', 'tokens': [50968, 286, 4159, 604, 13891, 30, 6947, 9984, 575, 732, 8819, 11, 3006, 13, 407, 11, 286, 2644, 20460, 13, 759, 286, 362, 51318], 'temperature': 0.0, 'avg_logprob': -0.17088319142659505, 'compression_ratio': 1.5789473684210527, 'no_speech_prob': 0.0782577320933342}, {'id': 430, 'seek': 280754, 'start': 2827.9, 'end': 2834.9, 'text': " applied Chaitin's algorithm, I would say spill a node, right. So, if I apply Briggs algorithm,", 'tokens': [51382, 6456, 761, 1001, 259, 311, 9284, 11, 286, 576, 584, 22044, 257, 9984, 11, 558, 13, 407, 11, 498, 286, 3079, 1603, 32555, 9284, 11, 51732], 'temperature': 0.0, 'avg_logprob': -0.17088319142659505, 'compression_ratio': 1.5789473684210527, 'no_speech_prob': 0.0782577320933342}, {'id': 431, 'seek': 283490, 'start': 2835.2200000000003, 'end': 2839.78, 'text': ' I am going to say that, okay, I have, I may have to spill a node. I still do not know.', 'tokens': [50380, 286, 669, 516, 281, 584, 300, 11, 1392, 11, 286, 362, 11, 286, 815, 362, 281, 22044, 257, 9984, 13, 286, 920, 360, 406, 458, 13, 50608], 'temperature': 0.0, 'avg_logprob': -0.17643463320848418, 'compression_ratio': 1.8445378151260505, 'no_speech_prob': 0.006562674418091774}, {'id': 432, 'seek': 283490, 'start': 2839.78, 'end': 2845.26, 'text': ' So, let me pick a node, right. Maybe I have picked a in this case and then push it into', 'tokens': [50608, 407, 11, 718, 385, 1888, 257, 9984, 11, 558, 13, 2704, 286, 362, 6183, 257, 294, 341, 1389, 293, 550, 2944, 309, 666, 50882], 'temperature': 0.0, 'avg_logprob': -0.17643463320848418, 'compression_ratio': 1.8445378151260505, 'no_speech_prob': 0.006562674418091774}, {'id': 433, 'seek': 283490, 'start': 2845.26, 'end': 2851.34, 'text': ' the stack and then say a may spill, right. I have not done anything very different. Only', 'tokens': [50882, 264, 8630, 293, 550, 584, 257, 815, 22044, 11, 558, 13, 286, 362, 406, 1096, 1340, 588, 819, 13, 5686, 51186], 'temperature': 0.0, 'avg_logprob': -0.17643463320848418, 'compression_ratio': 1.8445378151260505, 'no_speech_prob': 0.006562674418091774}, {'id': 434, 'seek': 283490, 'start': 2851.34, 'end': 2857.6600000000003, 'text': ' thing is that instead of saying a spills, I am saying a may spill. Now, I have a graph', 'tokens': [51186, 551, 307, 300, 2602, 295, 1566, 257, 637, 2565, 11, 286, 669, 1566, 257, 815, 22044, 13, 823, 11, 286, 362, 257, 4295, 51502], 'temperature': 0.0, 'avg_logprob': -0.17643463320848418, 'compression_ratio': 1.8445378151260505, 'no_speech_prob': 0.006562674418091774}, {'id': 435, 'seek': 283490, 'start': 2857.6600000000003, 'end': 2864.6600000000003, 'text': ' which can be simplified, right. And thought I can simplify it, simplify it, simplify it,', 'tokens': [51502, 597, 393, 312, 26335, 11, 558, 13, 400, 1194, 286, 393, 20460, 309, 11, 20460, 309, 11, 20460, 309, 11, 51852], 'temperature': 0.0, 'avg_logprob': -0.17643463320848418, 'compression_ratio': 1.8445378151260505, 'no_speech_prob': 0.006562674418091774}, {'id': 436, 'seek': 286490, 'start': 2865.5, 'end': 2872.5, 'text': ' and remove all the nodes, right. Now, I start coloring it. When I color it using two colors,', 'tokens': [50394, 293, 4159, 439, 264, 13891, 11, 558, 13, 823, 11, 286, 722, 23198, 309, 13, 1133, 286, 2017, 309, 1228, 732, 4577, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.22141594461875386, 'compression_ratio': 1.78, 'no_speech_prob': 0.005734460894018412}, {'id': 437, 'seek': 286490, 'start': 2874.6600000000003, 'end': 2881.6600000000003, 'text': ' B can be given a color, right. C can be, my coloring is not working. I think animation', 'tokens': [50852, 363, 393, 312, 2212, 257, 2017, 11, 558, 13, 383, 393, 312, 11, 452, 23198, 307, 406, 1364, 13, 286, 519, 9603, 51202], 'temperature': 0.0, 'avg_logprob': -0.22141594461875386, 'compression_ratio': 1.78, 'no_speech_prob': 0.005734460894018412}, {'id': 438, 'seek': 286490, 'start': 2881.7400000000002, 'end': 2886.98, 'text': ' will come later. Sorry about it. So, C can be given a color which is other than B. And', 'tokens': [51206, 486, 808, 1780, 13, 4919, 466, 309, 13, 407, 11, 383, 393, 312, 2212, 257, 2017, 597, 307, 661, 813, 363, 13, 400, 51468], 'temperature': 0.0, 'avg_logprob': -0.22141594461875386, 'compression_ratio': 1.78, 'no_speech_prob': 0.005734460894018412}, {'id': 439, 'seek': 286490, 'start': 2886.98, 'end': 2893.98, 'text': ' now what about B? B can also be colored which is a color which is other than C. So, I can', 'tokens': [51468, 586, 437, 466, 363, 30, 363, 393, 611, 312, 14332, 597, 307, 257, 2017, 597, 307, 661, 813, 383, 13, 407, 11, 286, 393, 51818], 'temperature': 0.0, 'avg_logprob': -0.22141594461875386, 'compression_ratio': 1.78, 'no_speech_prob': 0.005734460894018412}, {'id': 440, 'seek': 289490, 'start': 2895.1800000000003, 'end': 2902.1800000000003, 'text': ' and that could be same as D, right. And now when you come to A, you see that A has two', 'tokens': [50378, 293, 300, 727, 312, 912, 382, 413, 11, 558, 13, 400, 586, 562, 291, 808, 281, 316, 11, 291, 536, 300, 316, 575, 732, 50728], 'temperature': 0.0, 'avg_logprob': -0.20263028385663273, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.02801547572016716}, {'id': 441, 'seek': 289490, 'start': 2903.98, 'end': 2910.98, 'text': ' neighbors B and D, but both share the same color. So, you still have one color left for', 'tokens': [50818, 12512, 363, 293, 413, 11, 457, 1293, 2073, 264, 912, 2017, 13, 407, 11, 291, 920, 362, 472, 2017, 1411, 337, 51168], 'temperature': 0.0, 'avg_logprob': -0.20263028385663273, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.02801547572016716}, {'id': 442, 'seek': 289490, 'start': 2911.02, 'end': 2915.7400000000002, 'text': ' it. So, it can be colored. So, hopefully the colors know. Some of the coloring did not', 'tokens': [51170, 309, 13, 407, 11, 309, 393, 312, 14332, 13, 407, 11, 4696, 264, 4577, 458, 13, 2188, 295, 264, 23198, 630, 406, 51406], 'temperature': 0.0, 'avg_logprob': -0.20263028385663273, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.02801547572016716}, {'id': 443, 'seek': 289490, 'start': 2915.7400000000002, 'end': 2920.02, 'text': ' come. Sorry about that, right. So, here you have, you can, you could have colored this', 'tokens': [51406, 808, 13, 4919, 466, 300, 11, 558, 13, 407, 11, 510, 291, 362, 11, 291, 393, 11, 291, 727, 362, 14332, 341, 51620], 'temperature': 0.0, 'avg_logprob': -0.20263028385663273, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.02801547572016716}, {'id': 444, 'seek': 292002, 'start': 2920.02, 'end': 2927.02, 'text': ' red, this would be green, this would be red, and this would be green. So, just because', 'tokens': [50364, 2182, 11, 341, 576, 312, 3092, 11, 341, 576, 312, 2182, 11, 293, 341, 576, 312, 3092, 13, 407, 11, 445, 570, 50714], 'temperature': 0.0, 'avg_logprob': -0.1679794981672957, 'compression_ratio': 1.6835443037974684, 'no_speech_prob': 0.014635177329182625}, {'id': 445, 'seek': 292002, 'start': 2927.22, 'end': 2934.22, 'text': ' a graph has all nodes and each of which having K or more edges does not mean that it is not', 'tokens': [50724, 257, 4295, 575, 439, 13891, 293, 1184, 295, 597, 1419, 591, 420, 544, 8819, 775, 406, 914, 300, 309, 307, 406, 51074], 'temperature': 0.0, 'avg_logprob': -0.1679794981672957, 'compression_ratio': 1.6835443037974684, 'no_speech_prob': 0.014635177329182625}, {'id': 446, 'seek': 292002, 'start': 2936.86, 'end': 2943.86, 'text': ' K colorable, right. It only says that it may be possible, it may be, it may happen that', 'tokens': [51206, 591, 2017, 712, 11, 558, 13, 467, 787, 1619, 300, 309, 815, 312, 1944, 11, 309, 815, 312, 11, 309, 815, 1051, 300, 51556], 'temperature': 0.0, 'avg_logprob': -0.1679794981672957, 'compression_ratio': 1.6835443037974684, 'no_speech_prob': 0.014635177329182625}, {'id': 447, 'seek': 294386, 'start': 2944.7400000000002, 'end': 2950.98, 'text': ' one node has to be spilled, correct. That is all it says. So, Briggs algorithm essentially', 'tokens': [50408, 472, 9984, 575, 281, 312, 37833, 11, 3006, 13, 663, 307, 439, 309, 1619, 13, 407, 11, 1603, 32555, 9284, 4476, 50720], 'temperature': 0.0, 'avg_logprob': -0.17206585624001242, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.004091539885848761}, {'id': 448, 'seek': 294386, 'start': 2950.98, 'end': 2956.98, 'text': ' says that take this decision of spilling not at the time of pushing it into the stack,', 'tokens': [50720, 1619, 300, 747, 341, 3537, 295, 637, 7345, 406, 412, 264, 565, 295, 7380, 309, 666, 264, 8630, 11, 51020], 'temperature': 0.0, 'avg_logprob': -0.17206585624001242, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.004091539885848761}, {'id': 449, 'seek': 294386, 'start': 2956.98, 'end': 2961.98, 'text': ' but at the time of popping it out. Because at that point in time, you know which are', 'tokens': [51020, 457, 412, 264, 565, 295, 18374, 309, 484, 13, 1436, 412, 300, 935, 294, 565, 11, 291, 458, 597, 366, 51270], 'temperature': 0.0, 'avg_logprob': -0.17206585624001242, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.004091539885848761}, {'id': 450, 'seek': 294386, 'start': 2961.98, 'end': 2967.1800000000003, 'text': ' the other edges which have already been colored and whether they have used K or fewer colors.', 'tokens': [51270, 264, 661, 8819, 597, 362, 1217, 668, 14332, 293, 1968, 436, 362, 1143, 591, 420, 13366, 4577, 13, 51530], 'temperature': 0.0, 'avg_logprob': -0.17206585624001242, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.004091539885848761}, {'id': 451, 'seek': 294386, 'start': 2967.1800000000003, 'end': 2971.98, 'text': ' If they have used fewer than K color, then you can still color it using one of the remaining', 'tokens': [51530, 759, 436, 362, 1143, 13366, 813, 591, 2017, 11, 550, 291, 393, 920, 2017, 309, 1228, 472, 295, 264, 8877, 51770], 'temperature': 0.0, 'avg_logprob': -0.17206585624001242, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.004091539885848761}, {'id': 452, 'seek': 297198, 'start': 2971.98, 'end': 2978.98, 'text': " colors. So, that is the change between the Briggs algorithm and the Chaitin's algorithm,", 'tokens': [50364, 4577, 13, 407, 11, 300, 307, 264, 1319, 1296, 264, 1603, 32555, 9284, 293, 264, 761, 1001, 259, 311, 9284, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.32192215712174127, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.04964017868041992}, {'id': 453, 'seek': 297198, 'start': 2980.1, 'end': 2981.1, 'text': ' right.', 'tokens': [50770, 558, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.32192215712174127, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.04964017868041992}, {'id': 454, 'seek': 297198, 'start': 2981.1, 'end': 2988.1, 'text': ' So, next we will talk about a step called the coalescing, right. So, when we are coloring', 'tokens': [50820, 407, 11, 958, 321, 486, 751, 466, 257, 1823, 1219, 264, 598, 4229, 2175, 11, 558, 13, 407, 11, 562, 321, 366, 23198, 51170], 'temperature': 0.0, 'avg_logprob': -0.32192215712174127, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.04964017868041992}, {'id': 455, 'seek': 297198, 'start': 2988.1, 'end': 2993.22, 'text': ' this graph, we are assuming that, okay, there are these different variables and these variables', 'tokens': [51170, 341, 4295, 11, 321, 366, 11926, 300, 11, 1392, 11, 456, 366, 613, 819, 9102, 293, 613, 9102, 51426], 'temperature': 0.0, 'avg_logprob': -0.32192215712174127, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.04964017868041992}, {'id': 456, 'seek': 297198, 'start': 2993.22, 'end': 2998.1, 'text': ' correspond to these nodes and I do not know anything about these nodes except about their', 'tokens': [51426, 6805, 281, 613, 13891, 293, 286, 360, 406, 458, 1340, 466, 613, 13891, 3993, 466, 641, 51670], 'temperature': 0.0, 'avg_logprob': -0.32192215712174127, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.04964017868041992}, {'id': 457, 'seek': 299810, 'start': 2998.1, 'end': 3004.02, 'text': ' coordinates. But it may so happen that in my code, right, I would have two nodes which', 'tokens': [50364, 21056, 13, 583, 309, 815, 370, 1051, 300, 294, 452, 3089, 11, 558, 11, 286, 576, 362, 732, 13891, 597, 50660], 'temperature': 0.0, 'avg_logprob': -0.18896638970626028, 'compression_ratio': 1.7004830917874396, 'no_speech_prob': 0.16601920127868652}, {'id': 458, 'seek': 299810, 'start': 3004.02, 'end': 3011.02, 'text': ' are one is the copy of the other, right, something like this, right. For example, I have x is', 'tokens': [50660, 366, 472, 307, 264, 5055, 295, 264, 661, 11, 558, 11, 746, 411, 341, 11, 558, 13, 1171, 1365, 11, 286, 362, 2031, 307, 51010], 'temperature': 0.0, 'avg_logprob': -0.18896638970626028, 'compression_ratio': 1.7004830917874396, 'no_speech_prob': 0.16601920127868652}, {'id': 459, 'seek': 299810, 'start': 3011.8199999999997, 'end': 3018.22, 'text': ' equal to something and then I have written y is equal to x, right. Now, assuming that', 'tokens': [51050, 2681, 281, 746, 293, 550, 286, 362, 3720, 288, 307, 2681, 281, 2031, 11, 558, 13, 823, 11, 11926, 300, 51370], 'temperature': 0.0, 'avg_logprob': -0.18896638970626028, 'compression_ratio': 1.7004830917874396, 'no_speech_prob': 0.16601920127868652}, {'id': 460, 'seek': 299810, 'start': 3018.22, 'end': 3025.22, 'text': ' these two are two different live ranges, I have one node for x and one node for y. If', 'tokens': [51370, 613, 732, 366, 732, 819, 1621, 22526, 11, 286, 362, 472, 9984, 337, 2031, 293, 472, 9984, 337, 288, 13, 759, 51720], 'temperature': 0.0, 'avg_logprob': -0.18896638970626028, 'compression_ratio': 1.7004830917874396, 'no_speech_prob': 0.16601920127868652}, {'id': 461, 'seek': 302522, 'start': 3025.3799999999997, 'end': 3032.3799999999997, 'text': ' I so happen, if it so happens that I have one node as a copy of the other node, right,', 'tokens': [50372, 286, 370, 1051, 11, 498, 309, 370, 2314, 300, 286, 362, 472, 9984, 382, 257, 5055, 295, 264, 661, 9984, 11, 558, 11, 50722], 'temperature': 0.0, 'avg_logprob': -0.14129900425038439, 'compression_ratio': 1.9659090909090908, 'no_speech_prob': 0.016663242131471634}, {'id': 462, 'seek': 302522, 'start': 3032.74, 'end': 3039.74, 'text': ' then in that case and only in that case, I can merge these two nodes, right. But then', 'tokens': [50740, 550, 294, 300, 1389, 293, 787, 294, 300, 1389, 11, 286, 393, 22183, 613, 732, 13891, 11, 558, 13, 583, 550, 51090], 'temperature': 0.0, 'avg_logprob': -0.14129900425038439, 'compression_ratio': 1.9659090909090908, 'no_speech_prob': 0.016663242131471634}, {'id': 463, 'seek': 302522, 'start': 3040.62, 'end': 3046.4599999999996, 'text': ' when I merge these two nodes, the nodes which are adjacent to x and the nodes which are', 'tokens': [51134, 562, 286, 22183, 613, 732, 13891, 11, 264, 13891, 597, 366, 24441, 281, 2031, 293, 264, 13891, 597, 366, 51426], 'temperature': 0.0, 'avg_logprob': -0.14129900425038439, 'compression_ratio': 1.9659090909090908, 'no_speech_prob': 0.016663242131471634}, {'id': 464, 'seek': 302522, 'start': 3046.4599999999996, 'end': 3053.2599999999998, 'text': ' adjacent to y will be adjacent to the union of that would be adjacent to x y. So, you', 'tokens': [51426, 24441, 281, 288, 486, 312, 24441, 281, 264, 11671, 295, 300, 576, 312, 24441, 281, 2031, 288, 13, 407, 11, 291, 51766], 'temperature': 0.0, 'avg_logprob': -0.14129900425038439, 'compression_ratio': 1.9659090909090908, 'no_speech_prob': 0.016663242131471634}, {'id': 465, 'seek': 305326, 'start': 3053.38, 'end': 3059.82, 'text': ' may increase the number of adjacent nodes, but still it is okay, right, still it may', 'tokens': [50370, 815, 3488, 264, 1230, 295, 24441, 13891, 11, 457, 920, 309, 307, 1392, 11, 558, 11, 920, 309, 815, 50692], 'temperature': 0.0, 'avg_logprob': -0.17588964282956898, 'compression_ratio': 1.768, 'no_speech_prob': 0.011981056071817875}, {'id': 466, 'seek': 305326, 'start': 3059.82, 'end': 3064.3, 'text': ' give you better solution. So, this step is what is called the coalescing, right. So,', 'tokens': [50692, 976, 291, 1101, 3827, 13, 407, 11, 341, 1823, 307, 437, 307, 1219, 264, 598, 4229, 2175, 11, 558, 13, 407, 11, 50916], 'temperature': 0.0, 'avg_logprob': -0.17588964282956898, 'compression_ratio': 1.768, 'no_speech_prob': 0.011981056071817875}, {'id': 467, 'seek': 305326, 'start': 3064.3, 'end': 3070.7400000000002, 'text': ' at some point in time, you go back and look at your code and then see if you find code', 'tokens': [50916, 412, 512, 935, 294, 565, 11, 291, 352, 646, 293, 574, 412, 428, 3089, 293, 550, 536, 498, 291, 915, 3089, 51238], 'temperature': 0.0, 'avg_logprob': -0.17588964282956898, 'compression_ratio': 1.768, 'no_speech_prob': 0.011981056071817875}, {'id': 468, 'seek': 305326, 'start': 3070.7400000000002, 'end': 3075.3, 'text': ' which is, that is when you generate your interference graph, you can actually say which of these', 'tokens': [51238, 597, 307, 11, 300, 307, 562, 291, 8460, 428, 24497, 4295, 11, 291, 393, 767, 584, 597, 295, 613, 51466], 'temperature': 0.0, 'avg_logprob': -0.17588964282956898, 'compression_ratio': 1.768, 'no_speech_prob': 0.011981056071817875}, {'id': 469, 'seek': 305326, 'start': 3075.3, 'end': 3080.5, 'text': ' nodes are coalescible and which of them are not, right. They call it as move or non-move', 'tokens': [51466, 13891, 366, 598, 4229, 32128, 293, 597, 295, 552, 366, 406, 11, 558, 13, 814, 818, 309, 382, 1286, 420, 2107, 12, 76, 1682, 51726], 'temperature': 0.0, 'avg_logprob': -0.17588964282956898, 'compression_ratio': 1.768, 'no_speech_prob': 0.011981056071817875}, {'id': 470, 'seek': 308050, 'start': 3080.58, 'end': 3087.1, 'text': ' nodes. For example, here y is basically called a move node because it is a move from move', 'tokens': [50368, 13891, 13, 1171, 1365, 11, 510, 288, 307, 1936, 1219, 257, 1286, 9984, 570, 309, 307, 257, 1286, 490, 1286, 50694], 'temperature': 0.0, 'avg_logprob': -0.15612776383109714, 'compression_ratio': 1.5919282511210762, 'no_speech_prob': 0.06180756539106369}, {'id': 471, 'seek': 308050, 'start': 3087.1, 'end': 3093.38, 'text': ' of x to y, right. So, they kind of annotate it this way and then use this information', 'tokens': [50694, 295, 2031, 281, 288, 11, 558, 13, 407, 11, 436, 733, 295, 25339, 473, 309, 341, 636, 293, 550, 764, 341, 1589, 51008], 'temperature': 0.0, 'avg_logprob': -0.15612776383109714, 'compression_ratio': 1.5919282511210762, 'no_speech_prob': 0.06180756539106369}, {'id': 472, 'seek': 308050, 'start': 3093.38, 'end': 3099.7, 'text': ' in coalescing node. And when you coalesce nodes, the number of interferences may increase,', 'tokens': [51008, 294, 598, 4229, 2175, 9984, 13, 400, 562, 291, 598, 4229, 384, 13891, 11, 264, 1230, 295, 25799, 2667, 815, 3488, 11, 51324], 'temperature': 0.0, 'avg_logprob': -0.15612776383109714, 'compression_ratio': 1.5919282511210762, 'no_speech_prob': 0.06180756539106369}, {'id': 473, 'seek': 308050, 'start': 3099.7, 'end': 3105.7, 'text': ' but still it may help you to find solutions or color the things without having to go for', 'tokens': [51324, 457, 920, 309, 815, 854, 291, 281, 915, 6547, 420, 2017, 264, 721, 1553, 1419, 281, 352, 337, 51624], 'temperature': 0.0, 'avg_logprob': -0.15612776383109714, 'compression_ratio': 1.5919282511210762, 'no_speech_prob': 0.06180756539106369}, {'id': 474, 'seek': 310570, 'start': 3105.7, 'end': 3110.54, 'text': ' a spell. So, typically what they do is that they do the simplify pass, I think I have', 'tokens': [50364, 257, 9827, 13, 407, 11, 5850, 437, 436, 360, 307, 300, 436, 360, 264, 20460, 1320, 11, 286, 519, 286, 362, 50606], 'temperature': 0.0, 'avg_logprob': -0.26307096186372425, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.033625345677137375}, {'id': 475, 'seek': 310570, 'start': 3110.54, 'end': 3115.74, 'text': ' this slide there, okay. So, you keep doing the simplify pass, right, and then you simplify', 'tokens': [50606, 341, 4137, 456, 11, 1392, 13, 407, 11, 291, 1066, 884, 264, 20460, 1320, 11, 558, 11, 293, 550, 291, 20460, 50866], 'temperature': 0.0, 'avg_logprob': -0.26307096186372425, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.033625345677137375}, {'id': 476, 'seek': 310570, 'start': 3115.74, 'end': 3122.74, 'text': ' only non-move nodes, right. And then if you come to a situation where, okay, so, yes,', 'tokens': [50866, 787, 2107, 12, 76, 1682, 13891, 11, 558, 13, 400, 550, 498, 291, 808, 281, 257, 2590, 689, 11, 1392, 11, 370, 11, 2086, 11, 51216], 'temperature': 0.0, 'avg_logprob': -0.26307096186372425, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.033625345677137375}, {'id': 477, 'seek': 310570, 'start': 3124.98, 'end': 3130.46, 'text': ' so simplify by removing all the non-move related nodes and if you come to a situation where', 'tokens': [51328, 370, 20460, 538, 12720, 439, 264, 2107, 12, 76, 1682, 4077, 13891, 293, 498, 291, 808, 281, 257, 2590, 689, 51602], 'temperature': 0.0, 'avg_logprob': -0.26307096186372425, 'compression_ratio': 1.8829787234042554, 'no_speech_prob': 0.033625345677137375}, {'id': 478, 'seek': 313046, 'start': 3130.5, 'end': 3135.86, 'text': ' you cannot do simplify, but you have let us say move related nodes and if some of these', 'tokens': [50366, 291, 2644, 360, 20460, 11, 457, 291, 362, 718, 505, 584, 1286, 4077, 13891, 293, 498, 512, 295, 613, 50634], 'temperature': 0.0, 'avg_logprob': -0.14481083413828974, 'compression_ratio': 2.0555555555555554, 'no_speech_prob': 0.007923753000795841}, {'id': 479, 'seek': 313046, 'start': 3135.86, 'end': 3141.9, 'text': ' move related nodes can be combined, then you merge them, right. And then on the resultant', 'tokens': [50634, 1286, 4077, 13891, 393, 312, 9354, 11, 550, 291, 22183, 552, 11, 558, 13, 400, 550, 322, 264, 1874, 394, 50936], 'temperature': 0.0, 'avg_logprob': -0.14481083413828974, 'compression_ratio': 2.0555555555555554, 'no_speech_prob': 0.007923753000795841}, {'id': 480, 'seek': 313046, 'start': 3141.9, 'end': 3147.2200000000003, 'text': ' graph you try to apply simplify. If you can simplify, it is fine. If you cannot simplify,', 'tokens': [50936, 4295, 291, 853, 281, 3079, 20460, 13, 759, 291, 393, 20460, 11, 309, 307, 2489, 13, 759, 291, 2644, 20460, 11, 51202], 'temperature': 0.0, 'avg_logprob': -0.14481083413828974, 'compression_ratio': 2.0555555555555554, 'no_speech_prob': 0.007923753000795841}, {'id': 481, 'seek': 313046, 'start': 3147.2200000000003, 'end': 3153.78, 'text': ' try to see if you can do more coalescing, right. Keep doing this, okay, until you cannot', 'tokens': [51202, 853, 281, 536, 498, 291, 393, 360, 544, 598, 4229, 2175, 11, 558, 13, 5527, 884, 341, 11, 1392, 11, 1826, 291, 2644, 51530], 'temperature': 0.0, 'avg_logprob': -0.14481083413828974, 'compression_ratio': 2.0555555555555554, 'no_speech_prob': 0.007923753000795841}, {'id': 482, 'seek': 313046, 'start': 3153.78, 'end': 3160.3, 'text': ' do any more coalescing or you cannot do any more simplify. If you cannot do simplify or', 'tokens': [51530, 360, 604, 544, 598, 4229, 2175, 420, 291, 2644, 360, 604, 544, 20460, 13, 759, 291, 2644, 360, 20460, 420, 51856], 'temperature': 0.0, 'avg_logprob': -0.14481083413828974, 'compression_ratio': 2.0555555555555554, 'no_speech_prob': 0.007923753000795841}, {'id': 483, 'seek': 316030, 'start': 3160.3, 'end': 3167.3, 'text': ' coalescing, then of course you have no option other than spill and then you come back and', 'tokens': [50364, 598, 4229, 2175, 11, 550, 295, 1164, 291, 362, 572, 3614, 661, 813, 22044, 293, 550, 291, 808, 646, 293, 50714], 'temperature': 0.0, 'avg_logprob': -0.1564844276594079, 'compression_ratio': 1.6081081081081081, 'no_speech_prob': 0.008368450216948986}, {'id': 484, 'seek': 316030, 'start': 3167.5800000000004, 'end': 3174.5800000000004, 'text': ' then redo this whole thing again, right. So, that is how you can improve things, okay.', 'tokens': [50728, 550, 29956, 341, 1379, 551, 797, 11, 558, 13, 407, 11, 300, 307, 577, 291, 393, 3470, 721, 11, 1392, 13, 51078], 'temperature': 0.0, 'avg_logprob': -0.1564844276594079, 'compression_ratio': 1.6081081081081081, 'no_speech_prob': 0.008368450216948986}, {'id': 485, 'seek': 316030, 'start': 3175.02, 'end': 3181.34, 'text': ' Now let us talk about the last optimization which is live range splitting, okay. So, again', 'tokens': [51100, 823, 718, 505, 751, 466, 264, 1036, 19618, 597, 307, 1621, 3613, 30348, 11, 1392, 13, 407, 11, 797, 51416], 'temperature': 0.0, 'avg_logprob': -0.1564844276594079, 'compression_ratio': 1.6081081081081081, 'no_speech_prob': 0.008368450216948986}, {'id': 486, 'seek': 316030, 'start': 3181.34, 'end': 3187.2200000000003, 'text': ' I have a part of the example here. I did not do the full example for some reason, but let', 'tokens': [51416, 286, 362, 257, 644, 295, 264, 1365, 510, 13, 286, 630, 406, 360, 264, 1577, 1365, 337, 512, 1778, 11, 457, 718, 51710], 'temperature': 0.0, 'avg_logprob': -0.1564844276594079, 'compression_ratio': 1.6081081081081081, 'no_speech_prob': 0.008368450216948986}, {'id': 487, 'seek': 318722, 'start': 3187.5, 'end': 3192.66, 'text': ' us just try to see what it is and maybe with that, well with that we will kind of close', 'tokens': [50378, 505, 445, 853, 281, 536, 437, 309, 307, 293, 1310, 365, 300, 11, 731, 365, 300, 321, 486, 733, 295, 1998, 50636], 'temperature': 0.0, 'avg_logprob': -0.1470552262805757, 'compression_ratio': 1.7827868852459017, 'no_speech_prob': 0.03674793615937233}, {'id': 488, 'seek': 318722, 'start': 3192.66, 'end': 3198.1, 'text': ' this graph coloring based allocation. So, every time you look at the live range and', 'tokens': [50636, 341, 4295, 23198, 2361, 27599, 13, 407, 11, 633, 565, 291, 574, 412, 264, 1621, 3613, 293, 50908], 'temperature': 0.0, 'avg_logprob': -0.1470552262805757, 'compression_ratio': 1.7827868852459017, 'no_speech_prob': 0.03674793615937233}, {'id': 489, 'seek': 318722, 'start': 3198.1, 'end': 3204.2599999999998, 'text': ' then you see that two different variables are conflicting with each other and then you', 'tokens': [50908, 550, 291, 536, 300, 732, 819, 9102, 366, 43784, 365, 1184, 661, 293, 550, 291, 51216], 'temperature': 0.0, 'avg_logprob': -0.1470552262805757, 'compression_ratio': 1.7827868852459017, 'no_speech_prob': 0.03674793615937233}, {'id': 490, 'seek': 318722, 'start': 3204.2599999999998, 'end': 3209.74, 'text': ' take a decision of splitting, spilling a node, right. Whenever you cannot color, you take', 'tokens': [51216, 747, 257, 3537, 295, 30348, 11, 637, 7345, 257, 9984, 11, 558, 13, 14159, 291, 2644, 2017, 11, 291, 747, 51490], 'temperature': 0.0, 'avg_logprob': -0.1470552262805757, 'compression_ratio': 1.7827868852459017, 'no_speech_prob': 0.03674793615937233}, {'id': 491, 'seek': 318722, 'start': 3209.74, 'end': 3213.7, 'text': ' the decision of spilling the node. Whether you do the spill at a time of pushing it in', 'tokens': [51490, 264, 3537, 295, 637, 7345, 264, 9984, 13, 8503, 291, 360, 264, 22044, 412, 257, 565, 295, 7380, 309, 294, 51688], 'temperature': 0.0, 'avg_logprob': -0.1470552262805757, 'compression_ratio': 1.7827868852459017, 'no_speech_prob': 0.03674793615937233}, {'id': 492, 'seek': 321370, 'start': 3213.7, 'end': 3219.02, 'text': ' the stack or you take the decision of spilling at a time of popping it from the stack, it', 'tokens': [50364, 264, 8630, 420, 291, 747, 264, 3537, 295, 637, 7345, 412, 257, 565, 295, 18374, 309, 490, 264, 8630, 11, 309, 50630], 'temperature': 0.0, 'avg_logprob': -0.1714890566739169, 'compression_ratio': 1.8278688524590163, 'no_speech_prob': 0.05315633490681648}, {'id': 493, 'seek': 321370, 'start': 3219.02, 'end': 3224.02, 'text': ' does not matter. You are only saying that this cannot be colored, we will give it a', 'tokens': [50630, 775, 406, 1871, 13, 509, 366, 787, 1566, 300, 341, 2644, 312, 14332, 11, 321, 486, 976, 309, 257, 50880], 'temperature': 0.0, 'avg_logprob': -0.1714890566739169, 'compression_ratio': 1.8278688524590163, 'no_speech_prob': 0.05315633490681648}, {'id': 494, 'seek': 321370, 'start': 3224.02, 'end': 3229.3799999999997, 'text': ' different, I mean sorry, it cannot be colored, therefore it has to be spilled. One of them', 'tokens': [50880, 819, 11, 286, 914, 2597, 11, 309, 2644, 312, 14332, 11, 4412, 309, 575, 281, 312, 37833, 13, 1485, 295, 552, 51148], 'temperature': 0.0, 'avg_logprob': -0.1714890566739169, 'compression_ratio': 1.8278688524590163, 'no_speech_prob': 0.05315633490681648}, {'id': 495, 'seek': 321370, 'start': 3229.3799999999997, 'end': 3234.3799999999997, 'text': ' has to be spilled. So, you take that decision anyway. So, this live range splitting approach', 'tokens': [51148, 575, 281, 312, 37833, 13, 407, 11, 291, 747, 300, 3537, 4033, 13, 407, 11, 341, 1621, 3613, 30348, 3109, 51398], 'temperature': 0.0, 'avg_logprob': -0.1714890566739169, 'compression_ratio': 1.8278688524590163, 'no_speech_prob': 0.05315633490681648}, {'id': 496, 'seek': 321370, 'start': 3234.3799999999997, 'end': 3241.3799999999997, 'text': ' essentially instead of just choosing between, I mean instead of deciding it as spill, it', 'tokens': [51398, 4476, 2602, 295, 445, 10875, 1296, 11, 286, 914, 2602, 295, 17990, 309, 382, 22044, 11, 309, 51748], 'temperature': 0.0, 'avg_logprob': -0.1714890566739169, 'compression_ratio': 1.8278688524590163, 'no_speech_prob': 0.05315633490681648}, {'id': 497, 'seek': 324138, 'start': 3241.7400000000002, 'end': 3247.02, 'text': ' now goes back and then say should I spill or should I split. That is the decision you', 'tokens': [50382, 586, 1709, 646, 293, 550, 584, 820, 286, 22044, 420, 820, 286, 7472, 13, 663, 307, 264, 3537, 291, 50646], 'temperature': 0.0, 'avg_logprob': -0.1754806873410247, 'compression_ratio': 1.721951219512195, 'no_speech_prob': 0.017092302441596985}, {'id': 498, 'seek': 324138, 'start': 3247.02, 'end': 3253.9, 'text': ' try to take and wherever splitting incurs less cost, you will go ahead and do the splitting', 'tokens': [50646, 853, 281, 747, 293, 8660, 30348, 834, 2156, 1570, 2063, 11, 291, 486, 352, 2286, 293, 360, 264, 30348, 50990], 'temperature': 0.0, 'avg_logprob': -0.1754806873410247, 'compression_ratio': 1.721951219512195, 'no_speech_prob': 0.017092302441596985}, {'id': 499, 'seek': 324138, 'start': 3253.9, 'end': 3258.6600000000003, 'text': ' as opposed to spilling. I will show you examples of this and you will understand what that', 'tokens': [50990, 382, 8851, 281, 637, 7345, 13, 286, 486, 855, 291, 5110, 295, 341, 293, 291, 486, 1223, 437, 300, 51228], 'temperature': 0.0, 'avg_logprob': -0.1754806873410247, 'compression_ratio': 1.721951219512195, 'no_speech_prob': 0.017092302441596985}, {'id': 500, 'seek': 324138, 'start': 3258.6600000000003, 'end': 3264.94, 'text': ' is, right. Again we will consider the same example that we saw earlier, okay and you', 'tokens': [51228, 307, 11, 558, 13, 3764, 321, 486, 1949, 264, 912, 1365, 300, 321, 1866, 3071, 11, 1392, 293, 291, 51542], 'temperature': 0.0, 'avg_logprob': -0.1754806873410247, 'compression_ratio': 1.721951219512195, 'no_speech_prob': 0.017092302441596985}, {'id': 501, 'seek': 326494, 'start': 3265.5, 'end': 3272.5, 'text': ' see that there is this gap, okay, for S 2 which is what I called as the hole, right.', 'tokens': [50392, 536, 300, 456, 307, 341, 7417, 11, 1392, 11, 337, 318, 568, 597, 307, 437, 286, 1219, 382, 264, 5458, 11, 558, 13, 50742], 'temperature': 0.0, 'avg_logprob': -0.27845438639322917, 'compression_ratio': 1.5465116279069768, 'no_speech_prob': 0.19692759215831757}, {'id': 502, 'seek': 326494, 'start': 3272.5, 'end': 3279.5, 'text': ' Now, so this original graph is not three colorable, right, which we saw earlier. Now supposing', 'tokens': [50742, 823, 11, 370, 341, 3380, 4295, 307, 406, 1045, 2017, 712, 11, 558, 11, 597, 321, 1866, 3071, 13, 823, 1003, 6110, 51092], 'temperature': 0.0, 'avg_logprob': -0.27845438639322917, 'compression_ratio': 1.5465116279069768, 'no_speech_prob': 0.19692759215831757}, {'id': 503, 'seek': 326494, 'start': 3280.94, 'end': 3287.94, 'text': ' I say that this S 3 variable that you are looking at, right, has some use here, sorry,', 'tokens': [51164, 286, 584, 300, 341, 318, 805, 7006, 300, 291, 366, 1237, 412, 11, 558, 11, 575, 512, 764, 510, 11, 2597, 11, 51514], 'temperature': 0.0, 'avg_logprob': -0.27845438639322917, 'compression_ratio': 1.5465116279069768, 'no_speech_prob': 0.19692759215831757}, {'id': 504, 'seek': 328794, 'start': 3288.94, 'end': 3295.94, 'text': ' it is being defined here but has no use here, correct, and has an use over here, right,', 'tokens': [50414, 309, 307, 885, 7642, 510, 457, 575, 572, 764, 510, 11, 3006, 11, 293, 575, 364, 764, 670, 510, 11, 558, 11, 50764], 'temperature': 0.0, 'avg_logprob': -0.2009770075480143, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.013396518304944038}, {'id': 505, 'seek': 328794, 'start': 3298.34, 'end': 3305.34, 'text': ' until here. So, let me try to decide and then say that I will split this live range S 3', 'tokens': [50884, 1826, 510, 13, 407, 11, 718, 385, 853, 281, 4536, 293, 550, 584, 300, 286, 486, 7472, 341, 1621, 3613, 318, 805, 51234], 'temperature': 0.0, 'avg_logprob': -0.2009770075480143, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.013396518304944038}, {'id': 506, 'seek': 328794, 'start': 3307.54, 'end': 3314.54, 'text': ' into two parts, one part which is this and another part which is this, right. But if', 'tokens': [51344, 666, 732, 3166, 11, 472, 644, 597, 307, 341, 293, 1071, 644, 597, 307, 341, 11, 558, 13, 583, 498, 51694], 'temperature': 0.0, 'avg_logprob': -0.2009770075480143, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.013396518304944038}, {'id': 507, 'seek': 331454, 'start': 3315.42, 'end': 3320.54, 'text': ' I want to decide it to split here, what does it really mean? It means that at this point', 'tokens': [50408, 286, 528, 281, 4536, 309, 281, 7472, 510, 11, 437, 775, 309, 534, 914, 30, 467, 1355, 300, 412, 341, 935, 50664], 'temperature': 0.0, 'avg_logprob': -0.16212195579451744, 'compression_ratio': 1.6359447004608294, 'no_speech_prob': 0.009526915848255157}, {'id': 508, 'seek': 331454, 'start': 3320.54, 'end': 3326.94, 'text': ' in time I have to somehow get the value of S 3 again. So, it has some cost of spill versus', 'tokens': [50664, 294, 565, 286, 362, 281, 6063, 483, 264, 2158, 295, 318, 805, 797, 13, 407, 11, 309, 575, 512, 2063, 295, 22044, 5717, 50984], 'temperature': 0.0, 'avg_logprob': -0.16212195579451744, 'compression_ratio': 1.6359447004608294, 'no_speech_prob': 0.009526915848255157}, {'id': 509, 'seek': 331454, 'start': 3326.94, 'end': 3332.94, 'text': ' whatever it is, right, that cost is there. But let us try to think of that as a split,', 'tokens': [50984, 2035, 309, 307, 11, 558, 11, 300, 2063, 307, 456, 13, 583, 718, 505, 853, 281, 519, 295, 300, 382, 257, 7472, 11, 51284], 'temperature': 0.0, 'avg_logprob': -0.16212195579451744, 'compression_ratio': 1.6359447004608294, 'no_speech_prob': 0.009526915848255157}, {'id': 510, 'seek': 331454, 'start': 3332.94, 'end': 3339.94, 'text': ' right, then what happens, right. And similarly I will think of my S 2 as not as one live', 'tokens': [51284, 558, 11, 550, 437, 2314, 11, 558, 13, 400, 14138, 286, 486, 519, 295, 452, 318, 568, 382, 406, 382, 472, 1621, 51634], 'temperature': 0.0, 'avg_logprob': -0.16212195579451744, 'compression_ratio': 1.6359447004608294, 'no_speech_prob': 0.009526915848255157}, {'id': 511, 'seek': 333994, 'start': 3340.66, 'end': 3346.66, 'text': ' range, right, going from here to here or this live range S 2 interfering with S 5 and so', 'tokens': [50400, 3613, 11, 558, 11, 516, 490, 510, 281, 510, 420, 341, 1621, 3613, 318, 568, 48721, 365, 318, 1025, 293, 370, 50700], 'temperature': 0.0, 'avg_logprob': -0.22337135738796657, 'compression_ratio': 1.6073059360730593, 'no_speech_prob': 0.004393009934574366}, {'id': 512, 'seek': 333994, 'start': 3346.66, 'end': 3352.1, 'text': ' on. But think of this as a fresh live range. That means that I will reload this value or', 'tokens': [50700, 322, 13, 583, 519, 295, 341, 382, 257, 4451, 1621, 3613, 13, 663, 1355, 300, 286, 486, 25628, 341, 2158, 420, 50972], 'temperature': 0.0, 'avg_logprob': -0.22337135738796657, 'compression_ratio': 1.6073059360730593, 'no_speech_prob': 0.004393009934574366}, {'id': 513, 'seek': 333994, 'start': 3352.1, 'end': 3358.3, 'text': ' do something about it. Now when I do this, my interference graph changes to this. I have', 'tokens': [50972, 360, 746, 466, 309, 13, 823, 562, 286, 360, 341, 11, 452, 24497, 4295, 2962, 281, 341, 13, 286, 362, 51282], 'temperature': 0.0, 'avg_logprob': -0.22337135738796657, 'compression_ratio': 1.6073059360730593, 'no_speech_prob': 0.004393009934574366}, {'id': 514, 'seek': 333994, 'start': 3358.3, 'end': 3365.3, 'text': ' all the original nodes but because of these split live ranges I have an S 2 prime and', 'tokens': [51282, 439, 264, 3380, 13891, 457, 570, 295, 613, 7472, 1621, 22526, 286, 362, 364, 318, 568, 5835, 293, 51632], 'temperature': 0.0, 'avg_logprob': -0.22337135738796657, 'compression_ratio': 1.6073059360730593, 'no_speech_prob': 0.004393009934574366}, {'id': 515, 'seek': 336530, 'start': 3365.3, 'end': 3370.6600000000003, 'text': ' S 3 prime. S 3 prime because I have split this live range into two parts and S 2 prime', 'tokens': [50364, 318, 805, 5835, 13, 318, 805, 5835, 570, 286, 362, 7472, 341, 1621, 3613, 666, 732, 3166, 293, 318, 568, 5835, 50632], 'temperature': 0.0, 'avg_logprob': -0.1478739676074447, 'compression_ratio': 1.9107142857142858, 'no_speech_prob': 0.008066684007644653}, {'id': 516, 'seek': 336530, 'start': 3370.6600000000003, 'end': 3376.34, 'text': ' because I am now considering these two live ranges as two different live ranges, okay.', 'tokens': [50632, 570, 286, 669, 586, 8079, 613, 732, 1621, 22526, 382, 732, 819, 1621, 22526, 11, 1392, 13, 50916], 'temperature': 0.0, 'avg_logprob': -0.1478739676074447, 'compression_ratio': 1.9107142857142858, 'no_speech_prob': 0.008066684007644653}, {'id': 517, 'seek': 336530, 'start': 3376.34, 'end': 3381.02, 'text': ' In order for me to decide to do this there is a cost that I am incurring that I need', 'tokens': [50916, 682, 1668, 337, 385, 281, 4536, 281, 360, 341, 456, 307, 257, 2063, 300, 286, 669, 35774, 2937, 300, 286, 643, 51150], 'temperature': 0.0, 'avg_logprob': -0.1478739676074447, 'compression_ratio': 1.9107142857142858, 'no_speech_prob': 0.008066684007644653}, {'id': 518, 'seek': 336530, 'start': 3381.02, 'end': 3386.34, 'text': ' to calculate and I need to kind of evaluate whether this cost is worse than the spill', 'tokens': [51150, 281, 8873, 293, 286, 643, 281, 733, 295, 13059, 1968, 341, 2063, 307, 5324, 813, 264, 22044, 51416], 'temperature': 0.0, 'avg_logprob': -0.1478739676074447, 'compression_ratio': 1.9107142857142858, 'no_speech_prob': 0.008066684007644653}, {'id': 519, 'seek': 336530, 'start': 3386.34, 'end': 3391.1800000000003, 'text': ' cost or better than the spill cost. If it is better than the spill cost then only I', 'tokens': [51416, 2063, 420, 1101, 813, 264, 22044, 2063, 13, 759, 309, 307, 1101, 813, 264, 22044, 2063, 550, 787, 286, 51658], 'temperature': 0.0, 'avg_logprob': -0.1478739676074447, 'compression_ratio': 1.9107142857142858, 'no_speech_prob': 0.008066684007644653}, {'id': 520, 'seek': 339118, 'start': 3391.18, 'end': 3396.8999999999996, 'text': ' should do this, okay. So the splitting decision again is taken based on whether the split', 'tokens': [50364, 820, 360, 341, 11, 1392, 13, 407, 264, 30348, 3537, 797, 307, 2726, 2361, 322, 1968, 264, 7472, 50650], 'temperature': 0.0, 'avg_logprob': -0.22023532504127138, 'compression_ratio': 1.6382978723404256, 'no_speech_prob': 0.31297072768211365}, {'id': 521, 'seek': 339118, 'start': 3396.8999999999996, 'end': 3403.58, 'text': ' is going to be more, is less costly than the spill. Then only you do the split. So let', 'tokens': [50650, 307, 516, 281, 312, 544, 11, 307, 1570, 28328, 813, 264, 22044, 13, 1396, 787, 291, 360, 264, 7472, 13, 407, 718, 50984], 'temperature': 0.0, 'avg_logprob': -0.22023532504127138, 'compression_ratio': 1.6382978723404256, 'no_speech_prob': 0.31297072768211365}, {'id': 522, 'seek': 339118, 'start': 3403.58, 'end': 3408.7, 'text': ' us look at having decided that, right, it is less cost and we are going to do the split.', 'tokens': [50984, 505, 574, 412, 1419, 3047, 300, 11, 558, 11, 309, 307, 1570, 2063, 293, 321, 366, 516, 281, 360, 264, 7472, 13, 51240], 'temperature': 0.0, 'avg_logprob': -0.22023532504127138, 'compression_ratio': 1.6382978723404256, 'no_speech_prob': 0.31297072768211365}, {'id': 523, 'seek': 339118, 'start': 3408.7, 'end': 3412.4199999999996, 'text': ' How does it help to color? Okay, go ahead.', 'tokens': [51240, 1012, 775, 309, 854, 281, 2017, 30, 1033, 11, 352, 2286, 13, 51426], 'temperature': 0.0, 'avg_logprob': -0.22023532504127138, 'compression_ratio': 1.6382978723404256, 'no_speech_prob': 0.31297072768211365}, {'id': 524, 'seek': 341242, 'start': 3412.42, 'end': 3425.3, 'text': ' Yes and no, okay. Splitting has certain advantages as well. We will not go into that right now,', 'tokens': [50364, 1079, 293, 572, 11, 1392, 13, 19788, 2414, 575, 1629, 14906, 382, 731, 13, 492, 486, 406, 352, 666, 300, 558, 586, 11, 51008], 'temperature': 0.0, 'avg_logprob': -0.24297388544622459, 'compression_ratio': 1.362962962962963, 'no_speech_prob': 0.4748448431491852}, {'id': 525, 'seek': 341242, 'start': 3425.3, 'end': 3434.3, 'text': ' okay, right. So one thing is that, how do I put this? Yeah, it may appear to be somewhat', 'tokens': [51008, 1392, 11, 558, 13, 407, 472, 551, 307, 300, 11, 577, 360, 286, 829, 341, 30, 865, 11, 309, 815, 4204, 281, 312, 8344, 51458], 'temperature': 0.0, 'avg_logprob': -0.24297388544622459, 'compression_ratio': 1.362962962962963, 'no_speech_prob': 0.4748448431491852}, {'id': 526, 'seek': 343430, 'start': 3434.38, 'end': 3439.38, 'text': ' similar but let us let differ the discussion some other point, okay.', 'tokens': [50368, 2531, 457, 718, 505, 718, 743, 264, 5017, 512, 661, 935, 11, 1392, 13, 50618], 'temperature': 0.0, 'avg_logprob': -0.31764439900716146, 'compression_ratio': 1.5103092783505154, 'no_speech_prob': 0.24165892601013184}, {'id': 527, 'seek': 343430, 'start': 3439.38, 'end': 3446.38, 'text': ' Yeah. S 2 prime and S 6 has two conflict, yes.', 'tokens': [50618, 865, 13, 318, 568, 5835, 293, 318, 1386, 575, 732, 6596, 11, 2086, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.31764439900716146, 'compression_ratio': 1.5103092783505154, 'no_speech_prob': 0.24165892601013184}, {'id': 528, 'seek': 343430, 'start': 3446.38, 'end': 3451.7400000000002, 'text': ' I think that edge is missing. But hopefully they will be given different colors. Let us', 'tokens': [50968, 286, 519, 300, 4691, 307, 5361, 13, 583, 4696, 436, 486, 312, 2212, 819, 4577, 13, 961, 505, 51236], 'temperature': 0.0, 'avg_logprob': -0.31764439900716146, 'compression_ratio': 1.5103092783505154, 'no_speech_prob': 0.24165892601013184}, {'id': 529, 'seek': 343430, 'start': 3451.7400000000002, 'end': 3457.1400000000003, 'text': ' see what happens. They can be given different colors, right. Even though there is an edge', 'tokens': [51236, 536, 437, 2314, 13, 814, 393, 312, 2212, 819, 4577, 11, 558, 13, 2754, 1673, 456, 307, 364, 4691, 51506], 'temperature': 0.0, 'avg_logprob': -0.31764439900716146, 'compression_ratio': 1.5103092783505154, 'no_speech_prob': 0.24165892601013184}, {'id': 530, 'seek': 345714, 'start': 3457.22, 'end': 3468.22, 'text': ' they can still be given different colors. We can correct it, okay, no problem, right.', 'tokens': [50368, 436, 393, 920, 312, 2212, 819, 4577, 13, 492, 393, 3006, 309, 11, 1392, 11, 572, 1154, 11, 558, 13, 50918], 'temperature': 0.0, 'avg_logprob': -0.30874086828792796, 'compression_ratio': 1.6459627329192548, 'no_speech_prob': 0.1751854568719864}, {'id': 531, 'seek': 345714, 'start': 3468.22, 'end': 3476.22, 'text': ' So these are the optimizations or extensions that can be done to J. Tens algorithm. So', 'tokens': [50918, 407, 613, 366, 264, 5028, 14455, 420, 25129, 300, 393, 312, 1096, 281, 508, 13, 314, 694, 9284, 13, 407, 51318], 'temperature': 0.0, 'avg_logprob': -0.30874086828792796, 'compression_ratio': 1.6459627329192548, 'no_speech_prob': 0.1751854568719864}, {'id': 532, 'seek': 345714, 'start': 3476.22, 'end': 3483.06, 'text': ' think of doing this optimistic spilling, think of doing this coalescing, think of doing this', 'tokens': [51318, 519, 295, 884, 341, 19397, 637, 7345, 11, 519, 295, 884, 341, 598, 4229, 2175, 11, 519, 295, 884, 341, 51660], 'temperature': 0.0, 'avg_logprob': -0.30874086828792796, 'compression_ratio': 1.6459627329192548, 'no_speech_prob': 0.1751854568719864}, {'id': 533, 'seek': 348306, 'start': 3483.06, 'end': 3487.7, 'text': ' live range splitting wherever it is possible, okay.', 'tokens': [50364, 1621, 3613, 30348, 8660, 309, 307, 1944, 11, 1392, 13, 50596], 'temperature': 0.0, 'avg_logprob': -0.142532836066352, 'compression_ratio': 1.8738738738738738, 'no_speech_prob': 0.10314072668552399}, {'id': 534, 'seek': 348306, 'start': 3487.7, 'end': 3492.46, 'text': ' Now let us just briefly talk about local register allocation. This is typically done, typically', 'tokens': [50596, 823, 718, 505, 445, 10515, 751, 466, 2654, 7280, 27599, 13, 639, 307, 5850, 1096, 11, 5850, 50834], 'temperature': 0.0, 'avg_logprob': -0.142532836066352, 'compression_ratio': 1.8738738738738738, 'no_speech_prob': 0.10314072668552399}, {'id': 535, 'seek': 348306, 'start': 3492.46, 'end': 3496.98, 'text': ' what is done is that it is global register allocation which is done and then in certain', 'tokens': [50834, 437, 307, 1096, 307, 300, 309, 307, 4338, 7280, 27599, 597, 307, 1096, 293, 550, 294, 1629, 51060], 'temperature': 0.0, 'avg_logprob': -0.142532836066352, 'compression_ratio': 1.8738738738738738, 'no_speech_prob': 0.10314072668552399}, {'id': 536, 'seek': 348306, 'start': 3496.98, 'end': 3502.42, 'text': ' cases where it is required you do some local register allocation which is essentially allocation', 'tokens': [51060, 3331, 689, 309, 307, 4739, 291, 360, 512, 2654, 7280, 27599, 597, 307, 4476, 27599, 51332], 'temperature': 0.0, 'avg_logprob': -0.142532836066352, 'compression_ratio': 1.8738738738738738, 'no_speech_prob': 0.10314072668552399}, {'id': 537, 'seek': 348306, 'start': 3502.42, 'end': 3509.42, 'text': ' within a basic block. Let us see why this is useful or why this is simpler than the', 'tokens': [51332, 1951, 257, 3875, 3461, 13, 961, 505, 536, 983, 341, 307, 4420, 420, 983, 341, 307, 18587, 813, 264, 51682], 'temperature': 0.0, 'avg_logprob': -0.142532836066352, 'compression_ratio': 1.8738738738738738, 'no_speech_prob': 0.10314072668552399}, {'id': 538, 'seek': 350942, 'start': 3509.42, 'end': 3516.42, 'text': ' other allocation. Now in local register allocation we are only considering register allocation', 'tokens': [50364, 661, 27599, 13, 823, 294, 2654, 7280, 27599, 321, 366, 787, 8079, 7280, 27599, 50714], 'temperature': 0.0, 'avg_logprob': -0.15911038716634116, 'compression_ratio': 1.830601092896175, 'no_speech_prob': 0.015734989196062088}, {'id': 539, 'seek': 350942, 'start': 3516.82, 'end': 3523.82, 'text': ' within a basic block, right. That means that within that basic block we are going to identify', 'tokens': [50734, 1951, 257, 3875, 3461, 11, 558, 13, 663, 1355, 300, 1951, 300, 3875, 3461, 321, 366, 516, 281, 5876, 51084], 'temperature': 0.0, 'avg_logprob': -0.15911038716634116, 'compression_ratio': 1.830601092896175, 'no_speech_prob': 0.015734989196062088}, {'id': 540, 'seek': 350942, 'start': 3523.94, 'end': 3530.26, 'text': ' what are the variables and what are their live ranges, okay.', 'tokens': [51090, 437, 366, 264, 9102, 293, 437, 366, 641, 1621, 22526, 11, 1392, 13, 51406], 'temperature': 0.0, 'avg_logprob': -0.15911038716634116, 'compression_ratio': 1.830601092896175, 'no_speech_prob': 0.015734989196062088}, {'id': 541, 'seek': 350942, 'start': 3530.26, 'end': 3537.26, 'text': ' Now the advantage here is that since it is a basic block there will be no notion of a', 'tokens': [51406, 823, 264, 5002, 510, 307, 300, 1670, 309, 307, 257, 3875, 3461, 456, 486, 312, 572, 10710, 295, 257, 51756], 'temperature': 0.0, 'avg_logprob': -0.15911038716634116, 'compression_ratio': 1.830601092896175, 'no_speech_prob': 0.015734989196062088}, {'id': 542, 'seek': 353726, 'start': 3538.26, 'end': 3544.5400000000004, 'text': ' whole, right, because there is nothing like control flow graphs, right, the variable not', 'tokens': [50414, 1379, 11, 558, 11, 570, 456, 307, 1825, 411, 1969, 3095, 24877, 11, 558, 11, 264, 7006, 406, 50728], 'temperature': 0.0, 'avg_logprob': -0.18143017725511032, 'compression_ratio': 1.6026785714285714, 'no_speech_prob': 0.01641814596951008}, {'id': 543, 'seek': 353726, 'start': 3544.5400000000004, 'end': 3549.0600000000004, 'text': ' being used in this particular basic block which is kind of sequentially arranged and', 'tokens': [50728, 885, 1143, 294, 341, 1729, 3875, 3461, 597, 307, 733, 295, 5123, 3137, 18721, 293, 50954], 'temperature': 0.0, 'avg_logprob': -0.18143017725511032, 'compression_ratio': 1.6026785714285714, 'no_speech_prob': 0.01641814596951008}, {'id': 544, 'seek': 353726, 'start': 3549.0600000000004, 'end': 3555.7000000000003, 'text': ' because of that it is appearing to be together, etc., etc., right. Okay, I will maybe come', 'tokens': [50954, 570, 295, 300, 309, 307, 19870, 281, 312, 1214, 11, 5183, 7933, 5183, 7933, 558, 13, 1033, 11, 286, 486, 1310, 808, 51286], 'temperature': 0.0, 'avg_logprob': -0.18143017725511032, 'compression_ratio': 1.6026785714285714, 'no_speech_prob': 0.01641814596951008}, {'id': 545, 'seek': 353726, 'start': 3555.7000000000003, 'end': 3559.42, 'text': ' back and then talk about this point a little later but let us look at it in the following', 'tokens': [51286, 646, 293, 550, 751, 466, 341, 935, 257, 707, 1780, 457, 718, 505, 574, 412, 309, 294, 264, 3480, 51472], 'temperature': 0.0, 'avg_logprob': -0.18143017725511032, 'compression_ratio': 1.6026785714285714, 'no_speech_prob': 0.01641814596951008}, {'id': 546, 'seek': 353726, 'start': 3559.42, 'end': 3560.3, 'text': ' way.', 'tokens': [51472, 636, 13, 51516], 'temperature': 0.0, 'avg_logprob': -0.18143017725511032, 'compression_ratio': 1.6026785714285714, 'no_speech_prob': 0.01641814596951008}, {'id': 547, 'seek': 356030, 'start': 3560.3, 'end': 3567.3, 'text': ' So I have these different variables S1 to S7 and their live ranges are shown here, right.', 'tokens': [50364, 407, 286, 362, 613, 819, 9102, 318, 16, 281, 318, 22, 293, 641, 1621, 22526, 366, 4898, 510, 11, 558, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.18064484066433376, 'compression_ratio': 1.8631578947368421, 'no_speech_prob': 0.13192221522331238}, {'id': 548, 'seek': 356030, 'start': 3567.6600000000003, 'end': 3574.6600000000003, 'text': ' Now if I have to color this graph or if I have to, yeah, color this, I have not built', 'tokens': [50732, 823, 498, 286, 362, 281, 2017, 341, 4295, 420, 498, 286, 362, 281, 11, 1338, 11, 2017, 341, 11, 286, 362, 406, 3094, 51082], 'temperature': 0.0, 'avg_logprob': -0.18064484066433376, 'compression_ratio': 1.8631578947368421, 'no_speech_prob': 0.13192221522331238}, {'id': 549, 'seek': 356030, 'start': 3575.1000000000004, 'end': 3578.6600000000003, 'text': ' the interference graph because it may not be necessary to build the interference graph', 'tokens': [51104, 264, 24497, 4295, 570, 309, 815, 406, 312, 4818, 281, 1322, 264, 24497, 4295, 51282], 'temperature': 0.0, 'avg_logprob': -0.18064484066433376, 'compression_ratio': 1.8631578947368421, 'no_speech_prob': 0.13192221522331238}, {'id': 550, 'seek': 356030, 'start': 3578.6600000000003, 'end': 3584.5800000000004, 'text': ' here, but let us say if I build the interference graph and then I try to color it, how many', 'tokens': [51282, 510, 11, 457, 718, 505, 584, 498, 286, 1322, 264, 24497, 4295, 293, 550, 286, 853, 281, 2017, 309, 11, 577, 867, 51578], 'temperature': 0.0, 'avg_logprob': -0.18064484066433376, 'compression_ratio': 1.8631578947368421, 'no_speech_prob': 0.13192221522331238}, {'id': 551, 'seek': 358458, 'start': 3584.58, 'end': 3590.5, 'text': ' colors would I need, right. You can look at the graph and then say at what point in', 'tokens': [50364, 4577, 576, 286, 643, 11, 558, 13, 509, 393, 574, 412, 264, 4295, 293, 550, 584, 412, 437, 935, 294, 50660], 'temperature': 0.0, 'avg_logprob': -0.231440965519395, 'compression_ratio': 1.9344262295081966, 'no_speech_prob': 0.043626461178064346}, {'id': 552, 'seek': 358458, 'start': 3590.5, 'end': 3597.5, 'text': ' time is the graph really fat, how many, means where more number of live ranges are interfering,', 'tokens': [50660, 565, 307, 264, 4295, 534, 4046, 11, 577, 867, 11, 1355, 689, 544, 1230, 295, 1621, 22526, 366, 48721, 11, 51010], 'temperature': 0.0, 'avg_logprob': -0.231440965519395, 'compression_ratio': 1.9344262295081966, 'no_speech_prob': 0.043626461178064346}, {'id': 553, 'seek': 358458, 'start': 3597.5, 'end': 3603.2999999999997, 'text': ' right. So you can see that at this point in time five live ranges are interfering. Again', 'tokens': [51010, 558, 13, 407, 291, 393, 536, 300, 412, 341, 935, 294, 565, 1732, 1621, 22526, 366, 48721, 13, 3764, 51300], 'temperature': 0.0, 'avg_logprob': -0.231440965519395, 'compression_ratio': 1.9344262295081966, 'no_speech_prob': 0.043626461178064346}, {'id': 554, 'seek': 358458, 'start': 3603.2999999999997, 'end': 3608.46, 'text': ' at this point in time also five live ranges are interfering. Any other interval it is', 'tokens': [51300, 412, 341, 935, 294, 565, 611, 1732, 1621, 22526, 366, 48721, 13, 2639, 661, 15035, 309, 307, 51558], 'temperature': 0.0, 'avg_logprob': -0.231440965519395, 'compression_ratio': 1.9344262295081966, 'no_speech_prob': 0.043626461178064346}, {'id': 555, 'seek': 360846, 'start': 3608.46, 'end': 3615.46, 'text': ' only fewer than five. So if I have to color all of these variables without any spill,', 'tokens': [50364, 787, 13366, 813, 1732, 13, 407, 498, 286, 362, 281, 2017, 439, 295, 613, 9102, 1553, 604, 22044, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.16060104370117187, 'compression_ratio': 1.5707762557077625, 'no_speech_prob': 0.08819641917943954}, {'id': 556, 'seek': 360846, 'start': 3616.62, 'end': 3622.3, 'text': ' how many registers would I require? Five. Five because it says that at this point in', 'tokens': [50772, 577, 867, 38351, 576, 286, 3651, 30, 9436, 13, 9436, 570, 309, 1619, 300, 412, 341, 935, 294, 51056], 'temperature': 0.0, 'avg_logprob': -0.16060104370117187, 'compression_ratio': 1.5707762557077625, 'no_speech_prob': 0.08819641917943954}, {'id': 557, 'seek': 360846, 'start': 3622.3, 'end': 3627.38, 'text': ' time all these live ranges are interfering with each other. That means that I have a', 'tokens': [51056, 565, 439, 613, 1621, 22526, 366, 48721, 365, 1184, 661, 13, 663, 1355, 300, 286, 362, 257, 51310], 'temperature': 0.0, 'avg_logprob': -0.16060104370117187, 'compression_ratio': 1.5707762557077625, 'no_speech_prob': 0.08819641917943954}, {'id': 558, 'seek': 360846, 'start': 3627.38, 'end': 3634.38, 'text': ' graph with a click, right, a sub graph S1, S2, S3, S4, S5 with a click, right. Similarly', 'tokens': [51310, 4295, 365, 257, 2052, 11, 558, 11, 257, 1422, 4295, 318, 16, 11, 318, 17, 11, 318, 18, 11, 318, 19, 11, 318, 20, 365, 257, 2052, 11, 558, 13, 13157, 51660], 'temperature': 0.0, 'avg_logprob': -0.16060104370117187, 'compression_ratio': 1.5707762557077625, 'no_speech_prob': 0.08819641917943954}, {'id': 559, 'seek': 363438, 'start': 3635.38, 'end': 3642.38, 'text': ' at this point in time I have a sub graph S2, S3, S4, S5, S6 with a click. So to color', 'tokens': [50414, 412, 341, 935, 294, 565, 286, 362, 257, 1422, 4295, 318, 17, 11, 318, 18, 11, 318, 19, 11, 318, 20, 11, 318, 21, 365, 257, 2052, 13, 407, 281, 2017, 50764], 'temperature': 0.0, 'avg_logprob': -0.17367272791655167, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0037447046488523483}, {'id': 560, 'seek': 363438, 'start': 3644.42, 'end': 3650.42, 'text': ' them I need at least five colors, right. So in this case you can actually color this entire', 'tokens': [50866, 552, 286, 643, 412, 1935, 1732, 4577, 11, 558, 13, 407, 294, 341, 1389, 291, 393, 767, 2017, 341, 2302, 51166], 'temperature': 0.0, 'avg_logprob': -0.17367272791655167, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0037447046488523483}, {'id': 561, 'seek': 363438, 'start': 3650.42, 'end': 3657.42, 'text': ' graph without even constructing the interference graph because construction of the interference', 'tokens': [51166, 4295, 1553, 754, 39969, 264, 24497, 4295, 570, 6435, 295, 264, 24497, 51516], 'temperature': 0.0, 'avg_logprob': -0.17367272791655167, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0037447046488523483}, {'id': 562, 'seek': 363438, 'start': 3657.5, 'end': 3664.02, 'text': ' graph is also expensive, right. It is actually O n squared depending on the number of variables', 'tokens': [51520, 4295, 307, 611, 5124, 11, 558, 13, 467, 307, 767, 422, 297, 8889, 5413, 322, 264, 1230, 295, 9102, 51846], 'temperature': 0.0, 'avg_logprob': -0.17367272791655167, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0037447046488523483}, {'id': 563, 'seek': 366402, 'start': 3664.02, 'end': 3667.22, 'text': ' you set for which you want to construct the graph, okay.', 'tokens': [50364, 291, 992, 337, 597, 291, 528, 281, 7690, 264, 4295, 11, 1392, 13, 50524], 'temperature': 0.0, 'avg_logprob': -0.19699315821870844, 'compression_ratio': 1.6788617886178863, 'no_speech_prob': 0.021995849907398224}, {'id': 564, 'seek': 366402, 'start': 3667.22, 'end': 3673.22, 'text': ' So how do you color this particular graph? We will see that. So this local register allocation', 'tokens': [50524, 407, 577, 360, 291, 2017, 341, 1729, 4295, 30, 492, 486, 536, 300, 13, 407, 341, 2654, 7280, 27599, 50824], 'temperature': 0.0, 'avg_logprob': -0.19699315821870844, 'compression_ratio': 1.6788617886178863, 'no_speech_prob': 0.021995849907398224}, {'id': 565, 'seek': 366402, 'start': 3673.22, 'end': 3679.22, 'text': ' is essentially within a basic block, right. And here as I mentioned earlier these live', 'tokens': [50824, 307, 4476, 1951, 257, 3875, 3461, 11, 558, 13, 400, 510, 382, 286, 2835, 3071, 613, 1621, 51124], 'temperature': 0.0, 'avg_logprob': -0.19699315821870844, 'compression_ratio': 1.6788617886178863, 'no_speech_prob': 0.021995849907398224}, {'id': 566, 'seek': 366402, 'start': 3679.22, 'end': 3685.34, 'text': ' ranges do not have any holes, correct. The interference graph in this particular case', 'tokens': [51124, 22526, 360, 406, 362, 604, 8118, 11, 3006, 13, 440, 24497, 4295, 294, 341, 1729, 1389, 51430], 'temperature': 0.0, 'avg_logprob': -0.19699315821870844, 'compression_ratio': 1.6788617886178863, 'no_speech_prob': 0.021995849907398224}, {'id': 567, 'seek': 366402, 'start': 3685.34, 'end': 3691.22, 'text': ' if at all you construct they become what is called an interval graph. And these interval', 'tokens': [51430, 498, 412, 439, 291, 7690, 436, 1813, 437, 307, 1219, 364, 15035, 4295, 13, 400, 613, 15035, 51724], 'temperature': 0.0, 'avg_logprob': -0.19699315821870844, 'compression_ratio': 1.6788617886178863, 'no_speech_prob': 0.021995849907398224}, {'id': 568, 'seek': 369122, 'start': 3691.2999999999997, 'end': 3698.2999999999997, 'text': ' graphs can be optimally colored, okay. And that problem is not NP hot, okay. So optimal', 'tokens': [50368, 24877, 393, 312, 5028, 379, 14332, 11, 1392, 13, 400, 300, 1154, 307, 406, 38611, 2368, 11, 1392, 13, 407, 16252, 50718], 'temperature': 0.0, 'avg_logprob': -0.17821274201075235, 'compression_ratio': 1.6912442396313363, 'no_speech_prob': 0.030116822570562363}, {'id': 569, 'seek': 369122, 'start': 3699.5, 'end': 3706.5, 'text': ' allocation can be done in linear time, right. And of course you can find out what is the', 'tokens': [50778, 27599, 393, 312, 1096, 294, 8213, 565, 11, 558, 13, 400, 295, 1164, 291, 393, 915, 484, 437, 307, 264, 51128], 'temperature': 0.0, 'avg_logprob': -0.17821274201075235, 'compression_ratio': 1.6912442396313363, 'no_speech_prob': 0.030116822570562363}, {'id': 570, 'seek': 369122, 'start': 3706.62, 'end': 3712.62, 'text': ' minimum number of colors that you need and that is given by the fatness of the graph,', 'tokens': [51134, 7285, 1230, 295, 4577, 300, 291, 643, 293, 300, 307, 2212, 538, 264, 4046, 1287, 295, 264, 4295, 11, 51434], 'temperature': 0.0, 'avg_logprob': -0.17821274201075235, 'compression_ratio': 1.6912442396313363, 'no_speech_prob': 0.030116822570562363}, {'id': 571, 'seek': 369122, 'start': 3712.62, 'end': 3713.62, 'text': ' alright.', 'tokens': [51434, 5845, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.17821274201075235, 'compression_ratio': 1.6912442396313363, 'no_speech_prob': 0.030116822570562363}, {'id': 572, 'seek': 369122, 'start': 3713.62, 'end': 3720.62, 'text': ' Okay, now let us see how do we go about coloring this graph. So we can actually do the coloring', 'tokens': [51484, 1033, 11, 586, 718, 505, 536, 577, 360, 321, 352, 466, 23198, 341, 4295, 13, 407, 321, 393, 767, 360, 264, 23198, 51834], 'temperature': 0.0, 'avg_logprob': -0.17821274201075235, 'compression_ratio': 1.6912442396313363, 'no_speech_prob': 0.030116822570562363}, {'id': 573, 'seek': 372062, 'start': 3720.62, 'end': 3725.54, 'text': ' by starting going through these different points in time. And you only need to consider', 'tokens': [50364, 538, 2891, 516, 807, 613, 819, 2793, 294, 565, 13, 400, 291, 787, 643, 281, 1949, 50610], 'temperature': 0.0, 'avg_logprob': -0.22450642926352365, 'compression_ratio': 1.8114754098360655, 'no_speech_prob': 0.004579044412821531}, {'id': 574, 'seek': 372062, 'start': 3725.54, 'end': 3730.54, 'text': ' the point in time when a live range starts. You do not even have to consider all other', 'tokens': [50610, 264, 935, 294, 565, 562, 257, 1621, 3613, 3719, 13, 509, 360, 406, 754, 362, 281, 1949, 439, 661, 50860], 'temperature': 0.0, 'avg_logprob': -0.22450642926352365, 'compression_ratio': 1.8114754098360655, 'no_speech_prob': 0.004579044412821531}, {'id': 575, 'seek': 372062, 'start': 3730.54, 'end': 3736.06, 'text': ' points. So for example let us say I start with this live range S 1. So if all the live', 'tokens': [50860, 2793, 13, 407, 337, 1365, 718, 505, 584, 286, 722, 365, 341, 1621, 3613, 318, 502, 13, 407, 498, 439, 264, 1621, 51136], 'temperature': 0.0, 'avg_logprob': -0.22450642926352365, 'compression_ratio': 1.8114754098360655, 'no_speech_prob': 0.004579044412821531}, {'id': 576, 'seek': 372062, 'start': 3736.06, 'end': 3743.06, 'text': ' ranges are kind of arranged in the ascending order of their start time then I can go through', 'tokens': [51136, 22526, 366, 733, 295, 18721, 294, 264, 15526, 2029, 1668, 295, 641, 722, 565, 550, 286, 393, 352, 807, 51486], 'temperature': 0.0, 'avg_logprob': -0.22450642926352365, 'compression_ratio': 1.8114754098360655, 'no_speech_prob': 0.004579044412821531}, {'id': 577, 'seek': 372062, 'start': 3743.06, 'end': 3748.3399999999997, 'text': ' each one of them at a time, right. So the first live range is S 1. I look at that start', 'tokens': [51486, 1184, 472, 295, 552, 412, 257, 565, 11, 558, 13, 407, 264, 700, 1621, 3613, 307, 318, 502, 13, 286, 574, 412, 300, 722, 51750], 'temperature': 0.0, 'avg_logprob': -0.22450642926352365, 'compression_ratio': 1.8114754098360655, 'no_speech_prob': 0.004579044412821531}, {'id': 578, 'seek': 374834, 'start': 3748.46, 'end': 3755.1000000000004, 'text': ' point, right. And I have the available number of registers in a data structure called free.', 'tokens': [50370, 935, 11, 558, 13, 400, 286, 362, 264, 2435, 1230, 295, 38351, 294, 257, 1412, 3877, 1219, 1737, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.14886358151069054, 'compression_ratio': 1.8148148148148149, 'no_speech_prob': 0.029835956171154976}, {'id': 579, 'seek': 374834, 'start': 3755.1000000000004, 'end': 3760.9, 'text': ' So free has all the registers which are free at that point in time. So you start with the', 'tokens': [50702, 407, 1737, 575, 439, 264, 38351, 597, 366, 1737, 412, 300, 935, 294, 565, 13, 407, 291, 722, 365, 264, 50992], 'temperature': 0.0, 'avg_logprob': -0.14886358151069054, 'compression_ratio': 1.8148148148148149, 'no_speech_prob': 0.029835956171154976}, {'id': 580, 'seek': 374834, 'start': 3760.9, 'end': 3766.9, 'text': ' live range whose start time is the lowest and keep going this in the increasing order,', 'tokens': [50992, 1621, 3613, 6104, 722, 565, 307, 264, 12437, 293, 1066, 516, 341, 294, 264, 5662, 1668, 11, 51292], 'temperature': 0.0, 'avg_logprob': -0.14886358151069054, 'compression_ratio': 1.8148148148148149, 'no_speech_prob': 0.029835956171154976}, {'id': 581, 'seek': 374834, 'start': 3766.9, 'end': 3771.9, 'text': ' right. And you only need to consider those points where a live range starts. Any point', 'tokens': [51292, 558, 13, 400, 291, 787, 643, 281, 1949, 729, 2793, 689, 257, 1621, 3613, 3719, 13, 2639, 935, 51542], 'temperature': 0.0, 'avg_logprob': -0.14886358151069054, 'compression_ratio': 1.8148148148148149, 'no_speech_prob': 0.029835956171154976}, {'id': 582, 'seek': 374834, 'start': 3771.9, 'end': 3775.82, 'text': ' of course in this example you have a live range starting at each one of those points.', 'tokens': [51542, 295, 1164, 294, 341, 1365, 291, 362, 257, 1621, 3613, 2891, 412, 1184, 472, 295, 729, 2793, 13, 51738], 'temperature': 0.0, 'avg_logprob': -0.14886358151069054, 'compression_ratio': 1.8148148148148149, 'no_speech_prob': 0.029835956171154976}, {'id': 583, 'seek': 377582, 'start': 3775.98, 'end': 3780.38, 'text': ' So you will consider all the points. But in some other cases where you know a new live', 'tokens': [50372, 407, 291, 486, 1949, 439, 264, 2793, 13, 583, 294, 512, 661, 3331, 689, 291, 458, 257, 777, 1621, 50592], 'temperature': 0.0, 'avg_logprob': -0.1846627767107128, 'compression_ratio': 1.7410358565737052, 'no_speech_prob': 0.028734739869832993}, {'id': 584, 'seek': 377582, 'start': 3780.38, 'end': 3785.38, 'text': ' range does not start you do not have to worry about that particular point, okay. So we assume', 'tokens': [50592, 3613, 775, 406, 722, 291, 360, 406, 362, 281, 3292, 466, 300, 1729, 935, 11, 1392, 13, 407, 321, 6552, 50842], 'temperature': 0.0, 'avg_logprob': -0.1846627767107128, 'compression_ratio': 1.7410358565737052, 'no_speech_prob': 0.028734739869832993}, {'id': 585, 'seek': 377582, 'start': 3785.38, 'end': 3790.7400000000002, 'text': ' that when a live range ends its color can be free and that can even be decided at a', 'tokens': [50842, 300, 562, 257, 1621, 3613, 5314, 1080, 2017, 393, 312, 1737, 293, 300, 393, 754, 312, 3047, 412, 257, 51110], 'temperature': 0.0, 'avg_logprob': -0.1846627767107128, 'compression_ratio': 1.7410358565737052, 'no_speech_prob': 0.028734739869832993}, {'id': 586, 'seek': 377582, 'start': 3790.7400000000002, 'end': 3797.7400000000002, 'text': ' later point in time. So let us start off at the first point in which all the registers', 'tokens': [51110, 1780, 935, 294, 565, 13, 407, 718, 505, 722, 766, 412, 264, 700, 935, 294, 597, 439, 264, 38351, 51460], 'temperature': 0.0, 'avg_logprob': -0.1846627767107128, 'compression_ratio': 1.7410358565737052, 'no_speech_prob': 0.028734739869832993}, {'id': 587, 'seek': 377582, 'start': 3798.1000000000004, 'end': 3804.3, 'text': ' are free. Here the fatness is 5. So if you want to color it you need 5 colors, right.', 'tokens': [51478, 366, 1737, 13, 1692, 264, 4046, 1287, 307, 1025, 13, 407, 498, 291, 528, 281, 2017, 309, 291, 643, 1025, 4577, 11, 558, 13, 51788], 'temperature': 0.0, 'avg_logprob': -0.1846627767107128, 'compression_ratio': 1.7410358565737052, 'no_speech_prob': 0.028734739869832993}, {'id': 588, 'seek': 380430, 'start': 3804.3, 'end': 3811.0600000000004, 'text': ' So we can give color 1 to S 1. The free colors would be the remaining colors. Then after', 'tokens': [50364, 407, 321, 393, 976, 2017, 502, 281, 318, 502, 13, 440, 1737, 4577, 576, 312, 264, 8877, 4577, 13, 1396, 934, 50702], 'temperature': 0.0, 'avg_logprob': -0.13989247332562457, 'compression_ratio': 1.7927461139896372, 'no_speech_prob': 0.010370967909693718}, {'id': 589, 'seek': 380430, 'start': 3811.0600000000004, 'end': 3817.78, 'text': ' that when you come to S 2 you can give the second color to it, then the third color,', 'tokens': [50702, 300, 562, 291, 808, 281, 318, 568, 291, 393, 976, 264, 1150, 2017, 281, 309, 11, 550, 264, 2636, 2017, 11, 51038], 'temperature': 0.0, 'avg_logprob': -0.13989247332562457, 'compression_ratio': 1.7927461139896372, 'no_speech_prob': 0.010370967909693718}, {'id': 590, 'seek': 380430, 'start': 3817.78, 'end': 3823.98, 'text': ' then the fourth color, then the fifth color. So far there is no problem. Now you have no', 'tokens': [51038, 550, 264, 6409, 2017, 11, 550, 264, 9266, 2017, 13, 407, 1400, 456, 307, 572, 1154, 13, 823, 291, 362, 572, 51348], 'temperature': 0.0, 'avg_logprob': -0.13989247332562457, 'compression_ratio': 1.7927461139896372, 'no_speech_prob': 0.010370967909693718}, {'id': 591, 'seek': 380430, 'start': 3823.98, 'end': 3829.78, 'text': ' more free registers. But when you come to the next point you know that one is being', 'tokens': [51348, 544, 1737, 38351, 13, 583, 562, 291, 808, 281, 264, 958, 935, 291, 458, 300, 472, 307, 885, 51638], 'temperature': 0.0, 'avg_logprob': -0.13989247332562457, 'compression_ratio': 1.7927461139896372, 'no_speech_prob': 0.010370967909693718}, {'id': 592, 'seek': 382978, 'start': 3829.98, 'end': 3836.98, 'text': ' freed because its live range has ended. So one can be freed and that can go into the', 'tokens': [50374, 21796, 570, 1080, 1621, 3613, 575, 4590, 13, 407, 472, 393, 312, 21796, 293, 300, 393, 352, 666, 264, 50724], 'temperature': 0.0, 'avg_logprob': -0.20596897942679268, 'compression_ratio': 1.5925925925925926, 'no_speech_prob': 0.060733210295438766}, {'id': 593, 'seek': 382978, 'start': 3838.3, 'end': 3845.3, 'text': ' free pool. Then you consider live range 6, variable S 6, it can be given the same color,', 'tokens': [50790, 1737, 7005, 13, 1396, 291, 1949, 1621, 3613, 1386, 11, 7006, 318, 1386, 11, 309, 393, 312, 2212, 264, 912, 2017, 11, 51140], 'temperature': 0.0, 'avg_logprob': -0.20596897942679268, 'compression_ratio': 1.5925925925925926, 'no_speech_prob': 0.060733210295438766}, {'id': 594, 'seek': 382978, 'start': 3846.3, 'end': 3853.3, 'text': ' right. And then you consider the next live range S 7. By that time S 2 has finished.', 'tokens': [51190, 558, 13, 400, 550, 291, 1949, 264, 958, 1621, 3613, 318, 1614, 13, 3146, 300, 565, 318, 568, 575, 4335, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.20596897942679268, 'compression_ratio': 1.5925925925925926, 'no_speech_prob': 0.060733210295438766}, {'id': 595, 'seek': 385330, 'start': 3853.7400000000002, 'end': 3860.02, 'text': ' So that register can be returned back and it can be assigned the color 2, right. So', 'tokens': [50386, 407, 300, 7280, 393, 312, 8752, 646, 293, 309, 393, 312, 13279, 264, 2017, 568, 11, 558, 13, 407, 50700], 'temperature': 0.0, 'avg_logprob': -0.17345467096642603, 'compression_ratio': 1.688118811881188, 'no_speech_prob': 0.022760851308703423}, {'id': 596, 'seek': 385330, 'start': 3860.02, 'end': 3865.82, 'text': ' this is how you color this. The essential advantage here is that you have these live', 'tokens': [50700, 341, 307, 577, 291, 2017, 341, 13, 440, 7115, 5002, 510, 307, 300, 291, 362, 613, 1621, 50990], 'temperature': 0.0, 'avg_logprob': -0.17345467096642603, 'compression_ratio': 1.688118811881188, 'no_speech_prob': 0.022760851308703423}, {'id': 597, 'seek': 385330, 'start': 3865.82, 'end': 3872.34, 'text': ' ranges which do not have pool, right. And because of that, right, you can actually go', 'tokens': [50990, 22526, 597, 360, 406, 362, 7005, 11, 558, 13, 400, 570, 295, 300, 11, 558, 11, 291, 393, 767, 352, 51316], 'temperature': 0.0, 'avg_logprob': -0.17345467096642603, 'compression_ratio': 1.688118811881188, 'no_speech_prob': 0.022760851308703423}, {'id': 598, 'seek': 385330, 'start': 3872.34, 'end': 3879.34, 'text': ' through and because of that your interval graph is essentially your interference graph', 'tokens': [51316, 807, 293, 570, 295, 300, 428, 15035, 4295, 307, 4476, 428, 24497, 4295, 51666], 'temperature': 0.0, 'avg_logprob': -0.17345467096642603, 'compression_ratio': 1.688118811881188, 'no_speech_prob': 0.022760851308703423}, {'id': 599, 'seek': 387934, 'start': 3880.34, 'end': 3886.58, 'text': ' becomes an interval graph and that makes your coloring process simple, okay.', 'tokens': [50414, 3643, 364, 15035, 4295, 293, 300, 1669, 428, 23198, 1399, 2199, 11, 1392, 13, 50726], 'temperature': 0.0, 'avg_logprob': -0.20660151375664604, 'compression_ratio': 1.7208121827411167, 'no_speech_prob': 0.011709162034094334}, {'id': 600, 'seek': 387934, 'start': 3886.58, 'end': 3893.58, 'text': ' Now let us see how this is useful. In fact this idea is more useful not only in doing', 'tokens': [50726, 823, 718, 505, 536, 577, 341, 307, 4420, 13, 682, 1186, 341, 1558, 307, 544, 4420, 406, 787, 294, 884, 51076], 'temperature': 0.0, 'avg_logprob': -0.20660151375664604, 'compression_ratio': 1.7208121827411167, 'no_speech_prob': 0.011709162034094334}, {'id': 601, 'seek': 387934, 'start': 3894.1000000000004, 'end': 3899.7000000000003, 'text': ' this local register allocation but this has also inspired one global register allocation', 'tokens': [51102, 341, 2654, 7280, 27599, 457, 341, 575, 611, 7547, 472, 4338, 7280, 27599, 51382], 'temperature': 0.0, 'avg_logprob': -0.20660151375664604, 'compression_ratio': 1.7208121827411167, 'no_speech_prob': 0.011709162034094334}, {'id': 602, 'seek': 387934, 'start': 3899.7000000000003, 'end': 3905.34, 'text': ' mechanism which is what is called the linear scan register allocation mechanism. Let us', 'tokens': [51382, 7513, 597, 307, 437, 307, 1219, 264, 8213, 11049, 7280, 27599, 7513, 13, 961, 505, 51664], 'temperature': 0.0, 'avg_logprob': -0.20660151375664604, 'compression_ratio': 1.7208121827411167, 'no_speech_prob': 0.011709162034094334}, {'id': 603, 'seek': 390534, 'start': 3905.34, 'end': 3911.1000000000004, 'text': ' talk about that next, right. So for global register allocation using graph coloring', 'tokens': [50364, 751, 466, 300, 958, 11, 558, 13, 407, 337, 4338, 7280, 27599, 1228, 4295, 23198, 50652], 'temperature': 0.0, 'avg_logprob': -0.18432729268811412, 'compression_ratio': 1.8493723849372385, 'no_speech_prob': 0.01024550199508667}, {'id': 604, 'seek': 390534, 'start': 3911.1000000000004, 'end': 3916.1000000000004, 'text': ' you have to construct the interference graph and that is an expensive step in the register', 'tokens': [50652, 291, 362, 281, 7690, 264, 24497, 4295, 293, 300, 307, 364, 5124, 1823, 294, 264, 7280, 50902], 'temperature': 0.0, 'avg_logprob': -0.18432729268811412, 'compression_ratio': 1.8493723849372385, 'no_speech_prob': 0.01024550199508667}, {'id': 605, 'seek': 390534, 'start': 3916.1000000000004, 'end': 3922.6200000000003, 'text': ' allocation process, okay. And in many cases you may want to do this register allocation', 'tokens': [50902, 27599, 1399, 11, 1392, 13, 400, 294, 867, 3331, 291, 815, 528, 281, 360, 341, 7280, 27599, 51228], 'temperature': 0.0, 'avg_logprob': -0.18432729268811412, 'compression_ratio': 1.8493723849372385, 'no_speech_prob': 0.01024550199508667}, {'id': 606, 'seek': 390534, 'start': 3922.6200000000003, 'end': 3927.6200000000003, 'text': ' or you may want to do code generation, right, and the time for doing the code generation', 'tokens': [51228, 420, 291, 815, 528, 281, 360, 3089, 5125, 11, 558, 11, 293, 264, 565, 337, 884, 264, 3089, 5125, 51478], 'temperature': 0.0, 'avg_logprob': -0.18432729268811412, 'compression_ratio': 1.8493723849372385, 'no_speech_prob': 0.01024550199508667}, {'id': 607, 'seek': 390534, 'start': 3927.6200000000003, 'end': 3933.6200000000003, 'text': ' may matter. Okay let me give you one example, example of dynamic compilation just like you', 'tokens': [51478, 815, 1871, 13, 1033, 718, 385, 976, 291, 472, 1365, 11, 1365, 295, 8546, 40261, 445, 411, 291, 51778], 'temperature': 0.0, 'avg_logprob': -0.18432729268811412, 'compression_ratio': 1.8493723849372385, 'no_speech_prob': 0.01024550199508667}, {'id': 608, 'seek': 393362, 'start': 3933.8199999999997, 'end': 3938.54, 'text': ' talk about just-in-time compilation, right. When you do just-in-time compilation or dynamic', 'tokens': [50374, 751, 466, 445, 12, 259, 12, 3766, 40261, 11, 558, 13, 1133, 291, 360, 445, 12, 259, 12, 3766, 40261, 420, 8546, 50610], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 609, 'seek': 393362, 'start': 3938.54, 'end': 3945.54, 'text': ' compilation what happens is that the compile time for compiling is actually a part of your', 'tokens': [50610, 40261, 437, 2314, 307, 300, 264, 31413, 565, 337, 715, 4883, 307, 767, 257, 644, 295, 428, 50960], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 610, 'seek': 393362, 'start': 3945.54, 'end': 3951.54, 'text': ' execution time, right. Are you familiar with languages which require dynamic compilation?', 'tokens': [50960, 15058, 565, 11, 558, 13, 2014, 291, 4963, 365, 8650, 597, 3651, 8546, 40261, 30, 51260], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 611, 'seek': 393362, 'start': 3951.54, 'end': 3955.2599999999998, 'text': ' Yeah, one of them is Java.', 'tokens': [51260, 865, 11, 472, 295, 552, 307, 10745, 13, 51446], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 612, 'seek': 393362, 'start': 3955.2599999999998, 'end': 3957.02, 'text': ' Java, anything else?', 'tokens': [51446, 10745, 11, 1340, 1646, 30, 51534], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 613, 'seek': 393362, 'start': 3957.02, 'end': 3958.02, 'text': ' . .', 'tokens': [51534, 2411, 2411, 51584], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 614, 'seek': 393362, 'start': 3958.02, 'end': 3959.02, 'text': ' . .', 'tokens': [51584, 2411, 2411, 51634], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 615, 'seek': 393362, 'start': 3959.02, 'end': 3960.02, 'text': ' . .', 'tokens': [51634, 2411, 2411, 51684], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 616, 'seek': 393362, 'start': 3960.02, 'end': 3961.02, 'text': ' . .', 'tokens': [51684, 2411, 2411, 51734], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 617, 'seek': 393362, 'start': 3961.02, 'end': 3962.02, 'text': ' . .', 'tokens': [51734, 2411, 2411, 51784], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 618, 'seek': 393362, 'start': 3962.02, 'end': 3963.02, 'text': ' . .', 'tokens': [51784, 2411, 2411, 51834], 'temperature': 0.0, 'avg_logprob': -0.2543407736472713, 'compression_ratio': 1.782383419689119, 'no_speech_prob': 0.019180001690983772}, {'id': 619, 'seek': 396302, 'start': 3963.46, 'end': 3969.34, 'text': ' Let me give you a little bit for that, right.', 'tokens': [50386, 961, 385, 976, 291, 257, 707, 857, 337, 300, 11, 558, 13, 50680], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 620, 'seek': 396302, 'start': 3969.34, 'end': 3970.34, 'text': ' .', 'tokens': [50680, 2411, 50730], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 621, 'seek': 396302, 'start': 3970.34, 'end': 3971.34, 'text': ' .', 'tokens': [50730, 2411, 50780], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 622, 'seek': 396302, 'start': 3971.34, 'end': 3973.34, 'text': ' Some Python implementations have that. That is what I was expecting you to say. Some R', 'tokens': [50780, 2188, 15329, 4445, 763, 362, 300, 13, 663, 307, 437, 286, 390, 9650, 291, 281, 584, 13, 2188, 497, 50880], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 623, 'seek': 396302, 'start': 3973.34, 'end': 3979.32, 'text': ' implementations have that, right. So these are all things which were normally interpreted', 'tokens': [50880, 4445, 763, 362, 300, 11, 558, 13, 407, 613, 366, 439, 721, 597, 645, 5646, 26749, 51179], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 624, 'seek': 396302, 'start': 3979.32, 'end': 3985.9, 'text': ' languages but interpretation is very expensive. So during the execution you decide that you', 'tokens': [51179, 8650, 457, 14174, 307, 588, 5124, 13, 407, 1830, 264, 15058, 291, 4536, 300, 291, 51508], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 625, 'seek': 396302, 'start': 3985.9, 'end': 3990.46, 'text': ' will compile some part of the code and then when you try to compile these part of the', 'tokens': [51508, 486, 31413, 512, 644, 295, 264, 3089, 293, 550, 562, 291, 853, 281, 31413, 613, 644, 295, 264, 51736], 'temperature': 0.6, 'avg_logprob': -0.33020977098114634, 'compression_ratio': 1.7719298245614035, 'no_speech_prob': 0.08402647823095322}, {'id': 626, 'seek': 399046, 'start': 3990.46, 'end': 3996.18, 'text': ' the code if you want to do register allocation for them you cannot be doing a very expensive', 'tokens': [50364, 264, 3089, 498, 291, 528, 281, 360, 7280, 27599, 337, 552, 291, 2644, 312, 884, 257, 588, 5124, 50650], 'temperature': 0.0, 'avg_logprob': -0.199547411447548, 'compression_ratio': 1.7655502392344498, 'no_speech_prob': 0.2593107223510742}, {'id': 627, 'seek': 399046, 'start': 3996.18, 'end': 4002.54, 'text': ' register allocation right. So, that the compile time for compiling the code is also an important', 'tokens': [50650, 7280, 27599, 558, 13, 407, 11, 300, 264, 31413, 565, 337, 715, 4883, 264, 3089, 307, 611, 364, 1021, 50968], 'temperature': 0.0, 'avg_logprob': -0.199547411447548, 'compression_ratio': 1.7655502392344498, 'no_speech_prob': 0.2593107223510742}, {'id': 628, 'seek': 399046, 'start': 4002.54, 'end': 4010.7, 'text': ' aspect right. So, that you need faster method for generating efficient code right. So, the', 'tokens': [50968, 4171, 558, 13, 407, 11, 300, 291, 643, 4663, 3170, 337, 17746, 7148, 3089, 558, 13, 407, 11, 264, 51376], 'temperature': 0.0, 'avg_logprob': -0.199547411447548, 'compression_ratio': 1.7655502392344498, 'no_speech_prob': 0.2593107223510742}, {'id': 629, 'seek': 399046, 'start': 4010.7, 'end': 4018.02, 'text': ' linear scan allocator is one such method which was actually proposed in 1999 and it uses', 'tokens': [51376, 8213, 11049, 12660, 1639, 307, 472, 1270, 3170, 597, 390, 767, 10348, 294, 19952, 293, 309, 4960, 51742], 'temperature': 0.0, 'avg_logprob': -0.199547411447548, 'compression_ratio': 1.7655502392344498, 'no_speech_prob': 0.2593107223510742}, {'id': 630, 'seek': 401802, 'start': 4018.02, 'end': 4023.02, 'text': ' the notion of what is called the live interval ok. We will define what this live interval', 'tokens': [50364, 264, 10710, 295, 437, 307, 1219, 264, 1621, 15035, 3133, 13, 492, 486, 6964, 437, 341, 1621, 15035, 50614], 'temperature': 0.0, 'avg_logprob': -0.20699310302734375, 'compression_ratio': 1.9318181818181819, 'no_speech_prob': 0.14803121984004974}, {'id': 631, 'seek': 401802, 'start': 4023.02, 'end': 4028.18, 'text': ' is and this is being used instead of what is called the live range ok.', 'tokens': [50614, 307, 293, 341, 307, 885, 1143, 2602, 295, 437, 307, 1219, 264, 1621, 3613, 3133, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.20699310302734375, 'compression_ratio': 1.9318181818181819, 'no_speech_prob': 0.14803121984004974}, {'id': 632, 'seek': 401802, 'start': 4028.18, 'end': 4037.3, 'text': ' Now, we will explain this a little later on ok and because of this your register allocator', 'tokens': [50872, 823, 11, 321, 486, 2903, 341, 257, 707, 1780, 322, 3133, 293, 570, 295, 341, 428, 7280, 12660, 1639, 51328], 'temperature': 0.0, 'avg_logprob': -0.20699310302734375, 'compression_ratio': 1.9318181818181819, 'no_speech_prob': 0.14803121984004974}, {'id': 633, 'seek': 401802, 'start': 4037.3, 'end': 4042.98, 'text': ' your global register allocator is actually going to look like a local register allocator', 'tokens': [51328, 428, 4338, 7280, 12660, 1639, 307, 767, 516, 281, 574, 411, 257, 2654, 7280, 12660, 1639, 51612], 'temperature': 0.0, 'avg_logprob': -0.20699310302734375, 'compression_ratio': 1.9318181818181819, 'no_speech_prob': 0.14803121984004974}, {'id': 634, 'seek': 404298, 'start': 4043.14, 'end': 4048.62, 'text': ' and it can be done in linear time or near linear time right that is the idea. So, let', 'tokens': [50372, 293, 309, 393, 312, 1096, 294, 8213, 565, 420, 2651, 8213, 565, 558, 300, 307, 264, 1558, 13, 407, 11, 718, 50646], 'temperature': 0.0, 'avg_logprob': -0.17115150408798388, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.5012546181678772}, {'id': 635, 'seek': 404298, 'start': 4048.62, 'end': 4053.86, 'text': ' us see what this is, but before we go to that let us first define what is the live interval', 'tokens': [50646, 505, 536, 437, 341, 307, 11, 457, 949, 321, 352, 281, 300, 718, 505, 700, 6964, 437, 307, 264, 1621, 15035, 50908], 'temperature': 0.0, 'avg_logprob': -0.17115150408798388, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.5012546181678772}, {'id': 636, 'seek': 404298, 'start': 4053.86, 'end': 4061.7400000000002, 'text': ' ok. So, for every variable we find the first point where it is defined and the last point', 'tokens': [50908, 3133, 13, 407, 11, 337, 633, 7006, 321, 915, 264, 700, 935, 689, 309, 307, 7642, 293, 264, 1036, 935, 51302], 'temperature': 0.0, 'avg_logprob': -0.17115150408798388, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.5012546181678772}, {'id': 637, 'seek': 404298, 'start': 4061.7400000000002, 'end': 4067.46, 'text': ' where it is used and irrespective of whether there are other control blocks or otherwise', 'tokens': [51302, 689, 309, 307, 1143, 293, 3418, 19575, 488, 295, 1968, 456, 366, 661, 1969, 8474, 420, 5911, 51588], 'temperature': 0.0, 'avg_logprob': -0.17115150408798388, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.5012546181678772}, {'id': 638, 'seek': 406746, 'start': 4067.46, 'end': 4073.1, 'text': ' we simply say that this variable is live from this point in the program to this point', 'tokens': [50364, 321, 2935, 584, 300, 341, 7006, 307, 1621, 490, 341, 935, 294, 264, 1461, 281, 341, 935, 50646], 'temperature': 0.0, 'avg_logprob': -0.21801162011844596, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.4197770059108734}, {'id': 639, 'seek': 406746, 'start': 4073.1, 'end': 4080.02, 'text': ' in the program right. So, a live interval may include multiple live ranges. Remember', 'tokens': [50646, 294, 264, 1461, 558, 13, 407, 11, 257, 1621, 15035, 815, 4090, 3866, 1621, 22526, 13, 5459, 50992], 'temperature': 0.0, 'avg_logprob': -0.21801162011844596, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.4197770059108734}, {'id': 640, 'seek': 406746, 'start': 4080.02, 'end': 4085.78, 'text': ' when we talked about the variable S 2 in the previous example it had a hole right and we', 'tokens': [50992, 562, 321, 2825, 466, 264, 7006, 318, 568, 294, 264, 3894, 1365, 309, 632, 257, 5458, 558, 293, 321, 51280], 'temperature': 0.0, 'avg_logprob': -0.21801162011844596, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.4197770059108734}, {'id': 641, 'seek': 406746, 'start': 4085.78, 'end': 4090.82, 'text': ' said that that hole is because there are these control flow paths control flow there are', 'tokens': [51280, 848, 300, 300, 5458, 307, 570, 456, 366, 613, 1969, 3095, 14518, 1969, 3095, 456, 366, 51532], 'temperature': 0.0, 'avg_logprob': -0.21801162011844596, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.4197770059108734}, {'id': 642, 'seek': 406746, 'start': 4090.82, 'end': 4096.22, 'text': ' these basic blocks in the control flow graph in which those variables are not being used', 'tokens': [51532, 613, 3875, 8474, 294, 264, 1969, 3095, 4295, 294, 597, 729, 9102, 366, 406, 885, 1143, 51802], 'temperature': 0.0, 'avg_logprob': -0.21801162011844596, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.4197770059108734}, {'id': 643, 'seek': 409622, 'start': 4096.900000000001, 'end': 4102.7, 'text': ' right. So, we were talking about that now what happens is that we do not kind of consider', 'tokens': [50398, 558, 13, 407, 11, 321, 645, 1417, 466, 300, 586, 437, 2314, 307, 300, 321, 360, 406, 733, 295, 1949, 50688], 'temperature': 0.0, 'avg_logprob': -0.17809547876056872, 'compression_ratio': 1.8, 'no_speech_prob': 0.0272356029599905}, {'id': 644, 'seek': 409622, 'start': 4102.7, 'end': 4108.34, 'text': ' these holes and consider this live interval as basically the combination of all of these', 'tokens': [50688, 613, 8118, 293, 1949, 341, 1621, 15035, 382, 1936, 264, 6562, 295, 439, 295, 613, 50970], 'temperature': 0.0, 'avg_logprob': -0.17809547876056872, 'compression_ratio': 1.8, 'no_speech_prob': 0.0272356029599905}, {'id': 645, 'seek': 409622, 'start': 4108.34, 'end': 4113.780000000001, 'text': ' live ranges right. So, it is an approximation right it is a conservative approximation', 'tokens': [50970, 1621, 22526, 558, 13, 407, 11, 309, 307, 364, 28023, 558, 309, 307, 257, 13780, 28023, 51242], 'temperature': 0.0, 'avg_logprob': -0.17809547876056872, 'compression_ratio': 1.8, 'no_speech_prob': 0.0272356029599905}, {'id': 646, 'seek': 409622, 'start': 4113.780000000001, 'end': 4121.42, 'text': ' of live ranges ok. Now, for the same example right now what happens', 'tokens': [51242, 295, 1621, 22526, 3133, 13, 823, 11, 337, 264, 912, 1365, 558, 586, 437, 2314, 51624], 'temperature': 0.0, 'avg_logprob': -0.17809547876056872, 'compression_ratio': 1.8, 'no_speech_prob': 0.0272356029599905}, {'id': 647, 'seek': 412142, 'start': 4121.42, 'end': 4128.82, 'text': ' is that S 2 which is first defined here and is being used here its live interval is from', 'tokens': [50364, 307, 300, 318, 568, 597, 307, 700, 7642, 510, 293, 307, 885, 1143, 510, 1080, 1621, 15035, 307, 490, 50734], 'temperature': 0.0, 'avg_logprob': -0.17530298233032227, 'compression_ratio': 1.8670212765957446, 'no_speech_prob': 0.053875211626291275}, {'id': 648, 'seek': 412142, 'start': 4128.82, 'end': 4134.26, 'text': ' here to here whereas, when we talked about its live range we said that the live range', 'tokens': [50734, 510, 281, 510, 9735, 11, 562, 321, 2825, 466, 1080, 1621, 3613, 321, 848, 300, 264, 1621, 3613, 51006], 'temperature': 0.0, 'avg_logprob': -0.17530298233032227, 'compression_ratio': 1.8670212765957446, 'no_speech_prob': 0.053875211626291275}, {'id': 649, 'seek': 412142, 'start': 4134.26, 'end': 4142.02, 'text': ' is from here to here and then from here to here right. In between we were thinking that', 'tokens': [51006, 307, 490, 510, 281, 510, 293, 550, 490, 510, 281, 510, 558, 13, 682, 1296, 321, 645, 1953, 300, 51394], 'temperature': 0.0, 'avg_logprob': -0.17530298233032227, 'compression_ratio': 1.8670212765957446, 'no_speech_prob': 0.053875211626291275}, {'id': 650, 'seek': 412142, 'start': 4142.02, 'end': 4148.14, 'text': ' it is not live right because if I have taken this point sorry let us say if I have taken', 'tokens': [51394, 309, 307, 406, 1621, 558, 570, 498, 286, 362, 2726, 341, 935, 2597, 718, 505, 584, 498, 286, 362, 2726, 51700], 'temperature': 0.0, 'avg_logprob': -0.17530298233032227, 'compression_ratio': 1.8670212765957446, 'no_speech_prob': 0.053875211626291275}, {'id': 651, 'seek': 414814, 'start': 4148.22, 'end': 4153.9400000000005, 'text': ' this point in program I could have said that there are points which are where it is need', 'tokens': [50368, 341, 935, 294, 1461, 286, 727, 362, 848, 300, 456, 366, 2793, 597, 366, 689, 309, 307, 643, 50654], 'temperature': 0.0, 'avg_logprob': -0.1670187775806714, 'compression_ratio': 1.8630136986301369, 'no_speech_prob': 0.1463347226381302}, {'id': 652, 'seek': 414814, 'start': 4153.9400000000005, 'end': 4157.700000000001, 'text': ' not have to be live right so that that was that ok.', 'tokens': [50654, 406, 362, 281, 312, 1621, 558, 370, 300, 300, 390, 300, 3133, 13, 50842], 'temperature': 0.0, 'avg_logprob': -0.1670187775806714, 'compression_ratio': 1.8630136986301369, 'no_speech_prob': 0.1463347226381302}, {'id': 653, 'seek': 414814, 'start': 4157.700000000001, 'end': 4163.900000000001, 'text': ' Now, having approximated the live range with regard to the live interval now what happens', 'tokens': [50842, 823, 11, 1419, 8542, 770, 264, 1621, 3613, 365, 3843, 281, 264, 1621, 15035, 586, 437, 2314, 51152], 'temperature': 0.0, 'avg_logprob': -0.1670187775806714, 'compression_ratio': 1.8630136986301369, 'no_speech_prob': 0.1463347226381302}, {'id': 654, 'seek': 414814, 'start': 4163.900000000001, 'end': 4170.900000000001, 'text': ' is that this graph now looks like your interval graph or looks like your interference graph', 'tokens': [51152, 307, 300, 341, 4295, 586, 1542, 411, 428, 15035, 4295, 420, 1542, 411, 428, 24497, 4295, 51502], 'temperature': 0.0, 'avg_logprob': -0.1670187775806714, 'compression_ratio': 1.8630136986301369, 'no_speech_prob': 0.1463347226381302}, {'id': 655, 'seek': 414814, 'start': 4170.900000000001, 'end': 4177.58, 'text': ' for basic block because there are no holes right. So, the interference graph for this', 'tokens': [51502, 337, 3875, 3461, 570, 456, 366, 572, 8118, 558, 13, 407, 11, 264, 24497, 4295, 337, 341, 51836], 'temperature': 0.0, 'avg_logprob': -0.1670187775806714, 'compression_ratio': 1.8630136986301369, 'no_speech_prob': 0.1463347226381302}, {'id': 656, 'seek': 417758, 'start': 4177.66, 'end': 4183.78, 'text': ' is something like this which is also what is called an interval graph ok. Now, this', 'tokens': [50368, 307, 746, 411, 341, 597, 307, 611, 437, 307, 1219, 364, 15035, 4295, 3133, 13, 823, 11, 341, 50674], 'temperature': 0.0, 'avg_logprob': -0.16521701997923618, 'compression_ratio': 1.7416666666666667, 'no_speech_prob': 0.022817177698016167}, {'id': 657, 'seek': 417758, 'start': 4183.78, 'end': 4189.0599999999995, 'text': ' graph can be colored in linear time but you do not even need to do that you can actually', 'tokens': [50674, 4295, 393, 312, 14332, 294, 8213, 565, 457, 291, 360, 406, 754, 643, 281, 360, 300, 291, 393, 767, 50938], 'temperature': 0.0, 'avg_logprob': -0.16521701997923618, 'compression_ratio': 1.7416666666666667, 'no_speech_prob': 0.022817177698016167}, {'id': 658, 'seek': 417758, 'start': 4189.0599999999995, 'end': 4194.9, 'text': ' go through the just like the way that you went through for the linear register allocator', 'tokens': [50938, 352, 807, 264, 445, 411, 264, 636, 300, 291, 1437, 807, 337, 264, 8213, 7280, 12660, 1639, 51230], 'temperature': 0.0, 'avg_logprob': -0.16521701997923618, 'compression_ratio': 1.7416666666666667, 'no_speech_prob': 0.022817177698016167}, {'id': 659, 'seek': 417758, 'start': 4194.9, 'end': 4198.3, 'text': ' and you can color it. So, we will see that algorithm next.', 'tokens': [51230, 293, 291, 393, 2017, 309, 13, 407, 11, 321, 486, 536, 300, 9284, 958, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.16521701997923618, 'compression_ratio': 1.7416666666666667, 'no_speech_prob': 0.022817177698016167}, {'id': 660, 'seek': 417758, 'start': 4198.3, 'end': 4204.86, 'text': ' So, here since the fatness is 4 I have calculated it correctly right the fatness is 4 it requires', 'tokens': [51400, 407, 11, 510, 1670, 264, 4046, 1287, 307, 1017, 286, 362, 15598, 309, 8944, 558, 264, 4046, 1287, 307, 1017, 309, 7029, 51728], 'temperature': 0.0, 'avg_logprob': -0.16521701997923618, 'compression_ratio': 1.7416666666666667, 'no_speech_prob': 0.022817177698016167}, {'id': 661, 'seek': 420486, 'start': 4205.339999999999, 'end': 4210.9, 'text': ' 4 colors right and you see that it can be colored using 4 this is the click that we', 'tokens': [50388, 1017, 4577, 558, 293, 291, 536, 300, 309, 393, 312, 14332, 1228, 1017, 341, 307, 264, 2052, 300, 321, 50666], 'temperature': 0.0, 'avg_logprob': -0.15795690467558712, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04297308996319771}, {'id': 662, 'seek': 420486, 'start': 4210.9, 'end': 4217.9, 'text': ' talked about and ok. Now, let us see how the linear scan allocator works ok. So, first', 'tokens': [50666, 2825, 466, 293, 3133, 13, 823, 11, 718, 505, 536, 577, 264, 8213, 11049, 12660, 1639, 1985, 3133, 13, 407, 11, 700, 51016], 'temperature': 0.0, 'avg_logprob': -0.15795690467558712, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04297308996319771}, {'id': 663, 'seek': 420486, 'start': 4220.259999999999, 'end': 4225.86, 'text': ' thing is that you compute the live intervals for all the variables which is similar to', 'tokens': [51134, 551, 307, 300, 291, 14722, 264, 1621, 26651, 337, 439, 264, 9102, 597, 307, 2531, 281, 51414], 'temperature': 0.0, 'avg_logprob': -0.15795690467558712, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04297308996319771}, {'id': 664, 'seek': 420486, 'start': 4225.86, 'end': 4230.299999999999, 'text': ' computing the live range but then it is an approximation and this can be calculated even', 'tokens': [51414, 15866, 264, 1621, 3613, 457, 550, 309, 307, 364, 28023, 293, 341, 393, 312, 15598, 754, 51636], 'temperature': 0.0, 'avg_logprob': -0.15795690467558712, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04297308996319771}, {'id': 665, 'seek': 423030, 'start': 4230.42, 'end': 4237.42, 'text': ' easier. Now, the interference among these live intervals ok if they interfere among', 'tokens': [50370, 3571, 13, 823, 11, 264, 24497, 3654, 613, 1621, 26651, 3133, 498, 436, 23946, 3654, 50720], 'temperature': 0.0, 'avg_logprob': -0.14654714515410275, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.010323796421289444}, {'id': 666, 'seek': 423030, 'start': 4237.74, 'end': 4244.74, 'text': ' this then you assume that they cannot be given the same register ok. Now, the number of overlapping', 'tokens': [50736, 341, 550, 291, 6552, 300, 436, 2644, 312, 2212, 264, 912, 7280, 3133, 13, 823, 11, 264, 1230, 295, 33535, 51086], 'temperature': 0.0, 'avg_logprob': -0.14654714515410275, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.010323796421289444}, {'id': 667, 'seek': 423030, 'start': 4245.9800000000005, 'end': 4250.820000000001, 'text': ' intervals changes only at the start point and at the end points of the interval. So,', 'tokens': [51148, 26651, 2962, 787, 412, 264, 722, 935, 293, 412, 264, 917, 2793, 295, 264, 15035, 13, 407, 11, 51390], 'temperature': 0.0, 'avg_logprob': -0.14654714515410275, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.010323796421289444}, {'id': 668, 'seek': 423030, 'start': 4250.820000000001, 'end': 4256.320000000001, 'text': ' if you go back and look at this graph right if at some point in time the number of overlapping', 'tokens': [51390, 498, 291, 352, 646, 293, 574, 412, 341, 4295, 558, 498, 412, 512, 935, 294, 565, 264, 1230, 295, 33535, 51665], 'temperature': 0.0, 'avg_logprob': -0.14654714515410275, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.010323796421289444}, {'id': 669, 'seek': 425632, 'start': 4256.32, 'end': 4263.32, 'text': ' intervals is 4 right it is going to be the same until either a live range finishes or', 'tokens': [50364, 26651, 307, 1017, 558, 309, 307, 516, 281, 312, 264, 912, 1826, 2139, 257, 1621, 3613, 23615, 420, 50714], 'temperature': 0.0, 'avg_logprob': -0.17449056754991846, 'compression_ratio': 2.0981308411214954, 'no_speech_prob': 0.008560435846447945}, {'id': 670, 'seek': 425632, 'start': 4263.5199999999995, 'end': 4270.04, 'text': ' a new live range starts right it value is going to remain the same as long as no new', 'tokens': [50724, 257, 777, 1621, 3613, 3719, 558, 309, 2158, 307, 516, 281, 6222, 264, 912, 382, 938, 382, 572, 777, 51050], 'temperature': 0.0, 'avg_logprob': -0.17449056754991846, 'compression_ratio': 2.0981308411214954, 'no_speech_prob': 0.008560435846447945}, {'id': 671, 'seek': 425632, 'start': 4270.04, 'end': 4275.36, 'text': ' live range starts. For example, between this point and this point the number of live ranges', 'tokens': [51050, 1621, 3613, 3719, 13, 1171, 1365, 11, 1296, 341, 935, 293, 341, 935, 264, 1230, 295, 1621, 22526, 51316], 'temperature': 0.0, 'avg_logprob': -0.17449056754991846, 'compression_ratio': 2.0981308411214954, 'no_speech_prob': 0.008560435846447945}, {'id': 672, 'seek': 425632, 'start': 4275.36, 'end': 4280.759999999999, 'text': ' which are interfering with each other is exactly the same. At this point it is different because', 'tokens': [51316, 597, 366, 48721, 365, 1184, 661, 307, 2293, 264, 912, 13, 1711, 341, 935, 309, 307, 819, 570, 51586], 'temperature': 0.0, 'avg_logprob': -0.17449056754991846, 'compression_ratio': 2.0981308411214954, 'no_speech_prob': 0.008560435846447945}, {'id': 673, 'seek': 425632, 'start': 4280.759999999999, 'end': 4285.599999999999, 'text': ' this live range has ended at this point it is different because there is a new live range', 'tokens': [51586, 341, 1621, 3613, 575, 4590, 412, 341, 935, 309, 307, 819, 570, 456, 307, 257, 777, 1621, 3613, 51828], 'temperature': 0.0, 'avg_logprob': -0.17449056754991846, 'compression_ratio': 2.0981308411214954, 'no_speech_prob': 0.008560435846447945}, {'id': 674, 'seek': 428560, 'start': 4285.68, 'end': 4292.68, 'text': ' starting. So, what happens in the linear scan allocator is that we will start worrying about', 'tokens': [50368, 2891, 13, 407, 11, 437, 2314, 294, 264, 8213, 11049, 12660, 1639, 307, 300, 321, 486, 722, 18788, 466, 50718], 'temperature': 0.0, 'avg_logprob': -0.20713867459978377, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.006288622505962849}, {'id': 675, 'seek': 428560, 'start': 4293.4400000000005, 'end': 4300.4400000000005, 'text': ' these points where the live ranges are starting that is really what this is saying ok. So,', 'tokens': [50756, 613, 2793, 689, 264, 1621, 22526, 366, 2891, 300, 307, 534, 437, 341, 307, 1566, 3133, 13, 407, 11, 51106], 'temperature': 0.0, 'avg_logprob': -0.20713867459978377, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.006288622505962849}, {'id': 676, 'seek': 428560, 'start': 4300.4400000000005, 'end': 4306.64, 'text': ' it changes only at the start and end point of the interval ok. So, the linear scan allocator', 'tokens': [51106, 309, 2962, 787, 412, 264, 722, 293, 917, 935, 295, 264, 15035, 3133, 13, 407, 11, 264, 8213, 11049, 12660, 1639, 51416], 'temperature': 0.0, 'avg_logprob': -0.20713867459978377, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.006288622505962849}, {'id': 677, 'seek': 428560, 'start': 4306.64, 'end': 4313.64, 'text': ' uses the following data structures for doing this it uses what is called live intervals', 'tokens': [51416, 4960, 264, 3480, 1412, 9227, 337, 884, 341, 309, 4960, 437, 307, 1219, 1621, 26651, 51766], 'temperature': 0.0, 'avg_logprob': -0.20713867459978377, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.006288622505962849}, {'id': 678, 'seek': 431364, 'start': 4313.64, 'end': 4320.360000000001, 'text': ' ok which are basically all the variables and their live intervals, but they are stored', 'tokens': [50364, 3133, 597, 366, 1936, 439, 264, 9102, 293, 641, 1621, 26651, 11, 457, 436, 366, 12187, 50700], 'temperature': 0.0, 'avg_logprob': -0.24115698678152903, 'compression_ratio': 1.732620320855615, 'no_speech_prob': 0.017095277085900307}, {'id': 679, 'seek': 431364, 'start': 4320.360000000001, 'end': 4327.360000000001, 'text': ' in the increasing order of the start point ok. It also maintains what is called an active', 'tokens': [50700, 294, 264, 5662, 1668, 295, 264, 722, 935, 3133, 13, 467, 611, 33385, 437, 307, 1219, 364, 4967, 51050], 'temperature': 0.0, 'avg_logprob': -0.24115698678152903, 'compression_ratio': 1.732620320855615, 'no_speech_prob': 0.017095277085900307}, {'id': 680, 'seek': 431364, 'start': 4327.400000000001, 'end': 4334.0, 'text': ' list which is basically the set of variables which are interfering at that point in time', 'tokens': [51052, 1329, 597, 307, 1936, 264, 992, 295, 9102, 597, 366, 48721, 412, 300, 935, 294, 565, 51382], 'temperature': 0.0, 'avg_logprob': -0.24115698678152903, 'compression_ratio': 1.732620320855615, 'no_speech_prob': 0.017095277085900307}, {'id': 681, 'seek': 431364, 'start': 4334.0, 'end': 4338.76, 'text': ' to variables who have already been allocated registers ok.', 'tokens': [51382, 281, 9102, 567, 362, 1217, 668, 29772, 38351, 3133, 13, 51620], 'temperature': 0.0, 'avg_logprob': -0.24115698678152903, 'compression_ratio': 1.732620320855615, 'no_speech_prob': 0.017095277085900307}, {'id': 682, 'seek': 433876, 'start': 4338.88, 'end': 4345.400000000001, 'text': ' This is stored in the decreasing order of the end points sorry in the this is stored', 'tokens': [50370, 639, 307, 12187, 294, 264, 23223, 1668, 295, 264, 917, 2793, 2597, 294, 264, 341, 307, 12187, 50696], 'temperature': 0.0, 'avg_logprob': -0.19623639583587646, 'compression_ratio': 2.1165644171779143, 'no_speech_prob': 0.23714806139469147}, {'id': 683, 'seek': 433876, 'start': 4345.400000000001, 'end': 4352.400000000001, 'text': ' so the active list is stored in the again increasing order, but of the end points ok.', 'tokens': [50696, 370, 264, 4967, 1329, 307, 12187, 294, 264, 797, 5662, 1668, 11, 457, 295, 264, 917, 2793, 3133, 13, 51046], 'temperature': 0.0, 'avg_logprob': -0.19623639583587646, 'compression_ratio': 2.1165644171779143, 'no_speech_prob': 0.23714806139469147}, {'id': 684, 'seek': 433876, 'start': 4352.52, 'end': 4357.4800000000005, 'text': ' So we have two data structures both of them are sorted in the increasing order the first', 'tokens': [51052, 407, 321, 362, 732, 1412, 9227, 1293, 295, 552, 366, 25462, 294, 264, 5662, 1668, 264, 700, 51300], 'temperature': 0.0, 'avg_logprob': -0.19623639583587646, 'compression_ratio': 2.1165644171779143, 'no_speech_prob': 0.23714806139469147}, {'id': 685, 'seek': 433876, 'start': 4357.4800000000005, 'end': 4362.92, 'text': ' one is started in the increasing order of the start point and the second one which is', 'tokens': [51300, 472, 307, 1409, 294, 264, 5662, 1668, 295, 264, 722, 935, 293, 264, 1150, 472, 597, 307, 51572], 'temperature': 0.0, 'avg_logprob': -0.19623639583587646, 'compression_ratio': 2.1165644171779143, 'no_speech_prob': 0.23714806139469147}, {'id': 686, 'seek': 436292, 'start': 4362.92, 'end': 4368.92, 'text': ' the active list which is the set of variables which are interfering with variables which', 'tokens': [50364, 264, 4967, 1329, 597, 307, 264, 992, 295, 9102, 597, 366, 48721, 365, 9102, 597, 50664], 'temperature': 0.0, 'avg_logprob': -0.2101992416381836, 'compression_ratio': 1.671497584541063, 'no_speech_prob': 0.025625305250287056}, {'id': 687, 'seek': 436292, 'start': 4368.92, 'end': 4374.52, 'text': ' have already been assigned a register right, but this is stored in the decreasing sorry', 'tokens': [50664, 362, 1217, 668, 13279, 257, 7280, 558, 11, 457, 341, 307, 12187, 294, 264, 23223, 2597, 50944], 'temperature': 0.0, 'avg_logprob': -0.2101992416381836, 'compression_ratio': 1.671497584541063, 'no_speech_prob': 0.025625305250287056}, {'id': 688, 'seek': 436292, 'start': 4374.52, 'end': 4380.52, 'text': ' in the increasing order of the end points ok we will see why that is important ok.', 'tokens': [50944, 294, 264, 5662, 1668, 295, 264, 917, 2793, 3133, 321, 486, 536, 983, 300, 307, 1021, 3133, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.2101992416381836, 'compression_ratio': 1.671497584541063, 'no_speech_prob': 0.025625305250287056}, {'id': 689, 'seek': 436292, 'start': 4380.52, 'end': 4387.52, 'text': ' So, the algorithm proceeds in the following way right you start with an initial active', 'tokens': [51244, 407, 11, 264, 9284, 32280, 294, 264, 3480, 636, 558, 291, 722, 365, 364, 5883, 4967, 51594], 'temperature': 0.0, 'avg_logprob': -0.2101992416381836, 'compression_ratio': 1.671497584541063, 'no_speech_prob': 0.025625305250287056}, {'id': 690, 'seek': 438752, 'start': 4387.68, 'end': 4394.360000000001, 'text': ' list which is 0 because no register no live no variable has been assigned a register so', 'tokens': [50372, 1329, 597, 307, 1958, 570, 572, 7280, 572, 1621, 572, 7006, 575, 668, 13279, 257, 7280, 370, 50706], 'temperature': 0.0, 'avg_logprob': -0.2094874554369823, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.02026190608739853}, {'id': 691, 'seek': 438752, 'start': 4394.360000000001, 'end': 4401.360000000001, 'text': ' far so this is empty and in your live interval you have all the variables correct and those', 'tokens': [50706, 1400, 370, 341, 307, 6707, 293, 294, 428, 1621, 15035, 291, 362, 439, 264, 9102, 3006, 293, 729, 51056], 'temperature': 0.0, 'avg_logprob': -0.2094874554369823, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.02026190608739853}, {'id': 692, 'seek': 438752, 'start': 4402.4800000000005, 'end': 4408.92, 'text': ' variables are arranged in the increasing order of the start point. So, you take the first', 'tokens': [51112, 9102, 366, 18721, 294, 264, 5662, 1668, 295, 264, 722, 935, 13, 407, 11, 291, 747, 264, 700, 51434], 'temperature': 0.0, 'avg_logprob': -0.2094874554369823, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.02026190608739853}, {'id': 693, 'seek': 438752, 'start': 4408.92, 'end': 4415.92, 'text': ' interval in that thing that is the first live range ok. Now what you do here is that at', 'tokens': [51434, 15035, 294, 300, 551, 300, 307, 264, 700, 1621, 3613, 3133, 13, 823, 437, 291, 360, 510, 307, 300, 412, 51784], 'temperature': 0.0, 'avg_logprob': -0.2094874554369823, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.02026190608739853}, {'id': 694, 'seek': 441592, 'start': 4416.04, 'end': 4423.04, 'text': ' this point in time you expire any old interval that has expired ok initially this may not', 'tokens': [50370, 341, 935, 294, 565, 291, 45447, 604, 1331, 15035, 300, 575, 36587, 3133, 9105, 341, 815, 406, 50720], 'temperature': 0.0, 'avg_logprob': -0.1879376941257053, 'compression_ratio': 1.8565022421524664, 'no_speech_prob': 0.010981020517647266}, {'id': 695, 'seek': 441592, 'start': 4424.0, 'end': 4430.12, 'text': ' kick in, but later on you will see that why this is useful right and then if you see the', 'tokens': [50768, 4437, 294, 11, 457, 1780, 322, 291, 486, 536, 300, 983, 341, 307, 4420, 558, 293, 550, 498, 291, 536, 264, 51074], 'temperature': 0.0, 'avg_logprob': -0.1879376941257053, 'compression_ratio': 1.8565022421524664, 'no_speech_prob': 0.010981020517647266}, {'id': 696, 'seek': 441592, 'start': 4430.12, 'end': 4436.4400000000005, 'text': ' length of active active is the all the live intervals which are interfering with variables', 'tokens': [51074, 4641, 295, 4967, 4967, 307, 264, 439, 264, 1621, 26651, 597, 366, 48721, 365, 9102, 51390], 'temperature': 0.0, 'avg_logprob': -0.1879376941257053, 'compression_ratio': 1.8565022421524664, 'no_speech_prob': 0.010981020517647266}, {'id': 697, 'seek': 441592, 'start': 4436.4400000000005, 'end': 4438.84, 'text': ' which have already been allocated registers right.', 'tokens': [51390, 597, 362, 1217, 668, 29772, 38351, 558, 13, 51510], 'temperature': 0.0, 'avg_logprob': -0.1879376941257053, 'compression_ratio': 1.8565022421524664, 'no_speech_prob': 0.010981020517647266}, {'id': 698, 'seek': 441592, 'start': 4438.84, 'end': 4445.84, 'text': ' So, for example if I have allocated registers to four variables right and if I have allocated', 'tokens': [51510, 407, 11, 337, 1365, 498, 286, 362, 29772, 38351, 281, 1451, 9102, 558, 293, 498, 286, 362, 29772, 51860], 'temperature': 0.0, 'avg_logprob': -0.1879376941257053, 'compression_ratio': 1.8565022421524664, 'no_speech_prob': 0.010981020517647266}, {'id': 699, 'seek': 444592, 'start': 4446.12, 'end': 4452.28, 'text': ' active is four then it means that I have already used up four colors right and active will', 'tokens': [50374, 4967, 307, 1451, 550, 309, 1355, 300, 286, 362, 1217, 1143, 493, 1451, 4577, 558, 293, 4967, 486, 50682], 'temperature': 0.0, 'avg_logprob': -0.206221952670958, 'compression_ratio': 1.7095238095238094, 'no_speech_prob': 0.004456753842532635}, {'id': 700, 'seek': 444592, 'start': 4452.28, 'end': 4459.28, 'text': ' only have intervals which are currently active that is why the name active any variable for', 'tokens': [50682, 787, 362, 26651, 597, 366, 4362, 4967, 300, 307, 983, 264, 1315, 4967, 604, 7006, 337, 51032], 'temperature': 0.0, 'avg_logprob': -0.206221952670958, 'compression_ratio': 1.7095238095238094, 'no_speech_prob': 0.004456753842532635}, {'id': 701, 'seek': 444592, 'start': 4459.76, 'end': 4466.76, 'text': ' which a register has been assigned, but it interval is over will not be a part of active', 'tokens': [51056, 597, 257, 7280, 575, 668, 13279, 11, 457, 309, 15035, 307, 670, 486, 406, 312, 257, 644, 295, 4967, 51406], 'temperature': 0.0, 'avg_logprob': -0.206221952670958, 'compression_ratio': 1.7095238095238094, 'no_speech_prob': 0.004456753842532635}, {'id': 702, 'seek': 444592, 'start': 4467.16, 'end': 4471.52, 'text': ' right. So, that is essentially what you try to do in expire interval we will talk about', 'tokens': [51426, 558, 13, 407, 11, 300, 307, 4476, 437, 291, 853, 281, 360, 294, 45447, 15035, 321, 486, 751, 466, 51644], 'temperature': 0.0, 'avg_logprob': -0.206221952670958, 'compression_ratio': 1.7095238095238094, 'no_speech_prob': 0.004456753842532635}, {'id': 703, 'seek': 447152, 'start': 4471.52, 'end': 4476.96, 'text': ' that little later on right. So, if you see that how many variables are currently active', 'tokens': [50364, 300, 707, 1780, 322, 558, 13, 407, 11, 498, 291, 536, 300, 577, 867, 9102, 366, 4362, 4967, 50636], 'temperature': 0.0, 'avg_logprob': -0.16132811004040287, 'compression_ratio': 1.8523206751054853, 'no_speech_prob': 0.050905175507068634}, {'id': 704, 'seek': 447152, 'start': 4476.96, 'end': 4482.400000000001, 'text': ' and have been assigned registers and if that is equal to or the number of registers that', 'tokens': [50636, 293, 362, 668, 13279, 38351, 293, 498, 300, 307, 2681, 281, 420, 264, 1230, 295, 38351, 300, 50908], 'temperature': 0.0, 'avg_logprob': -0.16132811004040287, 'compression_ratio': 1.8523206751054853, 'no_speech_prob': 0.050905175507068634}, {'id': 705, 'seek': 447152, 'start': 4482.400000000001, 'end': 4488.280000000001, 'text': ' is available then at this point in time you have to do a spill right, but if it is less', 'tokens': [50908, 307, 2435, 550, 412, 341, 935, 294, 565, 291, 362, 281, 360, 257, 22044, 558, 11, 457, 498, 309, 307, 1570, 51202], 'temperature': 0.0, 'avg_logprob': -0.16132811004040287, 'compression_ratio': 1.8523206751054853, 'no_speech_prob': 0.050905175507068634}, {'id': 706, 'seek': 447152, 'start': 4488.280000000001, 'end': 4493.68, 'text': ' than or then you have a register which is available. So, this interval is going to be', 'tokens': [51202, 813, 420, 550, 291, 362, 257, 7280, 597, 307, 2435, 13, 407, 11, 341, 15035, 307, 516, 281, 312, 51472], 'temperature': 0.0, 'avg_logprob': -0.16132811004040287, 'compression_ratio': 1.8523206751054853, 'no_speech_prob': 0.050905175507068634}, {'id': 707, 'seek': 447152, 'start': 4493.68, 'end': 4499.88, 'text': ' given that register by removing a register from the pool of free registers right because', 'tokens': [51472, 2212, 300, 7280, 538, 12720, 257, 7280, 490, 264, 7005, 295, 1737, 38351, 558, 570, 51782], 'temperature': 0.0, 'avg_logprob': -0.16132811004040287, 'compression_ratio': 1.8523206751054853, 'no_speech_prob': 0.050905175507068634}, {'id': 708, 'seek': 449988, 'start': 4499.96, 'end': 4505.24, 'text': ' there is some free register which is available and now add i to the active because now i', 'tokens': [50368, 456, 307, 512, 1737, 7280, 597, 307, 2435, 293, 586, 909, 741, 281, 264, 4967, 570, 586, 741, 50632], 'temperature': 0.0, 'avg_logprob': -0.25601613746499113, 'compression_ratio': 1.9634703196347032, 'no_speech_prob': 0.009958545677363873}, {'id': 709, 'seek': 449988, 'start': 4505.24, 'end': 4512.24, 'text': ' is an active interval and add it in the place. So, that it is the end time is always in the', 'tokens': [50632, 307, 364, 4967, 15035, 293, 909, 309, 294, 264, 1081, 13, 407, 11, 300, 309, 307, 264, 917, 565, 307, 1009, 294, 264, 50982], 'temperature': 0.0, 'avg_logprob': -0.25601613746499113, 'compression_ratio': 1.9634703196347032, 'no_speech_prob': 0.009958545677363873}, {'id': 710, 'seek': 449988, 'start': 4512.76, 'end': 4516.88, 'text': ' increasing order active is end times are always in the increasing order.', 'tokens': [51008, 5662, 1668, 4967, 307, 917, 1413, 366, 1009, 294, 264, 5662, 1668, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.25601613746499113, 'compression_ratio': 1.9634703196347032, 'no_speech_prob': 0.009958545677363873}, {'id': 711, 'seek': 449988, 'start': 4516.88, 'end': 4522.52, 'text': ' So, this is how you go about this, but let us see what is expire interval expire interval', 'tokens': [51214, 407, 11, 341, 307, 577, 291, 352, 466, 341, 11, 457, 718, 505, 536, 437, 307, 45447, 15035, 45447, 15035, 51496], 'temperature': 0.0, 'avg_logprob': -0.25601613746499113, 'compression_ratio': 1.9634703196347032, 'no_speech_prob': 0.009958545677363873}, {'id': 712, 'seek': 449988, 'start': 4522.52, 'end': 4526.72, 'text': ' is that you at some point in time you are now looking at and then you look at what all', 'tokens': [51496, 307, 300, 291, 412, 512, 935, 294, 565, 291, 366, 586, 1237, 412, 293, 550, 291, 574, 412, 437, 439, 51706], 'temperature': 0.0, 'avg_logprob': -0.25601613746499113, 'compression_ratio': 1.9634703196347032, 'no_speech_prob': 0.009958545677363873}, {'id': 713, 'seek': 452672, 'start': 4526.76, 'end': 4532.96, 'text': ' intervals have expired between the last time that you consider to now. So, for each interval', 'tokens': [50366, 26651, 362, 36587, 1296, 264, 1036, 565, 300, 291, 1949, 281, 586, 13, 407, 11, 337, 1184, 15035, 50676], 'temperature': 0.0, 'avg_logprob': -0.1673221696506847, 'compression_ratio': 1.8775510204081634, 'no_speech_prob': 0.022818120196461678}, {'id': 714, 'seek': 452672, 'start': 4532.96, 'end': 4539.52, 'text': ' j in the active in the increasing order of the end time you keep looking at it if the', 'tokens': [50676, 361, 294, 264, 4967, 294, 264, 5662, 1668, 295, 264, 917, 565, 291, 1066, 1237, 412, 309, 498, 264, 51004], 'temperature': 0.0, 'avg_logprob': -0.1673221696506847, 'compression_ratio': 1.8775510204081634, 'no_speech_prob': 0.022818120196461678}, {'id': 715, 'seek': 452672, 'start': 4539.52, 'end': 4545.72, 'text': ' end point of j right is greater than the start point of i that means start of i is the current', 'tokens': [51004, 917, 935, 295, 361, 558, 307, 5044, 813, 264, 722, 935, 295, 741, 300, 1355, 722, 295, 741, 307, 264, 2190, 51314], 'temperature': 0.0, 'avg_logprob': -0.1673221696506847, 'compression_ratio': 1.8775510204081634, 'no_speech_prob': 0.022818120196461678}, {'id': 716, 'seek': 452672, 'start': 4545.72, 'end': 4550.76, 'text': ' point that you are talking about. So, if its end point is greater that means that the interval', 'tokens': [51314, 935, 300, 291, 366, 1417, 466, 13, 407, 11, 498, 1080, 917, 935, 307, 5044, 300, 1355, 300, 264, 15035, 51566], 'temperature': 0.0, 'avg_logprob': -0.1673221696506847, 'compression_ratio': 1.8775510204081634, 'no_speech_prob': 0.022818120196461678}, {'id': 717, 'seek': 455076, 'start': 4550.76, 'end': 4557.76, 'text': ' is not is still live it is not over yet you do not do anything right, but if it is less', 'tokens': [50364, 307, 406, 307, 920, 1621, 309, 307, 406, 670, 1939, 291, 360, 406, 360, 1340, 558, 11, 457, 498, 309, 307, 1570, 50714], 'temperature': 0.0, 'avg_logprob': -0.20826272964477538, 'compression_ratio': 1.8283261802575108, 'no_speech_prob': 0.030355019494891167}, {'id': 718, 'seek': 455076, 'start': 4557.76, 'end': 4564.76, 'text': ' than this then you remove j from active and then whatever register j was given you release', 'tokens': [50714, 813, 341, 550, 291, 4159, 361, 490, 4967, 293, 550, 2035, 7280, 361, 390, 2212, 291, 4374, 51064], 'temperature': 0.0, 'avg_logprob': -0.20826272964477538, 'compression_ratio': 1.8283261802575108, 'no_speech_prob': 0.030355019494891167}, {'id': 719, 'seek': 455076, 'start': 4564.76, 'end': 4570.280000000001, 'text': ' it to the free pool. In fact, this need not even have to be continue because you can actually', 'tokens': [51064, 309, 281, 264, 1737, 7005, 13, 682, 1186, 11, 341, 643, 406, 754, 362, 281, 312, 2354, 570, 291, 393, 767, 51340], 'temperature': 0.0, 'avg_logprob': -0.20826272964477538, 'compression_ratio': 1.8283261802575108, 'no_speech_prob': 0.030355019494891167}, {'id': 720, 'seek': 455076, 'start': 4570.280000000001, 'end': 4576.4400000000005, 'text': ' break because you have seen one interval whose end point is greater than the current time', 'tokens': [51340, 1821, 570, 291, 362, 1612, 472, 15035, 6104, 917, 935, 307, 5044, 813, 264, 2190, 565, 51648], 'temperature': 0.0, 'avg_logprob': -0.20826272964477538, 'compression_ratio': 1.8283261802575108, 'no_speech_prob': 0.030355019494891167}, {'id': 721, 'seek': 455076, 'start': 4576.4400000000005, 'end': 4579.72, 'text': ' all other intervals will also be greater than the current time.', 'tokens': [51648, 439, 661, 26651, 486, 611, 312, 5044, 813, 264, 2190, 565, 13, 51812], 'temperature': 0.0, 'avg_logprob': -0.20826272964477538, 'compression_ratio': 1.8283261802575108, 'no_speech_prob': 0.030355019494891167}, {'id': 722, 'seek': 457972, 'start': 4579.72, 'end': 4586.08, 'text': ' So, you do not need to do continue you could have done right. So, I am talking about this.', 'tokens': [50364, 407, 11, 291, 360, 406, 643, 281, 360, 2354, 291, 727, 362, 1096, 558, 13, 407, 11, 286, 669, 1417, 466, 341, 13, 50682], 'temperature': 0.0, 'avg_logprob': -0.14453810232656975, 'compression_ratio': 2.0697674418604652, 'no_speech_prob': 0.00496103148907423}, {'id': 723, 'seek': 457972, 'start': 4586.08, 'end': 4592.12, 'text': ' So, it is clear right what we are trying to do in expire intervals see remember in this', 'tokens': [50682, 407, 11, 309, 307, 1850, 558, 437, 321, 366, 1382, 281, 360, 294, 45447, 26651, 536, 1604, 294, 341, 50984], 'temperature': 0.0, 'avg_logprob': -0.14453810232656975, 'compression_ratio': 2.0697674418604652, 'no_speech_prob': 0.00496103148907423}, {'id': 724, 'seek': 457972, 'start': 4592.12, 'end': 4596.6, 'text': ' algorithm what you do is that you go from one start point to the next start point to', 'tokens': [50984, 9284, 437, 291, 360, 307, 300, 291, 352, 490, 472, 722, 935, 281, 264, 958, 722, 935, 281, 51208], 'temperature': 0.0, 'avg_logprob': -0.14453810232656975, 'compression_ratio': 2.0697674418604652, 'no_speech_prob': 0.00496103148907423}, {'id': 725, 'seek': 457972, 'start': 4596.6, 'end': 4601.4800000000005, 'text': ' the next start point. So, when you go from one start point to another start point some', 'tokens': [51208, 264, 958, 722, 935, 13, 407, 11, 562, 291, 352, 490, 472, 722, 935, 281, 1071, 722, 935, 512, 51452], 'temperature': 0.0, 'avg_logprob': -0.14453810232656975, 'compression_ratio': 2.0697674418604652, 'no_speech_prob': 0.00496103148907423}, {'id': 726, 'seek': 457972, 'start': 4601.4800000000005, 'end': 4606.92, 'text': ' intervals may have finished. So, those finished intervals you are trying to remove from active', 'tokens': [51452, 26651, 815, 362, 4335, 13, 407, 11, 729, 4335, 26651, 291, 366, 1382, 281, 4159, 490, 4967, 51724], 'temperature': 0.0, 'avg_logprob': -0.14453810232656975, 'compression_ratio': 2.0697674418604652, 'no_speech_prob': 0.00496103148907423}, {'id': 727, 'seek': 460692, 'start': 4607.68, 'end': 4612.76, 'text': ' and we are trying to free that register and then put them back in the free register that', 'tokens': [50402, 293, 321, 366, 1382, 281, 1737, 300, 7280, 293, 550, 829, 552, 646, 294, 264, 1737, 7280, 300, 50656], 'temperature': 0.0, 'avg_logprob': -0.25622551615645245, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.07121086120605469}, {'id': 728, 'seek': 460692, 'start': 4612.76, 'end': 4618.24, 'text': ' is really what we are doing. Now, again look at it. So, that is what expire', 'tokens': [50656, 307, 534, 437, 321, 366, 884, 13, 823, 11, 797, 574, 412, 309, 13, 407, 11, 300, 307, 437, 45447, 50930], 'temperature': 0.0, 'avg_logprob': -0.25622551615645245, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.07121086120605469}, {'id': 729, 'seek': 460692, 'start': 4618.24, 'end': 4625.24, 'text': ' interval is about right. Now, what about this function spill at interval right you are going', 'tokens': [50930, 15035, 307, 466, 558, 13, 823, 11, 437, 466, 341, 2445, 22044, 412, 15035, 558, 291, 366, 516, 51280], 'temperature': 0.0, 'avg_logprob': -0.25622551615645245, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.07121086120605469}, {'id': 730, 'seek': 460692, 'start': 4625.92, 'end': 4631.84, 'text': ' to come to this function whenever all the registers are being used and then you have', 'tokens': [51314, 281, 808, 281, 341, 2445, 5699, 439, 264, 38351, 366, 885, 1143, 293, 550, 291, 362, 51610], 'temperature': 0.0, 'avg_logprob': -0.25622551615645245, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.07121086120605469}, {'id': 731, 'seek': 463184, 'start': 4631.92, 'end': 4637.24, 'text': ' one more live variable one more variable for which you want to see whether it should be', 'tokens': [50368, 472, 544, 1621, 7006, 472, 544, 7006, 337, 597, 291, 528, 281, 536, 1968, 309, 820, 312, 50634], 'temperature': 0.0, 'avg_logprob': -0.15705191938182975, 'compression_ratio': 1.9558011049723756, 'no_speech_prob': 0.04899269714951515}, {'id': 732, 'seek': 463184, 'start': 4637.24, 'end': 4643.72, 'text': ' allocated register or not right. So, at that point in time you take a decision whether', 'tokens': [50634, 29772, 7280, 420, 406, 558, 13, 407, 11, 412, 300, 935, 294, 565, 291, 747, 257, 3537, 1968, 50958], 'temperature': 0.0, 'avg_logprob': -0.15705191938182975, 'compression_ratio': 1.9558011049723756, 'no_speech_prob': 0.04899269714951515}, {'id': 733, 'seek': 463184, 'start': 4643.72, 'end': 4649.8, 'text': ' this variable is going to be spilled or one of the variables which is in the active can', 'tokens': [50958, 341, 7006, 307, 516, 281, 312, 37833, 420, 472, 295, 264, 9102, 597, 307, 294, 264, 4967, 393, 51262], 'temperature': 0.0, 'avg_logprob': -0.15705191938182975, 'compression_ratio': 1.9558011049723756, 'no_speech_prob': 0.04899269714951515}, {'id': 734, 'seek': 463184, 'start': 4649.8, 'end': 4656.8, 'text': ' be spilled right. See active is all the variables which have been allocated registers which', 'tokens': [51262, 312, 37833, 558, 13, 3008, 4967, 307, 439, 264, 9102, 597, 362, 668, 29772, 38351, 597, 51612], 'temperature': 0.0, 'avg_logprob': -0.15705191938182975, 'compression_ratio': 1.9558011049723756, 'no_speech_prob': 0.04899269714951515}, {'id': 735, 'seek': 465680, 'start': 4656.96, 'end': 4662.88, 'text': ' is interfering with this particular time point right. If I decide that one of them can be', 'tokens': [50372, 307, 48721, 365, 341, 1729, 565, 935, 558, 13, 759, 286, 4536, 300, 472, 295, 552, 393, 312, 50668], 'temperature': 0.0, 'avg_logprob': -0.16639949083328248, 'compression_ratio': 1.828125, 'no_speech_prob': 0.008208604529500008}, {'id': 736, 'seek': 465680, 'start': 4662.88, 'end': 4669.88, 'text': ' now spilled right I can give that register to this variable i how do I decide between', 'tokens': [50668, 586, 37833, 558, 286, 393, 976, 300, 7280, 281, 341, 7006, 741, 577, 360, 286, 4536, 1296, 51018], 'temperature': 0.0, 'avg_logprob': -0.16639949083328248, 'compression_ratio': 1.828125, 'no_speech_prob': 0.008208604529500008}, {'id': 737, 'seek': 465680, 'start': 4672.0, 'end': 4678.58, 'text': ' them I decide whichever interval which is shorter right sorry whichever interval which', 'tokens': [51124, 552, 286, 4536, 24123, 15035, 597, 307, 11639, 558, 2597, 24123, 15035, 597, 51453], 'temperature': 0.0, 'avg_logprob': -0.16639949083328248, 'compression_ratio': 1.828125, 'no_speech_prob': 0.008208604529500008}, {'id': 738, 'seek': 465680, 'start': 4678.58, 'end': 4684.72, 'text': ' is longer is the one which will be spilled. So, I compare the end point of i and the end', 'tokens': [51453, 307, 2854, 307, 264, 472, 597, 486, 312, 37833, 13, 407, 11, 286, 6794, 264, 917, 935, 295, 741, 293, 264, 917, 51760], 'temperature': 0.0, 'avg_logprob': -0.16639949083328248, 'compression_ratio': 1.828125, 'no_speech_prob': 0.008208604529500008}, {'id': 739, 'seek': 468472, 'start': 4684.8, 'end': 4690.8, 'text': ' point of that register and then choose whichever one which is longer I will spill. So, this', 'tokens': [50368, 935, 295, 300, 7280, 293, 550, 2826, 24123, 472, 597, 307, 2854, 286, 486, 22044, 13, 407, 11, 341, 50668], 'temperature': 0.0, 'avg_logprob': -0.1721831616901216, 'compression_ratio': 1.8842105263157896, 'no_speech_prob': 0.015899356454610825}, {'id': 740, 'seek': 468472, 'start': 4690.8, 'end': 4697.320000000001, 'text': ' is how the spill interval works right. So, I start off with the last interval in the', 'tokens': [50668, 307, 577, 264, 22044, 15035, 1985, 558, 13, 407, 11, 286, 722, 766, 365, 264, 1036, 15035, 294, 264, 50994], 'temperature': 0.0, 'avg_logprob': -0.1721831616901216, 'compression_ratio': 1.8842105263157896, 'no_speech_prob': 0.015899356454610825}, {'id': 741, 'seek': 468472, 'start': 4697.320000000001, 'end': 4703.08, 'text': ' active because that has the highest end time if I check the end time of that with the end', 'tokens': [50994, 4967, 570, 300, 575, 264, 6343, 917, 565, 498, 286, 1520, 264, 917, 565, 295, 300, 365, 264, 917, 51282], 'temperature': 0.0, 'avg_logprob': -0.1721831616901216, 'compression_ratio': 1.8842105263157896, 'no_speech_prob': 0.015899356454610825}, {'id': 742, 'seek': 468472, 'start': 4703.08, 'end': 4709.04, 'text': ' time of the variable for which I need to allocate register whichever one is longer I choose', 'tokens': [51282, 565, 295, 264, 7006, 337, 597, 286, 643, 281, 35713, 7280, 24123, 472, 307, 2854, 286, 2826, 51580], 'temperature': 0.0, 'avg_logprob': -0.1721831616901216, 'compression_ratio': 1.8842105263157896, 'no_speech_prob': 0.015899356454610825}, {'id': 743, 'seek': 470904, 'start': 4709.04, 'end': 4716.04, 'text': ' that as the spilling. So, if the end point of the last interval is greater than the end', 'tokens': [50364, 300, 382, 264, 637, 7345, 13, 407, 11, 498, 264, 917, 935, 295, 264, 1036, 15035, 307, 5044, 813, 264, 917, 50714], 'temperature': 0.0, 'avg_logprob': -0.1370894800532948, 'compression_ratio': 1.8272251308900525, 'no_speech_prob': 0.01578461565077305}, {'id': 744, 'seek': 470904, 'start': 4716.72, 'end': 4723.16, 'text': ' point then I going to take the register back from that particular variable and give it', 'tokens': [50748, 935, 550, 286, 516, 281, 747, 264, 7280, 646, 490, 300, 1729, 7006, 293, 976, 309, 51070], 'temperature': 0.0, 'avg_logprob': -0.1370894800532948, 'compression_ratio': 1.8272251308900525, 'no_speech_prob': 0.01578461565077305}, {'id': 745, 'seek': 470904, 'start': 4723.16, 'end': 4730.16, 'text': ' to i. So, I say register of i is register of spill and location of spill it gives you', 'tokens': [51070, 281, 741, 13, 407, 11, 286, 584, 7280, 295, 741, 307, 7280, 295, 22044, 293, 4914, 295, 22044, 309, 2709, 291, 51420], 'temperature': 0.0, 'avg_logprob': -0.1370894800532948, 'compression_ratio': 1.8272251308900525, 'no_speech_prob': 0.01578461565077305}, {'id': 746, 'seek': 470904, 'start': 4730.64, 'end': 4736.28, 'text': ' a new location in the stack and then we remove spill from the active and we add i to the', 'tokens': [51444, 257, 777, 4914, 294, 264, 8630, 293, 550, 321, 4159, 22044, 490, 264, 4967, 293, 321, 909, 741, 281, 264, 51726], 'temperature': 0.0, 'avg_logprob': -0.1370894800532948, 'compression_ratio': 1.8272251308900525, 'no_speech_prob': 0.01578461565077305}, {'id': 747, 'seek': 473628, 'start': 4736.28, 'end': 4739.44, 'text': ' active right. So, in this case what happens is that I will', 'tokens': [50364, 4967, 558, 13, 407, 11, 294, 341, 1389, 437, 2314, 307, 300, 286, 486, 50522], 'temperature': 0.0, 'avg_logprob': -0.21676753265689117, 'compression_ratio': 1.8078602620087336, 'no_speech_prob': 0.026830432936549187}, {'id': 748, 'seek': 473628, 'start': 4739.44, 'end': 4744.88, 'text': ' again give you an example. So, what happens is that we have already allocated registers', 'tokens': [50522, 797, 976, 291, 364, 1365, 13, 407, 11, 437, 2314, 307, 300, 321, 362, 1217, 29772, 38351, 50794], 'temperature': 0.0, 'avg_logprob': -0.21676753265689117, 'compression_ratio': 1.8078602620087336, 'no_speech_prob': 0.026830432936549187}, {'id': 749, 'seek': 473628, 'start': 4744.88, 'end': 4750.599999999999, 'text': ' right and we have now come to a new live range for sorry new variable for which we want to', 'tokens': [50794, 558, 293, 321, 362, 586, 808, 281, 257, 777, 1621, 3613, 337, 2597, 777, 7006, 337, 597, 321, 528, 281, 51080], 'temperature': 0.0, 'avg_logprob': -0.21676753265689117, 'compression_ratio': 1.8078602620087336, 'no_speech_prob': 0.026830432936549187}, {'id': 750, 'seek': 473628, 'start': 4750.599999999999, 'end': 4756.599999999999, 'text': ' see whether a register has to be given or not. Now, for all the live variables for all', 'tokens': [51080, 536, 1968, 257, 7280, 575, 281, 312, 2212, 420, 406, 13, 823, 11, 337, 439, 264, 1621, 9102, 337, 439, 51380], 'temperature': 0.0, 'avg_logprob': -0.21676753265689117, 'compression_ratio': 1.8078602620087336, 'no_speech_prob': 0.026830432936549187}, {'id': 751, 'seek': 473628, 'start': 4756.599999999999, 'end': 4762.36, 'text': ' the variables which are interfering with it find out whether the end point of this versus', 'tokens': [51380, 264, 9102, 597, 366, 48721, 365, 309, 915, 484, 1968, 264, 917, 935, 295, 341, 5717, 51668], 'temperature': 0.0, 'avg_logprob': -0.21676753265689117, 'compression_ratio': 1.8078602620087336, 'no_speech_prob': 0.026830432936549187}, {'id': 752, 'seek': 476236, 'start': 4762.4, 'end': 4768.32, 'text': ' the end point of any of this if the end point of one of them is longer than the last one', 'tokens': [50366, 264, 917, 935, 295, 604, 295, 341, 498, 264, 917, 935, 295, 472, 295, 552, 307, 2854, 813, 264, 1036, 472, 50662], 'temperature': 0.0, 'avg_logprob': -0.1795081225308505, 'compression_ratio': 2.2884615384615383, 'no_speech_prob': 0.03821668028831482}, {'id': 753, 'seek': 476236, 'start': 4768.32, 'end': 4774.12, 'text': ' is longer than this then we decide to spill that one right or if the end point of this', 'tokens': [50662, 307, 2854, 813, 341, 550, 321, 4536, 281, 22044, 300, 472, 558, 420, 498, 264, 917, 935, 295, 341, 50952], 'temperature': 0.0, 'avg_logprob': -0.1795081225308505, 'compression_ratio': 2.2884615384615383, 'no_speech_prob': 0.03821668028831482}, {'id': 754, 'seek': 476236, 'start': 4774.12, 'end': 4781.12, 'text': ' is greater than all of those then we decide to spill this one again this is a heuristic', 'tokens': [50952, 307, 5044, 813, 439, 295, 729, 550, 321, 4536, 281, 22044, 341, 472, 797, 341, 307, 257, 415, 374, 3142, 51302], 'temperature': 0.0, 'avg_logprob': -0.1795081225308505, 'compression_ratio': 2.2884615384615383, 'no_speech_prob': 0.03821668028831482}, {'id': 755, 'seek': 476236, 'start': 4781.16, 'end': 4787.799999999999, 'text': ' right if you decide to spill then if you decide to spill one of the existing active variables', 'tokens': [51304, 558, 498, 291, 4536, 281, 22044, 550, 498, 291, 4536, 281, 22044, 472, 295, 264, 6741, 4967, 9102, 51636], 'temperature': 0.0, 'avg_logprob': -0.1795081225308505, 'compression_ratio': 2.2884615384615383, 'no_speech_prob': 0.03821668028831482}, {'id': 756, 'seek': 478780, 'start': 4787.8, 'end': 4793.92, 'text': ' active live ranges then that register is given to this otherwise this is being that', 'tokens': [50364, 4967, 1621, 22526, 550, 300, 7280, 307, 2212, 281, 341, 5911, 341, 307, 885, 300, 50670], 'temperature': 0.0, 'avg_logprob': -0.2528238984727368, 'compression_ratio': 1.9952830188679245, 'no_speech_prob': 0.08372949808835983}, {'id': 757, 'seek': 478780, 'start': 4793.92, 'end': 4798.2, 'text': ' is essentially what this algorithm is. Let us again look at this this is what we', 'tokens': [50670, 307, 4476, 437, 341, 9284, 307, 13, 961, 505, 797, 574, 412, 341, 341, 307, 437, 321, 50884], 'temperature': 0.0, 'avg_logprob': -0.2528238984727368, 'compression_ratio': 1.9952830188679245, 'no_speech_prob': 0.08372949808835983}, {'id': 758, 'seek': 478780, 'start': 4798.2, 'end': 4805.2, 'text': ' have okay I have put all the intervals over here now again I will illustrate the point.', 'tokens': [50884, 362, 1392, 286, 362, 829, 439, 264, 26651, 670, 510, 586, 797, 286, 486, 23221, 264, 935, 13, 51234], 'temperature': 0.0, 'avg_logprob': -0.2528238984727368, 'compression_ratio': 1.9952830188679245, 'no_speech_prob': 0.08372949808835983}, {'id': 759, 'seek': 478780, 'start': 4805.24, 'end': 4809.72, 'text': ' What happens is that the algorithm the main part of the algorithm goes from this point', 'tokens': [51236, 708, 2314, 307, 300, 264, 9284, 264, 2135, 644, 295, 264, 9284, 1709, 490, 341, 935, 51460], 'temperature': 0.0, 'avg_logprob': -0.2528238984727368, 'compression_ratio': 1.9952830188679245, 'no_speech_prob': 0.08372949808835983}, {'id': 760, 'seek': 478780, 'start': 4809.72, 'end': 4814.6, 'text': ' to this point to this point to this point and then it will go to this point it will', 'tokens': [51460, 281, 341, 935, 281, 341, 935, 281, 341, 935, 293, 550, 309, 486, 352, 281, 341, 935, 309, 486, 51704], 'temperature': 0.0, 'avg_logprob': -0.2528238984727368, 'compression_ratio': 1.9952830188679245, 'no_speech_prob': 0.08372949808835983}, {'id': 761, 'seek': 481460, 'start': 4814.6, 'end': 4821.6, 'text': ' not consider these intermediate points because no new live range starts in those points right.', 'tokens': [50364, 406, 1949, 613, 19376, 2793, 570, 572, 777, 1621, 3613, 3719, 294, 729, 2793, 558, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.18908445651714617, 'compression_ratio': 1.930232558139535, 'no_speech_prob': 0.03416948392987251}, {'id': 762, 'seek': 481460, 'start': 4821.6, 'end': 4827.72, 'text': ' So it will be at this point at this point at this point this point and then after it', 'tokens': [50714, 407, 309, 486, 312, 412, 341, 935, 412, 341, 935, 412, 341, 935, 341, 935, 293, 550, 934, 309, 51020], 'temperature': 0.0, 'avg_logprob': -0.18908445651714617, 'compression_ratio': 1.930232558139535, 'no_speech_prob': 0.03416948392987251}, {'id': 763, 'seek': 481460, 'start': 4827.72, 'end': 4833.76, 'text': ' jumps to here and when it jumps to here it tries to see which live ranges have ended', 'tokens': [51020, 16704, 281, 510, 293, 562, 309, 16704, 281, 510, 309, 9898, 281, 536, 597, 1621, 22526, 362, 4590, 51322], 'temperature': 0.0, 'avg_logprob': -0.18908445651714617, 'compression_ratio': 1.930232558139535, 'no_speech_prob': 0.03416948392987251}, {'id': 764, 'seek': 481460, 'start': 4833.76, 'end': 4838.320000000001, 'text': ' this live range has ended so it will try to free the register okay.', 'tokens': [51322, 341, 1621, 3613, 575, 4590, 370, 309, 486, 853, 281, 1737, 264, 7280, 1392, 13, 51550], 'temperature': 0.0, 'avg_logprob': -0.18908445651714617, 'compression_ratio': 1.930232558139535, 'no_speech_prob': 0.03416948392987251}, {'id': 765, 'seek': 483832, 'start': 4838.32, 'end': 4845.32, 'text': ' So let us take this interval put it over here right and then see all the intervals', 'tokens': [50364, 407, 718, 505, 747, 341, 15035, 829, 309, 670, 510, 558, 293, 550, 536, 439, 264, 26651, 50714], 'temperature': 0.0, 'avg_logprob': -0.15263413299213757, 'compression_ratio': 2.1144578313253013, 'no_speech_prob': 0.07490309327840805}, {'id': 766, 'seek': 483832, 'start': 4846.28, 'end': 4851.5199999999995, 'text': ' are sorted in the increasing order live intervals are sorted in the increasing order so it is', 'tokens': [50762, 366, 25462, 294, 264, 5662, 1668, 1621, 26651, 366, 25462, 294, 264, 5662, 1668, 370, 309, 307, 51024], 'temperature': 0.0, 'avg_logprob': -0.15263413299213757, 'compression_ratio': 2.1144578313253013, 'no_speech_prob': 0.07490309327840805}, {'id': 767, 'seek': 483832, 'start': 4851.5199999999995, 'end': 4858.5199999999995, 'text': ' S 1 based on the start point so that is S 1 S 2 S 3 S 4 S 5 and S 6 because the start', 'tokens': [51024, 318, 502, 2361, 322, 264, 722, 935, 370, 300, 307, 318, 502, 318, 568, 318, 805, 318, 1017, 318, 1025, 293, 318, 1386, 570, 264, 722, 51374], 'temperature': 0.0, 'avg_logprob': -0.15263413299213757, 'compression_ratio': 2.1144578313253013, 'no_speech_prob': 0.07490309327840805}, {'id': 768, 'seek': 483832, 'start': 4859.88, 'end': 4865.5599999999995, 'text': ' points are in the increasing order right you can see them to be in the increasing order.', 'tokens': [51442, 2793, 366, 294, 264, 5662, 1668, 558, 291, 393, 536, 552, 281, 312, 294, 264, 5662, 1668, 13, 51726], 'temperature': 0.0, 'avg_logprob': -0.15263413299213757, 'compression_ratio': 2.1144578313253013, 'no_speech_prob': 0.07490309327840805}, {'id': 769, 'seek': 486556, 'start': 4865.56, 'end': 4872.56, 'text': ' Now initially the active list is empty let us look at this particular point right and', 'tokens': [50364, 823, 9105, 264, 4967, 1329, 307, 6707, 718, 505, 574, 412, 341, 1729, 935, 558, 293, 50714], 'temperature': 0.0, 'avg_logprob': -0.1589166522026062, 'compression_ratio': 1.7772020725388602, 'no_speech_prob': 0.01940644532442093}, {'id': 770, 'seek': 486556, 'start': 4872.68, 'end': 4878.76, 'text': ' let us assume the case that we have three registers dollar 1 dollar 2 and dollar 3.', 'tokens': [50720, 718, 505, 6552, 264, 1389, 300, 321, 362, 1045, 38351, 7241, 502, 7241, 568, 293, 7241, 805, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.1589166522026062, 'compression_ratio': 1.7772020725388602, 'no_speech_prob': 0.01940644532442093}, {'id': 771, 'seek': 486556, 'start': 4878.76, 'end': 4885.76, 'text': ' Now S 1 can be assigned the register dollar 1 right then we come to the next point S 2', 'tokens': [51024, 823, 318, 502, 393, 312, 13279, 264, 7280, 7241, 502, 558, 550, 321, 808, 281, 264, 958, 935, 318, 568, 51374], 'temperature': 0.0, 'avg_logprob': -0.1589166522026062, 'compression_ratio': 1.7772020725388602, 'no_speech_prob': 0.01940644532442093}, {'id': 772, 'seek': 486556, 'start': 4887.84, 'end': 4894.120000000001, 'text': ' no interval has expired before this right now S 2 can be assigned the register because', 'tokens': [51478, 572, 15035, 575, 36587, 949, 341, 558, 586, 318, 568, 393, 312, 13279, 264, 7280, 570, 51792], 'temperature': 0.0, 'avg_logprob': -0.1589166522026062, 'compression_ratio': 1.7772020725388602, 'no_speech_prob': 0.01940644532442093}, {'id': 773, 'seek': 489412, 'start': 4894.12, 'end': 4900.16, 'text': ' you have a free register right so dollar 2 can be assigned now that also has to be', 'tokens': [50364, 291, 362, 257, 1737, 7280, 558, 370, 7241, 568, 393, 312, 13279, 586, 300, 611, 575, 281, 312, 50666], 'temperature': 0.0, 'avg_logprob': -0.14018042703692832, 'compression_ratio': 1.7671957671957672, 'no_speech_prob': 0.0027095223776996136}, {'id': 774, 'seek': 489412, 'start': 4900.16, 'end': 4907.16, 'text': ' put into the active list and then you sort the active list in terms of the end time okay.', 'tokens': [50666, 829, 666, 264, 4967, 1329, 293, 550, 291, 1333, 264, 4967, 1329, 294, 2115, 295, 264, 917, 565, 1392, 13, 51016], 'temperature': 0.0, 'avg_logprob': -0.14018042703692832, 'compression_ratio': 1.7671957671957672, 'no_speech_prob': 0.0027095223776996136}, {'id': 775, 'seek': 489412, 'start': 4908.32, 'end': 4915.32, 'text': ' So when you come to S 3 you have active list as S 1, S 2 right and when you come to S 3', 'tokens': [51074, 407, 562, 291, 808, 281, 318, 805, 291, 362, 4967, 1329, 382, 318, 502, 11, 318, 568, 558, 293, 562, 291, 808, 281, 318, 805, 51424], 'temperature': 0.0, 'avg_logprob': -0.14018042703692832, 'compression_ratio': 1.7671957671957672, 'no_speech_prob': 0.0027095223776996136}, {'id': 776, 'seek': 489412, 'start': 4916.76, 'end': 4921.88, 'text': ' no more live ranges have expired so that is fine have nothing else to do.', 'tokens': [51496, 572, 544, 1621, 22526, 362, 36587, 370, 300, 307, 2489, 362, 1825, 1646, 281, 360, 13, 51752], 'temperature': 0.0, 'avg_logprob': -0.14018042703692832, 'compression_ratio': 1.7671957671957672, 'no_speech_prob': 0.0027095223776996136}, {'id': 777, 'seek': 492188, 'start': 4921.88, 'end': 4926.54, 'text': ' Now you look at your free register pool you have one free register which is available', 'tokens': [50364, 823, 291, 574, 412, 428, 1737, 7280, 7005, 291, 362, 472, 1737, 7280, 597, 307, 2435, 50597], 'temperature': 0.0, 'avg_logprob': -0.1784942024632504, 'compression_ratio': 1.7593582887700534, 'no_speech_prob': 0.010782120749354362}, {'id': 778, 'seek': 492188, 'start': 4926.54, 'end': 4933.54, 'text': ' that can be given to S 3 now the active is S 1, S 2, S 3 but if you arrange it in terms', 'tokens': [50597, 300, 393, 312, 2212, 281, 318, 805, 586, 264, 4967, 307, 318, 502, 11, 318, 568, 11, 318, 805, 457, 498, 291, 9424, 309, 294, 2115, 50947], 'temperature': 0.0, 'avg_logprob': -0.1784942024632504, 'compression_ratio': 1.7593582887700534, 'no_speech_prob': 0.010782120749354362}, {'id': 779, 'seek': 492188, 'start': 4933.54, 'end': 4940.54, 'text': ' of the end point it will be S 1, S 3 and then S 2 correct so the active and the next point', 'tokens': [50947, 295, 264, 917, 935, 309, 486, 312, 318, 502, 11, 318, 805, 293, 550, 318, 568, 3006, 370, 264, 4967, 293, 264, 958, 935, 51297], 'temperature': 0.0, 'avg_logprob': -0.1784942024632504, 'compression_ratio': 1.7593582887700534, 'no_speech_prob': 0.010782120749354362}, {'id': 780, 'seek': 492188, 'start': 4942.2, 'end': 4949.2, 'text': ' is S 1, S 3 and S 2. Now you do not have any more free registers', 'tokens': [51380, 307, 318, 502, 11, 318, 805, 293, 318, 568, 13, 823, 291, 360, 406, 362, 604, 544, 1737, 38351, 51730], 'temperature': 0.0, 'avg_logprob': -0.1784942024632504, 'compression_ratio': 1.7593582887700534, 'no_speech_prob': 0.010782120749354362}, {'id': 781, 'seek': 494920, 'start': 4949.4, 'end': 4955.36, 'text': ' and when you are at S 4 no live range is ending either so you have nothing to release right.', 'tokens': [50374, 293, 562, 291, 366, 412, 318, 1017, 572, 1621, 3613, 307, 8121, 2139, 370, 291, 362, 1825, 281, 4374, 558, 13, 50672], 'temperature': 0.0, 'avg_logprob': -0.2052912712097168, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.010944453999400139}, {'id': 782, 'seek': 494920, 'start': 4955.36, 'end': 4961.88, 'text': ' So at this point in time you have to make a decision about spill right because you have', 'tokens': [50672, 407, 412, 341, 935, 294, 565, 291, 362, 281, 652, 257, 3537, 466, 22044, 558, 570, 291, 362, 50998], 'temperature': 0.0, 'avg_logprob': -0.2052912712097168, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.010944453999400139}, {'id': 783, 'seek': 494920, 'start': 4961.88, 'end': 4968.88, 'text': ' no free registers you consider the end point so now you look at your active list which', 'tokens': [50998, 572, 1737, 38351, 291, 1949, 264, 917, 935, 370, 586, 291, 574, 412, 428, 4967, 1329, 597, 51348], 'temperature': 0.0, 'avg_logprob': -0.2052912712097168, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.010944453999400139}, {'id': 784, 'seek': 494920, 'start': 4968.88, 'end': 4975.88, 'text': ' is the last one in that S 2 when does S 2 end point end yeah as opposed to this S 4', 'tokens': [51348, 307, 264, 1036, 472, 294, 300, 318, 568, 562, 775, 318, 568, 917, 935, 917, 1338, 382, 8851, 281, 341, 318, 1017, 51698], 'temperature': 0.0, 'avg_logprob': -0.2052912712097168, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.010944453999400139}, {'id': 785, 'seek': 497588, 'start': 4975.88, 'end': 4982.88, 'text': ' ends earlier correct. So now because S 4 end point is less than S 2 end point you', 'tokens': [50364, 5314, 3071, 3006, 13, 407, 586, 570, 318, 1017, 917, 935, 307, 1570, 813, 318, 568, 917, 935, 291, 50714], 'temperature': 0.0, 'avg_logprob': -0.23164889772059555, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.015140191651880741}, {'id': 786, 'seek': 497588, 'start': 4987.88, 'end': 4994.12, 'text': ' decide to spill S 2 the idea here is that the one which has the longest live interval', 'tokens': [50964, 4536, 281, 22044, 318, 568, 264, 1558, 510, 307, 300, 264, 472, 597, 575, 264, 15438, 1621, 15035, 51276], 'temperature': 0.0, 'avg_logprob': -0.23164889772059555, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.015140191651880741}, {'id': 787, 'seek': 497588, 'start': 4994.12, 'end': 5001.12, 'text': ' if you spill then you can accommodate several variables with that spill right.', 'tokens': [51276, 498, 291, 22044, 550, 291, 393, 21410, 2940, 9102, 365, 300, 22044, 558, 13, 51626], 'temperature': 0.0, 'avg_logprob': -0.23164889772059555, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.015140191651880741}, {'id': 788, 'seek': 500112, 'start': 5001.2, 'end': 5008.2, 'text': ' So you spill S 2 and assign that register to S 4 so when you come to point S 5 this', 'tokens': [50368, 407, 291, 22044, 318, 568, 293, 6269, 300, 7280, 281, 318, 1017, 370, 562, 291, 808, 281, 935, 318, 1025, 341, 50718], 'temperature': 0.0, 'avg_logprob': -0.16520305012547692, 'compression_ratio': 1.7525252525252526, 'no_speech_prob': 0.017271894961595535}, {'id': 789, 'seek': 500112, 'start': 5009.0, 'end': 5014.68, 'text': ' is the first point where you see that one live interval has ended so you can say now', 'tokens': [50758, 307, 264, 700, 935, 689, 291, 536, 300, 472, 1621, 15035, 575, 4590, 370, 291, 393, 584, 586, 51042], 'temperature': 0.0, 'avg_logprob': -0.16520305012547692, 'compression_ratio': 1.7525252525252526, 'no_speech_prob': 0.017271894961595535}, {'id': 790, 'seek': 500112, 'start': 5014.68, 'end': 5021.68, 'text': ' you can remove S 1 from the active list and you can put back that register into free registers', 'tokens': [51042, 291, 393, 4159, 318, 502, 490, 264, 4967, 1329, 293, 291, 393, 829, 646, 300, 7280, 666, 1737, 38351, 51392], 'temperature': 0.0, 'avg_logprob': -0.16520305012547692, 'compression_ratio': 1.7525252525252526, 'no_speech_prob': 0.017271894961595535}, {'id': 791, 'seek': 500112, 'start': 5021.88, 'end': 5027.36, 'text': ' right so you have one free register which is available and that can be given to S 5', 'tokens': [51402, 558, 370, 291, 362, 472, 1737, 7280, 597, 307, 2435, 293, 300, 393, 312, 2212, 281, 318, 1025, 51676], 'temperature': 0.0, 'avg_logprob': -0.16520305012547692, 'compression_ratio': 1.7525252525252526, 'no_speech_prob': 0.017271894961595535}, {'id': 792, 'seek': 502736, 'start': 5027.48, 'end': 5034.48, 'text': ' alright. So then you come to S 6 by that time S 3 and S 4 have ended so you can free those', 'tokens': [50370, 5845, 13, 407, 550, 291, 808, 281, 318, 1386, 538, 300, 565, 318, 805, 293, 318, 1017, 362, 4590, 370, 291, 393, 1737, 729, 50720], 'temperature': 0.0, 'avg_logprob': -0.14615294299548184, 'compression_ratio': 1.6894736842105262, 'no_speech_prob': 0.006069918163120747}, {'id': 793, 'seek': 502736, 'start': 5034.88, 'end': 5040.639999999999, 'text': ' registers and then you can assign one register to S right.', 'tokens': [50740, 38351, 293, 550, 291, 393, 6269, 472, 7280, 281, 318, 558, 13, 51028], 'temperature': 0.0, 'avg_logprob': -0.14615294299548184, 'compression_ratio': 1.6894736842105262, 'no_speech_prob': 0.006069918163120747}, {'id': 794, 'seek': 502736, 'start': 5040.639999999999, 'end': 5047.24, 'text': ' So this is essentially how this linear scan algorithm works jumps from one start point', 'tokens': [51028, 407, 341, 307, 4476, 577, 341, 8213, 11049, 9284, 1985, 16704, 490, 472, 722, 935, 51358], 'temperature': 0.0, 'avg_logprob': -0.14615294299548184, 'compression_ratio': 1.6894736842105262, 'no_speech_prob': 0.006069918163120747}, {'id': 795, 'seek': 502736, 'start': 5047.24, 'end': 5051.759999999999, 'text': ' of an interval to the next start point and so on and at every point in time whenever', 'tokens': [51358, 295, 364, 15035, 281, 264, 958, 722, 935, 293, 370, 322, 293, 412, 633, 935, 294, 565, 5699, 51584], 'temperature': 0.0, 'avg_logprob': -0.14615294299548184, 'compression_ratio': 1.6894736842105262, 'no_speech_prob': 0.006069918163120747}, {'id': 796, 'seek': 505176, 'start': 5051.84, 'end': 5058.16, 'text': ' it has to make a decision about spill it considers the live interval of the variable for which', 'tokens': [50368, 309, 575, 281, 652, 257, 3537, 466, 22044, 309, 33095, 264, 1621, 15035, 295, 264, 7006, 337, 597, 50684], 'temperature': 0.0, 'avg_logprob': -0.152414172528738, 'compression_ratio': 1.8512820512820514, 'no_speech_prob': 0.006388264708220959}, {'id': 797, 'seek': 505176, 'start': 5058.16, 'end': 5065.16, 'text': ' it wants to allocate the register with the live interval of the last variable which is', 'tokens': [50684, 309, 2738, 281, 35713, 264, 7280, 365, 264, 1621, 15035, 295, 264, 1036, 7006, 597, 307, 51034], 'temperature': 0.0, 'avg_logprob': -0.152414172528738, 'compression_ratio': 1.8512820512820514, 'no_speech_prob': 0.006388264708220959}, {'id': 798, 'seek': 505176, 'start': 5065.76, 'end': 5072.76, 'text': ' in the active list which is S 2 whichever one is further that is spilled the other one', 'tokens': [51064, 294, 264, 4967, 1329, 597, 307, 318, 568, 24123, 472, 307, 3052, 300, 307, 37833, 264, 661, 472, 51414], 'temperature': 0.0, 'avg_logprob': -0.152414172528738, 'compression_ratio': 1.8512820512820514, 'no_speech_prob': 0.006388264708220959}, {'id': 799, 'seek': 505176, 'start': 5072.76, 'end': 5079.24, 'text': ' is given the register. If S 2 had been smaller right or all of them are of the same distance', 'tokens': [51414, 307, 2212, 264, 7280, 13, 759, 318, 568, 632, 668, 4356, 558, 420, 439, 295, 552, 366, 295, 264, 912, 4560, 51738], 'temperature': 0.0, 'avg_logprob': -0.152414172528738, 'compression_ratio': 1.8512820512820514, 'no_speech_prob': 0.006388264708220959}, {'id': 800, 'seek': 507924, 'start': 5079.36, 'end': 5083.96, 'text': ' then you would have decided to spill S 4 and S 4 would not have been allocated. So that', 'tokens': [50370, 550, 291, 576, 362, 3047, 281, 22044, 318, 1017, 293, 318, 1017, 576, 406, 362, 668, 29772, 13, 407, 300, 50600], 'temperature': 0.0, 'avg_logprob': -0.1930462686639083, 'compression_ratio': 1.7782426778242677, 'no_speech_prob': 0.02101920172572136}, {'id': 801, 'seek': 507924, 'start': 5083.96, 'end': 5089.599999999999, 'text': ' kind of completes our discussion in register allocation that is really what we wanted to', 'tokens': [50600, 733, 295, 36362, 527, 5017, 294, 7280, 27599, 300, 307, 534, 437, 321, 1415, 281, 50882], 'temperature': 0.0, 'avg_logprob': -0.1930462686639083, 'compression_ratio': 1.7782426778242677, 'no_speech_prob': 0.02101920172572136}, {'id': 802, 'seek': 507924, 'start': 5089.599999999999, 'end': 5094.679999999999, 'text': ' do. There is something that I will talk about as far as the interaction between register', 'tokens': [50882, 360, 13, 821, 307, 746, 300, 286, 486, 751, 466, 382, 1400, 382, 264, 9285, 1296, 7280, 51136], 'temperature': 0.0, 'avg_logprob': -0.1930462686639083, 'compression_ratio': 1.7782426778242677, 'no_speech_prob': 0.02101920172572136}, {'id': 803, 'seek': 507924, 'start': 5094.679999999999, 'end': 5100.16, 'text': ' allocation and instruction scheduling that we will take it up later okay.', 'tokens': [51136, 27599, 293, 10951, 29055, 300, 321, 486, 747, 309, 493, 1780, 1392, 13, 51410], 'temperature': 0.0, 'avg_logprob': -0.1930462686639083, 'compression_ratio': 1.7782426778242677, 'no_speech_prob': 0.02101920172572136}, {'id': 804, 'seek': 507924, 'start': 5100.16, 'end': 5107.16, 'text': ' So I think it is time to close so essentially what we have seen yeah have a question.', 'tokens': [51410, 407, 286, 519, 309, 307, 565, 281, 1998, 370, 4476, 437, 321, 362, 1612, 1338, 362, 257, 1168, 13, 51760], 'temperature': 0.0, 'avg_logprob': -0.1930462686639083, 'compression_ratio': 1.7782426778242677, 'no_speech_prob': 0.02101920172572136}, {'id': 805, 'seek': 510924, 'start': 5109.24, 'end': 5116.24, 'text': ' Oh okay so I have not really talked about those kinds of things if S 2 appears to be', 'tokens': [50364, 876, 1392, 370, 286, 362, 406, 534, 2825, 466, 729, 3685, 295, 721, 498, 318, 568, 7038, 281, 312, 50714], 'temperature': 0.0, 'avg_logprob': -0.20141029357910156, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.020807772874832153}, {'id': 806, 'seek': 510924, 'start': 5120.5199999999995, 'end': 5126.88, 'text': ' a left operand of something or let us say if you are talking about doing this for a', 'tokens': [50928, 257, 1411, 2208, 474, 295, 746, 420, 718, 505, 584, 498, 291, 366, 1417, 466, 884, 341, 337, 257, 51246], 'temperature': 0.0, 'avg_logprob': -0.20141029357910156, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.020807772874832153}, {'id': 807, 'seek': 510924, 'start': 5126.88, 'end': 5131.88, 'text': ' risk architecture eventually S 2 has to be loaded into a register so you will incur a', 'tokens': [51246, 3148, 9482, 4728, 318, 568, 575, 281, 312, 13210, 666, 257, 7280, 370, 291, 486, 35774, 257, 51496], 'temperature': 0.0, 'avg_logprob': -0.20141029357910156, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.020807772874832153}, {'id': 808, 'seek': 510924, 'start': 5131.88, 'end': 5138.88, 'text': ' cost for that right all right. So again you must understand that yesterday we talked about', 'tokens': [51496, 2063, 337, 300, 558, 439, 558, 13, 407, 797, 291, 1633, 1223, 300, 5186, 321, 2825, 466, 51846], 'temperature': 0.0, 'avg_logprob': -0.20141029357910156, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.020807772874832153}, {'id': 809, 'seek': 513924, 'start': 5139.639999999999, 'end': 5144.76, 'text': ' static single assignment right so when you do static single assignment that actually', 'tokens': [50384, 13437, 2167, 15187, 558, 370, 562, 291, 360, 13437, 2167, 15187, 300, 767, 50640], 'temperature': 0.0, 'avg_logprob': -0.1720466205051967, 'compression_ratio': 1.7684729064039408, 'no_speech_prob': 0.004348249174654484}, {'id': 810, 'seek': 513924, 'start': 5144.76, 'end': 5151.76, 'text': ' does a lot of things to live ranges and the interference graph sorry the interference', 'tokens': [50640, 775, 257, 688, 295, 721, 281, 1621, 22526, 293, 264, 24497, 4295, 2597, 264, 24497, 50990], 'temperature': 0.0, 'avg_logprob': -0.1720466205051967, 'compression_ratio': 1.7684729064039408, 'no_speech_prob': 0.004348249174654484}, {'id': 811, 'seek': 513924, 'start': 5152.12, 'end': 5157.24, 'text': ' essentially becomes much simpler to handle because again there will be no holes and things', 'tokens': [51008, 4476, 3643, 709, 18587, 281, 4813, 570, 797, 456, 486, 312, 572, 8118, 293, 721, 51264], 'temperature': 0.0, 'avg_logprob': -0.1720466205051967, 'compression_ratio': 1.7684729064039408, 'no_speech_prob': 0.004348249174654484}, {'id': 812, 'seek': 513924, 'start': 5157.24, 'end': 5164.24, 'text': ' like that. So again that makes register allocation much faster but the traditional way of looking', 'tokens': [51264, 411, 300, 13, 407, 797, 300, 1669, 7280, 27599, 709, 4663, 457, 264, 5164, 636, 295, 1237, 51614], 'temperature': 0.0, 'avg_logprob': -0.1720466205051967, 'compression_ratio': 1.7684729064039408, 'no_speech_prob': 0.004348249174654484}, {'id': 813, 'seek': 516424, 'start': 5165.24, 'end': 5171.04, 'text': ' at it is this graph coloring based approach which is later on modified by this linear', 'tokens': [50414, 412, 309, 307, 341, 4295, 23198, 2361, 3109, 597, 307, 1780, 322, 15873, 538, 341, 8213, 50704], 'temperature': 0.0, 'avg_logprob': -0.23952885235057159, 'compression_ratio': 1.7595628415300546, 'no_speech_prob': 0.016628123819828033}, {'id': 814, 'seek': 516424, 'start': 5171.04, 'end': 5175.5599999999995, 'text': ' scan approach but the linear scan approach is inefficient in the sense that it does lot', 'tokens': [50704, 11049, 3109, 457, 264, 8213, 11049, 3109, 307, 43495, 294, 264, 2020, 300, 309, 775, 688, 50930], 'temperature': 0.0, 'avg_logprob': -0.23952885235057159, 'compression_ratio': 1.7595628415300546, 'no_speech_prob': 0.016628123819828033}, {'id': 815, 'seek': 516424, 'start': 5175.5599999999995, 'end': 5181.44, 'text': ' of approximation and therefore even though it does a faster allocation it may do inefficiently', 'tokens': [50930, 295, 28023, 293, 4412, 754, 1673, 309, 775, 257, 4663, 27599, 309, 815, 360, 43495, 356, 51224], 'temperature': 0.0, 'avg_logprob': -0.23952885235057159, 'compression_ratio': 1.7595628415300546, 'no_speech_prob': 0.016628123819828033}, {'id': 816, 'seek': 516424, 'start': 5181.44, 'end': 5184.36, 'text': ' right that is really what we need to understand here.', 'tokens': [51224, 558, 300, 307, 534, 437, 321, 643, 281, 1223, 510, 13, 51370], 'temperature': 0.0, 'avg_logprob': -0.23952885235057159, 'compression_ratio': 1.7595628415300546, 'no_speech_prob': 0.016628123819828033}]