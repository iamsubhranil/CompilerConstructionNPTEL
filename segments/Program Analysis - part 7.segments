[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 14.42, 'text': ' So, now we will start with, so now essentially we know some structure to the space of solutions', 'tokens': [50364, 407, 11, 586, 321, 486, 722, 365, 11, 370, 586, 4476, 321, 458, 512, 3877, 281, 264, 1901, 295, 6547, 51085], 'temperature': 0.0, 'avg_logprob': -0.22550487518310547, 'compression_ratio': 1.6347305389221556, 'no_speech_prob': 0.059809207916259766}, {'id': 1, 'seek': 0, 'start': 14.42, 'end': 19.26, 'text': ' that are algorithm traverses right. How what all does it touch, what how does it move we', 'tokens': [51085, 300, 366, 9284, 23149, 279, 558, 13, 1012, 437, 439, 775, 309, 2557, 11, 437, 577, 775, 309, 1286, 321, 51327], 'temperature': 0.0, 'avg_logprob': -0.22550487518310547, 'compression_ratio': 1.6347305389221556, 'no_speech_prob': 0.059809207916259766}, {'id': 2, 'seek': 0, 'start': 19.26, 'end': 25.060000000000002, 'text': ' know something, but we still do not know that why does it why should it terminate or why', 'tokens': [51327, 458, 746, 11, 457, 321, 920, 360, 406, 458, 300, 983, 775, 309, 983, 820, 309, 10761, 473, 420, 983, 51617], 'temperature': 0.0, 'avg_logprob': -0.22550487518310547, 'compression_ratio': 1.6347305389221556, 'no_speech_prob': 0.059809207916259766}, {'id': 3, 'seek': 2506, 'start': 25.06, 'end': 29.939999999999998, 'text': ' should it why should it compute the solution that we are looking to get those things we', 'tokens': [50364, 820, 309, 983, 820, 309, 14722, 264, 3827, 300, 321, 366, 1237, 281, 483, 729, 721, 321, 50608], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 4, 'seek': 2506, 'start': 29.939999999999998, 'end': 34.22, 'text': ' have not we do not know yet right. So, let us try to now argue mathematically and see', 'tokens': [50608, 362, 406, 321, 360, 406, 458, 1939, 558, 13, 407, 11, 718, 505, 853, 281, 586, 9695, 44003, 293, 536, 50822], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 5, 'seek': 2506, 'start': 34.22, 'end': 38.46, 'text': ' why does it really work because now I can because now I have figured out what is exactly', 'tokens': [50822, 983, 775, 309, 534, 589, 570, 586, 286, 393, 570, 586, 286, 362, 8932, 484, 437, 307, 2293, 51034], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 6, 'seek': 2506, 'start': 38.46, 'end': 42.14, 'text': ' happening on this lattice on this mathematical structure I do not really need to worry too', 'tokens': [51034, 2737, 322, 341, 34011, 322, 341, 18894, 3877, 286, 360, 406, 534, 643, 281, 3292, 886, 51218], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 7, 'seek': 2506, 'start': 42.14, 'end': 45.82, 'text': ' much about the implementation or the algorithm that we used right.', 'tokens': [51218, 709, 466, 264, 11420, 420, 264, 9284, 300, 321, 1143, 558, 13, 51402], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 8, 'seek': 2506, 'start': 45.82, 'end': 53.46, 'text': ' So, let us see so there is this big big big big theorem known as a Naster-Tasca theorem', 'tokens': [51402, 407, 11, 718, 505, 536, 370, 456, 307, 341, 955, 955, 955, 955, 20904, 2570, 382, 257, 426, 1727, 12, 51, 296, 496, 20904, 51784], 'temperature': 0.0, 'avg_logprob': -0.22062802905878745, 'compression_ratio': 1.8814814814814815, 'no_speech_prob': 0.08017892390489578}, {'id': 9, 'seek': 5346, 'start': 53.62, 'end': 59.9, 'text': ' which essentially gives some very interesting results for such computations. So, it says', 'tokens': [50372, 597, 4476, 2709, 512, 588, 1880, 3542, 337, 1270, 2807, 763, 13, 407, 11, 309, 1619, 50686], 'temperature': 0.0, 'avg_logprob': -0.17335540056228638, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.07146469503641129}, {'id': 10, 'seek': 5346, 'start': 59.9, 'end': 69.2, 'text': ' that let D the set D with the less than equal to operator be a complete lattice and let', 'tokens': [50686, 300, 718, 413, 264, 992, 413, 365, 264, 1570, 813, 2681, 281, 12973, 312, 257, 3566, 34011, 293, 718, 51151], 'temperature': 0.0, 'avg_logprob': -0.17335540056228638, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.07146469503641129}, {'id': 11, 'seek': 5346, 'start': 69.2, 'end': 77.86, 'text': ' f going from D to D be a monotonic function on this set D with on this particular lattice', 'tokens': [51151, 283, 516, 490, 413, 281, 413, 312, 257, 1108, 310, 11630, 2445, 322, 341, 992, 413, 365, 322, 341, 1729, 34011, 51584], 'temperature': 0.0, 'avg_logprob': -0.17335540056228638, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.07146469503641129}, {'id': 12, 'seek': 7786, 'start': 77.86, 'end': 89.5, 'text': ' and let P be the set of all fixed points of f then first thing is the set of fixed points', 'tokens': [50364, 293, 718, 430, 312, 264, 992, 295, 439, 6806, 2793, 295, 283, 550, 700, 551, 307, 264, 992, 295, 6806, 2793, 50946], 'temperature': 0.0, 'avg_logprob': -0.1631635168324346, 'compression_ratio': 1.4916666666666667, 'no_speech_prob': 0.03452233225107193}, {'id': 13, 'seek': 7786, 'start': 89.5, 'end': 97.3, 'text': ' is non-empty which means that f under this condition which surely have at least one fixed', 'tokens': [50946, 307, 2107, 12, 4543, 88, 597, 1355, 300, 283, 833, 341, 4188, 597, 11468, 362, 412, 1935, 472, 6806, 51336], 'temperature': 0.0, 'avg_logprob': -0.1631635168324346, 'compression_ratio': 1.4916666666666667, 'no_speech_prob': 0.03452233225107193}, {'id': 14, 'seek': 9730, 'start': 97.3, 'end': 106.06, 'text': ' point. So, this tells me something about the existence of a fixed point right.', 'tokens': [50364, 935, 13, 407, 11, 341, 5112, 385, 746, 466, 264, 9123, 295, 257, 6806, 935, 558, 13, 50802], 'temperature': 0.0, 'avg_logprob': -0.15728709811256045, 'compression_ratio': 1.5987261146496816, 'no_speech_prob': 0.004606505390256643}, {'id': 15, 'seek': 9730, 'start': 106.06, 'end': 115.25999999999999, 'text': ' So, if you have a complete lattice if you have a monotonic function then my there will', 'tokens': [50802, 407, 11, 498, 291, 362, 257, 3566, 34011, 498, 291, 362, 257, 1108, 310, 11630, 2445, 550, 452, 456, 486, 51262], 'temperature': 0.0, 'avg_logprob': -0.15728709811256045, 'compression_ratio': 1.5987261146496816, 'no_speech_prob': 0.004606505390256643}, {'id': 16, 'seek': 9730, 'start': 115.25999999999999, 'end': 125.3, 'text': ' be at least one fixed point in this lattice second is P with less than equal to forms', 'tokens': [51262, 312, 412, 1935, 472, 6806, 935, 294, 341, 34011, 1150, 307, 430, 365, 1570, 813, 2681, 281, 6422, 51764], 'temperature': 0.0, 'avg_logprob': -0.15728709811256045, 'compression_ratio': 1.5987261146496816, 'no_speech_prob': 0.004606505390256643}, {'id': 17, 'seek': 12530, 'start': 125.3, 'end': 134.42, 'text': ' a complete lattice sorry this the second very interesting point is that ok. So, it', 'tokens': [50364, 257, 3566, 34011, 2597, 341, 264, 1150, 588, 1880, 935, 307, 300, 3133, 13, 407, 11, 309, 50820], 'temperature': 0.0, 'avg_logprob': -0.19423583246046497, 'compression_ratio': 1.6196319018404908, 'no_speech_prob': 0.00666978070512414}, {'id': 18, 'seek': 12530, 'start': 134.42, 'end': 141.3, 'text': ' first says that there surely exists a fixed point second thing, but it may have more than', 'tokens': [50820, 700, 1619, 300, 456, 11468, 8198, 257, 6806, 935, 1150, 551, 11, 457, 309, 815, 362, 544, 813, 51164], 'temperature': 0.0, 'avg_logprob': -0.19423583246046497, 'compression_ratio': 1.6196319018404908, 'no_speech_prob': 0.00666978070512414}, {'id': 19, 'seek': 12530, 'start': 141.3, 'end': 148.5, 'text': ' one fixed point right. So, then it says that it also tells us something about the structure', 'tokens': [51164, 472, 6806, 935, 558, 13, 407, 11, 550, 309, 1619, 300, 309, 611, 5112, 505, 746, 466, 264, 3877, 51524], 'temperature': 0.0, 'avg_logprob': -0.19423583246046497, 'compression_ratio': 1.6196319018404908, 'no_speech_prob': 0.00666978070512414}, {'id': 20, 'seek': 14850, 'start': 148.5, 'end': 155.22, 'text': ' of this set of fixed points. So, P is the set of fixed points it also tells us that', 'tokens': [50364, 295, 341, 992, 295, 6806, 2793, 13, 407, 11, 430, 307, 264, 992, 295, 6806, 2793, 309, 611, 5112, 505, 300, 50700], 'temperature': 0.0, 'avg_logprob': -0.15409182393273643, 'compression_ratio': 1.9116022099447514, 'no_speech_prob': 0.1188293918967247}, {'id': 21, 'seek': 14850, 'start': 155.22, 'end': 164.5, 'text': ' the set of fixed points P forms a complete lattice under the same ordering relation really', 'tokens': [50700, 264, 992, 295, 6806, 2793, 430, 6422, 257, 3566, 34011, 833, 264, 912, 21739, 9721, 534, 51164], 'temperature': 0.0, 'avg_logprob': -0.15409182393273643, 'compression_ratio': 1.9116022099447514, 'no_speech_prob': 0.1188293918967247}, {'id': 22, 'seek': 14850, 'start': 164.5, 'end': 171.22, 'text': ' interesting result do you understand what is going on. So, I have this big set in that', 'tokens': [51164, 1880, 1874, 360, 291, 1223, 437, 307, 516, 322, 13, 407, 11, 286, 362, 341, 955, 992, 294, 300, 51500], 'temperature': 0.0, 'avg_logprob': -0.15409182393273643, 'compression_ratio': 1.9116022099447514, 'no_speech_prob': 0.1188293918967247}, {'id': 23, 'seek': 14850, 'start': 171.22, 'end': 175.64, 'text': ' set it says that ok there is going to be a set of fixed points and this set is going', 'tokens': [51500, 992, 309, 1619, 300, 3133, 456, 307, 516, 281, 312, 257, 992, 295, 6806, 2793, 293, 341, 992, 307, 516, 51721], 'temperature': 0.0, 'avg_logprob': -0.15409182393273643, 'compression_ratio': 1.9116022099447514, 'no_speech_prob': 0.1188293918967247}, {'id': 24, 'seek': 17564, 'start': 175.64, 'end': 179.72, 'text': ' to be non-empty this set P is going to be not. So, this big set is a set D and this', 'tokens': [50364, 281, 312, 2107, 12, 4543, 88, 341, 992, 430, 307, 516, 281, 312, 406, 13, 407, 11, 341, 955, 992, 307, 257, 992, 413, 293, 341, 50568], 'temperature': 0.0, 'avg_logprob': -0.12602561585446623, 'compression_ratio': 1.8481675392670156, 'no_speech_prob': 0.25054505467414856}, {'id': 25, 'seek': 17564, 'start': 179.72, 'end': 186.51999999999998, 'text': ' small set P is going to be non-empty not just that this set P itself is going to be a complete', 'tokens': [50568, 1359, 992, 430, 307, 516, 281, 312, 2107, 12, 4543, 88, 406, 445, 300, 341, 992, 430, 2564, 307, 516, 281, 312, 257, 3566, 50908], 'temperature': 0.0, 'avg_logprob': -0.12602561585446623, 'compression_ratio': 1.8481675392670156, 'no_speech_prob': 0.25054505467414856}, {'id': 26, 'seek': 17564, 'start': 186.51999999999998, 'end': 191.16, 'text': ' lattice under the same ordering relation. So, we have a mini lattice inside this bigger', 'tokens': [50908, 34011, 833, 264, 912, 21739, 9721, 13, 407, 11, 321, 362, 257, 8382, 34011, 1854, 341, 3801, 51140], 'temperature': 0.0, 'avg_logprob': -0.12602561585446623, 'compression_ratio': 1.8481675392670156, 'no_speech_prob': 0.25054505467414856}, {'id': 27, 'seek': 17564, 'start': 191.16, 'end': 199.39999999999998, 'text': ' lattice the third thing is that the least fixed point of f coincides with the greatest', 'tokens': [51140, 34011, 264, 2636, 551, 307, 300, 264, 1935, 6806, 935, 295, 283, 13001, 1875, 365, 264, 6636, 51552], 'temperature': 0.0, 'avg_logprob': -0.12602561585446623, 'compression_ratio': 1.8481675392670156, 'no_speech_prob': 0.25054505467414856}, {'id': 28, 'seek': 19940, 'start': 199.4, 'end': 205.64000000000001, 'text': ' lower bound of the set of post fixed points and the greatest fixed points of f coincides', 'tokens': [50364, 3126, 5472, 295, 264, 992, 295, 2183, 6806, 2793, 293, 264, 6636, 6806, 2793, 295, 283, 13001, 1875, 50676], 'temperature': 0.0, 'avg_logprob': -0.20275677114293195, 'compression_ratio': 1.7583892617449663, 'no_speech_prob': 0.11562639474868774}, {'id': 29, 'seek': 19940, 'start': 205.64000000000001, 'end': 213.32, 'text': ' with the lub of the prefix points of f. So, it means that now let us say my. So, the', 'tokens': [50676, 365, 264, 287, 836, 295, 264, 46969, 2793, 295, 283, 13, 407, 11, 309, 1355, 300, 586, 718, 505, 584, 452, 13, 407, 11, 264, 51060], 'temperature': 0.0, 'avg_logprob': -0.20275677114293195, 'compression_ratio': 1.7583892617449663, 'no_speech_prob': 0.11562639474868774}, {'id': 30, 'seek': 19940, 'start': 213.32, 'end': 223.36, 'text': ' diagram would look something like this. So, these are my post fixed points and these are', 'tokens': [51060, 10686, 576, 574, 746, 411, 341, 13, 407, 11, 613, 366, 452, 2183, 6806, 2793, 293, 613, 366, 51562], 'temperature': 0.0, 'avg_logprob': -0.20275677114293195, 'compression_ratio': 1.7583892617449663, 'no_speech_prob': 0.11562639474868774}, {'id': 31, 'seek': 22336, 'start': 223.36, 'end': 240.04000000000002, 'text': ' my prefix points. So, it says that if I take my prefix points and if I. So, if I. So, these', 'tokens': [50364, 452, 46969, 2793, 13, 407, 11, 309, 1619, 300, 498, 286, 747, 452, 46969, 2793, 293, 498, 286, 13, 407, 11, 498, 286, 13, 407, 11, 613, 51198], 'temperature': 0.0, 'avg_logprob': -0.17786732741764613, 'compression_ratio': 1.6216216216216217, 'no_speech_prob': 0.03507595136761665}, {'id': 32, 'seek': 22336, 'start': 240.04000000000002, 'end': 247.76000000000002, 'text': ' are my these are my prefix points right where x is less than equal to f of x. So, when I', 'tokens': [51198, 366, 452, 613, 366, 452, 46969, 2793, 558, 689, 2031, 307, 1570, 813, 2681, 281, 283, 295, 2031, 13, 407, 11, 562, 286, 51584], 'temperature': 0.0, 'avg_logprob': -0.17786732741764613, 'compression_ratio': 1.6216216216216217, 'no_speech_prob': 0.03507595136761665}, {'id': 33, 'seek': 24776, 'start': 247.79999999999998, 'end': 257.36, 'text': ' apply f I go up the lattice right and for these if I take a join. So, I find their join for this', 'tokens': [50366, 3079, 283, 286, 352, 493, 264, 34011, 558, 293, 337, 613, 498, 286, 747, 257, 3917, 13, 407, 11, 286, 915, 641, 3917, 337, 341, 50844], 'temperature': 0.0, 'avg_logprob': -0.16146577079341096, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.2312181442975998}, {'id': 34, 'seek': 24776, 'start': 257.36, 'end': 270.03999999999996, 'text': ' subset let us say I find the point right then if I take the join of only the fixed points I would', 'tokens': [50844, 25993, 718, 505, 584, 286, 915, 264, 935, 558, 550, 498, 286, 747, 264, 3917, 295, 787, 264, 6806, 2793, 286, 576, 51478], 'temperature': 0.0, 'avg_logprob': -0.16146577079341096, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.2312181442975998}, {'id': 35, 'seek': 27004, 'start': 270.04, 'end': 281.24, 'text': ' end up getting the same point. Do you understand what is going on? So, it says that you look at', 'tokens': [50364, 917, 493, 1242, 264, 912, 935, 13, 1144, 291, 1223, 437, 307, 516, 322, 30, 407, 11, 309, 1619, 300, 291, 574, 412, 50924], 'temperature': 0.0, 'avg_logprob': -0.13695791789463588, 'compression_ratio': 1.451851851851852, 'no_speech_prob': 0.06547248363494873}, {'id': 36, 'seek': 27004, 'start': 281.24, 'end': 289.52000000000004, 'text': ' all the prefix points this is my set of all prefix points if you take their join it essentially will', 'tokens': [50924, 439, 264, 46969, 2793, 341, 307, 452, 992, 295, 439, 46969, 2793, 498, 291, 747, 641, 3917, 309, 4476, 486, 51338], 'temperature': 0.0, 'avg_logprob': -0.13695791789463588, 'compression_ratio': 1.451851851851852, 'no_speech_prob': 0.06547248363494873}, {'id': 37, 'seek': 28952, 'start': 289.52, 'end': 299.91999999999996, 'text': ' be it will coincide with taking the join of only the fixed points. Similarly, is the case', 'tokens': [50364, 312, 309, 486, 13001, 482, 365, 1940, 264, 3917, 295, 787, 264, 6806, 2793, 13, 13157, 11, 307, 264, 1389, 50884], 'temperature': 0.0, 'avg_logprob': -0.15995008746782938, 'compression_ratio': 1.5338983050847457, 'no_speech_prob': 0.0713438019156456}, {'id': 38, 'seek': 28952, 'start': 299.91999999999996, 'end': 313.03999999999996, 'text': ' by duality similarly is the case for the meet with the post fixed points. So, now let us go', 'tokens': [50884, 538, 11848, 507, 14138, 307, 264, 1389, 337, 264, 1677, 365, 264, 2183, 6806, 2793, 13, 407, 11, 586, 718, 505, 352, 51540], 'temperature': 0.0, 'avg_logprob': -0.15995008746782938, 'compression_ratio': 1.5338983050847457, 'no_speech_prob': 0.0713438019156456}, {'id': 39, 'seek': 31304, 'start': 313.04, 'end': 322.40000000000003, 'text': ' back to computing least fixed points. So, first is that. So, essentially what has this mainly', 'tokens': [50364, 646, 281, 15866, 1935, 6806, 2793, 13, 407, 11, 700, 307, 300, 13, 407, 11, 4476, 437, 575, 341, 8704, 50832], 'temperature': 0.0, 'avg_logprob': -0.1690447089377414, 'compression_ratio': 1.7053571428571428, 'no_speech_prob': 0.22224384546279907}, {'id': 40, 'seek': 31304, 'start': 322.40000000000003, 'end': 327.0, 'text': ' established for us it has first. So, these two things are really interesting first it actually', 'tokens': [50832, 7545, 337, 505, 309, 575, 700, 13, 407, 11, 613, 732, 721, 366, 534, 1880, 700, 309, 767, 51062], 'temperature': 0.0, 'avg_logprob': -0.1690447089377414, 'compression_ratio': 1.7053571428571428, 'no_speech_prob': 0.22224384546279907}, {'id': 41, 'seek': 31304, 'start': 327.0, 'end': 335.0, 'text': ' told us that like if I am able to get my data flow facts to work with the complete lattice then I am', 'tokens': [51062, 1907, 505, 300, 411, 498, 286, 669, 1075, 281, 483, 452, 1412, 3095, 9130, 281, 589, 365, 264, 3566, 34011, 550, 286, 669, 51462], 'temperature': 0.0, 'avg_logprob': -0.1690447089377414, 'compression_ratio': 1.7053571428571428, 'no_speech_prob': 0.22224384546279907}, {'id': 42, 'seek': 31304, 'start': 335.0, 'end': 339.96000000000004, 'text': ' sure I will be able to and an order preserving function and my transfer function is an order', 'tokens': [51462, 988, 286, 486, 312, 1075, 281, 293, 364, 1668, 33173, 2445, 293, 452, 5003, 2445, 307, 364, 1668, 51710], 'temperature': 0.0, 'avg_logprob': -0.1690447089377414, 'compression_ratio': 1.7053571428571428, 'no_speech_prob': 0.22224384546279907}, {'id': 43, 'seek': 33996, 'start': 339.96, 'end': 345.35999999999996, 'text': ' preserving function in that case I am surely going to get one solution to my set of equations', 'tokens': [50364, 33173, 2445, 294, 300, 1389, 286, 669, 11468, 516, 281, 483, 472, 3827, 281, 452, 992, 295, 11787, 50634], 'temperature': 0.0, 'avg_logprob': -0.22202933352926504, 'compression_ratio': 1.7327188940092166, 'no_speech_prob': 0.1865682750940323}, {'id': 44, 'seek': 33996, 'start': 345.35999999999996, 'end': 349.88, 'text': ' there are at least going to be at least one solution to this set it will not be the case', 'tokens': [50634, 456, 366, 412, 1935, 516, 281, 312, 412, 1935, 472, 3827, 281, 341, 992, 309, 486, 406, 312, 264, 1389, 50860], 'temperature': 0.0, 'avg_logprob': -0.22202933352926504, 'compression_ratio': 1.7327188940092166, 'no_speech_prob': 0.1865682750940323}, {'id': 45, 'seek': 33996, 'start': 349.88, 'end': 357.35999999999996, 'text': ' of no solutions. Remember what would be same what was a lattice and what was a complete lattice.', 'tokens': [50860, 295, 572, 6547, 13, 5459, 437, 576, 312, 912, 437, 390, 257, 34011, 293, 437, 390, 257, 3566, 34011, 13, 51234], 'temperature': 0.0, 'avg_logprob': -0.22202933352926504, 'compression_ratio': 1.7327188940092166, 'no_speech_prob': 0.1865682750940323}, {'id': 46, 'seek': 33996, 'start': 357.35999999999996, 'end': 369.88, 'text': ' Right. So, even for any subset of elements either finite or infinite has a LUB and a GLB if that', 'tokens': [51234, 1779, 13, 407, 11, 754, 337, 604, 25993, 295, 4959, 2139, 19362, 420, 13785, 575, 257, 441, 23553, 293, 257, 16225, 33, 498, 300, 51860], 'temperature': 0.0, 'avg_logprob': -0.22202933352926504, 'compression_ratio': 1.7327188940092166, 'no_speech_prob': 0.1865682750940323}, {'id': 47, 'seek': 36988, 'start': 369.88, 'end': 377.48, 'text': ' condition is satisfied then it is a complete lattice. So, because my set D may not be a', 'tokens': [50364, 4188, 307, 11239, 550, 309, 307, 257, 3566, 34011, 13, 407, 11, 570, 452, 992, 413, 815, 406, 312, 257, 50744], 'temperature': 0.0, 'avg_logprob': -0.10809361189603806, 'compression_ratio': 1.5114942528735633, 'no_speech_prob': 0.0008417557692155242}, {'id': 48, 'seek': 36988, 'start': 377.48, 'end': 384.0, 'text': ' finite lattice I may sometimes have to even talk about taking meets or joins over infinite subsets.', 'tokens': [50744, 19362, 34011, 286, 815, 2171, 362, 281, 754, 751, 466, 1940, 13961, 420, 24397, 670, 13785, 2090, 1385, 13, 51070], 'temperature': 0.0, 'avg_logprob': -0.10809361189603806, 'compression_ratio': 1.5114942528735633, 'no_speech_prob': 0.0008417557692155242}, {'id': 49, 'seek': 36988, 'start': 384.0, 'end': 394.28, 'text': ' So, now let us start looking at I will again introduce some definition. So,', 'tokens': [51070, 407, 11, 586, 718, 505, 722, 1237, 412, 286, 486, 797, 5366, 512, 7123, 13, 407, 11, 51584], 'temperature': 0.0, 'avg_logprob': -0.10809361189603806, 'compression_ratio': 1.5114942528735633, 'no_speech_prob': 0.0008417557692155242}, {'id': 50, 'seek': 39428, 'start': 394.28, 'end': 403.0, 'text': ' a chain is going to be totally ordered that is by definition. Now there is a notion of a finite', 'tokens': [50364, 257, 5021, 307, 516, 281, 312, 3879, 8866, 300, 307, 538, 7123, 13, 823, 456, 307, 257, 10710, 295, 257, 19362, 50800], 'temperature': 0.0, 'avg_logprob': -0.12344513144544376, 'compression_ratio': 2.0489130434782608, 'no_speech_prob': 0.01850775070488453}, {'id': 51, 'seek': 39428, 'start': 403.0, 'end': 409.08, 'text': ' chain what is a finite chain if the set of elements in that chain are finite then I would', 'tokens': [50800, 5021, 437, 307, 257, 19362, 5021, 498, 264, 992, 295, 4959, 294, 300, 5021, 366, 19362, 550, 286, 576, 51104], 'temperature': 0.0, 'avg_logprob': -0.12344513144544376, 'compression_ratio': 2.0489130434782608, 'no_speech_prob': 0.01850775070488453}, {'id': 52, 'seek': 39428, 'start': 409.08, 'end': 415.03999999999996, 'text': ' refer to as a finite chain. Now there is a notion of something called an ascending chain. So,', 'tokens': [51104, 2864, 281, 382, 257, 19362, 5021, 13, 823, 456, 307, 257, 10710, 295, 746, 1219, 364, 15526, 2029, 5021, 13, 407, 11, 51402], 'temperature': 0.0, 'avg_logprob': -0.12344513144544376, 'compression_ratio': 2.0489130434782608, 'no_speech_prob': 0.01850775070488453}, {'id': 53, 'seek': 39428, 'start': 415.03999999999996, 'end': 419.59999999999997, 'text': ' what is an ascending chain? So, till here when we were talking about chains we were talking about', 'tokens': [51402, 437, 307, 364, 15526, 2029, 5021, 30, 407, 11, 4288, 510, 562, 321, 645, 1417, 466, 12626, 321, 645, 1417, 466, 51630], 'temperature': 0.0, 'avg_logprob': -0.12344513144544376, 'compression_ratio': 2.0489130434782608, 'no_speech_prob': 0.01850775070488453}, {'id': 54, 'seek': 41960, 'start': 419.6, 'end': 431.92, 'text': ' a set. Here we are seeing a sequence of elements. So, a sequence of elements forms an ascending', 'tokens': [50364, 257, 992, 13, 1692, 321, 366, 2577, 257, 8310, 295, 4959, 13, 407, 11, 257, 8310, 295, 4959, 6422, 364, 15526, 2029, 50980], 'temperature': 0.0, 'avg_logprob': -0.13357273431924674, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.15163254737854004}, {'id': 55, 'seek': 41960, 'start': 431.92, 'end': 442.12, 'text': ' chain if I can put those elements in a total ordered form. So, a 1 is less than a 2 then less', 'tokens': [50980, 5021, 498, 286, 393, 829, 729, 4959, 294, 257, 3217, 8866, 1254, 13, 407, 11, 257, 502, 307, 1570, 813, 257, 568, 550, 1570, 51490], 'temperature': 0.0, 'avg_logprob': -0.13357273431924674, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.15163254737854004}, {'id': 56, 'seek': 44212, 'start': 442.12, 'end': 455.12, 'text': ' than a 3 a n then this sequence not the set this sequence a 1 a 2 a 3 a 4 sequence means the order', 'tokens': [50364, 813, 257, 805, 257, 297, 550, 341, 8310, 406, 264, 992, 341, 8310, 257, 502, 257, 568, 257, 805, 257, 1017, 8310, 1355, 264, 1668, 51014], 'temperature': 0.0, 'avg_logprob': -0.1563474072350396, 'compression_ratio': 1.7515527950310559, 'no_speech_prob': 0.027497706934809685}, {'id': 57, 'seek': 44212, 'start': 455.12, 'end': 464.6, 'text': ' is important in this listing. So, this sequence is referred to as an ascending chain. Similarly,', 'tokens': [51014, 307, 1021, 294, 341, 22161, 13, 407, 11, 341, 8310, 307, 10839, 281, 382, 364, 15526, 2029, 5021, 13, 13157, 11, 51488], 'temperature': 0.0, 'avg_logprob': -0.1563474072350396, 'compression_ratio': 1.7515527950310559, 'no_speech_prob': 0.027497706934809685}, {'id': 58, 'seek': 44212, 'start': 464.6, 'end': 468.92, 'text': ' I can define a descending chain what is a descending chain it should be able to put it', 'tokens': [51488, 286, 393, 6964, 257, 40182, 5021, 437, 307, 257, 40182, 5021, 309, 820, 312, 1075, 281, 829, 309, 51704], 'temperature': 0.0, 'avg_logprob': -0.1563474072350396, 'compression_ratio': 1.7515527950310559, 'no_speech_prob': 0.027497706934809685}, {'id': 59, 'seek': 46892, 'start': 468.92, 'end': 476.32, 'text': ' the opposite order and then there is this big definition of something known as if something', 'tokens': [50364, 264, 6182, 1668, 293, 550, 456, 307, 341, 955, 7123, 295, 746, 2570, 382, 498, 746, 50734], 'temperature': 0.0, 'avg_logprob': -0.16525396200326772, 'compression_ratio': 1.9078014184397163, 'no_speech_prob': 0.10357876867055893}, {'id': 60, 'seek': 46892, 'start': 476.32, 'end': 484.40000000000003, 'text': ' ascending chain or descending chain eventually stabilizes. So, we say a chain eventually', 'tokens': [50734, 15526, 2029, 5021, 420, 40182, 5021, 4728, 11652, 5660, 13, 407, 11, 321, 584, 257, 5021, 4728, 51138], 'temperature': 0.0, 'avg_logprob': -0.16525396200326772, 'compression_ratio': 1.9078014184397163, 'no_speech_prob': 0.10357876867055893}, {'id': 61, 'seek': 46892, 'start': 484.40000000000003, 'end': 497.12, 'text': ' stabilizes. So, I say an ascending chain let us say a 1 a 2 a n eventually stabilizes if', 'tokens': [51138, 11652, 5660, 13, 407, 11, 286, 584, 364, 15526, 2029, 5021, 718, 505, 584, 257, 502, 257, 568, 257, 297, 4728, 11652, 5660, 498, 51774], 'temperature': 0.0, 'avg_logprob': -0.16525396200326772, 'compression_ratio': 1.9078014184397163, 'no_speech_prob': 0.10357876867055893}, {'id': 62, 'seek': 49712, 'start': 497.12, 'end': 512.08, 'text': ' there exists some k such that. So, this may even not be finite. So, this may go on forever.', 'tokens': [50364, 456, 8198, 512, 350, 1270, 300, 13, 407, 11, 341, 815, 754, 406, 312, 19362, 13, 407, 11, 341, 815, 352, 322, 5680, 13, 51112], 'temperature': 0.0, 'avg_logprob': -0.20125346488141, 'compression_ratio': 1.4833333333333334, 'no_speech_prob': 0.02157725766301155}, {'id': 63, 'seek': 49712, 'start': 514.0, 'end': 520.24, 'text': ' I can have infinite infinite sequence, but I say that this set will the sequence would', 'tokens': [51208, 286, 393, 362, 13785, 13785, 8310, 11, 457, 286, 584, 300, 341, 992, 486, 264, 8310, 576, 51520], 'temperature': 0.0, 'avg_logprob': -0.20125346488141, 'compression_ratio': 1.4833333333333334, 'no_speech_prob': 0.02157725766301155}, {'id': 64, 'seek': 52024, 'start': 520.24, 'end': 530.6800000000001, 'text': ' eventually stabilize if there exists some k such that a 1 is less than equal to a 2 is less than', 'tokens': [50364, 4728, 31870, 498, 456, 8198, 512, 350, 1270, 300, 257, 502, 307, 1570, 813, 2681, 281, 257, 568, 307, 1570, 813, 50886], 'temperature': 0.0, 'avg_logprob': -0.1646940803527832, 'compression_ratio': 1.2307692307692308, 'no_speech_prob': 0.09242725372314453}, {'id': 65, 'seek': 53068, 'start': 530.68, 'end': 544.16, 'text': ' or equal to a 3 is less than or equal to a 4 goes on till a k and all values after k are the same.', 'tokens': [50364, 420, 2681, 281, 257, 805, 307, 1570, 813, 420, 2681, 281, 257, 1017, 1709, 322, 4288, 257, 350, 293, 439, 4190, 934, 350, 366, 264, 912, 13, 51038], 'temperature': 0.0, 'avg_logprob': -0.1469768796648298, 'compression_ratio': 1.4598540145985401, 'no_speech_prob': 0.014003606513142586}, {'id': 66, 'seek': 53068, 'start': 549.9599999999999, 'end': 556.52, 'text': ' So, it says that it keeps on increasing, but there is some point after which it will just stay there.', 'tokens': [51328, 407, 11, 309, 1619, 300, 309, 5965, 322, 5662, 11, 457, 456, 307, 512, 935, 934, 597, 309, 486, 445, 1754, 456, 13, 51656], 'temperature': 0.0, 'avg_logprob': -0.1469768796648298, 'compression_ratio': 1.4598540145985401, 'no_speech_prob': 0.014003606513142586}, {'id': 67, 'seek': 55652, 'start': 556.52, 'end': 578.16, 'text': ' Right any questions on this? So, now think about the case that if I had this data flow again', 'tokens': [50364, 1779, 604, 1651, 322, 341, 30, 407, 11, 586, 519, 466, 264, 1389, 300, 498, 286, 632, 341, 1412, 3095, 797, 51446], 'temperature': 0.0, 'avg_logprob': -0.23679256439208984, 'compression_ratio': 1.4230769230769231, 'no_speech_prob': 0.010101220570504665}, {'id': 68, 'seek': 55652, 'start': 578.16, 'end': 585.88, 'text': ' remember that algorithm and forget that we had this we had this flag which will mark the end', 'tokens': [51446, 1604, 300, 9284, 293, 2870, 300, 321, 632, 341, 321, 632, 341, 7166, 597, 486, 1491, 264, 917, 51832], 'temperature': 0.0, 'avg_logprob': -0.23679256439208984, 'compression_ratio': 1.4230769230769231, 'no_speech_prob': 0.010101220570504665}, {'id': 69, 'seek': 58588, 'start': 585.88, 'end': 591.72, 'text': ' of termination and we simply collect the sets the values that I get at each program point.', 'tokens': [50364, 295, 1433, 2486, 293, 321, 2935, 2500, 264, 6352, 264, 4190, 300, 286, 483, 412, 1184, 1461, 935, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.15485168993473053, 'compression_ratio': 1.7484662576687116, 'no_speech_prob': 0.007560428697615862}, {'id': 70, 'seek': 58588, 'start': 591.72, 'end': 596.8, 'text': ' I just sample I just collect keep on collecting the values of this program point they will form', 'tokens': [50656, 286, 445, 6889, 286, 445, 2500, 1066, 322, 12510, 264, 4190, 295, 341, 1461, 935, 436, 486, 1254, 50910], 'temperature': 0.0, 'avg_logprob': -0.15485168993473053, 'compression_ratio': 1.7484662576687116, 'no_speech_prob': 0.007560428697615862}, {'id': 71, 'seek': 58588, 'start': 596.8, 'end': 607.8, 'text': ' a first they will form an ascending chain because every time the value will be something more than', 'tokens': [50910, 257, 700, 436, 486, 1254, 364, 15526, 2029, 5021, 570, 633, 565, 264, 2158, 486, 312, 746, 544, 813, 51460], 'temperature': 0.0, 'avg_logprob': -0.15485168993473053, 'compression_ratio': 1.7484662576687116, 'no_speech_prob': 0.007560428697615862}, {'id': 72, 'seek': 60780, 'start': 607.8, 'end': 616.28, 'text': ' what I got previously and after some point when they will keep on seeing the same value again and', 'tokens': [50364, 437, 286, 658, 8046, 293, 934, 512, 935, 562, 436, 486, 1066, 322, 2577, 264, 912, 2158, 797, 293, 50788], 'temperature': 0.0, 'avg_logprob': -0.12296023735633263, 'compression_ratio': 1.6379310344827587, 'no_speech_prob': 0.056458715349435806}, {'id': 73, 'seek': 60780, 'start': 616.28, 'end': 623.0799999999999, 'text': ' again and again and again. So, that computation produces a chain an ascending chain which', 'tokens': [50788, 797, 293, 797, 293, 797, 13, 407, 11, 300, 24903, 14725, 257, 5021, 364, 15526, 2029, 5021, 597, 51128], 'temperature': 0.0, 'avg_logprob': -0.12296023735633263, 'compression_ratio': 1.6379310344827587, 'no_speech_prob': 0.056458715349435806}, {'id': 74, 'seek': 60780, 'start': 623.0799999999999, 'end': 633.9599999999999, 'text': ' eventually stabilizes. So, now this condition is referred to as ACC or ascending chain condition.', 'tokens': [51128, 4728, 11652, 5660, 13, 407, 11, 586, 341, 4188, 307, 10839, 281, 382, 42251, 420, 15526, 2029, 5021, 4188, 13, 51672], 'temperature': 0.0, 'avg_logprob': -0.12296023735633263, 'compression_ratio': 1.6379310344827587, 'no_speech_prob': 0.056458715349435806}, {'id': 75, 'seek': 63396, 'start': 633.96, 'end': 642.96, 'text': ' So, ascending chain condition says that if you have a lattice such that all ascending', 'tokens': [50364, 407, 11, 15526, 2029, 5021, 4188, 1619, 300, 498, 291, 362, 257, 34011, 1270, 300, 439, 15526, 2029, 50814], 'temperature': 0.0, 'avg_logprob': -0.14224532593128292, 'compression_ratio': 1.5913043478260869, 'no_speech_prob': 0.0019233983475714922}, {'id': 76, 'seek': 63396, 'start': 642.96, 'end': 651.0400000000001, 'text': ' chains eventually stabilize. So, it means that if you have some lattice no matter which ascending', 'tokens': [50814, 12626, 4728, 31870, 13, 407, 11, 309, 1355, 300, 498, 291, 362, 512, 34011, 572, 1871, 597, 15526, 2029, 51218], 'temperature': 0.0, 'avg_logprob': -0.14224532593128292, 'compression_ratio': 1.5913043478260869, 'no_speech_prob': 0.0019233983475714922}, {'id': 77, 'seek': 65104, 'start': 651.04, 'end': 666.0, 'text': ' chain I pick up that is surely going to stabilize. So, what does this tell us? So, if I have a lattice', 'tokens': [50364, 5021, 286, 1888, 493, 300, 307, 11468, 516, 281, 31870, 13, 407, 11, 437, 775, 341, 980, 505, 30, 407, 11, 498, 286, 362, 257, 34011, 51112], 'temperature': 0.0, 'avg_logprob': -0.14410716182780717, 'compression_ratio': 1.4264705882352942, 'no_speech_prob': 0.08212428539991379}, {'id': 78, 'seek': 65104, 'start': 666.0, 'end': 674.92, 'text': ' if my lattice D on which I am going to compute my data flow solution if that D is a lattice', 'tokens': [51112, 498, 452, 34011, 413, 322, 597, 286, 669, 516, 281, 14722, 452, 1412, 3095, 3827, 498, 300, 413, 307, 257, 34011, 51558], 'temperature': 0.0, 'avg_logprob': -0.14410716182780717, 'compression_ratio': 1.4264705882352942, 'no_speech_prob': 0.08212428539991379}, {'id': 79, 'seek': 67492, 'start': 674.92, 'end': 683.88, 'text': ' which eventually stabilizes what can I say about the computation? The computation will terminate', 'tokens': [50364, 597, 4728, 11652, 5660, 437, 393, 286, 584, 466, 264, 24903, 30, 440, 24903, 486, 10761, 473, 50812], 'temperature': 0.0, 'avg_logprob': -0.17716652154922485, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.1671203374862671}, {'id': 80, 'seek': 67492, 'start': 683.88, 'end': 689.8, 'text': ' because whenever I see so that flap that I was there was to check about this eventual', 'tokens': [50812, 570, 5699, 286, 536, 370, 300, 30781, 300, 286, 390, 456, 390, 281, 1520, 466, 341, 33160, 51108], 'temperature': 0.0, 'avg_logprob': -0.17716652154922485, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.1671203374862671}, {'id': 81, 'seek': 67492, 'start': 689.8, 'end': 694.92, 'text': ' stabilization. So, if it ever sees that I get two things in the sequence which are the same the loop', 'tokens': [51108, 35476, 13, 407, 11, 498, 309, 1562, 8194, 300, 286, 483, 732, 721, 294, 264, 8310, 597, 366, 264, 912, 264, 6367, 51364], 'temperature': 0.0, 'avg_logprob': -0.17716652154922485, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.1671203374862671}, {'id': 82, 'seek': 69492, 'start': 694.92, 'end': 707.16, 'text': ' will break and will come out. So, now there is this something known as the clean iteration.', 'tokens': [50364, 486, 1821, 293, 486, 808, 484, 13, 407, 11, 586, 456, 307, 341, 746, 2570, 382, 264, 2541, 24784, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.12681400775909424, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.0599471777677536}, {'id': 83, 'seek': 69492, 'start': 707.16, 'end': 712.4399999999999, 'text': ' So, essentially the algorithm that we now essentially have to compute the least fixed', 'tokens': [50976, 407, 11, 4476, 264, 9284, 300, 321, 586, 4476, 362, 281, 14722, 264, 1935, 6806, 51240], 'temperature': 0.0, 'avg_logprob': -0.12681400775909424, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.0599471777677536}, {'id': 84, 'seek': 69492, 'start': 712.4399999999999, 'end': 721.52, 'text': ' point is that you start with the bottom element. So, once so I start with the bottom elements then', 'tokens': [51240, 935, 307, 300, 291, 722, 365, 264, 2767, 4478, 13, 407, 11, 1564, 370, 286, 722, 365, 264, 2767, 4959, 550, 51694], 'temperature': 0.0, 'avg_logprob': -0.12681400775909424, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.0599471777677536}, {'id': 85, 'seek': 72152, 'start': 721.52, 'end': 732.4, 'text': ' I keep on applying F to it while A is not equal to F I keep on going and I keep on reassigning', 'tokens': [50364, 286, 1066, 322, 9275, 479, 281, 309, 1339, 316, 307, 406, 2681, 281, 479, 286, 1066, 322, 516, 293, 286, 1066, 322, 19486, 9676, 50908], 'temperature': 0.0, 'avg_logprob': -0.1480133750221946, 'compression_ratio': 1.3823529411764706, 'no_speech_prob': 0.03959863632917404}, {'id': 86, 'seek': 72152, 'start': 732.4, 'end': 744.12, 'text': ' like F A into A. So, this will always so if my F is a monotonic function then the sequence of', 'tokens': [50908, 411, 479, 316, 666, 316, 13, 407, 11, 341, 486, 1009, 370, 498, 452, 479, 307, 257, 1108, 310, 11630, 2445, 550, 264, 8310, 295, 51494], 'temperature': 0.0, 'avg_logprob': -0.1480133750221946, 'compression_ratio': 1.3823529411764706, 'no_speech_prob': 0.03959863632917404}, {'id': 87, 'seek': 74412, 'start': 744.12, 'end': 753.96, 'text': " A's that I will get here will always form an ascending chain and if that ascending chain", 'tokens': [50364, 316, 311, 300, 286, 486, 483, 510, 486, 1009, 1254, 364, 15526, 2029, 5021, 293, 498, 300, 15526, 2029, 5021, 50856], 'temperature': 0.0, 'avg_logprob': -0.18374313192164643, 'compression_ratio': 1.4453125, 'no_speech_prob': 0.05982659012079239}, {'id': 88, 'seek': 74412, 'start': 753.96, 'end': 763.64, 'text': ' eventually stabilizes and if the lattice on which my if this values A are picked up from a set D', 'tokens': [50856, 4728, 11652, 5660, 293, 498, 264, 34011, 322, 597, 452, 498, 341, 4190, 316, 366, 6183, 493, 490, 257, 992, 413, 51340], 'temperature': 0.0, 'avg_logprob': -0.18374313192164643, 'compression_ratio': 1.4453125, 'no_speech_prob': 0.05982659012079239}, {'id': 89, 'seek': 76364, 'start': 763.64, 'end': 774.84, 'text': ' under some operation such that D satisfies the ACC condition then this loop will sometime on', 'tokens': [50364, 833, 512, 6916, 1270, 300, 413, 44271, 264, 42251, 4188, 550, 341, 6367, 486, 15053, 322, 50924], 'temperature': 0.0, 'avg_logprob': -0.1554417759180069, 'compression_ratio': 1.5080213903743316, 'no_speech_prob': 0.03960194066166878}, {'id': 90, 'seek': 76364, 'start': 774.84, 'end': 781.4399999999999, 'text': ' the other break because it whenever it eventually stabilizes will have A is equal to F A and I', 'tokens': [50924, 264, 661, 1821, 570, 309, 5699, 309, 4728, 11652, 5660, 486, 362, 316, 307, 2681, 281, 479, 316, 293, 286, 51254], 'temperature': 0.0, 'avg_logprob': -0.1554417759180069, 'compression_ratio': 1.5080213903743316, 'no_speech_prob': 0.03960194066166878}, {'id': 91, 'seek': 76364, 'start': 781.4399999999999, 'end': 789.84, 'text': ' will be able to compute the least fixed point. So, clean iteration says that if you start with', 'tokens': [51254, 486, 312, 1075, 281, 14722, 264, 1935, 6806, 935, 13, 407, 11, 2541, 24784, 1619, 300, 498, 291, 722, 365, 51674], 'temperature': 0.0, 'avg_logprob': -0.1554417759180069, 'compression_ratio': 1.5080213903743316, 'no_speech_prob': 0.03960194066166878}, {'id': 92, 'seek': 78984, 'start': 789.84, 'end': 796.72, 'text': ' your bottom element and keep on applying a monotonic function you will always hit the', 'tokens': [50364, 428, 2767, 4478, 293, 1066, 322, 9275, 257, 1108, 310, 11630, 2445, 291, 486, 1009, 2045, 264, 50708], 'temperature': 0.0, 'avg_logprob': -0.19834333477598248, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.08731619268655777}, {'id': 93, 'seek': 78984, 'start': 796.72, 'end': 814.76, 'text': ' least fixed point. Sorry come again no need not be no need not be why is monotonicity important', 'tokens': [50708, 1935, 6806, 935, 13, 4919, 808, 797, 572, 643, 406, 312, 572, 643, 406, 312, 983, 307, 1108, 310, 11630, 507, 1021, 51610], 'temperature': 0.0, 'avg_logprob': -0.19834333477598248, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.08731619268655777}, {'id': 94, 'seek': 78984, 'start': 814.76, 'end': 819.5600000000001, 'text': ' otherwise I will not have an ascending chain. So, ascending chain condition says that given', 'tokens': [51610, 5911, 286, 486, 406, 362, 364, 15526, 2029, 5021, 13, 407, 11, 15526, 2029, 5021, 4188, 1619, 300, 2212, 51850], 'temperature': 0.0, 'avg_logprob': -0.19834333477598248, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.08731619268655777}, {'id': 95, 'seek': 81956, 'start': 819.56, 'end': 828.8, 'text': ' an ascending chain so essentially let us go back maybe we. So, essentially what was the thing that', 'tokens': [50364, 364, 15526, 2029, 5021, 370, 4476, 718, 505, 352, 646, 1310, 321, 13, 407, 11, 4476, 437, 390, 264, 551, 300, 50826], 'temperature': 0.0, 'avg_logprob': -0.1569413457598005, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.0032627624459564686}, {'id': 96, 'seek': 81956, 'start': 828.8, 'end': 835.28, 'text': ' this notion of an ascending chain was a definition right this was a definition we said that a sequence', 'tokens': [50826, 341, 10710, 295, 364, 15526, 2029, 5021, 390, 257, 7123, 558, 341, 390, 257, 7123, 321, 848, 300, 257, 8310, 51150], 'temperature': 0.0, 'avg_logprob': -0.1569413457598005, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.0032627624459564686}, {'id': 97, 'seek': 81956, 'start': 835.28, 'end': 844.04, 'text': ' of values from D such that the values can be arranged in this form is referred to as an ascending', 'tokens': [51150, 295, 4190, 490, 413, 1270, 300, 264, 4190, 393, 312, 18721, 294, 341, 1254, 307, 10839, 281, 382, 364, 15526, 2029, 51588], 'temperature': 0.0, 'avg_logprob': -0.1569413457598005, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.0032627624459564686}, {'id': 98, 'seek': 84404, 'start': 844.04, 'end': 860.56, 'text': ' chain this was just a definition any change the values are in total order yes a chain is a set', 'tokens': [50364, 5021, 341, 390, 445, 257, 7123, 604, 1319, 264, 4190, 366, 294, 3217, 1668, 2086, 257, 5021, 307, 257, 992, 51190], 'temperature': 0.0, 'avg_logprob': -0.20395157734553018, 'compression_ratio': 1.236842105263158, 'no_speech_prob': 0.47273626923561096}, {'id': 99, 'seek': 86056, 'start': 860.56, 'end': 875.16, 'text': ' and ascending chain is a sequence they are not actually the same thing yes yes yes yes so we', 'tokens': [50364, 293, 15526, 2029, 5021, 307, 257, 8310, 436, 366, 406, 767, 264, 912, 551, 2086, 2086, 2086, 2086, 370, 321, 51094], 'temperature': 0.0, 'avg_logprob': -0.14003835004918716, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.10624270886182785}, {'id': 100, 'seek': 86056, 'start': 875.16, 'end': 879.16, 'text': ' have broken down the definition into multiple definition so that you can follow a logistic', 'tokens': [51094, 362, 5463, 760, 264, 7123, 666, 3866, 7123, 370, 300, 291, 393, 1524, 257, 3565, 3142, 51294], 'temperature': 0.0, 'avg_logprob': -0.14003835004918716, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.10624270886182785}, {'id': 101, 'seek': 86056, 'start': 879.16, 'end': 888.0799999999999, 'text': ' logical order that is all. So, there is a set and I sort that set that sorted set is the ascending', 'tokens': [51294, 14978, 1668, 300, 307, 439, 13, 407, 11, 456, 307, 257, 992, 293, 286, 1333, 300, 992, 300, 25462, 992, 307, 264, 15526, 2029, 51740], 'temperature': 0.0, 'avg_logprob': -0.14003835004918716, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.10624270886182785}, {'id': 102, 'seek': 88808, 'start': 888.08, 'end': 893.5600000000001, 'text': ' chain right so if I sort it in the increasing order that is an ascending chain if I sort it', 'tokens': [50364, 5021, 558, 370, 498, 286, 1333, 309, 294, 264, 5662, 1668, 300, 307, 364, 15526, 2029, 5021, 498, 286, 1333, 309, 50638], 'temperature': 0.0, 'avg_logprob': -0.12378743051112383, 'compression_ratio': 2.235294117647059, 'no_speech_prob': 0.19620902836322784}, {'id': 103, 'seek': 88808, 'start': 893.5600000000001, 'end': 900.36, 'text': ' the decreasing order that becomes a descending chain for the same chain right and then I would', 'tokens': [50638, 264, 23223, 1668, 300, 3643, 257, 40182, 5021, 337, 264, 912, 5021, 558, 293, 550, 286, 576, 50978], 'temperature': 0.0, 'avg_logprob': -0.12378743051112383, 'compression_ratio': 2.235294117647059, 'no_speech_prob': 0.19620902836322784}, {'id': 104, 'seek': 88808, 'start': 900.36, 'end': 906.72, 'text': ' I will pick an ascending chain and I will ask if that ascending chain eventually stabilizes if', 'tokens': [50978, 286, 486, 1888, 364, 15526, 2029, 5021, 293, 286, 486, 1029, 498, 300, 15526, 2029, 5021, 4728, 11652, 5660, 498, 51296], 'temperature': 0.0, 'avg_logprob': -0.12378743051112383, 'compression_ratio': 2.235294117647059, 'no_speech_prob': 0.19620902836322784}, {'id': 105, 'seek': 88808, 'start': 906.72, 'end': 913.9200000000001, 'text': ' the ascending chain eventually stabilizes then I would say so that means that there is some finite', 'tokens': [51296, 264, 15526, 2029, 5021, 4728, 11652, 5660, 550, 286, 576, 584, 370, 300, 1355, 300, 456, 307, 512, 19362, 51656], 'temperature': 0.0, 'avg_logprob': -0.12378743051112383, 'compression_ratio': 2.235294117647059, 'no_speech_prob': 0.19620902836322784}, {'id': 106, 'seek': 91392, 'start': 913.92, 'end': 920.16, 'text': ' constant k like so after a finite number of like visiting a finite number of elements even in that', 'tokens': [50364, 5754, 350, 411, 370, 934, 257, 19362, 1230, 295, 411, 11700, 257, 19362, 1230, 295, 4959, 754, 294, 300, 50676], 'temperature': 0.0, 'avg_logprob': -0.10659733552199144, 'compression_ratio': 1.7590361445783131, 'no_speech_prob': 0.3833716809749603}, {'id': 107, 'seek': 91392, 'start': 920.16, 'end': 934.8, 'text': ' infinite sequence I will be able to get values which start repeating that is one way of saying', 'tokens': [50676, 13785, 8310, 286, 486, 312, 1075, 281, 483, 4190, 597, 722, 18617, 300, 307, 472, 636, 295, 1566, 51408], 'temperature': 0.0, 'avg_logprob': -0.10659733552199144, 'compression_ratio': 1.7590361445783131, 'no_speech_prob': 0.3833716809749603}, {'id': 108, 'seek': 91392, 'start': 934.8, 'end': 941.64, 'text': ' this actually right the height remains finite so in that case there is no other way to go no other', 'tokens': [51408, 341, 767, 558, 264, 6681, 7023, 19362, 370, 294, 300, 1389, 456, 307, 572, 661, 636, 281, 352, 572, 661, 51750], 'temperature': 0.0, 'avg_logprob': -0.10659733552199144, 'compression_ratio': 1.7590361445783131, 'no_speech_prob': 0.3833716809749603}, {'id': 109, 'seek': 94164, 'start': 941.64, 'end': 946.48, 'text': ' place to go so it has to this thing but right this particular definition does not even assume', 'tokens': [50364, 1081, 281, 352, 370, 309, 575, 281, 341, 551, 457, 558, 341, 1729, 7123, 775, 406, 754, 6552, 50606], 'temperature': 0.0, 'avg_logprob': -0.1232006129096536, 'compression_ratio': 2.0565217391304347, 'no_speech_prob': 0.06555067002773285}, {'id': 110, 'seek': 94164, 'start': 946.48, 'end': 951.76, 'text': ' that this particular definition does not assume anything at all this guy this guy just says so', 'tokens': [50606, 300, 341, 1729, 7123, 775, 406, 6552, 1340, 412, 439, 341, 2146, 341, 2146, 445, 1619, 370, 50870], 'temperature': 0.0, 'avg_logprob': -0.1232006129096536, 'compression_ratio': 2.0565217391304347, 'no_speech_prob': 0.06555067002773285}, {'id': 111, 'seek': 94164, 'start': 951.76, 'end': 956.04, 'text': ' this is still a definition right these guys are why it happens in the R lattice is a different', 'tokens': [50870, 341, 307, 920, 257, 7123, 558, 613, 1074, 366, 983, 309, 2314, 294, 264, 497, 34011, 307, 257, 819, 51084], 'temperature': 0.0, 'avg_logprob': -0.1232006129096536, 'compression_ratio': 2.0565217391304347, 'no_speech_prob': 0.06555067002773285}, {'id': 112, 'seek': 94164, 'start': 956.04, 'end': 961.96, 'text': ' matter but right now this is just a definition right so I am just trying to define what does', 'tokens': [51084, 1871, 457, 558, 586, 341, 307, 445, 257, 7123, 558, 370, 286, 669, 445, 1382, 281, 6964, 437, 775, 51380], 'temperature': 0.0, 'avg_logprob': -0.1232006129096536, 'compression_ratio': 2.0565217391304347, 'no_speech_prob': 0.06555067002773285}, {'id': 113, 'seek': 94164, 'start': 961.96, 'end': 969.4, 'text': ' eventual stabilization mean right so it I will say that an ascending chain eventually stabilizes', 'tokens': [51380, 33160, 35476, 914, 558, 370, 309, 286, 486, 584, 300, 364, 15526, 2029, 5021, 4728, 11652, 5660, 51752], 'temperature': 0.0, 'avg_logprob': -0.1232006129096536, 'compression_ratio': 2.0565217391304347, 'no_speech_prob': 0.06555067002773285}, {'id': 114, 'seek': 96940, 'start': 969.4, 'end': 977.0799999999999, 'text': ' if after a after visiting of a finite number of elements in that sequence rest of the elements', 'tokens': [50364, 498, 934, 257, 934, 11700, 295, 257, 19362, 1230, 295, 4959, 294, 300, 8310, 1472, 295, 264, 4959, 50748], 'temperature': 0.0, 'avg_logprob': -0.15523979777381533, 'compression_ratio': 1.7904761904761906, 'no_speech_prob': 0.023676138371229172}, {'id': 115, 'seek': 96940, 'start': 977.0799999999999, 'end': 983.76, 'text': ' are just repetitions that is what I if that happens then I will say that this particular', 'tokens': [50748, 366, 445, 13645, 2451, 300, 307, 437, 286, 498, 300, 2314, 550, 286, 486, 584, 300, 341, 1729, 51082], 'temperature': 0.0, 'avg_logprob': -0.15523979777381533, 'compression_ratio': 1.7904761904761906, 'no_speech_prob': 0.023676138371229172}, {'id': 116, 'seek': 96940, 'start': 983.76, 'end': 988.24, 'text': ' ascending chain eventually stabilizes I am just defining it why it happens for all actors is a', 'tokens': [51082, 15526, 2029, 5021, 4728, 11652, 5660, 286, 669, 445, 17827, 309, 983, 309, 2314, 337, 439, 10037, 307, 257, 51306], 'temperature': 0.0, 'avg_logprob': -0.15523979777381533, 'compression_ratio': 1.7904761904761906, 'no_speech_prob': 0.023676138371229172}, {'id': 117, 'seek': 96940, 'start': 988.24, 'end': 995.6, 'text': ' different matter but right now we are just defining it and then we define the notion of ascending', 'tokens': [51306, 819, 1871, 457, 558, 586, 321, 366, 445, 17827, 309, 293, 550, 321, 6964, 264, 10710, 295, 15526, 2029, 51674], 'temperature': 0.0, 'avg_logprob': -0.15523979777381533, 'compression_ratio': 1.7904761904761906, 'no_speech_prob': 0.023676138371229172}, {'id': 118, 'seek': 99560, 'start': 995.6, 'end': 1002.4, 'text': ' chain condition this is also a definition right so I am saying that if there is a lattice such', 'tokens': [50364, 5021, 4188, 341, 307, 611, 257, 7123, 558, 370, 286, 669, 1566, 300, 498, 456, 307, 257, 34011, 1270, 50704], 'temperature': 0.0, 'avg_logprob': -0.10533287467026128, 'compression_ratio': 1.9230769230769231, 'no_speech_prob': 0.17707021534442902}, {'id': 119, 'seek': 99560, 'start': 1002.4, 'end': 1006.84, 'text': ' that all ascending chains no matter which ascending chain I pick from the lattice if', 'tokens': [50704, 300, 439, 15526, 2029, 12626, 572, 1871, 597, 15526, 2029, 5021, 286, 1888, 490, 264, 34011, 498, 50926], 'temperature': 0.0, 'avg_logprob': -0.10533287467026128, 'compression_ratio': 1.9230769230769231, 'no_speech_prob': 0.17707021534442902}, {'id': 120, 'seek': 99560, 'start': 1006.84, 'end': 1013.88, 'text': ' that surely stabilizes then I would say that the lattice satisfies the ascending chain condition', 'tokens': [50926, 300, 11468, 11652, 5660, 550, 286, 576, 584, 300, 264, 34011, 44271, 264, 15526, 2029, 5021, 4188, 51278], 'temperature': 0.0, 'avg_logprob': -0.10533287467026128, 'compression_ratio': 1.9230769230769231, 'no_speech_prob': 0.17707021534442902}, {'id': 121, 'seek': 99560, 'start': 1013.88, 'end': 1019.96, 'text': ' again a definition there is again I am not really relating it to what happens to our lattice these', 'tokens': [51278, 797, 257, 7123, 456, 307, 797, 286, 669, 406, 534, 23968, 309, 281, 437, 2314, 281, 527, 34011, 613, 51582], 'temperature': 0.0, 'avg_logprob': -0.10533287467026128, 'compression_ratio': 1.9230769230769231, 'no_speech_prob': 0.17707021534442902}, {'id': 122, 'seek': 101996, 'start': 1019.96, 'end': 1036.8, 'text': ' are simply definitions right now okay so right if 3 gives 2 f 4 is 3 no so just the function is', 'tokens': [50364, 366, 2935, 21988, 558, 586, 1392, 370, 558, 498, 805, 2709, 568, 283, 1017, 307, 805, 572, 370, 445, 264, 2445, 307, 51206], 'temperature': 0.0, 'avg_logprob': -0.2213525564774223, 'compression_ratio': 1.575, 'no_speech_prob': 0.15023325383663177}, {'id': 123, 'seek': 101996, 'start': 1036.8, 'end': 1043.72, 'text': ' not enough you have to define the function on what lattice what is the lattice lattice is the', 'tokens': [51206, 406, 1547, 291, 362, 281, 6964, 264, 2445, 322, 437, 34011, 437, 307, 264, 34011, 34011, 307, 264, 51552], 'temperature': 0.0, 'avg_logprob': -0.2213525564774223, 'compression_ratio': 1.575, 'no_speech_prob': 0.15023325383663177}, {'id': 124, 'seek': 104372, 'start': 1043.72, 'end': 1059.28, 'text': ' set of integers on less than equal to okay okay no no you have to say it for all elements in I', 'tokens': [50364, 992, 295, 41674, 322, 1570, 813, 2681, 281, 1392, 1392, 572, 572, 291, 362, 281, 584, 309, 337, 439, 4959, 294, 286, 51142], 'temperature': 0.0, 'avg_logprob': -0.2717325687408447, 'compression_ratio': 1.1898734177215189, 'no_speech_prob': 0.6947197318077087}, {'id': 125, 'seek': 105928, 'start': 1059.28, 'end': 1076.52, 'text': ' okay okay okay so so like people said right like plus with 2 that is going to be a monotonic', 'tokens': [50364, 1392, 1392, 1392, 370, 370, 411, 561, 848, 558, 411, 1804, 365, 568, 300, 307, 516, 281, 312, 257, 1108, 310, 11630, 51226], 'temperature': 0.0, 'avg_logprob': -0.1692880124461894, 'compression_ratio': 1.4427480916030535, 'no_speech_prob': 0.10038695484399796}, {'id': 126, 'seek': 105928, 'start': 1076.52, 'end': 1083.0, 'text': ' function maybe I am missing a lot of things you start with so let us draw the lattice so we have', 'tokens': [51226, 2445, 1310, 286, 669, 5361, 257, 688, 295, 721, 291, 722, 365, 370, 718, 505, 2642, 264, 34011, 370, 321, 362, 51550], 'temperature': 0.0, 'avg_logprob': -0.1692880124461894, 'compression_ratio': 1.4427480916030535, 'no_speech_prob': 0.10038695484399796}, {'id': 127, 'seek': 108300, 'start': 1083.0, 'end': 1097.36, 'text': ' 2 then we have 3 and then you have 4 okay now what and how do they move a 3 is 2 and f 4 is', 'tokens': [50364, 568, 550, 321, 362, 805, 293, 550, 291, 362, 1017, 1392, 586, 437, 293, 577, 360, 436, 1286, 257, 805, 307, 568, 293, 283, 1017, 307, 51082], 'temperature': 0.0, 'avg_logprob': -0.14683265869434065, 'compression_ratio': 1.5847457627118644, 'no_speech_prob': 0.25604182481765747}, {'id': 128, 'seek': 108300, 'start': 1097.36, 'end': 1107.6, 'text': ' like this okay so now on this function this is not that this does not form an no so essentially', 'tokens': [51082, 411, 341, 1392, 370, 586, 322, 341, 2445, 341, 307, 406, 300, 341, 775, 406, 1254, 364, 572, 370, 4476, 51594], 'temperature': 0.0, 'avg_logprob': -0.14683265869434065, 'compression_ratio': 1.5847457627118644, 'no_speech_prob': 0.25604182481765747}, {'id': 129, 'seek': 110760, 'start': 1107.6, 'end': 1116.32, 'text': ' there is an ascending chain which is 2 3 4 is an ascending chain okay so now what for all points', 'tokens': [50364, 456, 307, 364, 15526, 2029, 5021, 597, 307, 568, 805, 1017, 307, 364, 15526, 2029, 5021, 1392, 370, 586, 437, 337, 439, 2793, 50800], 'temperature': 0.0, 'avg_logprob': -0.11832878112792969, 'compression_ratio': 1.75625, 'no_speech_prob': 0.07546970248222351}, {'id': 130, 'seek': 110760, 'start': 1116.32, 'end': 1123.04, 'text': ' that is the important part no so what does it mean it should be that if 2 is less than 3 it', 'tokens': [50800, 300, 307, 264, 1021, 644, 572, 370, 437, 775, 309, 914, 309, 820, 312, 300, 498, 568, 307, 1570, 813, 805, 309, 51136], 'temperature': 0.0, 'avg_logprob': -0.11832878112792969, 'compression_ratio': 1.75625, 'no_speech_prob': 0.07546970248222351}, {'id': 131, 'seek': 110760, 'start': 1123.04, 'end': 1131.52, 'text': ' implies that f 2 should be less than equal to f 3 right so is that happening for your f 2 is', 'tokens': [51136, 18779, 300, 283, 568, 820, 312, 1570, 813, 2681, 281, 283, 805, 558, 370, 307, 300, 2737, 337, 428, 283, 568, 307, 51560], 'temperature': 0.0, 'avg_logprob': -0.11832878112792969, 'compression_ratio': 1.75625, 'no_speech_prob': 0.07546970248222351}, {'id': 132, 'seek': 113152, 'start': 1131.52, 'end': 1142.6399999999999, 'text': ' not even defined so the f 2 is 3 no your f 2 is it is 1 no you wanted it to be 1 so does it satisfy', 'tokens': [50364, 406, 754, 7642, 370, 264, 283, 568, 307, 805, 572, 428, 283, 568, 307, 309, 307, 502, 572, 291, 1415, 309, 281, 312, 502, 370, 775, 309, 19319, 50920], 'temperature': 0.0, 'avg_logprob': -0.15597128045969996, 'compression_ratio': 1.6065573770491803, 'no_speech_prob': 0.3335469365119934}, {'id': 133, 'seek': 113152, 'start': 1142.6399999999999, 'end': 1151.68, 'text': ' this you check so if 2 is less than 3 f 2 is less than f 3 okay you are getting one point lesser', 'tokens': [50920, 341, 291, 1520, 370, 498, 568, 307, 1570, 813, 805, 283, 568, 307, 1570, 813, 283, 805, 1392, 291, 366, 1242, 472, 935, 22043, 51372], 'temperature': 0.0, 'avg_logprob': -0.15597128045969996, 'compression_ratio': 1.6065573770491803, 'no_speech_prob': 0.3335469365119934}, {'id': 134, 'seek': 115168, 'start': 1151.68, 'end': 1165.88, 'text': ' so you are doing a minus 1 basically how fine yes no but remember where did I start start off', 'tokens': [50364, 370, 291, 366, 884, 257, 3175, 502, 1936, 577, 2489, 2086, 572, 457, 1604, 689, 630, 286, 722, 722, 766, 51074], 'temperature': 0.0, 'avg_logprob': -0.18134380155994045, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.13601244986057281}, {'id': 135, 'seek': 115168, 'start': 1165.88, 'end': 1176.3200000000002, 'text': ' with you start with bottom element that is important so very good point really good point', 'tokens': [51074, 365, 291, 722, 365, 2767, 4478, 300, 307, 1021, 370, 588, 665, 935, 534, 665, 935, 51596], 'temperature': 0.0, 'avg_logprob': -0.18134380155994045, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.13601244986057281}, {'id': 136, 'seek': 115168, 'start': 1176.3200000000002, 'end': 1180.68, 'text': ' took me some time to understand what you are saying so yes if you start with arbitrary points', 'tokens': [51596, 1890, 385, 512, 565, 281, 1223, 437, 291, 366, 1566, 370, 2086, 498, 291, 722, 365, 23211, 2793, 51814], 'temperature': 0.0, 'avg_logprob': -0.18134380155994045, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.13601244986057281}, {'id': 137, 'seek': 118068, 'start': 1180.68, 'end': 1187.96, 'text': ' it does not guarantee anything at all think about your case like data flow analysis I set', 'tokens': [50364, 309, 775, 406, 10815, 1340, 412, 439, 519, 466, 428, 1389, 411, 1412, 3095, 5215, 286, 992, 50728], 'temperature': 0.0, 'avg_logprob': -0.21582654806283805, 'compression_ratio': 1.7311320754716981, 'no_speech_prob': 0.0236298106610775}, {'id': 138, 'seek': 118068, 'start': 1187.96, 'end': 1192.44, 'text': ' this sets to arbitrary values and I start my computation do you think you will reach the final', 'tokens': [50728, 341, 6352, 281, 23211, 4190, 293, 286, 722, 452, 24903, 360, 291, 519, 291, 486, 2524, 264, 2572, 50952], 'temperature': 0.0, 'avg_logprob': -0.21582654806283805, 'compression_ratio': 1.7311320754716981, 'no_speech_prob': 0.0236298106610775}, {'id': 139, 'seek': 118068, 'start': 1192.44, 'end': 1201.04, 'text': ' solution right so the initialization is as important right that is why we every algorithm', 'tokens': [50952, 3827, 558, 370, 264, 5883, 2144, 307, 382, 1021, 558, 300, 307, 983, 321, 633, 9284, 51382], 'temperature': 0.0, 'avg_logprob': -0.21582654806283805, 'compression_ratio': 1.7311320754716981, 'no_speech_prob': 0.0236298106610775}, {'id': 140, 'seek': 118068, 'start': 1201.04, 'end': 1204.72, 'text': ' we mentioned initialization initialization in fact yesterday for a long time we did not even', 'tokens': [51382, 321, 2835, 5883, 2144, 5883, 2144, 294, 1186, 5186, 337, 257, 938, 565, 321, 630, 406, 754, 51566], 'temperature': 0.0, 'avg_logprob': -0.21582654806283805, 'compression_ratio': 1.7311320754716981, 'no_speech_prob': 0.0236298106610775}, {'id': 141, 'seek': 120472, 'start': 1204.72, 'end': 1213.44, 'text': ' say how to initialize yeah no he is saying it is there okay he is saying it is a set of everything', 'tokens': [50364, 584, 577, 281, 5883, 1125, 1338, 572, 415, 307, 1566, 309, 307, 456, 1392, 415, 307, 1566, 309, 307, 257, 992, 295, 1203, 50800], 'temperature': 0.0, 'avg_logprob': -0.19402260099138532, 'compression_ratio': 1.7650602409638554, 'no_speech_prob': 0.16862602531909943}, {'id': 142, 'seek': 120472, 'start': 1213.44, 'end': 1224.28, 'text': ' right so if you start with arbitrary points I do not know what happens nobody knows what happens', 'tokens': [50800, 558, 370, 498, 291, 722, 365, 23211, 2793, 286, 360, 406, 458, 437, 2314, 5079, 3255, 437, 2314, 51342], 'temperature': 0.0, 'avg_logprob': -0.19402260099138532, 'compression_ratio': 1.7650602409638554, 'no_speech_prob': 0.16862602531909943}, {'id': 143, 'seek': 120472, 'start': 1224.28, 'end': 1230.96, 'text': ' it only says that if you start with the bottom element I can tell you it will lead each the least', 'tokens': [51342, 309, 787, 1619, 300, 498, 291, 722, 365, 264, 2767, 4478, 286, 393, 980, 291, 309, 486, 1477, 1184, 264, 1935, 51676], 'temperature': 0.0, 'avg_logprob': -0.19402260099138532, 'compression_ratio': 1.7650602409638554, 'no_speech_prob': 0.16862602531909943}, {'id': 144, 'seek': 123096, 'start': 1230.96, 'end': 1242.4, 'text': ' fixed point okay so when is it guaranteed to terminate so if I have a if I have a lattice', 'tokens': [50364, 6806, 935, 1392, 370, 562, 307, 309, 18031, 281, 10761, 473, 370, 498, 286, 362, 257, 498, 286, 362, 257, 34011, 50936], 'temperature': 0.0, 'avg_logprob': -0.14835923368280585, 'compression_ratio': 1.4427480916030535, 'no_speech_prob': 0.03601424768567085}, {'id': 145, 'seek': 123096, 'start': 1242.4, 'end': 1254.64, 'text': ' which satisfies the ACC condition that particular with a monotonic function then that should surely', 'tokens': [50936, 597, 44271, 264, 42251, 4188, 300, 1729, 365, 257, 1108, 310, 11630, 2445, 550, 300, 820, 11468, 51548], 'temperature': 0.0, 'avg_logprob': -0.14835923368280585, 'compression_ratio': 1.4427480916030535, 'no_speech_prob': 0.03601424768567085}, {'id': 146, 'seek': 125464, 'start': 1254.64, 'end': 1264.1200000000001, 'text': ' terminate right because and then the question is that where does it terminate so that will', 'tokens': [50364, 10761, 473, 558, 570, 293, 550, 264, 1168, 307, 300, 689, 775, 309, 10761, 473, 370, 300, 486, 50838], 'temperature': 0.0, 'avg_logprob': -0.12271417890276227, 'compression_ratio': 1.5780346820809248, 'no_speech_prob': 0.13261628150939941}, {'id': 147, 'seek': 125464, 'start': 1264.1200000000001, 'end': 1274.24, 'text': ' always terminate at the LFP the least fixed point so in general so essentially this is the', 'tokens': [50838, 1009, 10761, 473, 412, 264, 441, 45882, 264, 1935, 6806, 935, 370, 294, 2674, 370, 4476, 341, 307, 264, 51344], 'temperature': 0.0, 'avg_logprob': -0.12271417890276227, 'compression_ratio': 1.5780346820809248, 'no_speech_prob': 0.13261628150939941}, {'id': 148, 'seek': 125464, 'start': 1274.24, 'end': 1282.1200000000001, 'text': ' like this is the final result that on a complete lattice which satisfies ACC with monotonic', 'tokens': [51344, 411, 341, 307, 264, 2572, 1874, 300, 322, 257, 3566, 34011, 597, 44271, 42251, 365, 1108, 310, 11630, 51738], 'temperature': 0.0, 'avg_logprob': -0.12271417890276227, 'compression_ratio': 1.5780346820809248, 'no_speech_prob': 0.13261628150939941}, {'id': 149, 'seek': 128212, 'start': 1282.12, 'end': 1288.9599999999998, 'text': ' cancer functions the LFP or the MFP whichever we were looking at the bottom semi-lattice or', 'tokens': [50364, 5592, 6828, 264, 441, 45882, 420, 264, 376, 45882, 24123, 321, 645, 1237, 412, 264, 2767, 12909, 12, 75, 1591, 573, 420, 50706], 'temperature': 0.0, 'avg_logprob': -0.20001122191712095, 'compression_ratio': 1.6406926406926408, 'no_speech_prob': 0.0756664127111435}, {'id': 150, 'seek': 128212, 'start': 1288.9599999999998, 'end': 1293.8, 'text': ' the upper semi-lattice the maximum fixed point or the least fixed point whatever you want essentially', 'tokens': [50706, 264, 6597, 12909, 12, 75, 1591, 573, 264, 6674, 6806, 935, 420, 264, 1935, 6806, 935, 2035, 291, 528, 4476, 50948], 'temperature': 0.0, 'avg_logprob': -0.20001122191712095, 'compression_ratio': 1.6406926406926408, 'no_speech_prob': 0.0756664127111435}, {'id': 151, 'seek': 128212, 'start': 1293.8, 'end': 1300.84, 'text': ' it this exists and is computable because I just gave you an algorithm to compute it the clean', 'tokens': [50948, 309, 341, 8198, 293, 307, 2807, 712, 570, 286, 445, 2729, 291, 364, 9284, 281, 14722, 309, 264, 2541, 51300], 'temperature': 0.0, 'avg_logprob': -0.20001122191712095, 'compression_ratio': 1.6406926406926408, 'no_speech_prob': 0.0756664127111435}, {'id': 152, 'seek': 128212, 'start': 1300.84, 'end': 1311.8799999999999, 'text': " iteration right so that is why this whole business works I am don't get confused with MFP I", 'tokens': [51300, 24784, 558, 370, 300, 307, 983, 341, 1379, 1606, 1985, 286, 669, 500, 380, 483, 9019, 365, 376, 45882, 286, 51852], 'temperature': 0.0, 'avg_logprob': -0.20001122191712095, 'compression_ratio': 1.6406926406926408, 'no_speech_prob': 0.0756664127111435}, {'id': 153, 'seek': 131188, 'start': 1311.88, 'end': 1317.24, 'text': ' should not have written MFP I mean we are working with joins and so we are we will talk', 'tokens': [50364, 820, 406, 362, 3720, 376, 45882, 286, 914, 321, 366, 1364, 365, 24397, 293, 370, 321, 366, 321, 486, 751, 50632], 'temperature': 0.0, 'avg_logprob': -0.14754098799170517, 'compression_ratio': 1.6860986547085202, 'no_speech_prob': 0.0006346922600641847}, {'id': 154, 'seek': 131188, 'start': 1317.24, 'end': 1324.6000000000001, 'text': ' about least fixed points not about maximum fixed points so in general the whole structure looks', 'tokens': [50632, 466, 1935, 6806, 2793, 406, 466, 6674, 6806, 2793, 370, 294, 2674, 264, 1379, 3877, 1542, 51000], 'temperature': 0.0, 'avg_logprob': -0.14754098799170517, 'compression_ratio': 1.6860986547085202, 'no_speech_prob': 0.0006346922600641847}, {'id': 155, 'seek': 131188, 'start': 1324.6000000000001, 'end': 1333.1200000000001, 'text': ' like something like this so essentially it says that if I start with my bottom element and I keep', 'tokens': [51000, 411, 746, 411, 341, 370, 4476, 309, 1619, 300, 498, 286, 722, 365, 452, 2767, 4478, 293, 286, 1066, 51426], 'temperature': 0.0, 'avg_logprob': -0.14754098799170517, 'compression_ratio': 1.6860986547085202, 'no_speech_prob': 0.0006346922600641847}, {'id': 156, 'seek': 131188, 'start': 1333.1200000000001, 'end': 1341.2800000000002, 'text': ' on applying my function on that bottom element I will keep on getting values which are greater', 'tokens': [51426, 322, 9275, 452, 2445, 322, 300, 2767, 4478, 286, 486, 1066, 322, 1242, 4190, 597, 366, 5044, 51834], 'temperature': 0.0, 'avg_logprob': -0.14754098799170517, 'compression_ratio': 1.6860986547085202, 'no_speech_prob': 0.0006346922600641847}, {'id': 157, 'seek': 134128, 'start': 1341.28, 'end': 1353.76, 'text': ' than that right so this is the place where I am in the prefix point region right every time I', 'tokens': [50364, 813, 300, 558, 370, 341, 307, 264, 1081, 689, 286, 669, 294, 264, 46969, 935, 4458, 558, 633, 565, 286, 50988], 'temperature': 0.0, 'avg_logprob': -0.10758227732644152, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.002784965094178915}, {'id': 158, 'seek': 134128, 'start': 1353.76, 'end': 1361.52, 'text': ' get values which will be larger and larger to this thing just consider this set that I got by', 'tokens': [50988, 483, 4190, 597, 486, 312, 4833, 293, 4833, 281, 341, 551, 445, 1949, 341, 992, 300, 286, 658, 538, 51376], 'temperature': 0.0, 'avg_logprob': -0.10758227732644152, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.002784965094178915}, {'id': 159, 'seek': 134128, 'start': 1361.52, 'end': 1369.32, 'text': ' applying this again and again and again so if I take a join of those guys just by the definition', 'tokens': [51376, 9275, 341, 797, 293, 797, 293, 797, 370, 498, 286, 747, 257, 3917, 295, 729, 1074, 445, 538, 264, 7123, 51766], 'temperature': 0.0, 'avg_logprob': -0.10758227732644152, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.002784965094178915}, {'id': 160, 'seek': 136932, 'start': 1369.32, 'end': 1379.12, 'text': ' of taking a join this is going to be greater than this this is going to be less than or equal to', 'tokens': [50364, 295, 1940, 257, 3917, 341, 307, 516, 281, 312, 5044, 813, 341, 341, 307, 516, 281, 312, 1570, 813, 420, 2681, 281, 50854], 'temperature': 0.0, 'avg_logprob': -0.11131874029187189, 'compression_ratio': 1.6845238095238095, 'no_speech_prob': 0.012035629712045193}, {'id': 161, 'seek': 136932, 'start': 1379.12, 'end': 1390.1599999999999, 'text': ' the least fixed point of F right so that is how the computation looks like right and then you', 'tokens': [50854, 264, 1935, 6806, 935, 295, 479, 558, 370, 300, 307, 577, 264, 24903, 1542, 411, 558, 293, 550, 291, 51406], 'temperature': 0.0, 'avg_logprob': -0.11131874029187189, 'compression_ratio': 1.6845238095238095, 'no_speech_prob': 0.012035629712045193}, {'id': 162, 'seek': 136932, 'start': 1390.1599999999999, 'end': 1395.36, 'text': " will have a lot of fixed point setting here I don't know what happens to those but you could", 'tokens': [51406, 486, 362, 257, 688, 295, 6806, 935, 3287, 510, 286, 500, 380, 458, 437, 2314, 281, 729, 457, 291, 727, 51666], 'temperature': 0.0, 'avg_logprob': -0.11131874029187189, 'compression_ratio': 1.6845238095238095, 'no_speech_prob': 0.012035629712045193}, {'id': 163, 'seek': 139536, 'start': 1395.36, 'end': 1400.36, 'text': ' have done the computation in the other way with a different function so I should not have put F', 'tokens': [50364, 362, 1096, 264, 24903, 294, 264, 661, 636, 365, 257, 819, 2445, 370, 286, 820, 406, 362, 829, 479, 50614], 'temperature': 0.0, 'avg_logprob': -0.08886434350694929, 'compression_ratio': 1.8398058252427185, 'no_speech_prob': 0.035040196031332016}, {'id': 164, 'seek': 139536, 'start': 1400.36, 'end': 1407.9199999999998, 'text': ' here this is some other function G right so you could have done a computation starting from the', 'tokens': [50614, 510, 341, 307, 512, 661, 2445, 460, 558, 370, 291, 727, 362, 1096, 257, 24903, 2891, 490, 264, 50992], 'temperature': 0.0, 'avg_logprob': -0.08886434350694929, 'compression_ratio': 1.8398058252427185, 'no_speech_prob': 0.035040196031332016}, {'id': 165, 'seek': 139536, 'start': 1407.9199999999998, 'end': 1415.1999999999998, 'text': ' other direction you could have started from top and you could have just applied G multiple times', 'tokens': [50992, 661, 3513, 291, 727, 362, 1409, 490, 1192, 293, 291, 727, 362, 445, 6456, 460, 3866, 1413, 51356], 'temperature': 0.0, 'avg_logprob': -0.08886434350694929, 'compression_ratio': 1.8398058252427185, 'no_speech_prob': 0.035040196031332016}, {'id': 166, 'seek': 139536, 'start': 1415.1999999999998, 'end': 1424.52, 'text': ' on top kept on climbing down and if you take a meet of those guys then that will be lesser', 'tokens': [51356, 322, 1192, 4305, 322, 14780, 760, 293, 498, 291, 747, 257, 1677, 295, 729, 1074, 550, 300, 486, 312, 22043, 51822], 'temperature': 0.0, 'avg_logprob': -0.08886434350694929, 'compression_ratio': 1.8398058252427185, 'no_speech_prob': 0.035040196031332016}, {'id': 167, 'seek': 142452, 'start': 1424.52, 'end': 1430.6399999999999, 'text': ' than this and then you would reach the GFP and that would have been the way to reach the greatest', 'tokens': [50364, 813, 341, 293, 550, 291, 576, 2524, 264, 460, 45882, 293, 300, 576, 362, 668, 264, 636, 281, 2524, 264, 6636, 50670], 'temperature': 0.0, 'avg_logprob': -0.11146017221304086, 'compression_ratio': 1.921951219512195, 'no_speech_prob': 0.0021811730694025755}, {'id': 168, 'seek': 142452, 'start': 1430.6399999999999, 'end': 1441.52, 'text': ' fixed point right so it says if you start from the top and applying a function of a certain kind you', 'tokens': [50670, 6806, 935, 558, 370, 309, 1619, 498, 291, 722, 490, 264, 1192, 293, 9275, 257, 2445, 295, 257, 1629, 733, 291, 51214], 'temperature': 0.0, 'avg_logprob': -0.11146017221304086, 'compression_ratio': 1.921951219512195, 'no_speech_prob': 0.0021811730694025755}, {'id': 169, 'seek': 142452, 'start': 1441.52, 'end': 1446.72, 'text': ' will be able to keep on you will be able to hit the least fixed point you can do the same business', 'tokens': [51214, 486, 312, 1075, 281, 1066, 322, 291, 486, 312, 1075, 281, 2045, 264, 1935, 6806, 935, 291, 393, 360, 264, 912, 1606, 51474], 'temperature': 0.0, 'avg_logprob': -0.11146017221304086, 'compression_ratio': 1.921951219512195, 'no_speech_prob': 0.0021811730694025755}, {'id': 170, 'seek': 142452, 'start': 1446.72, 'end': 1453.44, 'text': ' in the opposite direction to reach the greatest fixed point understand that once you hit a fixed', 'tokens': [51474, 294, 264, 6182, 3513, 281, 2524, 264, 6636, 6806, 935, 1223, 300, 1564, 291, 2045, 257, 6806, 51810], 'temperature': 0.0, 'avg_logprob': -0.11146017221304086, 'compression_ratio': 1.921951219512195, 'no_speech_prob': 0.0021811730694025755}, {'id': 171, 'seek': 145344, 'start': 1453.44, 'end': 1458.48, 'text': ' point or hit a fixed point you cannot move across fixed points there is no way to write I mean like', 'tokens': [50364, 935, 420, 2045, 257, 6806, 935, 291, 2644, 1286, 2108, 6806, 2793, 456, 307, 572, 636, 281, 2464, 286, 914, 411, 50616], 'temperature': 0.0, 'avg_logprob': -0.19325306232158954, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.014822667464613914}, {'id': 172, 'seek': 145344, 'start': 1458.48, 'end': 1466.0, 'text': ' you apply it again you will still remain there but the cool part is that this particular guys', 'tokens': [50616, 291, 3079, 309, 797, 291, 486, 920, 6222, 456, 457, 264, 1627, 644, 307, 300, 341, 1729, 1074, 50992], 'temperature': 0.0, 'avg_logprob': -0.19325306232158954, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.014822667464613914}, {'id': 173, 'seek': 145344, 'start': 1466.0, 'end': 1472.64, 'text': ' the least fixed point the the least fixed point the greatest fixed point and the set of fixed', 'tokens': [50992, 264, 1935, 6806, 935, 264, 264, 1935, 6806, 935, 264, 6636, 6806, 935, 293, 264, 992, 295, 6806, 51324], 'temperature': 0.0, 'avg_logprob': -0.19325306232158954, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.014822667464613914}, {'id': 174, 'seek': 147264, 'start': 1472.64, 'end': 1498.92, 'text': ' points in between they themselves form a complete lattice which one yeah so you can view it anyway', 'tokens': [50364, 2793, 294, 1296, 436, 2969, 1254, 257, 3566, 34011, 597, 472, 1338, 370, 291, 393, 1910, 309, 4033, 51678], 'temperature': 0.0, 'avg_logprob': -0.28086417371576483, 'compression_ratio': 1.225, 'no_speech_prob': 0.33837777376174927}, {'id': 175, 'seek': 149892, 'start': 1499.0, 'end': 1505.04, 'text': ' you want you can you can view it anyway you want so you can view it as starting from the bottom', 'tokens': [50368, 291, 528, 291, 393, 291, 393, 1910, 309, 4033, 291, 528, 370, 291, 393, 1910, 309, 382, 2891, 490, 264, 2767, 50670], 'temperature': 0.0, 'avg_logprob': -0.13337081128900702, 'compression_ratio': 2.0324324324324325, 'no_speech_prob': 0.14753605425357819}, {'id': 176, 'seek': 149892, 'start': 1505.04, 'end': 1514.04, 'text': ' and applying the like growing like keep on applying it keep on applying F to it till you', 'tokens': [50670, 293, 9275, 264, 411, 4194, 411, 1066, 322, 9275, 309, 1066, 322, 9275, 479, 281, 309, 4288, 291, 51120], 'temperature': 0.0, 'avg_logprob': -0.13337081128900702, 'compression_ratio': 2.0324324324324325, 'no_speech_prob': 0.14753605425357819}, {'id': 177, 'seek': 149892, 'start': 1514.04, 'end': 1519.3600000000001, 'text': ' reach the lowest fixed point or you can think it the other way around you can flip the lattices', 'tokens': [51120, 2524, 264, 12437, 6806, 935, 420, 291, 393, 519, 309, 264, 661, 636, 926, 291, 393, 7929, 264, 29025, 1473, 51386], 'temperature': 0.0, 'avg_logprob': -0.13337081128900702, 'compression_ratio': 2.0324324324324325, 'no_speech_prob': 0.14753605425357819}, {'id': 178, 'seek': 149892, 'start': 1519.3600000000001, 'end': 1526.52, 'text': ' around and you can start from the top and apply some function G till you hit the greatest fixed', 'tokens': [51386, 926, 293, 291, 393, 722, 490, 264, 1192, 293, 3079, 512, 2445, 460, 4288, 291, 2045, 264, 6636, 6806, 51744], 'temperature': 0.0, 'avg_logprob': -0.13337081128900702, 'compression_ratio': 2.0324324324324325, 'no_speech_prob': 0.14753605425357819}, {'id': 179, 'seek': 152652, 'start': 1526.52, 'end': 1536.76, 'text': ' point whatever we drew was this particular thing so we started with bottom and we kept on getting', 'tokens': [50364, 935, 2035, 321, 12804, 390, 341, 1729, 551, 370, 321, 1409, 365, 2767, 293, 321, 4305, 322, 1242, 50876], 'temperature': 0.0, 'avg_logprob': -0.3227056112044897, 'compression_ratio': 1.4836065573770492, 'no_speech_prob': 0.535244345664978}, {'id': 180, 'seek': 152652, 'start': 1536.76, 'end': 1548.24, 'text': ' larger and larger sets by our ordering iteration till we hit the best solution yeah', 'tokens': [50876, 4833, 293, 4833, 6352, 538, 527, 21739, 24784, 4288, 321, 2045, 264, 1151, 3827, 1338, 51450], 'temperature': 0.0, 'avg_logprob': -0.3227056112044897, 'compression_ratio': 1.4836065573770492, 'no_speech_prob': 0.535244345664978}, {'id': 181, 'seek': 154824, 'start': 1548.24, 'end': 1567.4, 'text': ' yeah from the top but maybe from with a different function how but why would you not want the other', 'tokens': [50364, 1338, 490, 264, 1192, 457, 1310, 490, 365, 257, 819, 2445, 577, 457, 983, 576, 291, 406, 528, 264, 661, 51322], 'temperature': 0.0, 'avg_logprob': -0.24916178385416668, 'compression_ratio': 1.576, 'no_speech_prob': 0.11929488927125931}, {'id': 182, 'seek': 154824, 'start': 1567.4, 'end': 1571.52, 'text': ' fixed point that is the first question what why are you why should you be interested in the other', 'tokens': [51322, 6806, 935, 300, 307, 264, 700, 1168, 437, 983, 366, 291, 983, 820, 291, 312, 3102, 294, 264, 661, 51528], 'temperature': 0.0, 'avg_logprob': -0.24916178385416668, 'compression_ratio': 1.576, 'no_speech_prob': 0.11929488927125931}, {'id': 183, 'seek': 157152, 'start': 1571.52, 'end': 1580.76, 'text': ' fixed points no but why do you want that lattice it just shows that it just tells you that those', 'tokens': [50364, 6806, 2793, 572, 457, 983, 360, 291, 528, 300, 34011, 309, 445, 3110, 300, 309, 445, 5112, 291, 300, 729, 50826], 'temperature': 0.0, 'avg_logprob': -0.1613115766155186, 'compression_ratio': 1.86875, 'no_speech_prob': 0.33276501297950745}, {'id': 184, 'seek': 157152, 'start': 1580.76, 'end': 1586.92, 'text': ' lattices those points do form a mini lattice but why would you be interested in hitting that mini', 'tokens': [50826, 29025, 1473, 729, 2793, 360, 1254, 257, 8382, 34011, 457, 983, 576, 291, 312, 3102, 294, 8850, 300, 8382, 51134], 'temperature': 0.0, 'avg_logprob': -0.1613115766155186, 'compression_ratio': 1.86875, 'no_speech_prob': 0.33276501297950745}, {'id': 185, 'seek': 157152, 'start': 1586.92, 'end': 1595.44, 'text': ' lattice so at least in our data flow scenario we do not have any interest in finding those mini lattices', 'tokens': [51134, 34011, 370, 412, 1935, 294, 527, 1412, 3095, 9005, 321, 360, 406, 362, 604, 1179, 294, 5006, 729, 8382, 29025, 1473, 51560], 'temperature': 0.0, 'avg_logprob': -0.1613115766155186, 'compression_ratio': 1.86875, 'no_speech_prob': 0.33276501297950745}, {'id': 186, 'seek': 160152, 'start': 1601.52, 'end': 1607.8799999999999, 'text': ' no that is not done empirically that is not done empirically that is not done for example that is', 'tokens': [50364, 572, 300, 307, 406, 1096, 25790, 984, 300, 307, 406, 1096, 25790, 984, 300, 307, 406, 1096, 337, 1365, 300, 307, 50682], 'temperature': 0.0, 'avg_logprob': -0.1476452627847361, 'compression_ratio': 2.0317460317460316, 'no_speech_prob': 0.04077313840389252}, {'id': 187, 'seek': 160152, 'start': 1607.8799999999999, 'end': 1614.56, 'text': ' done mathematically so there is a mathematical proof that this will happen so I do not want to', 'tokens': [50682, 1096, 44003, 370, 456, 307, 257, 18894, 8177, 300, 341, 486, 1051, 370, 286, 360, 406, 528, 281, 51016], 'temperature': 0.0, 'avg_logprob': -0.1476452627847361, 'compression_ratio': 2.0317460317460316, 'no_speech_prob': 0.04077313840389252}, {'id': 188, 'seek': 160152, 'start': 1614.56, 'end': 1619.8, 'text': ' do the proof here but there is a very interesting proof in fact you go back and look at this', 'tokens': [51016, 360, 264, 8177, 510, 457, 456, 307, 257, 588, 1880, 8177, 294, 1186, 291, 352, 646, 293, 574, 412, 341, 51278], 'temperature': 0.0, 'avg_logprob': -0.1476452627847361, 'compression_ratio': 2.0317460317460316, 'no_speech_prob': 0.04077313840389252}, {'id': 189, 'seek': 160152, 'start': 1619.8, 'end': 1625.2, 'text': ' particular proof it essentially says that we can actually prove that if there are two fixed points', 'tokens': [51278, 1729, 8177, 309, 4476, 1619, 300, 321, 393, 767, 7081, 300, 498, 456, 366, 732, 6806, 2793, 51548], 'temperature': 0.0, 'avg_logprob': -0.1476452627847361, 'compression_ratio': 2.0317460317460316, 'no_speech_prob': 0.04077313840389252}, {'id': 190, 'seek': 162520, 'start': 1625.2, 'end': 1631.8, 'text': ' they will always have this ordering and you can always find the top element there but in our', 'tokens': [50364, 436, 486, 1009, 362, 341, 21739, 293, 291, 393, 1009, 915, 264, 1192, 4478, 456, 457, 294, 527, 50694], 'temperature': 0.0, 'avg_logprob': -0.1483790317428446, 'compression_ratio': 1.8120300751879699, 'no_speech_prob': 0.2386907935142517}, {'id': 191, 'seek': 162520, 'start': 1631.8, 'end': 1637.04, 'text': ' scenario we are not interested in getting the other fixed points for us it does not really matter', 'tokens': [50694, 9005, 321, 366, 406, 3102, 294, 1242, 264, 661, 6806, 2793, 337, 505, 309, 775, 406, 534, 1871, 50956], 'temperature': 0.0, 'avg_logprob': -0.1483790317428446, 'compression_ratio': 1.8120300751879699, 'no_speech_prob': 0.2386907935142517}, {'id': 192, 'seek': 162520, 'start': 1637.04, 'end': 1644.28, 'text': ' right and all it matters for us is only this part right going all the way from the bottom till the', 'tokens': [50956, 558, 293, 439, 309, 7001, 337, 505, 307, 787, 341, 644, 558, 516, 439, 264, 636, 490, 264, 2767, 4288, 264, 51318], 'temperature': 0.0, 'avg_logprob': -0.1483790317428446, 'compression_ratio': 1.8120300751879699, 'no_speech_prob': 0.2386907935142517}, {'id': 193, 'seek': 162520, 'start': 1644.28, 'end': 1649.76, 'text': " till we reach the LFP we don't even care anything else so for us even a similarity structure is good", 'tokens': [51318, 4288, 321, 2524, 264, 441, 45882, 321, 500, 380, 754, 1127, 1340, 1646, 370, 337, 505, 754, 257, 32194, 3877, 307, 665, 51592], 'temperature': 0.0, 'avg_logprob': -0.1483790317428446, 'compression_ratio': 1.8120300751879699, 'no_speech_prob': 0.2386907935142517}, {'id': 194, 'seek': 162520, 'start': 1649.76, 'end': 1655.16, 'text': ' enough what happens the other direction what happens for the meets I am not even interested', 'tokens': [51592, 1547, 437, 2314, 264, 661, 3513, 437, 2314, 337, 264, 13961, 286, 669, 406, 754, 3102, 51862], 'temperature': 0.0, 'avg_logprob': -0.1483790317428446, 'compression_ratio': 1.8120300751879699, 'no_speech_prob': 0.2386907935142517}, {'id': 195, 'seek': 165516, 'start': 1655.16, 'end': 1661.3200000000002, 'text': ' about that because we are never applying meet anywhere we are only applying joints right so', 'tokens': [50364, 466, 300, 570, 321, 366, 1128, 9275, 1677, 4992, 321, 366, 787, 9275, 19949, 558, 370, 50672], 'temperature': 0.0, 'avg_logprob': -0.18939215637916743, 'compression_ratio': 1.7339449541284404, 'no_speech_prob': 0.00167221506126225}, {'id': 196, 'seek': 165516, 'start': 1661.3200000000002, 'end': 1671.3600000000001, 'text': ' whatever structure is there for meets I am not even using it so it does not matter right yeah', 'tokens': [50672, 2035, 3877, 307, 456, 337, 13961, 286, 669, 406, 754, 1228, 309, 370, 309, 775, 406, 1871, 558, 1338, 51174], 'temperature': 0.0, 'avg_logprob': -0.18939215637916743, 'compression_ratio': 1.7339449541284404, 'no_speech_prob': 0.00167221506126225}, {'id': 197, 'seek': 165516, 'start': 1671.3600000000001, 'end': 1677.3600000000001, 'text': ' so this is much more interesting with the proofs but like you spend two classes doing the Naster', 'tokens': [51174, 370, 341, 307, 709, 544, 1880, 365, 264, 8177, 82, 457, 411, 291, 3496, 732, 5359, 884, 264, 426, 1727, 51474], 'temperature': 0.0, 'avg_logprob': -0.18939215637916743, 'compression_ratio': 1.7339449541284404, 'no_speech_prob': 0.00167221506126225}, {'id': 198, 'seek': 165516, 'start': 1677.3600000000001, 'end': 1682.4, 'text': " Rasky theorem and then because more interesting but I'll keep it in interest of time but I will", 'tokens': [51474, 497, 3863, 88, 20904, 293, 550, 570, 544, 1880, 457, 286, 603, 1066, 309, 294, 1179, 295, 565, 457, 286, 486, 51726], 'temperature': 0.0, 'avg_logprob': -0.18939215637916743, 'compression_ratio': 1.7339449541284404, 'no_speech_prob': 0.00167221506126225}, {'id': 199, 'seek': 168240, 'start': 1682.4, 'end': 1689.44, 'text': ' really ask you to go and see that why this really works at least the first couple of points are not', 'tokens': [50364, 534, 1029, 291, 281, 352, 293, 536, 300, 983, 341, 534, 1985, 412, 1935, 264, 700, 1916, 295, 2793, 366, 406, 50716], 'temperature': 0.0, 'avg_logprob': -0.14636312831531872, 'compression_ratio': 1.7515151515151515, 'no_speech_prob': 0.0667753517627716}, {'id': 200, 'seek': 168240, 'start': 1689.44, 'end': 1702.16, 'text': ' difficult to show they are not so difficult proofs now the question is about precision so again', 'tokens': [50716, 2252, 281, 855, 436, 366, 406, 370, 2252, 8177, 82, 586, 264, 1168, 307, 466, 18356, 370, 797, 51352], 'temperature': 0.0, 'avg_logprob': -0.14636312831531872, 'compression_ratio': 1.7515151515151515, 'no_speech_prob': 0.0667753517627716}, {'id': 201, 'seek': 168240, 'start': 1702.16, 'end': 1709.0400000000002, 'text': ' remember that what did we really want to compute what we really wanted to compute was the MOP', 'tokens': [51352, 1604, 300, 437, 630, 321, 534, 528, 281, 14722, 437, 321, 534, 1415, 281, 14722, 390, 264, 376, 12059, 51696], 'temperature': 0.0, 'avg_logprob': -0.14636312831531872, 'compression_ratio': 1.7515151515151515, 'no_speech_prob': 0.0667753517627716}, {'id': 202, 'seek': 170904, 'start': 1709.04, 'end': 1714.36, 'text': ' solution the meet over all path solution or the join over all path solution if you will right so', 'tokens': [50364, 3827, 264, 1677, 670, 439, 3100, 3827, 420, 264, 3917, 670, 439, 3100, 3827, 498, 291, 486, 558, 370, 50630], 'temperature': 0.0, 'avg_logprob': -0.18210107430644418, 'compression_ratio': 1.8737864077669903, 'no_speech_prob': 0.10034797340631485}, {'id': 203, 'seek': 170904, 'start': 1714.36, 'end': 1722.48, 'text': ' essentially what we do we would have wanted is that we we try to find out all paths from the program', 'tokens': [50630, 4476, 437, 321, 360, 321, 576, 362, 1415, 307, 300, 321, 321, 853, 281, 915, 484, 439, 14518, 490, 264, 1461, 51036], 'temperature': 0.0, 'avg_logprob': -0.18210107430644418, 'compression_ratio': 1.8737864077669903, 'no_speech_prob': 0.10034797340631485}, {'id': 204, 'seek': 170904, 'start': 1722.48, 'end': 1728.68, 'text': " so how will this MOP solution look like essentially what we're trying to how will you now you know the", 'tokens': [51036, 370, 577, 486, 341, 376, 12059, 3827, 574, 411, 4476, 437, 321, 434, 1382, 281, 577, 486, 291, 586, 291, 458, 264, 51346], 'temperature': 0.0, 'avg_logprob': -0.18210107430644418, 'compression_ratio': 1.8737864077669903, 'no_speech_prob': 0.10034797340631485}, {'id': 205, 'seek': 170904, 'start': 1728.68, 'end': 1732.08, 'text': ' lattice and the structure and all that so mathematically can you write down what does', 'tokens': [51346, 34011, 293, 264, 3877, 293, 439, 300, 370, 44003, 393, 291, 2464, 760, 437, 775, 51516], 'temperature': 0.0, 'avg_logprob': -0.18210107430644418, 'compression_ratio': 1.8737864077669903, 'no_speech_prob': 0.10034797340631485}, {'id': 206, 'seek': 173208, 'start': 1732.08, 'end': 1745.1599999999999, 'text': ' the MOP solution look like how would the so let us say I have some graph', 'tokens': [50364, 264, 376, 12059, 3827, 574, 411, 577, 576, 264, 370, 718, 505, 584, 286, 362, 512, 4295, 51018], 'temperature': 0.0, 'avg_logprob': -0.2556674242019653, 'compression_ratio': 1.0, 'no_speech_prob': 0.5273098349571228}, {'id': 207, 'seek': 176208, 'start': 1762.08, 'end': 1777.24, 'text': " I don't know why you always end up making the same graph okay let me not okay so let's say this is", 'tokens': [50364, 286, 500, 380, 458, 983, 291, 1009, 917, 493, 1455, 264, 912, 4295, 1392, 718, 385, 406, 1392, 370, 718, 311, 584, 341, 307, 51122], 'temperature': 0.0, 'avg_logprob': -0.16699377266136375, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.2455914169549942}, {'id': 208, 'seek': 176208, 'start': 1777.24, 'end': 1784.0, 'text': ' a this is B this is C and I want to compute the MOP solution here the meet over all path', 'tokens': [51122, 257, 341, 307, 363, 341, 307, 383, 293, 286, 528, 281, 14722, 264, 376, 12059, 3827, 510, 264, 1677, 670, 439, 3100, 51460], 'temperature': 0.0, 'avg_logprob': -0.16699377266136375, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.2455914169549942}, {'id': 209, 'seek': 176208, 'start': 1784.0, 'end': 1790.08, 'text': ' solution here for the join over all path solution here so how do I how will I apply this solution', 'tokens': [51460, 3827, 510, 337, 264, 3917, 670, 439, 3100, 3827, 510, 370, 577, 360, 286, 577, 486, 286, 3079, 341, 3827, 51764], 'temperature': 0.0, 'avg_logprob': -0.16699377266136375, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.2455914169549942}, {'id': 210, 'seek': 179008, 'start': 1790.08, 'end': 1793.96, 'text': " so let's say this guy has a transfer function which is f1 this guy has a transfer function", 'tokens': [50364, 370, 718, 311, 584, 341, 2146, 575, 257, 5003, 2445, 597, 307, 283, 16, 341, 2146, 575, 257, 5003, 2445, 50558], 'temperature': 0.0, 'avg_logprob': -0.13337667223433375, 'compression_ratio': 2.0142857142857142, 'no_speech_prob': 0.011664400808513165}, {'id': 211, 'seek': 179008, 'start': 1793.96, 'end': 1799.4399999999998, 'text': ' which is f2 this guy has a transfer function which is f3 how do I compute this particular', 'tokens': [50558, 597, 307, 283, 17, 341, 2146, 575, 257, 5003, 2445, 597, 307, 283, 18, 577, 360, 286, 14722, 341, 1729, 50832], 'temperature': 0.0, 'avg_logprob': -0.13337667223433375, 'compression_ratio': 2.0142857142857142, 'no_speech_prob': 0.011664400808513165}, {'id': 212, 'seek': 179008, 'start': 1799.4399999999998, 'end': 1812.52, 'text': " answer how what is my MOP is going to be at this particular point so let's say I start with something", 'tokens': [50832, 1867, 577, 437, 307, 452, 376, 12059, 307, 516, 281, 312, 412, 341, 1729, 935, 370, 718, 311, 584, 286, 722, 365, 746, 51486], 'temperature': 0.0, 'avg_logprob': -0.13337667223433375, 'compression_ratio': 2.0142857142857142, 'no_speech_prob': 0.011664400808513165}, {'id': 213, 'seek': 181252, 'start': 1812.52, 'end': 1820.6399999999999, 'text': " let's say I start with some value here it's some initialization of this guy which could be some", 'tokens': [50364, 718, 311, 584, 286, 722, 365, 512, 2158, 510, 309, 311, 512, 5883, 2144, 295, 341, 2146, 597, 727, 312, 512, 50770], 'temperature': 0.0, 'avg_logprob': -0.11648663958987675, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.020282624289393425}, {'id': 214, 'seek': 181252, 'start': 1820.6399999999999, 'end': 1829.24, 'text': " value let's say alpha so the entry point to this entry block let's say the dataflow fact is alpha", 'tokens': [50770, 2158, 718, 311, 584, 8961, 370, 264, 8729, 935, 281, 341, 8729, 3461, 718, 311, 584, 264, 1412, 10565, 1186, 307, 8961, 51200], 'temperature': 0.0, 'avg_logprob': -0.11648663958987675, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.020282624289393425}, {'id': 215, 'seek': 181252, 'start': 1829.24, 'end': 1833.84, 'text': ' I know that so I have set it to that and I want to find out the meet over all path solution at', 'tokens': [51200, 286, 458, 300, 370, 286, 362, 992, 309, 281, 300, 293, 286, 528, 281, 915, 484, 264, 1677, 670, 439, 3100, 3827, 412, 51430], 'temperature': 0.0, 'avg_logprob': -0.11648663958987675, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.020282624289393425}, {'id': 216, 'seek': 183384, 'start': 1833.84, 'end': 1852.72, 'text': ' this particular point how do I how do I do this what is the function going to be very good very', 'tokens': [50364, 341, 1729, 935, 577, 360, 286, 577, 360, 286, 360, 341, 437, 307, 264, 2445, 516, 281, 312, 588, 665, 588, 51308], 'temperature': 0.0, 'avg_logprob': -0.12502088149388632, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.23803575336933136}, {'id': 217, 'seek': 183384, 'start': 1852.72, 'end': 1861.32, 'text': ' good very good so I will first apply alpha on f1 then I will start going around this path right', 'tokens': [51308, 665, 588, 665, 370, 286, 486, 700, 3079, 8961, 322, 283, 16, 550, 286, 486, 722, 516, 926, 341, 3100, 558, 51738], 'temperature': 0.0, 'avg_logprob': -0.12502088149388632, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.23803575336933136}, {'id': 218, 'seek': 186132, 'start': 1861.32, 'end': 1873.9199999999998, 'text': ' now so I will apply f1 alpha on f1 then I will apply f2 on f1 then join of right then join of', 'tokens': [50364, 586, 370, 286, 486, 3079, 283, 16, 8961, 322, 283, 16, 550, 286, 486, 3079, 283, 17, 322, 283, 16, 550, 3917, 295, 558, 550, 3917, 295, 50994], 'temperature': 0.0, 'avg_logprob': -0.11419138992041872, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.03505709022283554}, {'id': 219, 'seek': 186132, 'start': 1873.9199999999998, 'end': 1887.48, 'text': ' f3 of f1 of alpha this is what we want to compute what do we actually compute the MFP solution or', 'tokens': [50994, 283, 18, 295, 283, 16, 295, 8961, 341, 307, 437, 321, 528, 281, 14722, 437, 360, 321, 767, 14722, 264, 376, 45882, 3827, 420, 51672], 'temperature': 0.0, 'avg_logprob': -0.11419138992041872, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.03505709022283554}, {'id': 220, 'seek': 188748, 'start': 1887.6, 'end': 1895.48, 'text': ' LFP solution whatever we want what are actually we computing actually that is why I drew the', 'tokens': [50370, 441, 45882, 3827, 2035, 321, 528, 437, 366, 767, 321, 15866, 767, 300, 307, 983, 286, 12804, 264, 50764], 'temperature': 0.0, 'avg_logprob': -0.1544816771218943, 'compression_ratio': 1.4307692307692308, 'no_speech_prob': 0.01970423012971878}, {'id': 221, 'seek': 188748, 'start': 1895.48, 'end': 1903.04, 'text': ' other diagram again it is not interesting so I have to extend this so let me just change this', 'tokens': [50764, 661, 10686, 797, 309, 307, 406, 1880, 370, 286, 362, 281, 10101, 341, 370, 718, 385, 445, 1319, 341, 51142], 'temperature': 0.0, 'avg_logprob': -0.1544816771218943, 'compression_ratio': 1.4307692307692308, 'no_speech_prob': 0.01970423012971878}, {'id': 222, 'seek': 190304, 'start': 1903.04, 'end': 1916.8799999999999, 'text': ' so I want a I want b c I want b', 'tokens': [50364, 370, 286, 528, 257, 286, 528, 272, 269, 286, 528, 272, 51056], 'temperature': 0.0, 'avg_logprob': -0.4127205848693848, 'compression_ratio': 1.24, 'no_speech_prob': 0.5832182168960571}, {'id': 223, 'seek': 191688, 'start': 1916.88, 'end': 1945.72, 'text': ' e f g and I start with the alpha now you have to write more so this is what I was trying to avoid', 'tokens': [50364, 308, 283, 290, 293, 286, 722, 365, 264, 8961, 586, 291, 362, 281, 2464, 544, 370, 341, 307, 437, 286, 390, 1382, 281, 5042, 51806], 'temperature': 0.0, 'avg_logprob': -0.24264965738568986, 'compression_ratio': 1.1975308641975309, 'no_speech_prob': 0.5205776691436768}, {'id': 224, 'seek': 194572, 'start': 1945.84, 'end': 1960.92, 'text': ' so then then what is my MFP solution MOP solution now though you guys tell me now this is f a f', 'tokens': [50370, 370, 550, 550, 437, 307, 452, 376, 45882, 3827, 376, 12059, 3827, 586, 1673, 291, 1074, 980, 385, 586, 341, 307, 283, 257, 283, 51124], 'temperature': 0.0, 'avg_logprob': -0.2831534317561558, 'compression_ratio': 1.1875, 'no_speech_prob': 0.022592956200242043}, {'id': 225, 'seek': 196092, 'start': 1960.92, 'end': 1976.6000000000001, 'text': ' b f c f d fe f f bad but let us say at the beginning of this beginning of g so this is', 'tokens': [50364, 272, 283, 269, 283, 274, 579, 283, 283, 1578, 457, 718, 505, 584, 412, 264, 2863, 295, 341, 2863, 295, 290, 370, 341, 307, 51148], 'temperature': 0.0, 'avg_logprob': -0.1940628500545726, 'compression_ratio': 1.525, 'no_speech_prob': 0.10469728708267212}, {'id': 226, 'seek': 196092, 'start': 1976.6000000000001, 'end': 1981.64, 'text': ' the program point where I am interested to find the MOP solution so what is my MOP solution here', 'tokens': [51148, 264, 1461, 935, 689, 286, 669, 3102, 281, 915, 264, 376, 12059, 3827, 370, 437, 307, 452, 376, 12059, 3827, 510, 51400], 'temperature': 0.0, 'avg_logprob': -0.1940628500545726, 'compression_ratio': 1.525, 'no_speech_prob': 0.10469728708267212}, {'id': 227, 'seek': 198164, 'start': 1981.64, 'end': 1999.44, 'text': ' yeah so long chain of f a then f b then f d then fe of alpha join of', 'tokens': [50364, 1338, 370, 938, 5021, 295, 283, 257, 550, 283, 272, 550, 283, 274, 550, 579, 295, 8961, 3917, 295, 51254], 'temperature': 0.0, 'avg_logprob': -0.2994021747423255, 'compression_ratio': 1.1724137931034482, 'no_speech_prob': 0.863537073135376}, {'id': 228, 'seek': 199944, 'start': 1999.44, 'end': 2027.0800000000002, 'text': " yeah f f so if f a f c f d let's say ff of alpha then something then other two parts", 'tokens': [50364, 1338, 283, 283, 370, 498, 283, 257, 283, 269, 283, 274, 718, 311, 584, 283, 69, 295, 8961, 550, 746, 550, 661, 732, 3166, 51746], 'temperature': 0.0, 'avg_logprob': -0.3300646322744864, 'compression_ratio': 1.1666666666666667, 'no_speech_prob': 0.777727484703064}, {'id': 229, 'seek': 202944, 'start': 2029.68, 'end': 2040.92, 'text': ' what about the MFP path MFP solution what does the MFP solution look like fe applied to', 'tokens': [50376, 437, 466, 264, 376, 45882, 3100, 376, 45882, 3827, 437, 775, 264, 376, 45882, 3827, 574, 411, 579, 6456, 281, 50938], 'temperature': 0.0, 'avg_logprob': -0.3871649106343587, 'compression_ratio': 1.1917808219178083, 'no_speech_prob': 0.08982912451028824}, {'id': 230, 'seek': 204092, 'start': 2040.92, 'end': 2069.8, 'text': ' so that will be f d of join of which two things f b f a of of alpha join f c', 'tokens': [50364, 370, 300, 486, 312, 283, 274, 295, 3917, 295, 597, 732, 721, 283, 272, 283, 257, 295, 295, 8961, 3917, 283, 269, 51808], 'temperature': 0.0, 'avg_logprob': -0.3565190887451172, 'compression_ratio': 1.1515151515151516, 'no_speech_prob': 0.676272451877594}, {'id': 231, 'seek': 207092, 'start': 2070.96, 'end': 2082.12, 'text': ' f a of alpha join same for the other direction can you see the difference between these two', 'tokens': [50366, 283, 257, 295, 8961, 3917, 912, 337, 264, 661, 3513, 393, 291, 536, 264, 2649, 1296, 613, 732, 50924], 'temperature': 0.0, 'avg_logprob': -0.2258057329389784, 'compression_ratio': 1.4453781512605042, 'no_speech_prob': 0.06317519396543503}, {'id': 232, 'seek': 207092, 'start': 2082.12, 'end': 2100.28, 'text': ' equations not completely but somewhat yes yes yes we are applying less functions', 'tokens': [50924, 11787, 406, 2584, 457, 8344, 2086, 2086, 2086, 321, 366, 9275, 1570, 6828, 51832], 'temperature': 0.0, 'avg_logprob': -0.2258057329389784, 'compression_ratio': 1.4453781512605042, 'no_speech_prob': 0.06317519396543503}, {'id': 233, 'seek': 210092, 'start': 2101.92, 'end': 2111.04, 'text': " so we wanted to compute the MOP but somebody told us don't do MOP do MFP and we are we since", 'tokens': [50414, 370, 321, 1415, 281, 14722, 264, 376, 12059, 457, 2618, 1907, 505, 500, 380, 360, 376, 12059, 360, 376, 45882, 293, 321, 366, 321, 1670, 50870], 'temperature': 0.0, 'avg_logprob': -0.17137065491118988, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0047327554784715176}, {'id': 234, 'seek': 210092, 'start': 2111.04, 'end': 2121.44, 'text': ' yesterday I am teaching you MFP now why should this why should it work to compute the MFP when', 'tokens': [50870, 5186, 286, 669, 4571, 291, 376, 45882, 586, 983, 820, 341, 983, 820, 309, 589, 281, 14722, 264, 376, 45882, 562, 51390], 'temperature': 0.0, 'avg_logprob': -0.17137065491118988, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0047327554784715176}, {'id': 235, 'seek': 210092, 'start': 2121.44, 'end': 2126.2400000000002, 'text': ' we wanted the MOP solution so essentially we want the MOP right all of you agree what we want why is', 'tokens': [51390, 321, 1415, 264, 376, 12059, 3827, 370, 4476, 321, 528, 264, 376, 12059, 558, 439, 295, 291, 3986, 437, 321, 528, 983, 307, 51630], 'temperature': 0.0, 'avg_logprob': -0.17137065491118988, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0047327554784715176}, {'id': 236, 'seek': 212624, 'start': 2126.3599999999997, 'end': 2133.8399999999997, 'text': ' it the MOP want because any of these paths is a possible execution path right and whatever', 'tokens': [50370, 309, 264, 376, 12059, 528, 570, 604, 295, 613, 14518, 307, 257, 1944, 15058, 3100, 558, 293, 2035, 50744], 'temperature': 0.0, 'avg_logprob': -0.1872997448362153, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.06140545383095741}, {'id': 237, 'seek': 212624, 'start': 2133.8399999999997, 'end': 2139.68, 'text': ' property we are we get should we should be something that should be possible in some', 'tokens': [50744, 4707, 321, 366, 321, 483, 820, 321, 820, 312, 746, 300, 820, 312, 1944, 294, 512, 51036], 'temperature': 0.0, 'avg_logprob': -0.1872997448362153, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.06140545383095741}, {'id': 238, 'seek': 212624, 'start': 2139.68, 'end': 2147.4399999999996, 'text': ' execution right so I am taking a meet over all possible executions that are possible', 'tokens': [51036, 15058, 558, 370, 286, 669, 1940, 257, 1677, 670, 439, 1944, 4454, 3666, 300, 366, 1944, 51424], 'temperature': 0.0, 'avg_logprob': -0.1872997448362153, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.06140545383095741}, {'id': 239, 'seek': 214744, 'start': 2148.4, 'end': 2158.08, 'text': ' right but we are computing something which looks very different why what is going on', 'tokens': [50412, 558, 457, 321, 366, 15866, 746, 597, 1542, 588, 819, 983, 437, 307, 516, 322, 50896], 'temperature': 0.0, 'avg_logprob': -0.14588561872156655, 'compression_ratio': 1.4491525423728813, 'no_speech_prob': 0.06848165392875671}, {'id': 240, 'seek': 214744, 'start': 2158.08, 'end': 2175.36, 'text': ' very good very good so can you see when will these two be equal yes yes if the join is', 'tokens': [50896, 588, 665, 588, 665, 370, 393, 291, 536, 562, 486, 613, 732, 312, 2681, 2086, 2086, 498, 264, 3917, 307, 51760], 'temperature': 0.0, 'avg_logprob': -0.14588561872156655, 'compression_ratio': 1.4491525423728813, 'no_speech_prob': 0.06848165392875671}, {'id': 241, 'seek': 217536, 'start': 2175.6, 'end': 2183.84, 'text': ' distributed over your function f then both of them will they not look the same right so if', 'tokens': [50376, 12631, 670, 428, 2445, 283, 550, 1293, 295, 552, 486, 436, 406, 574, 264, 912, 558, 370, 498, 50788], 'temperature': 0.0, 'avg_logprob': -0.18725552097443612, 'compression_ratio': 1.6566265060240963, 'no_speech_prob': 0.01346930768340826}, {'id': 242, 'seek': 217536, 'start': 2183.84, 'end': 2198.36, 'text': ' you have distributed frameworks then MOP solution and MFP solution coincide was reaching so which', 'tokens': [50788, 291, 362, 12631, 29834, 550, 376, 12059, 3827, 293, 376, 45882, 3827, 13001, 482, 390, 9906, 370, 597, 51514], 'temperature': 0.0, 'avg_logprob': -0.18725552097443612, 'compression_ratio': 1.6566265060240963, 'no_speech_prob': 0.01346930768340826}, {'id': 243, 'seek': 217536, 'start': 2198.36, 'end': 2203.4, 'text': ' of them is more efficient MFP is much more efficient because see how less we are times', 'tokens': [51514, 295, 552, 307, 544, 7148, 376, 45882, 307, 709, 544, 7148, 570, 536, 577, 1570, 321, 366, 1413, 51766], 'temperature': 0.0, 'avg_logprob': -0.18725552097443612, 'compression_ratio': 1.6566265060240963, 'no_speech_prob': 0.01346930768340826}, {'id': 244, 'seek': 220340, 'start': 2203.44, 'end': 2210.44, 'text': ' we are applying the function but the theory says that if my framework is distributive if my', 'tokens': [50366, 321, 366, 9275, 264, 2445, 457, 264, 5261, 1619, 300, 498, 452, 8388, 307, 4400, 17254, 498, 452, 50716], 'temperature': 0.0, 'avg_logprob': -0.12433921545743942, 'compression_ratio': 1.6022727272727273, 'no_speech_prob': 0.015381128527224064}, {'id': 245, 'seek': 220340, 'start': 2210.44, 'end': 2217.88, 'text': ' function distributes over my joint operator then I have my MOP solution and my MFP solution will', 'tokens': [50716, 2445, 4400, 1819, 670, 452, 7225, 12973, 550, 286, 362, 452, 376, 12059, 3827, 293, 452, 376, 45882, 3827, 486, 51088], 'temperature': 0.0, 'avg_logprob': -0.12433921545743942, 'compression_ratio': 1.6022727272727273, 'no_speech_prob': 0.015381128527224064}, {'id': 246, 'seek': 220340, 'start': 2217.88, 'end': 2227.32, 'text': ' coincide awesome news question is for reaching definitions is it the case can you look at the', 'tokens': [51088, 13001, 482, 3476, 2583, 1168, 307, 337, 9906, 21988, 307, 309, 264, 1389, 393, 291, 574, 412, 264, 51560], 'temperature': 0.0, 'avg_logprob': -0.12433921545743942, 'compression_ratio': 1.6022727272727273, 'no_speech_prob': 0.015381128527224064}, {'id': 247, 'seek': 222732, 'start': 2227.4, 'end': 2234.56, 'text': ' transfer function and tell me is that transfer function distributive over join you know the', 'tokens': [50368, 5003, 2445, 293, 980, 385, 307, 300, 5003, 2445, 4400, 17254, 670, 3917, 291, 458, 264, 50726], 'temperature': 0.0, 'avg_logprob': -0.2444591811209014, 'compression_ratio': 1.7791411042944785, 'no_speech_prob': 0.19630029797554016}, {'id': 248, 'seek': 222732, 'start': 2234.56, 'end': 2240.48, 'text': ' lattice you know the transfer function can you can you quickly try out and see if it really looks', 'tokens': [50726, 34011, 291, 458, 264, 5003, 2445, 393, 291, 393, 291, 2661, 853, 484, 293, 536, 498, 309, 534, 1542, 51022], 'temperature': 0.0, 'avg_logprob': -0.2444591811209014, 'compression_ratio': 1.7791411042944785, 'no_speech_prob': 0.19630029797554016}, {'id': 249, 'seek': 222732, 'start': 2240.48, 'end': 2256.44, 'text': ' to be the case how do you do that hey this side decide new that we are doing no we have two elements', 'tokens': [51022, 281, 312, 264, 1389, 577, 360, 291, 360, 300, 4177, 341, 1252, 4536, 777, 300, 321, 366, 884, 572, 321, 362, 732, 4959, 51820], 'temperature': 0.0, 'avg_logprob': -0.2444591811209014, 'compression_ratio': 1.7791411042944785, 'no_speech_prob': 0.19630029797554016}, {'id': 250, 'seek': 225644, 'start': 2256.44, 'end': 2263.6, 'text': ' we are computing the join of it that is all forget the control flow graph now right now just', 'tokens': [50364, 321, 366, 15866, 264, 3917, 295, 309, 300, 307, 439, 2870, 264, 1969, 3095, 4295, 586, 558, 586, 445, 50722], 'temperature': 0.0, 'avg_logprob': -0.17918273210525512, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.004369812086224556}, {'id': 251, 'seek': 225644, 'start': 2263.6, 'end': 2269.36, 'text': ' talk about the distinct you know the lattice you know you have the subset lattice of definitions', 'tokens': [50722, 751, 466, 264, 10644, 291, 458, 264, 34011, 291, 458, 291, 362, 264, 25993, 34011, 295, 21988, 51010], 'temperature': 0.0, 'avg_logprob': -0.17918273210525512, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.004369812086224556}, {'id': 252, 'seek': 225644, 'start': 2269.36, 'end': 2277.4, 'text': ' and you have the transfer function which is in minus skill union gen now for this particular', 'tokens': [51010, 293, 291, 362, 264, 5003, 2445, 597, 307, 294, 3175, 5389, 11671, 1049, 586, 337, 341, 1729, 51412], 'temperature': 0.0, 'avg_logprob': -0.17918273210525512, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.004369812086224556}, {'id': 253, 'seek': 225644, 'start': 2277.4, 'end': 2282.96, 'text': ' function on that lattice tell me what happens now there is no predecessor successor nothing is there', 'tokens': [51412, 2445, 322, 300, 34011, 980, 385, 437, 2314, 586, 456, 307, 572, 34991, 31864, 1825, 307, 456, 51690], 'temperature': 0.0, 'avg_logprob': -0.17918273210525512, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.004369812086224556}, {'id': 254, 'seek': 228296, 'start': 2282.96, 'end': 2290.88, 'text': ' so is this function if the form of this function distributive over this lattice is the question', 'tokens': [50364, 370, 307, 341, 2445, 498, 264, 1254, 295, 341, 2445, 4400, 17254, 670, 341, 34011, 307, 264, 1168, 50760], 'temperature': 0.0, 'avg_logprob': -0.2933671220820001, 'compression_ratio': 1.6166666666666667, 'no_speech_prob': 0.004372674506157637}, {'id': 255, 'seek': 228296, 'start': 2290.88, 'end': 2302.2, 'text': ' how will you do it so what is the stupidity how do I distribute it so what are you trying to prove', 'tokens': [50760, 577, 486, 291, 360, 309, 370, 437, 307, 264, 6631, 507, 577, 360, 286, 20594, 309, 370, 437, 366, 291, 1382, 281, 7081, 51326], 'temperature': 0.0, 'avg_logprob': -0.2933671220820001, 'compression_ratio': 1.6166666666666667, 'no_speech_prob': 0.004372674506157637}, {'id': 256, 'seek': 230220, 'start': 2302.2, 'end': 2322.7999999999997, 'text': ' what is the theory we are trying to prove yes yes so if I have if I take FA union join FB this', 'tokens': [50364, 437, 307, 264, 5261, 321, 366, 1382, 281, 7081, 2086, 2086, 370, 498, 286, 362, 498, 286, 747, 19894, 11671, 3917, 479, 33, 341, 51394], 'temperature': 0.0, 'avg_logprob': -0.28624357495989117, 'compression_ratio': 1.146341463414634, 'no_speech_prob': 0.05174931511282921}, {'id': 257, 'seek': 232280, 'start': 2322.8, 'end': 2336.52, 'text': ' is going to be the same as right so is it hard to show just write your in and out equations put', 'tokens': [50364, 307, 516, 281, 312, 264, 912, 382, 558, 370, 307, 309, 1152, 281, 855, 445, 2464, 428, 294, 293, 484, 11787, 829, 51050], 'temperature': 0.0, 'avg_logprob': -0.10775570736991034, 'compression_ratio': 1.6, 'no_speech_prob': 0.06720093637704849}, {'id': 258, 'seek': 232280, 'start': 2336.52, 'end': 2343.76, 'text': ' it in this form and see what you get okay so so I will give it for homework this is not this is', 'tokens': [51050, 309, 294, 341, 1254, 293, 536, 437, 291, 483, 1392, 370, 370, 286, 486, 976, 309, 337, 14578, 341, 307, 406, 341, 307, 51412], 'temperature': 0.0, 'avg_logprob': -0.10775570736991034, 'compression_ratio': 1.6, 'no_speech_prob': 0.06720093637704849}, {'id': 259, 'seek': 232280, 'start': 2343.76, 'end': 2350.04, 'text': ' actually trivial there is not much truth I mean just a matter of like doing it like properly now', 'tokens': [51412, 767, 26703, 456, 307, 406, 709, 3494, 286, 914, 445, 257, 1871, 295, 411, 884, 309, 411, 6108, 586, 51726], 'temperature': 0.0, 'avg_logprob': -0.10775570736991034, 'compression_ratio': 1.6, 'no_speech_prob': 0.06720093637704849}, {'id': 260, 'seek': 235004, 'start': 2350.04, 'end': 2355.72, 'text': ' let us look at this particular equation let us look at the MOP solution can you tell me something', 'tokens': [50364, 718, 505, 574, 412, 341, 1729, 5367, 718, 505, 574, 412, 264, 376, 12059, 3827, 393, 291, 980, 385, 746, 50648], 'temperature': 0.0, 'avg_logprob': -0.11497724321153428, 'compression_ratio': 1.9170731707317072, 'no_speech_prob': 0.00647873617708683}, {'id': 261, 'seek': 235004, 'start': 2355.72, 'end': 2362.48, 'text': ' about the relation between these two forms between the MOP and MFP solutions what are we doing a see', 'tokens': [50648, 466, 264, 9721, 1296, 613, 732, 6422, 1296, 264, 376, 12059, 293, 376, 45882, 6547, 437, 366, 321, 884, 257, 536, 50986], 'temperature': 0.0, 'avg_logprob': -0.11497724321153428, 'compression_ratio': 1.9170731707317072, 'no_speech_prob': 0.00647873617708683}, {'id': 262, 'seek': 235004, 'start': 2362.48, 'end': 2369.2799999999997, 'text': " that your F's are monotonic functions right so can you use that information to say something about", 'tokens': [50986, 300, 428, 479, 311, 366, 1108, 310, 11630, 6828, 558, 370, 393, 291, 764, 300, 1589, 281, 584, 746, 466, 51326], 'temperature': 0.0, 'avg_logprob': -0.11497724321153428, 'compression_ratio': 1.9170731707317072, 'no_speech_prob': 0.00647873617708683}, {'id': 263, 'seek': 235004, 'start': 2369.2799999999997, 'end': 2377.4, 'text': ' this among these two guys which of them will be higher so is there a relation between these two', 'tokens': [51326, 341, 3654, 613, 732, 1074, 597, 295, 552, 486, 312, 2946, 370, 307, 456, 257, 9721, 1296, 613, 732, 51732], 'temperature': 0.0, 'avg_logprob': -0.11497724321153428, 'compression_ratio': 1.9170731707317072, 'no_speech_prob': 0.00647873617708683}, {'id': 264, 'seek': 237740, 'start': 2377.56, 'end': 2386.96, 'text': ' guys so I get some values of this is what if this is a distributive framework instead let us say I', 'tokens': [50372, 1074, 370, 286, 483, 512, 4190, 295, 341, 307, 437, 498, 341, 307, 257, 4400, 17254, 8388, 2602, 718, 505, 584, 286, 50842], 'temperature': 0.0, 'avg_logprob': -0.27579215787491707, 'compression_ratio': 1.4592592592592593, 'no_speech_prob': 0.0329914428293705}, {'id': 265, 'seek': 237740, 'start': 2386.96, 'end': 2401.76, 'text': ' compute alpha as FA union FB and I compute beta as F of A union B sorry A join B right if you join', 'tokens': [50842, 14722, 8961, 382, 19894, 11671, 479, 33, 293, 286, 14722, 9861, 382, 479, 295, 316, 11671, 363, 2597, 316, 3917, 363, 558, 498, 291, 3917, 51582], 'temperature': 0.0, 'avg_logprob': -0.27579215787491707, 'compression_ratio': 1.4592592592592593, 'no_speech_prob': 0.0329914428293705}, {'id': 266, 'seek': 240176, 'start': 2401.76, 'end': 2411.28, 'text': ' FB or A join B right so now the question is that can I can I tell something about alpha and beta', 'tokens': [50364, 479, 33, 420, 316, 3917, 363, 558, 370, 586, 264, 1168, 307, 300, 393, 286, 393, 286, 980, 746, 466, 8961, 293, 9861, 50840], 'temperature': 0.0, 'avg_logprob': -0.1546039084593455, 'compression_ratio': 1.537190082644628, 'no_speech_prob': 0.018503284081816673}, {'id': 267, 'seek': 240176, 'start': 2411.28, 'end': 2429.36, 'text': ' some relation between alpha and beta so what do you know you know that A join B is bigger', 'tokens': [50840, 512, 9721, 1296, 8961, 293, 9861, 370, 437, 360, 291, 458, 291, 458, 300, 316, 3917, 363, 307, 3801, 51744], 'temperature': 0.0, 'avg_logprob': -0.1546039084593455, 'compression_ratio': 1.537190082644628, 'no_speech_prob': 0.018503284081816673}, {'id': 268, 'seek': 242936, 'start': 2429.36, 'end': 2443.2000000000003, 'text': ' than both A and B right by the definition of join okay what else do you know you know that', 'tokens': [50364, 813, 1293, 316, 293, 363, 558, 538, 264, 7123, 295, 3917, 1392, 437, 1646, 360, 291, 458, 291, 458, 300, 51056], 'temperature': 0.0, 'avg_logprob': -0.14629114375394933, 'compression_ratio': 1.5284552845528456, 'no_speech_prob': 0.011097606271505356}, {'id': 269, 'seek': 242936, 'start': 2443.2000000000003, 'end': 2455.6800000000003, 'text': ' because it is a monotonic function you know that A is less than FA B is less than FB and her very', 'tokens': [51056, 570, 309, 307, 257, 1108, 310, 11630, 2445, 291, 458, 300, 316, 307, 1570, 813, 19894, 363, 307, 1570, 813, 479, 33, 293, 720, 588, 51680], 'temperature': 0.0, 'avg_logprob': -0.14629114375394933, 'compression_ratio': 1.5284552845528456, 'no_speech_prob': 0.011097606271505356}, {'id': 270, 'seek': 245568, 'start': 2455.68, 'end': 2463.04, 'text': ' good okay so which is less than equal to which one so like you are right maybe that you are', 'tokens': [50364, 665, 1392, 370, 597, 307, 1570, 813, 2681, 281, 597, 472, 370, 411, 291, 366, 558, 1310, 300, 291, 366, 50732], 'temperature': 0.0, 'avg_logprob': -0.1512091053065969, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.012207698076963425}, {'id': 271, 'seek': 245568, 'start': 2463.04, 'end': 2472.7599999999998, 'text': ' just reasoning in slightly different order I guess so this is going to be the case right right', 'tokens': [50732, 445, 21577, 294, 4748, 819, 1668, 286, 2041, 370, 341, 307, 516, 281, 312, 264, 1389, 558, 558, 51218], 'temperature': 0.0, 'avg_logprob': -0.1512091053065969, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.012207698076963425}, {'id': 272, 'seek': 245568, 'start': 2472.7599999999998, 'end': 2483.52, 'text': ' so if this is the case if this is the case then can you establish a relation between MOP and', 'tokens': [51218, 370, 498, 341, 307, 264, 1389, 498, 341, 307, 264, 1389, 550, 393, 291, 8327, 257, 9721, 1296, 376, 12059, 293, 51756], 'temperature': 0.0, 'avg_logprob': -0.1512091053065969, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.012207698076963425}, {'id': 273, 'seek': 248352, 'start': 2483.52, 'end': 2498.56, 'text': ' FNFP so what is the relationship between MOP and FNFP which one is which one the upper one', 'tokens': [50364, 479, 45, 45882, 370, 437, 307, 264, 2480, 1296, 376, 12059, 293, 479, 45, 45882, 597, 472, 307, 597, 472, 264, 6597, 472, 51116], 'temperature': 0.0, 'avg_logprob': -0.13546028402116564, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.011831551790237427}, {'id': 274, 'seek': 248352, 'start': 2498.56, 'end': 2503.2, 'text': ' looks like MOP right the lower one looks like MFP where we first you take the join and then', 'tokens': [51116, 1542, 411, 376, 12059, 558, 264, 3126, 472, 1542, 411, 376, 45882, 689, 321, 700, 291, 747, 264, 3917, 293, 550, 51348], 'temperature': 0.0, 'avg_logprob': -0.13546028402116564, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.011831551790237427}, {'id': 275, 'seek': 248352, 'start': 2503.2, 'end': 2513.12, 'text': ' apply the function right so in that case your MOP solution less than equal to the MFP solution', 'tokens': [51348, 3079, 264, 2445, 558, 370, 294, 300, 1389, 428, 376, 12059, 3827, 1570, 813, 2681, 281, 264, 376, 45882, 3827, 51844], 'temperature': 0.0, 'avg_logprob': -0.13546028402116564, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.011831551790237427}, {'id': 276, 'seek': 251312, 'start': 2513.12, 'end': 2523.92, 'text': ' so when what does less than equal to mean if this solution is this solution then what do we say this', 'tokens': [50364, 370, 562, 437, 775, 1570, 813, 2681, 281, 914, 498, 341, 3827, 307, 341, 3827, 550, 437, 360, 321, 584, 341, 50904], 'temperature': 0.0, 'avg_logprob': -0.2058478732441747, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.00031466857763007283}, {'id': 277, 'seek': 251312, 'start': 2523.92, 'end': 2534.64, 'text': ' over approximates right so essentially what is going on right now okay so then essentially', 'tokens': [50904, 670, 8542, 1024, 558, 370, 4476, 437, 307, 516, 322, 558, 586, 1392, 370, 550, 4476, 51440], 'temperature': 0.0, 'avg_logprob': -0.2058478732441747, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.00031466857763007283}, {'id': 278, 'seek': 253464, 'start': 2534.64, 'end': 2555.2799999999997, 'text': ' what is going on is the MFP solution over approximates the MOP solution so I have left', 'tokens': [50364, 437, 307, 516, 322, 307, 264, 376, 45882, 3827, 670, 8542, 1024, 264, 376, 12059, 3827, 370, 286, 362, 1411, 51396], 'temperature': 0.0, 'avg_logprob': -0.1715132106434215, 'compression_ratio': 1.4015151515151516, 'no_speech_prob': 0.03946572169661522}, {'id': 279, 'seek': 253464, 'start': 2555.2799999999997, 'end': 2559.72, 'text': ' a lot of exercise for you these are like sort of simple discrete math assignments there is nothing', 'tokens': [51396, 257, 688, 295, 5380, 337, 291, 613, 366, 411, 1333, 295, 2199, 27706, 5221, 22546, 456, 307, 1825, 51618], 'temperature': 0.0, 'avg_logprob': -0.1715132106434215, 'compression_ratio': 1.4015151515151516, 'no_speech_prob': 0.03946572169661522}, {'id': 280, 'seek': 255972, 'start': 2559.72, 'end': 2565.3199999999997, 'text': ' more to it right so try these out at home like you will really be convinced you will be able', 'tokens': [50364, 544, 281, 309, 558, 370, 853, 613, 484, 412, 1280, 411, 291, 486, 534, 312, 12561, 291, 486, 312, 1075, 50644], 'temperature': 0.0, 'avg_logprob': -0.12580595577464385, 'compression_ratio': 1.7757009345794392, 'no_speech_prob': 0.26677820086479187}, {'id': 281, 'seek': 255972, 'start': 2565.3199999999997, 'end': 2569.08, 'text': ' to convince yourself that what is going on they are just a matter of putting things together', 'tokens': [50644, 281, 13447, 1803, 300, 437, 307, 516, 322, 436, 366, 445, 257, 1871, 295, 3372, 721, 1214, 50832], 'temperature': 0.0, 'avg_logprob': -0.12580595577464385, 'compression_ratio': 1.7757009345794392, 'no_speech_prob': 0.26677820086479187}, {'id': 282, 'seek': 255972, 'start': 2569.08, 'end': 2575.9199999999996, 'text': ' there is nothing more to it so then essentially what you can say is the MFP solution will always', 'tokens': [50832, 456, 307, 1825, 544, 281, 309, 370, 550, 4476, 437, 291, 393, 584, 307, 264, 376, 45882, 3827, 486, 1009, 51174], 'temperature': 0.0, 'avg_logprob': -0.12580595577464385, 'compression_ratio': 1.7757009345794392, 'no_speech_prob': 0.26677820086479187}, {'id': 283, 'seek': 255972, 'start': 2575.9199999999996, 'end': 2587.9199999999996, 'text': ' over approximate the MOP solution what does it mean what does that really mean guys what happened', 'tokens': [51174, 670, 30874, 264, 376, 12059, 3827, 437, 775, 309, 914, 437, 775, 300, 534, 914, 1074, 437, 2011, 51774], 'temperature': 0.0, 'avg_logprob': -0.12580595577464385, 'compression_ratio': 1.7757009345794392, 'no_speech_prob': 0.26677820086479187}, {'id': 284, 'seek': 258792, 'start': 2587.92, 'end': 2597.8, 'text': ' you guys did not have coffee that tea was not good is it yes so it will always compute a safe', 'tokens': [50364, 291, 1074, 630, 406, 362, 4982, 300, 5817, 390, 406, 665, 307, 309, 2086, 370, 309, 486, 1009, 14722, 257, 3273, 50858], 'temperature': 0.0, 'avg_logprob': -0.177291659747853, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.019684113562107086}, {'id': 285, 'seek': 258792, 'start': 2597.8, 'end': 2604.64, 'text': ' solution so it may be the case that you do not get the best solution but you will surely get the', 'tokens': [50858, 3827, 370, 309, 815, 312, 264, 1389, 300, 291, 360, 406, 483, 264, 1151, 3827, 457, 291, 486, 11468, 483, 264, 51200], 'temperature': 0.0, 'avg_logprob': -0.177291659747853, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.019684113562107086}, {'id': 286, 'seek': 258792, 'start': 2604.64, 'end': 2610.04, 'text': ' safe solution you will surely get a safe solution so now let us summarize this whole business that', 'tokens': [51200, 3273, 3827, 291, 486, 11468, 483, 257, 3273, 3827, 370, 586, 718, 505, 20858, 341, 1379, 1606, 300, 51470], 'temperature': 0.0, 'avg_logprob': -0.177291659747853, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.019684113562107086}, {'id': 287, 'seek': 261004, 'start': 2610.04, 'end': 2620.88, 'text': ' we so essentially the idea is that but why not compute MOP right for even analysis like', 'tokens': [50364, 321, 370, 4476, 264, 1558, 307, 300, 457, 983, 406, 14722, 376, 12059, 558, 337, 754, 5215, 411, 50906], 'temperature': 0.0, 'avg_logprob': -0.11455094814300537, 'compression_ratio': 1.7329192546583851, 'no_speech_prob': 0.04453298822045326}, {'id': 288, 'seek': 261004, 'start': 2620.88, 'end': 2632.0, 'text': ' constant propagation computing the MOP solution is undecidable forget even high complexity right', 'tokens': [50906, 5754, 38377, 15866, 264, 376, 12059, 3827, 307, 674, 3045, 38089, 2870, 754, 1090, 14024, 558, 51462], 'temperature': 0.0, 'avg_logprob': -0.11455094814300537, 'compression_ratio': 1.7329192546583851, 'no_speech_prob': 0.04453298822045326}, {'id': 289, 'seek': 261004, 'start': 2632.0, 'end': 2638.16, 'text': ' so there is even no not even a hope of computing the MOP solution right so the only way to get', 'tokens': [51462, 370, 456, 307, 754, 572, 406, 754, 257, 1454, 295, 15866, 264, 376, 12059, 3827, 558, 370, 264, 787, 636, 281, 483, 51770], 'temperature': 0.0, 'avg_logprob': -0.11455094814300537, 'compression_ratio': 1.7329192546583851, 'no_speech_prob': 0.04453298822045326}, {'id': 290, 'seek': 263816, 'start': 2638.16, 'end': 2643.6, 'text': ' a solution is to get the MFP solution so now the whole business looks like this key if it is a', 'tokens': [50364, 257, 3827, 307, 281, 483, 264, 376, 45882, 3827, 370, 586, 264, 1379, 1606, 1542, 411, 341, 2141, 498, 309, 307, 257, 50636], 'temperature': 0.0, 'avg_logprob': -0.24365926256366804, 'compression_ratio': 1.5196850393700787, 'no_speech_prob': 0.021513506770133972}, {'id': 291, 'seek': 263816, 'start': 2643.6, 'end': 2653.3999999999996, 'text': ' monotone framework what does a monotone framework mean that you have you you satisfy ACC on a on a', 'tokens': [50636, 1108, 310, 546, 8388, 437, 775, 257, 1108, 310, 546, 8388, 914, 300, 291, 362, 291, 291, 19319, 42251, 322, 257, 322, 257, 51126], 'temperature': 0.0, 'avg_logprob': -0.24365926256366804, 'compression_ratio': 1.5196850393700787, 'no_speech_prob': 0.021513506770133972}, {'id': 292, 'seek': 265340, 'start': 2653.4, 'end': 2671.2400000000002, 'text': ' monotonic function right so if you have a monotone framework in that case your MFP solution over', 'tokens': [50364, 1108, 310, 11630, 2445, 558, 370, 498, 291, 362, 257, 1108, 310, 546, 8388, 294, 300, 1389, 428, 376, 45882, 3827, 670, 51256], 'temperature': 0.0, 'avg_logprob': -0.09555668526507438, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.027550173923373222}, {'id': 293, 'seek': 265340, 'start': 2671.2400000000002, 'end': 2678.52, 'text': ' approximates your MOP solution this is the first learning the second learning is that if you have', 'tokens': [51256, 8542, 1024, 428, 376, 12059, 3827, 341, 307, 264, 700, 2539, 264, 1150, 2539, 307, 300, 498, 291, 362, 51620], 'temperature': 0.0, 'avg_logprob': -0.09555668526507438, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.027550173923373222}, {'id': 294, 'seek': 267852, 'start': 2678.52, 'end': 2685.08, 'text': ' a better structure if you have a distributive framework what is the distributive framework', 'tokens': [50364, 257, 1101, 3877, 498, 291, 362, 257, 4400, 17254, 8388, 437, 307, 264, 4400, 17254, 8388, 50692], 'temperature': 0.0, 'avg_logprob': -0.12904940711127388, 'compression_ratio': 1.75625, 'no_speech_prob': 0.11474073678255081}, {'id': 295, 'seek': 267852, 'start': 2685.08, 'end': 2692.36, 'text': ' when your function is distributive the function distributes over joins in that case your MOP', 'tokens': [50692, 562, 428, 2445, 307, 4400, 17254, 264, 2445, 4400, 1819, 670, 24397, 294, 300, 1389, 428, 376, 12059, 51056], 'temperature': 0.0, 'avg_logprob': -0.12904940711127388, 'compression_ratio': 1.75625, 'no_speech_prob': 0.11474073678255081}, {'id': 296, 'seek': 267852, 'start': 2692.36, 'end': 2701.84, 'text': ' solution is equal to the MFP solution now let us go back to our analysis so people should wake up', 'tokens': [51056, 3827, 307, 2681, 281, 264, 376, 45882, 3827, 586, 718, 505, 352, 646, 281, 527, 5215, 370, 561, 820, 6634, 493, 51530], 'temperature': 0.0, 'avg_logprob': -0.12904940711127388, 'compression_ratio': 1.75625, 'no_speech_prob': 0.11474073678255081}, {'id': 297, 'seek': 270184, 'start': 2701.84, 'end': 2710.4, 'text': ' now people have slept with the the mathematical part of it okay let us go back to our analysis', 'tokens': [50364, 586, 561, 362, 17400, 365, 264, 264, 18894, 644, 295, 309, 1392, 718, 505, 352, 646, 281, 527, 5215, 50792], 'temperature': 0.0, 'avg_logprob': -0.11191930209889131, 'compression_ratio': 1.8768472906403941, 'no_speech_prob': 0.07263390719890594}, {'id': 298, 'seek': 270184, 'start': 2710.4, 'end': 2717.96, 'text': ' in our analysis let us look at reaching definitions reaching definitions was it distributive has', 'tokens': [50792, 294, 527, 5215, 718, 505, 574, 412, 9906, 21988, 9906, 21988, 390, 309, 4400, 17254, 575, 51170], 'temperature': 0.0, 'avg_logprob': -0.11191930209889131, 'compression_ratio': 1.8768472906403941, 'no_speech_prob': 0.07263390719890594}, {'id': 299, 'seek': 270184, 'start': 2717.96, 'end': 2725.6000000000004, 'text': ' somebody able to prove that so take my word for it till you prove it to yourself like to me if', 'tokens': [51170, 2618, 1075, 281, 7081, 300, 370, 747, 452, 1349, 337, 309, 4288, 291, 7081, 309, 281, 1803, 411, 281, 385, 498, 51552], 'temperature': 0.0, 'avg_logprob': -0.11191930209889131, 'compression_ratio': 1.8768472906403941, 'no_speech_prob': 0.07263390719890594}, {'id': 300, 'seek': 270184, 'start': 2725.6000000000004, 'end': 2731.08, 'text': ' you are not like if it does not turn out to be the case but assuming that reaching definitions', 'tokens': [51552, 291, 366, 406, 411, 498, 309, 775, 406, 1261, 484, 281, 312, 264, 1389, 457, 11926, 300, 9906, 21988, 51826], 'temperature': 0.0, 'avg_logprob': -0.11191930209889131, 'compression_ratio': 1.8768472906403941, 'no_speech_prob': 0.07263390719890594}, {'id': 301, 'seek': 273108, 'start': 2731.36, 'end': 2739.16, 'text': ' it is a distributive framework because of that I actually even if I compute my MFP solution I', 'tokens': [50378, 309, 307, 257, 4400, 17254, 8388, 570, 295, 300, 286, 767, 754, 498, 286, 14722, 452, 376, 45882, 3827, 286, 50768], 'temperature': 0.0, 'avg_logprob': -0.14810911325307993, 'compression_ratio': 1.7784810126582278, 'no_speech_prob': 0.0010804616613313556}, {'id': 302, 'seek': 273108, 'start': 2739.16, 'end': 2744.08, 'text': ' actually end up getting the MOP solution I still get the optimal solution still get the best', 'tokens': [50768, 767, 917, 493, 1242, 264, 376, 12059, 3827, 286, 920, 483, 264, 16252, 3827, 920, 483, 264, 1151, 51014], 'temperature': 0.0, 'avg_logprob': -0.14810911325307993, 'compression_ratio': 1.7784810126582278, 'no_speech_prob': 0.0010804616613313556}, {'id': 303, 'seek': 273108, 'start': 2744.08, 'end': 2758.68, 'text': ' solution what about constant propagation is it distributive why is no why no why no give me an', 'tokens': [51014, 3827, 437, 466, 5754, 38377, 307, 309, 4400, 17254, 983, 307, 572, 983, 572, 983, 572, 976, 385, 364, 51744], 'temperature': 0.0, 'avg_logprob': -0.14810911325307993, 'compression_ratio': 1.7784810126582278, 'no_speech_prob': 0.0010804616613313556}, {'id': 304, 'seek': 275868, 'start': 2758.68, 'end': 2762.3999999999996, 'text': ' example where it is not distributive so when it is not distributed things are easy now give', 'tokens': [50364, 1365, 689, 309, 307, 406, 4400, 17254, 370, 562, 309, 307, 406, 12631, 721, 366, 1858, 586, 976, 50550], 'temperature': 0.0, 'avg_logprob': -0.1925099169621702, 'compression_ratio': 1.9928057553956835, 'no_speech_prob': 0.029687313362956047}, {'id': 305, 'seek': 275868, 'start': 2762.3999999999996, 'end': 2770.44, 'text': ' me a counter example you are done give me a counter example which shows it is not distributive', 'tokens': [50550, 385, 257, 5682, 1365, 291, 366, 1096, 976, 385, 257, 5682, 1365, 597, 3110, 309, 307, 406, 4400, 17254, 50952], 'temperature': 0.0, 'avg_logprob': -0.1925099169621702, 'compression_ratio': 1.9928057553956835, 'no_speech_prob': 0.029687313362956047}, {'id': 306, 'seek': 275868, 'start': 2770.44, 'end': 2779.56, 'text': ' hey we saw it saw an example yesterday remember the example can you reproduce that example', 'tokens': [50952, 4177, 321, 1866, 309, 1866, 364, 1365, 5186, 1604, 264, 1365, 393, 291, 29501, 300, 1365, 51408], 'temperature': 0.0, 'avg_logprob': -0.1925099169621702, 'compression_ratio': 1.9928057553956835, 'no_speech_prob': 0.029687313362956047}, {'id': 307, 'seek': 277956, 'start': 2779.56, 'end': 2795.6, 'text': ' right right so let us do that so it was x equals 2 y equals 3 it was x equals 3 y equals 2 and', 'tokens': [50364, 558, 558, 370, 718, 505, 360, 300, 370, 309, 390, 2031, 6915, 568, 288, 6915, 805, 309, 390, 2031, 6915, 805, 288, 6915, 568, 293, 51166], 'temperature': 0.0, 'avg_logprob': -0.13484056893881266, 'compression_ratio': 1.7922077922077921, 'no_speech_prob': 0.0173942893743515}, {'id': 308, 'seek': 277956, 'start': 2795.6, 'end': 2803.04, 'text': ' we want to get a solution here so if I try to get the if I take that if I take the apply the', 'tokens': [51166, 321, 528, 281, 483, 257, 3827, 510, 370, 498, 286, 853, 281, 483, 264, 498, 286, 747, 300, 498, 286, 747, 264, 3079, 264, 51538], 'temperature': 0.0, 'avg_logprob': -0.13484056893881266, 'compression_ratio': 1.7922077922077921, 'no_speech_prob': 0.0173942893743515}, {'id': 309, 'seek': 277956, 'start': 2803.04, 'end': 2808.36, 'text': ' functions and then take a meet so what happens if we and there we have z equals x plus y', 'tokens': [51538, 6828, 293, 550, 747, 257, 1677, 370, 437, 2314, 498, 321, 293, 456, 321, 362, 710, 6915, 2031, 1804, 288, 51804], 'temperature': 0.0, 'avg_logprob': -0.13484056893881266, 'compression_ratio': 1.7922077922077921, 'no_speech_prob': 0.0173942893743515}, {'id': 310, 'seek': 280836, 'start': 2808.36, 'end': 2819.84, 'text': ' so if I apply the functions then what happens then I get so I get here 2 comma 3 and here I', 'tokens': [50364, 370, 498, 286, 3079, 264, 6828, 550, 437, 2314, 550, 286, 483, 370, 286, 483, 510, 568, 22117, 805, 293, 510, 286, 50938], 'temperature': 0.0, 'avg_logprob': -0.1376580374581473, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.0030114874243736267}, {'id': 311, 'seek': 280836, 'start': 2819.84, 'end': 2825.6, 'text': ' end up getting 3 comma 2 but I am applying I am getting the MOP solution so I am not allowed', 'tokens': [50938, 917, 493, 1242, 805, 22117, 568, 457, 286, 669, 9275, 286, 669, 1242, 264, 376, 12059, 3827, 370, 286, 669, 406, 4350, 51226], 'temperature': 0.0, 'avg_logprob': -0.1376580374581473, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.0030114874243736267}, {'id': 312, 'seek': 280836, 'start': 2825.6, 'end': 2829.96, 'text': ' to merge them yet so I will merge them here wherever I decide the solution right so now', 'tokens': [51226, 281, 22183, 552, 1939, 370, 286, 486, 22183, 552, 510, 8660, 286, 4536, 264, 3827, 558, 370, 586, 51444], 'temperature': 0.0, 'avg_logprob': -0.1376580374581473, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.0030114874243736267}, {'id': 313, 'seek': 282996, 'start': 2829.96, 'end': 2845.76, 'text': ' I will get it and I will get 2 comma 3 comma 5 where did I go really far okay so what do we', 'tokens': [50364, 286, 486, 483, 309, 293, 286, 486, 483, 568, 22117, 805, 22117, 1025, 689, 630, 286, 352, 534, 1400, 1392, 370, 437, 360, 321, 51154], 'temperature': 0.0, 'avg_logprob': -0.13240791284121, 'compression_ratio': 1.5083333333333333, 'no_speech_prob': 0.12829561531543732}, {'id': 314, 'seek': 282996, 'start': 2845.76, 'end': 2852.4, 'text': ' get with the MOP solution so what is the MOP solution then then I take a merge so I apply', 'tokens': [51154, 483, 365, 264, 376, 12059, 3827, 370, 437, 307, 264, 376, 12059, 3827, 550, 550, 286, 747, 257, 22183, 370, 286, 3079, 51486], 'temperature': 0.0, 'avg_logprob': -0.13240791284121, 'compression_ratio': 1.5083333333333333, 'no_speech_prob': 0.12829561531543732}, {'id': 315, 'seek': 285240, 'start': 2852.4, 'end': 2865.44, 'text': ' the function still further that becomes 2 3 and 5 join 2 3 2 and 5 that is my MOP solution', 'tokens': [50364, 264, 2445, 920, 3052, 300, 3643, 568, 805, 293, 1025, 3917, 568, 805, 568, 293, 1025, 300, 307, 452, 376, 12059, 3827, 51016], 'temperature': 0.0, 'avg_logprob': -0.11778227163820851, 'compression_ratio': 1.7452830188679245, 'no_speech_prob': 0.38273581862449646}, {'id': 316, 'seek': 285240, 'start': 2865.44, 'end': 2880.64, 'text': ' and that will be what that will be not constant top not constant and 5 that is my MOP solution', 'tokens': [51016, 293, 300, 486, 312, 437, 300, 486, 312, 406, 5754, 1192, 406, 5754, 293, 1025, 300, 307, 452, 376, 12059, 3827, 51776], 'temperature': 0.0, 'avg_logprob': -0.11778227163820851, 'compression_ratio': 1.7452830188679245, 'no_speech_prob': 0.38273581862449646}, {'id': 317, 'seek': 288064, 'start': 2880.7599999999998, 'end': 2886.8799999999997, 'text': ' what is my MOP solution or where I do the other way round the other side of distributivity what', 'tokens': [50370, 437, 307, 452, 376, 12059, 3827, 420, 689, 286, 360, 264, 661, 636, 3098, 264, 661, 1252, 295, 4400, 325, 4253, 437, 50676], 'temperature': 0.0, 'avg_logprob': -0.11329014426783511, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.023966588079929352}, {'id': 318, 'seek': 288064, 'start': 2886.8799999999997, 'end': 2894.16, 'text': ' will I do there first I will take the join as soon as I take a join between 2 and 3 and join', 'tokens': [50676, 486, 286, 360, 456, 700, 286, 486, 747, 264, 3917, 382, 2321, 382, 286, 747, 257, 3917, 1296, 568, 293, 805, 293, 3917, 51040], 'temperature': 0.0, 'avg_logprob': -0.11329014426783511, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.023966588079929352}, {'id': 319, 'seek': 288064, 'start': 2894.16, 'end': 2904.7599999999998, 'text': ' of 3 comma 2 and then I apply my f right which is my z equals x plus y right so this immediately', 'tokens': [51040, 295, 805, 22117, 568, 293, 550, 286, 3079, 452, 283, 558, 597, 307, 452, 710, 6915, 2031, 1804, 288, 558, 370, 341, 4258, 51570], 'temperature': 0.0, 'avg_logprob': -0.11329014426783511, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.023966588079929352}, {'id': 320, 'seek': 288064, 'start': 2904.7599999999998, 'end': 2910.52, 'text': ' becomes not constant not constant apply f on it which again gives me not constant not constant', 'tokens': [51570, 3643, 406, 5754, 406, 5754, 3079, 283, 322, 309, 597, 797, 2709, 385, 406, 5754, 406, 5754, 51858], 'temperature': 0.0, 'avg_logprob': -0.11329014426783511, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.023966588079929352}, {'id': 321, 'seek': 291052, 'start': 2911.08, 'end': 2919.2, 'text': ' so that it is constant propagation is not distributive because constant propagation is', 'tokens': [50392, 370, 300, 309, 307, 5754, 38377, 307, 406, 4400, 17254, 570, 5754, 38377, 307, 50798], 'temperature': 0.0, 'avg_logprob': -0.13872837725980783, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0010132233146578074}, {'id': 322, 'seek': 291052, 'start': 2919.2, 'end': 2926.72, 'text': ' not distributive so I cannot and getting the MOP solution is undecidable so there is no other', 'tokens': [50798, 406, 4400, 17254, 370, 286, 2644, 293, 1242, 264, 376, 12059, 3827, 307, 674, 3045, 38089, 370, 456, 307, 572, 661, 51174], 'temperature': 0.0, 'avg_logprob': -0.13872837725980783, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0010132233146578074}, {'id': 323, 'seek': 291052, 'start': 2926.72, 'end': 2934.12, 'text': ' option I compute the MFP solution which is still an over approximation of my MOP solution so the', 'tokens': [51174, 3614, 286, 14722, 264, 376, 45882, 3827, 597, 307, 920, 364, 670, 28023, 295, 452, 376, 12059, 3827, 370, 264, 51544], 'temperature': 0.0, 'avg_logprob': -0.13872837725980783, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0010132233146578074}, {'id': 324, 'seek': 291052, 'start': 2934.12, 'end': 2938.88, 'text': ' constant propagation we do not get the best solution we get something which is over approximation', 'tokens': [51544, 5754, 38377, 321, 360, 406, 483, 264, 1151, 3827, 321, 483, 746, 597, 307, 670, 28023, 51782], 'temperature': 0.0, 'avg_logprob': -0.13872837725980783, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0010132233146578074}, {'id': 325, 'seek': 293888, 'start': 2938.88, 'end': 2958.8, 'text': ' of that yeah no these are completely different things altogether separability and', 'tokens': [50364, 295, 300, 1338, 572, 613, 366, 2584, 819, 721, 19051, 3128, 2310, 293, 51360], 'temperature': 0.0, 'avg_logprob': -0.31516162086935606, 'compression_ratio': 1.125, 'no_speech_prob': 0.05435201898217201}, {'id': 326, 'seek': 295880, 'start': 2958.8, 'end': 2969.2000000000003, 'text': ' distributivity are different thing altogether they do not so distributivity is on the structure', 'tokens': [50364, 4400, 325, 4253, 366, 819, 551, 19051, 436, 360, 406, 370, 4400, 325, 4253, 307, 322, 264, 3877, 50884], 'temperature': 0.0, 'avg_logprob': -0.16882789425733613, 'compression_ratio': 1.9430051813471503, 'no_speech_prob': 0.011651979759335518}, {'id': 327, 'seek': 295880, 'start': 2969.2000000000003, 'end': 2975.5600000000004, 'text': ' of the function f right now the structure the function f could be could be non separable where', 'tokens': [50884, 295, 264, 2445, 283, 558, 586, 264, 3877, 264, 2445, 283, 727, 312, 727, 312, 2107, 3128, 712, 689, 51202], 'temperature': 0.0, 'avg_logprob': -0.16882789425733613, 'compression_ratio': 1.9430051813471503, 'no_speech_prob': 0.011651979759335518}, {'id': 328, 'seek': 295880, 'start': 2975.5600000000004, 'end': 2979.0, 'text': ' it is using things from other things that is a different matter but they are they are different', 'tokens': [51202, 309, 307, 1228, 721, 490, 661, 721, 300, 307, 257, 819, 1871, 457, 436, 366, 436, 366, 819, 51374], 'temperature': 0.0, 'avg_logprob': -0.16882789425733613, 'compression_ratio': 1.9430051813471503, 'no_speech_prob': 0.011651979759335518}, {'id': 329, 'seek': 295880, 'start': 2979.0, 'end': 2982.44, 'text': ' aspects I do not have readymade examples but you should be able to construct cases where', 'tokens': [51374, 7270, 286, 360, 406, 362, 1919, 10341, 5110, 457, 291, 820, 312, 1075, 281, 7690, 3331, 689, 51546], 'temperature': 0.0, 'avg_logprob': -0.16882789425733613, 'compression_ratio': 1.9430051813471503, 'no_speech_prob': 0.011651979759335518}, {'id': 330, 'seek': 298244, 'start': 2982.44, 'end': 2998.4, 'text': ' both the things can so it is safe for monotonic frameworks but for distributive frameworks it is', 'tokens': [50364, 1293, 264, 721, 393, 370, 309, 307, 3273, 337, 1108, 310, 11630, 29834, 457, 337, 4400, 17254, 29834, 309, 307, 51162], 'temperature': 0.0, 'avg_logprob': -0.1536012755499946, 'compression_ratio': 1.5245901639344261, 'no_speech_prob': 0.017146045342087746}, {'id': 331, 'seek': 298244, 'start': 2998.4, 'end': 3007.16, 'text': ' right so final summary is this so if I have a monotone framework consisting of a complete', 'tokens': [51162, 558, 370, 2572, 12691, 307, 341, 370, 498, 286, 362, 257, 1108, 310, 546, 8388, 33921, 295, 257, 3566, 51600], 'temperature': 0.0, 'avg_logprob': -0.1536012755499946, 'compression_ratio': 1.5245901639344261, 'no_speech_prob': 0.017146045342087746}, {'id': 332, 'seek': 300716, 'start': 3007.64, 'end': 3014.68, 'text': ' that satisfies ACC and a set of monotone functions that contain an identity element and is closed', 'tokens': [50388, 300, 44271, 42251, 293, 257, 992, 295, 1108, 310, 546, 6828, 300, 5304, 364, 6575, 4478, 293, 307, 5395, 50740], 'temperature': 0.0, 'avg_logprob': -0.19423933762770432, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.1188492625951767}, {'id': 333, 'seek': 300716, 'start': 3014.68, 'end': 3021.0, 'text': ' under function composition then I will essentially be able to if I compute the MFP solution I will', 'tokens': [50740, 833, 2445, 12686, 550, 286, 486, 4476, 312, 1075, 281, 498, 286, 14722, 264, 376, 45882, 3827, 286, 486, 51056], 'temperature': 0.0, 'avg_logprob': -0.19423933762770432, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.1188492625951767}, {'id': 334, 'seek': 300716, 'start': 3021.0, 'end': 3030.16, 'text': ' be able to get a safe solution and if I have a distributive framework with the correct spelling', 'tokens': [51056, 312, 1075, 281, 483, 257, 3273, 3827, 293, 498, 286, 362, 257, 4400, 17254, 8388, 365, 264, 3006, 22254, 51514], 'temperature': 0.0, 'avg_logprob': -0.19423933762770432, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.1188492625951767}, {'id': 335, 'seek': 303016, 'start': 3030.16, 'end': 3037.56, 'text': ' and a monotone framework sorry and the functions are also distributive in that case I get solutions', 'tokens': [50364, 293, 257, 1108, 310, 546, 8388, 2597, 293, 264, 6828, 366, 611, 4400, 17254, 294, 300, 1389, 286, 483, 6547, 50734], 'temperature': 0.0, 'avg_logprob': -0.16512621016729445, 'compression_ratio': 1.6589595375722543, 'no_speech_prob': 0.024394014850258827}, {'id': 336, 'seek': 303016, 'start': 3037.56, 'end': 3052.8399999999997, 'text': ' we I will be able to get the optimal solution the MFP solution so our reaching definitions', 'tokens': [50734, 321, 286, 486, 312, 1075, 281, 483, 264, 16252, 3827, 264, 376, 45882, 3827, 370, 527, 9906, 21988, 51498], 'temperature': 0.0, 'avg_logprob': -0.16512621016729445, 'compression_ratio': 1.6589595375722543, 'no_speech_prob': 0.024394014850258827}, {'id': 337, 'seek': 303016, 'start': 3052.8399999999997, 'end': 3060.14, 'text': ' the lattice was a complete lattice it satisfies ACC so every finite lattice is always a complete', 'tokens': [51498, 264, 34011, 390, 257, 3566, 34011, 309, 44271, 42251, 370, 633, 19362, 34011, 307, 1009, 257, 3566, 51863], 'temperature': 0.0, 'avg_logprob': -0.16512621016729445, 'compression_ratio': 1.6589595375722543, 'no_speech_prob': 0.024394014850258827}, {'id': 338, 'seek': 306014, 'start': 3060.14, 'end': 3069.06, 'text': ' lattice right because because there are no infinite sets anyway so you do that extra', 'tokens': [50364, 34011, 558, 570, 570, 456, 366, 572, 13785, 6352, 4033, 370, 291, 360, 300, 2857, 50810], 'temperature': 0.0, 'avg_logprob': -0.12630093403351614, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.0009846377652138472}, {'id': 339, 'seek': 306014, 'start': 3069.06, 'end': 3076.54, 'text': ' condition is not does not really matter right so the transfer functions are both monotonic', 'tokens': [50810, 4188, 307, 406, 775, 406, 534, 1871, 558, 370, 264, 5003, 6828, 366, 1293, 1108, 310, 11630, 51184], 'temperature': 0.0, 'avg_logprob': -0.12630093403351614, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.0009846377652138472}, {'id': 340, 'seek': 306014, 'start': 3076.54, 'end': 3080.98, 'text': ' and distributive so it will always end up computing the MFP solution so essentially', 'tokens': [51184, 293, 4400, 17254, 370, 309, 486, 1009, 917, 493, 15866, 264, 376, 45882, 3827, 370, 4476, 51406], 'temperature': 0.0, 'avg_logprob': -0.12630093403351614, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.0009846377652138472}, {'id': 341, 'seek': 306014, 'start': 3080.98, 'end': 3087.02, 'text': ' what we have now what with after all this big business what did we get we got a nice unified', 'tokens': [51406, 437, 321, 362, 586, 437, 365, 934, 439, 341, 955, 1606, 437, 630, 321, 483, 321, 658, 257, 1481, 26787, 51708], 'temperature': 0.0, 'avg_logprob': -0.12630093403351614, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.0009846377652138472}, {'id': 342, 'seek': 308702, 'start': 3087.02, 'end': 3096.9, 'text': ' framework a unified mathematically sound framework and what it gives is it gives me a nice checklist', 'tokens': [50364, 8388, 257, 26787, 44003, 1626, 8388, 293, 437, 309, 2709, 307, 309, 2709, 385, 257, 1481, 30357, 50858], 'temperature': 0.0, 'avg_logprob': -0.14889504443639998, 'compression_ratio': 1.7720930232558139, 'no_speech_prob': 0.08720438927412033}, {'id': 343, 'seek': 308702, 'start': 3096.9, 'end': 3101.86, 'text': " right even if you want don't want to do all the proofs and assume the people who did it before", 'tokens': [50858, 558, 754, 498, 291, 528, 500, 380, 528, 281, 360, 439, 264, 8177, 82, 293, 6552, 264, 561, 567, 630, 309, 949, 51106], 'temperature': 0.0, 'avg_logprob': -0.14889504443639998, 'compression_ratio': 1.7720930232558139, 'no_speech_prob': 0.08720438927412033}, {'id': 344, 'seek': 308702, 'start': 3101.86, 'end': 3108.02, 'text': ' you were smart enough to have done the smooth proof properly you can just trust them and use', 'tokens': [51106, 291, 645, 4069, 1547, 281, 362, 1096, 264, 5508, 8177, 6108, 291, 393, 445, 3361, 552, 293, 764, 51414], 'temperature': 0.0, 'avg_logprob': -0.14889504443639998, 'compression_ratio': 1.7720930232558139, 'no_speech_prob': 0.08720438927412033}, {'id': 345, 'seek': 308702, 'start': 3108.02, 'end': 3113.66, 'text': ' but you still get a nice checklist which says that now you do not have to do the termination', 'tokens': [51414, 457, 291, 920, 483, 257, 1481, 30357, 597, 1619, 300, 586, 291, 360, 406, 362, 281, 360, 264, 1433, 2486, 51696], 'temperature': 0.0, 'avg_logprob': -0.14889504443639998, 'compression_ratio': 1.7720930232558139, 'no_speech_prob': 0.08720438927412033}, {'id': 346, 'seek': 311366, 'start': 3113.66, 'end': 3118.94, 'text': ' proofs the soundness proofs for every analysis that you design separately you would not have', 'tokens': [50364, 8177, 82, 264, 1626, 1287, 8177, 82, 337, 633, 5215, 300, 291, 1715, 14759, 291, 576, 406, 362, 50628], 'temperature': 0.0, 'avg_logprob': -0.136132610654368, 'compression_ratio': 1.934959349593496, 'no_speech_prob': 0.381760835647583}, {'id': 347, 'seek': 311366, 'start': 3118.94, 'end': 3123.22, 'text': ' to argue about that remember how did we start doing the analysis that termination proof for', 'tokens': [50628, 281, 9695, 466, 300, 1604, 577, 630, 321, 722, 884, 264, 5215, 300, 1433, 2486, 8177, 337, 50842], 'temperature': 0.0, 'avg_logprob': -0.136132610654368, 'compression_ratio': 1.934959349593496, 'no_speech_prob': 0.381760835647583}, {'id': 348, 'seek': 311366, 'start': 3123.22, 'end': 3129.54, 'text': ' the reaching definition case we said oh there is a set of definitions but this set of definition', 'tokens': [50842, 264, 9906, 7123, 1389, 321, 848, 1954, 456, 307, 257, 992, 295, 21988, 457, 341, 992, 295, 7123, 51158], 'temperature': 0.0, 'avg_logprob': -0.136132610654368, 'compression_ratio': 1.934959349593496, 'no_speech_prob': 0.381760835647583}, {'id': 349, 'seek': 311366, 'start': 3129.54, 'end': 3134.42, 'text': ' only increase I can see this transfer function is doing that then it but it is I see the total', 'tokens': [51158, 787, 3488, 286, 393, 536, 341, 5003, 2445, 307, 884, 300, 550, 309, 457, 309, 307, 286, 536, 264, 3217, 51402], 'temperature': 0.0, 'avg_logprob': -0.136132610654368, 'compression_ratio': 1.934959349593496, 'no_speech_prob': 0.381760835647583}, {'id': 350, 'seek': 311366, 'start': 3134.42, 'end': 3140.18, 'text': ' number of definition is bounded so I was analyzing on the on that particular analysis think about a', 'tokens': [51402, 1230, 295, 7123, 307, 37498, 370, 286, 390, 23663, 322, 264, 322, 300, 1729, 5215, 519, 466, 257, 51690], 'temperature': 0.0, 'avg_logprob': -0.136132610654368, 'compression_ratio': 1.934959349593496, 'no_speech_prob': 0.381760835647583}, {'id': 351, 'seek': 314018, 'start': 3140.18, 'end': 3146.14, 'text': ' more complicated analysis doing that might be harder instead I can simply use my checklist I', 'tokens': [50364, 544, 6179, 5215, 884, 300, 1062, 312, 6081, 2602, 286, 393, 2935, 764, 452, 30357, 286, 50662], 'temperature': 0.0, 'avg_logprob': -0.13308273873678067, 'compression_ratio': 1.7419354838709677, 'no_speech_prob': 0.2623249888420105}, {'id': 352, 'seek': 314018, 'start': 3146.14, 'end': 3153.22, 'text': ' can simply say okay does my does is it a complete lattice does it satisfy ACC is it a monotone', 'tokens': [50662, 393, 2935, 584, 1392, 775, 452, 775, 307, 309, 257, 3566, 34011, 775, 309, 19319, 42251, 307, 309, 257, 1108, 310, 546, 51016], 'temperature': 0.0, 'avg_logprob': -0.13308273873678067, 'compression_ratio': 1.7419354838709677, 'no_speech_prob': 0.2623249888420105}, {'id': 353, 'seek': 314018, 'start': 3153.22, 'end': 3158.66, 'text': ' framework is a distributive framework so these are small questions to answer on a given given', 'tokens': [51016, 8388, 307, 257, 4400, 17254, 8388, 370, 613, 366, 1359, 1651, 281, 1867, 322, 257, 2212, 2212, 51288], 'temperature': 0.0, 'avg_logprob': -0.13308273873678067, 'compression_ratio': 1.7419354838709677, 'no_speech_prob': 0.2623249888420105}, {'id': 354, 'seek': 314018, 'start': 3158.66, 'end': 3164.3799999999997, 'text': " analysis right and once you've answered that you exactly know what your framework is supposed to", 'tokens': [51288, 5215, 558, 293, 1564, 291, 600, 10103, 300, 291, 2293, 458, 437, 428, 8388, 307, 3442, 281, 51574], 'temperature': 0.0, 'avg_logprob': -0.13308273873678067, 'compression_ratio': 1.7419354838709677, 'no_speech_prob': 0.2623249888420105}, {'id': 355, 'seek': 316438, 'start': 3164.38, 'end': 3169.82, 'text': ' do it is it immediately guarantees that your framework would terminate the analysis would', 'tokens': [50364, 360, 309, 307, 309, 4258, 32567, 300, 428, 8388, 576, 10761, 473, 264, 5215, 576, 50636], 'temperature': 0.0, 'avg_logprob': -0.21894567257890077, 'compression_ratio': 1.9618644067796611, 'no_speech_prob': 0.11584435403347015}, {'id': 356, 'seek': 316438, 'start': 3169.82, 'end': 3174.38, 'text': ' terminate and it guarantees the sort of solution you will get it will get a sound solution or you', 'tokens': [50636, 10761, 473, 293, 309, 32567, 264, 1333, 295, 3827, 291, 486, 483, 309, 486, 483, 257, 1626, 3827, 420, 291, 50864], 'temperature': 0.0, 'avg_logprob': -0.21894567257890077, 'compression_ratio': 1.9618644067796611, 'no_speech_prob': 0.11584435403347015}, {'id': 357, 'seek': 316438, 'start': 3174.38, 'end': 3180.06, 'text': ' get exact solution whatever you get so you do not have to do all the proofs already so', 'tokens': [50864, 483, 1900, 3827, 2035, 291, 483, 370, 291, 360, 406, 362, 281, 360, 439, 264, 8177, 82, 1217, 370, 51148], 'temperature': 0.0, 'avg_logprob': -0.21894567257890077, 'compression_ratio': 1.9618644067796611, 'no_speech_prob': 0.11584435403347015}, {'id': 358, 'seek': 316438, 'start': 3180.06, 'end': 3183.9, 'text': ' Nostra taskie cleaning they have been able to solve they have been kind enough to do all the', 'tokens': [51148, 426, 555, 424, 5633, 414, 8924, 436, 362, 668, 1075, 281, 5039, 436, 362, 668, 733, 1547, 281, 360, 439, 264, 51340], 'temperature': 0.0, 'avg_logprob': -0.21894567257890077, 'compression_ratio': 1.9618644067796611, 'no_speech_prob': 0.11584435403347015}, {'id': 359, 'seek': 316438, 'start': 3183.9, 'end': 3189.96, 'text': ' proof for us right now we can simply trust them and we can just check that our analysis that we', 'tokens': [51340, 8177, 337, 505, 558, 586, 321, 393, 2935, 3361, 552, 293, 321, 393, 445, 1520, 300, 527, 5215, 300, 321, 51643], 'temperature': 0.0, 'avg_logprob': -0.21894567257890077, 'compression_ratio': 1.9618644067796611, 'no_speech_prob': 0.11584435403347015}, {'id': 360, 'seek': 318996, 'start': 3189.96, 'end': 3194.96, 'text': ' have designed satisfies those conditions or not right if those satisfy the conditions and those', 'tokens': [50364, 362, 4761, 44271, 729, 4487, 420, 406, 558, 498, 729, 19319, 264, 4487, 293, 729, 50614], 'temperature': 0.0, 'avg_logprob': -0.11628090660527067, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.14790132641792297}, {'id': 361, 'seek': 318996, 'start': 3194.96, 'end': 3199.2400000000002, 'text': ' questions are similar to what I asked you right is constant propagation transfer function monotonic', 'tokens': [50614, 1651, 366, 2531, 281, 437, 286, 2351, 291, 558, 307, 5754, 38377, 5003, 2445, 1108, 310, 11630, 50828], 'temperature': 0.0, 'avg_logprob': -0.11628090660527067, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.14790132641792297}, {'id': 362, 'seek': 318996, 'start': 3199.2400000000002, 'end': 3203.84, 'text': " is it distributive and it's a matter of and it as I said this is a discrete math question right", 'tokens': [50828, 307, 309, 4400, 17254, 293, 309, 311, 257, 1871, 295, 293, 309, 382, 286, 848, 341, 307, 257, 27706, 5221, 1168, 558, 51058], 'temperature': 0.0, 'avg_logprob': -0.11628090660527067, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.14790132641792297}, {'id': 363, 'seek': 318996, 'start': 3203.84, 'end': 3211.2400000000002, 'text': ' sit back and see what what happens once you have that you are you can actually say that fine my', 'tokens': [51058, 1394, 646, 293, 536, 437, 437, 2314, 1564, 291, 362, 300, 291, 366, 291, 393, 767, 584, 300, 2489, 452, 51428], 'temperature': 0.0, 'avg_logprob': -0.11628090660527067, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.14790132641792297}, {'id': 364, 'seek': 318996, 'start': 3211.2400000000002, 'end': 3217.64, 'text': ' analysis is going to have these properties right so you do not have to right so this is the whole', 'tokens': [51428, 5215, 307, 516, 281, 362, 613, 7221, 558, 370, 291, 360, 406, 362, 281, 558, 370, 341, 307, 264, 1379, 51748], 'temperature': 0.0, 'avg_logprob': -0.11628090660527067, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.14790132641792297}, {'id': 365, 'seek': 321764, 'start': 3217.64, 'end': 3224.6, 'text': ' thing about the idea of striving for this unified framework that we sort of started yesterday maybe', 'tokens': [50364, 551, 466, 264, 1558, 295, 36582, 337, 341, 26787, 8388, 300, 321, 1333, 295, 1409, 5186, 1310, 50712], 'temperature': 0.0, 'avg_logprob': -0.1378896762798359, 'compression_ratio': 1.8269230769230769, 'no_speech_prob': 0.007114478852599859}, {'id': 366, 'seek': 321764, 'start': 3224.6, 'end': 3230.56, 'text': ' almost day before yesterday right so this is this whole business about dataflow analysis which', 'tokens': [50712, 1920, 786, 949, 5186, 558, 370, 341, 307, 341, 1379, 1606, 466, 1412, 10565, 5215, 597, 51010], 'temperature': 0.0, 'avg_logprob': -0.1378896762798359, 'compression_ratio': 1.8269230769230769, 'no_speech_prob': 0.007114478852599859}, {'id': 367, 'seek': 321764, 'start': 3230.56, 'end': 3235.16, 'text': ' establishes this very nice sound mathematical framework in which you can build your analysis', 'tokens': [51010, 8327, 279, 341, 588, 1481, 1626, 18894, 8388, 294, 597, 291, 393, 1322, 428, 5215, 51240], 'temperature': 0.0, 'avg_logprob': -0.1378896762798359, 'compression_ratio': 1.8269230769230769, 'no_speech_prob': 0.007114478852599859}, {'id': 368, 'seek': 321764, 'start': 3235.16, 'end': 3244.9, 'text': ' and you get guarantees that how your analysis would work so how much time do we have we have', 'tokens': [51240, 293, 291, 483, 32567, 300, 577, 428, 5215, 576, 589, 370, 577, 709, 565, 360, 321, 362, 321, 362, 51727], 'temperature': 0.0, 'avg_logprob': -0.1378896762798359, 'compression_ratio': 1.8269230769230769, 'no_speech_prob': 0.007114478852599859}, {'id': 369, 'seek': 324490, 'start': 3244.9, 'end': 3252.42, 'text': ' some time so let me just think what to do okay I just give you bits and spurts of few things I', 'tokens': [50364, 512, 565, 370, 718, 385, 445, 519, 437, 281, 360, 1392, 286, 445, 976, 291, 9239, 293, 35657, 1373, 295, 1326, 721, 286, 50740], 'temperature': 0.0, 'avg_logprob': -0.15908017029633392, 'compression_ratio': 1.622093023255814, 'no_speech_prob': 0.02584989182651043}, {'id': 370, 'seek': 324490, 'start': 3252.42, 'end': 3258.3, 'text': " don't know how much after lunch if you have get I'll have time to do that if that we'll see how", 'tokens': [50740, 500, 380, 458, 577, 709, 934, 6349, 498, 291, 362, 483, 286, 603, 362, 565, 281, 360, 300, 498, 300, 321, 603, 536, 577, 51034], 'temperature': 0.0, 'avg_logprob': -0.15908017029633392, 'compression_ratio': 1.622093023255814, 'no_speech_prob': 0.02584989182651043}, {'id': 371, 'seek': 324490, 'start': 3258.3, 'end': 3266.82, 'text': ' it goes okay so one thing I wanted to talk about is there is a more generic framework to', 'tokens': [51034, 309, 1709, 1392, 370, 472, 551, 286, 1415, 281, 751, 466, 307, 456, 307, 257, 544, 19577, 8388, 281, 51460], 'temperature': 0.0, 'avg_logprob': -0.15908017029633392, 'compression_ratio': 1.622093023255814, 'no_speech_prob': 0.02584989182651043}, {'id': 372, 'seek': 326682, 'start': 3266.82, 'end': 3281.7400000000002, 'text': ' analysis something known as abstract interpretation so it sort of subsumes dataflow analysis right so', 'tokens': [50364, 5215, 746, 2570, 382, 12649, 14174, 370, 309, 1333, 295, 2090, 10018, 1412, 10565, 5215, 558, 370, 51110], 'temperature': 0.0, 'avg_logprob': -0.10210812502893908, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.03841756284236908}, {'id': 373, 'seek': 326682, 'start': 3281.7400000000002, 'end': 3288.54, 'text': ' essentially it again is a big theory of over abstractions so essentially it says that how', 'tokens': [51110, 4476, 309, 797, 307, 257, 955, 5261, 295, 670, 12649, 626, 370, 4476, 309, 1619, 300, 577, 51450], 'temperature': 0.0, 'avg_logprob': -0.10210812502893908, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.03841756284236908}, {'id': 374, 'seek': 326682, 'start': 3288.54, 'end': 3295.98, 'text': ' can I build simpler analysis which can scale well but still give me certain guarantees right', 'tokens': [51450, 393, 286, 1322, 18587, 5215, 597, 393, 4373, 731, 457, 920, 976, 385, 1629, 32567, 558, 51822], 'temperature': 0.0, 'avg_logprob': -0.10210812502893908, 'compression_ratio': 1.6511627906976745, 'no_speech_prob': 0.03841756284236908}, {'id': 375, 'seek': 329598, 'start': 3296.14, 'end': 3302.54, 'text': ' and the interval analysis that I talked about yesterday I did not tell you I cheated a bit', 'tokens': [50372, 293, 264, 15035, 5215, 300, 286, 2825, 466, 5186, 286, 630, 406, 980, 291, 286, 28079, 257, 857, 50692], 'temperature': 0.0, 'avg_logprob': -0.18991045607733972, 'compression_ratio': 1.876, 'no_speech_prob': 0.003481379011645913}, {'id': 376, 'seek': 329598, 'start': 3302.54, 'end': 3308.82, 'text': ' and that is actually taught more in terms of the abstract interpretation then in the data', 'tokens': [50692, 293, 300, 307, 767, 5928, 544, 294, 2115, 295, 264, 12649, 14174, 550, 294, 264, 1412, 51006], 'temperature': 0.0, 'avg_logprob': -0.18991045607733972, 'compression_ratio': 1.876, 'no_speech_prob': 0.003481379011645913}, {'id': 377, 'seek': 329598, 'start': 3308.82, 'end': 3313.82, 'text': ' analysis framework so data analysis is more in the compiler domain so for optimizations and all', 'tokens': [51006, 5215, 8388, 370, 1412, 5215, 307, 544, 294, 264, 31958, 9274, 370, 337, 5028, 14455, 293, 439, 51256], 'temperature': 0.0, 'avg_logprob': -0.18991045607733972, 'compression_ratio': 1.876, 'no_speech_prob': 0.003481379011645913}, {'id': 378, 'seek': 329598, 'start': 3313.82, 'end': 3317.5, 'text': ' people end up using data analysis but abstract interpretation is a more general theory which is', 'tokens': [51256, 561, 917, 493, 1228, 1412, 5215, 457, 12649, 14174, 307, 257, 544, 2674, 5261, 597, 307, 51440], 'temperature': 0.0, 'avg_logprob': -0.18991045607733972, 'compression_ratio': 1.876, 'no_speech_prob': 0.003481379011645913}, {'id': 379, 'seek': 329598, 'start': 3317.5, 'end': 3324.38, 'text': ' used even in the verification community this is one thing second thing I wanted to talk about is', 'tokens': [51440, 1143, 754, 294, 264, 30206, 1768, 341, 307, 472, 551, 1150, 551, 286, 1415, 281, 751, 466, 307, 51784], 'temperature': 0.0, 'avg_logprob': -0.18991045607733972, 'compression_ratio': 1.876, 'no_speech_prob': 0.003481379011645913}, {'id': 380, 'seek': 332438, 'start': 3324.54, 'end': 3336.02, 'text': ' so I just want to tell you that something like this exists and and you can ask Google God to', 'tokens': [50372, 370, 286, 445, 528, 281, 980, 291, 300, 746, 411, 341, 8198, 293, 293, 291, 393, 1029, 3329, 1265, 281, 50946], 'temperature': 0.0, 'avg_logprob': -0.11099310775301349, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.0014592609368264675}, {'id': 381, 'seek': 332438, 'start': 3336.02, 'end': 3343.46, 'text': ' tell you about more about this right so search for it and try to do things okay so the other', 'tokens': [50946, 980, 291, 466, 544, 466, 341, 558, 370, 3164, 337, 309, 293, 853, 281, 360, 721, 1392, 370, 264, 661, 51318], 'temperature': 0.0, 'avg_logprob': -0.11099310775301349, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.0014592609368264675}, {'id': 382, 'seek': 332438, 'start': 3343.46, 'end': 3350.3, 'text': ' thing I want to talk about is there is this notion of so whenever we are doing an analysis', 'tokens': [51318, 551, 286, 528, 281, 751, 466, 307, 456, 307, 341, 10710, 295, 370, 5699, 321, 366, 884, 364, 5215, 51660], 'temperature': 0.0, 'avg_logprob': -0.11099310775301349, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.0014592609368264675}, {'id': 383, 'seek': 335030, 'start': 3350.3, 'end': 3356.78, 'text': ' we are essentially saying that a program is extremely complex right if we try to model', 'tokens': [50364, 321, 366, 4476, 1566, 300, 257, 1461, 307, 4664, 3997, 558, 498, 321, 853, 281, 2316, 50688], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 384, 'seek': 335030, 'start': 3356.78, 'end': 3361.42, 'text': ' everything in the program it becomes very difficult to model it so essentially that is', 'tokens': [50688, 1203, 294, 264, 1461, 309, 3643, 588, 2252, 281, 2316, 309, 370, 4476, 300, 307, 50920], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 385, 'seek': 335030, 'start': 3361.42, 'end': 3365.6600000000003, 'text': ' why we have to do these abstractions so what is an abstraction abstraction is basically throwing', 'tokens': [50920, 983, 321, 362, 281, 360, 613, 12649, 626, 370, 437, 307, 364, 37765, 37765, 307, 1936, 10238, 51132], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 386, 'seek': 335030, 'start': 3365.6600000000003, 'end': 3369.26, 'text': ' away details about the program throwing throwing away details which you think are not useful', 'tokens': [51132, 1314, 4365, 466, 264, 1461, 10238, 10238, 1314, 4365, 597, 291, 519, 366, 406, 4420, 51312], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 387, 'seek': 335030, 'start': 3369.26, 'end': 3374.2200000000003, 'text': ' right yesterday you guys did an abstraction where we were building this buffer overflow analysis', 'tokens': [51312, 558, 5186, 291, 1074, 630, 364, 37765, 689, 321, 645, 2390, 341, 21762, 37772, 5215, 51560], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 388, 'seek': 335030, 'start': 3374.2200000000003, 'end': 3380.02, 'text': ' right what was abstraction the abstraction was that we will only look at integer variables', 'tokens': [51560, 558, 437, 390, 37765, 264, 37765, 390, 300, 321, 486, 787, 574, 412, 24922, 9102, 51850], 'temperature': 0.0, 'avg_logprob': -0.1283788859287155, 'compression_ratio': 2.0714285714285716, 'no_speech_prob': 0.1727006882429123}, {'id': 389, 'seek': 338002, 'start': 3380.02, 'end': 3385.54, 'text': ' because those are the variables which occur as indices to arrays can create a buffer overflow', 'tokens': [50364, 570, 729, 366, 264, 9102, 597, 5160, 382, 43840, 281, 41011, 393, 1884, 257, 21762, 37772, 50640], 'temperature': 0.0, 'avg_logprob': -0.12238029197410301, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.0003450300428085029}, {'id': 390, 'seek': 338002, 'start': 3385.54, 'end': 3395.5, 'text': ' second is we said that we will only look at operations of the kind V1 is equal to V2 plus', 'tokens': [50640, 1150, 307, 321, 848, 300, 321, 486, 787, 574, 412, 7705, 295, 264, 733, 691, 16, 307, 2681, 281, 691, 17, 1804, 51138], 'temperature': 0.0, 'avg_logprob': -0.12238029197410301, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.0003450300428085029}, {'id': 391, 'seek': 338002, 'start': 3395.5, 'end': 3402.22, 'text': ' minus some constant C because that is the that is what generally happens with array indices', 'tokens': [51138, 3175, 512, 5754, 383, 570, 300, 307, 264, 300, 307, 437, 5101, 2314, 365, 10225, 43840, 51474], 'temperature': 0.0, 'avg_logprob': -0.12238029197410301, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.0003450300428085029}, {'id': 392, 'seek': 338002, 'start': 3402.22, 'end': 3407.38, 'text': " generally array indices don't show any other nobody multiplies things that I mean not that", 'tokens': [51474, 5101, 10225, 43840, 500, 380, 855, 604, 661, 5079, 12788, 530, 721, 300, 286, 914, 406, 300, 51732], 'temperature': 0.0, 'avg_logprob': -0.12238029197410301, 'compression_ratio': 1.641255605381166, 'no_speech_prob': 0.0003450300428085029}, {'id': 393, 'seek': 340738, 'start': 3407.38, 'end': 3413.38, 'text': " you cannot do it but generally you don't do it right so essentially what we did was", 'tokens': [50364, 291, 2644, 360, 309, 457, 5101, 291, 500, 380, 360, 309, 558, 370, 4476, 437, 321, 630, 390, 50664], 'temperature': 0.0, 'avg_logprob': -0.12316938322417591, 'compression_ratio': 1.9008620689655173, 'no_speech_prob': 0.08018796890974045}, {'id': 394, 'seek': 340738, 'start': 3413.38, 'end': 3420.78, 'text': ' we essentially said that every operation which looks like this we will retain in our model', 'tokens': [50664, 321, 4476, 848, 300, 633, 6916, 597, 1542, 411, 341, 321, 486, 18340, 294, 527, 2316, 51034], 'temperature': 0.0, 'avg_logprob': -0.12316938322417591, 'compression_ratio': 1.9008620689655173, 'no_speech_prob': 0.08018796890974045}, {'id': 395, 'seek': 340738, 'start': 3420.78, 'end': 3426.34, 'text': ' and every other analysis we will assume that that variable becomes what those statements', 'tokens': [51034, 293, 633, 661, 5215, 321, 486, 6552, 300, 300, 7006, 3643, 437, 729, 12363, 51312], 'temperature': 0.0, 'avg_logprob': -0.12316938322417591, 'compression_ratio': 1.9008620689655173, 'no_speech_prob': 0.08018796890974045}, {'id': 396, 'seek': 340738, 'start': 3426.34, 'end': 3429.5, 'text': ' are there I have to do something with those statements right what if they end up coming', 'tokens': [51312, 366, 456, 286, 362, 281, 360, 746, 365, 729, 12363, 558, 437, 498, 436, 917, 493, 1348, 51470], 'temperature': 0.0, 'avg_logprob': -0.12316938322417591, 'compression_ratio': 1.9008620689655173, 'no_speech_prob': 0.08018796890974045}, {'id': 397, 'seek': 340738, 'start': 3429.5, 'end': 3434.26, 'text': ' here so what do I do I have to do something about it I still have to say what values they', 'tokens': [51470, 510, 370, 437, 360, 286, 360, 286, 362, 281, 360, 746, 466, 309, 286, 920, 362, 281, 584, 437, 4190, 436, 51708], 'temperature': 0.0, 'avg_logprob': -0.12316938322417591, 'compression_ratio': 1.9008620689655173, 'no_speech_prob': 0.08018796890974045}, {'id': 398, 'seek': 343426, 'start': 3434.26, 'end': 3446.26, 'text': ' can get so what is the worst I can assume the top right the minus infinity to infinity', 'tokens': [50364, 393, 483, 370, 437, 307, 264, 5855, 286, 393, 6552, 264, 1192, 558, 264, 3175, 13202, 281, 13202, 50964], 'temperature': 0.0, 'avg_logprob': -0.11543408146610966, 'compression_ratio': 1.7979274611398963, 'no_speech_prob': 0.06537360697984695}, {'id': 399, 'seek': 343426, 'start': 3446.26, 'end': 3450.1800000000003, 'text': ' so I assume every other operation pushes the values to minus infinity to infinity or in', 'tokens': [50964, 370, 286, 6552, 633, 661, 6916, 21020, 264, 4190, 281, 3175, 13202, 281, 13202, 420, 294, 51160], 'temperature': 0.0, 'avg_logprob': -0.11543408146610966, 'compression_ratio': 1.7979274611398963, 'no_speech_prob': 0.06537360697984695}, {'id': 400, 'seek': 343426, 'start': 3450.1800000000003, 'end': 3454.92, 'text': ' other words we this is a non-deterministic assignment so it is star means it can just', 'tokens': [51160, 661, 2283, 321, 341, 307, 257, 2107, 12, 49136, 259, 3142, 15187, 370, 309, 307, 3543, 1355, 309, 393, 445, 51397], 'temperature': 0.0, 'avg_logprob': -0.11543408146610966, 'compression_ratio': 1.7979274611398963, 'no_speech_prob': 0.06537360697984695}, {'id': 401, 'seek': 343426, 'start': 3454.92, 'end': 3461.34, 'text': ' assign it to any value by the way what does the lattice for the interval analysis look', 'tokens': [51397, 6269, 309, 281, 604, 2158, 538, 264, 636, 437, 775, 264, 34011, 337, 264, 15035, 5215, 574, 51718], 'temperature': 0.0, 'avg_logprob': -0.11543408146610966, 'compression_ratio': 1.7979274611398963, 'no_speech_prob': 0.06537360697984695}, {'id': 402, 'seek': 346134, 'start': 3461.34, 'end': 3469.1800000000003, 'text': ' like what will the lattice look like and what is the ordering relation so I am sorry', 'tokens': [50364, 411, 437, 486, 264, 34011, 574, 411, 293, 437, 307, 264, 21739, 9721, 370, 286, 669, 2597, 50756], 'temperature': 0.0, 'avg_logprob': -0.32616521491379036, 'compression_ratio': 1.7793103448275862, 'no_speech_prob': 0.6075820922851562}, {'id': 403, 'seek': 346134, 'start': 3469.1800000000003, 'end': 3478.82, 'text': ' what is the set and the ordering relation so what is the bottom element think about', 'tokens': [50756, 437, 307, 264, 992, 293, 264, 21739, 9721, 370, 437, 307, 264, 2767, 4478, 519, 466, 51238], 'temperature': 0.0, 'avg_logprob': -0.32616521491379036, 'compression_ratio': 1.7793103448275862, 'no_speech_prob': 0.6075820922851562}, {'id': 404, 'seek': 346134, 'start': 3478.82, 'end': 3491.3, 'text': ' it what do you want no so how did we initialize the sets you saw the code yesterday right', 'tokens': [51238, 309, 437, 360, 291, 528, 572, 370, 577, 630, 321, 5883, 1125, 264, 6352, 291, 1866, 264, 3089, 5186, 558, 51862], 'temperature': 0.0, 'avg_logprob': -0.32616521491379036, 'compression_ratio': 1.7793103448275862, 'no_speech_prob': 0.6075820922851562}, {'id': 405, 'seek': 349130, 'start': 3491.3, 'end': 3503.54, 'text': ' so actually in this case so every such range like let us say 2 to 5 essentially represents', 'tokens': [50364, 370, 767, 294, 341, 1389, 370, 633, 1270, 3613, 411, 718, 505, 584, 568, 281, 1025, 4476, 8855, 50976], 'temperature': 0.0, 'avg_logprob': -0.18552097407254306, 'compression_ratio': 1.4230769230769231, 'no_speech_prob': 0.03202541917562485}, {'id': 406, 'seek': 349130, 'start': 3503.54, 'end': 3511.6200000000003, 'text': ' a set of elements right 2 3 4 5 so what should be the corresponding set for the bottom element', 'tokens': [50976, 257, 992, 295, 4959, 558, 568, 805, 1017, 1025, 370, 437, 820, 312, 264, 11760, 992, 337, 264, 2767, 4478, 51380], 'temperature': 0.0, 'avg_logprob': -0.18552097407254306, 'compression_ratio': 1.4230769230769231, 'no_speech_prob': 0.03202541917562485}, {'id': 407, 'seek': 351162, 'start': 3512.62, 'end': 3524.7799999999997, 'text': ' 0 elements right unfortunately in this range business I cannot write it I can write it', 'tokens': [50414, 1958, 4959, 558, 7015, 294, 341, 3613, 1606, 286, 2644, 2464, 309, 286, 393, 2464, 309, 51022], 'temperature': 0.0, 'avg_logprob': -0.24395252043201077, 'compression_ratio': 1.639240506329114, 'no_speech_prob': 0.05767020955681801}, {'id': 408, 'seek': 351162, 'start': 3524.7799999999997, 'end': 3533.1, 'text': ' but it is very bad I mean I can write minus 5 and like the other side minus 5 and minus', 'tokens': [51022, 457, 309, 307, 588, 1578, 286, 914, 286, 393, 2464, 3175, 1025, 293, 411, 264, 661, 1252, 3175, 1025, 293, 3175, 51438], 'temperature': 0.0, 'avg_logprob': -0.24395252043201077, 'compression_ratio': 1.639240506329114, 'no_speech_prob': 0.05767020955681801}, {'id': 409, 'seek': 351162, 'start': 3533.1, 'end': 3541.18, 'text': ' 6 negative range which says that of course but this is like very clumsy and not nice', 'tokens': [51438, 1386, 3671, 3613, 597, 1619, 300, 295, 1164, 457, 341, 307, 411, 588, 44640, 293, 406, 1481, 51842], 'temperature': 0.0, 'avg_logprob': -0.24395252043201077, 'compression_ratio': 1.639240506329114, 'no_speech_prob': 0.05767020955681801}, {'id': 410, 'seek': 354118, 'start': 3541.54, 'end': 3552.7, 'text': ' no no but you do not 0 to 0 1 to 1 is singleton elements right singleton sets yeah those are', 'tokens': [50382, 572, 572, 457, 291, 360, 406, 1958, 281, 1958, 502, 281, 502, 307, 1522, 14806, 4959, 558, 1522, 14806, 6352, 1338, 729, 366, 50940], 'temperature': 0.0, 'avg_logprob': -0.2355749717125526, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.005785491783171892}, {'id': 411, 'seek': 354118, 'start': 3552.7, 'end': 3558.8199999999997, 'text': ' constant values the singleton sets but bottom element what do we do so we define a bottom', 'tokens': [50940, 5754, 4190, 264, 1522, 14806, 6352, 457, 2767, 4478, 437, 360, 321, 360, 370, 321, 6964, 257, 2767, 51246], 'temperature': 0.0, 'avg_logprob': -0.2355749717125526, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.005785491783171892}, {'id': 412, 'seek': 354118, 'start': 3558.8199999999997, 'end': 3565.8199999999997, 'text': ' we add an dummy bottom which is basically means that there are zero elements what is', 'tokens': [51246, 321, 909, 364, 35064, 2767, 597, 307, 1936, 1355, 300, 456, 366, 4018, 4959, 437, 307, 51596], 'temperature': 0.0, 'avg_logprob': -0.2355749717125526, 'compression_ratio': 1.7450980392156863, 'no_speech_prob': 0.005785491783171892}, {'id': 413, 'seek': 356582, 'start': 3565.82, 'end': 3579.82, 'text': ' the first level then after that singleton sets like 0 to 0 1 to 1 2 to 2 so on 4 to 4 then what', 'tokens': [50364, 264, 700, 1496, 550, 934, 300, 1522, 14806, 6352, 411, 1958, 281, 1958, 502, 281, 502, 568, 281, 568, 370, 322, 1017, 281, 1017, 550, 437, 51064], 'temperature': 0.0, 'avg_logprob': -0.10215645505670916, 'compression_ratio': 1.5245901639344261, 'no_speech_prob': 0.02619265206158161}, {'id': 414, 'seek': 356582, 'start': 3579.82, 'end': 3595.5, 'text': ' next level yes so 0 to 1 1 to 2 then 0 to 2 so on and so how do you take the meat remember', 'tokens': [51064, 958, 1496, 2086, 370, 1958, 281, 502, 502, 281, 568, 550, 1958, 281, 568, 370, 322, 293, 370, 577, 360, 291, 747, 264, 4615, 1604, 51848], 'temperature': 0.0, 'avg_logprob': -0.10215645505670916, 'compression_ratio': 1.5245901639344261, 'no_speech_prob': 0.02619265206158161}, {'id': 415, 'seek': 359550, 'start': 3595.5, 'end': 3601.22, 'text': ' meat operation now mean of the 2 and the mean of the left hand sides and the max of the right', 'tokens': [50364, 4615, 6916, 586, 914, 295, 264, 568, 293, 264, 914, 295, 264, 1411, 1011, 4881, 293, 264, 11469, 295, 264, 558, 50650], 'temperature': 0.0, 'avg_logprob': -0.14141272438897026, 'compression_ratio': 1.9481865284974094, 'no_speech_prob': 0.008040142245590687}, {'id': 416, 'seek': 359550, 'start': 3601.22, 'end': 3607.58, 'text': ' hand ends that is exactly what is happening see that is how not meat in this case join so the', 'tokens': [50650, 1011, 5314, 300, 307, 2293, 437, 307, 2737, 536, 300, 307, 577, 406, 4615, 294, 341, 1389, 3917, 370, 264, 50968], 'temperature': 0.0, 'avg_logprob': -0.14141272438897026, 'compression_ratio': 1.9481865284974094, 'no_speech_prob': 0.008040142245590687}, {'id': 417, 'seek': 359550, 'start': 3607.58, 'end': 3612.54, 'text': ' join is happening this way and what is going to be the top element minus infinity to infinity', 'tokens': [50968, 3917, 307, 2737, 341, 636, 293, 437, 307, 516, 281, 312, 264, 1192, 4478, 3175, 13202, 281, 13202, 51216], 'temperature': 0.0, 'avg_logprob': -0.14141272438897026, 'compression_ratio': 1.9481865284974094, 'no_speech_prob': 0.008040142245590687}, {'id': 418, 'seek': 359550, 'start': 3612.54, 'end': 3621.98, 'text': ' that is also sort of dummy but we put it right so this is the lattice and what is the ordering', 'tokens': [51216, 300, 307, 611, 1333, 295, 35064, 457, 321, 829, 309, 558, 370, 341, 307, 264, 34011, 293, 437, 307, 264, 21739, 51688], 'temperature': 0.0, 'avg_logprob': -0.14141272438897026, 'compression_ratio': 1.9481865284974094, 'no_speech_prob': 0.008040142245590687}, {'id': 419, 'seek': 362198, 'start': 3621.98, 'end': 3631.58, 'text': ' relation how do I define the ordering relation how do I say something is less than something', 'tokens': [50364, 9721, 577, 360, 286, 6964, 264, 21739, 9721, 577, 360, 286, 584, 746, 307, 1570, 813, 746, 50844], 'temperature': 0.0, 'avg_logprob': -0.1272365479242234, 'compression_ratio': 1.7117117117117118, 'no_speech_prob': 0.05603065341711044}, {'id': 420, 'seek': 362198, 'start': 3631.58, 'end': 3644.5, 'text': ' length of the interval no length of the interval will not work right no that is also not required', 'tokens': [50844, 4641, 295, 264, 15035, 572, 4641, 295, 264, 15035, 486, 406, 589, 558, 572, 300, 307, 611, 406, 4739, 51490], 'temperature': 0.0, 'avg_logprob': -0.1272365479242234, 'compression_ratio': 1.7117117117117118, 'no_speech_prob': 0.05603065341711044}, {'id': 421, 'seek': 364450, 'start': 3644.5, 'end': 3666.18, 'text': ' what about these two guys say 2 to 20 and let us say 12 to 15 right so the range of values contained', 'tokens': [50364, 437, 466, 613, 732, 1074, 584, 568, 281, 945, 293, 718, 505, 584, 2272, 281, 2119, 558, 370, 264, 3613, 295, 4190, 16212, 51448], 'temperature': 0.0, 'avg_logprob': -0.15042534470558167, 'compression_ratio': 1.4701492537313432, 'no_speech_prob': 0.1909157633781433}, {'id': 422, 'seek': 364450, 'start': 3666.18, 'end': 3672.98, 'text': ' within one of them should be completely subsumed by the second the right hand side right so like', 'tokens': [51448, 1951, 472, 295, 552, 820, 312, 2584, 2090, 28189, 538, 264, 1150, 264, 558, 1011, 1252, 558, 370, 411, 51788], 'temperature': 0.0, 'avg_logprob': -0.15042534470558167, 'compression_ratio': 1.4701492537313432, 'no_speech_prob': 0.1909157633781433}, {'id': 423, 'seek': 367298, 'start': 3672.98, 'end': 3682.3, 'text': ' in this case this is less than equal to 2 to 20 right because the right hand end is past this', 'tokens': [50364, 294, 341, 1389, 341, 307, 1570, 813, 2681, 281, 568, 281, 945, 558, 570, 264, 558, 1011, 917, 307, 1791, 341, 50830], 'temperature': 0.0, 'avg_logprob': -0.17409357384069643, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.032050345093011856}, {'id': 424, 'seek': 367298, 'start': 3682.3, 'end': 3693.1, 'text': ' and the left hand end is before this that is the ordering relation okay so like now back to', 'tokens': [50830, 293, 264, 1411, 1011, 917, 307, 949, 341, 300, 307, 264, 21739, 9721, 1392, 370, 411, 586, 646, 281, 51370], 'temperature': 0.0, 'avg_logprob': -0.17409357384069643, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.032050345093011856}, {'id': 425, 'seek': 367298, 'start': 3693.1, 'end': 3698.82, 'text': ' abstractions so essentially the abstraction we did was we said that any so if I have an expression', 'tokens': [51370, 12649, 626, 370, 4476, 264, 37765, 321, 630, 390, 321, 848, 300, 604, 370, 498, 286, 362, 364, 6114, 51656], 'temperature': 0.0, 'avg_logprob': -0.17409357384069643, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.032050345093011856}, {'id': 426, 'seek': 369882, 'start': 3698.98, 'end': 3705.54, 'text': ' I have a statement which assigns to something like this I will simply retain it everything', 'tokens': [50372, 286, 362, 257, 5629, 597, 6269, 82, 281, 746, 411, 341, 286, 486, 2935, 18340, 309, 1203, 50700], 'temperature': 0.0, 'avg_logprob': -0.10336494445800781, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.19644156098365784}, {'id': 427, 'seek': 369882, 'start': 3705.54, 'end': 3711.46, 'text': " else I'll say it's it can be just anything at all right so I can do abstraction on the data flow", 'tokens': [50700, 1646, 286, 603, 584, 309, 311, 309, 393, 312, 445, 1340, 412, 439, 558, 370, 286, 393, 360, 37765, 322, 264, 1412, 3095, 50996], 'temperature': 0.0, 'avg_logprob': -0.10336494445800781, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.19644156098365784}, {'id': 428, 'seek': 369882, 'start': 3711.46, 'end': 3718.38, 'text': ' I can see that certain statements can do weird things can just do anything they want similarly', 'tokens': [50996, 286, 393, 536, 300, 1629, 12363, 393, 360, 3657, 721, 393, 445, 360, 1340, 436, 528, 14138, 51342], 'temperature': 0.0, 'avg_logprob': -0.10336494445800781, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.19644156098365784}, {'id': 429, 'seek': 369882, 'start': 3718.38, 'end': 3725.5800000000004, 'text': ' I can do abstraction on the control flow you can say that rather than actually looking at', 'tokens': [51342, 286, 393, 360, 37765, 322, 264, 1969, 3095, 291, 393, 584, 300, 2831, 813, 767, 1237, 412, 51702], 'temperature': 0.0, 'avg_logprob': -0.10336494445800781, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.19644156098365784}, {'id': 430, 'seek': 372558, 'start': 3725.58, 'end': 3730.34, 'text': ' the control flow graph and saying that the control can be only be transferred in this manner', 'tokens': [50364, 264, 1969, 3095, 4295, 293, 1566, 300, 264, 1969, 393, 312, 787, 312, 15809, 294, 341, 9060, 50602], 'temperature': 0.0, 'avg_logprob': -0.15122105609411482, 'compression_ratio': 1.8737373737373737, 'no_speech_prob': 0.15552979707717896}, {'id': 431, 'seek': 372558, 'start': 3730.34, 'end': 3737.38, 'text': " which requires such a sophisticated analysis can't we not say okay any control can go to anywhere", 'tokens': [50602, 597, 7029, 1270, 257, 16950, 5215, 393, 380, 321, 406, 584, 1392, 604, 1969, 393, 352, 281, 4992, 50954], 'temperature': 0.0, 'avg_logprob': -0.15122105609411482, 'compression_ratio': 1.8737373737373737, 'no_speech_prob': 0.15552979707717896}, {'id': 432, 'seek': 372558, 'start': 3737.38, 'end': 3744.86, 'text': " that's an abstraction then I don't need the control flow graph at all so I can throw up", 'tokens': [50954, 300, 311, 364, 37765, 550, 286, 500, 380, 643, 264, 1969, 3095, 4295, 412, 439, 370, 286, 393, 3507, 493, 51328], 'temperature': 0.0, 'avg_logprob': -0.15122105609411482, 'compression_ratio': 1.8737373737373737, 'no_speech_prob': 0.15552979707717896}, {'id': 433, 'seek': 372558, 'start': 3744.86, 'end': 3748.98, 'text': " in a control flow graph I can say I don't care about what the control flow graph is I take a", 'tokens': [51328, 294, 257, 1969, 3095, 4295, 286, 393, 584, 286, 500, 380, 1127, 466, 437, 264, 1969, 3095, 4295, 307, 286, 747, 257, 51534], 'temperature': 0.0, 'avg_logprob': -0.15122105609411482, 'compression_ratio': 1.8737373737373737, 'no_speech_prob': 0.15552979707717896}, {'id': 434, 'seek': 374898, 'start': 3748.98, 'end': 3756.1, 'text': ' bag of my statements s1 s2 s3 s4 and I say any statement can just go anywhere and loop itself', 'tokens': [50364, 3411, 295, 452, 12363, 262, 16, 262, 17, 262, 18, 262, 19, 293, 286, 584, 604, 5629, 393, 445, 352, 4992, 293, 6367, 2564, 50720], 'temperature': 0.0, 'avg_logprob': -0.13313443085242962, 'compression_ratio': 1.8108108108108107, 'no_speech_prob': 0.3547106683254242}, {'id': 435, 'seek': 374898, 'start': 3756.1, 'end': 3761.7400000000002, 'text': " and go like this and loop itself it can so it's a complete graph on all these guys with even", 'tokens': [50720, 293, 352, 411, 341, 293, 6367, 2564, 309, 393, 370, 309, 311, 257, 3566, 4295, 322, 439, 613, 1074, 365, 754, 51002], 'temperature': 0.0, 'avg_logprob': -0.13313443085242962, 'compression_ratio': 1.8108108108108107, 'no_speech_prob': 0.3547106683254242}, {'id': 436, 'seek': 374898, 'start': 3761.7400000000002, 'end': 3767.1, 'text': " self loops so if I do that so essentially what I've done is I've thrown away my control flow", 'tokens': [51002, 2698, 16121, 370, 498, 286, 360, 300, 370, 4476, 437, 286, 600, 1096, 307, 286, 600, 11732, 1314, 452, 1969, 3095, 51270], 'temperature': 0.0, 'avg_logprob': -0.13313443085242962, 'compression_ratio': 1.8108108108108107, 'no_speech_prob': 0.3547106683254242}, {'id': 437, 'seek': 374898, 'start': 3767.1, 'end': 3772.1, 'text': " graph I said I don't care about my control flow graph give me a solution on this particular thing", 'tokens': [51270, 4295, 286, 848, 286, 500, 380, 1127, 466, 452, 1969, 3095, 4295, 976, 385, 257, 3827, 322, 341, 1729, 551, 51520], 'temperature': 0.0, 'avg_logprob': -0.13313443085242962, 'compression_ratio': 1.8108108108108107, 'no_speech_prob': 0.3547106683254242}, {'id': 438, 'seek': 374898, 'start': 3772.1, 'end': 3777.5, 'text': ' this is so people define these two types of analysis and these are this is a very important', 'tokens': [51520, 341, 307, 370, 561, 6964, 613, 732, 3467, 295, 5215, 293, 613, 366, 341, 307, 257, 588, 1021, 51790], 'temperature': 0.0, 'avg_logprob': -0.13313443085242962, 'compression_ratio': 1.8108108108108107, 'no_speech_prob': 0.3547106683254242}, {'id': 439, 'seek': 377750, 'start': 3777.5, 'end': 3785.86, 'text': ' distinction one is called a flow sensitive analysis where I care about how control can', 'tokens': [50364, 16844, 472, 307, 1219, 257, 3095, 9477, 5215, 689, 286, 1127, 466, 577, 1969, 393, 50782], 'temperature': 0.0, 'avg_logprob': -0.15568385124206544, 'compression_ratio': 1.9375, 'no_speech_prob': 0.08441662043333054}, {'id': 440, 'seek': 377750, 'start': 3785.86, 'end': 3797.74, 'text': ' flow the other is flow insensitive analysis where I do not care about how control flows I assume', 'tokens': [50782, 3095, 264, 661, 307, 3095, 1028, 34465, 5215, 689, 286, 360, 406, 1127, 466, 577, 1969, 12867, 286, 6552, 51376], 'temperature': 0.0, 'avg_logprob': -0.15568385124206544, 'compression_ratio': 1.9375, 'no_speech_prob': 0.08441662043333054}, {'id': 441, 'seek': 377750, 'start': 3797.74, 'end': 3802.62, 'text': ' that control flow control can flow in any way any these statements can be arranged in any order', 'tokens': [51376, 300, 1969, 3095, 1969, 393, 3095, 294, 604, 636, 604, 613, 12363, 393, 312, 18721, 294, 604, 1668, 51620], 'temperature': 0.0, 'avg_logprob': -0.15568385124206544, 'compression_ratio': 1.9375, 'no_speech_prob': 0.08441662043333054}, {'id': 442, 'seek': 380262, 'start': 3802.62, 'end': 3816.3399999999997, 'text': ' for a flow sensitive analysis we compute data flow facts at each program point but a flow', 'tokens': [50364, 337, 257, 3095, 9477, 5215, 321, 14722, 1412, 3095, 9130, 412, 1184, 1461, 935, 457, 257, 3095, 51050], 'temperature': 0.0, 'avg_logprob': -0.127610256797389, 'compression_ratio': 1.6981132075471699, 'no_speech_prob': 0.01474055927246809}, {'id': 443, 'seek': 380262, 'start': 3816.3399999999997, 'end': 3824.38, 'text': ' insensitive analysis anything can just flow anywhere right so in flow insensitive analysis', 'tokens': [51050, 1028, 34465, 5215, 1340, 393, 445, 3095, 4992, 558, 370, 294, 3095, 1028, 34465, 5215, 51452], 'temperature': 0.0, 'avg_logprob': -0.127610256797389, 'compression_ratio': 1.6981132075471699, 'no_speech_prob': 0.01474055927246809}, {'id': 444, 'seek': 382438, 'start': 3824.38, 'end': 3841.02, 'text': ' we create one summary solution for whole function right so now if you think about the landmark', 'tokens': [50364, 321, 1884, 472, 12691, 3827, 337, 1379, 2445, 558, 370, 586, 498, 291, 519, 466, 264, 26962, 51196], 'temperature': 0.0, 'avg_logprob': -0.15537137076968238, 'compression_ratio': 1.175, 'no_speech_prob': 0.021568935364484787}, {'id': 445, 'seek': 384102, 'start': 3841.02, 'end': 3854.98, 'text': ' of program analysis so we have so we talk about these multiple types of sensitivities we talk', 'tokens': [50364, 295, 1461, 5215, 370, 321, 362, 370, 321, 751, 466, 613, 3866, 3467, 295, 17039, 43539, 321, 751, 51062], 'temperature': 0.0, 'avg_logprob': -0.09934618414902105, 'compression_ratio': 1.5447154471544715, 'no_speech_prob': 0.019074033945798874}, {'id': 446, 'seek': 384102, 'start': 3854.98, 'end': 3865.82, 'text': ' about like like do you want to model function calls so correspondingly we have context sensitive', 'tokens': [51062, 466, 411, 411, 360, 291, 528, 281, 2316, 2445, 5498, 370, 11760, 356, 321, 362, 4319, 9477, 51604], 'temperature': 0.0, 'avg_logprob': -0.09934618414902105, 'compression_ratio': 1.5447154471544715, 'no_speech_prob': 0.019074033945798874}, {'id': 447, 'seek': 386582, 'start': 3865.82, 'end': 3881.2200000000003, 'text': ' or context insensitive analysis if you want to model control flow behavior you have flow', 'tokens': [50364, 420, 4319, 1028, 34465, 5215, 498, 291, 528, 281, 2316, 1969, 3095, 5223, 291, 362, 3095, 51134], 'temperature': 0.0, 'avg_logprob': -0.13195003607334235, 'compression_ratio': 1.7358490566037736, 'no_speech_prob': 0.005615422036498785}, {'id': 448, 'seek': 386582, 'start': 3881.2200000000003, 'end': 3895.78, 'text': ' sensitive and flow insensitive analysis what we have covered so far is only this flow sensitive', 'tokens': [51134, 9477, 293, 3095, 1028, 34465, 5215, 437, 321, 362, 5343, 370, 1400, 307, 787, 341, 3095, 9477, 51862], 'temperature': 0.0, 'avg_logprob': -0.13195003607334235, 'compression_ratio': 1.7358490566037736, 'no_speech_prob': 0.005615422036498785}, {'id': 449, 'seek': 389578, 'start': 3895.78, 'end': 3903.1800000000003, 'text': ' analysis we have not even modeled function calls right so we currently only have solutions', 'tokens': [50364, 5215, 321, 362, 406, 754, 37140, 2445, 5498, 558, 370, 321, 4362, 787, 362, 6547, 50734], 'temperature': 0.0, 'avg_logprob': -0.0747243981612356, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0008687262306921184}, {'id': 450, 'seek': 389578, 'start': 3903.1800000000003, 'end': 3909.82, 'text': ' for every function separately so in the future lectures if the instructor is talking about', 'tokens': [50734, 337, 633, 2445, 14759, 370, 294, 264, 2027, 16564, 498, 264, 18499, 307, 1417, 466, 51066], 'temperature': 0.0, 'avg_logprob': -0.0747243981612356, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0008687262306921184}, {'id': 451, 'seek': 389578, 'start': 3909.82, 'end': 3916.26, 'text': ' these things you should be aware of what they are even if you do not know how they are computed', 'tokens': [51066, 613, 721, 291, 820, 312, 3650, 295, 437, 436, 366, 754, 498, 291, 360, 406, 458, 577, 436, 366, 40610, 51388], 'temperature': 0.0, 'avg_logprob': -0.0747243981612356, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0008687262306921184}, {'id': 452, 'seek': 389578, 'start': 3916.26, 'end': 3923.34, 'text': ' so there are algorithms to actually induce like flow sensitivity how would you make a function', 'tokens': [51388, 370, 456, 366, 14642, 281, 767, 41263, 411, 3095, 19392, 577, 576, 291, 652, 257, 2445, 51742], 'temperature': 0.0, 'avg_logprob': -0.0747243981612356, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0008687262306921184}, {'id': 453, 'seek': 392334, 'start': 3923.34, 'end': 3933.1000000000004, 'text': ' flow sensitive how will you how will it know where to so let us see an example how what is', 'tokens': [50364, 3095, 9477, 577, 486, 291, 577, 486, 309, 458, 689, 281, 370, 718, 505, 536, 364, 1365, 577, 437, 307, 50852], 'temperature': 0.0, 'avg_logprob': -0.1393433581577258, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.013608300127089024}, {'id': 454, 'seek': 392334, 'start': 3933.1000000000004, 'end': 3937.26, 'text': ' flow sensitive analysis and what is flow insensitive analysis just to make sure that you are ready for', 'tokens': [50852, 3095, 9477, 5215, 293, 437, 307, 3095, 1028, 34465, 5215, 445, 281, 652, 988, 300, 291, 366, 1919, 337, 51060], 'temperature': 0.0, 'avg_logprob': -0.1393433581577258, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.013608300127089024}, {'id': 455, 'seek': 392334, 'start': 3937.26, 'end': 3943.7000000000003, 'text': ' the next sessions so essentially it means that let us say I have function foo and I have a', 'tokens': [51060, 264, 958, 11081, 370, 4476, 309, 1355, 300, 718, 505, 584, 286, 362, 2445, 726, 78, 293, 286, 362, 257, 51382], 'temperature': 0.0, 'avg_logprob': -0.1393433581577258, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.013608300127089024}, {'id': 456, 'seek': 392334, 'start': 3943.7000000000003, 'end': 3951.38, 'text': ' function bar which is called from here somewhere in the function let us say this is foo 1 similarly', 'tokens': [51382, 2445, 2159, 597, 307, 1219, 490, 510, 4079, 294, 264, 2445, 718, 505, 584, 341, 307, 726, 78, 502, 14138, 51766], 'temperature': 0.0, 'avg_logprob': -0.1393433581577258, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.013608300127089024}, {'id': 457, 'seek': 395138, 'start': 3951.38, 'end': 3964.36, 'text': ' I have another function foo 2 which also has a call to bar now let us say I want to do an inter', 'tokens': [50364, 286, 362, 1071, 2445, 726, 78, 568, 597, 611, 575, 257, 818, 281, 2159, 586, 718, 505, 584, 286, 528, 281, 360, 364, 728, 51013], 'temperature': 0.0, 'avg_logprob': -0.10853776511024027, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.0012432237854227424}, {'id': 458, 'seek': 395138, 'start': 3964.36, 'end': 3973.38, 'text': ' procedural analysis as opposed to the intra procedural analysis we are doing till now so', 'tokens': [51013, 43951, 5215, 382, 8851, 281, 264, 43358, 43951, 5215, 321, 366, 884, 4288, 586, 370, 51464], 'temperature': 0.0, 'avg_logprob': -0.10853776511024027, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.0012432237854227424}, {'id': 459, 'seek': 395138, 'start': 3973.38, 'end': 3981.06, 'text': ' we only assume our whole universe is one function and that is all I care about right so now if you', 'tokens': [51464, 321, 787, 6552, 527, 1379, 6445, 307, 472, 2445, 293, 300, 307, 439, 286, 1127, 466, 558, 370, 586, 498, 291, 51848], 'temperature': 0.0, 'avg_logprob': -0.10853776511024027, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.0012432237854227424}, {'id': 460, 'seek': 398106, 'start': 3981.06, 'end': 3990.58, 'text': ' want to analyze this function so let us say this guy takes a parameter a so x takes some parameter', 'tokens': [50364, 528, 281, 12477, 341, 2445, 370, 718, 505, 584, 341, 2146, 2516, 257, 13075, 257, 370, 2031, 2516, 512, 13075, 50840], 'temperature': 0.0, 'avg_logprob': -0.14972488341792936, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.0010975224431604147}, {'id': 461, 'seek': 398106, 'start': 3990.58, 'end': 3999.14, 'text': ' y now there are two ways of doing this analysis right one is the context sensitive way of doing', 'tokens': [50840, 288, 586, 456, 366, 732, 2098, 295, 884, 341, 5215, 558, 472, 307, 264, 4319, 9477, 636, 295, 884, 51268], 'temperature': 0.0, 'avg_logprob': -0.14972488341792936, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.0010975224431604147}, {'id': 462, 'seek': 398106, 'start': 3999.14, 'end': 4007.86, 'text': ' this analysis is to analyze each call to bar separately right separately figuring figure out', 'tokens': [51268, 341, 5215, 307, 281, 12477, 1184, 818, 281, 2159, 14759, 558, 14759, 15213, 2573, 484, 51704], 'temperature': 0.0, 'avg_logprob': -0.14972488341792936, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.0010975224431604147}, {'id': 463, 'seek': 400786, 'start': 4007.86, 'end': 4014.46, 'text': ' that what will happen with bar when it is invoked here and what will happen with bar if it is invoked', 'tokens': [50364, 300, 437, 486, 1051, 365, 2159, 562, 309, 307, 1048, 9511, 510, 293, 437, 486, 1051, 365, 2159, 498, 309, 307, 1048, 9511, 50694], 'temperature': 0.0, 'avg_logprob': -0.06959265981401716, 'compression_ratio': 1.9865771812080537, 'no_speech_prob': 0.03017251193523407}, {'id': 464, 'seek': 400786, 'start': 4014.46, 'end': 4024.5, 'text': ' here right so for each of these calls so these are called call sites for each of these call sites', 'tokens': [50694, 510, 558, 370, 337, 1184, 295, 613, 5498, 370, 613, 366, 1219, 818, 7533, 337, 1184, 295, 613, 818, 7533, 51196], 'temperature': 0.0, 'avg_logprob': -0.06959265981401716, 'compression_ratio': 1.9865771812080537, 'no_speech_prob': 0.03017251193523407}, {'id': 465, 'seek': 400786, 'start': 4024.5, 'end': 4033.7400000000002, 'text': ' you will have a different solution for the things in bar the other option not just that even the', 'tokens': [51196, 291, 486, 362, 257, 819, 3827, 337, 264, 721, 294, 2159, 264, 661, 3614, 406, 445, 300, 754, 264, 51658], 'temperature': 0.0, 'avg_logprob': -0.06959265981401716, 'compression_ratio': 1.9865771812080537, 'no_speech_prob': 0.03017251193523407}, {'id': 466, 'seek': 403374, 'start': 4033.74, 'end': 4038.9799999999996, 'text': ' effect that bar has like let us say the value it returns that will be that will depend on that', 'tokens': [50364, 1802, 300, 2159, 575, 411, 718, 505, 584, 264, 2158, 309, 11247, 300, 486, 312, 300, 486, 5672, 322, 300, 50626], 'temperature': 0.0, 'avg_logprob': -0.14915882839876063, 'compression_ratio': 1.6647727272727273, 'no_speech_prob': 0.06359251588582993}, {'id': 467, 'seek': 403374, 'start': 4038.9799999999996, 'end': 4051.58, 'text': ' bar was called here not here right similarly the other option is that you do an analysis assuming', 'tokens': [50626, 2159, 390, 1219, 510, 406, 510, 558, 14138, 264, 661, 3614, 307, 300, 291, 360, 364, 5215, 11926, 51256], 'temperature': 0.0, 'avg_logprob': -0.14915882839876063, 'compression_ratio': 1.6647727272727273, 'no_speech_prob': 0.06359251588582993}, {'id': 468, 'seek': 403374, 'start': 4051.58, 'end': 4057.62, 'text': ' that bar could have been called anywhere so it is similar to doing this MOP and MFP sort of business', 'tokens': [51256, 300, 2159, 727, 362, 668, 1219, 4992, 370, 309, 307, 2531, 281, 884, 341, 376, 12059, 293, 376, 45882, 1333, 295, 1606, 51558], 'temperature': 0.0, 'avg_logprob': -0.14915882839876063, 'compression_ratio': 1.6647727272727273, 'no_speech_prob': 0.06359251588582993}, {'id': 469, 'seek': 405762, 'start': 4058.3399999999997, 'end': 4065.1, 'text': ' one option is that you first merge the behaviors of this function like wherever it is called you', 'tokens': [50400, 472, 3614, 307, 300, 291, 700, 22183, 264, 15501, 295, 341, 2445, 411, 8660, 309, 307, 1219, 291, 50738], 'temperature': 0.0, 'avg_logprob': -0.1582909257788407, 'compression_ratio': 1.9045226130653266, 'no_speech_prob': 0.22763550281524658}, {'id': 470, 'seek': 405762, 'start': 4065.1, 'end': 4073.1, 'text': ' merge those values that can occur and then analyze this function the other is first analyze this', 'tokens': [50738, 22183, 729, 4190, 300, 393, 5160, 293, 550, 12477, 341, 2445, 264, 661, 307, 700, 12477, 341, 51138], 'temperature': 0.0, 'avg_logprob': -0.1582909257788407, 'compression_ratio': 1.9045226130653266, 'no_speech_prob': 0.22763550281524658}, {'id': 471, 'seek': 405762, 'start': 4073.1, 'end': 4078.54, 'text': ' function separately and then apply the respective function the rest of the function on that those', 'tokens': [51138, 2445, 14759, 293, 550, 3079, 264, 23649, 2445, 264, 1472, 295, 264, 2445, 322, 300, 729, 51410], 'temperature': 0.0, 'avg_logprob': -0.1582909257788407, 'compression_ratio': 1.9045226130653266, 'no_speech_prob': 0.22763550281524658}, {'id': 472, 'seek': 405762, 'start': 4078.54, 'end': 4083.9, 'text': ' particular pieces right so these are this is a difference as you can understand context', 'tokens': [51410, 1729, 3755, 558, 370, 613, 366, 341, 307, 257, 2649, 382, 291, 393, 1223, 4319, 51678], 'temperature': 0.0, 'avg_logprob': -0.1582909257788407, 'compression_ratio': 1.9045226130653266, 'no_speech_prob': 0.22763550281524658}, {'id': 473, 'seek': 408390, 'start': 4083.9, 'end': 4089.7400000000002, 'text': ' sensitive analysis is more expensive than context insensitive analysis but again it can give you', 'tokens': [50364, 9477, 5215, 307, 544, 5124, 813, 4319, 1028, 34465, 5215, 457, 797, 309, 393, 976, 291, 50656], 'temperature': 0.0, 'avg_logprob': -0.2043620808919271, 'compression_ratio': 2.1551724137931036, 'no_speech_prob': 0.10949911177158356}, {'id': 474, 'seek': 408390, 'start': 4089.7400000000002, 'end': 4099.9800000000005, 'text': ' much better accuracy right so next you may be exposed to this context sensitivity context', 'tokens': [50656, 709, 1101, 14170, 558, 370, 958, 291, 815, 312, 9495, 281, 341, 4319, 19392, 4319, 51168], 'temperature': 0.0, 'avg_logprob': -0.2043620808919271, 'compression_ratio': 2.1551724137931036, 'no_speech_prob': 0.10949911177158356}, {'id': 475, 'seek': 408390, 'start': 4099.9800000000005, 'end': 4104.7, 'text': ' I am not sure exactly what is the thing but you should know these terms you should know what is', 'tokens': [51168, 286, 669, 406, 988, 2293, 437, 307, 264, 551, 457, 291, 820, 458, 613, 2115, 291, 820, 458, 437, 307, 51404], 'temperature': 0.0, 'avg_logprob': -0.2043620808919271, 'compression_ratio': 2.1551724137931036, 'no_speech_prob': 0.10949911177158356}, {'id': 476, 'seek': 408390, 'start': 4104.7, 'end': 4109.76, 'text': ' context sensitivity what is context sensitivity what is flow sensitive analysis what is flow', 'tokens': [51404, 4319, 19392, 437, 307, 4319, 19392, 437, 307, 3095, 9477, 5215, 437, 307, 3095, 51657], 'temperature': 0.0, 'avg_logprob': -0.2043620808919271, 'compression_ratio': 2.1551724137931036, 'no_speech_prob': 0.10949911177158356}, {'id': 477, 'seek': 410976, 'start': 4109.76, 'end': 4118.84, 'text': ' insensitive analysis any questions on the topics let me see if the next session we can do a very', 'tokens': [50364, 1028, 34465, 5215, 604, 1651, 322, 264, 8378, 718, 385, 536, 498, 264, 958, 5481, 321, 393, 360, 257, 588, 50818], 'temperature': 0.0, 'avg_logprob': -0.14268478514656188, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.027530154213309288}, {'id': 478, 'seek': 410976, 'start': 4118.84, 'end': 4129.84, 'text': ' quickly do a flow insensitive analysis just to tell you how it works why is context sensitive', 'tokens': [50818, 2661, 360, 257, 3095, 1028, 34465, 5215, 445, 281, 980, 291, 577, 309, 1985, 983, 307, 4319, 9477, 51368], 'temperature': 0.0, 'avg_logprob': -0.14268478514656188, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.027530154213309288}, {'id': 479, 'seek': 410976, 'start': 4129.84, 'end': 4134.0, 'text': ' more expensive because whatever we are doing right now what what we are doing is that every', 'tokens': [51368, 544, 5124, 570, 2035, 321, 366, 884, 558, 586, 437, 437, 321, 366, 884, 307, 300, 633, 51576], 'temperature': 0.0, 'avg_logprob': -0.14268478514656188, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.027530154213309288}, {'id': 480, 'seek': 413400, 'start': 4134.0, 'end': 4140.04, 'text': ' program point we are maintaining what happens at that program point and how that particular', 'tokens': [50364, 1461, 935, 321, 366, 14916, 437, 2314, 412, 300, 1461, 935, 293, 577, 300, 1729, 50666], 'temperature': 0.0, 'avg_logprob': -0.11036279154758827, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.13264720141887665}, {'id': 481, 'seek': 413400, 'start': 4140.04, 'end': 4145.64, 'text': " value propagates further in a context insensitive analysis we don't even have the control flow", 'tokens': [50666, 2158, 12425, 1024, 3052, 294, 257, 4319, 1028, 34465, 5215, 321, 500, 380, 754, 362, 264, 1969, 3095, 50946], 'temperature': 0.0, 'avg_logprob': -0.11036279154758827, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.13264720141887665}, {'id': 482, 'seek': 413400, 'start': 4145.64, 'end': 4152.04, 'text': " graph so there is no notion of a program point anymore and because I don't even know so program", 'tokens': [50946, 4295, 370, 456, 307, 572, 10710, 295, 257, 1461, 935, 3602, 293, 570, 286, 500, 380, 754, 458, 370, 1461, 51266], 'temperature': 0.0, 'avg_logprob': -0.11036279154758827, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.13264720141887665}, {'id': 483, 'seek': 413400, 'start': 4152.04, 'end': 4155.32, 'text': ' points are defined only on the control flow graph right so if you do not know an ordering', 'tokens': [51266, 2793, 366, 7642, 787, 322, 264, 1969, 3095, 4295, 558, 370, 498, 291, 360, 406, 458, 364, 21739, 51430], 'temperature': 0.0, 'avg_logprob': -0.11036279154758827, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.13264720141887665}, {'id': 484, 'seek': 413400, 'start': 4155.32, 'end': 4160.64, 'text': ' of the statements the behavior the program point does not mean anything at all so now what I do', 'tokens': [51430, 295, 264, 12363, 264, 5223, 264, 1461, 935, 775, 406, 914, 1340, 412, 439, 370, 586, 437, 286, 360, 51696], 'temperature': 0.0, 'avg_logprob': -0.11036279154758827, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.13264720141887665}, {'id': 485, 'seek': 416064, 'start': 4160.64, 'end': 4168.200000000001, 'text': ' is we compute one summary structure one summary solution which is true at every program point', 'tokens': [50364, 307, 321, 14722, 472, 12691, 3877, 472, 12691, 3827, 597, 307, 2074, 412, 633, 1461, 935, 50742], 'temperature': 0.0, 'avg_logprob': -0.14890838199191622, 'compression_ratio': 1.507936507936508, 'no_speech_prob': 0.09781080484390259}, {'id': 486, 'seek': 416064, 'start': 4168.200000000001, 'end': 4180.76, 'text': " right so let's take a very very simple very this example so let's say I have x equals 1 y equals", 'tokens': [50742, 558, 370, 718, 311, 747, 257, 588, 588, 2199, 588, 341, 1365, 370, 718, 311, 584, 286, 362, 2031, 6915, 502, 288, 6915, 51370], 'temperature': 0.0, 'avg_logprob': -0.14890838199191622, 'compression_ratio': 1.507936507936508, 'no_speech_prob': 0.09781080484390259}, {'id': 487, 'seek': 418076, 'start': 4181.280000000001, 'end': 4190.64, 'text': " 2 x equals 5 right so let's say this is my program so I am doing an exact analysis which", 'tokens': [50390, 568, 2031, 6915, 1025, 558, 370, 718, 311, 584, 341, 307, 452, 1461, 370, 286, 669, 884, 364, 1900, 5215, 597, 50858], 'temperature': 0.0, 'avg_logprob': -0.12014251947402954, 'compression_ratio': 1.8309178743961352, 'no_speech_prob': 0.2560928463935852}, {'id': 488, 'seek': 418076, 'start': 4190.64, 'end': 4197.08, 'text': " is trying to track the value of each variable let's try to do a flow sensitive analysis of this", 'tokens': [50858, 307, 1382, 281, 2837, 264, 2158, 295, 1184, 7006, 718, 311, 853, 281, 360, 257, 3095, 9477, 5215, 295, 341, 51180], 'temperature': 0.0, 'avg_logprob': -0.12014251947402954, 'compression_ratio': 1.8309178743961352, 'no_speech_prob': 0.2560928463935852}, {'id': 489, 'seek': 418076, 'start': 4197.08, 'end': 4202.56, 'text': " so when will I will do a flow sensitive analysis what is the value I'll get here I'll say that", 'tokens': [51180, 370, 562, 486, 286, 486, 360, 257, 3095, 9477, 5215, 437, 307, 264, 2158, 286, 603, 483, 510, 286, 603, 584, 300, 51454], 'temperature': 0.0, 'avg_logprob': -0.12014251947402954, 'compression_ratio': 1.8309178743961352, 'no_speech_prob': 0.2560928463935852}, {'id': 490, 'seek': 418076, 'start': 4202.56, 'end': 4210.4400000000005, 'text': ' both x and y are not initialized what will happen here I will say that x is initialized to a valued', 'tokens': [51454, 1293, 2031, 293, 288, 366, 406, 5883, 1602, 437, 486, 1051, 510, 286, 486, 584, 300, 2031, 307, 5883, 1602, 281, 257, 22608, 51848], 'temperature': 0.0, 'avg_logprob': -0.12014251947402954, 'compression_ratio': 1.8309178743961352, 'no_speech_prob': 0.2560928463935852}, {'id': 491, 'seek': 421044, 'start': 4210.44, 'end': 4218.96, 'text': ' 1 here I will say that x is initialized is assigned a value 1 y is assigned a value 2', 'tokens': [50364, 502, 510, 286, 486, 584, 300, 2031, 307, 5883, 1602, 307, 13279, 257, 2158, 502, 288, 307, 13279, 257, 2158, 568, 50790], 'temperature': 0.0, 'avg_logprob': -0.12647919561348708, 'compression_ratio': 2.0786516853932584, 'no_speech_prob': 0.038350749760866165}, {'id': 492, 'seek': 421044, 'start': 4218.96, 'end': 4229.48, 'text': ' and here I will say x is assigned a value 1 sorry x is assigned a value 5 and y is assigned a value', 'tokens': [50790, 293, 510, 286, 486, 584, 2031, 307, 13279, 257, 2158, 502, 2597, 2031, 307, 13279, 257, 2158, 1025, 293, 288, 307, 13279, 257, 2158, 51316], 'temperature': 0.0, 'avg_logprob': -0.12647919561348708, 'compression_ratio': 2.0786516853932584, 'no_speech_prob': 0.038350749760866165}, {'id': 493, 'seek': 422948, 'start': 4229.48, 'end': 4247.28, 'text': ' 2 agreed okay now tell me can I somehow summarize these solutions which will be true irrespective', 'tokens': [50364, 568, 9166, 1392, 586, 980, 385, 393, 286, 6063, 20858, 613, 6547, 597, 486, 312, 2074, 3418, 19575, 488, 51254], 'temperature': 0.0, 'avg_logprob': -0.19419804073515393, 'compression_ratio': 1.421875, 'no_speech_prob': 0.04296193644404411}, {'id': 494, 'seek': 422948, 'start': 4247.28, 'end': 4253.759999999999, 'text': ' of which order I run these statements and where I ask this question I want a summary', 'tokens': [51254, 295, 597, 1668, 286, 1190, 613, 12363, 293, 689, 286, 1029, 341, 1168, 286, 528, 257, 12691, 51578], 'temperature': 0.0, 'avg_logprob': -0.19419804073515393, 'compression_ratio': 1.421875, 'no_speech_prob': 0.04296193644404411}, {'id': 495, 'seek': 425376, 'start': 4253.76, 'end': 4268.76, 'text': " solution for this whole thing I can do what no it's not about constant so I can simply say either", 'tokens': [50364, 3827, 337, 341, 1379, 551, 286, 393, 360, 437, 572, 309, 311, 406, 466, 5754, 370, 286, 393, 2935, 584, 2139, 51114], 'temperature': 0.0, 'avg_logprob': -0.11819536597640426, 'compression_ratio': 1.552, 'no_speech_prob': 0.13610395789146423}, {'id': 496, 'seek': 425376, 'start': 4268.76, 'end': 4279.04, 'text': ' I can say x is not constant I can say that x can point to a set of values 1 and 5 and y to a set', 'tokens': [51114, 286, 393, 584, 2031, 307, 406, 5754, 286, 393, 584, 300, 2031, 393, 935, 281, 257, 992, 295, 4190, 502, 293, 1025, 293, 288, 281, 257, 992, 51628], 'temperature': 0.0, 'avg_logprob': -0.11819536597640426, 'compression_ratio': 1.552, 'no_speech_prob': 0.13610395789146423}, {'id': 497, 'seek': 427904, 'start': 4279.04, 'end': 4297.44, 'text': ' of values 2 okay so what information have we lost here what about we have lost something', 'tokens': [50364, 295, 4190, 568, 1392, 370, 437, 1589, 362, 321, 2731, 510, 437, 466, 321, 362, 2731, 746, 51284], 'temperature': 0.0, 'avg_logprob': -0.17771725321924964, 'compression_ratio': 1.4076923076923078, 'no_speech_prob': 0.020928356796503067}, {'id': 498, 'seek': 427904, 'start': 4297.44, 'end': 4308.56, 'text': " about program point but maybe I should complicate this example let's I also have z is equal to", 'tokens': [51284, 466, 1461, 935, 457, 1310, 286, 820, 1209, 8700, 341, 1365, 718, 311, 286, 611, 362, 710, 307, 2681, 281, 51840], 'temperature': 0.0, 'avg_logprob': -0.17771725321924964, 'compression_ratio': 1.4076923076923078, 'no_speech_prob': 0.020928356796503067}, {'id': 499, 'seek': 430856, 'start': 4308.56, 'end': 4317.360000000001, 'text': " x plus y so let's put this other thing so then essentially why what I have here is that x is", 'tokens': [50364, 2031, 1804, 288, 370, 718, 311, 829, 341, 661, 551, 370, 550, 4476, 983, 437, 286, 362, 510, 307, 300, 2031, 307, 50804], 'temperature': 0.0, 'avg_logprob': -0.10191226005554199, 'compression_ratio': 1.5254237288135593, 'no_speech_prob': 0.00856334064155817}, {'id': 500, 'seek': 430856, 'start': 4317.360000000001, 'end': 4332.56, 'text': ' 5 y is 2 and z is 7 right now if I do the flow insensitive part what will happen to z it can', 'tokens': [50804, 1025, 288, 307, 568, 293, 710, 307, 1614, 558, 586, 498, 286, 360, 264, 3095, 1028, 34465, 644, 437, 486, 1051, 281, 710, 309, 393, 51564], 'temperature': 0.0, 'avg_logprob': -0.10191226005554199, 'compression_ratio': 1.5254237288135593, 'no_speech_prob': 0.00856334064155817}, {'id': 501, 'seek': 430856, 'start': 4332.56, 'end': 4336.64, 'text': ' take any value of x because I do not care about which order the statements are being', 'tokens': [51564, 747, 604, 2158, 295, 2031, 570, 286, 360, 406, 1127, 466, 597, 1668, 264, 12363, 366, 885, 51768], 'temperature': 0.0, 'avg_logprob': -0.10191226005554199, 'compression_ratio': 1.5254237288135593, 'no_speech_prob': 0.00856334064155817}, {'id': 502, 'seek': 433664, 'start': 4336.64, 'end': 4350.76, 'text': ' done and so by values of z can be either 2 plus 1 3 or it can be 2 plus 5 7 no not defined if you', 'tokens': [50364, 1096, 293, 370, 538, 4190, 295, 710, 393, 312, 2139, 568, 1804, 502, 805, 420, 309, 393, 312, 568, 1804, 1025, 1614, 572, 406, 7642, 498, 291, 51070], 'temperature': 0.0, 'avg_logprob': -0.166198764528547, 'compression_ratio': 1.5634920634920635, 'no_speech_prob': 0.6241908669471741}, {'id': 503, 'seek': 433664, 'start': 4350.76, 'end': 4362.64, 'text': ' are if you are doing a propagation oh I see I see huh so either you do that you can say not defined', 'tokens': [51070, 366, 498, 291, 366, 884, 257, 38377, 1954, 286, 536, 286, 536, 7020, 370, 2139, 291, 360, 300, 291, 393, 584, 406, 7642, 51664], 'temperature': 0.0, 'avg_logprob': -0.166198764528547, 'compression_ratio': 1.5634920634920635, 'no_speech_prob': 0.6241908669471741}, {'id': 504, 'seek': 436264, 'start': 4362.64, 'end': 4368.04, 'text': ' garbage values it is possible to have a garbage values otherwise the problem is that garbage will', 'tokens': [50364, 14150, 4190, 309, 307, 1944, 281, 362, 257, 14150, 4190, 5911, 264, 1154, 307, 300, 14150, 486, 50634], 'temperature': 0.0, 'avg_logprob': -0.21104043029075445, 'compression_ratio': 1.8037383177570094, 'no_speech_prob': 0.12905287742614746}, {'id': 505, 'seek': 436264, 'start': 4368.04, 'end': 4373.400000000001, 'text': " go and sit everywhere otherwise so almost so instead of that let's try to keep an initialization", 'tokens': [50634, 352, 293, 1394, 5315, 5911, 370, 1920, 370, 2602, 295, 300, 718, 311, 853, 281, 1066, 364, 5883, 2144, 50902], 'temperature': 0.0, 'avg_logprob': -0.21104043029075445, 'compression_ratio': 1.8037383177570094, 'no_speech_prob': 0.12905287742614746}, {'id': 506, 'seek': 436264, 'start': 4373.400000000001, 'end': 4379.76, 'text': " that values will always get initialized okay I am doing a little clumsy analysis but let's say", 'tokens': [50902, 300, 4190, 486, 1009, 483, 5883, 1602, 1392, 286, 669, 884, 257, 707, 44640, 5215, 457, 718, 311, 584, 51220], 'temperature': 0.0, 'avg_logprob': -0.21104043029075445, 'compression_ratio': 1.8037383177570094, 'no_speech_prob': 0.12905287742614746}, {'id': 507, 'seek': 436264, 'start': 4379.76, 'end': 4384.360000000001, 'text': ' we take an initialization which is x equal to 0 equal to z equal to 0 these are global variables', 'tokens': [51220, 321, 747, 364, 5883, 2144, 597, 307, 2031, 2681, 281, 1958, 2681, 281, 710, 2681, 281, 1958, 613, 366, 4338, 9102, 51450], 'temperature': 0.0, 'avg_logprob': -0.21104043029075445, 'compression_ratio': 1.8037383177570094, 'no_speech_prob': 0.12905287742614746}, {'id': 508, 'seek': 438436, 'start': 4384.36, 'end': 4395.839999999999, 'text': ' so then we will of course I will get a 0 at all these places also right taken point taken right', 'tokens': [50364, 370, 550, 321, 486, 295, 1164, 286, 486, 483, 257, 1958, 412, 439, 613, 3190, 611, 558, 2726, 935, 2726, 558, 50938], 'temperature': 0.0, 'avg_logprob': -0.20800580551375203, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.015858368948101997}, {'id': 509, 'seek': 438436, 'start': 4395.839999999999, 'end': 4403.16, 'text': ' so now essentially what I ended up having is I have a bad value of z which was not even possible', 'tokens': [50938, 370, 586, 4476, 437, 286, 4590, 493, 1419, 307, 286, 362, 257, 1578, 2158, 295, 710, 597, 390, 406, 754, 1944, 51304], 'temperature': 0.0, 'avg_logprob': -0.20800580551375203, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.015858368948101997}, {'id': 510, 'seek': 438436, 'start': 4403.16, 'end': 4411.679999999999, 'text': " in a flow sensitive analysis right but think about the complexity it's a very simple analysis", 'tokens': [51304, 294, 257, 3095, 9477, 5215, 558, 457, 519, 466, 264, 14024, 309, 311, 257, 588, 2199, 5215, 51730], 'temperature': 0.0, 'avg_logprob': -0.20800580551375203, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.015858368948101997}, {'id': 511, 'seek': 441168, 'start': 4411.68, 'end': 4420.56, 'text': ' right so every time so I did not have to take maintain meets like sorry maintain the ins and', 'tokens': [50364, 558, 370, 633, 565, 370, 286, 630, 406, 362, 281, 747, 6909, 13961, 411, 2597, 6909, 264, 1028, 293, 50808], 'temperature': 0.0, 'avg_logprob': -0.10717014784223577, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.0028784649912267923}, {'id': 512, 'seek': 441168, 'start': 4420.56, 'end': 4425.320000000001, 'text': " the outs at every program point take a meet and do something I don't even have to bother doing that", 'tokens': [50808, 264, 14758, 412, 633, 1461, 935, 747, 257, 1677, 293, 360, 746, 286, 500, 380, 754, 362, 281, 8677, 884, 300, 51046], 'temperature': 0.0, 'avg_logprob': -0.10717014784223577, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.0028784649912267923}, {'id': 513, 'seek': 441168, 'start': 4425.320000000001, 'end': 4433.200000000001, 'text': ' I can simply just every time I maintain my set and update it depending on what happens but you', 'tokens': [51046, 286, 393, 2935, 445, 633, 565, 286, 6909, 452, 992, 293, 5623, 309, 5413, 322, 437, 2314, 457, 291, 51440], 'temperature': 0.0, 'avg_logprob': -0.10717014784223577, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.0028784649912267923}, {'id': 514, 'seek': 441168, 'start': 4433.200000000001, 'end': 4436.76, 'text': ' have to be very clever about doing the summarization the only thing you can you cannot do a kill', 'tokens': [51440, 362, 281, 312, 588, 13494, 466, 884, 264, 14611, 2144, 264, 787, 551, 291, 393, 291, 2644, 360, 257, 1961, 51618], 'temperature': 0.0, 'avg_logprob': -0.10717014784223577, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.0028784649912267923}, {'id': 515, 'seek': 443676, 'start': 4436.76, 'end': 4442.12, 'text': ' basically now anymore right so because the kill because you could do the kill because you knew', 'tokens': [50364, 1936, 586, 3602, 558, 370, 570, 264, 1961, 570, 291, 727, 360, 264, 1961, 570, 291, 2586, 50632], 'temperature': 0.0, 'avg_logprob': -0.15877834020876416, 'compression_ratio': 2.0253164556962027, 'no_speech_prob': 0.2624611556529999}, {'id': 516, 'seek': 443676, 'start': 4442.12, 'end': 4446.84, 'text': ' that something happens after something only then that killed as possible so now the kills will not', 'tokens': [50632, 300, 746, 2314, 934, 746, 787, 550, 300, 4652, 382, 1944, 370, 586, 264, 14563, 486, 406, 50868], 'temperature': 0.0, 'avg_logprob': -0.15877834020876416, 'compression_ratio': 2.0253164556962027, 'no_speech_prob': 0.2624611556529999}, {'id': 517, 'seek': 443676, 'start': 4446.84, 'end': 4451.24, 'text': ' be available so you have to do what are called weak updates you can only append something to', 'tokens': [50868, 312, 2435, 370, 291, 362, 281, 360, 437, 366, 1219, 5336, 9205, 291, 393, 787, 34116, 746, 281, 51088], 'temperature': 0.0, 'avg_logprob': -0.15877834020876416, 'compression_ratio': 2.0253164556962027, 'no_speech_prob': 0.2624611556529999}, {'id': 518, 'seek': 443676, 'start': 4451.24, 'end': 4457.16, 'text': ' the sets you cannot remove anything from the sets anymore right so this is what a flow insensitive', 'tokens': [51088, 264, 6352, 291, 2644, 4159, 1340, 490, 264, 6352, 3602, 558, 370, 341, 307, 437, 257, 3095, 1028, 34465, 51384], 'temperature': 0.0, 'avg_logprob': -0.15877834020876416, 'compression_ratio': 2.0253164556962027, 'no_speech_prob': 0.2624611556529999}, {'id': 519, 'seek': 443676, 'start': 4457.16, 'end': 4463.400000000001, 'text': ' analysis looks like right so it is much simpler simpler in the sense in even in terms of space', 'tokens': [51384, 5215, 1542, 411, 558, 370, 309, 307, 709, 18587, 18587, 294, 264, 2020, 294, 754, 294, 2115, 295, 1901, 51696], 'temperature': 0.0, 'avg_logprob': -0.15877834020876416, 'compression_ratio': 2.0253164556962027, 'no_speech_prob': 0.2624611556529999}, {'id': 520, 'seek': 446340, 'start': 4463.4, 'end': 4469.679999999999, 'text': ' you can understand what was the space taken by the flow sensitive analysis it was a size of the', 'tokens': [50364, 291, 393, 1223, 437, 390, 264, 1901, 2726, 538, 264, 3095, 9477, 5215, 309, 390, 257, 2744, 295, 264, 50678], 'temperature': 0.0, 'avg_logprob': -0.10299307300198463, 'compression_ratio': 1.8235294117647058, 'no_speech_prob': 0.06357687711715698}, {'id': 521, 'seek': 446340, 'start': 4469.679999999999, 'end': 4480.2, 'text': ' solution set times the number of basic blocks what is the size of the solution set here just', 'tokens': [50678, 3827, 992, 1413, 264, 1230, 295, 3875, 8474, 437, 307, 264, 2744, 295, 264, 3827, 992, 510, 445, 51204], 'temperature': 0.0, 'avg_logprob': -0.10299307300198463, 'compression_ratio': 1.8235294117647058, 'no_speech_prob': 0.06357687711715698}, {'id': 522, 'seek': 446340, 'start': 4480.2, 'end': 4489.12, 'text': ' the size of one solution right very cheap the memory footprint is very small right in fact', 'tokens': [51204, 264, 2744, 295, 472, 3827, 558, 588, 7084, 264, 4675, 24222, 307, 588, 1359, 558, 294, 1186, 51650], 'temperature': 0.0, 'avg_logprob': -0.10299307300198463, 'compression_ratio': 1.8235294117647058, 'no_speech_prob': 0.06357687711715698}, {'id': 523, 'seek': 448912, 'start': 4489.16, 'end': 4495.2, 'text': ' there are certain analysis like pointer analysis which are generally implemented as flow insensitive', 'tokens': [50366, 456, 366, 1629, 5215, 411, 23918, 5215, 597, 366, 5101, 12270, 382, 3095, 1028, 34465, 50668], 'temperature': 0.0, 'avg_logprob': -0.2133962869644165, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.006086084060370922}, {'id': 524, 'seek': 448912, 'start': 4495.2, 'end': 4503.04, 'text': ' analysis because the sort of accuracy we get is okay with like so essentially pointer analysis', 'tokens': [50668, 5215, 570, 264, 1333, 295, 14170, 321, 483, 307, 1392, 365, 411, 370, 4476, 23918, 5215, 51060], 'temperature': 0.0, 'avg_logprob': -0.2133962869644165, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.006086084060370922}, {'id': 525, 'seek': 448912, 'start': 4503.04, 'end': 4509.36, 'text': ' is used to drive other optimizations right so why can pointer analysis create a problem what', 'tokens': [51060, 307, 1143, 281, 3332, 661, 5028, 14455, 558, 370, 983, 393, 23918, 5215, 1884, 257, 1154, 437, 51376], 'temperature': 0.0, 'avg_logprob': -0.2133962869644165, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.006086084060370922}, {'id': 526, 'seek': 448912, 'start': 4509.36, 'end': 4514.92, 'text': ' is a what is a problem with if you get pointers how you are seeing so can you give me an example', 'tokens': [51376, 307, 257, 437, 307, 257, 1154, 365, 498, 291, 483, 44548, 577, 291, 366, 2577, 370, 393, 291, 976, 385, 364, 1365, 51654], 'temperature': 0.0, 'avg_logprob': -0.2133962869644165, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.006086084060370922}, {'id': 527, 'seek': 451492, 'start': 4514.92, 'end': 4520.0, 'text': " where it can create a problem which let's say reaching definitions or let's say liveness analysis", 'tokens': [50364, 689, 309, 393, 1884, 257, 1154, 597, 718, 311, 584, 9906, 21988, 420, 718, 311, 584, 375, 553, 442, 5215, 50618], 'temperature': 0.0, 'avg_logprob': -0.14660468166821625, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.008233275264501572}, {'id': 528, 'seek': 451492, 'start': 4520.0, 'end': 4530.4, 'text': " maybe that is easier so what what can be the problem with liveness analysis right so I let's", 'tokens': [50618, 1310, 300, 307, 3571, 370, 437, 437, 393, 312, 264, 1154, 365, 375, 553, 442, 5215, 558, 370, 286, 718, 311, 51138], 'temperature': 0.0, 'avg_logprob': -0.14660468166821625, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.008233275264501572}, {'id': 529, 'seek': 451492, 'start': 4530.4, 'end': 4539.24, 'text': " say I want to try to I want to figure out if some variable Y is live here or not right now let's", 'tokens': [51138, 584, 286, 528, 281, 853, 281, 286, 528, 281, 2573, 484, 498, 512, 7006, 398, 307, 1621, 510, 420, 406, 558, 586, 718, 311, 51580], 'temperature': 0.0, 'avg_logprob': -0.14660468166821625, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.008233275264501572}, {'id': 530, 'seek': 453924, 'start': 4539.24, 'end': 4547.599999999999, 'text': ' say I do not find any use of Y anywhere down the line but I see one basic block which uses star of', 'tokens': [50364, 584, 286, 360, 406, 915, 604, 764, 295, 398, 4992, 760, 264, 1622, 457, 286, 536, 472, 3875, 3461, 597, 4960, 3543, 295, 50782], 'temperature': 0.0, 'avg_logprob': -0.13541705791766828, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.0032676151022315025}, {'id': 531, 'seek': 453924, 'start': 4547.599999999999, 'end': 4559.4, 'text': ' Q what is the start of Q nobody knows what if this star of Q was Q was nothing but ampersand', 'tokens': [50782, 1249, 437, 307, 264, 722, 295, 1249, 5079, 3255, 437, 498, 341, 3543, 295, 1249, 390, 1249, 390, 1825, 457, 18648, 433, 474, 51372], 'temperature': 0.0, 'avg_logprob': -0.13541705791766828, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.0032676151022315025}, {'id': 532, 'seek': 455940, 'start': 4559.4, 'end': 4572.599999999999, 'text': ' Y it is actually using Y but in disguise as a pointer dereference right so all your analysis', 'tokens': [50364, 398, 309, 307, 767, 1228, 398, 457, 294, 32751, 382, 257, 23918, 15969, 5158, 558, 370, 439, 428, 5215, 51024], 'temperature': 0.0, 'avg_logprob': -0.10036362371137066, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.03950577601790428}, {'id': 533, 'seek': 455940, 'start': 4572.599999999999, 'end': 4578.04, 'text': ' that we have been doing you first will have to do a pointer analysis to figure out which', 'tokens': [51024, 300, 321, 362, 668, 884, 291, 700, 486, 362, 281, 360, 257, 23918, 5215, 281, 2573, 484, 597, 51296], 'temperature': 0.0, 'avg_logprob': -0.10036362371137066, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.03950577601790428}, {'id': 534, 'seek': 455940, 'start': 4578.04, 'end': 4584.759999999999, 'text': ' location a variable can point to and then modify your analysis accordingly to take care of such', 'tokens': [51296, 4914, 257, 7006, 393, 935, 281, 293, 550, 16927, 428, 5215, 19717, 281, 747, 1127, 295, 1270, 51632], 'temperature': 0.0, 'avg_logprob': -0.10036362371137066, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.03950577601790428}, {'id': 535, 'seek': 458476, 'start': 4584.76, 'end': 4592.72, 'text': ' scenarios right so pointer analysis is typically implemented as a flow insensitive analysis because', 'tokens': [50364, 15077, 558, 370, 23918, 5215, 307, 5850, 12270, 382, 257, 3095, 1028, 34465, 5215, 570, 50762], 'temperature': 0.0, 'avg_logprob': -0.13048216940342694, 'compression_ratio': 1.7962962962962963, 'no_speech_prob': 0.0824318677186966}, {'id': 536, 'seek': 458476, 'start': 4592.72, 'end': 4599.4400000000005, 'text': ' the accuracy you get with like the sophisticated flow insensitive analysis is good enough to drive', 'tokens': [50762, 264, 14170, 291, 483, 365, 411, 264, 16950, 3095, 1028, 34465, 5215, 307, 665, 1547, 281, 3332, 51098], 'temperature': 0.0, 'avg_logprob': -0.13048216940342694, 'compression_ratio': 1.7962962962962963, 'no_speech_prob': 0.0824318677186966}, {'id': 537, 'seek': 458476, 'start': 4599.4400000000005, 'end': 4604.76, 'text': ' these other optimizations they do not do they do not hurt it too much so it is not too bad so I', 'tokens': [51098, 613, 661, 5028, 14455, 436, 360, 406, 360, 436, 360, 406, 4607, 309, 886, 709, 370, 309, 307, 406, 886, 1578, 370, 286, 51364], 'temperature': 0.0, 'avg_logprob': -0.13048216940342694, 'compression_ratio': 1.7962962962962963, 'no_speech_prob': 0.0824318677186966}, {'id': 538, 'seek': 458476, 'start': 4604.76, 'end': 4609.96, 'text': ' will come back I will again see the mood of the class if I find it is interesting I will do a', 'tokens': [51364, 486, 808, 646, 286, 486, 797, 536, 264, 9268, 295, 264, 1508, 498, 286, 915, 309, 307, 1880, 286, 486, 360, 257, 51624], 'temperature': 0.0, 'avg_logprob': -0.13048216940342694, 'compression_ratio': 1.7962962962962963, 'no_speech_prob': 0.0824318677186966}, {'id': 539, 'seek': 460996, 'start': 4609.96, 'end': 4616.56, 'text': ' flow insensitive points to analysis will be very interesting maybe I will drive it more', 'tokens': [50364, 3095, 1028, 34465, 2793, 281, 5215, 486, 312, 588, 1880, 1310, 286, 486, 3332, 309, 544, 50694], 'temperature': 0.0, 'avg_logprob': -0.18565478148283782, 'compression_ratio': 1.5225806451612902, 'no_speech_prob': 0.3391750752925873}, {'id': 540, 'seek': 460996, 'start': 4616.56, 'end': 4622.76, 'text': ' to examples and not do too much of heavy theory right and if I see that the mood is not good', 'tokens': [50694, 281, 5110, 293, 406, 360, 886, 709, 295, 4676, 5261, 558, 293, 498, 286, 536, 300, 264, 9268, 307, 406, 665, 51004], 'temperature': 0.0, 'avg_logprob': -0.18565478148283782, 'compression_ratio': 1.5225806451612902, 'no_speech_prob': 0.3391750752925873}, {'id': 541, 'seek': 460996, 'start': 4622.76, 'end': 4625.8, 'text': ' then we will move to something called dynamic analysis.', 'tokens': [51004, 550, 321, 486, 1286, 281, 746, 1219, 8546, 5215, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.18565478148283782, 'compression_ratio': 1.5225806451612902, 'no_speech_prob': 0.3391750752925873}]