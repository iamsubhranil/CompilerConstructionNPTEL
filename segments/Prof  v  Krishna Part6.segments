[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 13.56, 'text': ' So, when I here at the end of this end of the round you have bottom bottom. When you', 'tokens': [50364, 407, 11, 562, 286, 510, 412, 264, 917, 295, 341, 917, 295, 264, 3098, 291, 362, 2767, 2767, 13, 1133, 291, 51042], 'temperature': 0.0, 'avg_logprob': -0.20541371690466048, 'compression_ratio': 1.453781512605042, 'no_speech_prob': 0.05653100833296776}, {'id': 1, 'seek': 0, 'start': 13.56, 'end': 21.76, 'text': ' come back at this point it is bottom bottom. What is the value of your map after j equal', 'tokens': [51042, 808, 646, 412, 341, 935, 309, 307, 2767, 2767, 13, 708, 307, 264, 2158, 295, 428, 4471, 934, 361, 2681, 51452], 'temperature': 0.0, 'avg_logprob': -0.20541371690466048, 'compression_ratio': 1.453781512605042, 'no_speech_prob': 0.05653100833296776}, {'id': 2, 'seek': 2176, 'start': 21.76, 'end': 31.480000000000004, 'text': ' to 3? Bottom 3. It is not bottom bottom and has the value instead of going only one direction', 'tokens': [50364, 281, 805, 30, 38289, 805, 13, 467, 307, 406, 2767, 2767, 293, 575, 264, 2158, 2602, 295, 516, 787, 472, 3513, 50850], 'temperature': 0.0, 'avg_logprob': -0.23889506203787667, 'compression_ratio': 1.6851851851851851, 'no_speech_prob': 0.12380322068929672}, {'id': 3, 'seek': 2176, 'start': 31.480000000000004, 'end': 39.24, 'text': ' has gone in the other direction? No. The value for each at each end of each statement it', 'tokens': [50850, 575, 2780, 294, 264, 661, 3513, 30, 883, 13, 440, 2158, 337, 1184, 412, 1184, 917, 295, 1184, 5629, 309, 51238], 'temperature': 0.0, 'avg_logprob': -0.23889506203787667, 'compression_ratio': 1.6851851851851851, 'no_speech_prob': 0.12380322068929672}, {'id': 4, 'seek': 2176, 'start': 39.24, 'end': 45.6, 'text': ' should go in one direction. At the end of it here it was bottom 7 it became bottom bottom.', 'tokens': [51238, 820, 352, 294, 472, 3513, 13, 1711, 264, 917, 295, 309, 510, 309, 390, 2767, 1614, 309, 3062, 2767, 2767, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.23889506203787667, 'compression_ratio': 1.6851851851851851, 'no_speech_prob': 0.12380322068929672}, {'id': 5, 'seek': 4560, 'start': 46.120000000000005, 'end': 51.88, 'text': ' So, in one direction here it was bottom 3 remain bottom 3. So, it is not that we are', 'tokens': [50390, 407, 11, 294, 472, 3513, 510, 309, 390, 2767, 805, 6222, 2767, 805, 13, 407, 11, 309, 307, 406, 300, 321, 366, 50678], 'temperature': 0.0, 'avg_logprob': -0.22025971753256662, 'compression_ratio': 1.9417040358744395, 'no_speech_prob': 0.06545326858758926}, {'id': 6, 'seek': 4560, 'start': 51.88, 'end': 58.52, 'text': ' going in sometimes up sometimes down no. So, the monotonicity property still holds and', 'tokens': [50678, 516, 294, 2171, 493, 2171, 760, 572, 13, 407, 11, 264, 1108, 310, 11630, 507, 4707, 920, 9190, 293, 51010], 'temperature': 0.0, 'avg_logprob': -0.22025971753256662, 'compression_ratio': 1.9417040358744395, 'no_speech_prob': 0.06545326858758926}, {'id': 7, 'seek': 4560, 'start': 58.52, 'end': 65.04, 'text': ' then once you get bottom 3 here you will go to the if j not equal to 3 and then check', 'tokens': [51010, 550, 1564, 291, 483, 2767, 805, 510, 291, 486, 352, 281, 264, 498, 361, 406, 2681, 281, 805, 293, 550, 1520, 51336], 'temperature': 0.0, 'avg_logprob': -0.22025971753256662, 'compression_ratio': 1.9417040358744395, 'no_speech_prob': 0.06545326858758926}, {'id': 8, 'seek': 4560, 'start': 65.04, 'end': 71.0, 'text': ' that the in has not changed it was bottom 3 before it remain bottom 3. So, you will', 'tokens': [51336, 300, 264, 294, 575, 406, 3105, 309, 390, 2767, 805, 949, 309, 6222, 2767, 805, 13, 407, 11, 291, 486, 51634], 'temperature': 0.0, 'avg_logprob': -0.22025971753256662, 'compression_ratio': 1.9417040358744395, 'no_speech_prob': 0.06545326858758926}, {'id': 9, 'seek': 4560, 'start': 71.0, 'end': 75.56, 'text': ' stop your analysis and then you will say replace the constants you will find this j has not', 'tokens': [51634, 1590, 428, 5215, 293, 550, 291, 486, 584, 7406, 264, 35870, 291, 486, 915, 341, 361, 575, 406, 51862], 'temperature': 0.0, 'avg_logprob': -0.22025971753256662, 'compression_ratio': 1.9417040358744395, 'no_speech_prob': 0.06545326858758926}, {'id': 10, 'seek': 7556, 'start': 75.56, 'end': 83.68, 'text': ' j equal to 3 and then this j you can remove this because this j is always 3. So, this', 'tokens': [50364, 361, 2681, 281, 805, 293, 550, 341, 361, 291, 393, 4159, 341, 570, 341, 361, 307, 1009, 805, 13, 407, 11, 341, 50770], 'temperature': 0.0, 'avg_logprob': -0.15784217251671684, 'compression_ratio': 1.8082191780821917, 'no_speech_prob': 0.00103204813785851}, {'id': 11, 'seek': 7556, 'start': 83.68, 'end': 88.76, 'text': ' is if condition and this part can go and this will become j equal to 5. So, the code will', 'tokens': [50770, 307, 498, 4188, 293, 341, 644, 393, 352, 293, 341, 486, 1813, 361, 2681, 281, 1025, 13, 407, 11, 264, 3089, 486, 51024], 'temperature': 0.0, 'avg_logprob': -0.15784217251671684, 'compression_ratio': 1.8082191780821917, 'no_speech_prob': 0.00103204813785851}, {'id': 12, 'seek': 7556, 'start': 88.76, 'end': 101.36, 'text': ' become I think just j equal to 5 because the else part can go sorry the then part can go', 'tokens': [51024, 1813, 286, 519, 445, 361, 2681, 281, 1025, 570, 264, 1646, 644, 393, 352, 2597, 264, 550, 644, 393, 352, 51654], 'temperature': 0.0, 'avg_logprob': -0.15784217251671684, 'compression_ratio': 1.8082191780821917, 'no_speech_prob': 0.00103204813785851}, {'id': 13, 'seek': 10136, 'start': 101.36, 'end': 111.0, 'text': ' does not make sense why? So, with that so yeah so that was the last thing I want to', 'tokens': [50364, 775, 406, 652, 2020, 983, 30, 407, 11, 365, 300, 370, 1338, 370, 300, 390, 264, 1036, 551, 286, 528, 281, 50846], 'temperature': 0.0, 'avg_logprob': -0.28361812269831277, 'compression_ratio': 1.758974358974359, 'no_speech_prob': 0.08258841931819916}, {'id': 14, 'seek': 10136, 'start': 111.0, 'end': 115.2, 'text': ' say ok. So, let us do a quick recap of what we did today morning.', 'tokens': [50846, 584, 3133, 13, 407, 11, 718, 505, 360, 257, 1702, 20928, 295, 437, 321, 630, 965, 2446, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.28361812269831277, 'compression_ratio': 1.758974358974359, 'no_speech_prob': 0.08258841931819916}, {'id': 15, 'seek': 10136, 'start': 115.2, 'end': 122.16, 'text': ' What did we do? We started with constant propagation we started with the intro of data flow analysis', 'tokens': [51056, 708, 630, 321, 360, 30, 492, 1409, 365, 5754, 38377, 321, 1409, 365, 264, 12897, 295, 1412, 3095, 5215, 51404], 'temperature': 0.0, 'avg_logprob': -0.28361812269831277, 'compression_ratio': 1.758974358974359, 'no_speech_prob': 0.08258841931819916}, {'id': 16, 'seek': 10136, 'start': 122.16, 'end': 128.88, 'text': ' looked at constant propagation we took the iterated data flow analysis the general algorithm', 'tokens': [51404, 2956, 412, 5754, 38377, 321, 1890, 264, 17138, 770, 1412, 3095, 5215, 264, 2674, 9284, 51740], 'temperature': 0.0, 'avg_logprob': -0.28361812269831277, 'compression_ratio': 1.758974358974359, 'no_speech_prob': 0.08258841931819916}, {'id': 17, 'seek': 12888, 'start': 128.88, 'end': 138.28, 'text': ' and then we derived an algorithm for constant propagation we then took it for conditional', 'tokens': [50364, 293, 550, 321, 18949, 364, 9284, 337, 5754, 38377, 321, 550, 1890, 309, 337, 27708, 50834], 'temperature': 0.0, 'avg_logprob': -0.21253240519556507, 'compression_ratio': 1.795774647887324, 'no_speech_prob': 0.023984793573617935}, {'id': 18, 'seek': 12888, 'start': 138.28, 'end': 144.96, 'text': ' constant propagation we are finding we are now finding conditional constants.', 'tokens': [50834, 5754, 38377, 321, 366, 5006, 321, 366, 586, 5006, 27708, 35870, 13, 51168], 'temperature': 0.0, 'avg_logprob': -0.21253240519556507, 'compression_ratio': 1.795774647887324, 'no_speech_prob': 0.023984793573617935}, {'id': 19, 'seek': 12888, 'start': 144.96, 'end': 155.88, 'text': ' And now I am in a dilemma I have 3 more hours to go I have 4 topics that I have in mind', 'tokens': [51168, 400, 586, 286, 669, 294, 257, 34312, 286, 362, 805, 544, 2496, 281, 352, 286, 362, 1017, 8378, 300, 286, 362, 294, 1575, 51714], 'temperature': 0.0, 'avg_logprob': -0.21253240519556507, 'compression_ratio': 1.795774647887324, 'no_speech_prob': 0.023984793573617935}, {'id': 20, 'seek': 15588, 'start': 155.88, 'end': 163.79999999999998, 'text': ' which I definitely cannot cover. So, the topics I have in mind are something called', 'tokens': [50364, 597, 286, 2138, 2644, 2060, 13, 407, 11, 264, 8378, 286, 362, 294, 1575, 366, 746, 1219, 50760], 'temperature': 0.0, 'avg_logprob': -0.22705000922793434, 'compression_ratio': 1.348148148148148, 'no_speech_prob': 0.164455845952034}, {'id': 21, 'seek': 15588, 'start': 163.79999999999998, 'end': 177.44, 'text': ' SSA and use that to improve the constant propagation. Second one is about flow analysis which will', 'tokens': [50760, 318, 8886, 293, 764, 300, 281, 3470, 264, 5754, 38377, 13, 5736, 472, 307, 466, 3095, 5215, 597, 486, 51442], 'temperature': 0.0, 'avg_logprob': -0.22705000922793434, 'compression_ratio': 1.348148148148148, 'no_speech_prob': 0.164455845952034}, {'id': 22, 'seek': 17744, 'start': 178.44, 'end': 187.16, 'text': ' inlining. Third one is loop optimizations. Fourth one is dependence analysis I am nearly', 'tokens': [50414, 294, 31079, 13, 12548, 472, 307, 6367, 5028, 14455, 13, 23773, 472, 307, 31704, 5215, 286, 669, 6217, 50850], 'temperature': 0.0, 'avg_logprob': -0.20131029580768786, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.036187972873449326}, {'id': 23, 'seek': 17744, 'start': 187.16, 'end': 190.52, 'text': ' sure I am not touching dependence analysis because that will probably require us to go', 'tokens': [50850, 988, 286, 669, 406, 11175, 31704, 5215, 570, 300, 486, 1391, 3651, 505, 281, 352, 51018], 'temperature': 0.0, 'avg_logprob': -0.20131029580768786, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.036187972873449326}, {'id': 24, 'seek': 17744, 'start': 190.52, 'end': 197.32, 'text': ' in a different direction completely. So, what I am thinking I will do I will cover flow', 'tokens': [51018, 294, 257, 819, 3513, 2584, 13, 407, 11, 437, 286, 669, 1953, 286, 486, 360, 286, 486, 2060, 3095, 51358], 'temperature': 0.0, 'avg_logprob': -0.20131029580768786, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.036187972873449326}, {'id': 25, 'seek': 17744, 'start': 197.32, 'end': 206.0, 'text': ' analysis and inlining depending on time we will quickly do loop transformations then', 'tokens': [51358, 5215, 293, 294, 31079, 5413, 322, 565, 321, 486, 2661, 360, 6367, 34852, 550, 51792], 'temperature': 0.0, 'avg_logprob': -0.20131029580768786, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.036187972873449326}, {'id': 26, 'seek': 20600, 'start': 206.0, 'end': 216.88, 'text': ' we will skip SSA and optimizations. Because I kept thinking should I pick A B C somewhere', 'tokens': [50364, 321, 486, 10023, 318, 8886, 293, 5028, 14455, 13, 1436, 286, 4305, 1953, 820, 286, 1888, 316, 363, 383, 4079, 50908], 'temperature': 0.0, 'avg_logprob': -0.23954049023714932, 'compression_ratio': 1.5056179775280898, 'no_speech_prob': 0.042066387832164764}, {'id': 27, 'seek': 20600, 'start': 216.88, 'end': 226.16, 'text': ' I did inky pinky ponky and this came in. So, when we say flow analysis what is flow analysis?', 'tokens': [50908, 286, 630, 294, 4133, 42616, 9224, 4133, 293, 341, 1361, 294, 13, 407, 11, 562, 321, 584, 3095, 5215, 437, 307, 3095, 5215, 30, 51372], 'temperature': 0.0, 'avg_logprob': -0.23954049023714932, 'compression_ratio': 1.5056179775280898, 'no_speech_prob': 0.042066387832164764}, {'id': 28, 'seek': 20600, 'start': 226.16, 'end': 229.66, 'text': ' You have been actually doing flow analysis when you did constant propagation at some', 'tokens': [51372, 509, 362, 668, 767, 884, 3095, 5215, 562, 291, 630, 5754, 38377, 412, 512, 51547], 'temperature': 0.0, 'avg_logprob': -0.23954049023714932, 'compression_ratio': 1.5056179775280898, 'no_speech_prob': 0.042066387832164764}, {'id': 29, 'seek': 22966, 'start': 230.26, 'end': 235.82, 'text': ' level you did flow analysis to find out what is flowing what constants are flowing into', 'tokens': [50394, 1496, 291, 630, 3095, 5215, 281, 915, 484, 437, 307, 13974, 437, 35870, 366, 13974, 666, 50672], 'temperature': 0.0, 'avg_logprob': -0.2869476250239781, 'compression_ratio': 1.8489208633093526, 'no_speech_prob': 0.02160661481320858}, {'id': 30, 'seek': 22966, 'start': 235.82, 'end': 246.5, 'text': ' different variables. So, this is not flow analysis what flows into it what flows into', 'tokens': [50672, 819, 9102, 13, 407, 11, 341, 307, 406, 3095, 5215, 437, 12867, 666, 309, 437, 12867, 666, 51206], 'temperature': 0.0, 'avg_logprob': -0.2869476250239781, 'compression_ratio': 1.8489208633093526, 'no_speech_prob': 0.02160661481320858}, {'id': 31, 'seek': 22966, 'start': 246.5, 'end': 253.78, 'text': ' the expression what flows into a variable and one instance of flow analysis is what', 'tokens': [51206, 264, 6114, 437, 12867, 666, 257, 7006, 293, 472, 5197, 295, 3095, 5215, 307, 437, 51570], 'temperature': 0.0, 'avg_logprob': -0.2869476250239781, 'compression_ratio': 1.8489208633093526, 'no_speech_prob': 0.02160661481320858}, {'id': 32, 'seek': 25378, 'start': 253.78, 'end': 257.06, 'text': ' you did in constant propagation where you saw constant flowing.', 'tokens': [50364, 291, 630, 294, 5754, 38377, 689, 291, 1866, 5754, 13974, 13, 50528], 'temperature': 0.0, 'avg_logprob': -0.21861385880855091, 'compression_ratio': 1.5844155844155845, 'no_speech_prob': 0.005905757658183575}, {'id': 33, 'seek': 25378, 'start': 257.06, 'end': 265.26, 'text': ' Another instance is let us not look at scalar variables, but let us look at reference variables.', 'tokens': [50528, 3996, 5197, 307, 718, 505, 406, 574, 412, 39684, 9102, 11, 457, 718, 505, 574, 412, 6408, 9102, 13, 50938], 'temperature': 0.0, 'avg_logprob': -0.21861385880855091, 'compression_ratio': 1.5844155844155845, 'no_speech_prob': 0.005905757658183575}, {'id': 34, 'seek': 25378, 'start': 265.26, 'end': 277.22, 'text': ' Say in Java you have when you do when you declare a variable A of type X at runtime', 'tokens': [50938, 6463, 294, 10745, 291, 362, 562, 291, 360, 562, 291, 19710, 257, 7006, 316, 295, 2010, 1783, 412, 34474, 51536], 'temperature': 0.0, 'avg_logprob': -0.21861385880855091, 'compression_ratio': 1.5844155844155845, 'no_speech_prob': 0.005905757658183575}, {'id': 35, 'seek': 27722, 'start': 278.22, 'end': 289.22, 'text': ' point to an object of type X or subtypes X or any of its subtypes. Now, I want to know', 'tokens': [50414, 935, 281, 364, 2657, 295, 2010, 1783, 420, 1422, 874, 5190, 1783, 420, 604, 295, 1080, 1422, 874, 5190, 13, 823, 11, 286, 528, 281, 458, 50964], 'temperature': 0.0, 'avg_logprob': -0.22663402557373047, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.1810770183801651}, {'id': 36, 'seek': 27722, 'start': 289.22, 'end': 300.58000000000004, 'text': ' given a variable some such variable X what flows into it I want to know what type of', 'tokens': [50964, 2212, 257, 7006, 512, 1270, 7006, 1783, 437, 12867, 666, 309, 286, 528, 281, 458, 437, 2010, 295, 51532], 'temperature': 0.0, 'avg_logprob': -0.22663402557373047, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.1810770183801651}, {'id': 37, 'seek': 30058, 'start': 301.58, 'end': 310.34, 'text': ' flows into it that is which at runtime it will hold some object what is the type of', 'tokens': [50414, 12867, 666, 309, 300, 307, 597, 412, 34474, 309, 486, 1797, 512, 2657, 437, 307, 264, 2010, 295, 50852], 'temperature': 0.0, 'avg_logprob': -0.19936742502100327, 'compression_ratio': 1.6538461538461537, 'no_speech_prob': 0.021437615156173706}, {'id': 38, 'seek': 30058, 'start': 310.34, 'end': 320.26, 'text': ' that object what are those classes. I mean if we say that the flow set of an expression', 'tokens': [50852, 300, 2657, 437, 366, 729, 5359, 13, 286, 914, 498, 321, 584, 300, 264, 3095, 992, 295, 364, 6114, 51348], 'temperature': 0.0, 'avg_logprob': -0.19936742502100327, 'compression_ratio': 1.6538461538461537, 'no_speech_prob': 0.021437615156173706}, {'id': 39, 'seek': 30058, 'start': 320.26, 'end': 327.18, 'text': ' E is A B C it means at runtime this expression may hold an object of type A or B or C.', 'tokens': [51348, 462, 307, 316, 363, 383, 309, 1355, 412, 34474, 341, 6114, 815, 1797, 364, 2657, 295, 2010, 316, 420, 363, 420, 383, 13, 51694], 'temperature': 0.0, 'avg_logprob': -0.19936742502100327, 'compression_ratio': 1.6538461538461537, 'no_speech_prob': 0.021437615156173706}, {'id': 40, 'seek': 32718, 'start': 327.18, 'end': 334.18, 'text': ' If I write X equal to nu A later again both are two different objects, but for me both', 'tokens': [50364, 759, 286, 2464, 1783, 2681, 281, 3822, 316, 1780, 797, 1293, 366, 732, 819, 6565, 11, 457, 337, 385, 1293, 50714], 'temperature': 0.0, 'avg_logprob': -0.22312938690185546, 'compression_ratio': 1.3255813953488371, 'no_speech_prob': 0.004673353862017393}, {'id': 41, 'seek': 32718, 'start': 339.74, 'end': 346.74, 'text': ' are of same type A. So, I am only looking at the type make sense. So, we say that if', 'tokens': [50992, 366, 295, 912, 2010, 316, 13, 407, 11, 286, 669, 787, 1237, 412, 264, 2010, 652, 2020, 13, 407, 11, 321, 584, 300, 498, 51342], 'temperature': 0.0, 'avg_logprob': -0.22312938690185546, 'compression_ratio': 1.3255813953488371, 'no_speech_prob': 0.004673353862017393}, {'id': 42, 'seek': 34674, 'start': 346.74, 'end': 353.74, 'text': ' an expression E has a flows I mean the flow set of an expression is A B C it means at', 'tokens': [50364, 364, 6114, 462, 575, 257, 12867, 286, 914, 264, 3095, 992, 295, 364, 6114, 307, 316, 363, 383, 309, 1355, 412, 50714], 'temperature': 0.0, 'avg_logprob': -0.20844053843664745, 'compression_ratio': 1.513157894736842, 'no_speech_prob': 0.0046700239181518555}, {'id': 43, 'seek': 34674, 'start': 357.18, 'end': 364.18, 'text': ' runtime either it can be null or A or B or C nothing else. It is a main analysis. So,', 'tokens': [50886, 34474, 2139, 309, 393, 312, 18184, 420, 316, 420, 363, 420, 383, 1825, 1646, 13, 467, 307, 257, 2135, 5215, 13, 407, 11, 51236], 'temperature': 0.0, 'avg_logprob': -0.20844053843664745, 'compression_ratio': 1.513157894736842, 'no_speech_prob': 0.0046700239181518555}, {'id': 44, 'seek': 34674, 'start': 369.54, 'end': 376.54, 'text': ' whatever it says will not flow will never flow make sense.', 'tokens': [51504, 2035, 309, 1619, 486, 406, 3095, 486, 1128, 3095, 652, 2020, 13, 51854], 'temperature': 0.0, 'avg_logprob': -0.20844053843664745, 'compression_ratio': 1.513157894736842, 'no_speech_prob': 0.0046700239181518555}, {'id': 45, 'seek': 37674, 'start': 376.74, 'end': 383.74, 'text': ' What is the use of such a flow information? Let us say in Java or any of these O languages', 'tokens': [50364, 708, 307, 264, 764, 295, 1270, 257, 3095, 1589, 30, 961, 505, 584, 294, 10745, 420, 604, 295, 613, 422, 8650, 50714], 'temperature': 0.0, 'avg_logprob': -0.2577989253591984, 'compression_ratio': 1.366412213740458, 'no_speech_prob': 0.0008817739435471594}, {'id': 46, 'seek': 37674, 'start': 391.26, 'end': 398.26, 'text': ' if I have some expression E dot foo this foo can be present could be present in anywhere', 'tokens': [51090, 498, 286, 362, 512, 6114, 462, 5893, 726, 78, 341, 726, 78, 393, 312, 1974, 727, 312, 1974, 294, 4992, 51440], 'temperature': 0.0, 'avg_logprob': -0.2577989253591984, 'compression_ratio': 1.366412213740458, 'no_speech_prob': 0.0008817739435471594}, {'id': 47, 'seek': 39826, 'start': 399.26, 'end': 405.42, 'text': ' right the method foo can be present in many places. I want to know which foo should I', 'tokens': [50414, 558, 264, 3170, 726, 78, 393, 312, 1974, 294, 867, 3190, 13, 286, 528, 281, 458, 597, 726, 78, 820, 286, 50722], 'temperature': 0.0, 'avg_logprob': -0.1549741852451378, 'compression_ratio': 1.6158536585365855, 'no_speech_prob': 0.003367788391187787}, {'id': 48, 'seek': 39826, 'start': 405.42, 'end': 412.42, 'text': ' call and if I know that this foo can be only present in class A because this E will hold', 'tokens': [50722, 818, 293, 498, 286, 458, 300, 341, 726, 78, 393, 312, 787, 1974, 294, 1508, 316, 570, 341, 462, 486, 1797, 51072], 'temperature': 0.0, 'avg_logprob': -0.1549741852451378, 'compression_ratio': 1.6158536585365855, 'no_speech_prob': 0.003367788391187787}, {'id': 49, 'seek': 39826, 'start': 419.46, 'end': 426.46, 'text': ' an object of type A only then what I can do I can inline the method there, but if multiple', 'tokens': [51424, 364, 2657, 295, 2010, 316, 787, 550, 437, 286, 393, 360, 286, 393, 294, 1889, 264, 3170, 456, 11, 457, 498, 3866, 51774], 'temperature': 0.0, 'avg_logprob': -0.1549741852451378, 'compression_ratio': 1.6158536585365855, 'no_speech_prob': 0.003367788391187787}, {'id': 50, 'seek': 42826, 'start': 429.26, 'end': 434.98, 'text': ' if this E can hold objects of multi different types or where I cannot be sure then I cannot', 'tokens': [50414, 498, 341, 462, 393, 1797, 6565, 295, 4825, 819, 3467, 420, 689, 286, 2644, 312, 988, 550, 286, 2644, 50700], 'temperature': 0.0, 'avg_logprob': -0.31705033635518637, 'compression_ratio': 1.6084905660377358, 'no_speech_prob': 0.0013433379353955388}, {'id': 51, 'seek': 42826, 'start': 434.98, 'end': 441.98, 'text': ' inline because which method should I inline this guy or this guy right.', 'tokens': [50700, 294, 1889, 570, 597, 3170, 820, 286, 294, 1889, 341, 2146, 420, 341, 2146, 558, 13, 51050], 'temperature': 0.0, 'avg_logprob': -0.31705033635518637, 'compression_ratio': 1.6084905660377358, 'no_speech_prob': 0.0013433379353955388}, {'id': 52, 'seek': 42826, 'start': 443.62, 'end': 450.62, 'text': ' Here is one more thing let us say you have looked at your whole program and found that', 'tokens': [51132, 1692, 307, 472, 544, 551, 718, 505, 584, 291, 362, 2956, 412, 428, 1379, 1461, 293, 1352, 300, 51482], 'temperature': 0.0, 'avg_logprob': -0.31705033635518637, 'compression_ratio': 1.6084905660377358, 'no_speech_prob': 0.0013433379353955388}, {'id': 53, 'seek': 42826, 'start': 450.74, 'end': 457.74, 'text': ' for a certain class it has a method m which is never called anyway. So, this is the method', 'tokens': [51488, 337, 257, 1629, 1508, 309, 575, 257, 3170, 275, 597, 307, 1128, 1219, 4033, 13, 407, 11, 341, 307, 264, 3170, 51838], 'temperature': 0.0, 'avg_logprob': -0.31705033635518637, 'compression_ratio': 1.6084905660377358, 'no_speech_prob': 0.0013433379353955388}, {'id': 54, 'seek': 45826, 'start': 458.26, 'end': 464.06, 'text': ' anywhere method m is called, but not from this class then in that class you can remove', 'tokens': [50364, 4992, 3170, 275, 307, 1219, 11, 457, 406, 490, 341, 1508, 550, 294, 300, 1508, 291, 393, 4159, 50654], 'temperature': 0.0, 'avg_logprob': -0.1756151683294951, 'compression_ratio': 1.5116279069767442, 'no_speech_prob': 0.0006768775056116283}, {'id': 55, 'seek': 45826, 'start': 464.06, 'end': 471.06, 'text': ' that code that is dead code correct. So, what is our goal? We want to find out for each', 'tokens': [50654, 300, 3089, 300, 307, 3116, 3089, 3006, 13, 407, 11, 437, 307, 527, 3387, 30, 492, 528, 281, 915, 484, 337, 1184, 51004], 'temperature': 0.0, 'avg_logprob': -0.1756151683294951, 'compression_ratio': 1.5116279069767442, 'no_speech_prob': 0.0006768775056116283}, {'id': 56, 'seek': 45826, 'start': 475.34, 'end': 482.34, 'text': ' expression using which I am making a call something of E dot foo types I want to know', 'tokens': [51218, 6114, 1228, 597, 286, 669, 1455, 257, 818, 746, 295, 462, 5893, 726, 78, 3467, 286, 528, 281, 458, 51568], 'temperature': 0.0, 'avg_logprob': -0.1756151683294951, 'compression_ratio': 1.5116279069767442, 'no_speech_prob': 0.0006768775056116283}, {'id': 57, 'seek': 48234, 'start': 482.34, 'end': 489.34, 'text': ' what is the flow set is the flow set a singleton set if it is singleton set then I can inline', 'tokens': [50364, 437, 307, 264, 3095, 992, 307, 264, 3095, 992, 257, 1522, 14806, 992, 498, 309, 307, 1522, 14806, 992, 550, 286, 393, 294, 1889, 50714], 'temperature': 0.0, 'avg_logprob': -0.25368993098919207, 'compression_ratio': 1.6140350877192982, 'no_speech_prob': 0.0012243754463270307}, {'id': 58, 'seek': 48234, 'start': 491.61999999999995, 'end': 498.62, 'text': ' it. So, we will study two things one how to compute this flow set number two how to inline', 'tokens': [50828, 309, 13, 407, 11, 321, 486, 2979, 732, 721, 472, 577, 281, 14722, 341, 3095, 992, 1230, 732, 577, 281, 294, 1889, 51178], 'temperature': 0.0, 'avg_logprob': -0.25368993098919207, 'compression_ratio': 1.6140350877192982, 'no_speech_prob': 0.0012243754463270307}, {'id': 59, 'seek': 49862, 'start': 498.62, 'end': 505.62, 'text': ' this flow set number two how to inline. So, what is our we will have an assumption that', 'tokens': [50364, 341, 3095, 992, 1230, 732, 577, 281, 294, 1889, 13, 407, 11, 437, 307, 527, 321, 486, 362, 364, 15302, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.1967170121239834, 'compression_ratio': 1.5748502994011977, 'no_speech_prob': 0.003569964785128832}, {'id': 60, 'seek': 49862, 'start': 511.54, 'end': 518.54, 'text': ' we have closed world assumption that is I know the whole program nothing else is missing', 'tokens': [51010, 321, 362, 5395, 1002, 15302, 300, 307, 286, 458, 264, 1379, 1461, 1825, 1646, 307, 5361, 51360], 'temperature': 0.0, 'avg_logprob': -0.1967170121239834, 'compression_ratio': 1.5748502994011977, 'no_speech_prob': 0.003569964785128832}, {'id': 61, 'seek': 49862, 'start': 519.9, 'end': 523.78, 'text': ' all parts of the program including library they are all available and will not change.', 'tokens': [51428, 439, 3166, 295, 264, 1461, 3009, 6405, 436, 366, 439, 2435, 293, 486, 406, 1319, 13, 51622], 'temperature': 0.0, 'avg_logprob': -0.1967170121239834, 'compression_ratio': 1.5748502994011977, 'no_speech_prob': 0.003569964785128832}, {'id': 62, 'seek': 52378, 'start': 524.1, 'end': 530.22, 'text': ' So, we want assuming we want to assume dynamic class loading this and that sometimes you', 'tokens': [50380, 407, 11, 321, 528, 11926, 321, 528, 281, 6552, 8546, 1508, 15114, 341, 293, 300, 2171, 291, 50686], 'temperature': 0.0, 'avg_logprob': -0.20554239321977663, 'compression_ratio': 1.809278350515464, 'no_speech_prob': 0.0015148419188335538}, {'id': 63, 'seek': 52378, 'start': 530.22, 'end': 537.22, 'text': ' have some analysis is done using open world assumption for instance when you do when in', 'tokens': [50686, 362, 512, 5215, 307, 1096, 1228, 1269, 1002, 15302, 337, 5197, 562, 291, 360, 562, 294, 51036], 'temperature': 0.0, 'avg_logprob': -0.20554239321977663, 'compression_ratio': 1.809278350515464, 'no_speech_prob': 0.0015148419188335538}, {'id': 64, 'seek': 52378, 'start': 537.9, 'end': 544.9, 'text': ' java when it does type checking for a class right it may not have the rest of the whole', 'tokens': [51070, 361, 4061, 562, 309, 775, 2010, 8568, 337, 257, 1508, 558, 309, 815, 406, 362, 264, 1472, 295, 264, 1379, 51420], 'temperature': 0.0, 'avg_logprob': -0.20554239321977663, 'compression_ratio': 1.809278350515464, 'no_speech_prob': 0.0015148419188335538}, {'id': 65, 'seek': 52378, 'start': 545.5, 'end': 550.74, 'text': ' all the library available it still does type checking that is an open world assumption', 'tokens': [51450, 439, 264, 6405, 2435, 309, 920, 775, 2010, 8568, 300, 307, 364, 1269, 1002, 15302, 51712], 'temperature': 0.0, 'avg_logprob': -0.20554239321977663, 'compression_ratio': 1.809278350515464, 'no_speech_prob': 0.0015148419188335538}, {'id': 66, 'seek': 55074, 'start': 550.74, 'end': 555.7, 'text': ' here for our analysis we will assume closed world assumption.', 'tokens': [50364, 510, 337, 527, 5215, 321, 486, 6552, 5395, 1002, 15302, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.2853408261954066, 'compression_ratio': 1.6377551020408163, 'no_speech_prob': 0.002359182806685567}, {'id': 67, 'seek': 55074, 'start': 555.7, 'end': 562.7, 'text': ' We already know that inlining is an important optimization for over languages. So, if you', 'tokens': [50612, 492, 1217, 458, 300, 294, 31079, 307, 364, 1021, 19618, 337, 670, 8650, 13, 407, 11, 498, 291, 50962], 'temperature': 0.0, 'avg_logprob': -0.2853408261954066, 'compression_ratio': 1.6377551020408163, 'no_speech_prob': 0.002359182806685567}, {'id': 68, 'seek': 55074, 'start': 564.34, 'end': 571.34, 'text': ' can say example let us say I have a class A with a method M B extends A it also has', 'tokens': [51044, 393, 584, 1365, 718, 505, 584, 286, 362, 257, 1508, 316, 365, 257, 3170, 376, 363, 26448, 316, 309, 611, 575, 51394], 'temperature': 0.0, 'avg_logprob': -0.2853408261954066, 'compression_ratio': 1.6377551020408163, 'no_speech_prob': 0.002359182806685567}, {'id': 69, 'seek': 55074, 'start': 573.42, 'end': 580.42, 'text': ' a method M class Q has a method P S extends P and it also has a method M. So, this is', 'tokens': [51498, 257, 3170, 376, 1508, 1249, 575, 257, 3170, 430, 318, 26448, 430, 293, 309, 611, 575, 257, 3170, 376, 13, 407, 11, 341, 307, 51848], 'temperature': 0.0, 'avg_logprob': -0.2853408261954066, 'compression_ratio': 1.6377551020408163, 'no_speech_prob': 0.002359182806685567}, {'id': 70, 'seek': 58074, 'start': 580.74, 'end': 587.74, 'text': ' also has a method P see the funny thing is when I when I say I want to know what flows', 'tokens': [50364, 611, 575, 257, 3170, 430, 536, 264, 4074, 551, 307, 562, 286, 562, 286, 584, 286, 528, 281, 458, 437, 12867, 50714], 'temperature': 0.0, 'avg_logprob': -0.18032129486994958, 'compression_ratio': 1.782312925170068, 'no_speech_prob': 0.0004234732477925718}, {'id': 71, 'seek': 58074, 'start': 588.1800000000001, 'end': 595.1800000000001, 'text': ' into E it will impact which foo it is if I know precisely what is getting inside this', 'tokens': [50736, 666, 462, 309, 486, 2712, 597, 726, 78, 309, 307, 498, 286, 458, 13402, 437, 307, 1242, 1854, 341, 51086], 'temperature': 0.0, 'avg_logprob': -0.18032129486994958, 'compression_ratio': 1.782312925170068, 'no_speech_prob': 0.0004234732477925718}, {'id': 72, 'seek': 58074, 'start': 598.5, 'end': 605.1, 'text': ' I will know what is happening inside precisely what is happening in foo if I know what is', 'tokens': [51252, 286, 486, 458, 437, 307, 2737, 1854, 13402, 437, 307, 2737, 294, 726, 78, 498, 286, 458, 437, 307, 51582], 'temperature': 0.0, 'avg_logprob': -0.18032129486994958, 'compression_ratio': 1.782312925170068, 'no_speech_prob': 0.0004234732477925718}, {'id': 73, 'seek': 60510, 'start': 605.1, 'end': 612.1, 'text': ' happening in foo it will help me in doing more precise flow analysis.', 'tokens': [50364, 2737, 294, 726, 78, 309, 486, 854, 385, 294, 884, 544, 13600, 3095, 5215, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.20749813763063346, 'compression_ratio': 1.7428571428571429, 'no_speech_prob': 0.0011651200475171208}, {'id': 74, 'seek': 60510, 'start': 612.1, 'end': 619.1, 'text': ' So, to know to know what is called I mean what is the type of arc I need to know who', 'tokens': [50714, 407, 11, 281, 458, 281, 458, 437, 307, 1219, 286, 914, 437, 307, 264, 2010, 295, 10346, 286, 643, 281, 458, 567, 51064], 'temperature': 0.0, 'avg_logprob': -0.20749813763063346, 'compression_ratio': 1.7428571428571429, 'no_speech_prob': 0.0011651200475171208}, {'id': 75, 'seek': 60510, 'start': 623.66, 'end': 630.6600000000001, 'text': ' is calling M to know who is calling it. So, it is as if my analysis needs me to know what', 'tokens': [51292, 307, 5141, 376, 281, 458, 567, 307, 5141, 309, 13, 407, 11, 309, 307, 382, 498, 452, 5215, 2203, 385, 281, 458, 437, 51642], 'temperature': 0.0, 'avg_logprob': -0.20749813763063346, 'compression_ratio': 1.7428571428571429, 'no_speech_prob': 0.0011651200475171208}, {'id': 76, 'seek': 63510, 'start': 635.78, 'end': 642.78, 'text': ' is flowing into this arc you need flow analysis to know that you need to know who is calling', 'tokens': [50398, 307, 13974, 666, 341, 10346, 291, 643, 3095, 5215, 281, 458, 300, 291, 643, 281, 458, 567, 307, 5141, 50748], 'temperature': 0.0, 'avg_logprob': -0.2493466395957797, 'compression_ratio': 1.9775280898876404, 'no_speech_prob': 0.0005355955217964947}, {'id': 77, 'seek': 63510, 'start': 644.02, 'end': 648.9, 'text': ' M, but to know who is calling M you need flow analysis. So, there is a you will see there', 'tokens': [50810, 376, 11, 457, 281, 458, 567, 307, 5141, 376, 291, 643, 3095, 5215, 13, 407, 11, 456, 307, 257, 291, 486, 536, 456, 51054], 'temperature': 0.0, 'avg_logprob': -0.2493466395957797, 'compression_ratio': 1.9775280898876404, 'no_speech_prob': 0.0005355955217964947}, {'id': 78, 'seek': 63510, 'start': 648.9, 'end': 655.9, 'text': ' is a recursive dependence like. So, in this case here I have a method X equal to nu A', 'tokens': [51054, 307, 257, 20560, 488, 31704, 411, 13, 407, 11, 294, 341, 1389, 510, 286, 362, 257, 3170, 1783, 2681, 281, 3822, 316, 51404], 'temperature': 0.0, 'avg_logprob': -0.2493466395957797, 'compression_ratio': 1.9775280898876404, 'no_speech_prob': 0.0005355955217964947}, {'id': 79, 'seek': 63510, 'start': 656.0600000000001, 'end': 663.0600000000001, 'text': ' Y equal to nu B and I am calling X dot M nu Q X dot M Q X dot M Q X dot M Q X dot M', 'tokens': [51412, 398, 2681, 281, 3822, 363, 293, 286, 669, 5141, 1783, 5893, 376, 3822, 1249, 1783, 5893, 376, 1249, 1783, 5893, 376, 1249, 1783, 5893, 376, 1249, 1783, 5893, 376, 51762], 'temperature': 0.0, 'avg_logprob': -0.2493466395957797, 'compression_ratio': 1.9775280898876404, 'no_speech_prob': 0.0005355955217964947}, {'id': 80, 'seek': 66510, 'start': 665.4200000000001, 'end': 672.4200000000001, 'text': ' nu Q which X is this here the declared type of X is A the run time type also happens to', 'tokens': [50380, 3822, 1249, 597, 1783, 307, 341, 510, 264, 15489, 2010, 295, 1783, 307, 316, 264, 1190, 565, 2010, 611, 2314, 281, 50730], 'temperature': 0.0, 'avg_logprob': -0.20420389705234104, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.0009104945347644389}, {'id': 81, 'seek': 66510, 'start': 673.78, 'end': 680.78, 'text': ' be A here the declared type is B run time type is B I could have this the declared type', 'tokens': [50798, 312, 316, 510, 264, 15489, 2010, 307, 363, 1190, 565, 2010, 307, 363, 286, 727, 362, 341, 264, 15489, 2010, 51148], 'temperature': 0.0, 'avg_logprob': -0.20420389705234104, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.0009104945347644389}, {'id': 82, 'seek': 66510, 'start': 684.74, 'end': 691.74, 'text': ' of this Y could have also be A when I call X dot M which M will I call X dot M X dot', 'tokens': [51346, 295, 341, 398, 727, 362, 611, 312, 316, 562, 286, 818, 1783, 5893, 376, 597, 376, 486, 286, 818, 1783, 5893, 376, 1783, 5893, 51696], 'temperature': 0.0, 'avg_logprob': -0.20420389705234104, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.0009104945347644389}, {'id': 83, 'seek': 69510, 'start': 695.2, 'end': 702.2, 'text': " M what I call A's when I call Y dot M A B A B I think I need to do a quick revision", 'tokens': [50369, 376, 437, 286, 818, 316, 311, 562, 286, 818, 398, 5893, 376, 316, 363, 316, 363, 286, 519, 286, 643, 281, 360, 257, 1702, 34218, 50719], 'temperature': 0.4, 'avg_logprob': -0.43898900349934894, 'compression_ratio': 1.1862745098039216, 'no_speech_prob': 0.002391303889453411}, {'id': 84, 'seek': 69510, 'start': 713.58, 'end': 720.58, 'text': " of Java's how virtual functions work.", 'tokens': [51288, 295, 10745, 311, 577, 6374, 6828, 589, 13, 51638], 'temperature': 0.4, 'avg_logprob': -0.43898900349934894, 'compression_ratio': 1.1862745098039216, 'no_speech_prob': 0.002391303889453411}, {'id': 85, 'seek': 72058, 'start': 720.58, 'end': 727.58, 'text': ' If I have sir is it ok ok ok. So, I have this class A method M class B method M I am not', 'tokens': [50364, 759, 286, 362, 4735, 307, 309, 3133, 3133, 3133, 13, 407, 11, 286, 362, 341, 1508, 316, 3170, 376, 1508, 363, 3170, 376, 286, 669, 406, 50714], 'temperature': 0.0, 'avg_logprob': -0.36288703282674156, 'compression_ratio': 1.2394366197183098, 'no_speech_prob': 0.030855393037199974}, {'id': 86, 'seek': 72758, 'start': 727.58, 'end': 734.58, 'text': ' declaring the written type and all that. So, and now I have A method X method X method', 'tokens': [50364, 40374, 264, 3720, 2010, 293, 439, 300, 13, 407, 11, 293, 586, 286, 362, 316, 3170, 1783, 3170, 1783, 3170, 50714], 'temperature': 0.0, 'avg_logprob': -0.5023989055467688, 'compression_ratio': 1.1466666666666667, 'no_speech_prob': 0.03162417188286781}, {'id': 87, 'seek': 75758, 'start': 757.58, 'end': 765.58, 'text': ' I have field int f sorry some field f 1 here field f 1 A X ok if I do X 1 dot M X 2 A X', 'tokens': [50414, 286, 362, 2519, 560, 283, 2597, 512, 2519, 283, 502, 510, 2519, 283, 502, 316, 1783, 3133, 498, 286, 360, 1783, 502, 5893, 376, 1783, 568, 316, 1783, 50764], 'temperature': 0.0, 'avg_logprob': -0.38817799475885206, 'compression_ratio': 1.2253521126760563, 'no_speech_prob': 0.14697802066802979}, {'id': 88, 'seek': 78758, 'start': 787.72, 'end': 794.72, 'text': " 2 dot M X 3 dot M X 1 dot M which which M will it be A's M or B's M A's M X 2 dot", 'tokens': [50371, 568, 5893, 376, 1783, 805, 5893, 376, 1783, 502, 5893, 376, 597, 597, 376, 486, 309, 312, 316, 311, 376, 420, 363, 311, 376, 316, 311, 376, 1783, 568, 5893, 50721], 'temperature': 0.4, 'avg_logprob': -0.2541484514872233, 'compression_ratio': 2.323943661971831, 'no_speech_prob': 0.0386168472468853}, {'id': 89, 'seek': 78758, 'start': 804.64, 'end': 811.6400000000001, 'text': ' M which one will it be X 3 dot M which one will it be X 3 dot M X 3 dot M which one', 'tokens': [51217, 376, 597, 472, 486, 309, 312, 1783, 805, 5893, 376, 597, 472, 486, 309, 312, 1783, 805, 5893, 376, 1783, 805, 5893, 376, 597, 472, 51567], 'temperature': 0.4, 'avg_logprob': -0.2541484514872233, 'compression_ratio': 2.323943661971831, 'no_speech_prob': 0.0386168472468853}, {'id': 90, 'seek': 81758, 'start': 818.0, 'end': 825.0, 'text': ' will it be X 3 dot M ok A B wow 50 50 is it sorry my bad thank you yeah otherwise it is', 'tokens': [50385, 486, 309, 312, 1783, 805, 5893, 376, 3133, 316, 363, 6076, 2625, 2625, 307, 309, 2597, 452, 1578, 1309, 291, 1338, 5911, 309, 307, 50735], 'temperature': 0.0, 'avg_logprob': -0.4807310877619563, 'compression_ratio': 1.6815286624203822, 'no_speech_prob': 0.019064273685216904}, {'id': 91, 'seek': 81758, 'start': 833.22, 'end': 840.22, 'text': ' of otherwise this this should be wrong yeah B extends yeah. So, yeah so X 3 dot M will', 'tokens': [51146, 295, 5911, 341, 341, 820, 312, 2085, 1338, 363, 26448, 1338, 13, 407, 11, 1338, 370, 1783, 805, 5893, 376, 486, 51496], 'temperature': 0.0, 'avg_logprob': -0.4807310877619563, 'compression_ratio': 1.6815286624203822, 'no_speech_prob': 0.019064273685216904}, {'id': 92, 'seek': 81758, 'start': 840.22, 'end': 847.22, 'text': ' it which one will it be B or A B why B because it run time because it run time because it', 'tokens': [51496, 309, 597, 472, 486, 309, 312, 363, 420, 316, 363, 983, 363, 570, 309, 1190, 565, 570, 309, 1190, 565, 570, 309, 51846], 'temperature': 0.0, 'avg_logprob': -0.4807310877619563, 'compression_ratio': 1.6815286624203822, 'no_speech_prob': 0.019064273685216904}, {'id': 93, 'seek': 84758, 'start': 848.5600000000001, 'end': 855.5600000000001, 'text': ' this is this will be resolved to object B what about this if I write if I access X 1', 'tokens': [50413, 341, 307, 341, 486, 312, 20772, 281, 2657, 363, 437, 466, 341, 498, 286, 2464, 498, 286, 2105, 1783, 502, 50763], 'temperature': 0.0, 'avg_logprob': -0.2330690136662236, 'compression_ratio': 1.5086206896551724, 'no_speech_prob': 0.0032373343128710985}, {'id': 94, 'seek': 84758, 'start': 855.5600000000001, 'end': 862.5600000000001, 'text': ' dot f X 2 dot f and X 3 dot f which one will it be X 1 dot f X 2 dot f not not loud enough', 'tokens': [50763, 5893, 283, 1783, 568, 5893, 283, 293, 1783, 805, 5893, 283, 597, 472, 486, 309, 312, 1783, 502, 5893, 283, 1783, 568, 5893, 283, 406, 406, 6588, 1547, 51113], 'temperature': 0.0, 'avg_logprob': -0.2330690136662236, 'compression_ratio': 1.5086206896551724, 'no_speech_prob': 0.0032373343128710985}, {'id': 95, 'seek': 86256, 'start': 862.6999999999999, 'end': 869.6999999999999, 'text': ' X 2 dot f uh ok B you said A this you said B X 3 dot f joule this is allowed Thank you', 'tokens': [50371, 1783, 568, 5893, 283, 2232, 3133, 363, 291, 848, 316, 341, 291, 848, 363, 1783, 805, 5893, 283, 11110, 306, 341, 307, 4350, 1044, 291, 50721], 'temperature': 1.0, 'avg_logprob': -2.268533097936752, 'compression_ratio': 1.2972972972972974, 'no_speech_prob': 0.020190997049212456}, {'id': 96, 'seek': 86256, 'start': 880.02, 'end': 888.14, 'text': ' all right I will try same question one is I can P P X X X', 'tokens': [51237, 439, 558, 286, 486, 853, 912, 1168, 472, 307, 286, 393, 430, 430, 1783, 1783, 1783, 51643], 'temperature': 1.0, 'avg_logprob': -2.268533097936752, 'compression_ratio': 1.2972972972972974, 'no_speech_prob': 0.020190997049212456}, {'id': 97, 'seek': 88814, 'start': 888.14, 'end': 912.9399999999999, 'text': ' x3 dot f. B or A? Yeah, yeah, f is there here. Both are declared. So, some type, let us call', 'tokens': [50364, 2031, 18, 5893, 283, 13, 363, 420, 316, 30, 865, 11, 1338, 11, 283, 307, 456, 510, 13, 6767, 366, 15489, 13, 407, 11, 512, 2010, 11, 718, 505, 818, 51604], 'temperature': 0.0, 'avg_logprob': -0.5505189895629883, 'compression_ratio': 1.0823529411764705, 'no_speech_prob': 0.1922164261341095}, {'id': 98, 'seek': 91294, 'start': 912.94, 'end': 939.3800000000001, 'text': ' it c. So, x3 dot f. B. So, it so happens one of these answers is wrong. So, in java the', 'tokens': [50364, 309, 269, 13, 407, 11, 2031, 18, 5893, 283, 13, 363, 13, 407, 11, 309, 370, 2314, 472, 295, 613, 6338, 307, 2085, 13, 407, 11, 294, 361, 4061, 264, 51686], 'temperature': 0.0, 'avg_logprob': -0.27989477269789753, 'compression_ratio': 1.1012658227848102, 'no_speech_prob': 0.5147093534469604}, {'id': 99, 'seek': 93938, 'start': 939.38, 'end': 947.3, 'text': ' method resolution, all methods are virtual, c plus plus you have declared it explicitly.', 'tokens': [50364, 3170, 8669, 11, 439, 7150, 366, 6374, 11, 269, 1804, 1804, 291, 362, 15489, 309, 20803, 13, 50760], 'temperature': 0.0, 'avg_logprob': -0.21749116392696605, 'compression_ratio': 1.5976331360946745, 'no_speech_prob': 0.4528733789920807}, {'id': 100, 'seek': 93938, 'start': 947.3, 'end': 954.62, 'text': ' Java the method resolution happens at runtime. So, that is it depends on the runtime object.', 'tokens': [50760, 10745, 264, 3170, 8669, 2314, 412, 34474, 13, 407, 11, 300, 307, 309, 5946, 322, 264, 34474, 2657, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.21749116392696605, 'compression_ratio': 1.5976331360946745, 'no_speech_prob': 0.4528733789920807}, {'id': 101, 'seek': 93938, 'start': 954.62, 'end': 960.58, 'text': ' You can do it statically if you can. So, x3 dot at runtime the object x1 holds an object', 'tokens': [51126, 509, 393, 360, 309, 2219, 984, 498, 291, 393, 13, 407, 11, 2031, 18, 5893, 412, 34474, 264, 2657, 2031, 16, 9190, 364, 2657, 51424], 'temperature': 0.0, 'avg_logprob': -0.21749116392696605, 'compression_ratio': 1.5976331360946745, 'no_speech_prob': 0.4528733789920807}, {'id': 102, 'seek': 96058, 'start': 960.58, 'end': 970.34, 'text': ' of type A. So, it will be A dot m. x2 holds an object of type. So, it should be B dot', 'tokens': [50364, 295, 2010, 316, 13, 407, 11, 309, 486, 312, 316, 5893, 275, 13, 2031, 17, 9190, 364, 2657, 295, 2010, 13, 407, 11, 309, 820, 312, 363, 5893, 50852], 'temperature': 0.0, 'avg_logprob': -0.21601808482202992, 'compression_ratio': 1.5495495495495495, 'no_speech_prob': 0.1643819510936737}, {'id': 103, 'seek': 96058, 'start': 970.34, 'end': 987.22, 'text': ' m. x3 holds an object of type B at runtime. So, this will be B dot m. Field resolution', 'tokens': [50852, 275, 13, 2031, 18, 9190, 364, 2657, 295, 2010, 363, 412, 34474, 13, 407, 11, 341, 486, 312, 363, 5893, 275, 13, 17952, 8669, 51696], 'temperature': 0.0, 'avg_logprob': -0.21601808482202992, 'compression_ratio': 1.5495495495495495, 'no_speech_prob': 0.1643819510936737}, {'id': 104, 'seek': 98722, 'start': 987.22, 'end': 998.7, 'text': ' happens based on the static type. So, what is the static type of x1? A. So, x1 dot f', 'tokens': [50364, 2314, 2361, 322, 264, 13437, 2010, 13, 407, 11, 437, 307, 264, 13437, 2010, 295, 2031, 16, 30, 316, 13, 407, 11, 2031, 16, 5893, 283, 50938], 'temperature': 0.0, 'avg_logprob': -0.14408906839661678, 'compression_ratio': 1.6732673267326732, 'no_speech_prob': 0.2625921964645386}, {'id': 105, 'seek': 98722, 'start': 998.7, 'end': 1005.5, 'text': ' is A dot f. What is the static type of x2? B. So, this will be B. What is the static', 'tokens': [50938, 307, 316, 5893, 283, 13, 708, 307, 264, 13437, 2010, 295, 2031, 17, 30, 363, 13, 407, 11, 341, 486, 312, 363, 13, 708, 307, 264, 13437, 51278], 'temperature': 0.0, 'avg_logprob': -0.14408906839661678, 'compression_ratio': 1.6732673267326732, 'no_speech_prob': 0.2625921964645386}, {'id': 106, 'seek': 100550, 'start': 1005.5, 'end': 1029.98, 'text': ' type of x3? A. So, this should be A. Now, I will do this. Yeah, one minute. It is not', 'tokens': [50364, 2010, 295, 2031, 18, 30, 316, 13, 407, 11, 341, 820, 312, 316, 13, 823, 11, 286, 486, 360, 341, 13, 865, 11, 472, 3456, 13, 467, 307, 406, 51588], 'temperature': 0.0, 'avg_logprob': -0.274875005086263, 'compression_ratio': 0.9883720930232558, 'no_speech_prob': 0.15383374691009521}, {'id': 107, 'seek': 102998, 'start': 1029.98, 'end': 1035.9, 'text': ' visible, too small. Thank you. I have this bad habit of making it smaller and smaller', 'tokens': [50414, 8974, 11, 886, 1359, 13, 1044, 291, 13, 286, 362, 341, 1578, 7164, 295, 1455, 309, 4356, 293, 4356, 50660], 'temperature': 0.0, 'avg_logprob': -0.35739205100319604, 'compression_ratio': 1.0625, 'no_speech_prob': 0.9702060222625732}, {'id': 108, 'seek': 105998, 'start': 1059.98, 'end': 1082.94, 'text': ' than that. Wait, wait. Just give me just, just, just, just, just, just. I am nearly', 'tokens': [50364, 813, 300, 13, 3802, 11, 1699, 13, 1449, 976, 385, 445, 11, 445, 11, 445, 11, 445, 11, 445, 11, 445, 13, 286, 669, 6217, 51512], 'temperature': 0.0, 'avg_logprob': -0.6519040732548155, 'compression_ratio': 1.360655737704918, 'no_speech_prob': 0.9115137457847595}, {'id': 109, 'seek': 108294, 'start': 1082.94, 'end': 1108.98, 'text': ' done. Okay. Yeah. Perfect. I was coming there. I was coming there. We will come to that.', 'tokens': [50364, 1096, 13, 1033, 13, 865, 13, 10246, 13, 286, 390, 1348, 456, 13, 286, 390, 1348, 456, 13, 492, 486, 808, 281, 300, 13, 51666], 'temperature': 0.0, 'avg_logprob': -0.3624342509678432, 'compression_ratio': 1.2054794520547945, 'no_speech_prob': 0.7634269595146179}, {'id': 110, 'seek': 110898, 'start': 1109.98, 'end': 1117.78, 'text': ' Let me not, I was coming there in a minute. Okay. Now, I have added a method. So, m calls', 'tokens': [50414, 961, 385, 406, 11, 286, 390, 1348, 456, 294, 257, 3456, 13, 1033, 13, 823, 11, 286, 362, 3869, 257, 3170, 13, 407, 11, 275, 5498, 50804], 'temperature': 0.0, 'avg_logprob': -0.22646640848230432, 'compression_ratio': 1.435483870967742, 'no_speech_prob': 0.45261895656585693}, {'id': 111, 'seek': 110898, 'start': 1117.78, 'end': 1124.94, 'text': ' foo. There is a method called bar which calls foo. Class B also has method m which calls', 'tokens': [50804, 726, 78, 13, 821, 307, 257, 3170, 1219, 2159, 597, 5498, 726, 78, 13, 9471, 363, 611, 575, 3170, 275, 597, 5498, 51162], 'temperature': 0.0, 'avg_logprob': -0.22646640848230432, 'compression_ratio': 1.435483870967742, 'no_speech_prob': 0.45261895656585693}, {'id': 112, 'seek': 112494, 'start': 1124.94, 'end': 1141.38, 'text': " foo. Now, I am calling x1 dot m. Okay. Which in turn calls foo? Which foo is it? A's foo.", 'tokens': [50364, 726, 78, 13, 823, 11, 286, 669, 5141, 2031, 16, 5893, 275, 13, 1033, 13, 3013, 294, 1261, 5498, 726, 78, 30, 3013, 726, 78, 307, 309, 30, 316, 311, 726, 78, 13, 51186], 'temperature': 0.0, 'avg_logprob': -0.2539056056254619, 'compression_ratio': 1.0595238095238095, 'no_speech_prob': 0.4444836676120758}, {'id': 113, 'seek': 114138, 'start': 1141.38, 'end': 1160.9, 'text': " Okay. I call x2 dot m. It calls B's foo. x3 dot m. When I call x3 dot m, which foo", 'tokens': [50364, 1033, 13, 286, 818, 2031, 17, 5893, 275, 13, 467, 5498, 363, 311, 726, 78, 13, 2031, 18, 5893, 275, 13, 1133, 286, 818, 2031, 18, 5893, 275, 11, 597, 726, 78, 51340], 'temperature': 0.0, 'avg_logprob': -0.20257230599721274, 'compression_ratio': 1.2615384615384615, 'no_speech_prob': 0.4812563359737396}, {'id': 114, 'seek': 116090, 'start': 1160.9, 'end': 1181.1000000000001, 'text': ' will it call? That side is pretty silent. So, keeping silence is safe. So, let us see,', 'tokens': [50364, 486, 309, 818, 30, 663, 1252, 307, 1238, 12784, 13, 407, 11, 5145, 12239, 307, 3273, 13, 407, 11, 718, 505, 536, 11, 51374], 'temperature': 0.0, 'avg_logprob': -0.359734817787453, 'compression_ratio': 1.1168831168831168, 'no_speech_prob': 0.13924548029899597}, {'id': 115, 'seek': 118110, 'start': 1181.6999999999998, 'end': 1192.02, 'text': ' know, x3 dot m. What is the dynamic type of x3? It happens to be B. Let us go here. There', 'tokens': [50394, 458, 11, 2031, 18, 5893, 275, 13, 708, 307, 264, 8546, 2010, 295, 2031, 18, 30, 467, 2314, 281, 312, 363, 13, 961, 505, 352, 510, 13, 821, 50910], 'temperature': 0.0, 'avg_logprob': -0.248136305809021, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.1776042878627777}, {'id': 116, 'seek': 118110, 'start': 1192.02, 'end': 1200.86, 'text': ' is a call to foo. What is the receiver object here? You need receiver object for every call,', 'tokens': [50910, 307, 257, 818, 281, 726, 78, 13, 708, 307, 264, 20086, 2657, 510, 30, 509, 643, 20086, 2657, 337, 633, 818, 11, 51352], 'temperature': 0.0, 'avg_logprob': -0.248136305809021, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.1776042878627777}, {'id': 117, 'seek': 118110, 'start': 1200.86, 'end': 1207.6599999999999, 'text': ' right? What is the receiver object here? The this pointer, right? What is the type of this,', 'tokens': [51352, 558, 30, 708, 307, 264, 20086, 2657, 510, 30, 440, 341, 23918, 11, 558, 30, 708, 307, 264, 2010, 295, 341, 11, 51692], 'temperature': 0.0, 'avg_logprob': -0.248136305809021, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.1776042878627777}, {'id': 118, 'seek': 120766, 'start': 1208.0600000000002, 'end': 1217.42, 'text': ' runtime type of this? B. So, which foo will it be? Sorry, x3 dot m here. Which foo is it?', 'tokens': [50384, 34474, 2010, 295, 341, 30, 363, 13, 407, 11, 597, 726, 78, 486, 309, 312, 30, 4919, 11, 2031, 18, 5893, 275, 510, 13, 3013, 726, 78, 307, 309, 30, 50852], 'temperature': 0.0, 'avg_logprob': -0.1873750283684529, 'compression_ratio': 1.330935251798561, 'no_speech_prob': 0.2506410777568817}, {'id': 119, 'seek': 120766, 'start': 1217.42, 'end': 1230.3000000000002, 'text': " B. It is the dynamic type is? B. So, it will call B's foo. Fine. Okay. Now, if I do x3 dot bar,", 'tokens': [50852, 363, 13, 467, 307, 264, 8546, 2010, 307, 30, 363, 13, 407, 11, 309, 486, 818, 363, 311, 726, 78, 13, 12024, 13, 1033, 13, 823, 11, 498, 286, 360, 2031, 18, 5893, 2159, 11, 51496], 'temperature': 0.0, 'avg_logprob': -0.1873750283684529, 'compression_ratio': 1.330935251798561, 'no_speech_prob': 0.2506410777568817}, {'id': 120, 'seek': 123030, 'start': 1230.3, 'end': 1239.4199999999998, 'text': ' which bar will it call? This bar is only there in A. So, this will go here. Now,', 'tokens': [50364, 597, 2159, 486, 309, 818, 30, 639, 2159, 307, 787, 456, 294, 316, 13, 407, 11, 341, 486, 352, 510, 13, 823, 11, 50820], 'temperature': 0.0, 'avg_logprob': -0.15624106132378013, 'compression_ratio': 1.4047619047619047, 'no_speech_prob': 0.0040510669350624084}, {'id': 121, 'seek': 123030, 'start': 1239.4199999999998, 'end': 1250.82, 'text': " there is a call to foo. Which foo will be called? What is this pointer? B. So, it will call B's.", 'tokens': [50820, 456, 307, 257, 818, 281, 726, 78, 13, 3013, 726, 78, 486, 312, 1219, 30, 708, 307, 341, 23918, 30, 363, 13, 407, 11, 309, 486, 818, 363, 311, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.15624106132378013, 'compression_ratio': 1.4047619047619047, 'no_speech_prob': 0.0040510669350624084}, {'id': 122, 'seek': 125082, 'start': 1250.82, 'end': 1262.82, 'text': ' Right? Okay. Let me write this. In foo, I am writing to F. I am accessing F here. In this foo', 'tokens': [50364, 1779, 30, 1033, 13, 961, 385, 2464, 341, 13, 682, 726, 78, 11, 286, 669, 3579, 281, 479, 13, 286, 669, 26440, 479, 510, 13, 682, 341, 726, 78, 50964], 'temperature': 0.0, 'avg_logprob': -0.12136095220392401, 'compression_ratio': 1.1071428571428572, 'no_speech_prob': 0.047348469495773315}, {'id': 123, 'seek': 126282, 'start': 1262.82, 'end': 1288.58, 'text': ' also, I am accessing F. When I call, oh, better. When I call x3 dot bar, which bar is it called?', 'tokens': [50364, 611, 11, 286, 669, 26440, 479, 13, 1133, 286, 818, 11, 1954, 11, 1101, 13, 1133, 286, 818, 2031, 18, 5893, 2159, 11, 597, 2159, 307, 309, 1219, 30, 51652], 'temperature': 0.0, 'avg_logprob': -0.18825499216715494, 'compression_ratio': 1.1294117647058823, 'no_speech_prob': 0.31982824206352234}, {'id': 124, 'seek': 128858, 'start': 1288.58, 'end': 1303.1799999999998, 'text': ' Only one bar. If I am accessing F there, is it an F, is it reading the F of A or B?', 'tokens': [50364, 5686, 472, 2159, 13, 759, 286, 669, 26440, 479, 456, 11, 307, 309, 364, 479, 11, 307, 309, 3760, 264, 479, 295, 316, 420, 363, 30, 51094], 'temperature': 0.0, 'avg_logprob': -0.21606798829703494, 'compression_ratio': 1.0375, 'no_speech_prob': 0.6028416752815247}, {'id': 125, 'seek': 131858, 'start': 1318.58, 'end': 1339.6999999999998, 'text': ' So, some of you have already said this is this dot F. Correct? What is the static type of this?', 'tokens': [50364, 407, 11, 512, 295, 291, 362, 1217, 848, 341, 307, 341, 5893, 479, 13, 12753, 30, 708, 307, 264, 13437, 2010, 295, 341, 30, 51420], 'temperature': 0.0, 'avg_logprob': -0.23160702841622488, 'compression_ratio': 1.0919540229885059, 'no_speech_prob': 0.5531353950500488}, {'id': 126, 'seek': 133970, 'start': 1339.7, 'end': 1352.06, 'text': ' At this position. Right? What is the, because this here is different. What is the static type', 'tokens': [50364, 1711, 341, 2535, 13, 1779, 30, 708, 307, 264, 11, 570, 341, 510, 307, 819, 13, 708, 307, 264, 13437, 2010, 50982], 'temperature': 0.0, 'avg_logprob': -0.1824171028885187, 'compression_ratio': 1.6605504587155964, 'no_speech_prob': 0.32589295506477356}, {'id': 127, 'seek': 133970, 'start': 1352.06, 'end': 1359.26, 'text': ' of this in this class? B. What is the static type of this pointer in this class? A. So,', 'tokens': [50982, 295, 341, 294, 341, 1508, 30, 363, 13, 708, 307, 264, 13437, 2010, 295, 341, 23918, 294, 341, 1508, 30, 316, 13, 407, 11, 51342], 'temperature': 0.0, 'avg_logprob': -0.1824171028885187, 'compression_ratio': 1.6605504587155964, 'no_speech_prob': 0.32589295506477356}, {'id': 128, 'seek': 135926, 'start': 1359.26, 'end': 1376.3799999999999, 'text': ' this is an F of A. I am calling x3 dot bar, but I am getting the F of A. Make sense? So,', 'tokens': [50364, 341, 307, 364, 479, 295, 316, 13, 286, 669, 5141, 2031, 18, 5893, 2159, 11, 457, 286, 669, 1242, 264, 479, 295, 316, 13, 4387, 2020, 30, 407, 11, 51220], 'temperature': 0.0, 'avg_logprob': -0.15228271484375, 'compression_ratio': 1.392, 'no_speech_prob': 0.03960653394460678}, {'id': 129, 'seek': 135926, 'start': 1376.3799999999999, 'end': 1384.66, 'text': ' this field resolution happens using static types. The method resolution happens using', 'tokens': [51220, 341, 2519, 8669, 2314, 1228, 13437, 3467, 13, 440, 3170, 8669, 2314, 1228, 51634], 'temperature': 0.0, 'avg_logprob': -0.15228271484375, 'compression_ratio': 1.392, 'no_speech_prob': 0.03960653394460678}, {'id': 130, 'seek': 138466, 'start': 1384.66, 'end': 1401.22, 'text': ' dynamic types. All on the same page? Declared type. So, in this case, type of x3 is A. Type', 'tokens': [50364, 8546, 3467, 13, 1057, 322, 264, 912, 3028, 30, 1346, 3474, 1642, 2010, 13, 407, 11, 294, 341, 1389, 11, 2010, 295, 2031, 18, 307, 316, 13, 15576, 51192], 'temperature': 0.0, 'avg_logprob': -0.204296080271403, 'compression_ratio': 1.40625, 'no_speech_prob': 0.6220075488090515}, {'id': 131, 'seek': 138466, 'start': 1401.22, 'end': 1410.38, 'text': ' of this in a class is the class name. Static type of x2 is B. And as you can easily see,', 'tokens': [51192, 295, 341, 294, 257, 1508, 307, 264, 1508, 1315, 13, 745, 2399, 2010, 295, 2031, 17, 307, 363, 13, 400, 382, 291, 393, 3612, 536, 11, 51650], 'temperature': 0.0, 'avg_logprob': -0.204296080271403, 'compression_ratio': 1.40625, 'no_speech_prob': 0.6220075488090515}, {'id': 132, 'seek': 141038, 'start': 1410.38, 'end': 1415.8200000000002, 'text': ' the static type and dynamic type need not match. Like the static type of x3 is A, dynamic', 'tokens': [50364, 264, 13437, 2010, 293, 8546, 2010, 643, 406, 2995, 13, 1743, 264, 13437, 2010, 295, 2031, 18, 307, 316, 11, 8546, 50636], 'temperature': 0.0, 'avg_logprob': -0.2083005428314209, 'compression_ratio': 1.729032258064516, 'no_speech_prob': 0.023677684366703033}, {'id': 133, 'seek': 141038, 'start': 1415.8200000000002, 'end': 1424.14, 'text': ' type is B. And not always you can see it this way, right? I could have written type of A', 'tokens': [50636, 2010, 307, 363, 13, 400, 406, 1009, 291, 393, 536, 309, 341, 636, 11, 558, 30, 286, 727, 362, 3720, 2010, 295, 316, 51052], 'temperature': 0.0, 'avg_logprob': -0.2083005428314209, 'compression_ratio': 1.729032258064516, 'no_speech_prob': 0.023677684366703033}, {'id': 134, 'seek': 141038, 'start': 1424.14, 'end': 1438.5800000000002, 'text': ' is static type of x4 is A, if some condition x4 equal to nu A, else x4 equal to nu B. And', 'tokens': [51052, 307, 13437, 2010, 295, 2031, 19, 307, 316, 11, 498, 512, 4188, 2031, 19, 2681, 281, 3822, 316, 11, 1646, 2031, 19, 2681, 281, 3822, 363, 13, 400, 51774], 'temperature': 0.0, 'avg_logprob': -0.2083005428314209, 'compression_ratio': 1.729032258064516, 'no_speech_prob': 0.023677684366703033}, {'id': 135, 'seek': 143858, 'start': 1439.58, 'end': 1452.02, 'text': ' here I may call x4 dot foo, right? I may call x4 dot foo. What is the static type of x4?', 'tokens': [50414, 510, 286, 815, 818, 2031, 19, 5893, 726, 78, 11, 558, 30, 286, 815, 818, 2031, 19, 5893, 726, 78, 13, 708, 307, 264, 13437, 2010, 295, 2031, 19, 30, 51036], 'temperature': 0.0, 'avg_logprob': -0.2139055036729382, 'compression_ratio': 1.7623762376237624, 'no_speech_prob': 0.15970222651958466}, {'id': 136, 'seek': 143858, 'start': 1452.02, 'end': 1459.22, 'text': ' What is the static type of x4? A. What is the dynamic type of x4? We do not know, because', 'tokens': [51036, 708, 307, 264, 13437, 2010, 295, 2031, 19, 30, 316, 13, 708, 307, 264, 8546, 2010, 295, 2031, 19, 30, 492, 360, 406, 458, 11, 570, 51396], 'temperature': 0.0, 'avg_logprob': -0.2139055036729382, 'compression_ratio': 1.7623762376237624, 'no_speech_prob': 0.15970222651958466}, {'id': 137, 'seek': 145922, 'start': 1459.94, 'end': 1471.26, 'text': ' depends on the condition. Every variable will have a fixed static type in Java. Dynamically,', 'tokens': [50400, 5946, 322, 264, 4188, 13, 2048, 7006, 486, 362, 257, 6806, 13437, 2010, 294, 10745, 13, 22947, 984, 11, 50966], 'temperature': 0.0, 'avg_logprob': -0.23860873778661093, 'compression_ratio': 1.3602941176470589, 'no_speech_prob': 0.014217131771147251}, {'id': 138, 'seek': 145922, 'start': 1471.26, 'end': 1477.1000000000001, 'text': ' at runtime, of course, it will have only one type, but statically we may not be able to know', 'tokens': [50966, 412, 34474, 11, 295, 1164, 11, 309, 486, 362, 787, 472, 2010, 11, 457, 2219, 984, 321, 815, 406, 312, 1075, 281, 458, 51258], 'temperature': 0.0, 'avg_logprob': -0.23860873778661093, 'compression_ratio': 1.3602941176470589, 'no_speech_prob': 0.014217131771147251}, {'id': 139, 'seek': 147710, 'start': 1477.1, 'end': 1491.9399999999998, 'text': ' it. So, your question is, why do not we even methods, sorry even member fields, why do not', 'tokens': [50364, 309, 13, 407, 11, 428, 1168, 307, 11, 983, 360, 406, 321, 754, 7150, 11, 2597, 754, 4006, 7909, 11, 983, 360, 406, 51106], 'temperature': 0.0, 'avg_logprob': -0.2461928421596311, 'compression_ratio': 1.4274809160305344, 'no_speech_prob': 0.1007847934961319}, {'id': 140, 'seek': 147710, 'start': 1491.9399999999998, 'end': 1501.4199999999998, 'text': ' we do dynamic access, right? If we do that, it is an excellent question, think about it. What we', 'tokens': [51106, 321, 360, 8546, 2105, 11, 558, 30, 759, 321, 360, 300, 11, 309, 307, 364, 7103, 1168, 11, 519, 466, 309, 13, 708, 321, 51580], 'temperature': 0.0, 'avg_logprob': -0.2461928421596311, 'compression_ratio': 1.4274809160305344, 'no_speech_prob': 0.1007847934961319}, {'id': 141, 'seek': 150142, 'start': 1501.42, 'end': 1512.0600000000002, 'text': ' are saying? We are accessing the static fields, sorry fields using static type. Why not access', 'tokens': [50364, 366, 1566, 30, 492, 366, 26440, 264, 13437, 7909, 11, 2597, 7909, 1228, 13437, 2010, 13, 1545, 406, 2105, 50896], 'temperature': 0.0, 'avg_logprob': -0.19511570249285018, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.1555667370557785}, {'id': 142, 'seek': 150142, 'start': 1512.0600000000002, 'end': 1525.46, 'text': ' the fields also using dynamic resolution? What will we lose? Something we will lose.', 'tokens': [50896, 264, 7909, 611, 1228, 8546, 8669, 30, 708, 486, 321, 3624, 30, 6595, 321, 486, 3624, 13, 51566], 'temperature': 0.0, 'avg_logprob': -0.19511570249285018, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.1555667370557785}, {'id': 143, 'seek': 152546, 'start': 1525.46, 'end': 1534.18, 'text': ' No, no, no, well, I mean you can, you will lose a bit of static checking, but that is okay,', 'tokens': [50364, 883, 11, 572, 11, 572, 11, 731, 11, 286, 914, 291, 393, 11, 291, 486, 3624, 257, 857, 295, 13437, 8568, 11, 457, 300, 307, 1392, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.22392535428388402, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.031017104163765907}, {'id': 144, 'seek': 152546, 'start': 1534.18, 'end': 1540.9, 'text': ' I mean some overheads, I mean you will, what is, I mean we have to postpone some checking to runtime,', 'tokens': [50800, 286, 914, 512, 19922, 82, 11, 286, 914, 291, 486, 11, 437, 307, 11, 286, 914, 321, 362, 281, 28973, 546, 512, 8568, 281, 34474, 11, 51136], 'temperature': 0.0, 'avg_logprob': -0.22392535428388402, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.031017104163765907}, {'id': 145, 'seek': 152546, 'start': 1540.9, 'end': 1546.42, 'text': ' that is okay. I mean some more cache type of things have to be added. Those things can be done,', 'tokens': [51136, 300, 307, 1392, 13, 286, 914, 512, 544, 19459, 2010, 295, 721, 362, 281, 312, 3869, 13, 3950, 721, 393, 312, 1096, 11, 51412], 'temperature': 0.0, 'avg_logprob': -0.22392535428388402, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.031017104163765907}, {'id': 146, 'seek': 152546, 'start': 1546.42, 'end': 1554.5, 'text': ' but we will lose something else as well. See, one thing is this checking, right? For field checking,', 'tokens': [51412, 457, 321, 486, 3624, 746, 1646, 382, 731, 13, 3008, 11, 472, 551, 307, 341, 8568, 11, 558, 30, 1171, 2519, 8568, 11, 51816], 'temperature': 0.0, 'avg_logprob': -0.22392535428388402, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.031017104163765907}, {'id': 147, 'seek': 155450, 'start': 1554.5, 'end': 1560.82, 'text': ' you do not do the type checking for fields at runtime during the execution time at all. You do', 'tokens': [50364, 291, 360, 406, 360, 264, 2010, 8568, 337, 7909, 412, 34474, 1830, 264, 15058, 565, 412, 439, 13, 509, 360, 50680], 'temperature': 0.0, 'avg_logprob': -0.17782962799072266, 'compression_ratio': 1.603448275862069, 'no_speech_prob': 0.0020137832034379244}, {'id': 148, 'seek': 155450, 'start': 1560.82, 'end': 1568.38, 'text': ' not need to. Why? Yeah, because it is all statically done. So, it speeds up the things,', 'tokens': [50680, 406, 643, 281, 13, 1545, 30, 865, 11, 570, 309, 307, 439, 2219, 984, 1096, 13, 407, 11, 309, 16411, 493, 264, 721, 11, 51058], 'temperature': 0.0, 'avg_logprob': -0.17782962799072266, 'compression_ratio': 1.603448275862069, 'no_speech_prob': 0.0020137832034379244}, {'id': 149, 'seek': 155450, 'start': 1568.38, 'end': 1575.26, 'text': ' but there is something else. If you do not do, if you do the field resolution at runtime, right?', 'tokens': [51058, 457, 456, 307, 746, 1646, 13, 759, 291, 360, 406, 360, 11, 498, 291, 360, 264, 2519, 8669, 412, 34474, 11, 558, 30, 51402], 'temperature': 0.0, 'avg_logprob': -0.17782962799072266, 'compression_ratio': 1.603448275862069, 'no_speech_prob': 0.0020137832034379244}, {'id': 150, 'seek': 157526, 'start': 1575.26, 'end': 1585.26, 'text': ' How do I access my parent classes field? Let us say there is a get method, right? To access my', 'tokens': [50364, 1012, 360, 286, 2105, 452, 2596, 5359, 2519, 30, 961, 505, 584, 456, 307, 257, 483, 3170, 11, 558, 30, 1407, 2105, 452, 50864], 'temperature': 0.0, 'avg_logprob': -0.25202122101416957, 'compression_ratio': 1.5677966101694916, 'no_speech_prob': 0.12580138444900513}, {'id': 151, 'seek': 157526, 'start': 1585.26, 'end': 1598.18, 'text': ' parent classes field, the get method always returns f. Okay, good, good, good, good, good.', 'tokens': [50864, 2596, 5359, 2519, 11, 264, 483, 3170, 1009, 11247, 283, 13, 1033, 11, 665, 11, 665, 11, 665, 11, 665, 11, 665, 13, 51510], 'temperature': 0.0, 'avg_logprob': -0.25202122101416957, 'compression_ratio': 1.5677966101694916, 'no_speech_prob': 0.12580138444900513}, {'id': 152, 'seek': 159818, 'start': 1598.18, 'end': 1605.7, 'text': ' I like this, I like this. Let us do this. No, no, no, I understand what you are saying. So,', 'tokens': [50364, 286, 411, 341, 11, 286, 411, 341, 13, 961, 505, 360, 341, 13, 883, 11, 572, 11, 572, 11, 286, 1223, 437, 291, 366, 1566, 13, 407, 11, 50740], 'temperature': 0.0, 'avg_logprob': -0.25760189001111017, 'compression_ratio': 1.355072463768116, 'no_speech_prob': 0.2422596514225006}, {'id': 153, 'seek': 159818, 'start': 1605.7, 'end': 1619.7, 'text': ' in this x3.bar, what will happen here? I am typecasting x3 to a, x3, why x3? x2 I will make it,', 'tokens': [50740, 294, 341, 2031, 18, 13, 5356, 11, 437, 486, 1051, 510, 30, 286, 669, 2010, 48860, 2031, 18, 281, 257, 11, 2031, 18, 11, 983, 2031, 18, 30, 2031, 17, 286, 486, 652, 309, 11, 51440], 'temperature': 0.0, 'avg_logprob': -0.25760189001111017, 'compression_ratio': 1.355072463768116, 'no_speech_prob': 0.2422596514225006}, {'id': 154, 'seek': 161970, 'start': 1619.7, 'end': 1636.74, 'text': ' still better. Dot 4 bar, does not matter. Okay, I am doing typecast on x2 and then doing dot m.', 'tokens': [50364, 920, 1101, 13, 38753, 1017, 2159, 11, 775, 406, 1871, 13, 1033, 11, 286, 669, 884, 2010, 3734, 322, 2031, 17, 293, 550, 884, 5893, 275, 13, 51216], 'temperature': 0.0, 'avg_logprob': -0.3067825686547064, 'compression_ratio': 1.0919540229885059, 'no_speech_prob': 0.5531002283096313}, {'id': 155, 'seek': 163674, 'start': 1636.74, 'end': 1655.78, 'text': ' Which m will it be? Asm or bsm? Wow, half. Asm or bsm? Asm, bsm. Wow, if you, if this was', 'tokens': [50364, 3013, 275, 486, 309, 312, 30, 1018, 76, 420, 272, 10817, 30, 3153, 11, 1922, 13, 1018, 76, 420, 272, 10817, 30, 1018, 76, 11, 272, 10817, 13, 3153, 11, 498, 291, 11, 498, 341, 390, 51316], 'temperature': 0.0, 'avg_logprob': -0.28981566429138184, 'compression_ratio': 1.1866666666666668, 'no_speech_prob': 0.11554472148418427}, {'id': 156, 'seek': 165578, 'start': 1655.78, 'end': 1666.34, 'text': ' con managya kararapathi and you take popular opinion, you lose your money. Okay, this is Java', 'tokens': [50364, 416, 587, 559, 3016, 7917, 289, 569, 42715, 293, 291, 747, 3743, 4800, 11, 291, 3624, 428, 1460, 13, 1033, 11, 341, 307, 10745, 50892], 'temperature': 0.0, 'avg_logprob': -0.38160435658580855, 'compression_ratio': 1.4251968503937007, 'no_speech_prob': 0.18103952705860138}, {'id': 157, 'seek': 165578, 'start': 1666.34, 'end': 1683.7, 'text': ' 101 or C++ and any OO101. Typecast does not change the object. Typecast does not change', 'tokens': [50892, 21055, 420, 383, 25472, 293, 604, 422, 46, 47520, 13, 15576, 3734, 775, 406, 1319, 264, 2657, 13, 15576, 3734, 775, 406, 1319, 51760], 'temperature': 0.0, 'avg_logprob': -0.38160435658580855, 'compression_ratio': 1.4251968503937007, 'no_speech_prob': 0.18103952705860138}, {'id': 158, 'seek': 168370, 'start': 1683.7, 'end': 1690.3400000000001, 'text': ' the object. The memory has already been allocated here. The memory has already been allocated.', 'tokens': [50364, 264, 2657, 13, 440, 4675, 575, 1217, 668, 29772, 510, 13, 440, 4675, 575, 1217, 668, 29772, 13, 50696], 'temperature': 0.0, 'avg_logprob': -0.16155285305447048, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.09720869362354279}, {'id': 159, 'seek': 168370, 'start': 1690.3400000000001, 'end': 1699.06, 'text': ' You do not change the object, right? So, here since the method resolution happens at runtime,', 'tokens': [50696, 509, 360, 406, 1319, 264, 2657, 11, 558, 30, 407, 11, 510, 1670, 264, 3170, 8669, 2314, 412, 34474, 11, 51132], 'temperature': 0.0, 'avg_logprob': -0.16155285305447048, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.09720869362354279}, {'id': 160, 'seek': 168370, 'start': 1699.06, 'end': 1704.14, 'text': ' you look at the runtime object. What is the runtime object? You are asking,', 'tokens': [51132, 291, 574, 412, 264, 34474, 2657, 13, 708, 307, 264, 34474, 2657, 30, 509, 366, 3365, 11, 51386], 'temperature': 0.0, 'avg_logprob': -0.16155285305447048, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.09720869362354279}, {'id': 161, 'seek': 170414, 'start': 1704.14, 'end': 1715.3000000000002, 'text': ' wink wink, for static type checking, you can assume an object a exists. At runtime,', 'tokens': [50364, 44212, 44212, 11, 337, 13437, 2010, 8568, 11, 291, 393, 6552, 364, 2657, 257, 8198, 13, 1711, 34474, 11, 50922], 'temperature': 0.0, 'avg_logprob': -0.16815371327585987, 'compression_ratio': 1.6484848484848484, 'no_speech_prob': 0.02487107366323471}, {'id': 162, 'seek': 170414, 'start': 1715.3000000000002, 'end': 1725.5800000000002, 'text': ' you are guaranteed that at least an object a exists, a or more, a or higher up, but at least', 'tokens': [50922, 291, 366, 18031, 300, 412, 1935, 364, 2657, 257, 8198, 11, 257, 420, 544, 11, 257, 420, 2946, 493, 11, 457, 412, 1935, 51436], 'temperature': 0.0, 'avg_logprob': -0.16815371327585987, 'compression_ratio': 1.6484848484848484, 'no_speech_prob': 0.02487107366323471}, {'id': 163, 'seek': 170414, 'start': 1725.5800000000002, 'end': 1732.0600000000002, 'text': ' an a exists, that is it. So, this will be the static type. What is the dynamic type of x2 here?', 'tokens': [51436, 364, 257, 8198, 11, 300, 307, 309, 13, 407, 11, 341, 486, 312, 264, 13437, 2010, 13, 708, 307, 264, 8546, 2010, 295, 2031, 17, 510, 30, 51760], 'temperature': 0.0, 'avg_logprob': -0.16815371327585987, 'compression_ratio': 1.6484848484848484, 'no_speech_prob': 0.02487107366323471}, {'id': 164, 'seek': 173206, 'start': 1732.06, 'end': 1740.1799999999998, 'text': ' B. So, it will be bsm. So, let me, why did I come to this? Do you have question on this or something', 'tokens': [50364, 363, 13, 407, 11, 309, 486, 312, 272, 10817, 13, 407, 11, 718, 385, 11, 983, 630, 286, 808, 281, 341, 30, 1144, 291, 362, 1168, 322, 341, 420, 746, 50770], 'temperature': 0.0, 'avg_logprob': -0.21226821626935685, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.19655494391918182}, {'id': 165, 'seek': 173206, 'start': 1740.1799999999998, 'end': 1751.06, 'text': ' else? Okay, so I should go to Java discussions. Okay, good question. We will come there. Too', 'tokens': [50770, 1646, 30, 1033, 11, 370, 286, 820, 352, 281, 10745, 11088, 13, 1033, 11, 665, 1168, 13, 492, 486, 808, 456, 13, 11395, 51314], 'temperature': 0.0, 'avg_logprob': -0.21226821626935685, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.19655494391918182}, {'id': 166, 'seek': 173206, 'start': 1751.06, 'end': 1757.54, 'text': ' many context switches. So, you said I could do a typecast to get the field, does not help.', 'tokens': [51314, 867, 4319, 19458, 13, 407, 11, 291, 848, 286, 727, 360, 257, 2010, 3734, 281, 483, 264, 2519, 11, 775, 406, 854, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.21226821626935685, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.19655494391918182}, {'id': 167, 'seek': 175754, 'start': 1758.54, 'end': 1765.46, 'text': ' If it is dynamic resolution, the dynamic field remains. See, now if to access the method of my', 'tokens': [50414, 759, 309, 307, 8546, 8669, 11, 264, 8546, 2519, 7023, 13, 3008, 11, 586, 498, 281, 2105, 264, 3170, 295, 452, 50760], 'temperature': 0.0, 'avg_logprob': -0.21189911832514496, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.20166239142417908}, {'id': 168, 'seek': 175754, 'start': 1765.46, 'end': 1770.8999999999999, 'text': ' parent class, I have to do something like super dot something, right? So, then to access the', 'tokens': [50760, 2596, 1508, 11, 286, 362, 281, 360, 746, 411, 1687, 5893, 746, 11, 558, 30, 407, 11, 550, 281, 2105, 264, 51032], 'temperature': 0.0, 'avg_logprob': -0.21189911832514496, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.20166239142417908}, {'id': 169, 'seek': 175754, 'start': 1770.8999999999999, 'end': 1776.6599999999999, 'text': " parent's fields, you need to do something like my dot super, some such complications you have to", 'tokens': [51032, 2596, 311, 7909, 11, 291, 643, 281, 360, 746, 411, 452, 5893, 1687, 11, 512, 1270, 26566, 291, 362, 281, 51320], 'temperature': 0.0, 'avg_logprob': -0.21189911832514496, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.20166239142417908}, {'id': 170, 'seek': 175754, 'start': 1776.6599999999999, 'end': 1784.1, 'text': ' do, but in the absence of that, it is hard. So, what normally we do is we do static resolution of', 'tokens': [51320, 360, 11, 457, 294, 264, 17145, 295, 300, 11, 309, 307, 1152, 13, 407, 11, 437, 5646, 321, 360, 307, 321, 360, 13437, 8669, 295, 51692], 'temperature': 0.0, 'avg_logprob': -0.21189911832514496, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.20166239142417908}, {'id': 171, 'seek': 178410, 'start': 1784.1, 'end': 1790.06, 'text': ' the fields because it avoids type checks at runtime. I can do all the type checks at compile', 'tokens': [50364, 264, 7909, 570, 309, 3641, 3742, 2010, 13834, 412, 34474, 13, 286, 393, 360, 439, 264, 2010, 13834, 412, 31413, 50662], 'temperature': 0.0, 'avg_logprob': -0.16640039285024008, 'compression_ratio': 1.5593220338983051, 'no_speech_prob': 0.017983224242925644}, {'id': 172, 'seek': 178410, 'start': 1790.06, 'end': 1797.62, 'text': ' time and just methods become the expensive one. Coming back to why do we have the cast? Now,', 'tokens': [50662, 565, 293, 445, 7150, 1813, 264, 5124, 472, 13, 12473, 646, 281, 983, 360, 321, 362, 264, 4193, 30, 823, 11, 51040], 'temperature': 0.0, 'avg_logprob': -0.16640039285024008, 'compression_ratio': 1.5593220338983051, 'no_speech_prob': 0.017983224242925644}, {'id': 173, 'seek': 178410, 'start': 1797.62, 'end': 1812.82, 'text': ' you tell me which field it is. Sorry, which field it is? What is this expression? It is an', 'tokens': [51040, 291, 980, 385, 597, 2519, 309, 307, 13, 4919, 11, 597, 2519, 309, 307, 30, 708, 307, 341, 6114, 30, 467, 307, 364, 51800], 'temperature': 0.0, 'avg_logprob': -0.16640039285024008, 'compression_ratio': 1.5593220338983051, 'no_speech_prob': 0.017983224242925644}, {'id': 174, 'seek': 181282, 'start': 1812.82, 'end': 1822.22, 'text': ' expression of type. X2 is an expression whose dynamic static type is B, runtime type happens', 'tokens': [50364, 6114, 295, 2010, 13, 1783, 17, 307, 364, 6114, 6104, 8546, 13437, 2010, 307, 363, 11, 34474, 2010, 2314, 50834], 'temperature': 0.0, 'avg_logprob': -0.1303725061537344, 'compression_ratio': 1.6374269005847952, 'no_speech_prob': 0.014937812462449074}, {'id': 175, 'seek': 181282, 'start': 1822.22, 'end': 1827.86, 'text': ' to be B, I do not care, but what does this tell me, this typecast? It tells me that this is an', 'tokens': [50834, 281, 312, 363, 11, 286, 360, 406, 1127, 11, 457, 437, 775, 341, 980, 385, 11, 341, 2010, 3734, 30, 467, 5112, 385, 300, 341, 307, 364, 51116], 'temperature': 0.0, 'avg_logprob': -0.1303725061537344, 'compression_ratio': 1.6374269005847952, 'no_speech_prob': 0.014937812462449074}, {'id': 176, 'seek': 181282, 'start': 1827.86, 'end': 1838.1, 'text': ' object of type A. So, the static type of this expression is A. So, when I access an F, which', 'tokens': [51116, 2657, 295, 2010, 316, 13, 407, 11, 264, 13437, 2010, 295, 341, 6114, 307, 316, 13, 407, 11, 562, 286, 2105, 364, 479, 11, 597, 51628], 'temperature': 0.0, 'avg_logprob': -0.1303725061537344, 'compression_ratio': 1.6374269005847952, 'no_speech_prob': 0.014937812462449074}, {'id': 177, 'seek': 183810, 'start': 1838.1, 'end': 1849.6999999999998, 'text': " F will it be? A is F. So, from the B's object, you can do a typecast and get the field of my", 'tokens': [50364, 479, 486, 309, 312, 30, 316, 307, 479, 13, 407, 11, 490, 264, 363, 311, 2657, 11, 291, 393, 360, 257, 2010, 3734, 293, 483, 264, 2519, 295, 452, 50944], 'temperature': 0.0, 'avg_logprob': -0.2126721349255792, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.039602041244506836}, {'id': 178, 'seek': 183810, 'start': 1849.6999999999998, 'end': 1860.6999999999998, 'text': " parent of B's parent. It is very simple, only two rules, method resolution, runtime, field resolution,", 'tokens': [50944, 2596, 295, 363, 311, 2596, 13, 467, 307, 588, 2199, 11, 787, 732, 4474, 11, 3170, 8669, 11, 34474, 11, 2519, 8669, 11, 51494], 'temperature': 0.0, 'avg_logprob': -0.2126721349255792, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.039602041244506836}, {'id': 179, 'seek': 186070, 'start': 1860.7, 'end': 1871.06, 'text': ' static type. That is it. Everything, so, I have pulled, maybe this is just my bad. All the', 'tokens': [50364, 13437, 2010, 13, 663, 307, 309, 13, 5471, 11, 370, 11, 286, 362, 7373, 11, 1310, 341, 307, 445, 452, 1578, 13, 1057, 264, 50882], 'temperature': 0.0, 'avg_logprob': -0.296249550832829, 'compression_ratio': 1.7407407407407407, 'no_speech_prob': 0.05498458072543144}, {'id': 180, 'seek': 186070, 'start': 1871.06, 'end': 1878.3, 'text': ' explanations should stop at the same thing. Resolution, field resolution, what is the static', 'tokens': [50882, 28708, 820, 1590, 412, 264, 912, 551, 13, 5015, 3386, 11, 2519, 8669, 11, 437, 307, 264, 13437, 51244], 'temperature': 0.0, 'avg_logprob': -0.296249550832829, 'compression_ratio': 1.7407407407407407, 'no_speech_prob': 0.05498458072543144}, {'id': 181, 'seek': 186070, 'start': 1878.3, 'end': 1883.5800000000002, 'text': ' type, what is the dynamic type? Field resolution, look at the static type. Method resolution, look', 'tokens': [51244, 2010, 11, 437, 307, 264, 8546, 2010, 30, 17952, 8669, 11, 574, 412, 264, 13437, 2010, 13, 25285, 8669, 11, 574, 51508], 'temperature': 0.0, 'avg_logprob': -0.296249550832829, 'compression_ratio': 1.7407407407407407, 'no_speech_prob': 0.05498458072543144}, {'id': 182, 'seek': 188358, 'start': 1883.58, 'end': 1891.62, 'text': ' at the runtime type. So, these two, I think you will see less complication. Do not go to,', 'tokens': [50364, 412, 264, 34474, 2010, 13, 407, 11, 613, 732, 11, 286, 519, 291, 486, 536, 1570, 1209, 8758, 13, 1144, 406, 352, 281, 11, 50766], 'temperature': 0.0, 'avg_logprob': -0.23685779341732163, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.19647271931171417}, {'id': 183, 'seek': 188358, 'start': 1891.62, 'end': 1897.98, 'text': ' oh and if this is a method of that method, do not look all that. Just look at just that method call.', 'tokens': [50766, 1954, 293, 498, 341, 307, 257, 3170, 295, 300, 3170, 11, 360, 406, 574, 439, 300, 13, 1449, 574, 412, 445, 300, 3170, 818, 13, 51084], 'temperature': 0.0, 'avg_logprob': -0.23685779341732163, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.19647271931171417}, {'id': 184, 'seek': 188358, 'start': 1897.98, 'end': 1907.3, 'text': ' No, this, not location, this. Look at the type of this. To get the type of this, you need the', 'tokens': [51084, 883, 11, 341, 11, 406, 4914, 11, 341, 13, 2053, 412, 264, 2010, 295, 341, 13, 1407, 483, 264, 2010, 295, 341, 11, 291, 643, 264, 51550], 'temperature': 0.0, 'avg_logprob': -0.23685779341732163, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.19647271931171417}, {'id': 185, 'seek': 190730, 'start': 1908.26, 'end': 1920.62, 'text': ' See, let us keep the problem in a small. The problem is to find the type, the problem is to find the', 'tokens': [50412, 3008, 11, 718, 505, 1066, 264, 1154, 294, 257, 1359, 13, 440, 1154, 307, 281, 915, 264, 2010, 11, 264, 1154, 307, 281, 915, 264, 51030], 'temperature': 0.0, 'avg_logprob': -0.23890875003955983, 'compression_ratio': 1.5426356589147288, 'no_speech_prob': 0.25063320994377136}, {'id': 186, 'seek': 190730, 'start': 1920.62, 'end': 1935.54, 'text': ' method. Both are different. So, in this example, for instance, perfect. The static, the errors you', 'tokens': [51030, 3170, 13, 6767, 366, 819, 13, 407, 11, 294, 341, 1365, 11, 337, 5197, 11, 2176, 13, 440, 13437, 11, 264, 13603, 291, 51776], 'temperature': 0.0, 'avg_logprob': -0.23890875003955983, 'compression_ratio': 1.5426356589147288, 'no_speech_prob': 0.25063320994377136}, {'id': 187, 'seek': 193554, 'start': 1935.54, 'end': 1948.62, 'text': ' get, a type mismatch, they are all static type mismatches. For instance, if you have a field', 'tokens': [50364, 483, 11, 257, 2010, 23220, 852, 11, 436, 366, 439, 13437, 2010, 23220, 852, 279, 13, 1171, 5197, 11, 498, 291, 362, 257, 2519, 51018], 'temperature': 0.0, 'avg_logprob': -0.14575660639795765, 'compression_ratio': 1.449612403100775, 'no_speech_prob': 0.04880928248167038}, {'id': 188, 'seek': 193554, 'start': 1948.62, 'end': 1962.1399999999999, 'text': ' variable BX5 and write X5 equal to X3, what is the type of X5, static type? What is the static', 'tokens': [51018, 7006, 363, 55, 20, 293, 2464, 1783, 20, 2681, 281, 1783, 18, 11, 437, 307, 264, 2010, 295, 1783, 20, 11, 13437, 2010, 30, 708, 307, 264, 13437, 51694], 'temperature': 0.0, 'avg_logprob': -0.14575660639795765, 'compression_ratio': 1.449612403100775, 'no_speech_prob': 0.04880928248167038}, {'id': 189, 'seek': 196214, 'start': 1962.18, 'end': 1981.0600000000002, 'text': ' type of X3? A, type mismatch, type error. And now, I could put a type cast here and tell the compiler,', 'tokens': [50366, 2010, 295, 1783, 18, 30, 316, 11, 2010, 23220, 852, 11, 2010, 6713, 13, 400, 586, 11, 286, 727, 829, 257, 2010, 4193, 510, 293, 980, 264, 31958, 11, 51310], 'temperature': 0.0, 'avg_logprob': -0.20161143938700357, 'compression_ratio': 1.4172661870503598, 'no_speech_prob': 0.06331736594438553}, {'id': 190, 'seek': 196214, 'start': 1981.0600000000002, 'end': 1991.98, 'text': ' trust me, trust me, you will get an object of B. So, what the compiler says, I shall not trust', 'tokens': [51310, 3361, 385, 11, 3361, 385, 11, 291, 486, 483, 364, 2657, 295, 363, 13, 407, 11, 437, 264, 31958, 1619, 11, 286, 4393, 406, 3361, 51856], 'temperature': 0.0, 'avg_logprob': -0.20161143938700357, 'compression_ratio': 1.4172661870503598, 'no_speech_prob': 0.06331736594438553}, {'id': 191, 'seek': 199198, 'start': 1991.98, 'end': 1998.7, 'text': ' you, but I will give you an impression that I am trusting you. So, what the compiler says,', 'tokens': [50364, 291, 11, 457, 286, 486, 976, 291, 364, 9995, 300, 286, 669, 28235, 291, 13, 407, 11, 437, 264, 31958, 1619, 11, 50700], 'temperature': 0.0, 'avg_logprob': -0.19184121740869728, 'compression_ratio': 1.6077348066298343, 'no_speech_prob': 0.00023659763974137604}, {'id': 192, 'seek': 199198, 'start': 1998.7, 'end': 2006.26, 'text': ' okay fine, for the time being, I will let you go. So, it will compile this, but it will also add a', 'tokens': [50700, 1392, 2489, 11, 337, 264, 565, 885, 11, 286, 486, 718, 291, 352, 13, 407, 11, 309, 486, 31413, 341, 11, 457, 309, 486, 611, 909, 257, 51078], 'temperature': 0.0, 'avg_logprob': -0.19184121740869728, 'compression_ratio': 1.6077348066298343, 'no_speech_prob': 0.00023659763974137604}, {'id': 193, 'seek': 199198, 'start': 2006.26, 'end': 2017.38, 'text': ' check that will check at runtime, but in X3, indeed, there is an object of type B and if the cast may', 'tokens': [51078, 1520, 300, 486, 1520, 412, 34474, 11, 457, 294, 1783, 18, 11, 6451, 11, 456, 307, 364, 2657, 295, 2010, 363, 293, 498, 264, 4193, 815, 51634], 'temperature': 0.0, 'avg_logprob': -0.19184121740869728, 'compression_ratio': 1.6077348066298343, 'no_speech_prob': 0.00023659763974137604}, {'id': 194, 'seek': 201738, 'start': 2017.38, 'end': 2023.38, 'text': ' fail at runtime. For example, we have this if then else here, right, with X4 equal to nu A or nu B.', 'tokens': [50364, 3061, 412, 34474, 13, 1171, 1365, 11, 321, 362, 341, 498, 550, 1646, 510, 11, 558, 11, 365, 1783, 19, 2681, 281, 3822, 316, 420, 3822, 363, 13, 50664], 'temperature': 0.0, 'avg_logprob': -0.24374656677246093, 'compression_ratio': 1.4444444444444444, 'no_speech_prob': 0.1221751943230629}, {'id': 195, 'seek': 201738, 'start': 2023.38, 'end': 2033.0600000000002, 'text': ' So, if I write here, it will compile successfully, but runtime it may fail if it is not an object', 'tokens': [50664, 407, 11, 498, 286, 2464, 510, 11, 309, 486, 31413, 10727, 11, 457, 34474, 309, 815, 3061, 498, 309, 307, 406, 364, 2657, 51148], 'temperature': 0.0, 'avg_logprob': -0.24374656677246093, 'compression_ratio': 1.4444444444444444, 'no_speech_prob': 0.1221751943230629}, {'id': 196, 'seek': 201738, 'start': 2033.0600000000002, 'end': 2045.7, 'text': ' of type B. Make sense? Yeah, so we are, I mean the other classes, they are.', 'tokens': [51148, 295, 2010, 363, 13, 4387, 2020, 30, 865, 11, 370, 321, 366, 11, 286, 914, 264, 661, 5359, 11, 436, 366, 13, 51780], 'temperature': 0.0, 'avg_logprob': -0.24374656677246093, 'compression_ratio': 1.4444444444444444, 'no_speech_prob': 0.1221751943230629}, {'id': 197, 'seek': 204738, 'start': 2047.38, 'end': 2055.98, 'text': ' Right, we should have a separate this thing on PL theory, summer school. PL theory is very interesting,', 'tokens': [50364, 1779, 11, 321, 820, 362, 257, 4994, 341, 551, 322, 6999, 5261, 11, 4266, 1395, 13, 6999, 5261, 307, 588, 1880, 11, 50794], 'temperature': 0.0, 'avg_logprob': -0.24718098158247015, 'compression_ratio': 1.7953488372093023, 'no_speech_prob': 0.0533597394824028}, {'id': 198, 'seek': 204738, 'start': 2055.98, 'end': 2062.58, 'text': ' I mean, programming language theory. You are studying programming languages, but there is a', 'tokens': [50794, 286, 914, 11, 9410, 2856, 5261, 13, 509, 366, 7601, 9410, 8650, 11, 457, 456, 307, 257, 51124], 'temperature': 0.0, 'avg_logprob': -0.24718098158247015, 'compression_ratio': 1.7953488372093023, 'no_speech_prob': 0.0533597394824028}, {'id': 199, 'seek': 204738, 'start': 2062.58, 'end': 2067.34, 'text': ' theory behind programming languages. Lot of math on why the programming languages are designed,', 'tokens': [51124, 5261, 2261, 9410, 8650, 13, 20131, 295, 5221, 322, 983, 264, 9410, 8650, 366, 4761, 11, 51362], 'temperature': 0.0, 'avg_logprob': -0.24718098158247015, 'compression_ratio': 1.7953488372093023, 'no_speech_prob': 0.0533597394824028}, {'id': 200, 'seek': 204738, 'start': 2067.34, 'end': 2075.7400000000002, 'text': " the way they are designed. It is not just somebody's whims and wishes, okay, so that is later.", 'tokens': [51362, 264, 636, 436, 366, 4761, 13, 467, 307, 406, 445, 2618, 311, 315, 18857, 293, 15065, 11, 1392, 11, 370, 300, 307, 1780, 13, 51782], 'temperature': 0.0, 'avg_logprob': -0.24718098158247015, 'compression_ratio': 1.7953488372093023, 'no_speech_prob': 0.0533597394824028}, {'id': 201, 'seek': 207574, 'start': 2075.74, 'end': 2089.9399999999996, 'text': ' Right, so now let us look at this. I am calling X dot M passing Q. X dot M will call this guy and', 'tokens': [50364, 1779, 11, 370, 586, 718, 505, 574, 412, 341, 13, 286, 669, 5141, 1783, 5893, 376, 8437, 1249, 13, 1783, 5893, 376, 486, 818, 341, 2146, 293, 51074], 'temperature': 0.0, 'avg_logprob': -0.2031875149957065, 'compression_ratio': 1.4296875, 'no_speech_prob': 0.014976746402680874}, {'id': 202, 'seek': 207574, 'start': 2089.9399999999996, 'end': 2099.2999999999997, 'text': ' which will call R dot P. So, this R can be type of type Q and here I am passing an S,', 'tokens': [51074, 597, 486, 818, 497, 5893, 430, 13, 407, 11, 341, 497, 393, 312, 2010, 295, 2010, 1249, 293, 510, 286, 669, 8437, 364, 318, 11, 51542], 'temperature': 0.0, 'avg_logprob': -0.2031875149957065, 'compression_ratio': 1.4296875, 'no_speech_prob': 0.014976746402680874}, {'id': 203, 'seek': 209930, 'start': 2099.3, 'end': 2112.46, 'text': ' right. So, an S can also flow here at some level. Now, it is coming here, Q dot arg and here I am', 'tokens': [50364, 558, 13, 407, 11, 364, 318, 393, 611, 3095, 510, 412, 512, 1496, 13, 823, 11, 309, 307, 1348, 510, 11, 1249, 5893, 3882, 293, 510, 286, 669, 51022], 'temperature': 0.0, 'avg_logprob': -0.17627861679241222, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.014938841573894024}, {'id': 204, 'seek': 209930, 'start': 2112.46, 'end': 2117.98, 'text': ' not calling anything, but I could have called nu S as well here, right. If I was calling nu S,', 'tokens': [51022, 406, 5141, 1340, 11, 457, 286, 727, 362, 1219, 3822, 318, 382, 731, 510, 11, 558, 13, 759, 286, 390, 5141, 3822, 318, 11, 51298], 'temperature': 0.0, 'avg_logprob': -0.17627861679241222, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.014938841573894024}, {'id': 205, 'seek': 209930, 'start': 2117.98, 'end': 2126.2200000000003, 'text': ' what will happen? An arg will get an S. So, if I, when I do R dot P, which P is it? Right, S or,', 'tokens': [51298, 437, 486, 1051, 30, 1107, 3882, 486, 483, 364, 318, 13, 407, 11, 498, 286, 11, 562, 286, 360, 497, 5893, 430, 11, 597, 430, 307, 309, 30, 1779, 11, 318, 420, 11, 51710], 'temperature': 0.0, 'avg_logprob': -0.17627861679241222, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.014938841573894024}, {'id': 206, 'seek': 212622, 'start': 2126.22, 'end': 2134.8199999999997, 'text': ' so I need to be careful, right. So, given such a program, right, I want to know what is the flow', 'tokens': [50364, 370, 286, 643, 281, 312, 5026, 11, 558, 13, 407, 11, 2212, 1270, 257, 1461, 11, 558, 11, 286, 528, 281, 458, 437, 307, 264, 3095, 50794], 'temperature': 0.0, 'avg_logprob': -0.15358005399289337, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.009668535552918911}, {'id': 207, 'seek': 212622, 'start': 2134.8199999999997, 'end': 2143.22, 'text': ' set of X, Y, arg and so on. What is the flow set of X? Simple, right. X, I mean, there is only one', 'tokens': [50794, 992, 295, 1783, 11, 398, 11, 3882, 293, 370, 322, 13, 708, 307, 264, 3095, 992, 295, 1783, 30, 21532, 11, 558, 13, 1783, 11, 286, 914, 11, 456, 307, 787, 472, 51214], 'temperature': 0.0, 'avg_logprob': -0.15358005399289337, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.009668535552918911}, {'id': 208, 'seek': 212622, 'start': 2143.22, 'end': 2152.8999999999996, 'text': ' guy here, that is the only assignment to X. So, flow set of X is A. It should be set A,', 'tokens': [51214, 2146, 510, 11, 300, 307, 264, 787, 15187, 281, 1783, 13, 407, 11, 3095, 992, 295, 1783, 307, 316, 13, 467, 820, 312, 992, 316, 11, 51698], 'temperature': 0.0, 'avg_logprob': -0.15358005399289337, 'compression_ratio': 1.6453488372093024, 'no_speech_prob': 0.009668535552918911}, {'id': 209, 'seek': 215290, 'start': 2152.9, 'end': 2168.2200000000003, 'text': ' right. Flow set of B, sorry, flow set of B is, sorry, flow set of Y is B, okay.', 'tokens': [50364, 558, 13, 32792, 992, 295, 363, 11, 2597, 11, 3095, 992, 295, 363, 307, 11, 2597, 11, 3095, 992, 295, 398, 307, 363, 11, 1392, 13, 51130], 'temperature': 0.0, 'avg_logprob': -0.3578571001688639, 'compression_ratio': 1.4363636363636363, 'no_speech_prob': 0.47554919123649597}, {'id': 210, 'seek': 216822, 'start': 2168.22, 'end': 2185.58, 'text': ' What if I have code like this, nu Q, nu Q dot P, right. Wait, wait, I do not know why,', 'tokens': [50364, 708, 498, 286, 362, 3089, 411, 341, 11, 3822, 1249, 11, 3822, 1249, 5893, 430, 11, 558, 13, 3802, 11, 1699, 11, 286, 360, 406, 458, 983, 11, 51232], 'temperature': 0.0, 'avg_logprob': -0.18447866278179623, 'compression_ratio': 1.3228346456692914, 'no_speech_prob': 0.019710740074515343}, {'id': 211, 'seek': 216822, 'start': 2185.58, 'end': 2194.62, 'text': ' I, it should have come later. Wait, just a minute. So, see, since it was X dot M,', 'tokens': [51232, 286, 11, 309, 820, 362, 808, 1780, 13, 3802, 11, 445, 257, 3456, 13, 407, 11, 536, 11, 1670, 309, 390, 1783, 5893, 376, 11, 51684], 'temperature': 0.0, 'avg_logprob': -0.18447866278179623, 'compression_ratio': 1.3228346456692914, 'no_speech_prob': 0.019710740074515343}, {'id': 212, 'seek': 219462, 'start': 2194.62, 'end': 2206.18, 'text': ' if I know that flow set of X is A, what can I do? This method can be inline. If I inline this', 'tokens': [50364, 498, 286, 458, 300, 3095, 992, 295, 1783, 307, 316, 11, 437, 393, 286, 360, 30, 639, 3170, 393, 312, 294, 1889, 13, 759, 286, 294, 1889, 341, 50942], 'temperature': 0.0, 'avg_logprob': -0.16126844959874306, 'compression_ratio': 1.3582089552238805, 'no_speech_prob': 0.00940705370157957}, {'id': 213, 'seek': 219462, 'start': 2206.18, 'end': 2219.1, 'text': ' method, what will I get? Nu Q dot P, correct, because whatever, not why, nu Q, nu Q. So,', 'tokens': [50942, 3170, 11, 437, 486, 286, 483, 30, 13612, 1249, 5893, 430, 11, 3006, 11, 570, 2035, 11, 406, 983, 11, 3822, 1249, 11, 3822, 1249, 13, 407, 11, 51588], 'temperature': 0.0, 'avg_logprob': -0.16126844959874306, 'compression_ratio': 1.3582089552238805, 'no_speech_prob': 0.00940705370157957}, {'id': 214, 'seek': 221910, 'start': 2219.58, 'end': 2227.98, 'text': ' nu Q is the argument, right. We have not yet covered how to do the inlining, but we are', 'tokens': [50388, 3822, 1249, 307, 264, 6770, 11, 558, 13, 492, 362, 406, 1939, 5343, 577, 281, 360, 264, 294, 31079, 11, 457, 321, 366, 50808], 'temperature': 0.0, 'avg_logprob': -0.19252499667080966, 'compression_ratio': 1.3759398496240602, 'no_speech_prob': 0.02368253841996193}, {'id': 215, 'seek': 221910, 'start': 2227.98, 'end': 2235.86, 'text': ' just showing nevertheless. So, this X dot M, nu Q, this became nu Q dot P, because this is arg,', 'tokens': [50808, 445, 4099, 26924, 13, 407, 11, 341, 1783, 5893, 376, 11, 3822, 1249, 11, 341, 3062, 3822, 1249, 5893, 430, 11, 570, 341, 307, 3882, 11, 51202], 'temperature': 0.0, 'avg_logprob': -0.19252499667080966, 'compression_ratio': 1.3759398496240602, 'no_speech_prob': 0.02368253841996193}, {'id': 216, 'seek': 223586, 'start': 2235.86, 'end': 2247.78, 'text': ' arg dot P became nu Q dot P, right, okay. What about Y? What is the type of Y? B,', 'tokens': [50364, 3882, 5893, 430, 3062, 3822, 1249, 5893, 430, 11, 558, 11, 1392, 13, 708, 466, 398, 30, 708, 307, 264, 2010, 295, 398, 30, 363, 11, 50960], 'temperature': 0.0, 'avg_logprob': -0.10325338019699347, 'compression_ratio': 1.4365079365079365, 'no_speech_prob': 0.012006708420813084}, {'id': 217, 'seek': 223586, 'start': 2247.78, 'end': 2259.38, 'text': ' can I inline this? So, B, what is, what do I do? Whatever the code, right, whatever the code there,', 'tokens': [50960, 393, 286, 294, 1889, 341, 30, 407, 11, 363, 11, 437, 307, 11, 437, 360, 286, 360, 30, 8541, 264, 3089, 11, 558, 11, 2035, 264, 3089, 456, 11, 51540], 'temperature': 0.0, 'avg_logprob': -0.10325338019699347, 'compression_ratio': 1.4365079365079365, 'no_speech_prob': 0.012006708420813084}, {'id': 218, 'seek': 225938, 'start': 2259.38, 'end': 2269.78, 'text': ' I have to plunk it in here, okay. So, this, I am not showing the code, right. So, we will,', 'tokens': [50364, 286, 362, 281, 499, 3197, 309, 294, 510, 11, 1392, 13, 407, 11, 341, 11, 286, 669, 406, 4099, 264, 3089, 11, 558, 13, 407, 11, 321, 486, 11, 50884], 'temperature': 0.0, 'avg_logprob': -0.12274133934164946, 'compression_ratio': 1.719626168224299, 'no_speech_prob': 0.011790858581662178}, {'id': 219, 'seek': 225938, 'start': 2269.78, 'end': 2278.1, 'text': ' we would not show that. And there may be some code in between, then I have to make sure that', 'tokens': [50884, 321, 576, 406, 855, 300, 13, 400, 456, 815, 312, 512, 3089, 294, 1296, 11, 550, 286, 362, 281, 652, 988, 300, 51300], 'temperature': 0.0, 'avg_logprob': -0.12274133934164946, 'compression_ratio': 1.719626168224299, 'no_speech_prob': 0.011790858581662178}, {'id': 220, 'seek': 225938, 'start': 2278.1, 'end': 2283.2200000000003, 'text': ' what is flowing into X, what is flowing into Y. And now, instead of just looking at the code,', 'tokens': [51300, 437, 307, 13974, 666, 1783, 11, 437, 307, 13974, 666, 398, 13, 400, 586, 11, 2602, 295, 445, 1237, 412, 264, 3089, 11, 51556], 'temperature': 0.0, 'avg_logprob': -0.12274133934164946, 'compression_ratio': 1.719626168224299, 'no_speech_prob': 0.011790858581662178}, {'id': 221, 'seek': 225938, 'start': 2283.2200000000003, 'end': 2287.78, 'text': ' we will try to come up with a scheme in which we can do this in a systematic manner, okay.', 'tokens': [51556, 321, 486, 853, 281, 808, 493, 365, 257, 12232, 294, 597, 321, 393, 360, 341, 294, 257, 27249, 9060, 11, 1392, 13, 51784], 'temperature': 0.0, 'avg_logprob': -0.12274133934164946, 'compression_ratio': 1.719626168224299, 'no_speech_prob': 0.011790858581662178}, {'id': 222, 'seek': 228778, 'start': 2287.78, 'end': 2295.5, 'text': ' We want to know unique colors, that is our goal. We will use a set based analysis,', 'tokens': [50364, 492, 528, 281, 458, 3845, 4577, 11, 300, 307, 527, 3387, 13, 492, 486, 764, 257, 992, 2361, 5215, 11, 50750], 'temperature': 0.0, 'avg_logprob': -0.17280322989237676, 'compression_ratio': 1.663594470046083, 'no_speech_prob': 0.001323420787230134}, {'id': 223, 'seek': 228778, 'start': 2295.5, 'end': 2306.1400000000003, 'text': ' that is, we will, for each expression, we will compute a flow set, right. And again,', 'tokens': [50750, 300, 307, 11, 321, 486, 11, 337, 1184, 6114, 11, 321, 486, 14722, 257, 3095, 992, 11, 558, 13, 400, 797, 11, 51282], 'temperature': 0.0, 'avg_logprob': -0.17280322989237676, 'compression_ratio': 1.663594470046083, 'no_speech_prob': 0.001323420787230134}, {'id': 224, 'seek': 228778, 'start': 2306.1400000000003, 'end': 2312.6200000000003, 'text': ' this is an approximation. This is not a, we are not saying exact this thing, we would not know it,', 'tokens': [51282, 341, 307, 364, 28023, 13, 639, 307, 406, 257, 11, 321, 366, 406, 1566, 1900, 341, 551, 11, 321, 576, 406, 458, 309, 11, 51606], 'temperature': 0.0, 'avg_logprob': -0.17280322989237676, 'compression_ratio': 1.663594470046083, 'no_speech_prob': 0.001323420787230134}, {'id': 225, 'seek': 228778, 'start': 2312.6200000000003, 'end': 2317.5, 'text': ' right. And there is always a tradeoff between precision and speed, we will see how that comes.', 'tokens': [51606, 558, 13, 400, 456, 307, 1009, 257, 4923, 4506, 1296, 18356, 293, 3073, 11, 321, 486, 536, 577, 300, 1487, 13, 51850], 'temperature': 0.0, 'avg_logprob': -0.17280322989237676, 'compression_ratio': 1.663594470046083, 'no_speech_prob': 0.001323420787230134}, {'id': 226, 'seek': 231750, 'start': 2317.5, 'end': 2334.5, 'text': ' Okay. Given a variable, something like here, X3 dot bar or X1 dot m, X2 dot m, given any method', 'tokens': [50364, 1033, 13, 18600, 257, 7006, 11, 746, 411, 510, 11, 1783, 18, 5893, 2159, 420, 1783, 16, 5893, 275, 11, 1783, 17, 5893, 275, 11, 2212, 604, 3170, 51214], 'temperature': 0.0, 'avg_logprob': -0.1885094561819303, 'compression_ratio': 1.3333333333333333, 'no_speech_prob': 0.002433682791888714}, {'id': 227, 'seek': 231750, 'start': 2334.5, 'end': 2341.9, 'text': " call, can you quickly tell me what all the possible m's it can be? It has to be either that class or", 'tokens': [51214, 818, 11, 393, 291, 2661, 980, 385, 437, 439, 264, 1944, 275, 311, 309, 393, 312, 30, 467, 575, 281, 312, 2139, 300, 1508, 420, 51584], 'temperature': 0.0, 'avg_logprob': -0.1885094561819303, 'compression_ratio': 1.3333333333333333, 'no_speech_prob': 0.002433682791888714}, {'id': 228, 'seek': 234190, 'start': 2341.9, 'end': 2348.9, 'text': ' its child. This m may be present in so many other classes, but definitely not those classes,', 'tokens': [50364, 1080, 1440, 13, 639, 275, 815, 312, 1974, 294, 370, 867, 661, 5359, 11, 457, 2138, 406, 729, 5359, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.17573317270430308, 'compression_ratio': 1.6235294117647059, 'no_speech_prob': 0.030184337869286537}, {'id': 229, 'seek': 234190, 'start': 2348.9, 'end': 2357.58, 'text': ' only that class and its children. So, using class hierarchy, you can quickly give me a', 'tokens': [50714, 787, 300, 1508, 293, 1080, 2227, 13, 407, 11, 1228, 1508, 22333, 11, 291, 393, 2661, 976, 385, 257, 51148], 'temperature': 0.0, 'avg_logprob': -0.17573317270430308, 'compression_ratio': 1.6235294117647059, 'no_speech_prob': 0.030184337869286537}, {'id': 230, 'seek': 234190, 'start': 2357.58, 'end': 2364.62, 'text': ' conservative estimation of which methods can be called. This is called class hierarchy analysis,', 'tokens': [51148, 13780, 35701, 295, 597, 7150, 393, 312, 1219, 13, 639, 307, 1219, 1508, 22333, 5215, 11, 51500], 'temperature': 0.0, 'avg_logprob': -0.17573317270430308, 'compression_ratio': 1.6235294117647059, 'no_speech_prob': 0.030184337869286537}, {'id': 231, 'seek': 236462, 'start': 2364.62, 'end': 2377.18, 'text': ' right. This is called class hierarchy analysis. You want to watch? Okay. So, class hierarchy', 'tokens': [50364, 558, 13, 639, 307, 1219, 1508, 22333, 5215, 13, 509, 528, 281, 1159, 30, 1033, 13, 407, 11, 1508, 22333, 50992], 'temperature': 0.0, 'avg_logprob': -0.15988067626953126, 'compression_ratio': 1.5166666666666666, 'no_speech_prob': 0.0032723178155720234}, {'id': 232, 'seek': 236462, 'start': 2377.18, 'end': 2382.98, 'text': ' analysis is super fast, but the precision is less, right. In this case, in X3 dot m,', 'tokens': [50992, 5215, 307, 1687, 2370, 11, 457, 264, 18356, 307, 1570, 11, 558, 13, 682, 341, 1389, 11, 294, 1783, 18, 5893, 275, 11, 51282], 'temperature': 0.0, 'avg_logprob': -0.15988067626953126, 'compression_ratio': 1.5166666666666666, 'no_speech_prob': 0.0032723178155720234}, {'id': 233, 'seek': 236462, 'start': 2382.98, 'end': 2393.7799999999997, 'text': ' I will say it points to a or b, whereas we can be slightly more precise and get that this is b.', 'tokens': [51282, 286, 486, 584, 309, 2793, 281, 257, 420, 272, 11, 9735, 321, 393, 312, 4748, 544, 13600, 293, 483, 300, 341, 307, 272, 13, 51822], 'temperature': 0.0, 'avg_logprob': -0.15988067626953126, 'compression_ratio': 1.5166666666666666, 'no_speech_prob': 0.0032723178155720234}, {'id': 234, 'seek': 239378, 'start': 2393.78, 'end': 2407.2200000000003, 'text': ' Question is there? No. Okay. Fine. We will not use CHA. So, CHA is a common word people keep', 'tokens': [50364, 14464, 307, 456, 30, 883, 13, 1033, 13, 12024, 13, 492, 486, 406, 764, 35732, 13, 407, 11, 35732, 307, 257, 2689, 1349, 561, 1066, 51036], 'temperature': 0.0, 'avg_logprob': -0.19993849595387778, 'compression_ratio': 1.3357142857142856, 'no_speech_prob': 0.0015476553235203028}, {'id': 235, 'seek': 239378, 'start': 2407.2200000000003, 'end': 2412.94, 'text': ' using class hierarchy analysis. We will instead use a method called control flow analysis. Why', 'tokens': [51036, 1228, 1508, 22333, 5215, 13, 492, 486, 2602, 764, 257, 3170, 1219, 1969, 3095, 5215, 13, 1545, 51322], 'temperature': 0.0, 'avg_logprob': -0.19993849595387778, 'compression_ratio': 1.3357142857142856, 'no_speech_prob': 0.0015476553235203028}, {'id': 236, 'seek': 241294, 'start': 2412.94, 'end': 2428.58, 'text': ' the zero will come to that later? Okay. So, CHA I will skip. So, using CHA, if we use CHA,', 'tokens': [50364, 264, 4018, 486, 808, 281, 300, 1780, 30, 1033, 13, 407, 11, 35732, 286, 486, 10023, 13, 407, 11, 1228, 35732, 11, 498, 321, 764, 35732, 11, 51146], 'temperature': 0.0, 'avg_logprob': -0.18153611544905038, 'compression_ratio': 1.3055555555555556, 'no_speech_prob': 0.09161897748708725}, {'id': 237, 'seek': 241294, 'start': 2428.58, 'end': 2441.18, 'text': ' for the same example, what is the flow set for X? X can be an object of type. No. Class hierarchy', 'tokens': [51146, 337, 264, 912, 1365, 11, 437, 307, 264, 3095, 992, 337, 1783, 30, 1783, 393, 312, 364, 2657, 295, 2010, 13, 883, 13, 9471, 22333, 51776], 'temperature': 0.0, 'avg_logprob': -0.18153611544905038, 'compression_ratio': 1.3055555555555556, 'no_speech_prob': 0.09161897748708725}, {'id': 238, 'seek': 244118, 'start': 2441.18, 'end': 2452.2599999999998, 'text': ' analysis will say a or b, right, but flow set of Y will be unique. It will be only b,', 'tokens': [50364, 5215, 486, 584, 257, 420, 272, 11, 558, 11, 457, 3095, 992, 295, 398, 486, 312, 3845, 13, 467, 486, 312, 787, 272, 11, 50918], 'temperature': 0.0, 'avg_logprob': -0.24011324191915578, 'compression_ratio': 1.4330708661417322, 'no_speech_prob': 0.3306243419647217}, {'id': 239, 'seek': 244118, 'start': 2452.2599999999998, 'end': 2466.18, 'text': ' because b can be anything below b, right. So, but X is not precise. So, I cannot inline X dot m.', 'tokens': [50918, 570, 272, 393, 312, 1340, 2507, 272, 11, 558, 13, 407, 11, 457, 1783, 307, 406, 13600, 13, 407, 11, 286, 2644, 294, 1889, 1783, 5893, 275, 13, 51614], 'temperature': 0.0, 'avg_logprob': -0.24011324191915578, 'compression_ratio': 1.4330708661417322, 'no_speech_prob': 0.3306243419647217}, {'id': 240, 'seek': 246618, 'start': 2466.18, 'end': 2479.14, 'text': ' Okay. We will instead see what is called a zero CFA. Here, this is we will keep a flow. We will', 'tokens': [50364, 1033, 13, 492, 486, 2602, 536, 437, 307, 1219, 257, 4018, 383, 19684, 13, 1692, 11, 341, 307, 321, 486, 1066, 257, 3095, 13, 492, 486, 51012], 'temperature': 0.0, 'avg_logprob': -0.25092923482259116, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.028417881578207016}, {'id': 241, 'seek': 246618, 'start': 2479.14, 'end': 2486.8999999999996, 'text': ' learn a flow insensitive version. Flow insensitive as in we would we would not remember the order', 'tokens': [51012, 1466, 257, 3095, 1028, 34465, 3037, 13, 32792, 1028, 34465, 382, 294, 321, 576, 321, 576, 406, 1604, 264, 1668, 51400], 'temperature': 0.0, 'avg_logprob': -0.25092923482259116, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.028417881578207016}, {'id': 242, 'seek': 246618, 'start': 2486.8999999999996, 'end': 2494.18, 'text': ' in which the statements are processed. Okay. And we will also, this is also context insensitive,', 'tokens': [51400, 294, 597, 264, 12363, 366, 18846, 13, 1033, 13, 400, 321, 486, 611, 11, 341, 307, 611, 4319, 1028, 34465, 11, 51764], 'temperature': 0.0, 'avg_logprob': -0.25092923482259116, 'compression_ratio': 1.6571428571428573, 'no_speech_prob': 0.028417881578207016}, {'id': 243, 'seek': 249418, 'start': 2494.18, 'end': 2503.7, 'text': ' that is we would not remember a given call. We would not differentiate a method call from', 'tokens': [50364, 300, 307, 321, 576, 406, 1604, 257, 2212, 818, 13, 492, 576, 406, 23203, 257, 3170, 818, 490, 50840], 'temperature': 0.0, 'avg_logprob': -0.20191478729248047, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.003074380336329341}, {'id': 244, 'seek': 249418, 'start': 2503.7, 'end': 2508.8199999999997, 'text': ' here and here. We will treat all the, we will mix up all the method calls into a single method', 'tokens': [50840, 510, 293, 510, 13, 492, 486, 2387, 439, 264, 11, 321, 486, 2890, 493, 439, 264, 3170, 5498, 666, 257, 2167, 3170, 51096], 'temperature': 0.0, 'avg_logprob': -0.20191478729248047, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.003074380336329341}, {'id': 245, 'seek': 249418, 'start': 2508.8199999999997, 'end': 2520.3399999999997, 'text': ' call. So, okay. So, here is the process. We will generate some constraints about what can flow into', 'tokens': [51096, 818, 13, 407, 11, 1392, 13, 407, 11, 510, 307, 264, 1399, 13, 492, 486, 8460, 512, 18491, 466, 437, 393, 3095, 666, 51672], 'temperature': 0.0, 'avg_logprob': -0.20191478729248047, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.003074380336329341}, {'id': 246, 'seek': 252034, 'start': 2520.34, 'end': 2526.7400000000002, 'text': ' variables. We will solve those constraints and get the answer. For each expression E,', 'tokens': [50364, 9102, 13, 492, 486, 5039, 729, 18491, 293, 483, 264, 1867, 13, 1171, 1184, 6114, 462, 11, 50684], 'temperature': 0.0, 'avg_logprob': -0.174298636767329, 'compression_ratio': 1.3235294117647058, 'no_speech_prob': 0.04185795411467552}, {'id': 247, 'seek': 252034, 'start': 2526.7400000000002, 'end': 2537.82, 'text': ' we will keep a flow variable. So, for example, if I have a program new, whenever I do a new C,', 'tokens': [50684, 321, 486, 1066, 257, 3095, 7006, 13, 407, 11, 337, 1365, 11, 498, 286, 362, 257, 1461, 777, 11, 5699, 286, 360, 257, 777, 383, 11, 51238], 'temperature': 0.0, 'avg_logprob': -0.174298636767329, 'compression_ratio': 1.3235294117647058, 'no_speech_prob': 0.04185795411467552}, {'id': 248, 'seek': 253782, 'start': 2537.82, 'end': 2550.38, 'text': ' whenever I do a new C, I say that C flows into the this expression. And when I do X equal to E,', 'tokens': [50364, 5699, 286, 360, 257, 777, 383, 11, 286, 584, 300, 383, 12867, 666, 264, 341, 6114, 13, 400, 562, 286, 360, 1783, 2681, 281, 462, 11, 50992], 'temperature': 0.0, 'avg_logprob': -0.17070644873159904, 'compression_ratio': 1.4104477611940298, 'no_speech_prob': 0.003137771273031831}, {'id': 249, 'seek': 253782, 'start': 2550.38, 'end': 2562.7400000000002, 'text': ' whatever was flowing into E will flow into X. Simple idea. Okay. So, we will say whatever was', 'tokens': [50992, 2035, 390, 13974, 666, 462, 486, 3095, 666, 1783, 13, 21532, 1558, 13, 1033, 13, 407, 11, 321, 486, 584, 2035, 390, 51610], 'temperature': 0.0, 'avg_logprob': -0.17070644873159904, 'compression_ratio': 1.4104477611940298, 'no_speech_prob': 0.003137771273031831}, {'id': 250, 'seek': 256274, 'start': 2562.74, 'end': 2569.1, 'text': ' flowing into E will flow into X. But X may contain other things as well because at some', 'tokens': [50364, 13974, 666, 462, 486, 3095, 666, 1783, 13, 583, 1783, 815, 5304, 661, 721, 382, 731, 570, 412, 512, 50682], 'temperature': 0.0, 'avg_logprob': -0.1455274290508694, 'compression_ratio': 1.608187134502924, 'no_speech_prob': 0.012422273866832256}, {'id': 251, 'seek': 256274, 'start': 2569.1, 'end': 2574.14, 'text': ' other point I may write X equal to E prime. So, that will also flow into X. Again, we are not', 'tokens': [50682, 661, 935, 286, 815, 2464, 1783, 2681, 281, 462, 5835, 13, 407, 11, 300, 486, 611, 3095, 666, 1783, 13, 3764, 11, 321, 366, 406, 50934], 'temperature': 0.0, 'avg_logprob': -0.1455274290508694, 'compression_ratio': 1.608187134502924, 'no_speech_prob': 0.012422273866832256}, {'id': 252, 'seek': 256274, 'start': 2574.14, 'end': 2580.9399999999996, 'text': ' remembering the, we are not flow sensitive. I want to have a statement what all may flow into', 'tokens': [50934, 20719, 264, 11, 321, 366, 406, 3095, 9477, 13, 286, 528, 281, 362, 257, 5629, 437, 439, 815, 3095, 666, 51274], 'temperature': 0.0, 'avg_logprob': -0.1455274290508694, 'compression_ratio': 1.608187134502924, 'no_speech_prob': 0.012422273866832256}, {'id': 253, 'seek': 258094, 'start': 2580.94, 'end': 2593.46, 'text': ' X, not what all may flow into X here. Okay. This is flow insensitive. Okay. So, if I have a method', 'tokens': [50364, 1783, 11, 406, 437, 439, 815, 3095, 666, 1783, 510, 13, 1033, 13, 639, 307, 3095, 1028, 34465, 13, 1033, 13, 407, 11, 498, 286, 362, 257, 3170, 50990], 'temperature': 0.0, 'avg_logprob': -0.1638078993939339, 'compression_ratio': 1.5372340425531914, 'no_speech_prob': 0.05995628610253334}, {'id': 254, 'seek': 258094, 'start': 2593.46, 'end': 2600.3, 'text': ' call E1 dot m equal to E1 dot m and pass E2 and the method m looks like this. It is a type of A,', 'tokens': [50990, 818, 462, 16, 5893, 275, 2681, 281, 462, 16, 5893, 275, 293, 1320, 462, 17, 293, 264, 3170, 275, 1542, 411, 341, 13, 467, 307, 257, 2010, 295, 316, 11, 51332], 'temperature': 0.0, 'avg_logprob': -0.1638078993939339, 'compression_ratio': 1.5372340425531914, 'no_speech_prob': 0.05995628610253334}, {'id': 255, 'seek': 258094, 'start': 2600.3, 'end': 2609.3, 'text': ' I have an argument small a and it returns b. If I write E1 dot m, right, and I am passing E2,', 'tokens': [51332, 286, 362, 364, 6770, 1359, 257, 293, 309, 11247, 272, 13, 759, 286, 2464, 462, 16, 5893, 275, 11, 558, 11, 293, 286, 669, 8437, 462, 17, 11, 51782], 'temperature': 0.0, 'avg_logprob': -0.1638078993939339, 'compression_ratio': 1.5372340425531914, 'no_speech_prob': 0.05995628610253334}, {'id': 256, 'seek': 260930, 'start': 2609.3, 'end': 2616.78, 'text': ' it is as if I am writing small a equal to E2, right. So, whatever was passing into E2', 'tokens': [50364, 309, 307, 382, 498, 286, 669, 3579, 1359, 257, 2681, 281, 462, 17, 11, 558, 13, 407, 11, 2035, 390, 8437, 666, 462, 17, 50738], 'temperature': 0.0, 'avg_logprob': -0.14141588043748288, 'compression_ratio': 1.464, 'no_speech_prob': 0.0028579665813595057}, {'id': 257, 'seek': 260930, 'start': 2616.78, 'end': 2630.02, 'text': ' should also pass to A. So, E2 is a subset of, this set is a subset of whatever is flowing into A.', 'tokens': [50738, 820, 611, 1320, 281, 316, 13, 407, 11, 462, 17, 307, 257, 25993, 295, 11, 341, 992, 307, 257, 25993, 295, 2035, 307, 13974, 666, 316, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.14141588043748288, 'compression_ratio': 1.464, 'no_speech_prob': 0.0028579665813595057}, {'id': 258, 'seek': 263002, 'start': 2630.02, 'end': 2647.58, 'text': ' And E1, E1, when can I say that E2 will go into A? Only if E1 includes C. If E1 does not include', 'tokens': [50364, 400, 462, 16, 11, 462, 16, 11, 562, 393, 286, 584, 300, 462, 17, 486, 352, 666, 316, 30, 5686, 498, 462, 16, 5974, 383, 13, 759, 462, 16, 775, 406, 4090, 51242], 'temperature': 0.0, 'avg_logprob': -0.14998692732590896, 'compression_ratio': 1.4621212121212122, 'no_speech_prob': 0.09650415182113647}, {'id': 259, 'seek': 263002, 'start': 2647.58, 'end': 2658.94, 'text': ' C, it does not make sense. If C flows into E1, if C flows into E1, then whatever is flowing into', 'tokens': [51242, 383, 11, 309, 775, 406, 652, 2020, 13, 759, 383, 12867, 666, 462, 16, 11, 498, 383, 12867, 666, 462, 16, 11, 550, 2035, 307, 13974, 666, 51810], 'temperature': 0.0, 'avg_logprob': -0.14998692732590896, 'compression_ratio': 1.4621212121212122, 'no_speech_prob': 0.09650415182113647}, {'id': 260, 'seek': 265894, 'start': 2659.06, 'end': 2671.54, 'text': ' E2 will also go into A. Is it too complicated? Anyone? Last part once more. Okay. Look at this', 'tokens': [50370, 462, 17, 486, 611, 352, 666, 316, 13, 1119, 309, 886, 6179, 30, 14643, 30, 5264, 644, 1564, 544, 13, 1033, 13, 2053, 412, 341, 50994], 'temperature': 0.0, 'avg_logprob': -0.15282241085119413, 'compression_ratio': 1.3284671532846715, 'no_speech_prob': 0.021608974784612656}, {'id': 261, 'seek': 265894, 'start': 2671.54, 'end': 2684.7400000000002, 'text': ' way here. I have a, I have a, I have a method call here which is calling E1 dot m. Just', 'tokens': [50994, 636, 510, 13, 286, 362, 257, 11, 286, 362, 257, 11, 286, 362, 257, 3170, 818, 510, 597, 307, 5141, 462, 16, 5893, 275, 13, 1449, 51654], 'temperature': 0.0, 'avg_logprob': -0.15282241085119413, 'compression_ratio': 1.3284671532846715, 'no_speech_prob': 0.021608974784612656}, {'id': 262, 'seek': 268474, 'start': 2684.74, 'end': 2692.14, 'text': ' syntactically looking at my code, I can see m is present in class A, class B, class D, class whatever.', 'tokens': [50364, 23980, 578, 984, 1237, 412, 452, 3089, 11, 286, 393, 536, 275, 307, 1974, 294, 1508, 316, 11, 1508, 363, 11, 1508, 413, 11, 1508, 2035, 13, 50734], 'temperature': 0.0, 'avg_logprob': -0.148203706741333, 'compression_ratio': 1.4222222222222223, 'no_speech_prob': 0.012511268258094788}, {'id': 263, 'seek': 268474, 'start': 2692.14, 'end': 2707.7799999999997, 'text': ' So, all I am saying one such class is class C. I am saying if, if C flows into E1, right,', 'tokens': [50734, 407, 11, 439, 286, 669, 1566, 472, 1270, 1508, 307, 1508, 383, 13, 286, 669, 1566, 498, 11, 498, 383, 12867, 666, 462, 16, 11, 558, 11, 51516], 'temperature': 0.0, 'avg_logprob': -0.148203706741333, 'compression_ratio': 1.4222222222222223, 'no_speech_prob': 0.012511268258094788}, {'id': 264, 'seek': 270778, 'start': 2707.82, 'end': 2717.3, 'text': ' this implies whatever is there in E2 will also flow in A, flow into A, right. Because there may be', 'tokens': [50366, 341, 18779, 2035, 307, 456, 294, 462, 17, 486, 611, 3095, 294, 316, 11, 3095, 666, 316, 11, 558, 13, 1436, 456, 815, 312, 50840], 'temperature': 0.0, 'avg_logprob': -0.16783034801483154, 'compression_ratio': 1.7267441860465116, 'no_speech_prob': 0.03104519657790661}, {'id': 265, 'seek': 270778, 'start': 2717.3, 'end': 2728.7400000000002, 'text': ' another call which will pass some other E3 that will also flow into A, right. Because at the end,', 'tokens': [50840, 1071, 818, 597, 486, 1320, 512, 661, 462, 18, 300, 486, 611, 3095, 666, 316, 11, 558, 13, 1436, 412, 264, 917, 11, 51412], 'temperature': 0.0, 'avg_logprob': -0.16783034801483154, 'compression_ratio': 1.7267441860465116, 'no_speech_prob': 0.03104519657790661}, {'id': 266, 'seek': 270778, 'start': 2728.7400000000002, 'end': 2735.78, 'text': ' I want to answer what flows into A. Is it singleton or not? Because maybe there is a call here A dot', 'tokens': [51412, 286, 528, 281, 1867, 437, 12867, 666, 316, 13, 1119, 309, 1522, 14806, 420, 406, 30, 1436, 1310, 456, 307, 257, 818, 510, 316, 5893, 51764], 'temperature': 0.0, 'avg_logprob': -0.16783034801483154, 'compression_ratio': 1.7267441860465116, 'no_speech_prob': 0.03104519657790661}, {'id': 267, 'seek': 273578, 'start': 2735.78, 'end': 2745.82, 'text': ' bar. I want to know can I inline it? I can inline it if only a single type object is flowing into A,', 'tokens': [50364, 2159, 13, 286, 528, 281, 458, 393, 286, 294, 1889, 309, 30, 286, 393, 294, 1889, 309, 498, 787, 257, 2167, 2010, 2657, 307, 13974, 666, 316, 11, 50866], 'temperature': 0.0, 'avg_logprob': -0.12486511165812864, 'compression_ratio': 1.3785714285714286, 'no_speech_prob': 0.003665917320176959}, {'id': 268, 'seek': 273578, 'start': 2745.82, 'end': 2763.38, 'text': ' right. Okay. So, if I have a call like this, I will add a one constraint like this. And what', 'tokens': [50866, 558, 13, 1033, 13, 407, 11, 498, 286, 362, 257, 818, 411, 341, 11, 286, 486, 909, 257, 472, 25534, 411, 341, 13, 400, 437, 51744], 'temperature': 0.0, 'avg_logprob': -0.12486511165812864, 'compression_ratio': 1.3785714285714286, 'no_speech_prob': 0.003665917320176959}, {'id': 269, 'seek': 276338, 'start': 2763.38, 'end': 2777.9, 'text': ' is the type of this expression? It has to be related to the written type of m, correct. So,', 'tokens': [50364, 307, 264, 2010, 295, 341, 6114, 30, 467, 575, 281, 312, 4077, 281, 264, 3720, 2010, 295, 275, 11, 3006, 13, 407, 11, 51090], 'temperature': 0.0, 'avg_logprob': -0.12912969236020688, 'compression_ratio': 1.1097560975609757, 'no_speech_prob': 0.056870054453611374}, {'id': 270, 'seek': 277790, 'start': 2777.9, 'end': 2793.38, 'text': ' I will say if C flows into E1, if E1 can be of type C, then whatever is flowing into this', 'tokens': [50364, 286, 486, 584, 498, 383, 12867, 666, 462, 16, 11, 498, 462, 16, 393, 312, 295, 2010, 383, 11, 550, 2035, 307, 13974, 666, 341, 51138], 'temperature': 0.0, 'avg_logprob': -0.1058511734008789, 'compression_ratio': 1.6120689655172413, 'no_speech_prob': 0.02259034849703312}, {'id': 271, 'seek': 277790, 'start': 2793.38, 'end': 2803.62, 'text': ' written type of E, not just B, whatever is flowing into the written type of E can flow into this.', 'tokens': [51138, 3720, 2010, 295, 462, 11, 406, 445, 363, 11, 2035, 307, 13974, 666, 264, 3720, 2010, 295, 462, 393, 3095, 666, 341, 13, 51650], 'temperature': 0.0, 'avg_logprob': -0.1058511734008789, 'compression_ratio': 1.6120689655172413, 'no_speech_prob': 0.02259034849703312}, {'id': 272, 'seek': 280362, 'start': 2803.62, 'end': 2814.18, 'text': ' And now you have to tell me the direction of this guy. Why am I saying this to be a subset', 'tokens': [50364, 400, 586, 291, 362, 281, 980, 385, 264, 3513, 295, 341, 2146, 13, 1545, 669, 286, 1566, 341, 281, 312, 257, 25993, 50892], 'temperature': 0.0, 'avg_logprob': -0.12075665709260222, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.014829166233539581}, {'id': 273, 'seek': 280362, 'start': 2814.18, 'end': 2821.58, 'text': ' of the right side and not the other way around? I am saying whatever flows into it can be part', 'tokens': [50892, 295, 264, 558, 1252, 293, 406, 264, 661, 636, 926, 30, 286, 669, 1566, 2035, 12867, 666, 309, 393, 312, 644, 51262], 'temperature': 0.0, 'avg_logprob': -0.12075665709260222, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.014829166233539581}, {'id': 274, 'seek': 280362, 'start': 2821.58, 'end': 2829.46, 'text': ' of the written type of this, not the other way around. Why? I am not even equating it. I am saying', 'tokens': [51262, 295, 264, 3720, 2010, 295, 341, 11, 406, 264, 661, 636, 926, 13, 1545, 30, 286, 669, 406, 754, 1267, 990, 309, 13, 286, 669, 1566, 51656], 'temperature': 0.0, 'avg_logprob': -0.12075665709260222, 'compression_ratio': 1.6904761904761905, 'no_speech_prob': 0.014829166233539581}, {'id': 275, 'seek': 282946, 'start': 2830.3, 'end': 2854.62, 'text': ' it is a subset. Where? Very good. First point is I can have multiple return statements. If some', 'tokens': [50406, 309, 307, 257, 25993, 13, 2305, 30, 4372, 665, 13, 2386, 935, 307, 286, 393, 362, 3866, 2736, 12363, 13, 759, 512, 51622], 'temperature': 0.0, 'avg_logprob': -0.28110540830172026, 'compression_ratio': 1.0795454545454546, 'no_speech_prob': 0.31362003087997437}, {'id': 276, 'seek': 285462, 'start': 2854.62, 'end': 2860.54, 'text': ' condition return, if some condition return, so all of those will flow into this. But let us say', 'tokens': [50364, 4188, 2736, 11, 498, 512, 4188, 2736, 11, 370, 439, 295, 729, 486, 3095, 666, 341, 13, 583, 718, 505, 584, 50660], 'temperature': 0.0, 'avg_logprob': -0.15569954274970793, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.23309893906116486}, {'id': 277, 'seek': 285462, 'start': 2860.54, 'end': 2871.42, 'text': ' there is only one return, then what? Correct. See I do not know which m will it resolve to. This', 'tokens': [50660, 456, 307, 787, 472, 2736, 11, 550, 437, 30, 12753, 13, 3008, 286, 360, 406, 458, 597, 275, 486, 309, 14151, 281, 13, 639, 51204], 'temperature': 0.0, 'avg_logprob': -0.15569954274970793, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.23309893906116486}, {'id': 278, 'seek': 285462, 'start': 2871.42, 'end': 2878.74, 'text': ' may be in class C1 or C2. I am saying if it is C1, this gets added. If C1 is present, if C2 is', 'tokens': [51204, 815, 312, 294, 1508, 383, 16, 420, 383, 17, 13, 286, 669, 1566, 498, 309, 307, 383, 16, 11, 341, 2170, 3869, 13, 759, 383, 16, 307, 1974, 11, 498, 383, 17, 307, 51570], 'temperature': 0.0, 'avg_logprob': -0.15569954274970793, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.23309893906116486}, {'id': 279, 'seek': 285462, 'start': 2878.74, 'end': 2884.22, 'text': ' present, something else will get added to the written type. Because if I write here some variable', 'tokens': [51570, 1974, 11, 746, 1646, 486, 483, 3869, 281, 264, 3720, 2010, 13, 1436, 498, 286, 2464, 510, 512, 7006, 51844], 'temperature': 0.0, 'avg_logprob': -0.15569954274970793, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.23309893906116486}, {'id': 280, 'seek': 288422, 'start': 2884.22, 'end': 2896.5, 'text': ' D equal to this expression, D will get any of those objects from class C or D or E. So pay', 'tokens': [50364, 413, 2681, 281, 341, 6114, 11, 413, 486, 483, 604, 295, 729, 6565, 490, 1508, 383, 420, 413, 420, 462, 13, 407, 1689, 50978], 'temperature': 0.0, 'avg_logprob': -0.15400909494470666, 'compression_ratio': 1.0588235294117647, 'no_speech_prob': 0.026401033625006676}, {'id': 281, 'seek': 289650, 'start': 2896.5, 'end': 2922.7, 'text': ' attention to these directions. But if the bracket is missing here. Any questions? No? So this is', 'tokens': [50364, 3202, 281, 613, 11095, 13, 583, 498, 264, 16904, 307, 5361, 510, 13, 2639, 1651, 30, 883, 30, 407, 341, 307, 51674], 'temperature': 0.0, 'avg_logprob': -0.26639204025268554, 'compression_ratio': 1.103448275862069, 'no_speech_prob': 0.041936617344617844}, {'id': 282, 'seek': 292270, 'start': 2922.7, 'end': 2937.3399999999997, 'text': ' how we want to generate constraints. So my constraint generation, we will, if you look at', 'tokens': [50364, 577, 321, 528, 281, 8460, 18491, 13, 407, 452, 25534, 5125, 11, 321, 486, 11, 498, 291, 574, 412, 51096], 'temperature': 0.0, 'avg_logprob': -0.19551238146695224, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.04811043292284012}, {'id': 283, 'seek': 292270, 'start': 2937.3399999999997, 'end': 2944.9399999999996, 'text': ' it, now the constraint generation is very simple. I have only every assignment I will deal in the', 'tokens': [51096, 309, 11, 586, 264, 25534, 5125, 307, 588, 2199, 13, 286, 362, 787, 633, 15187, 286, 486, 2028, 294, 264, 51476], 'temperature': 0.0, 'avg_logprob': -0.19551238146695224, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.04811043292284012}, {'id': 284, 'seek': 292270, 'start': 2944.9399999999996, 'end': 2952.3799999999997, 'text': ' exactly same way. I have a new allocation, assignment and function curve. I am just looking', 'tokens': [51476, 2293, 912, 636, 13, 286, 362, 257, 777, 27599, 11, 15187, 293, 2445, 7605, 13, 286, 669, 445, 1237, 51848], 'temperature': 0.0, 'avg_logprob': -0.19551238146695224, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.04811043292284012}, {'id': 285, 'seek': 295238, 'start': 2952.38, 'end': 2963.02, 'text': ' at these three. I am just looking at A, B, C. I can actually, I am not looking at the fields at', 'tokens': [50364, 412, 613, 1045, 13, 286, 669, 445, 1237, 412, 316, 11, 363, 11, 383, 13, 286, 393, 767, 11, 286, 669, 406, 1237, 412, 264, 7909, 412, 50896], 'temperature': 0.0, 'avg_logprob': -0.14460549531159578, 'compression_ratio': 1.6497175141242937, 'no_speech_prob': 0.07581236958503723}, {'id': 286, 'seek': 295238, 'start': 2963.02, 'end': 2970.54, 'text': ' this time. I load and store A dot F equal to blah and blah equal to A dot F. But they can be dealt', 'tokens': [50896, 341, 565, 13, 286, 3677, 293, 3531, 316, 5893, 479, 2681, 281, 12288, 293, 12288, 2681, 281, 316, 5893, 479, 13, 583, 436, 393, 312, 15991, 51272], 'temperature': 0.0, 'avg_logprob': -0.14460549531159578, 'compression_ratio': 1.6497175141242937, 'no_speech_prob': 0.07581236958503723}, {'id': 287, 'seek': 295238, 'start': 2970.54, 'end': 2976.54, 'text': ' with similarly. Let us only look at this part for the time being without complicating with store.', 'tokens': [51272, 365, 14138, 13, 961, 505, 787, 574, 412, 341, 644, 337, 264, 565, 885, 1553, 16060, 990, 365, 3531, 13, 51572], 'temperature': 0.0, 'avg_logprob': -0.14460549531159578, 'compression_ratio': 1.6497175141242937, 'no_speech_prob': 0.07581236958503723}, {'id': 288, 'seek': 297654, 'start': 2976.54, 'end': 2986.7799999999997, 'text': ' It does not complicate much but a bit. So we will assume that all program names, variable names', 'tokens': [50364, 467, 775, 406, 1209, 8700, 709, 457, 257, 857, 13, 407, 321, 486, 6552, 300, 439, 1461, 5288, 11, 7006, 5288, 50876], 'temperature': 0.0, 'avg_logprob': -0.18440628051757812, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.03835723176598549}, {'id': 289, 'seek': 297654, 'start': 2986.7799999999997, 'end': 2992.06, 'text': ' are different so that this X does not collide with that X. So when I say what flows into X,', 'tokens': [50876, 366, 819, 370, 300, 341, 1783, 775, 406, 49093, 365, 300, 1783, 13, 407, 562, 286, 584, 437, 12867, 666, 1783, 11, 51140], 'temperature': 0.0, 'avg_logprob': -0.18440628051757812, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.03835723176598549}, {'id': 290, 'seek': 297654, 'start': 2992.06, 'end': 3001.98, 'text': ' it is a unique name, simple. And we will use for this pointer to make it unique. See there is a', 'tokens': [51140, 309, 307, 257, 3845, 1315, 11, 2199, 13, 400, 321, 486, 764, 337, 341, 23918, 281, 652, 309, 3845, 13, 3008, 456, 307, 257, 51636], 'temperature': 0.0, 'avg_logprob': -0.18440628051757812, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.03835723176598549}, {'id': 291, 'seek': 300198, 'start': 3001.98, 'end': 3007.58, 'text': ' this pointer in class A also in class B. To make it unique, we will say that this pointer in this,', 'tokens': [50364, 341, 23918, 294, 1508, 316, 611, 294, 1508, 363, 13, 1407, 652, 309, 3845, 11, 321, 486, 584, 300, 341, 23918, 294, 341, 11, 50644], 'temperature': 0.0, 'avg_logprob': -0.12536539902558197, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.04204607754945755}, {'id': 292, 'seek': 300198, 'start': 3007.58, 'end': 3016.06, 'text': ' I will call it this A. Here I will call this B. We will generate the constraints and then at the', 'tokens': [50644, 286, 486, 818, 309, 341, 316, 13, 1692, 286, 486, 818, 341, 363, 13, 492, 486, 8460, 264, 18491, 293, 550, 412, 264, 51068], 'temperature': 0.0, 'avg_logprob': -0.12536539902558197, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.04204607754945755}, {'id': 293, 'seek': 300198, 'start': 3016.06, 'end': 3030.02, 'text': ' end I will have some set of constraints. The constraints will be either of this form, something', 'tokens': [51068, 917, 286, 486, 362, 512, 992, 295, 18491, 13, 440, 18491, 486, 312, 2139, 295, 341, 1254, 11, 746, 51766], 'temperature': 0.0, 'avg_logprob': -0.12536539902558197, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.04204607754945755}, {'id': 294, 'seek': 303002, 'start': 3030.02, 'end': 3036.2599999999998, 'text': ' belongs to blah, something is a subset or a superset or something is a conditionally subset', 'tokens': [50364, 12953, 281, 12288, 11, 746, 307, 257, 25993, 420, 257, 37906, 302, 420, 746, 307, 257, 4188, 379, 25993, 50676], 'temperature': 0.0, 'avg_logprob': -0.1208738407618563, 'compression_ratio': 1.7345679012345678, 'no_speech_prob': 0.008296230807900429}, {'id': 295, 'seek': 303002, 'start': 3036.2599999999998, 'end': 3048.66, 'text': ' or a superset. Only three types of conditions, nothing else. So this is what you get in the', 'tokens': [50676, 420, 257, 37906, 302, 13, 5686, 1045, 3467, 295, 4487, 11, 1825, 1646, 13, 407, 341, 307, 437, 291, 483, 294, 264, 51296], 'temperature': 0.0, 'avg_logprob': -0.1208738407618563, 'compression_ratio': 1.7345679012345678, 'no_speech_prob': 0.008296230807900429}, {'id': 296, 'seek': 303002, 'start': 3048.66, 'end': 3053.94, 'text': ' beginning. Just looking at the code itself, when you do new, when you look at the new statements,', 'tokens': [51296, 2863, 13, 1449, 1237, 412, 264, 3089, 2564, 11, 562, 291, 360, 777, 11, 562, 291, 574, 412, 264, 777, 12363, 11, 51560], 'temperature': 0.0, 'avg_logprob': -0.1208738407618563, 'compression_ratio': 1.7345679012345678, 'no_speech_prob': 0.008296230807900429}, {'id': 297, 'seek': 305394, 'start': 3054.9, 'end': 3060.26, 'text': ' you will get these elements, belongs to constraints. During when you process the', 'tokens': [50412, 291, 486, 483, 613, 4959, 11, 12953, 281, 18491, 13, 6842, 562, 291, 1399, 264, 50680], 'temperature': 0.0, 'avg_logprob': -0.19132585525512696, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.01096612773835659}, {'id': 298, 'seek': 305394, 'start': 3062.1, 'end': 3067.46, 'text': ' assignments, you will do this propagation type of constraints and then you will have', 'tokens': [50772, 22546, 11, 291, 486, 360, 341, 38377, 2010, 295, 18491, 293, 550, 291, 486, 362, 51040], 'temperature': 0.0, 'avg_logprob': -0.19132585525512696, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.01096612773835659}, {'id': 299, 'seek': 305394, 'start': 3067.46, 'end': 3075.2200000000003, 'text': ' conditionals looking at the calls. And if you have these constraints, you will see that we can get a', 'tokens': [51040, 4188, 1124, 1237, 412, 264, 5498, 13, 400, 498, 291, 362, 613, 18491, 11, 291, 486, 536, 300, 321, 393, 483, 257, 51428], 'temperature': 0.0, 'avg_logprob': -0.19132585525512696, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.01096612773835659}, {'id': 300, 'seek': 307522, 'start': 3075.22, 'end': 3083.7, 'text': ' minimum, minimal solution guaranteed. We will see that. So what are my constraints? Every time I', 'tokens': [50364, 7285, 11, 13206, 3827, 18031, 13, 492, 486, 536, 300, 13, 407, 437, 366, 452, 18491, 30, 2048, 565, 286, 50788], 'temperature': 0.0, 'avg_logprob': -0.13989202741166235, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.044616036117076874}, {'id': 301, 'seek': 307522, 'start': 3083.7, 'end': 3090.3399999999997, 'text': ' have an assignment statement, I will say whatever flows into expression will also flow into ID.', 'tokens': [50788, 362, 364, 15187, 5629, 11, 286, 486, 584, 2035, 12867, 666, 6114, 486, 611, 3095, 666, 7348, 13, 51120], 'temperature': 0.0, 'avg_logprob': -0.13989202741166235, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.044616036117076874}, {'id': 302, 'seek': 307522, 'start': 3094.02, 'end': 3102.5, 'text': ' What about this? Here I have this variable, this A, here I have this B. What flows into this A?', 'tokens': [51304, 708, 466, 341, 30, 1692, 286, 362, 341, 7006, 11, 341, 316, 11, 510, 286, 362, 341, 363, 13, 708, 12867, 666, 341, 316, 30, 51728], 'temperature': 0.0, 'avg_logprob': -0.13989202741166235, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.044616036117076874}, {'id': 303, 'seek': 310250, 'start': 3102.5, 'end': 3114.42, 'text': ' What can be the type of this A? Similarly, this C will have C. Whenever you have a new C,', 'tokens': [50364, 708, 393, 312, 264, 2010, 295, 341, 316, 30, 13157, 11, 341, 383, 486, 362, 383, 13, 14159, 291, 362, 257, 777, 383, 11, 50960], 'temperature': 0.0, 'avg_logprob': -0.1195332474178738, 'compression_ratio': 1.502824858757062, 'no_speech_prob': 0.0002406221756245941}, {'id': 304, 'seek': 310250, 'start': 3115.94, 'end': 3123.06, 'text': ' C gets into it. If you have a method call, which is also called as a message send', 'tokens': [51036, 383, 2170, 666, 309, 13, 759, 291, 362, 257, 3170, 818, 11, 597, 307, 611, 1219, 382, 257, 3636, 2845, 51392], 'temperature': 0.0, 'avg_logprob': -0.1195332474178738, 'compression_ratio': 1.502824858757062, 'no_speech_prob': 0.0002406221756245941}, {'id': 305, 'seek': 310250, 'start': 3124.34, 'end': 3131.54, 'text': ' of some receiver dot method name, we will look at all my programs and see where this method is', 'tokens': [51456, 295, 512, 20086, 5893, 3170, 1315, 11, 321, 486, 574, 412, 439, 452, 4268, 293, 536, 689, 341, 3170, 307, 51816], 'temperature': 0.0, 'avg_logprob': -0.1195332474178738, 'compression_ratio': 1.502824858757062, 'no_speech_prob': 0.0002406221756245941}, {'id': 306, 'seek': 313154, 'start': 3131.54, 'end': 3141.86, 'text': ' present. And then I will generate the constraints of the form. I will find out these methods and', 'tokens': [50364, 1974, 13, 400, 550, 286, 486, 8460, 264, 18491, 295, 264, 1254, 13, 286, 486, 915, 484, 613, 7150, 293, 50880], 'temperature': 0.0, 'avg_logprob': -0.12198644214206272, 'compression_ratio': 1.5354330708661417, 'no_speech_prob': 0.00020963462884537876}, {'id': 307, 'seek': 313154, 'start': 3141.86, 'end': 3156.2599999999998, 'text': ' then generate constraints. For this ID1, the type of EXP1 will flow. For this IDN, EXPN will flow.', 'tokens': [50880, 550, 8460, 18491, 13, 1171, 341, 7348, 16, 11, 264, 2010, 295, 16385, 47, 16, 486, 3095, 13, 1171, 341, 7348, 45, 11, 16385, 15466, 486, 3095, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.12198644214206272, 'compression_ratio': 1.5354330708661417, 'no_speech_prob': 0.00020963462884537876}, {'id': 308, 'seek': 315626, 'start': 3156.26, 'end': 3168.26, 'text': ' Right? This will flow only if C, where this method is present, is present in the type of EXP.', 'tokens': [50364, 1779, 30, 639, 486, 3095, 787, 498, 383, 11, 689, 341, 3170, 307, 1974, 11, 307, 1974, 294, 264, 2010, 295, 16385, 47, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.27885398497948277, 'compression_ratio': 1.330935251798561, 'no_speech_prob': 0.003867414314299822}, {'id': 309, 'seek': 315626, 'start': 3170.9, 'end': 3181.2200000000003, 'text': ' Right? Okay? And I will also generate the further written type. Since this is written EXP0,', 'tokens': [51096, 1779, 30, 1033, 30, 400, 286, 486, 611, 8460, 264, 3052, 3720, 2010, 13, 4162, 341, 307, 3720, 16385, 47, 15, 11, 51612], 'temperature': 0.0, 'avg_logprob': -0.27885398497948277, 'compression_ratio': 1.330935251798561, 'no_speech_prob': 0.003867414314299822}, {'id': 310, 'seek': 318122, 'start': 3181.22, 'end': 3188.8199999999997, 'text': ' I will say type of EXP0 is flowing into this whole expression. Okay? Now,', 'tokens': [50364, 286, 486, 584, 2010, 295, 16385, 47, 15, 307, 13974, 666, 341, 1379, 6114, 13, 1033, 30, 823, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.11185910045236781, 'compression_ratio': 1.5146198830409356, 'no_speech_prob': 0.0026289073284715414}, {'id': 311, 'seek': 318122, 'start': 3188.8199999999997, 'end': 3191.06, 'text': ' once I have the constraints, I am saying we can solve them.', 'tokens': [50744, 1564, 286, 362, 264, 18491, 11, 286, 669, 1566, 321, 393, 5039, 552, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.11185910045236781, 'compression_ratio': 1.5146198830409356, 'no_speech_prob': 0.0026289073284715414}, {'id': 312, 'seek': 318122, 'start': 3194.66, 'end': 3199.22, 'text': ' We will see with an example soon. For the same example, let us generate the constraints.', 'tokens': [51036, 492, 486, 536, 365, 364, 1365, 2321, 13, 1171, 264, 912, 1365, 11, 718, 505, 8460, 264, 18491, 13, 51264], 'temperature': 0.0, 'avg_logprob': -0.11185910045236781, 'compression_ratio': 1.5146198830409356, 'no_speech_prob': 0.0026289073284715414}, {'id': 313, 'seek': 318122, 'start': 3200.58, 'end': 3202.02, 'text': ' What are the belongs to constraints?', 'tokens': [51332, 708, 366, 264, 12953, 281, 18491, 30, 51404], 'temperature': 0.0, 'avg_logprob': -0.11185910045236781, 'compression_ratio': 1.5146198830409356, 'no_speech_prob': 0.0026289073284715414}, {'id': 314, 'seek': 320202, 'start': 3202.02, 'end': 3218.66, 'text': ' So, I will have A belongs to this nu A, B goes to nu B and Q goes to nu Q and S goes to', 'tokens': [50364, 407, 11, 286, 486, 362, 316, 12953, 281, 341, 3822, 316, 11, 363, 1709, 281, 3822, 363, 293, 1249, 1709, 281, 3822, 1249, 293, 318, 1709, 281, 51196], 'temperature': 0.0, 'avg_logprob': -0.16375536485151812, 'compression_ratio': 1.384, 'no_speech_prob': 0.008312567137181759}, {'id': 315, 'seek': 320202, 'start': 3219.54, 'end': 3228.9, 'text': ' nu S. That is it. So, that is easy to generate the starting constraints. Right? Next,', 'tokens': [51240, 3822, 318, 13, 663, 307, 309, 13, 407, 11, 300, 307, 1858, 281, 8460, 264, 2891, 18491, 13, 1779, 30, 3087, 11, 51708], 'temperature': 0.0, 'avg_logprob': -0.16375536485151812, 'compression_ratio': 1.384, 'no_speech_prob': 0.008312567137181759}, {'id': 316, 'seek': 322890, 'start': 3229.3, 'end': 3236.6600000000003, 'text': ' let us process the assignment statements. So, what constraints will I get by processing the first', 'tokens': [50384, 718, 505, 1399, 264, 15187, 12363, 13, 407, 11, 437, 18491, 486, 286, 483, 538, 9007, 264, 700, 50752], 'temperature': 0.0, 'avg_logprob': -0.22289569237652948, 'compression_ratio': 1.93006993006993, 'no_speech_prob': 0.001429842785000801}, {'id': 317, 'seek': 322890, 'start': 3237.86, 'end': 3244.7400000000002, 'text': ' X equal to nu A? I will say whatever is flowing into nu A will flow into X like this.', 'tokens': [50812, 1783, 2681, 281, 3822, 316, 30, 286, 486, 584, 2035, 307, 13974, 666, 3822, 316, 486, 3095, 666, 1783, 411, 341, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.22289569237652948, 'compression_ratio': 1.93006993006993, 'no_speech_prob': 0.001429842785000801}, {'id': 318, 'seek': 322890, 'start': 3246.9, 'end': 3253.14, 'text': ' Whatever is flowing into nu A will flow into X. Whatever is flowing into nu B will flow into', 'tokens': [51264, 8541, 307, 13974, 666, 3822, 316, 486, 3095, 666, 1783, 13, 8541, 307, 13974, 666, 3822, 363, 486, 3095, 666, 51576], 'temperature': 0.0, 'avg_logprob': -0.22289569237652948, 'compression_ratio': 1.93006993006993, 'no_speech_prob': 0.001429842785000801}, {'id': 319, 'seek': 325314, 'start': 3253.14, 'end': 3260.1, 'text': ' nu B will flow into Y. There are only two assignment statements. What are the condition', 'tokens': [50364, 3822, 363, 486, 3095, 666, 398, 13, 821, 366, 787, 732, 15187, 12363, 13, 708, 366, 264, 4188, 50712], 'temperature': 0.0, 'avg_logprob': -0.13760103306300203, 'compression_ratio': 1.7171052631578947, 'no_speech_prob': 0.0022616907954216003}, {'id': 320, 'seek': 325314, 'start': 3260.1, 'end': 3267.62, 'text': ' statements I have? Calls I have. I have a call here X dot M, Y dot M. I have a call', 'tokens': [50712, 12363, 286, 362, 30, 7807, 82, 286, 362, 13, 286, 362, 257, 818, 510, 1783, 5893, 376, 11, 398, 5893, 376, 13, 286, 362, 257, 818, 51088], 'temperature': 0.0, 'avg_logprob': -0.13760103306300203, 'compression_ratio': 1.7171052631578947, 'no_speech_prob': 0.0022616907954216003}, {'id': 321, 'seek': 325314, 'start': 3269.3799999999997, 'end': 3276.98, 'text': ' R dot P. Three calls. For each call, I will have conditional statements. What conditional', 'tokens': [51176, 497, 5893, 430, 13, 6244, 5498, 13, 1171, 1184, 818, 11, 286, 486, 362, 27708, 12363, 13, 708, 27708, 51556], 'temperature': 0.0, 'avg_logprob': -0.13760103306300203, 'compression_ratio': 1.7171052631578947, 'no_speech_prob': 0.0022616907954216003}, {'id': 322, 'seek': 327698, 'start': 3276.98, 'end': 3286.34, 'text': ' statement I will have? I will say, see M is present in A and B. If A flows into X,', 'tokens': [50364, 5629, 286, 486, 362, 30, 286, 486, 584, 11, 536, 376, 307, 1974, 294, 316, 293, 363, 13, 759, 316, 12867, 666, 1783, 11, 50832], 'temperature': 0.0, 'avg_logprob': -0.1395797989585183, 'compression_ratio': 1.487603305785124, 'no_speech_prob': 0.0027205231599509716}, {'id': 323, 'seek': 327698, 'start': 3289.06, 'end': 3298.98, 'text': ' then this nu Q whatever is flowing in, that will flow into arg. If A flows into X, nu Q will flow', 'tokens': [50968, 550, 341, 3822, 1249, 2035, 307, 13974, 294, 11, 300, 486, 3095, 666, 3882, 13, 759, 316, 12867, 666, 1783, 11, 3822, 1249, 486, 3095, 51464], 'temperature': 0.0, 'avg_logprob': -0.1395797989585183, 'compression_ratio': 1.487603305785124, 'no_speech_prob': 0.0027205231599509716}, {'id': 324, 'seek': 329898, 'start': 3298.98, 'end': 3309.86, 'text': ' into arg. If B flows into X, then nu Q will flow into B dot arg. Similarly, if A flows into Y,', 'tokens': [50364, 666, 3882, 13, 759, 363, 12867, 666, 1783, 11, 550, 3822, 1249, 486, 3095, 666, 363, 5893, 3882, 13, 13157, 11, 498, 316, 12867, 666, 398, 11, 50908], 'temperature': 0.0, 'avg_logprob': -0.06628830554121631, 'compression_ratio': 1.7358490566037736, 'no_speech_prob': 0.0030561608728021383}, {'id': 325, 'seek': 329898, 'start': 3310.58, 'end': 3323.86, 'text': ' nu S will flow into arg. If B flows into Y, nu S will flow into this arg. So far so good?', 'tokens': [50944, 3822, 318, 486, 3095, 666, 3882, 13, 759, 363, 12867, 666, 398, 11, 3822, 318, 486, 3095, 666, 341, 3882, 13, 407, 1400, 370, 665, 30, 51608], 'temperature': 0.0, 'avg_logprob': -0.06628830554121631, 'compression_ratio': 1.7358490566037736, 'no_speech_prob': 0.0030561608728021383}, {'id': 326, 'seek': 332386, 'start': 3324.5, 'end': 3337.3, 'text': ' Okay. Once I have these conditions, solving them is pretty easy. I will, it is as if I initialize', 'tokens': [50396, 1033, 13, 3443, 286, 362, 613, 4487, 11, 12606, 552, 307, 1238, 1858, 13, 286, 486, 11, 309, 307, 382, 498, 286, 5883, 1125, 51036], 'temperature': 0.0, 'avg_logprob': -0.15094380696614584, 'compression_ratio': 1.6551724137931034, 'no_speech_prob': 0.009115954861044884}, {'id': 327, 'seek': 332386, 'start': 3337.3, 'end': 3343.6200000000003, 'text': ' this to this and keep on pushing it. And while pushing, once in a while I will check these', 'tokens': [51036, 341, 281, 341, 293, 1066, 322, 7380, 309, 13, 400, 1339, 7380, 11, 1564, 294, 257, 1339, 286, 486, 1520, 613, 51352], 'temperature': 0.0, 'avg_logprob': -0.15094380696614584, 'compression_ratio': 1.6551724137931034, 'no_speech_prob': 0.009115954861044884}, {'id': 328, 'seek': 332386, 'start': 3343.6200000000003, 'end': 3351.7000000000003, 'text': ' conditions. If this condition is true, I will make these the subset constraints. See, if I know the', 'tokens': [51352, 4487, 13, 759, 341, 4188, 307, 2074, 11, 286, 486, 652, 613, 264, 25993, 18491, 13, 3008, 11, 498, 286, 458, 264, 51756], 'temperature': 0.0, 'avg_logprob': -0.15094380696614584, 'compression_ratio': 1.6551724137931034, 'no_speech_prob': 0.009115954861044884}, {'id': 329, 'seek': 335170, 'start': 3351.7, 'end': 3357.3799999999997, 'text': ' condition is true, then I can add this constraint. The constraints can add. So, we will see that.', 'tokens': [50364, 4188, 307, 2074, 11, 550, 286, 393, 909, 341, 25534, 13, 440, 18491, 393, 909, 13, 407, 11, 321, 486, 536, 300, 13, 50648], 'temperature': 0.0, 'avg_logprob': -0.11692663741438356, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.000676959112752229}, {'id': 330, 'seek': 335170, 'start': 3359.8599999999997, 'end': 3365.06, 'text': ' So, we will take one more example for constraint generation before we solve them.', 'tokens': [50772, 407, 11, 321, 486, 747, 472, 544, 1365, 337, 25534, 5125, 949, 321, 5039, 552, 13, 51032], 'temperature': 0.0, 'avg_logprob': -0.11692663741438356, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.000676959112752229}, {'id': 331, 'seek': 335170, 'start': 3367.14, 'end': 3378.02, 'text': ' A implements some interface I. X is nu D and here again B implements I. Here I have a method M.', 'tokens': [51136, 316, 704, 17988, 512, 9226, 286, 13, 1783, 307, 3822, 413, 293, 510, 797, 363, 704, 17988, 286, 13, 1692, 286, 362, 257, 3170, 376, 13, 51680], 'temperature': 0.0, 'avg_logprob': -0.11692663741438356, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.000676959112752229}, {'id': 332, 'seek': 337802, 'start': 3378.02, 'end': 3388.2599999999998, 'text': ' Here also I have method M and I am calling nu A dot M dot M. Look at the constraints I may generate.', 'tokens': [50364, 1692, 611, 286, 362, 3170, 376, 293, 286, 669, 5141, 3822, 316, 5893, 376, 5893, 376, 13, 2053, 412, 264, 18491, 286, 815, 8460, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.16295550141153456, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.002115282230079174}, {'id': 333, 'seek': 337802, 'start': 3389.78, 'end': 3396.2599999999998, 'text': ' For this, I will have, why do not we do one thing? For this, why do not we generate the constraints?', 'tokens': [50952, 1171, 341, 11, 286, 486, 362, 11, 983, 360, 406, 321, 360, 472, 551, 30, 1171, 341, 11, 983, 360, 406, 321, 8460, 264, 18491, 30, 51276], 'temperature': 0.0, 'avg_logprob': -0.16295550141153456, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.002115282230079174}, {'id': 334, 'seek': 337802, 'start': 3396.2599999999998, 'end': 3400.2599999999998, 'text': ' That will also help us wake up. I see some of you are having bit of a trouble.', 'tokens': [51276, 663, 486, 611, 854, 505, 6634, 493, 13, 286, 536, 512, 295, 291, 366, 1419, 857, 295, 257, 5253, 13, 51476], 'temperature': 0.0, 'avg_logprob': -0.16295550141153456, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.002115282230079174}, {'id': 335, 'seek': 340026, 'start': 3401.0600000000004, 'end': 3404.5800000000004, 'text': ' Right. So, we have three types of constraints. What are those?', 'tokens': [50404, 1779, 13, 407, 11, 321, 362, 1045, 3467, 295, 18491, 13, 708, 366, 729, 30, 50580], 'temperature': 0.0, 'avg_logprob': -0.1731913685798645, 'compression_ratio': 1.434782608695652, 'no_speech_prob': 0.08495939522981644}, {'id': 336, 'seek': 340026, 'start': 3405.86, 'end': 3411.38, 'text': ' Belongs to constraints, subset constraints that you get from assignment and method calls.', 'tokens': [50644, 6248, 42478, 281, 18491, 11, 25993, 18491, 300, 291, 483, 490, 15187, 293, 3170, 5498, 13, 50920], 'temperature': 0.0, 'avg_logprob': -0.1731913685798645, 'compression_ratio': 1.434782608695652, 'no_speech_prob': 0.08495939522981644}, {'id': 337, 'seek': 340026, 'start': 3412.82, 'end': 3426.5, 'text': ' Right. Let us write the constraints for this.', 'tokens': [50992, 1779, 13, 961, 505, 2464, 264, 18491, 337, 341, 13, 51676], 'temperature': 0.0, 'avg_logprob': -0.1731913685798645, 'compression_ratio': 1.434782608695652, 'no_speech_prob': 0.08495939522981644}, {'id': 338, 'seek': 343026, 'start': 3430.9, 'end': 3443.78, 'text': ' So, three types of constraints.', 'tokens': [50396, 407, 11, 1045, 3467, 295, 18491, 13, 51040], 'temperature': 0.0, 'avg_logprob': -0.17687493562698364, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.0581638365983963}, {'id': 339, 'seek': 343026, 'start': 3450.1000000000004, 'end': 3453.94, 'text': ' First type of constraints is belongs to constraints. So, can we write the belongs to constraints?', 'tokens': [51356, 2386, 2010, 295, 18491, 307, 12953, 281, 18491, 13, 407, 11, 393, 321, 2464, 264, 12953, 281, 18491, 30, 51548], 'temperature': 0.0, 'avg_logprob': -0.17687493562698364, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.0581638365983963}, {'id': 340, 'seek': 345394, 'start': 3454.1, 'end': 3478.1, 'text': ' What are those? D belongs to nu D, then A belongs to nu A, then B belongs to nu B and to nu C.', 'tokens': [50372, 708, 366, 729, 30, 413, 12953, 281, 3822, 413, 11, 550, 316, 12953, 281, 3822, 316, 11, 550, 363, 12953, 281, 3822, 363, 293, 281, 3822, 383, 13, 51572], 'temperature': 0.0, 'avg_logprob': -0.2672066390514374, 'compression_ratio': 1.46875, 'no_speech_prob': 0.06930569559335709}, {'id': 341, 'seek': 347810, 'start': 3478.1, 'end': 3480.5, 'text': ' Write those.', 'tokens': [50364, 23499, 729, 13, 50484], 'temperature': 0.0, 'avg_logprob': -0.35222136974334717, 'compression_ratio': 1.134020618556701, 'no_speech_prob': 0.025043414905667305}, {'id': 342, 'seek': 347810, 'start': 3497.94, 'end': 3500.42, 'text': ' Now, do we have an assignment statement anywhere?', 'tokens': [51356, 823, 11, 360, 321, 362, 364, 15187, 5629, 4992, 30, 51480], 'temperature': 0.0, 'avg_logprob': -0.35222136974334717, 'compression_ratio': 1.134020618556701, 'no_speech_prob': 0.025043414905667305}, {'id': 343, 'seek': 347810, 'start': 3501.7, 'end': 3503.86, 'text': ' Yes. So, what is the subset constraint we have?', 'tokens': [51544, 1079, 13, 407, 11, 437, 307, 264, 25993, 25534, 321, 362, 30, 51652], 'temperature': 0.0, 'avg_logprob': -0.35222136974334717, 'compression_ratio': 1.134020618556701, 'no_speech_prob': 0.025043414905667305}, {'id': 344, 'seek': 350810, 'start': 3508.1, 'end': 3515.2999999999997, 'text': ' This is some left hand side equal to right hand side. Whatever flows into the right hand', 'tokens': [50364, 639, 307, 512, 1411, 1011, 1252, 2681, 281, 558, 1011, 1252, 13, 8541, 12867, 666, 264, 558, 1011, 50724], 'temperature': 0.0, 'avg_logprob': -0.15268805719191028, 'compression_ratio': 1.7372262773722629, 'no_speech_prob': 0.0007632633787579834}, {'id': 345, 'seek': 350810, 'start': 3515.2999999999997, 'end': 3523.38, 'text': ' side will flow into the left hand side. So, I will write it as subset constraint. What will it be?', 'tokens': [50724, 1252, 486, 3095, 666, 264, 1411, 1011, 1252, 13, 407, 11, 286, 486, 2464, 309, 382, 25993, 25534, 13, 708, 486, 309, 312, 30, 51128], 'temperature': 0.0, 'avg_logprob': -0.15268805719191028, 'compression_ratio': 1.7372262773722629, 'no_speech_prob': 0.0007632633787579834}, {'id': 346, 'seek': 350810, 'start': 3524.58, 'end': 3531.7799999999997, 'text': ' Whatever is flowing into D, nu D will flow into X.', 'tokens': [51188, 8541, 307, 13974, 666, 413, 11, 3822, 413, 486, 3095, 666, 1783, 13, 51548], 'temperature': 0.0, 'avg_logprob': -0.15268805719191028, 'compression_ratio': 1.7372262773722629, 'no_speech_prob': 0.0007632633787579834}, {'id': 347, 'seek': 353810, 'start': 3538.1, 'end': 3548.1, 'text': ' Any other assignment? No. Now, let us generate conditional statements.', 'tokens': [50364, 2639, 661, 15187, 30, 883, 13, 823, 11, 718, 505, 8460, 27708, 12363, 13, 50864], 'temperature': 0.0, 'avg_logprob': -0.17051247546547338, 'compression_ratio': 1.1965811965811965, 'no_speech_prob': 0.006587332580238581}, {'id': 348, 'seek': 353810, 'start': 3550.9, 'end': 3555.62, 'text': ' So, I have multiple method calls here. First method call is E1 dot m,', 'tokens': [51004, 407, 11, 286, 362, 3866, 3170, 5498, 510, 13, 2386, 3170, 818, 307, 462, 16, 5893, 275, 11, 51240], 'temperature': 0.0, 'avg_logprob': -0.17051247546547338, 'compression_ratio': 1.1965811965811965, 'no_speech_prob': 0.006587332580238581}, {'id': 349, 'seek': 355562, 'start': 3555.62, 'end': 3569.14, 'text': ' then dot m, one more m. Let us handle the first m first. This is E1 dot m. So, what conditions', 'tokens': [50364, 550, 5893, 275, 11, 472, 544, 275, 13, 961, 505, 4813, 264, 700, 275, 700, 13, 639, 307, 462, 16, 5893, 275, 13, 407, 11, 437, 4487, 51040], 'temperature': 0.0, 'avg_logprob': -0.16792147735069538, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.002999328775331378}, {'id': 350, 'seek': 355562, 'start': 3569.14, 'end': 3579.46, 'text': ' can I write? Where is m defined? In which class? A and B both. So, what will the conditions be?', 'tokens': [51040, 393, 286, 2464, 30, 2305, 307, 275, 7642, 30, 682, 597, 1508, 30, 316, 293, 363, 1293, 13, 407, 11, 437, 486, 264, 4487, 312, 30, 51556], 'temperature': 0.0, 'avg_logprob': -0.16792147735069538, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.002999328775331378}, {'id': 351, 'seek': 358562, 'start': 3586.3399999999997, 'end': 3612.02, 'text': ' If A flows into nu A, I will write A is in nu A implies what? If A flows into nu A,', 'tokens': [50400, 759, 316, 12867, 666, 3822, 316, 11, 286, 486, 2464, 316, 307, 294, 3822, 316, 18779, 437, 30, 759, 316, 12867, 666, 3822, 316, 11, 51684], 'temperature': 0.0, 'avg_logprob': -0.2069345342701879, 'compression_ratio': 1.2388059701492538, 'no_speech_prob': 0.8349415063858032}, {'id': 352, 'seek': 361202, 'start': 3612.02, 'end': 3631.38, 'text': ' then whatever is flowing into this guy will flow into A dot F. Whatever is flowing here will flow', 'tokens': [50364, 550, 2035, 307, 13974, 666, 341, 2146, 486, 3095, 666, 316, 5893, 479, 13, 8541, 307, 13974, 510, 486, 3095, 51332], 'temperature': 0.0, 'avg_logprob': -0.22888133923212686, 'compression_ratio': 1.3472222222222223, 'no_speech_prob': 0.018542544916272163}, {'id': 353, 'seek': 363138, 'start': 3631.38, 'end': 3651.78, 'text': ' into A dot F. Any doubts? Good. Fine. What am I saying? Whatever flows into', 'tokens': [50364, 666, 316, 5893, 479, 13, 2639, 22618, 30, 2205, 13, 12024, 13, 708, 669, 286, 1566, 30, 8541, 12867, 666, 51384], 'temperature': 0.0, 'avg_logprob': -0.23025588194529215, 'compression_ratio': 0.974025974025974, 'no_speech_prob': 0.0969957485795021}, {'id': 354, 'seek': 365178, 'start': 3652.5800000000004, 'end': 3668.1800000000003, 'text': ' A dot F, nu B will flow into A dot F. And whatever flows into F dot m dot X will flow into', 'tokens': [50404, 316, 5893, 479, 11, 3822, 363, 486, 3095, 666, 316, 5893, 479, 13, 400, 2035, 12867, 666, 479, 5893, 275, 5893, 1783, 486, 3095, 666, 51184], 'temperature': 0.0, 'avg_logprob': -0.3997853048916521, 'compression_ratio': 1.3432835820895523, 'no_speech_prob': 0.20928655564785004}, {'id': 355, 'seek': 366818, 'start': 3668.66, 'end': 3684.74, 'text': ' A dot F. Correct? So, for this argument flows into this, this written expressions,', 'tokens': [50388, 316, 5893, 479, 13, 12753, 30, 407, 11, 337, 341, 6770, 12867, 666, 341, 11, 341, 3720, 15277, 11, 51192], 'temperature': 0.0, 'avg_logprob': -0.21261650908227062, 'compression_ratio': 1.3458646616541354, 'no_speech_prob': 0.009078562259674072}, {'id': 356, 'seek': 366818, 'start': 3684.74, 'end': 3697.94, 'text': ' whatever the types, they will flow into this guy. Right? I mean this F. I just named it A dot F.', 'tokens': [51192, 2035, 264, 3467, 11, 436, 486, 3095, 666, 341, 2146, 13, 1779, 30, 286, 914, 341, 479, 13, 286, 445, 4926, 309, 316, 5893, 479, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.21261650908227062, 'compression_ratio': 1.3458646616541354, 'no_speech_prob': 0.009078562259674072}, {'id': 357, 'seek': 369794, 'start': 3697.94, 'end': 3703.7000000000003, 'text': ' So, that it is we do not conflict with this. You can just since there is only one F,', 'tokens': [50364, 407, 11, 300, 309, 307, 321, 360, 406, 6596, 365, 341, 13, 509, 393, 445, 1670, 456, 307, 787, 472, 479, 11, 50652], 'temperature': 0.0, 'avg_logprob': -0.1891602220989409, 'compression_ratio': 1.5271739130434783, 'no_speech_prob': 0.0013450292171910405}, {'id': 358, 'seek': 369794, 'start': 3703.7000000000003, 'end': 3712.18, 'text': ' just call it as F. That is F. This is G. So, we are in business. But if whatever is then just make', 'tokens': [50652, 445, 818, 309, 382, 479, 13, 663, 307, 479, 13, 639, 307, 460, 13, 407, 11, 321, 366, 294, 1606, 13, 583, 498, 2035, 307, 550, 445, 652, 51076], 'temperature': 0.0, 'avg_logprob': -0.1891602220989409, 'compression_ratio': 1.5271739130434783, 'no_speech_prob': 0.0013450292171910405}, {'id': 359, 'seek': 369794, 'start': 3712.18, 'end': 3723.06, 'text': ' it A dot F P dot G. Just we need to make sure that names are not conflicting. Now, let us look at', 'tokens': [51076, 309, 316, 5893, 479, 430, 5893, 460, 13, 1449, 321, 643, 281, 652, 988, 300, 5288, 366, 406, 43784, 13, 823, 11, 718, 505, 574, 412, 51620], 'temperature': 0.0, 'avg_logprob': -0.1891602220989409, 'compression_ratio': 1.5271739130434783, 'no_speech_prob': 0.0013450292171910405}, {'id': 360, 'seek': 372306, 'start': 3724.02, 'end': 3730.5, 'text': ' this whole thing as one expression. Let us look at this whole thing, this whole nu A,', 'tokens': [50412, 341, 1379, 551, 382, 472, 6114, 13, 961, 505, 574, 412, 341, 1379, 551, 11, 341, 1379, 3822, 316, 11, 50736], 'temperature': 0.0, 'avg_logprob': -0.11629344456231416, 'compression_ratio': 1.9307692307692308, 'no_speech_prob': 0.0007781364256516099}, {'id': 361, 'seek': 372306, 'start': 3731.14, 'end': 3739.94, 'text': ' this thing as one expression. So, this expression dot m, this expression dot m.', 'tokens': [50768, 341, 551, 382, 472, 6114, 13, 407, 11, 341, 6114, 5893, 275, 11, 341, 6114, 5893, 275, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.11629344456231416, 'compression_ratio': 1.9307692307692308, 'no_speech_prob': 0.0007781364256516099}, {'id': 362, 'seek': 372306, 'start': 3741.7, 'end': 3750.5, 'text': ' So, what will I do? What condition will it be? If A belongs to this whole thing, then', 'tokens': [51296, 407, 11, 437, 486, 286, 360, 30, 708, 4188, 486, 309, 312, 30, 759, 316, 12953, 281, 341, 1379, 551, 11, 550, 51736], 'temperature': 0.0, 'avg_logprob': -0.11629344456231416, 'compression_ratio': 1.9307692307692308, 'no_speech_prob': 0.0007781364256516099}, {'id': 363, 'seek': 375306, 'start': 3753.7, 'end': 3768.1, 'text': ' nu C will flow into F. And if A belongs to this whole thing, then F dot m dot X,', 'tokens': [50396, 3822, 383, 486, 3095, 666, 479, 13, 400, 498, 316, 12953, 281, 341, 1379, 551, 11, 550, 479, 5893, 275, 5893, 1783, 11, 51116], 'temperature': 0.0, 'avg_logprob': -0.09935065110524495, 'compression_ratio': 1.3385826771653544, 'no_speech_prob': 0.001781031722202897}, {'id': 364, 'seek': 375306, 'start': 3768.1, 'end': 3775.2999999999997, 'text': ' whatever the flow set will flow into this expression. Similarly, for B what will I write?', 'tokens': [51116, 2035, 264, 3095, 992, 486, 3095, 666, 341, 6114, 13, 13157, 11, 337, 363, 437, 486, 286, 2464, 30, 51476], 'temperature': 0.0, 'avg_logprob': -0.09935065110524495, 'compression_ratio': 1.3385826771653544, 'no_speech_prob': 0.001781031722202897}, {'id': 365, 'seek': 377530, 'start': 3775.3, 'end': 3791.78, 'text': ' If B belongs to nu A, then what is the name? No, not the pink, the magenta color shirt.', 'tokens': [50364, 759, 363, 12953, 281, 3822, 316, 11, 550, 437, 307, 264, 1315, 30, 883, 11, 406, 264, 7022, 11, 264, 2258, 8938, 2017, 8336, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.40039368333487674, 'compression_ratio': 1.0609756097560976, 'no_speech_prob': 0.1491391509771347}, {'id': 366, 'seek': 379178, 'start': 3791.86, 'end': 3810.9, 'text': ' Yeah. So, if B flows to nu A, then which method will it be? Which method will it be if B flows', 'tokens': [50368, 865, 13, 407, 11, 498, 363, 12867, 281, 3822, 316, 11, 550, 597, 3170, 486, 309, 312, 30, 3013, 3170, 486, 309, 312, 498, 363, 12867, 51320], 'temperature': 0.0, 'avg_logprob': -0.29086125691731773, 'compression_ratio': 1.2876712328767124, 'no_speech_prob': 0.005699697881937027}, {'id': 367, 'seek': 381090, 'start': 3810.9, 'end': 3821.7000000000003, 'text': " to this expression? Which m will it be? A's m or B's m? B's m. B's m. Very good. So, what I am", 'tokens': [50364, 281, 341, 6114, 30, 3013, 275, 486, 309, 312, 30, 316, 311, 275, 420, 363, 311, 275, 30, 363, 311, 275, 13, 363, 311, 275, 13, 4372, 665, 13, 407, 11, 437, 286, 669, 50904], 'temperature': 0.0, 'avg_logprob': -0.1521577394925631, 'compression_ratio': 1.391304347826087, 'no_speech_prob': 0.013800933957099915}, {'id': 368, 'seek': 381090, 'start': 3821.7000000000003, 'end': 3829.06, 'text': ' saying? If B flows into this, then this nu B will flow into which argument? G. This will flow to?', 'tokens': [50904, 1566, 30, 759, 363, 12867, 666, 341, 11, 550, 341, 3822, 363, 486, 3095, 666, 597, 6770, 30, 460, 13, 639, 486, 3095, 281, 30, 51272], 'temperature': 0.0, 'avg_logprob': -0.1521577394925631, 'compression_ratio': 1.391304347826087, 'no_speech_prob': 0.013800933957099915}, {'id': 369, 'seek': 382906, 'start': 3829.06, 'end': 3846.5, 'text': ' G. G. And if B flows to nu A, then this will flow to this expression. So, now if you do all', 'tokens': [50364, 460, 13, 460, 13, 400, 498, 363, 12867, 281, 3822, 316, 11, 550, 341, 486, 3095, 281, 341, 6114, 13, 407, 11, 586, 498, 291, 360, 439, 51236], 'temperature': 0.0, 'avg_logprob': -0.25923030607161984, 'compression_ratio': 1.0705882352941176, 'no_speech_prob': 0.0062895179726183414}, {'id': 370, 'seek': 384650, 'start': 3846.5, 'end': 3858.1, 'text': ' these constraints, this is what it will look like. We have this and now how do we solve them?', 'tokens': [50364, 613, 18491, 11, 341, 307, 437, 309, 486, 574, 411, 13, 492, 362, 341, 293, 586, 577, 360, 321, 5039, 552, 30, 50944], 'temperature': 0.0, 'avg_logprob': -0.20147690243191188, 'compression_ratio': 1.4830508474576272, 'no_speech_prob': 0.03020319528877735}, {'id': 371, 'seek': 384650, 'start': 3859.38, 'end': 3863.38, 'text': ' What we are saying is we are generating the constraints, we need to now solve it.', 'tokens': [51008, 708, 321, 366, 1566, 307, 321, 366, 17746, 264, 18491, 11, 321, 643, 281, 586, 5039, 309, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.20147690243191188, 'compression_ratio': 1.4830508474576272, 'no_speech_prob': 0.03020319528877735}, {'id': 372, 'seek': 387650, 'start': 3877.06, 'end': 3883.62, 'text': ' We will skip one or two slides. Wait. Okay. How do we do the constraint solving?', 'tokens': [50392, 492, 486, 10023, 472, 420, 732, 9788, 13, 3802, 13, 1033, 13, 1012, 360, 321, 360, 264, 25534, 12606, 30, 50720], 'temperature': 0.0, 'avg_logprob': -0.1123672568279764, 'compression_ratio': 2.086705202312139, 'no_speech_prob': 0.03307151794433594}, {'id': 373, 'seek': 387650, 'start': 3884.82, 'end': 3888.9, 'text': ' We will solve one constraint at a time. We will process one constraint at a time.', 'tokens': [50780, 492, 486, 5039, 472, 25534, 412, 257, 565, 13, 492, 486, 1399, 472, 25534, 412, 257, 565, 13, 50984], 'temperature': 0.0, 'avg_logprob': -0.1123672568279764, 'compression_ratio': 2.086705202312139, 'no_speech_prob': 0.03307151794433594}, {'id': 374, 'seek': 387650, 'start': 3889.7, 'end': 3897.06, 'text': ' Not solve. We will process one constraint at a time and then see if we have more constraints to', 'tokens': [51024, 1726, 5039, 13, 492, 486, 1399, 472, 25534, 412, 257, 565, 293, 550, 536, 498, 321, 362, 544, 18491, 281, 51392], 'temperature': 0.0, 'avg_logprob': -0.1123672568279764, 'compression_ratio': 2.086705202312139, 'no_speech_prob': 0.03307151794433594}, {'id': 375, 'seek': 387650, 'start': 3897.06, 'end': 3905.06, 'text': ' solve. We keep on solving. Once in a while, we add new constraints. When will we add a new constraint?', 'tokens': [51392, 5039, 13, 492, 1066, 322, 12606, 13, 3443, 294, 257, 1339, 11, 321, 909, 777, 18491, 13, 1133, 486, 321, 909, 257, 777, 25534, 30, 51792], 'temperature': 0.0, 'avg_logprob': -0.1123672568279764, 'compression_ratio': 2.086705202312139, 'no_speech_prob': 0.03307151794433594}, {'id': 376, 'seek': 390650, 'start': 3906.9, 'end': 3911.54, 'text': ' We have this conditional constraints, right? If the condition is true, I will add the right', 'tokens': [50384, 492, 362, 341, 27708, 18491, 11, 558, 30, 759, 264, 4188, 307, 2074, 11, 286, 486, 909, 264, 558, 50616], 'temperature': 0.0, 'avg_logprob': -0.11538840376812479, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.000665264087729156}, {'id': 377, 'seek': 390650, 'start': 3911.54, 'end': 3917.46, 'text': ' side as my constraint. So, once in a while, we will add new constraints. But when we add,', 'tokens': [50616, 1252, 382, 452, 25534, 13, 407, 11, 1564, 294, 257, 1339, 11, 321, 486, 909, 777, 18491, 13, 583, 562, 321, 909, 11, 50912], 'temperature': 0.0, 'avg_logprob': -0.11538840376812479, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.000665264087729156}, {'id': 378, 'seek': 390650, 'start': 3917.46, 'end': 3923.22, 'text': ' there are finite number of conditional constraints. So, I will add them finite number of times.', 'tokens': [50912, 456, 366, 19362, 1230, 295, 27708, 18491, 13, 407, 11, 286, 486, 909, 552, 19362, 1230, 295, 1413, 13, 51200], 'temperature': 0.0, 'avg_logprob': -0.11538840376812479, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.000665264087729156}, {'id': 379, 'seek': 390650, 'start': 3926.34, 'end': 3930.5, 'text': ' We will take one constraint at a time. At any point of time, it will maintain a minimal solution', 'tokens': [51356, 492, 486, 747, 472, 25534, 412, 257, 565, 13, 1711, 604, 935, 295, 565, 11, 309, 486, 6909, 257, 13206, 3827, 51564], 'temperature': 0.0, 'avg_logprob': -0.11538840376812479, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.000665264087729156}, {'id': 380, 'seek': 393050, 'start': 3931.46, 'end': 3935.38, 'text': ' and what we will do internally, the constraints can be represented as a graph', 'tokens': [50412, 293, 437, 321, 486, 360, 19501, 11, 264, 18491, 393, 312, 10379, 382, 257, 4295, 50608], 'temperature': 0.0, 'avg_logprob': -0.16981960667504203, 'compression_ratio': 1.4853801169590644, 'no_speech_prob': 0.0050573027692735195}, {'id': 381, 'seek': 393050, 'start': 3936.26, 'end': 3946.1, 'text': ' where n is the set of flow variables and if there is, if I have V is a subset of W,', 'tokens': [50652, 689, 297, 307, 264, 992, 295, 3095, 9102, 293, 498, 456, 307, 11, 498, 286, 362, 691, 307, 257, 25993, 295, 343, 11, 51144], 'temperature': 0.0, 'avg_logprob': -0.16981960667504203, 'compression_ratio': 1.4853801169590644, 'no_speech_prob': 0.0050573027692735195}, {'id': 382, 'seek': 393050, 'start': 3947.38, 'end': 3955.14, 'text': ' I will add an edge from V to W. That is whatever is in V should go to W. You see this is one', 'tokens': [51208, 286, 486, 909, 364, 4691, 490, 691, 281, 343, 13, 663, 307, 2035, 307, 294, 691, 820, 352, 281, 343, 13, 509, 536, 341, 307, 472, 51596], 'temperature': 0.0, 'avg_logprob': -0.16981960667504203, 'compression_ratio': 1.4853801169590644, 'no_speech_prob': 0.0050573027692735195}, {'id': 383, 'seek': 395514, 'start': 3955.14, 'end': 3960.9, 'text': ' directional, right? What is in V will go to W does not mean whatever is in W will also flow to V,', 'tokens': [50364, 42242, 11, 558, 30, 708, 307, 294, 691, 486, 352, 281, 343, 775, 406, 914, 2035, 307, 294, 343, 486, 611, 3095, 281, 691, 11, 50652], 'temperature': 0.0, 'avg_logprob': -0.17386703137998227, 'compression_ratio': 1.4411764705882353, 'no_speech_prob': 0.0021682963706552982}, {'id': 384, 'seek': 395514, 'start': 3961.7, 'end': 3972.42, 'text': ' right? Okay. We can store the flow variable X in a bit vector, initialize the bit vector for every', 'tokens': [50692, 558, 30, 1033, 13, 492, 393, 3531, 264, 3095, 7006, 1783, 294, 257, 857, 8062, 11, 5883, 1125, 264, 857, 8062, 337, 633, 51228], 'temperature': 0.0, 'avg_logprob': -0.17386703137998227, 'compression_ratio': 1.4411764705882353, 'no_speech_prob': 0.0021682963706552982}, {'id': 385, 'seek': 397242, 'start': 3972.42, 'end': 3983.14, 'text': ' variable to 0. That is nothing flows into no variable, nothing. With each bit,', 'tokens': [50364, 7006, 281, 1958, 13, 663, 307, 1825, 12867, 666, 572, 7006, 11, 1825, 13, 2022, 1184, 857, 11, 50900], 'temperature': 0.0, 'avg_logprob': -0.12556956031105734, 'compression_ratio': 1.6226415094339623, 'no_speech_prob': 0.016832171007990837}, {'id': 386, 'seek': 397242, 'start': 3985.14, 'end': 3990.42, 'text': ' we will have some pending constraints also. We may have some pending constraints that says,', 'tokens': [51000, 321, 486, 362, 512, 32110, 18491, 611, 13, 492, 815, 362, 512, 32110, 18491, 300, 1619, 11, 51264], 'temperature': 0.0, 'avg_logprob': -0.12556956031105734, 'compression_ratio': 1.6226415094339623, 'no_speech_prob': 0.016832171007990837}, {'id': 387, 'seek': 397242, 'start': 3991.14, 'end': 3998.58, 'text': ' if something flows, this will come in. Okay. If that bit is set, then what should I do?', 'tokens': [51300, 498, 746, 12867, 11, 341, 486, 808, 294, 13, 1033, 13, 759, 300, 857, 307, 992, 11, 550, 437, 820, 286, 360, 30, 51672], 'temperature': 0.0, 'avg_logprob': -0.12556956031105734, 'compression_ratio': 1.6226415094339623, 'no_speech_prob': 0.016832171007990837}, {'id': 388, 'seek': 399858, 'start': 3998.74, 'end': 4010.2599999999998, 'text': ' Okay. So, if I have a condition, constraint of the form, if C flows into X, then Y is a subset of Z.', 'tokens': [50372, 1033, 13, 407, 11, 498, 286, 362, 257, 4188, 11, 25534, 295, 264, 1254, 11, 498, 383, 12867, 666, 1783, 11, 550, 398, 307, 257, 25993, 295, 1176, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.17686226662625087, 'compression_ratio': 1.5233160621761659, 'no_speech_prob': 0.0003886008635163307}, {'id': 389, 'seek': 399858, 'start': 4011.54, 'end': 4020.34, 'text': ' Okay. Then what will I do? In X, for each variable, I have a bit vector, right? There is a bit for', 'tokens': [51012, 1033, 13, 1396, 437, 486, 286, 360, 30, 682, 1783, 11, 337, 1184, 7006, 11, 286, 362, 257, 857, 8062, 11, 558, 30, 821, 307, 257, 857, 337, 51452], 'temperature': 0.0, 'avg_logprob': -0.17686226662625087, 'compression_ratio': 1.5233160621761659, 'no_speech_prob': 0.0003886008635163307}, {'id': 390, 'seek': 399858, 'start': 4020.34, 'end': 4028.5, 'text': ' every class. If I have 10 classes, I will have 10 bits. For the bit corresponding to C, I will', 'tokens': [51452, 633, 1508, 13, 759, 286, 362, 1266, 5359, 11, 286, 486, 362, 1266, 9239, 13, 1171, 264, 857, 11760, 281, 383, 11, 286, 486, 51860], 'temperature': 0.0, 'avg_logprob': -0.17686226662625087, 'compression_ratio': 1.5233160621761659, 'no_speech_prob': 0.0003886008635163307}, {'id': 391, 'seek': 402850, 'start': 4029.06, 'end': 4038.1, 'text': ' keep a constraint, which is Y is subset of Z. So, if that bit is true, this Y subset of Z', 'tokens': [50392, 1066, 257, 25534, 11, 597, 307, 398, 307, 25993, 295, 1176, 13, 407, 11, 498, 300, 857, 307, 2074, 11, 341, 398, 25993, 295, 1176, 50844], 'temperature': 0.0, 'avg_logprob': -0.09572643428653865, 'compression_ratio': 1.6867469879518073, 'no_speech_prob': 0.00021315994672477245}, {'id': 392, 'seek': 402850, 'start': 4038.1, 'end': 4044.42, 'text': ' can be added. If that bit is false, I will keep this pending constraint. I will keep it pending.', 'tokens': [50844, 393, 312, 3869, 13, 759, 300, 857, 307, 7908, 11, 286, 486, 1066, 341, 32110, 25534, 13, 286, 486, 1066, 309, 32110, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.09572643428653865, 'compression_ratio': 1.6867469879518073, 'no_speech_prob': 0.00021315994672477245}, {'id': 393, 'seek': 402850, 'start': 4045.62, 'end': 4055.22, 'text': ' Okay. So, this is how do I deal with different constraints? If I am inserting a constraint of', 'tokens': [51220, 1033, 13, 407, 11, 341, 307, 577, 360, 286, 2028, 365, 819, 18491, 30, 759, 286, 669, 46567, 257, 25534, 295, 51700], 'temperature': 0.0, 'avg_logprob': -0.09572643428653865, 'compression_ratio': 1.6867469879518073, 'no_speech_prob': 0.00021315994672477245}, {'id': 394, 'seek': 405522, 'start': 4055.22, 'end': 4062.3399999999997, 'text': ' the form, I belongs to X, what do I do? I will call a method called propagate.', 'tokens': [50364, 264, 1254, 11, 286, 12953, 281, 1783, 11, 437, 360, 286, 360, 30, 286, 486, 818, 257, 3170, 1219, 48256, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.08103414818092629, 'compression_ratio': 1.5108695652173914, 'no_speech_prob': 0.0009690088336355984}, {'id': 395, 'seek': 405522, 'start': 4063.8599999999997, 'end': 4070.98, 'text': ' Basically, what I want to do, whenever I see that I is getting added to X, push it as far as possible.', 'tokens': [50796, 8537, 11, 437, 286, 528, 281, 360, 11, 5699, 286, 536, 300, 286, 307, 1242, 3869, 281, 1783, 11, 2944, 309, 382, 1400, 382, 1944, 13, 51152], 'temperature': 0.0, 'avg_logprob': -0.08103414818092629, 'compression_ratio': 1.5108695652173914, 'no_speech_prob': 0.0009690088336355984}, {'id': 396, 'seek': 405522, 'start': 4073.22, 'end': 4080.8199999999997, 'text': ' Okay. If I have an insert X subset of Y type of constraint, what will I do? First, I will add an', 'tokens': [51264, 1033, 13, 759, 286, 362, 364, 8969, 1783, 25993, 295, 398, 2010, 295, 25534, 11, 437, 486, 286, 360, 30, 2386, 11, 286, 486, 909, 364, 51644], 'temperature': 0.0, 'avg_logprob': -0.08103414818092629, 'compression_ratio': 1.5108695652173914, 'no_speech_prob': 0.0009690088336355984}, {'id': 397, 'seek': 408082, 'start': 4080.82, 'end': 4089.78, 'text': ' edge from X to Y. I will add an edge from X to Y and then what will I see? Hey, hold on. I am saying', 'tokens': [50364, 4691, 490, 1783, 281, 398, 13, 286, 486, 909, 364, 4691, 490, 1783, 281, 398, 293, 550, 437, 486, 286, 536, 30, 1911, 11, 1797, 322, 13, 286, 669, 1566, 50812], 'temperature': 0.0, 'avg_logprob': -0.08486041103500917, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.008048501797020435}, {'id': 398, 'seek': 408082, 'start': 4089.78, 'end': 4096.82, 'text': ' whatever should flow into X should flow to Y. What is already there in X? Whatever is there already', 'tokens': [50812, 2035, 820, 3095, 666, 1783, 820, 3095, 281, 398, 13, 708, 307, 1217, 456, 294, 1783, 30, 8541, 307, 456, 1217, 51164], 'temperature': 0.0, 'avg_logprob': -0.08486041103500917, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.008048501797020435}, {'id': 399, 'seek': 408082, 'start': 4096.82, 'end': 4105.62, 'text': ' in X, what should I do? Push it. I will propagate. So, for every I which is already present', 'tokens': [51164, 294, 1783, 11, 437, 820, 286, 360, 30, 18229, 309, 13, 286, 486, 48256, 13, 407, 11, 337, 633, 286, 597, 307, 1217, 1974, 51604], 'temperature': 0.0, 'avg_logprob': -0.08486041103500917, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.008048501797020435}, {'id': 400, 'seek': 410562, 'start': 4106.099999999999, 'end': 4113.62, 'text': ' in the bit vector for X, I will say propagate to Y. Simple idea, right? We will see the method', 'tokens': [50388, 294, 264, 857, 8062, 337, 1783, 11, 286, 486, 584, 48256, 281, 398, 13, 21532, 1558, 11, 558, 30, 492, 486, 536, 264, 3170, 50764], 'temperature': 0.0, 'avg_logprob': -0.13977400156167838, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.005668902304023504}, {'id': 401, 'seek': 410562, 'start': 4113.62, 'end': 4119.86, 'text': ' propagate. We will see the method propagate, but what am I doing? I am taking the, I am seeing,', 'tokens': [50764, 48256, 13, 492, 486, 536, 264, 3170, 48256, 11, 457, 437, 669, 286, 884, 30, 286, 669, 1940, 264, 11, 286, 669, 2577, 11, 51076], 'temperature': 0.0, 'avg_logprob': -0.13977400156167838, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.005668902304023504}, {'id': 402, 'seek': 410562, 'start': 4119.86, 'end': 4126.74, 'text': ' hey I have to add the flow set of X to Y. Whatever is already there, let me push it.', 'tokens': [51076, 4177, 286, 362, 281, 909, 264, 3095, 992, 295, 1783, 281, 398, 13, 8541, 307, 1217, 456, 11, 718, 385, 2944, 309, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.13977400156167838, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.005668902304023504}, {'id': 403, 'seek': 410562, 'start': 4128.98, 'end': 4134.9, 'text': ' For conditional constraints, what will I do? I will see when I am processing it, I will see, hey', 'tokens': [51532, 1171, 27708, 18491, 11, 437, 486, 286, 360, 30, 286, 486, 536, 562, 286, 669, 9007, 309, 11, 286, 486, 536, 11, 4177, 51828], 'temperature': 0.0, 'avg_logprob': -0.13977400156167838, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.005668902304023504}, {'id': 404, 'seek': 413490, 'start': 4134.9, 'end': 4142.82, 'text': ' see if it is already present in X, what should I do? If C is already present in the flow set of X,', 'tokens': [50364, 536, 498, 309, 307, 1217, 1974, 294, 1783, 11, 437, 820, 286, 360, 30, 759, 383, 307, 1217, 1974, 294, 264, 3095, 992, 295, 1783, 11, 50760], 'temperature': 0.0, 'avg_logprob': -0.08580334672650088, 'compression_ratio': 1.8028169014084507, 'no_speech_prob': 0.00019077729666605592}, {'id': 405, 'seek': 413490, 'start': 4142.82, 'end': 4147.62, 'text': ' then I can process this constraint itself. That is what I will do. If it is already present,', 'tokens': [50760, 550, 286, 393, 1399, 341, 25534, 2564, 13, 663, 307, 437, 286, 486, 360, 13, 759, 309, 307, 1217, 1974, 11, 51000], 'temperature': 0.0, 'avg_logprob': -0.08580334672650088, 'compression_ratio': 1.8028169014084507, 'no_speech_prob': 0.00019077729666605592}, {'id': 406, 'seek': 413490, 'start': 4147.62, 'end': 4154.339999999999, 'text': ' I will call the insert function for Y subset of Z. It may not be present yet, it may get added later.', 'tokens': [51000, 286, 486, 818, 264, 8969, 2445, 337, 398, 25993, 295, 1176, 13, 467, 815, 406, 312, 1974, 1939, 11, 309, 815, 483, 3869, 1780, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.08580334672650088, 'compression_ratio': 1.8028169014084507, 'no_speech_prob': 0.00019077729666605592}, {'id': 407, 'seek': 413490, 'start': 4155.78, 'end': 4161.46, 'text': ' What will I do? I will add a pending constraint. I will say if it is not currently present', 'tokens': [51408, 708, 486, 286, 360, 30, 286, 486, 909, 257, 32110, 25534, 13, 286, 486, 584, 498, 309, 307, 406, 4362, 1974, 51692], 'temperature': 0.0, 'avg_logprob': -0.08580334672650088, 'compression_ratio': 1.8028169014084507, 'no_speech_prob': 0.00019077729666605592}, {'id': 408, 'seek': 416146, 'start': 4161.86, 'end': 4171.3, 'text': ' in X corresponding to C, okay, whatever, it may have some set of constraints, add one more,', 'tokens': [50384, 294, 1783, 11760, 281, 383, 11, 1392, 11, 2035, 11, 309, 815, 362, 512, 992, 295, 18491, 11, 909, 472, 544, 11, 50856], 'temperature': 0.0, 'avg_logprob': -0.17421609163284302, 'compression_ratio': 1.6402116402116402, 'no_speech_prob': 0.0018025271128863096}, {'id': 409, 'seek': 416146, 'start': 4173.46, 'end': 4177.54, 'text': ' add one more. We will solve it when it comes, okay.', 'tokens': [50964, 909, 472, 544, 13, 492, 486, 5039, 309, 562, 309, 1487, 11, 1392, 13, 51168], 'temperature': 0.0, 'avg_logprob': -0.17421609163284302, 'compression_ratio': 1.6402116402116402, 'no_speech_prob': 0.0018025271128863096}, {'id': 410, 'seek': 416146, 'start': 4180.1, 'end': 4183.94, 'text': ' So, we have processed all the three types of constraints and we said we call a function', 'tokens': [51296, 407, 11, 321, 362, 18846, 439, 264, 1045, 3467, 295, 18491, 293, 321, 848, 321, 818, 257, 2445, 51488], 'temperature': 0.0, 'avg_logprob': -0.17421609163284302, 'compression_ratio': 1.6402116402116402, 'no_speech_prob': 0.0018025271128863096}, {'id': 411, 'seek': 416146, 'start': 4183.94, 'end': 4187.78, 'text': ' called propagate. What does this propagate do? What do you think it should do?', 'tokens': [51488, 1219, 48256, 13, 708, 775, 341, 48256, 360, 30, 708, 360, 291, 519, 309, 820, 360, 30, 51680], 'temperature': 0.0, 'avg_logprob': -0.17421609163284302, 'compression_ratio': 1.6402116402116402, 'no_speech_prob': 0.0018025271128863096}, {'id': 412, 'seek': 419146, 'start': 4191.46, 'end': 4196.34, 'text': ' There is an edge from the variable Y.', 'tokens': [50364, 821, 307, 364, 4691, 490, 264, 7006, 398, 13, 50608], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 413, 'seek': 419146, 'start': 4196.34, 'end': 4197.14, 'text': ' So, let us say here.', 'tokens': [50608, 407, 11, 718, 505, 584, 510, 13, 50648], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 414, 'seek': 419146, 'start': 4197.14, 'end': 4199.94, 'text': ' There is an edge from the variable Y. Yeah.', 'tokens': [50648, 821, 307, 364, 4691, 490, 264, 7006, 398, 13, 865, 13, 50788], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 415, 'seek': 419146, 'start': 4199.94, 'end': 4202.9800000000005, 'text': ' From the variable Y to any other. We should propagate further.', 'tokens': [50788, 3358, 264, 7006, 398, 281, 604, 661, 13, 492, 820, 48256, 3052, 13, 50940], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 416, 'seek': 419146, 'start': 4202.9800000000005, 'end': 4208.26, 'text': ' Yeah. So, what he said is very simple, right. He says, see propagate, let us look at here.', 'tokens': [50940, 865, 13, 407, 11, 437, 415, 848, 307, 588, 2199, 11, 558, 13, 634, 1619, 11, 536, 48256, 11, 718, 505, 574, 412, 510, 13, 51204], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 417, 'seek': 419146, 'start': 4210.02, 'end': 4215.7, 'text': ' If there is an edge X to Y, I am saying whatever is in X, push it to Y.', 'tokens': [51292, 759, 456, 307, 364, 4691, 1783, 281, 398, 11, 286, 669, 1566, 2035, 307, 294, 1783, 11, 2944, 309, 281, 398, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.2714038697799834, 'compression_ratio': 1.8021978021978022, 'no_speech_prob': 0.00756972236558795}, {'id': 418, 'seek': 421570, 'start': 4215.7, 'end': 4223.94, 'text': ' And while propagating in Y, you see hey, in Y I got something new. What you should do?', 'tokens': [50364, 400, 1339, 12425, 990, 294, 398, 11, 291, 536, 4177, 11, 294, 398, 286, 658, 746, 777, 13, 708, 291, 820, 360, 30, 50776], 'temperature': 0.0, 'avg_logprob': -0.15012957255045573, 'compression_ratio': 1.4682080924855492, 'no_speech_prob': 0.003014577319845557}, {'id': 419, 'seek': 421570, 'start': 4225.139999999999, 'end': 4231.46, 'text': ' Wherever there is an edge from Y, propagate. And again, let us say Y has an edge to Z.', 'tokens': [50836, 30903, 456, 307, 364, 4691, 490, 398, 11, 48256, 13, 400, 797, 11, 718, 505, 584, 398, 575, 364, 4691, 281, 1176, 13, 51152], 'temperature': 0.0, 'avg_logprob': -0.15012957255045573, 'compression_ratio': 1.4682080924855492, 'no_speech_prob': 0.003014577319845557}, {'id': 420, 'seek': 421570, 'start': 4232.26, 'end': 4236.98, 'text': ' From Z, propagate further. So, recursively call, right. That is what we will do.', 'tokens': [51192, 3358, 1176, 11, 48256, 3052, 13, 407, 11, 20560, 3413, 818, 11, 558, 13, 663, 307, 437, 321, 486, 360, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.15012957255045573, 'compression_ratio': 1.4682080924855492, 'no_speech_prob': 0.003014577319845557}, {'id': 421, 'seek': 423698, 'start': 4236.98, 'end': 4249.94, 'text': ' Okay. When you want certain, when you want certain bit to be propagated for a variable,', 'tokens': [50364, 1033, 13, 1133, 291, 528, 1629, 11, 562, 291, 528, 1629, 857, 281, 312, 12425, 770, 337, 257, 7006, 11, 51012], 'temperature': 0.0, 'avg_logprob': -0.1339114273295683, 'compression_ratio': 1.6258064516129032, 'no_speech_prob': 0.03708256036043167}, {'id': 422, 'seek': 423698, 'start': 4249.94, 'end': 4253.299999999999, 'text': ' you first check is it already set. If it is already set, what does it mean?', 'tokens': [51012, 291, 700, 1520, 307, 309, 1217, 992, 13, 759, 309, 307, 1217, 992, 11, 437, 775, 309, 914, 30, 51180], 'temperature': 0.0, 'avg_logprob': -0.1339114273295683, 'compression_ratio': 1.6258064516129032, 'no_speech_prob': 0.03708256036043167}, {'id': 423, 'seek': 423698, 'start': 4253.86, 'end': 4259.219999999999, 'text': ' Whatever is required is already done. Do not need to do anything more. If it is not set,', 'tokens': [51208, 8541, 307, 4739, 307, 1217, 1096, 13, 1144, 406, 643, 281, 360, 1340, 544, 13, 759, 309, 307, 406, 992, 11, 51476], 'temperature': 0.0, 'avg_logprob': -0.1339114273295683, 'compression_ratio': 1.6258064516129032, 'no_speech_prob': 0.03708256036043167}, {'id': 424, 'seek': 425922, 'start': 4259.22, 'end': 4267.54, 'text': ' then set it to 1. And then for each edges like you said, from V what are the edges?', 'tokens': [50364, 550, 992, 309, 281, 502, 13, 400, 550, 337, 1184, 8819, 411, 291, 848, 11, 490, 691, 437, 366, 264, 8819, 30, 50780], 'temperature': 0.0, 'avg_logprob': -0.14924952718946669, 'compression_ratio': 1.4797687861271676, 'no_speech_prob': 0.003924483433365822}, {'id': 425, 'seek': 425922, 'start': 4269.46, 'end': 4277.860000000001, 'text': ' Propagate. I may also have, after I set B, V, I equal to true, it may have some pending,', 'tokens': [50876, 21944, 559, 473, 13, 286, 815, 611, 362, 11, 934, 286, 992, 363, 11, 691, 11, 286, 2681, 281, 2074, 11, 309, 815, 362, 512, 32110, 11, 51296], 'temperature': 0.0, 'avg_logprob': -0.14924952718946669, 'compression_ratio': 1.4797687861271676, 'no_speech_prob': 0.003924483433365822}, {'id': 426, 'seek': 425922, 'start': 4277.860000000001, 'end': 4286.1, 'text': ' hanging constraints. For all those hanging constraints, insert them into my list of', 'tokens': [51296, 8345, 18491, 13, 1171, 439, 729, 8345, 18491, 11, 8969, 552, 666, 452, 1329, 295, 51708], 'temperature': 0.0, 'avg_logprob': -0.14924952718946669, 'compression_ratio': 1.4797687861271676, 'no_speech_prob': 0.003924483433365822}, {'id': 427, 'seek': 428610, 'start': 4286.1, 'end': 4291.46, 'text': ' constraints. So, I will call insert. And after you process these constraints, just make them empty.', 'tokens': [50364, 18491, 13, 407, 11, 286, 486, 818, 8969, 13, 400, 934, 291, 1399, 613, 18491, 11, 445, 652, 552, 6707, 13, 50632], 'temperature': 0.0, 'avg_logprob': -0.10160227571980338, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.0017524180002510548}, {'id': 428, 'seek': 428610, 'start': 4293.38, 'end': 4300.900000000001, 'text': ' Very simple idea, right? If it belongs to constraint, propagate. Subset constraints,', 'tokens': [50728, 4372, 2199, 1558, 11, 558, 30, 759, 309, 12953, 281, 25534, 11, 48256, 13, 8511, 3854, 18491, 11, 51104], 'temperature': 0.0, 'avg_logprob': -0.10160227571980338, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.0017524180002510548}, {'id': 429, 'seek': 428610, 'start': 4301.46, 'end': 4305.780000000001, 'text': ' propagate to the right side. Whatever is in my left side, propagate to the right side.', 'tokens': [51132, 48256, 281, 264, 558, 1252, 13, 8541, 307, 294, 452, 1411, 1252, 11, 48256, 281, 264, 558, 1252, 13, 51348], 'temperature': 0.0, 'avg_logprob': -0.10160227571980338, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.0017524180002510548}, {'id': 430, 'seek': 428610, 'start': 4306.42, 'end': 4312.660000000001, 'text': ' If it is a conditional constraint, if you know the condition is true, insert the right hand side.', 'tokens': [51380, 759, 309, 307, 257, 27708, 25534, 11, 498, 291, 458, 264, 4188, 307, 2074, 11, 8969, 264, 558, 1011, 1252, 13, 51692], 'temperature': 0.0, 'avg_logprob': -0.10160227571980338, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.0017524180002510548}, {'id': 431, 'seek': 431266, 'start': 4313.3, 'end': 4316.34, 'text': ' If you do not know the condition is true, keep it pending.', 'tokens': [50396, 759, 291, 360, 406, 458, 264, 4188, 307, 2074, 11, 1066, 309, 32110, 13, 50548], 'temperature': 0.0, 'avg_logprob': -0.16644452747545743, 'compression_ratio': 1.3773584905660377, 'no_speech_prob': 0.002465753583237529}, {'id': 432, 'seek': 431266, 'start': 4320.82, 'end': 4329.54, 'text': ' Okay. With this, do you remember these constraints we generated for the first example?', 'tokens': [50772, 1033, 13, 2022, 341, 11, 360, 291, 1604, 613, 18491, 321, 10833, 337, 264, 700, 1365, 30, 51208], 'temperature': 0.0, 'avg_logprob': -0.16644452747545743, 'compression_ratio': 1.3773584905660377, 'no_speech_prob': 0.002465753583237529}, {'id': 433, 'seek': 431266, 'start': 4331.46, 'end': 4336.58, 'text': ' Can we solve this? Right. I will see if I can keep both of them together.', 'tokens': [51304, 1664, 321, 5039, 341, 30, 1779, 13, 286, 486, 536, 498, 286, 393, 1066, 1293, 295, 552, 1214, 13, 51560], 'temperature': 0.0, 'avg_logprob': -0.16644452747545743, 'compression_ratio': 1.3773584905660377, 'no_speech_prob': 0.002465753583237529}, {'id': 434, 'seek': 434266, 'start': 4342.82, 'end': 4347.94, 'text': ' Okay. Is it visible? Font is a bit small, but is it visible?', 'tokens': [50372, 1033, 13, 1119, 309, 8974, 30, 43901, 307, 257, 857, 1359, 11, 457, 307, 309, 8974, 30, 50628], 'temperature': 0.0, 'avg_logprob': -0.21678804947158037, 'compression_ratio': 1.3758389261744965, 'no_speech_prob': 0.0031573313754051924}, {'id': 435, 'seek': 434266, 'start': 4352.82, 'end': 4357.94, 'text': ' Okay. So, solve this and let me know how things go.', 'tokens': [50872, 1033, 13, 407, 11, 5039, 341, 293, 718, 385, 458, 577, 721, 352, 13, 51128], 'temperature': 0.0, 'avg_logprob': -0.21678804947158037, 'compression_ratio': 1.3758389261744965, 'no_speech_prob': 0.0031573313754051924}, {'id': 436, 'seek': 434266, 'start': 4362.5, 'end': 4369.46, 'text': ' And again, like before, the order in which you solve does not make a difference, even though', 'tokens': [51356, 400, 797, 11, 411, 949, 11, 264, 1668, 294, 597, 291, 5039, 775, 406, 652, 257, 2649, 11, 754, 1673, 51704], 'temperature': 0.0, 'avg_logprob': -0.21678804947158037, 'compression_ratio': 1.3758389261744965, 'no_speech_prob': 0.0031573313754051924}, {'id': 437, 'seek': 436946, 'start': 4370.42, 'end': 4374.42, 'text': ' it would be faster to solve using a certain order. You will figure out that order.', 'tokens': [50412, 309, 576, 312, 4663, 281, 5039, 1228, 257, 1629, 1668, 13, 509, 486, 2573, 484, 300, 1668, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.25615036487579346, 'compression_ratio': 1.1702127659574468, 'no_speech_prob': 0.002115492708981037}, {'id': 438, 'seek': 436946, 'start': 4382.58, 'end': 4384.02, 'text': ' Yes, sir. Are you starting?', 'tokens': [51020, 1079, 11, 4735, 13, 2014, 291, 2891, 30, 51092], 'temperature': 0.0, 'avg_logprob': -0.25615036487579346, 'compression_ratio': 1.1702127659574468, 'no_speech_prob': 0.002115492708981037}, {'id': 439, 'seek': 438402, 'start': 4384.02, 'end': 4400.02, 'text': ' So, by the way, the B set, so for each of these things, the B is initialized to,', 'tokens': [50364, 407, 11, 538, 264, 636, 11, 264, 363, 992, 11, 370, 337, 1184, 295, 613, 721, 11, 264, 363, 307, 5883, 1602, 281, 11, 51164], 'temperature': 0.0, 'avg_logprob': -0.24024563569288987, 'compression_ratio': 1.4782608695652173, 'no_speech_prob': 0.011678486131131649}, {'id': 440, 'seek': 438402, 'start': 4400.580000000001, 'end': 4405.860000000001, 'text': ' bit vector set is initialized to all zeros, right? What is the size of my bit vector set?', 'tokens': [51192, 857, 8062, 992, 307, 5883, 1602, 281, 439, 35193, 11, 558, 30, 708, 307, 264, 2744, 295, 452, 857, 8062, 992, 30, 51456], 'temperature': 0.0, 'avg_logprob': -0.24024563569288987, 'compression_ratio': 1.4782608695652173, 'no_speech_prob': 0.011678486131131649}, {'id': 441, 'seek': 440586, 'start': 4405.86, 'end': 4414.66, 'text': ' 4, 4 bit set, right? A, B, Q, S, they are 4 bits. Okay.', 'tokens': [50364, 1017, 11, 1017, 857, 992, 11, 558, 30, 316, 11, 363, 11, 1249, 11, 318, 11, 436, 366, 1017, 9239, 13, 1033, 13, 50804], 'temperature': 0.0, 'avg_logprob': -0.3302712917327881, 'compression_ratio': 1.092783505154639, 'no_speech_prob': 0.004604307468980551}, {'id': 442, 'seek': 440586, 'start': 4422.98, 'end': 4425.219999999999, 'text': ' For every expression, we need one such bit vector.', 'tokens': [51220, 1171, 633, 6114, 11, 321, 643, 472, 1270, 857, 8062, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.3302712917327881, 'compression_ratio': 1.092783505154639, 'no_speech_prob': 0.004604307468980551}, {'id': 443, 'seek': 442522, 'start': 4425.46, 'end': 4442.820000000001, 'text': ' Yes, sir. So, one thing that we can try doing is make a table A, B, Q, S. For every expression', 'tokens': [50376, 1079, 11, 4735, 13, 407, 11, 472, 551, 300, 321, 393, 853, 884, 307, 652, 257, 3199, 316, 11, 363, 11, 1249, 11, 318, 13, 1171, 633, 6114, 51244], 'temperature': 0.0, 'avg_logprob': -0.23421970009803772, 'compression_ratio': 1.0217391304347827, 'no_speech_prob': 0.018496757373213768}, {'id': 444, 'seek': 444282, 'start': 4442.82, 'end': 4468.82, 'text': ' I have, for every flow expression I have, nu A, nu B, nu Q, including X, Y, what is', 'tokens': [50364, 286, 362, 11, 337, 633, 3095, 6114, 286, 362, 11, 3822, 316, 11, 3822, 363, 11, 3822, 1249, 11, 3009, 1783, 11, 398, 11, 437, 307, 51664], 'temperature': 0.0, 'avg_logprob': -0.17008662223815918, 'compression_ratio': 1.0506329113924051, 'no_speech_prob': 0.16427241265773773}, {'id': 445, 'seek': 446882, 'start': 4468.82, 'end': 4480.0199999999995, 'text': " this? A dot arg. Why am I calling it A dot arg? Just to give it a different name from the A's arg", 'tokens': [50364, 341, 30, 316, 5893, 3882, 13, 1545, 669, 286, 5141, 309, 316, 5893, 3882, 30, 1449, 281, 976, 309, 257, 819, 1315, 490, 264, 316, 311, 3882, 50924], 'temperature': 0.0, 'avg_logprob': -0.18302238348758582, 'compression_ratio': 1.4214285714285715, 'no_speech_prob': 0.01862209662795067}, {'id': 446, 'seek': 446882, 'start': 4480.0199999999995, 'end': 4497.86, 'text': " and B's arg. Okay. So, for each one of them, you have, you have 0, 0, 0, 0 initially for all of them,", 'tokens': [50924, 293, 363, 311, 3882, 13, 1033, 13, 407, 11, 337, 1184, 472, 295, 552, 11, 291, 362, 11, 291, 362, 1958, 11, 1958, 11, 1958, 11, 1958, 9105, 337, 439, 295, 552, 11, 51816], 'temperature': 0.0, 'avg_logprob': -0.18302238348758582, 'compression_ratio': 1.4214285714285715, 'no_speech_prob': 0.01862209662795067}, {'id': 447, 'seek': 449786, 'start': 4497.86, 'end': 4505.78, 'text': ' right? Fill this table and then keep modifying the table. When you process, let us say A goes', 'tokens': [50364, 558, 30, 25315, 341, 3199, 293, 550, 1066, 42626, 264, 3199, 13, 1133, 291, 1399, 11, 718, 505, 584, 316, 1709, 50760], 'temperature': 0.0, 'avg_logprob': -0.11623185640805728, 'compression_ratio': 1.5411764705882354, 'no_speech_prob': 0.0002525666495785117}, {'id': 448, 'seek': 449786, 'start': 4505.78, 'end': 4516.82, 'text': ' to nu A, you call the propagate function. Is the bit 1 or 0? The bit is 0, so you will make it,', 'tokens': [50760, 281, 3822, 316, 11, 291, 818, 264, 48256, 2445, 13, 1119, 264, 857, 502, 420, 1958, 30, 440, 857, 307, 1958, 11, 370, 291, 486, 652, 309, 11, 51312], 'temperature': 0.0, 'avg_logprob': -0.11623185640805728, 'compression_ratio': 1.5411764705882354, 'no_speech_prob': 0.0002525666495785117}, {'id': 449, 'seek': 449786, 'start': 4518.179999999999, 'end': 4524.099999999999, 'text': ' you will set it to 1, true, and then you will see, is there an edge from', 'tokens': [51380, 291, 486, 992, 309, 281, 502, 11, 2074, 11, 293, 550, 291, 486, 536, 11, 307, 456, 364, 4691, 490, 51676], 'temperature': 0.0, 'avg_logprob': -0.11623185640805728, 'compression_ratio': 1.5411764705882354, 'no_speech_prob': 0.0002525666495785117}, {'id': 450, 'seek': 452410, 'start': 4524.1, 'end': 4533.38, 'text': ' nu A? Now you have no edges in the graph yet, right? Your graph has no edges at this time,', 'tokens': [50364, 3822, 316, 30, 823, 291, 362, 572, 8819, 294, 264, 4295, 1939, 11, 558, 30, 2260, 4295, 575, 572, 8819, 412, 341, 565, 11, 50828], 'temperature': 0.0, 'avg_logprob': -0.1441467169559363, 'compression_ratio': 1.5806451612903225, 'no_speech_prob': 0.00048760382924228907}, {'id': 451, 'seek': 452410, 'start': 4534.26, 'end': 4539.54, 'text': ' so nothing to do for the first for each loop. Does it have any constraints, no pending constraints?', 'tokens': [50872, 370, 1825, 281, 360, 337, 264, 700, 337, 1184, 6367, 13, 4402, 309, 362, 604, 18491, 11, 572, 32110, 18491, 30, 51136], 'temperature': 0.0, 'avg_logprob': -0.1441467169559363, 'compression_ratio': 1.5806451612903225, 'no_speech_prob': 0.00048760382924228907}, {'id': 452, 'seek': 452410, 'start': 4541.14, 'end': 4546.58, 'text': ' So, nothing to do. Now, process the second constraint.', 'tokens': [51216, 407, 11, 1825, 281, 360, 13, 823, 11, 1399, 264, 1150, 25534, 13, 51488], 'temperature': 0.0, 'avg_logprob': -0.1441467169559363, 'compression_ratio': 1.5806451612903225, 'no_speech_prob': 0.00048760382924228907}, {'id': 453, 'seek': 454658, 'start': 4546.58, 'end': 4558.26, 'text': ' B goes to nu B, so you will make it 0, 1, 0, 0, call the propagate function, finish the invocation', 'tokens': [50364, 363, 1709, 281, 3822, 363, 11, 370, 291, 486, 652, 309, 1958, 11, 502, 11, 1958, 11, 1958, 11, 818, 264, 48256, 2445, 11, 2413, 264, 1048, 27943, 50948], 'temperature': 0.0, 'avg_logprob': -0.249795224931505, 'compression_ratio': 1.1808510638297873, 'no_speech_prob': 0.019849393516778946}, {'id': 454, 'seek': 454658, 'start': 4559.38, 'end': 4571.0599999999995, 'text': ' and proceed.', 'tokens': [51004, 293, 8991, 13, 51588], 'temperature': 0.0, 'avg_logprob': -0.249795224931505, 'compression_ratio': 1.1808510638297873, 'no_speech_prob': 0.019849393516778946}, {'id': 455, 'seek': 457658, 'start': 4576.58, 'end': 4583.0599999999995, 'text': ' When I process this propagation constraint, nu A goes to X, what will I do?', 'tokens': [50364, 1133, 286, 1399, 341, 38377, 25534, 11, 3822, 316, 1709, 281, 1783, 11, 437, 486, 286, 360, 30, 50688], 'temperature': 0.0, 'avg_logprob': -0.18880528041294642, 'compression_ratio': 1.4683544303797469, 'no_speech_prob': 0.011595426127314568}, {'id': 456, 'seek': 457658, 'start': 4586.74, 'end': 4590.42, 'text': ' So, I will randomly pick a person, they have to answer. Let us say,', 'tokens': [50872, 407, 11, 286, 486, 16979, 1888, 257, 954, 11, 436, 362, 281, 1867, 13, 961, 505, 584, 11, 51056], 'temperature': 0.0, 'avg_logprob': -0.18880528041294642, 'compression_ratio': 1.4683544303797469, 'no_speech_prob': 0.011595426127314568}, {'id': 457, 'seek': 457658, 'start': 4591.62, 'end': 4596.9, 'text': ' a green shirt, what is your name? Varun. Yes, Varun, what will I do when I process this?', 'tokens': [51116, 257, 3092, 8336, 11, 437, 307, 428, 1315, 30, 14662, 409, 13, 1079, 11, 14662, 409, 11, 437, 486, 286, 360, 562, 286, 1399, 341, 30, 51380], 'temperature': 0.0, 'avg_logprob': -0.18880528041294642, 'compression_ratio': 1.4683544303797469, 'no_speech_prob': 0.011595426127314568}, {'id': 458, 'seek': 459690, 'start': 4596.9, 'end': 4608.42, 'text': ' Yes, so which method will I call? Which insert? I have three inserts here,', 'tokens': [50364, 1079, 11, 370, 597, 3170, 486, 286, 818, 30, 3013, 8969, 30, 286, 362, 1045, 49163, 510, 11, 50940], 'temperature': 0.0, 'avg_logprob': -0.23995234361335413, 'compression_ratio': 1.6204379562043796, 'no_speech_prob': 0.006677110213786364}, {'id': 459, 'seek': 459690, 'start': 4611.7, 'end': 4616.82, 'text': ' first one, second one, third one. Second one.', 'tokens': [51104, 700, 472, 11, 1150, 472, 11, 2636, 472, 13, 5736, 472, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.23995234361335413, 'compression_ratio': 1.6204379562043796, 'no_speech_prob': 0.006677110213786364}, {'id': 460, 'seek': 459690, 'start': 4616.82, 'end': 4624.259999999999, 'text': ' Second one, very good. What will I do first? I will add an edge, so what? So, I will add an edge from', 'tokens': [51360, 5736, 472, 11, 588, 665, 13, 708, 486, 286, 360, 700, 30, 286, 486, 909, 364, 4691, 11, 370, 437, 30, 407, 11, 286, 486, 909, 364, 4691, 490, 51732], 'temperature': 0.0, 'avg_logprob': -0.23995234361335413, 'compression_ratio': 1.6204379562043796, 'no_speech_prob': 0.006677110213786364}, {'id': 461, 'seek': 462426, 'start': 4624.900000000001, 'end': 4638.900000000001, 'text': ' this node, which node? Nu A to, I will add an edge and then, then call, then do what?', 'tokens': [50396, 341, 9984, 11, 597, 9984, 30, 13612, 316, 281, 11, 286, 486, 909, 364, 4691, 293, 550, 11, 550, 818, 11, 550, 360, 437, 30, 51096], 'temperature': 0.0, 'avg_logprob': -0.18109272144458913, 'compression_ratio': 1.4310344827586208, 'no_speech_prob': 0.004607236012816429}, {'id': 462, 'seek': 462426, 'start': 4640.820000000001, 'end': 4651.54, 'text': ' No, for each i in bit vector of X, what is there in bit vector of nu A, which is', 'tokens': [51192, 883, 11, 337, 1184, 741, 294, 857, 8062, 295, 1783, 11, 437, 307, 456, 294, 857, 8062, 295, 3822, 316, 11, 597, 307, 51728], 'temperature': 0.0, 'avg_logprob': -0.18109272144458913, 'compression_ratio': 1.4310344827586208, 'no_speech_prob': 0.004607236012816429}, {'id': 463, 'seek': 465154, 'start': 4651.54, 'end': 4664.82, 'text': ' only, only A is set, only A is set, so for that I will call, I will call propagate.', 'tokens': [50364, 787, 11, 787, 316, 307, 992, 11, 787, 316, 307, 992, 11, 370, 337, 300, 286, 486, 818, 11, 286, 486, 818, 48256, 13, 51028], 'temperature': 0.0, 'avg_logprob': -0.21062636375427246, 'compression_ratio': 1.5092592592592593, 'no_speech_prob': 0.0016104277456179261}, {'id': 464, 'seek': 465154, 'start': 4665.86, 'end': 4674.26, 'text': ' So, propagate, I will do propagate X, A, so in this case bit is 0, right, X, 0.', 'tokens': [51080, 407, 11, 48256, 11, 286, 486, 360, 48256, 1783, 11, 316, 11, 370, 294, 341, 1389, 857, 307, 1958, 11, 558, 11, 1783, 11, 1958, 13, 51500], 'temperature': 0.0, 'avg_logprob': -0.21062636375427246, 'compression_ratio': 1.5092592592592593, 'no_speech_prob': 0.0016104277456179261}, {'id': 465, 'seek': 467426, 'start': 4674.26, 'end': 4680.26, 'text': ' So, what will I do there in the propagate function? Let us ask your neighbor,', 'tokens': [50364, 407, 11, 437, 486, 286, 360, 456, 294, 264, 48256, 2445, 30, 961, 505, 1029, 428, 5987, 11, 50664], 'temperature': 0.0, 'avg_logprob': -0.25990943303183905, 'compression_ratio': 1.5190839694656488, 'no_speech_prob': 0.0037656640633940697}, {'id': 466, 'seek': 467426, 'start': 4683.62, 'end': 4686.66, 'text': ' what is your name? Aditya. Yes, Aditya, what will I do?', 'tokens': [50832, 437, 307, 428, 1315, 30, 1999, 507, 64, 13, 1079, 11, 1999, 507, 64, 11, 437, 486, 286, 360, 30, 50984], 'temperature': 0.0, 'avg_logprob': -0.25990943303183905, 'compression_ratio': 1.5190839694656488, 'no_speech_prob': 0.0037656640633940697}, {'id': 467, 'seek': 467426, 'start': 4689.06, 'end': 4691.62, 'text': ' Do not know, so what does the propagate function say?', 'tokens': [51104, 1144, 406, 458, 11, 370, 437, 775, 264, 48256, 2445, 584, 30, 51232], 'temperature': 0.0, 'avg_logprob': -0.25990943303183905, 'compression_ratio': 1.5190839694656488, 'no_speech_prob': 0.0037656640633940697}, {'id': 468, 'seek': 467426, 'start': 4696.34, 'end': 4696.820000000001, 'text': ' I am sorry.', 'tokens': [51468, 286, 669, 2597, 13, 51492], 'temperature': 0.0, 'avg_logprob': -0.25990943303183905, 'compression_ratio': 1.5190839694656488, 'no_speech_prob': 0.0037656640633940697}, {'id': 469, 'seek': 470426, 'start': 4704.900000000001, 'end': 4708.5, 'text': ' I thought you came pretty, you came back pretty early.', 'tokens': [50396, 286, 1194, 291, 1361, 1238, 11, 291, 1361, 646, 1238, 2440, 13, 50576], 'temperature': 0.0, 'avg_logprob': -0.2340871531788896, 'compression_ratio': 1.2660550458715596, 'no_speech_prob': 0.03947939723730087}, {'id': 470, 'seek': 470426, 'start': 4711.62, 'end': 4722.42, 'text': ' Was it? So, sorry to hear that, you could have, okay, what about on the other side?', 'tokens': [50732, 3027, 309, 30, 407, 11, 2597, 281, 1568, 300, 11, 291, 727, 362, 11, 1392, 11, 437, 466, 322, 264, 661, 1252, 30, 51272], 'temperature': 0.0, 'avg_logprob': -0.2340871531788896, 'compression_ratio': 1.2660550458715596, 'no_speech_prob': 0.03947939723730087}, {'id': 471, 'seek': 472242, 'start': 4722.42, 'end': 4741.7, 'text': ' Good, it will set it to 1 and then? For every edge from X.', 'tokens': [50364, 2205, 11, 309, 486, 992, 309, 281, 502, 293, 550, 30, 1171, 633, 4691, 490, 1783, 13, 51328], 'temperature': 0.0, 'avg_logprob': -0.20787444013230344, 'compression_ratio': 1.2844827586206897, 'no_speech_prob': 0.0035564324352890253}, {'id': 472, 'seek': 472242, 'start': 4744.18, 'end': 4749.22, 'text': ' Yeah, so what edge do I have from X? Nothing at this time, so nothing more to do. Is there', 'tokens': [51452, 865, 11, 370, 437, 4691, 360, 286, 362, 490, 1783, 30, 6693, 412, 341, 565, 11, 370, 1825, 544, 281, 360, 13, 1119, 456, 51704], 'temperature': 0.0, 'avg_logprob': -0.20787444013230344, 'compression_ratio': 1.2844827586206897, 'no_speech_prob': 0.0035564324352890253}, {'id': 473, 'seek': 474922, 'start': 4749.22, 'end': 4757.860000000001, 'text': ' any pending items on X? No, nothing to do, okay. When I do the next constraint, nu B flows to Y,', 'tokens': [50364, 604, 32110, 4754, 322, 1783, 30, 883, 11, 1825, 281, 360, 11, 1392, 13, 1133, 286, 360, 264, 958, 25534, 11, 3822, 363, 12867, 281, 398, 11, 50796], 'temperature': 0.0, 'avg_logprob': -0.1865611220851089, 'compression_ratio': 1.3857142857142857, 'no_speech_prob': 0.0005877291550859809}, {'id': 474, 'seek': 474922, 'start': 4758.42, 'end': 4762.1, 'text': ' what will I do? What is your name? Nimisha.', 'tokens': [50824, 437, 486, 286, 360, 30, 708, 307, 428, 1315, 30, 45251, 16546, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.1865611220851089, 'compression_ratio': 1.3857142857142857, 'no_speech_prob': 0.0005877291550859809}, {'id': 475, 'seek': 474922, 'start': 4762.1, 'end': 4769.62, 'text': ' Nimisha, yes, Nimisha. We add an edge from nu B to Y.', 'tokens': [51008, 45251, 16546, 11, 2086, 11, 45251, 16546, 13, 492, 909, 364, 4691, 490, 3822, 363, 281, 398, 13, 51384], 'temperature': 0.0, 'avg_logprob': -0.1865611220851089, 'compression_ratio': 1.3857142857142857, 'no_speech_prob': 0.0005877291550859809}, {'id': 476, 'seek': 476962, 'start': 4769.62, 'end': 4788.42, 'text': ' We add an edge from nu B to Y, okay. B is set here, so for Y and B, okay. What will happen in', 'tokens': [50364, 492, 909, 364, 4691, 490, 3822, 363, 281, 398, 11, 1392, 13, 363, 307, 992, 510, 11, 370, 337, 398, 293, 363, 11, 1392, 13, 708, 486, 1051, 294, 51304], 'temperature': 0.0, 'avg_logprob': -0.21995605121959338, 'compression_ratio': 1.1071428571428572, 'no_speech_prob': 0.03078259527683258}, {'id': 477, 'seek': 478842, 'start': 4788.42, 'end': 4791.54, 'text': ' propagate, what is your name? Lakshmi.', 'tokens': [50364, 48256, 11, 437, 307, 428, 1315, 30, 37327, 2716, 3057, 13, 50520], 'temperature': 0.0, 'avg_logprob': -0.15748889518506598, 'compression_ratio': 1.3740458015267176, 'no_speech_prob': 0.07136049121618271}, {'id': 478, 'seek': 478842, 'start': 4791.54, 'end': 4798.9800000000005, 'text': ' Lakshmi, yes Lakshmi. The B bit of Y, yes.', 'tokens': [50520, 37327, 2716, 3057, 11, 2086, 37327, 2716, 3057, 13, 440, 363, 857, 295, 398, 11, 2086, 13, 50892], 'temperature': 0.0, 'avg_logprob': -0.15748889518506598, 'compression_ratio': 1.3740458015267176, 'no_speech_prob': 0.07136049121618271}, {'id': 479, 'seek': 478842, 'start': 4804.9800000000005, 'end': 4806.26, 'text': ' Are there any? No.', 'tokens': [51192, 2014, 456, 604, 30, 883, 13, 51256], 'temperature': 0.0, 'avg_logprob': -0.15748889518506598, 'compression_ratio': 1.3740458015267176, 'no_speech_prob': 0.07136049121618271}, {'id': 480, 'seek': 478842, 'start': 4806.26, 'end': 4813.14, 'text': ' No, stop. Are there any pending constraints on Y? No, at this time, okay, good.', 'tokens': [51256, 883, 11, 1590, 13, 2014, 456, 604, 32110, 18491, 322, 398, 30, 883, 11, 412, 341, 565, 11, 1392, 11, 665, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.15748889518506598, 'compression_ratio': 1.3740458015267176, 'no_speech_prob': 0.07136049121618271}, {'id': 481, 'seek': 481314, 'start': 4813.860000000001, 'end': 4817.38, 'text': ' So, what happened? So, this, we said, right, when we process', 'tokens': [50400, 407, 11, 437, 2011, 30, 407, 11, 341, 11, 321, 848, 11, 558, 11, 562, 321, 1399, 50576], 'temperature': 0.0, 'avg_logprob': -0.18895418267501027, 'compression_ratio': 1.6532663316582914, 'no_speech_prob': 0.012222560122609138}, {'id': 482, 'seek': 481314, 'start': 4817.38, 'end': 4822.26, 'text': ' this conditional constraints, we will add to this pending constraints, they have not come yet. So,', 'tokens': [50576, 341, 27708, 18491, 11, 321, 486, 909, 281, 341, 32110, 18491, 11, 436, 362, 406, 808, 1939, 13, 407, 11, 50820], 'temperature': 0.0, 'avg_logprob': -0.18895418267501027, 'compression_ratio': 1.6532663316582914, 'no_speech_prob': 0.012222560122609138}, {'id': 483, 'seek': 481314, 'start': 4823.700000000001, 'end': 4831.860000000001, 'text': ' you remember we said, whenever I process this, I will add, let us do one thing. Let us,', 'tokens': [50892, 291, 1604, 321, 848, 11, 5699, 286, 1399, 341, 11, 286, 486, 909, 11, 718, 505, 360, 472, 551, 13, 961, 505, 11, 51300], 'temperature': 0.0, 'avg_logprob': -0.18895418267501027, 'compression_ratio': 1.6532663316582914, 'no_speech_prob': 0.012222560122609138}, {'id': 484, 'seek': 481314, 'start': 4833.14, 'end': 4839.9400000000005, 'text': ' for the heck of it, I am undoing Lakshmi your changes, okay. Lakshmi and Nimisha,', 'tokens': [51364, 337, 264, 12872, 295, 309, 11, 286, 669, 23779, 278, 37327, 2716, 3057, 428, 2962, 11, 1392, 13, 37327, 2716, 3057, 293, 45251, 16546, 11, 51704], 'temperature': 0.0, 'avg_logprob': -0.18895418267501027, 'compression_ratio': 1.6532663316582914, 'no_speech_prob': 0.012222560122609138}, {'id': 485, 'seek': 483994, 'start': 4839.94, 'end': 4846.419999999999, 'text': ' we will just undo these changes. We will process this constraint later, okay. We will', 'tokens': [50364, 321, 486, 445, 23779, 613, 2962, 13, 492, 486, 1399, 341, 25534, 1780, 11, 1392, 13, 492, 486, 50688], 'temperature': 0.0, 'avg_logprob': -0.21753430834003523, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0037032407708466053}, {'id': 486, 'seek': 483994, 'start': 4846.419999999999, 'end': 4857.379999999999, 'text': ' process this constraint later. Let us process this constraint first, okay. Prerna, go ahead.', 'tokens': [50688, 1399, 341, 25534, 1780, 13, 961, 505, 1399, 341, 25534, 700, 11, 1392, 13, 2114, 22250, 11, 352, 2286, 13, 51236], 'temperature': 0.0, 'avg_logprob': -0.21753430834003523, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0037032407708466053}, {'id': 487, 'seek': 483994, 'start': 4863.379999999999, 'end': 4865.219999999999, 'text': ' Will third function, yes.', 'tokens': [51536, 3099, 2636, 2445, 11, 2086, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.21753430834003523, 'compression_ratio': 1.7142857142857142, 'no_speech_prob': 0.0037032407708466053}, {'id': 488, 'seek': 486994, 'start': 4869.94, 'end': 4873.219999999999, 'text': ' Hello.', 'tokens': [50364, 2425, 13, 50528], 'temperature': 0.0, 'avg_logprob': -0.45768242693961936, 'compression_ratio': 1.1584158415841583, 'no_speech_prob': 0.10376159846782684}, {'id': 489, 'seek': 486994, 'start': 4873.219999999999, 'end': 4875.219999999999, 'text': ' Okay.', 'tokens': [50528, 1033, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.45768242693961936, 'compression_ratio': 1.1584158415841583, 'no_speech_prob': 0.10376159846782684}, {'id': 490, 'seek': 486994, 'start': 4875.219999999999, 'end': 4879.219999999999, 'text': ' Sir, why is there?', 'tokens': [50628, 6144, 11, 983, 307, 456, 30, 50828], 'temperature': 0.0, 'avg_logprob': -0.45768242693961936, 'compression_ratio': 1.1584158415841583, 'no_speech_prob': 0.10376159846782684}, {'id': 491, 'seek': 486994, 'start': 4879.219999999999, 'end': 4898.5, 'text': ' No, first I will check, if B is set, is it set? So, what do we set? In the bit vector', 'tokens': [50828, 883, 11, 700, 286, 486, 1520, 11, 498, 363, 307, 992, 11, 307, 309, 992, 30, 407, 11, 437, 360, 321, 992, 30, 682, 264, 857, 8062, 51792], 'temperature': 0.0, 'avg_logprob': -0.45768242693961936, 'compression_ratio': 1.1584158415841583, 'no_speech_prob': 0.10376159846782684}, {'id': 492, 'seek': 489850, 'start': 4898.58, 'end': 4908.34, 'text': ' of Y, do I have B? Do I have it? No. So, I will not, since I do not know if it is already there,', 'tokens': [50368, 295, 398, 11, 360, 286, 362, 363, 30, 1144, 286, 362, 309, 30, 883, 13, 407, 11, 286, 486, 406, 11, 1670, 286, 360, 406, 458, 498, 309, 307, 1217, 456, 11, 50856], 'temperature': 0.0, 'avg_logprob': -0.11319320466783311, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.010188345797359943}, {'id': 493, 'seek': 489850, 'start': 4909.38, 'end': 4915.3, 'text': ' I will not add process the, I will not add the right hand side yet, but I have to remember it.', 'tokens': [50908, 286, 486, 406, 909, 1399, 264, 11, 286, 486, 406, 909, 264, 558, 1011, 1252, 1939, 11, 457, 286, 362, 281, 1604, 309, 13, 51204], 'temperature': 0.0, 'avg_logprob': -0.11319320466783311, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.010188345797359943}, {'id': 494, 'seek': 489850, 'start': 4916.34, 'end': 4928.18, 'text': ' How will I remember? I will, in X, okay, that is in this case, in Y, in Y corresponding to the', 'tokens': [51256, 1012, 486, 286, 1604, 30, 286, 486, 11, 294, 1783, 11, 1392, 11, 300, 307, 294, 341, 1389, 11, 294, 398, 11, 294, 398, 11760, 281, 264, 51848], 'temperature': 0.0, 'avg_logprob': -0.11319320466783311, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.010188345797359943}, {'id': 495, 'seek': 492850, 'start': 4928.66, 'end': 4936.26, 'text': ' B bit, I will add a pending constraint. What will I add? Yes, what constraint will I add?', 'tokens': [50372, 363, 857, 11, 286, 486, 909, 257, 32110, 25534, 13, 708, 486, 286, 909, 30, 1079, 11, 437, 25534, 486, 286, 909, 30, 50752], 'temperature': 0.0, 'avg_logprob': -0.23385526483709163, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.002396309981122613}, {'id': 496, 'seek': 492850, 'start': 4938.26, 'end': 4944.9, 'text': ' Nu S, whatever that constraint is, right. So, let me,', 'tokens': [50852, 13612, 318, 11, 2035, 300, 25534, 307, 11, 558, 13, 407, 11, 718, 385, 11, 51184], 'temperature': 0.0, 'avg_logprob': -0.23385526483709163, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.002396309981122613}, {'id': 497, 'seek': 492850, 'start': 4952.74, 'end': 4954.5, 'text': ' can you, can someone dictate? Nu S.', 'tokens': [51576, 393, 291, 11, 393, 1580, 36071, 30, 13612, 318, 13, 51664], 'temperature': 0.0, 'avg_logprob': -0.23385526483709163, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.002396309981122613}, {'id': 498, 'seek': 495850, 'start': 4958.5, 'end': 4969.78, 'text': ' Nu S, right. So, this is a pending constraint and now, what is the name?', 'tokens': [50364, 13612, 318, 11, 558, 13, 407, 11, 341, 307, 257, 32110, 25534, 293, 586, 11, 437, 307, 264, 1315, 30, 50928], 'temperature': 0.0, 'avg_logprob': -0.21805826822916666, 'compression_ratio': 1.3937007874015748, 'no_speech_prob': 0.001978894229978323}, {'id': 499, 'seek': 495850, 'start': 4969.78, 'end': 4970.74, 'text': ' Amea.', 'tokens': [50928, 316, 1398, 64, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.21805826822916666, 'compression_ratio': 1.3937007874015748, 'no_speech_prob': 0.001978894229978323}, {'id': 500, 'seek': 495850, 'start': 4970.74, 'end': 4979.22, 'text': ' Amea. So, Amea, you process this constraint and see what will happen. No, first we will come here,', 'tokens': [50976, 316, 1398, 64, 13, 407, 11, 316, 1398, 64, 11, 291, 1399, 341, 25534, 293, 536, 437, 486, 1051, 13, 883, 11, 700, 321, 486, 808, 510, 11, 51400], 'temperature': 0.0, 'avg_logprob': -0.21805826822916666, 'compression_ratio': 1.3937007874015748, 'no_speech_prob': 0.001978894229978323}, {'id': 501, 'seek': 497922, 'start': 4979.860000000001, 'end': 4988.9800000000005, 'text': ' we will add an edge, let us add an edge from nu B to and then,', 'tokens': [50396, 321, 486, 909, 364, 4691, 11, 718, 505, 909, 364, 4691, 490, 3822, 363, 281, 293, 550, 11, 50852], 'temperature': 0.0, 'avg_logprob': -0.19861691497093023, 'compression_ratio': 1.2376237623762376, 'no_speech_prob': 0.008830043487250805}, {'id': 502, 'seek': 497922, 'start': 4994.820000000001, 'end': 5004.42, 'text': ' okay. So, what is there nu B? B. So, it will call propagate on', 'tokens': [51144, 1392, 13, 407, 11, 437, 307, 456, 3822, 363, 30, 363, 13, 407, 11, 309, 486, 818, 48256, 322, 51624], 'temperature': 0.0, 'avg_logprob': -0.19861691497093023, 'compression_ratio': 1.2376237623762376, 'no_speech_prob': 0.008830043487250805}, {'id': 503, 'seek': 500442, 'start': 5004.74, 'end': 5015.14, 'text': ' Y and B, okay. So, let us go there. Is the bit set? No. So, it will set it to 1 and then,', 'tokens': [50380, 398, 293, 363, 11, 1392, 13, 407, 11, 718, 505, 352, 456, 13, 1119, 264, 857, 992, 30, 883, 13, 407, 11, 309, 486, 992, 309, 281, 502, 293, 550, 11, 50900], 'temperature': 0.0, 'avg_logprob': -0.1700325796048935, 'compression_ratio': 1.4375, 'no_speech_prob': 0.00305805541574955}, {'id': 504, 'seek': 500442, 'start': 5018.1, 'end': 5020.66, 'text': ' is there any edge from Y? No. Then,', 'tokens': [51048, 307, 456, 604, 4691, 490, 398, 30, 883, 13, 1396, 11, 51176], 'temperature': 0.0, 'avg_logprob': -0.1700325796048935, 'compression_ratio': 1.4375, 'no_speech_prob': 0.00305805541574955}, {'id': 505, 'seek': 500442, 'start': 5023.7, 'end': 5032.34, 'text': ' pending, what is pending here? Nu S and B dot arg. What will it do? It will call,', 'tokens': [51328, 32110, 11, 437, 307, 32110, 510, 30, 13612, 318, 293, 363, 5893, 3882, 13, 708, 486, 309, 360, 30, 467, 486, 818, 11, 51760], 'temperature': 0.0, 'avg_logprob': -0.1700325796048935, 'compression_ratio': 1.4375, 'no_speech_prob': 0.00305805541574955}, {'id': 506, 'seek': 503234, 'start': 5032.34, 'end': 5039.3, 'text': ' it will call insert and then remove, okay. I am just removing it first,', 'tokens': [50364, 309, 486, 818, 8969, 293, 550, 4159, 11, 1392, 13, 286, 669, 445, 12720, 309, 700, 11, 50712], 'temperature': 0.0, 'avg_logprob': -0.11392707029978434, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.00015457876725122333}, {'id': 507, 'seek': 503234, 'start': 5040.900000000001, 'end': 5044.82, 'text': ' okay. It will call insert. So, what will it do in insert?', 'tokens': [50792, 1392, 13, 467, 486, 818, 8969, 13, 407, 11, 437, 486, 309, 360, 294, 8969, 30, 50988], 'temperature': 0.0, 'avg_logprob': -0.11392707029978434, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.00015457876725122333}, {'id': 508, 'seek': 503234, 'start': 5047.14, 'end': 5056.18, 'text': ' It will add an edge from nu S to B dot arg, nu S to and then,', 'tokens': [51104, 467, 486, 909, 364, 4691, 490, 3822, 318, 281, 363, 5893, 3882, 11, 3822, 318, 281, 293, 550, 11, 51556], 'temperature': 0.0, 'avg_logprob': -0.11392707029978434, 'compression_ratio': 1.5528455284552845, 'no_speech_prob': 0.00015457876725122333}, {'id': 509, 'seek': 505618, 'start': 5056.740000000001, 'end': 5062.58, 'text': ' set B. And then, for each i which is set in nu S,', 'tokens': [50392, 992, 363, 13, 400, 550, 11, 337, 1184, 741, 597, 307, 992, 294, 3822, 318, 11, 50684], 'temperature': 0.0, 'avg_logprob': -0.17703622008023195, 'compression_ratio': 1.5571428571428572, 'no_speech_prob': 0.0007191336480900645}, {'id': 510, 'seek': 505618, 'start': 5064.42, 'end': 5073.3, 'text': ' it will propagate to B dot arg. So, which bit is set? 1 bit is set. So, it will copy the 1 bit.', 'tokens': [50776, 309, 486, 48256, 281, 363, 5893, 3882, 13, 407, 11, 597, 857, 307, 992, 30, 502, 857, 307, 992, 13, 407, 11, 309, 486, 5055, 264, 502, 857, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.17703622008023195, 'compression_ratio': 1.5571428571428572, 'no_speech_prob': 0.0007191336480900645}, {'id': 511, 'seek': 505618, 'start': 5073.3, 'end': 5078.740000000001, 'text': ' So, in propagate, what will happen? Let us say, yeah, what is your name?', 'tokens': [51220, 407, 11, 294, 48256, 11, 437, 486, 1051, 30, 961, 505, 584, 11, 1338, 11, 437, 307, 428, 1315, 30, 51492], 'temperature': 0.0, 'avg_logprob': -0.17703622008023195, 'compression_ratio': 1.5571428571428572, 'no_speech_prob': 0.0007191336480900645}, {'id': 512, 'seek': 507874, 'start': 5079.3, 'end': 5085.7, 'text': ' Prof. Yes, Prof. Please tell me. So, I have to now do propagate B dot arg and S bit.', 'tokens': [50392, 6039, 13, 1079, 11, 6039, 13, 2555, 980, 385, 13, 407, 11, 286, 362, 281, 586, 360, 48256, 363, 5893, 3882, 293, 318, 857, 13, 50712], 'temperature': 0.0, 'avg_logprob': -0.18772042383913135, 'compression_ratio': 1.4836065573770492, 'no_speech_prob': 0.002320494968444109}, {'id': 513, 'seek': 507874, 'start': 5088.5, 'end': 5100.82, 'text': ' So, is that bit set in B dot arg S bit, Prof. In the bit vector, for B dot arg is the S bit set.', 'tokens': [50852, 407, 11, 307, 300, 857, 992, 294, 363, 5893, 3882, 318, 857, 11, 6039, 13, 682, 264, 857, 8062, 11, 337, 363, 5893, 3882, 307, 264, 318, 857, 992, 13, 51468], 'temperature': 0.0, 'avg_logprob': -0.18772042383913135, 'compression_ratio': 1.4836065573770492, 'no_speech_prob': 0.002320494968444109}, {'id': 514, 'seek': 510082, 'start': 5101.0599999999995, 'end': 5107.299999999999, 'text': ' For the B dot arg, the bit vector is the S bit set.', 'tokens': [50376, 1171, 264, 363, 5893, 3882, 11, 264, 857, 8062, 307, 264, 318, 857, 992, 13, 50688], 'temperature': 0.0, 'avg_logprob': -0.13054633486098138, 'compression_ratio': 1.4710144927536233, 'no_speech_prob': 0.003166748909279704}, {'id': 515, 'seek': 510082, 'start': 5110.259999999999, 'end': 5116.259999999999, 'text': ' No. So, if not, then what will I do? I will first set it. Okay, let me do that.', 'tokens': [50836, 883, 13, 407, 11, 498, 406, 11, 550, 437, 486, 286, 360, 30, 286, 486, 700, 992, 309, 13, 1033, 11, 718, 385, 360, 300, 13, 51136], 'temperature': 0.0, 'avg_logprob': -0.13054633486098138, 'compression_ratio': 1.4710144927536233, 'no_speech_prob': 0.003166748909279704}, {'id': 516, 'seek': 510082, 'start': 5117.62, 'end': 5124.42, 'text': ' And then, what will I do? For each edge that is going out of B dot arg,', 'tokens': [51204, 400, 550, 11, 437, 486, 286, 360, 30, 1171, 1184, 4691, 300, 307, 516, 484, 295, 363, 5893, 3882, 11, 51544], 'temperature': 0.0, 'avg_logprob': -0.13054633486098138, 'compression_ratio': 1.4710144927536233, 'no_speech_prob': 0.003166748909279704}, {'id': 517, 'seek': 512442, 'start': 5125.22, 'end': 5131.86, 'text': ' do you have any outgoing edges from B dot arg? No. Since, we do not have any outgoing edges,', 'tokens': [50404, 360, 291, 362, 604, 41565, 8819, 490, 363, 5893, 3882, 30, 883, 13, 4162, 11, 321, 360, 406, 362, 604, 41565, 8819, 11, 50736], 'temperature': 0.0, 'avg_logprob': -0.11703856786092122, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.00798086728900671}, {'id': 518, 'seek': 512442, 'start': 5131.86, 'end': 5139.46, 'text': ' no pending arguments, pending conditions, we are done here. Okay. So, now, let us process the other', 'tokens': [50736, 572, 32110, 12869, 11, 32110, 4487, 11, 321, 366, 1096, 510, 13, 1033, 13, 407, 11, 586, 11, 718, 505, 1399, 264, 661, 51116], 'temperature': 0.0, 'avg_logprob': -0.11703856786092122, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.00798086728900671}, {'id': 519, 'seek': 512442, 'start': 5139.46, 'end': 5146.26, 'text': ' constraints. So, we are done with all these four, we are done with these two, we are done with the', 'tokens': [51116, 18491, 13, 407, 11, 321, 366, 1096, 365, 439, 613, 1451, 11, 321, 366, 1096, 365, 613, 732, 11, 321, 366, 1096, 365, 264, 51456], 'temperature': 0.0, 'avg_logprob': -0.11703856786092122, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.00798086728900671}, {'id': 520, 'seek': 514626, 'start': 5146.26, 'end': 5155.14, 'text': ' last one, we are done, we are still, we do these three. Let us process which one? Let us say, this', 'tokens': [50364, 1036, 472, 11, 321, 366, 1096, 11, 321, 366, 920, 11, 321, 360, 613, 1045, 13, 961, 505, 1399, 597, 472, 30, 961, 505, 584, 11, 341, 50808], 'temperature': 0.0, 'avg_logprob': -0.2184611441383899, 'compression_ratio': 1.6216216216216217, 'no_speech_prob': 0.002114781877025962}, {'id': 521, 'seek': 514626, 'start': 5155.14, 'end': 5165.7, 'text': ' A, let us process this condition. Insert K.', 'tokens': [50808, 316, 11, 718, 505, 1399, 341, 4188, 13, 36487, 591, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.2184611441383899, 'compression_ratio': 1.6216216216216217, 'no_speech_prob': 0.002114781877025962}, {'id': 522, 'seek': 514626, 'start': 5165.7, 'end': 5172.02, 'text': ' Insert K, we did it, right? We had, we inserted, we set every constraint which is pending on the,', 'tokens': [51336, 36487, 591, 11, 321, 630, 309, 11, 558, 30, 492, 632, 11, 321, 27992, 11, 321, 992, 633, 25534, 597, 307, 32110, 322, 264, 11, 51652], 'temperature': 0.0, 'avg_logprob': -0.2184611441383899, 'compression_ratio': 1.6216216216216217, 'no_speech_prob': 0.002114781877025962}, {'id': 523, 'seek': 517202, 'start': 5172.02, 'end': 5178.1, 'text': ' which right-hand side is pending, we will call the insert on that constraint. So, we call the', 'tokens': [50364, 597, 558, 12, 5543, 1252, 307, 32110, 11, 321, 486, 818, 264, 8969, 322, 300, 25534, 13, 407, 11, 321, 818, 264, 50668], 'temperature': 0.0, 'avg_logprob': -0.22393127048716827, 'compression_ratio': 1.484472049689441, 'no_speech_prob': 0.002113041467964649}, {'id': 524, 'seek': 517202, 'start': 5178.1, 'end': 5190.9800000000005, 'text': ' insert for this part, do you remember? Right? Okay. Yeah, what is your name? Yes. Yes, yes.', 'tokens': [50668, 8969, 337, 341, 644, 11, 360, 291, 1604, 30, 1779, 30, 1033, 13, 865, 11, 437, 307, 428, 1315, 30, 1079, 13, 1079, 11, 2086, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.22393127048716827, 'compression_ratio': 1.484472049689441, 'no_speech_prob': 0.002113041467964649}, {'id': 525, 'seek': 517202, 'start': 5190.9800000000005, 'end': 5193.9400000000005, 'text': ' So, let us process this constraint. What will happen?', 'tokens': [51312, 407, 11, 718, 505, 1399, 341, 25534, 13, 708, 486, 1051, 30, 51460], 'temperature': 0.0, 'avg_logprob': -0.22393127048716827, 'compression_ratio': 1.484472049689441, 'no_speech_prob': 0.002113041467964649}, {'id': 526, 'seek': 519394, 'start': 5193.94, 'end': 5205.299999999999, 'text': ' Okay, is it set? It should not be. Why? Because we made a mistake, it should be in B, right? Yeah.', 'tokens': [50364, 1033, 11, 307, 309, 992, 30, 467, 820, 406, 312, 13, 1545, 30, 1436, 321, 1027, 257, 6146, 11, 309, 820, 312, 294, 363, 11, 558, 30, 865, 13, 50932], 'temperature': 0.0, 'avg_logprob': -0.3197950240104429, 'compression_ratio': 1.34, 'no_speech_prob': 0.013613109476864338}, {'id': 527, 'seek': 519394, 'start': 5205.299999999999, 'end': 5220.58, 'text': ' And then? Right now, so, correct, correct. We have to add to the pending list. What will we add? Where', 'tokens': [50932, 400, 550, 30, 1779, 586, 11, 370, 11, 3006, 11, 3006, 13, 492, 362, 281, 909, 281, 264, 32110, 1329, 13, 708, 486, 321, 909, 30, 2305, 51696], 'temperature': 0.0, 'avg_logprob': -0.3197950240104429, 'compression_ratio': 1.34, 'no_speech_prob': 0.013613109476864338}, {'id': 528, 'seek': 522058, 'start': 5220.58, 'end': 5229.3, 'text': ' will we add? Here, what will we add? For space, I will just mark it here and write below. Yeah,', 'tokens': [50364, 486, 321, 909, 30, 1692, 11, 437, 486, 321, 909, 30, 1171, 1901, 11, 286, 486, 445, 1491, 309, 510, 293, 2464, 2507, 13, 865, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.15645440419514975, 'compression_ratio': 1.3732394366197183, 'no_speech_prob': 0.05123605579137802}, {'id': 529, 'seek': 522058, 'start': 5229.3, 'end': 5250.0199999999995, 'text': ' what will I add? Nu S. Right? Good. So, this is a pending constraint. If in future, A gets added to', 'tokens': [50800, 437, 486, 286, 909, 30, 13612, 318, 13, 1779, 30, 2205, 13, 407, 11, 341, 307, 257, 32110, 25534, 13, 759, 294, 2027, 11, 316, 2170, 3869, 281, 51836], 'temperature': 0.0, 'avg_logprob': -0.15645440419514975, 'compression_ratio': 1.3732394366197183, 'no_speech_prob': 0.05123605579137802}, {'id': 530, 'seek': 525002, 'start': 5250.02, 'end': 5263.540000000001, 'text': ' Y, I will call insert on this constraint. Make sense? Okay. Now, what is your name?', 'tokens': [50364, 398, 11, 286, 486, 818, 8969, 322, 341, 25534, 13, 4387, 2020, 30, 1033, 13, 823, 11, 437, 307, 428, 1315, 30, 51040], 'temperature': 0.0, 'avg_logprob': -0.12710530258888422, 'compression_ratio': 1.2522522522522523, 'no_speech_prob': 0.10355382412672043}, {'id': 531, 'seek': 525002, 'start': 5265.700000000001, 'end': 5279.06, 'text': ' Neha. So, Neha, can you process this constraint for me?', 'tokens': [51148, 1734, 1641, 13, 407, 11, 1734, 1641, 11, 393, 291, 1399, 341, 25534, 337, 385, 30, 51816], 'temperature': 0.0, 'avg_logprob': -0.12710530258888422, 'compression_ratio': 1.2522522522522523, 'no_speech_prob': 0.10355382412672043}, {'id': 532, 'seek': 528002, 'start': 5280.660000000001, 'end': 5292.9800000000005, 'text': ' Which insert will you call, Neha? Which insert will you call? First one, second one, third one.', 'tokens': [50396, 3013, 8969, 486, 291, 818, 11, 1734, 1641, 30, 3013, 8969, 486, 291, 818, 30, 2386, 472, 11, 1150, 472, 11, 2636, 472, 13, 51012], 'temperature': 0.0, 'avg_logprob': -0.16820293560362698, 'compression_ratio': 1.5166666666666666, 'no_speech_prob': 0.0017346848035231233}, {'id': 533, 'seek': 528002, 'start': 5294.900000000001, 'end': 5302.580000000001, 'text': ' Third one, good. And third one, what will I do? Is the bit set in X, is the B bit set?', 'tokens': [51108, 12548, 472, 11, 665, 13, 400, 2636, 472, 11, 437, 486, 286, 360, 30, 1119, 264, 857, 992, 294, 1783, 11, 307, 264, 363, 857, 992, 30, 51492], 'temperature': 0.0, 'avg_logprob': -0.16820293560362698, 'compression_ratio': 1.5166666666666666, 'no_speech_prob': 0.0017346848035231233}, {'id': 534, 'seek': 530258, 'start': 5302.66, 'end': 5318.98, 'text': ' No. No. Then, what will I do? I will add a pending constraint. Okay. I will add a? Okay,', 'tokens': [50368, 883, 13, 883, 13, 1396, 11, 437, 486, 286, 360, 30, 286, 486, 909, 257, 32110, 25534, 13, 1033, 13, 286, 486, 909, 257, 30, 1033, 11, 51184], 'temperature': 0.0, 'avg_logprob': -0.3791850920646421, 'compression_ratio': 1.1578947368421053, 'no_speech_prob': 0.12408535927534103}, {'id': 535, 'seek': 531898, 'start': 5318.98, 'end': 5337.459999999999, 'text': ' what will I add? Nu Q B dot A R G. Right? Good.', 'tokens': [50364, 437, 486, 286, 909, 30, 13612, 1249, 363, 5893, 316, 497, 460, 13, 1779, 30, 2205, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.451866694859096, 'compression_ratio': 0.8545454545454545, 'no_speech_prob': 0.062308646738529205}, {'id': 536, 'seek': 533746, 'start': 5337.46, 'end': 5348.18, 'text': " Good. Chai kitne bhi chik hai? Four o'clock. We have time. Okay. And that is it, right? Okay.", 'tokens': [50364, 2205, 13, 761, 1301, 8260, 716, 272, 4954, 417, 1035, 21822, 30, 7451, 277, 6, 9023, 13, 492, 362, 565, 13, 1033, 13, 400, 300, 307, 309, 11, 558, 30, 1033, 13, 50900], 'temperature': 0.0, 'avg_logprob': -0.3510243020406583, 'compression_ratio': 1.3625730994152048, 'no_speech_prob': 0.09320919215679169}, {'id': 537, 'seek': 533746, 'start': 5348.18, 'end': 5356.66, 'text': ' Now, let us process this constraint. Who will do it? Kaun bach cha? The first one.', 'tokens': [50900, 823, 11, 718, 505, 1399, 341, 25534, 13, 2102, 486, 360, 309, 30, 10988, 409, 272, 608, 6294, 30, 440, 700, 472, 13, 51324], 'temperature': 0.0, 'avg_logprob': -0.3510243020406583, 'compression_ratio': 1.3625730994152048, 'no_speech_prob': 0.09320919215679169}, {'id': 538, 'seek': 533746, 'start': 5360.5, 'end': 5365.7, 'text': ' Okay. Is it set? IIS. It is set. Then, what will you do?', 'tokens': [51516, 1033, 13, 1119, 309, 992, 30, 286, 2343, 13, 467, 307, 992, 13, 1396, 11, 437, 486, 291, 360, 30, 51776], 'temperature': 0.0, 'avg_logprob': -0.3510243020406583, 'compression_ratio': 1.3625730994152048, 'no_speech_prob': 0.09320919215679169}, {'id': 539, 'seek': 536746, 'start': 5367.46, 'end': 5373.22, 'text': ' Then, I will call the insert. Insert on which one?', 'tokens': [50364, 1396, 11, 286, 486, 818, 264, 8969, 13, 36487, 322, 597, 472, 30, 50652], 'temperature': 0.0, 'avg_logprob': -0.2566450536251068, 'compression_ratio': 1.0229885057471264, 'no_speech_prob': 0.004965005908161402}, {'id': 540, 'seek': 536746, 'start': 5377.94, 'end': 5381.38, 'text': ' Nu Q subset of A dot A R G. Very good.', 'tokens': [50888, 13612, 1249, 25993, 295, 316, 5893, 316, 497, 460, 13, 4372, 665, 13, 51060], 'temperature': 0.0, 'avg_logprob': -0.2566450536251068, 'compression_ratio': 1.0229885057471264, 'no_speech_prob': 0.004965005908161402}, {'id': 541, 'seek': 538138, 'start': 5382.34, 'end': 5398.82, 'text': ' Oh, by the way, this is… Okay. Go ahead. So, we are calling what? Nu Q subset of A', 'tokens': [50412, 876, 11, 538, 264, 636, 11, 341, 307, 1260, 1033, 13, 1037, 2286, 13, 407, 11, 321, 366, 5141, 437, 30, 13612, 1249, 25993, 295, 316, 51236], 'temperature': 0.0, 'avg_logprob': -0.2621599779290668, 'compression_ratio': 1.2463768115942029, 'no_speech_prob': 0.012344884686172009}, {'id': 542, 'seek': 538138, 'start': 5398.82, 'end': 5407.14, 'text': ' dot A R G. So, who will… So, you will now call the insert on that, right? Okay. Yeah.', 'tokens': [51236, 5893, 316, 497, 460, 13, 407, 11, 567, 486, 1260, 407, 11, 291, 486, 586, 818, 264, 8969, 322, 300, 11, 558, 30, 1033, 13, 865, 13, 51652], 'temperature': 0.0, 'avg_logprob': -0.2621599779290668, 'compression_ratio': 1.2463768115942029, 'no_speech_prob': 0.012344884686172009}, {'id': 543, 'seek': 540714, 'start': 5407.3, 'end': 5414.900000000001, 'text': ' Prakhar. Prakhar. Okay, Prakhar. We will call the second insert and then add an?', 'tokens': [50372, 430, 11272, 5854, 13, 430, 11272, 5854, 13, 1033, 11, 430, 11272, 5854, 13, 492, 486, 818, 264, 1150, 8969, 293, 550, 909, 364, 30, 50752], 'temperature': 0.0, 'avg_logprob': -0.24785401139940536, 'compression_ratio': 1.310077519379845, 'no_speech_prob': 0.010852471925318241}, {'id': 544, 'seek': 540714, 'start': 5418.58, 'end': 5424.5, 'text': ' Nu Q to A dot A R G. I do not know why I am using two different colors. Does not matter.', 'tokens': [50936, 13612, 1249, 281, 316, 5893, 316, 497, 460, 13, 286, 360, 406, 458, 983, 286, 669, 1228, 732, 819, 4577, 13, 4402, 406, 1871, 13, 51232], 'temperature': 0.0, 'avg_logprob': -0.24785401139940536, 'compression_ratio': 1.310077519379845, 'no_speech_prob': 0.010852471925318241}, {'id': 545, 'seek': 542450, 'start': 5425.06, 'end': 5434.82, 'text': ' And then, we will call propagate on? A dot A R G.', 'tokens': [50392, 400, 550, 11, 321, 486, 818, 48256, 322, 30, 316, 5893, 316, 497, 460, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.21554916135726437, 'compression_ratio': 1.5350877192982457, 'no_speech_prob': 0.07024426758289337}, {'id': 546, 'seek': 542450, 'start': 5434.82, 'end': 5438.1, 'text': ' A dot A R G. For which bit?', 'tokens': [50880, 316, 5893, 316, 497, 460, 13, 1171, 597, 857, 30, 51044], 'temperature': 0.0, 'avg_logprob': -0.21554916135726437, 'compression_ratio': 1.5350877192982457, 'no_speech_prob': 0.07024426758289337}, {'id': 547, 'seek': 542450, 'start': 5443.62, 'end': 5453.46, 'text': ' For which bit? So, in nu Q, which bit is set? The Q bit. So, you will call propagate for Q bit on', 'tokens': [51320, 1171, 597, 857, 30, 407, 11, 294, 3822, 1249, 11, 597, 857, 307, 992, 30, 440, 1249, 857, 13, 407, 11, 291, 486, 818, 48256, 337, 1249, 857, 322, 51812], 'temperature': 0.0, 'avg_logprob': -0.21554916135726437, 'compression_ratio': 1.5350877192982457, 'no_speech_prob': 0.07024426758289337}, {'id': 548, 'seek': 545346, 'start': 5453.46, 'end': 5464.5, 'text': ' A dot A R G. Okay. What is your name? Rathuja. So, Rathuja. So, what do we do here? So,', 'tokens': [50364, 316, 5893, 316, 497, 460, 13, 1033, 13, 708, 307, 428, 1315, 30, 497, 998, 84, 2938, 13, 407, 11, 497, 998, 84, 2938, 13, 407, 11, 437, 360, 321, 360, 510, 30, 407, 11, 50916], 'temperature': 0.0, 'avg_logprob': -0.18308734893798828, 'compression_ratio': 1.3076923076923077, 'no_speech_prob': 0.0004005136725027114}, {'id': 549, 'seek': 545346, 'start': 5464.5, 'end': 5470.34, 'text': ' we have to call propagate on A dot A R G and Q. What will you do?', 'tokens': [50916, 321, 362, 281, 818, 48256, 322, 316, 5893, 316, 497, 460, 293, 1249, 13, 708, 486, 291, 360, 30, 51208], 'temperature': 0.0, 'avg_logprob': -0.18308734893798828, 'compression_ratio': 1.3076923076923077, 'no_speech_prob': 0.0004005136725027114}, {'id': 550, 'seek': 547034, 'start': 5470.34, 'end': 5484.9800000000005, 'text': ' Q is to be set. Q is to be set. If it is not set, is it already set?', 'tokens': [50364, 1249, 307, 281, 312, 992, 13, 1249, 307, 281, 312, 992, 13, 759, 309, 307, 406, 992, 11, 307, 309, 1217, 992, 30, 51096], 'temperature': 0.0, 'avg_logprob': -0.30542400905064176, 'compression_ratio': 1.2352941176470589, 'no_speech_prob': 0.016507206484675407}, {'id': 551, 'seek': 547034, 'start': 5488.74, 'end': 5491.3, 'text': ' No. So, I will set it to 1 and then?', 'tokens': [51284, 883, 13, 407, 11, 286, 486, 992, 309, 281, 502, 293, 550, 30, 51412], 'temperature': 0.0, 'avg_logprob': -0.30542400905064176, 'compression_ratio': 1.2352941176470589, 'no_speech_prob': 0.016507206484675407}, {'id': 552, 'seek': 549130, 'start': 5491.3, 'end': 5504.02, 'text': ' And then? And then? Are there any edges from A dot A R G? No. Are there any pending edges here?', 'tokens': [50364, 400, 550, 30, 400, 550, 30, 2014, 456, 604, 8819, 490, 316, 5893, 316, 497, 460, 30, 883, 13, 2014, 456, 604, 32110, 8819, 510, 30, 51000], 'temperature': 0.0, 'avg_logprob': -0.10529653119369292, 'compression_ratio': 1.8657718120805369, 'no_speech_prob': 0.006066246889531612}, {'id': 553, 'seek': 549130, 'start': 5504.74, 'end': 5512.5, 'text': ' No. Have I finished processing my constraints? Yes. Have I finished processing these constraints?', 'tokens': [51036, 883, 13, 3560, 286, 4335, 9007, 452, 18491, 30, 1079, 13, 3560, 286, 4335, 9007, 613, 18491, 30, 51424], 'temperature': 0.0, 'avg_logprob': -0.10529653119369292, 'compression_ratio': 1.8657718120805369, 'no_speech_prob': 0.006066246889531612}, {'id': 554, 'seek': 549130, 'start': 5512.5, 'end': 5519.7, 'text': ' Yes. Are there some pending constraints in some of them? Yes. I will just drop them.', 'tokens': [51424, 1079, 13, 2014, 456, 512, 32110, 18491, 294, 512, 295, 552, 30, 1079, 13, 286, 486, 445, 3270, 552, 13, 51784], 'temperature': 0.0, 'avg_logprob': -0.10529653119369292, 'compression_ratio': 1.8657718120805369, 'no_speech_prob': 0.006066246889531612}, {'id': 555, 'seek': 552130, 'start': 5521.38, 'end': 5529.3, 'text': " I will just drop because those will now won't be satisfied. Those won't be satisfied anymore. So,", 'tokens': [50368, 286, 486, 445, 3270, 570, 729, 486, 586, 1582, 380, 312, 11239, 13, 3950, 1582, 380, 312, 11239, 3602, 13, 407, 11, 50764], 'temperature': 0.0, 'avg_logprob': -0.21227938031393384, 'compression_ratio': 1.7862068965517242, 'no_speech_prob': 0.002050037495791912}, {'id': 556, 'seek': 552130, 'start': 5529.3, 'end': 5536.1, 'text': ' I will just drop them and my flow information becomes this is my flow information.', 'tokens': [50764, 286, 486, 445, 3270, 552, 293, 452, 3095, 1589, 3643, 341, 307, 452, 3095, 1589, 13, 51104], 'temperature': 0.0, 'avg_logprob': -0.21227938031393384, 'compression_ratio': 1.7862068965517242, 'no_speech_prob': 0.002050037495791912}, {'id': 557, 'seek': 552130, 'start': 5540.02, 'end': 5545.3, 'text': ' Then we will you will call propagate again. Yes. We will call propagate again.', 'tokens': [51300, 1396, 321, 486, 291, 486, 818, 48256, 797, 13, 1079, 13, 492, 486, 818, 48256, 797, 13, 51564], 'temperature': 0.0, 'avg_logprob': -0.21227938031393384, 'compression_ratio': 1.7862068965517242, 'no_speech_prob': 0.002050037495791912}, {'id': 558, 'seek': 554530, 'start': 5545.3, 'end': 5554.34, 'text': ' So, there is something interesting here. We seem to be adding constraints. We are processing these', 'tokens': [50364, 407, 11, 456, 307, 746, 1880, 510, 13, 492, 1643, 281, 312, 5127, 18491, 13, 492, 366, 9007, 613, 50816], 'temperature': 0.0, 'avg_logprob': -0.17031838976103683, 'compression_ratio': 1.7027027027027026, 'no_speech_prob': 0.003821724094450474}, {'id': 559, 'seek': 554530, 'start': 5554.9800000000005, 'end': 5560.5, 'text': ' and we are kind of adding some constraints during the processing. But still there is', 'tokens': [50848, 293, 321, 366, 733, 295, 5127, 512, 18491, 1830, 264, 9007, 13, 583, 920, 456, 307, 51124], 'temperature': 0.0, 'avg_logprob': -0.17031838976103683, 'compression_ratio': 1.7027027027027026, 'no_speech_prob': 0.003821724094450474}, {'id': 560, 'seek': 554530, 'start': 5560.5, 'end': 5563.860000000001, 'text': ' a confidence we have that it will terminate. What is the confidence?', 'tokens': [51124, 257, 6687, 321, 362, 300, 309, 486, 10761, 473, 13, 708, 307, 264, 6687, 30, 51292], 'temperature': 0.0, 'avg_logprob': -0.17031838976103683, 'compression_ratio': 1.7027027027027026, 'no_speech_prob': 0.003821724094450474}, {'id': 561, 'seek': 556386, 'start': 5563.86, 'end': 5574.9, 'text': ' Sorry. Number of these constraints are finite, but I am adding new ones.', 'tokens': [50364, 4919, 13, 5118, 295, 613, 18491, 366, 19362, 11, 457, 286, 669, 5127, 777, 2306, 13, 50916], 'temperature': 0.0, 'avg_logprob': -0.5735538959503174, 'compression_ratio': 0.972972972972973, 'no_speech_prob': 0.06905237585306168}, {'id': 562, 'seek': 557490, 'start': 5574.9, 'end': 5577.94, 'text': ' Right.', 'tokens': [50364, 1779, 13, 50516], 'temperature': 0.0, 'avg_logprob': -0.40272898732880014, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0566137358546257}, {'id': 563, 'seek': 557490, 'start': 5577.94, 'end': 5583.94, 'text': ' Either there is a change like we are always setting it.', 'tokens': [50516, 13746, 456, 307, 257, 1319, 411, 321, 366, 1009, 3287, 309, 13, 50816], 'temperature': 0.0, 'avg_logprob': -0.40272898732880014, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0566137358546257}, {'id': 564, 'seek': 557490, 'start': 5583.94, 'end': 5591.94, 'text': ' Okay. So, we are always going towards having every bit as set. We will either achieve fixed point or', 'tokens': [50816, 1033, 13, 407, 11, 321, 366, 1009, 516, 3030, 1419, 633, 857, 382, 992, 13, 492, 486, 2139, 4584, 6806, 935, 420, 51216], 'temperature': 0.0, 'avg_logprob': -0.40272898732880014, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0566137358546257}, {'id': 565, 'seek': 557490, 'start': 5591.94, 'end': 5598.339999999999, 'text': ' we will have achieved all of this. But what if I am continuously just', 'tokens': [51216, 321, 486, 362, 11042, 439, 295, 341, 13, 583, 437, 498, 286, 669, 15684, 445, 51536], 'temperature': 0.0, 'avg_logprob': -0.40272898732880014, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0566137358546257}, {'id': 566, 'seek': 557490, 'start': 5598.339999999999, 'end': 5601.94, 'text': ' processing? I am not changing anything. Nowhere I am checking for till no change.', 'tokens': [51536, 9007, 30, 286, 669, 406, 4473, 1340, 13, 823, 6703, 286, 669, 8568, 337, 4288, 572, 1319, 13, 51716], 'temperature': 0.0, 'avg_logprob': -0.40272898732880014, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0566137358546257}, {'id': 567, 'seek': 560194, 'start': 5602.099999999999, 'end': 5606.099999999999, 'text': ' Here I am not checking for till no change. Am I? But.', 'tokens': [50372, 1692, 286, 669, 406, 8568, 337, 4288, 572, 1319, 13, 2012, 286, 30, 583, 13, 50572], 'temperature': 0.0, 'avg_logprob': -0.3346568791553228, 'compression_ratio': 1.9024390243902438, 'no_speech_prob': 0.004887981805950403}, {'id': 568, 'seek': 560194, 'start': 5606.099999999999, 'end': 5613.299999999999, 'text': ' If you go back to like insert, if you try to propagate something that you have not', 'tokens': [50572, 759, 291, 352, 646, 281, 411, 8969, 11, 498, 291, 853, 281, 48256, 746, 300, 291, 362, 406, 50932], 'temperature': 0.0, 'avg_logprob': -0.3346568791553228, 'compression_ratio': 1.9024390243902438, 'no_speech_prob': 0.004887981805950403}, {'id': 569, 'seek': 560194, 'start': 5614.58, 'end': 5618.66, 'text': ' that is already set, you will not like you will not enter you will not actually enter', 'tokens': [50996, 300, 307, 1217, 992, 11, 291, 486, 406, 411, 291, 486, 406, 3242, 291, 486, 406, 767, 3242, 51200], 'temperature': 0.0, 'avg_logprob': -0.3346568791553228, 'compression_ratio': 1.9024390243902438, 'no_speech_prob': 0.004887981805950403}, {'id': 570, 'seek': 560194, 'start': 5618.66, 'end': 5624.419999999999, 'text': ' doing anything because of the if condition. Because of the if condition. If it is already', 'tokens': [51200, 884, 1340, 570, 295, 264, 498, 4188, 13, 1436, 295, 264, 498, 4188, 13, 759, 309, 307, 1217, 51488], 'temperature': 0.0, 'avg_logprob': -0.3346568791553228, 'compression_ratio': 1.9024390243902438, 'no_speech_prob': 0.004887981805950403}, {'id': 571, 'seek': 560194, 'start': 5624.419999999999, 'end': 5629.299999999999, 'text': ' set you are not doing anything. Right. But what if I am not setting anything,', 'tokens': [51488, 992, 291, 366, 406, 884, 1340, 13, 1779, 13, 583, 437, 498, 286, 669, 406, 3287, 1340, 11, 51732], 'temperature': 0.0, 'avg_logprob': -0.3346568791553228, 'compression_ratio': 1.9024390243902438, 'no_speech_prob': 0.004887981805950403}, {'id': 572, 'seek': 562930, 'start': 5629.3, 'end': 5632.1, 'text': ' but I am continuously calling propagate insert, propagate insert.', 'tokens': [50364, 457, 286, 669, 15684, 5141, 48256, 8969, 11, 48256, 8969, 13, 50504], 'temperature': 0.0, 'avg_logprob': -0.15124068790011935, 'compression_ratio': 1.7235023041474655, 'no_speech_prob': 0.0040675001218914986}, {'id': 573, 'seek': 562930, 'start': 5632.1, 'end': 5641.14, 'text': ' But I am adding newer constraints. That is a good point. Number of constraints', 'tokens': [50504, 583, 286, 669, 5127, 17628, 18491, 13, 663, 307, 257, 665, 935, 13, 5118, 295, 18491, 50956], 'temperature': 0.0, 'avg_logprob': -0.15124068790011935, 'compression_ratio': 1.7235023041474655, 'no_speech_prob': 0.0040675001218914986}, {'id': 574, 'seek': 562930, 'start': 5641.14, 'end': 5645.78, 'text': ' are finite, but even the ones on the right hand side the conditional ones that I may add', 'tokens': [50956, 366, 19362, 11, 457, 754, 264, 2306, 322, 264, 558, 1011, 1252, 264, 27708, 2306, 300, 286, 815, 909, 51188], 'temperature': 0.0, 'avg_logprob': -0.15124068790011935, 'compression_ratio': 1.7235023041474655, 'no_speech_prob': 0.0040675001218914986}, {'id': 575, 'seek': 562930, 'start': 5645.78, 'end': 5648.66, 'text': ' that list is finite. There none of these are recursive.', 'tokens': [51188, 300, 1329, 307, 19362, 13, 821, 6022, 295, 613, 366, 20560, 488, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.15124068790011935, 'compression_ratio': 1.7235023041474655, 'no_speech_prob': 0.0040675001218914986}, {'id': 576, 'seek': 562930, 'start': 5651.38, 'end': 5656.02, 'text': ' So, the number of times I will process them is finite. In the worst case I will call', 'tokens': [51468, 407, 11, 264, 1230, 295, 1413, 286, 486, 1399, 552, 307, 19362, 13, 682, 264, 5855, 1389, 286, 486, 818, 51700], 'temperature': 0.0, 'avg_logprob': -0.15124068790011935, 'compression_ratio': 1.7235023041474655, 'no_speech_prob': 0.0040675001218914986}, {'id': 577, 'seek': 565930, 'start': 5660.02, 'end': 5667.46, 'text': ' okay process these and these. But is it possible that within them while processing them the', 'tokens': [50400, 1392, 1399, 613, 293, 613, 13, 583, 307, 309, 1944, 300, 1951, 552, 1339, 9007, 552, 264, 50772], 'temperature': 0.0, 'avg_logprob': -0.19244384765625, 'compression_ratio': 1.4610389610389611, 'no_speech_prob': 0.002601673360913992}, {'id': 578, 'seek': 565930, 'start': 5667.46, 'end': 5672.66, 'text': ' propagate which is a recursive function I will keep on recursively calling forever.', 'tokens': [50772, 48256, 597, 307, 257, 20560, 488, 2445, 286, 486, 1066, 322, 20560, 3413, 5141, 5680, 13, 51032], 'temperature': 0.0, 'avg_logprob': -0.19244384765625, 'compression_ratio': 1.4610389610389611, 'no_speech_prob': 0.002601673360913992}, {'id': 579, 'seek': 565930, 'start': 5676.42, 'end': 5677.22, 'text': ' What is the guarantee?', 'tokens': [51220, 708, 307, 264, 10815, 30, 51260], 'temperature': 0.0, 'avg_logprob': -0.19244384765625, 'compression_ratio': 1.4610389610389611, 'no_speech_prob': 0.002601673360913992}, {'id': 580, 'seek': 565930, 'start': 5682.74, 'end': 5684.18, 'text': ' No, if the bit is not set.', 'tokens': [51536, 883, 11, 498, 264, 857, 307, 406, 992, 13, 51608], 'temperature': 0.0, 'avg_logprob': -0.19244384765625, 'compression_ratio': 1.4610389610389611, 'no_speech_prob': 0.002601673360913992}, {'id': 581, 'seek': 568418, 'start': 5684.18, 'end': 5694.26, 'text': ' If the bit is set I would not call it. So, you will never have a infinite this thing.', 'tokens': [50364, 759, 264, 857, 307, 992, 286, 576, 406, 818, 309, 13, 407, 11, 291, 486, 1128, 362, 257, 13785, 341, 551, 13, 50868], 'temperature': 0.0, 'avg_logprob': -0.27200704721304086, 'compression_ratio': 1.4764705882352942, 'no_speech_prob': 0.0016210051253437996}, {'id': 582, 'seek': 568418, 'start': 5695.06, 'end': 5700.02, 'text': ' Right. No, see these things are important. I mean they look subtle, but when you design', 'tokens': [50908, 1779, 13, 883, 11, 536, 613, 721, 366, 1021, 13, 286, 914, 436, 574, 13743, 11, 457, 562, 291, 1715, 51156], 'temperature': 0.0, 'avg_logprob': -0.27200704721304086, 'compression_ratio': 1.4764705882352942, 'no_speech_prob': 0.0016210051253437996}, {'id': 583, 'seek': 568418, 'start': 5700.02, 'end': 5708.42, 'text': ' your own algorithms you should be able to argue that yes this will terminate.', 'tokens': [51156, 428, 1065, 14642, 291, 820, 312, 1075, 281, 9695, 300, 2086, 341, 486, 10761, 473, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.27200704721304086, 'compression_ratio': 1.4764705882352942, 'no_speech_prob': 0.0016210051253437996}, {'id': 584, 'seek': 571418, 'start': 5714.18, 'end': 5738.900000000001, 'text': ' So, if you have N2 for the example we have shown here right where is the second example?', 'tokens': [50364, 407, 11, 498, 291, 362, 426, 17, 337, 264, 1365, 321, 362, 4898, 510, 558, 689, 307, 264, 1150, 1365, 30, 51600], 'temperature': 0.0, 'avg_logprob': -0.38369625091552734, 'compression_ratio': 1.1139240506329113, 'no_speech_prob': 0.29354968667030334}, {'id': 585, 'seek': 573890, 'start': 5738.9, 'end': 5746.9, 'text': ' Where is the second example? For this example also you will see the constraints are much', 'tokens': [50364, 2305, 307, 264, 1150, 1365, 30, 1171, 341, 1365, 611, 291, 486, 536, 264, 18491, 366, 709, 50764], 'temperature': 0.0, 'avg_logprob': -0.23216335109022798, 'compression_ratio': 1.548780487804878, 'no_speech_prob': 0.002627977868542075}, {'id': 586, 'seek': 573890, 'start': 5746.9, 'end': 5753.46, 'text': ' simpler. There are a few direct things. Then you have bunch of conditionals,', 'tokens': [50764, 18587, 13, 821, 366, 257, 1326, 2047, 721, 13, 1396, 291, 362, 3840, 295, 4188, 1124, 11, 51092], 'temperature': 0.0, 'avg_logprob': -0.23216335109022798, 'compression_ratio': 1.548780487804878, 'no_speech_prob': 0.002627977868542075}, {'id': 587, 'seek': 573890, 'start': 5754.339999999999, 'end': 5765.0599999999995, 'text': ' but none of them will get satisfied because you have x will have D, B will have this and', 'tokens': [51136, 457, 6022, 295, 552, 486, 483, 11239, 570, 291, 362, 2031, 486, 362, 413, 11, 363, 486, 362, 341, 293, 51672], 'temperature': 0.0, 'avg_logprob': -0.23216335109022798, 'compression_ratio': 1.548780487804878, 'no_speech_prob': 0.002627977868542075}, {'id': 588, 'seek': 576890, 'start': 5769.54, 'end': 5773.7, 'text': ' this. There is nothing complicated here. I mean you should be able to just run the same', 'tokens': [50396, 341, 13, 821, 307, 1825, 6179, 510, 13, 286, 914, 291, 820, 312, 1075, 281, 445, 1190, 264, 912, 50604], 'temperature': 0.0, 'avg_logprob': -0.24970417712108198, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.003221232444047928}, {'id': 589, 'seek': 576890, 'start': 5773.7, 'end': 5780.42, 'text': ' thing again. Unless if some one of you is stuck we will go over the second example or', 'tokens': [50604, 551, 797, 13, 16581, 498, 512, 472, 295, 291, 307, 5541, 321, 486, 352, 670, 264, 1150, 1365, 420, 50940], 'temperature': 0.0, 'avg_logprob': -0.24970417712108198, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.003221232444047928}, {'id': 590, 'seek': 576890, 'start': 5780.42, 'end': 5785.219999999999, 'text': ' if you think the second example should be you understand the concept then we will skip the', 'tokens': [50940, 498, 291, 519, 264, 1150, 1365, 820, 312, 291, 1223, 264, 3410, 550, 321, 486, 10023, 264, 51180], 'temperature': 0.0, 'avg_logprob': -0.24970417712108198, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.003221232444047928}, {'id': 591, 'seek': 576890, 'start': 5785.219999999999, 'end': 5791.86, 'text': ' second example. Can you skip the second example should you go over it? Skip right okay.', 'tokens': [51180, 1150, 1365, 13, 1664, 291, 10023, 264, 1150, 1365, 820, 291, 352, 670, 309, 30, 46405, 558, 1392, 13, 51512], 'temperature': 0.0, 'avg_logprob': -0.24970417712108198, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.003221232444047928}, {'id': 592, 'seek': 579890, 'start': 5799.54, 'end': 5813.94, 'text': ' Then so what is the complexity of this algorithm by the way? Complexity I mean why am I asking', 'tokens': [50396, 1396, 370, 437, 307, 264, 14024, 295, 341, 9284, 538, 264, 636, 30, 41184, 507, 286, 914, 983, 669, 286, 3365, 51116], 'temperature': 0.0, 'avg_logprob': -0.24041758643256295, 'compression_ratio': 1.338235294117647, 'no_speech_prob': 0.008306954987347126}, {'id': 593, 'seek': 579890, 'start': 5813.94, 'end': 5823.7, 'text': ' that? No, no we have to ask. So, let us say the program is of size N right N lines. So,', 'tokens': [51116, 300, 30, 883, 11, 572, 321, 362, 281, 1029, 13, 407, 11, 718, 505, 584, 264, 1461, 307, 295, 2744, 426, 558, 426, 3876, 13, 407, 11, 51604], 'temperature': 0.0, 'avg_logprob': -0.24041758643256295, 'compression_ratio': 1.338235294117647, 'no_speech_prob': 0.008306954987347126}, {'id': 594, 'seek': 582370, 'start': 5823.7, 'end': 5838.66, 'text': ' there are N classes. So, or if I give you N constraints how much time will it take?', 'tokens': [50364, 456, 366, 426, 5359, 13, 407, 11, 420, 498, 286, 976, 291, 426, 18491, 577, 709, 565, 486, 309, 747, 30, 51112], 'temperature': 0.0, 'avg_logprob': -0.259570379514952, 'compression_ratio': 1.1711711711711712, 'no_speech_prob': 0.06748123466968536}, {'id': 595, 'seek': 582370, 'start': 5840.179999999999, 'end': 5845.62, 'text': ' You do not like such complexity things. Sorry.', 'tokens': [51188, 509, 360, 406, 411, 1270, 14024, 721, 13, 4919, 13, 51460], 'temperature': 0.0, 'avg_logprob': -0.259570379514952, 'compression_ratio': 1.1711711711711712, 'no_speech_prob': 0.06748123466968536}, {'id': 596, 'seek': 584562, 'start': 5845.62, 'end': 5859.78, 'text': ' Give it as a homework. Yeah, we will help understand.', 'tokens': [50364, 5303, 309, 382, 257, 14578, 13, 865, 11, 321, 486, 854, 1223, 13, 51072], 'temperature': 0.0, 'avg_logprob': -0.2710609951534787, 'compression_ratio': 1.1754385964912282, 'no_speech_prob': 0.007858091965317726}, {'id': 597, 'seek': 584562, 'start': 5862.66, 'end': 5866.9, 'text': ' So, what is the complexity of this? Let us look at the propagate function right.', 'tokens': [51216, 407, 11, 437, 307, 264, 14024, 295, 341, 30, 961, 505, 574, 412, 264, 48256, 2445, 558, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.2710609951534787, 'compression_ratio': 1.1754385964912282, 'no_speech_prob': 0.007858091965317726}, {'id': 598, 'seek': 586690, 'start': 5866.9, 'end': 5880.82, 'text': ' Wait how many bits can be there here? At most N, N classes N. So, I may call propagate N number', 'tokens': [50364, 3802, 577, 867, 9239, 393, 312, 456, 510, 30, 1711, 881, 426, 11, 426, 5359, 426, 13, 407, 11, 286, 815, 818, 48256, 426, 1230, 51060], 'temperature': 0.0, 'avg_logprob': -0.1506407618522644, 'compression_ratio': 1.7839506172839505, 'no_speech_prob': 0.00931750237941742}, {'id': 599, 'seek': 586690, 'start': 5880.82, 'end': 5887.7, 'text': ' of times. So, the cost of this insert is N times propagate. Cost of this one is no this is cost of', 'tokens': [51060, 295, 1413, 13, 407, 11, 264, 2063, 295, 341, 8969, 307, 426, 1413, 48256, 13, 20863, 295, 341, 472, 307, 572, 341, 307, 2063, 295, 51404], 'temperature': 0.0, 'avg_logprob': -0.1506407618522644, 'compression_ratio': 1.7839506172839505, 'no_speech_prob': 0.00931750237941742}, {'id': 600, 'seek': 586690, 'start': 5887.7, 'end': 5894.259999999999, 'text': ' this one is cost of insert which is same as N times propagate this is propagate. So, if we get', 'tokens': [51404, 341, 472, 307, 2063, 295, 8969, 597, 307, 912, 382, 426, 1413, 48256, 341, 307, 48256, 13, 407, 11, 498, 321, 483, 51732], 'temperature': 0.0, 'avg_logprob': -0.1506407618522644, 'compression_ratio': 1.7839506172839505, 'no_speech_prob': 0.00931750237941742}, {'id': 601, 'seek': 589426, 'start': 5894.26, 'end': 5899.9400000000005, 'text': ' the cost of propagate we are in business. Okay, what is the cost of propagate?', 'tokens': [50364, 264, 2063, 295, 48256, 321, 366, 294, 1606, 13, 1033, 11, 437, 307, 264, 2063, 295, 48256, 30, 50648], 'temperature': 0.0, 'avg_logprob': -0.17876038551330567, 'compression_ratio': 1.3495145631067962, 'no_speech_prob': 0.04181404784321785}, {'id': 602, 'seek': 589426, 'start': 5903.06, 'end': 5912.42, 'text': ' How many edges can be there? N edges. So, N times propagate.', 'tokens': [50804, 1012, 867, 8819, 393, 312, 456, 30, 426, 8819, 13, 407, 11, 426, 1413, 48256, 13, 51272], 'temperature': 0.0, 'avg_logprob': -0.17876038551330567, 'compression_ratio': 1.3495145631067962, 'no_speech_prob': 0.04181404784321785}, {'id': 603, 'seek': 591242, 'start': 5912.42, 'end': 5930.9, 'text': ' Sorry. Yeah, in the worst case all are N order N.', 'tokens': [50364, 4919, 13, 865, 11, 294, 264, 5855, 1389, 439, 366, 426, 1668, 426, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.3997796002556296, 'compression_ratio': 0.8596491228070176, 'no_speech_prob': 0.02831028215587139}, {'id': 604, 'seek': 594242, 'start': 5942.66, 'end': 5961.78, 'text': ' So, for each correct for each Xc I am doing for one specific i. How many times for that i I will', 'tokens': [50376, 407, 11, 337, 1184, 3006, 337, 1184, 1783, 66, 286, 669, 884, 337, 472, 2685, 741, 13, 1012, 867, 1413, 337, 300, 741, 286, 486, 51332], 'temperature': 0.0, 'avg_logprob': -0.3540699399750808, 'compression_ratio': 1.1294117647058823, 'no_speech_prob': 0.04185865446925163}, {'id': 605, 'seek': 596178, 'start': 5961.78, 'end': 5971.54, 'text': ' call propagate only for number of them not more than that. But each one of them', 'tokens': [50364, 818, 48256, 787, 337, 1230, 295, 552, 406, 544, 813, 300, 13, 583, 1184, 472, 295, 552, 50852], 'temperature': 0.0, 'avg_logprob': -0.12060276237693993, 'compression_ratio': 1.6467065868263473, 'no_speech_prob': 0.014443482272326946}, {'id': 606, 'seek': 596178, 'start': 5975.86, 'end': 5981.86, 'text': ' from X I may call propagate for Y from Y I may call for Z. But this whole chain is maximum bound', 'tokens': [51068, 490, 1783, 286, 815, 818, 48256, 337, 398, 490, 398, 286, 815, 818, 337, 1176, 13, 583, 341, 1379, 5021, 307, 6674, 5472, 51368], 'temperature': 0.0, 'avg_logprob': -0.12060276237693993, 'compression_ratio': 1.6467065868263473, 'no_speech_prob': 0.014443482272326946}, {'id': 607, 'seek': 596178, 'start': 5981.86, 'end': 5990.42, 'text': ' by N number of times. It is not N times N times N times N right. Why? Because there may be an edge', 'tokens': [51368, 538, 426, 1230, 295, 1413, 13, 467, 307, 406, 426, 1413, 426, 1413, 426, 1413, 426, 558, 13, 1545, 30, 1436, 456, 815, 312, 364, 4691, 51796], 'temperature': 0.0, 'avg_logprob': -0.12060276237693993, 'compression_ratio': 1.6467065868263473, 'no_speech_prob': 0.014443482272326946}, {'id': 608, 'seek': 599042, 'start': 5990.42, 'end': 5998.26, 'text': ' from A to B, B to C and C to B again. But I will not process this B second time because that bit', 'tokens': [50364, 490, 316, 281, 363, 11, 363, 281, 383, 293, 383, 281, 363, 797, 13, 583, 286, 486, 406, 1399, 341, 363, 1150, 565, 570, 300, 857, 50756], 'temperature': 0.0, 'avg_logprob': -0.11579743298617276, 'compression_ratio': 1.3428571428571427, 'no_speech_prob': 0.0008502698037773371}, {'id': 609, 'seek': 599042, 'start': 5998.26, 'end': 6010.74, 'text': ' is already set. So, what I will do? So, this propagate here will only be called N number of', 'tokens': [50756, 307, 1217, 992, 13, 407, 11, 437, 286, 486, 360, 30, 407, 11, 341, 48256, 510, 486, 787, 312, 1219, 426, 1230, 295, 51380], 'temperature': 0.0, 'avg_logprob': -0.11579743298617276, 'compression_ratio': 1.3428571428571427, 'no_speech_prob': 0.0008502698037773371}, {'id': 610, 'seek': 601074, 'start': 6010.74, 'end': 6021.0599999999995, 'text': ' times recursively or otherwise. Either I am doing it for all my edges or by recursion at most N times.', 'tokens': [50364, 1413, 20560, 3413, 420, 5911, 13, 13746, 286, 669, 884, 309, 337, 439, 452, 8819, 420, 538, 20560, 313, 412, 881, 426, 1413, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.14687980924333846, 'compression_ratio': 1.4375, 'no_speech_prob': 0.011208745650947094}, {'id': 611, 'seek': 601074, 'start': 6023.38, 'end': 6034.34, 'text': ' So, it is not going ever right. So, then so the cost of so I am calling propagate here N number of times', 'tokens': [50996, 407, 11, 309, 307, 406, 516, 1562, 558, 13, 407, 11, 550, 370, 264, 2063, 295, 370, 286, 669, 5141, 48256, 510, 426, 1230, 295, 1413, 51544], 'temperature': 0.0, 'avg_logprob': -0.14687980924333846, 'compression_ratio': 1.4375, 'no_speech_prob': 0.011208745650947094}, {'id': 612, 'seek': 603434, 'start': 6035.14, 'end': 6046.66, 'text': ' and besides this for loop what else am I doing. So, in each of these N times what is the maximum', 'tokens': [50404, 293, 11868, 341, 337, 6367, 437, 1646, 669, 286, 884, 13, 407, 11, 294, 1184, 295, 613, 426, 1413, 437, 307, 264, 6674, 50980], 'temperature': 0.0, 'avg_logprob': -0.15125751495361328, 'compression_ratio': 1.4461538461538461, 'no_speech_prob': 0.0015930497320368886}, {'id': 613, 'seek': 603434, 'start': 6046.66, 'end': 6057.860000000001, 'text': ' I can do? I will call I will call the insert. What is the cost of that insert? What type of', 'tokens': [50980, 286, 393, 360, 30, 286, 486, 818, 286, 486, 818, 264, 8969, 13, 708, 307, 264, 2063, 295, 300, 8969, 30, 708, 2010, 295, 51540], 'temperature': 0.0, 'avg_logprob': -0.15125751495361328, 'compression_ratio': 1.4461538461538461, 'no_speech_prob': 0.0015930497320368886}, {'id': 614, 'seek': 605786, 'start': 6057.94, 'end': 6068.5, 'text': ' constraint am I adding here? A subset constraint. I am adding a subset constraint.', 'tokens': [50368, 25534, 669, 286, 5127, 510, 30, 316, 25993, 25534, 13, 286, 669, 5127, 257, 25993, 25534, 13, 50896], 'temperature': 0.0, 'avg_logprob': -0.26765184932284886, 'compression_ratio': 1.4, 'no_speech_prob': 0.45119738578796387}, {'id': 615, 'seek': 605786, 'start': 6071.0599999999995, 'end': 6078.5, 'text': ' What is the cost of that now? He does not like it.', 'tokens': [51024, 708, 307, 264, 2063, 295, 300, 586, 30, 634, 775, 406, 411, 309, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.26765184932284886, 'compression_ratio': 1.4, 'no_speech_prob': 0.45119738578796387}, {'id': 616, 'seek': 608786, 'start': 6088.259999999999, 'end': 6093.299999999999, 'text': ' So, if you look at this insert here this is always a subset constraint of this sort', 'tokens': [50384, 407, 11, 498, 291, 574, 412, 341, 8969, 510, 341, 307, 1009, 257, 25993, 25534, 295, 341, 1333, 50636], 'temperature': 0.0, 'avg_logprob': -0.12271902901785714, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.0015644525410607457}, {'id': 617, 'seek': 608786, 'start': 6095.0599999999995, 'end': 6105.38, 'text': ' right. When you called the propagate on a node for A bit it may lead to calling propagate on', 'tokens': [50724, 558, 13, 1133, 291, 1219, 264, 48256, 322, 257, 9984, 337, 316, 857, 309, 815, 1477, 281, 5141, 48256, 322, 51240], 'temperature': 0.0, 'avg_logprob': -0.12271902901785714, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.0015644525410607457}, {'id': 618, 'seek': 608786, 'start': 6105.38, 'end': 6112.099999999999, 'text': ' how many other bits? See for each of the bits it may call. You have called it for one bit here.', 'tokens': [51240, 577, 867, 661, 9239, 30, 3008, 337, 1184, 295, 264, 9239, 309, 815, 818, 13, 509, 362, 1219, 309, 337, 472, 857, 510, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.12271902901785714, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.0015644525410607457}, {'id': 619, 'seek': 611210, 'start': 6113.06, 'end': 6118.900000000001, 'text': ' You have called it for one bit, but you are calling insert k some other', 'tokens': [50412, 509, 362, 1219, 309, 337, 472, 857, 11, 457, 291, 366, 5141, 8969, 350, 512, 661, 50704], 'temperature': 0.0, 'avg_logprob': -0.10580395929741138, 'compression_ratio': 1.4723926380368098, 'no_speech_prob': 0.0003607493999879807}, {'id': 620, 'seek': 611210, 'start': 6120.9800000000005, 'end': 6128.5, 'text': ' new edge completely new edge. In that edge it could be from P to Q. In P you may have some', 'tokens': [50808, 777, 4691, 2584, 777, 4691, 13, 682, 300, 4691, 309, 727, 312, 490, 430, 281, 1249, 13, 682, 430, 291, 815, 362, 512, 51184], 'temperature': 0.0, 'avg_logprob': -0.10580395929741138, 'compression_ratio': 1.4723926380368098, 'no_speech_prob': 0.0003607493999879807}, {'id': 621, 'seek': 611210, 'start': 6128.5, 'end': 6133.780000000001, 'text': ' how many bits? N bits set. For each of those bits you have to call propagate.', 'tokens': [51184, 577, 867, 9239, 30, 426, 9239, 992, 13, 1171, 1184, 295, 729, 9239, 291, 362, 281, 818, 48256, 13, 51448], 'temperature': 0.0, 'avg_logprob': -0.10580395929741138, 'compression_ratio': 1.4723926380368098, 'no_speech_prob': 0.0003607493999879807}, {'id': 622, 'seek': 613378, 'start': 6134.58, 'end': 6145.7, 'text': ' So, N bits for each of those N you will come back here. So, this is this propagate recursively', 'tokens': [50404, 407, 11, 426, 9239, 337, 1184, 295, 729, 426, 291, 486, 808, 646, 510, 13, 407, 11, 341, 307, 341, 48256, 20560, 3413, 50960], 'temperature': 0.0, 'avg_logprob': -0.13200520495979154, 'compression_ratio': 1.3565891472868217, 'no_speech_prob': 0.0005019032396376133}, {'id': 623, 'seek': 613378, 'start': 6145.7, 'end': 6156.42, 'text': ' can be called N times and then again you will call insert. So, what is the cost?', 'tokens': [50960, 393, 312, 1219, 426, 1413, 293, 550, 797, 291, 486, 818, 8969, 13, 407, 11, 437, 307, 264, 2063, 30, 51496], 'temperature': 0.0, 'avg_logprob': -0.13200520495979154, 'compression_ratio': 1.3565891472868217, 'no_speech_prob': 0.0005019032396376133}, {'id': 624, 'seek': 615642, 'start': 6156.42, 'end': 6167.06, 'text': ' See at most I am calling this how many times am I calling this propagate function?', 'tokens': [50364, 3008, 412, 881, 286, 669, 5141, 341, 577, 867, 1413, 669, 286, 5141, 341, 48256, 2445, 30, 50896], 'temperature': 0.0, 'avg_logprob': -0.12101866648747371, 'compression_ratio': 1.5766423357664234, 'no_speech_prob': 0.0010115436743944883}, {'id': 625, 'seek': 615642, 'start': 6170.66, 'end': 6173.46, 'text': ' Again N times, but I have already', 'tokens': [51076, 3764, 426, 1413, 11, 457, 286, 362, 1217, 51216], 'temperature': 0.0, 'avg_logprob': -0.12101866648747371, 'compression_ratio': 1.5766423357664234, 'no_speech_prob': 0.0010115436743944883}, {'id': 626, 'seek': 615642, 'start': 6177.38, 'end': 6183.38, 'text': ' counted for when I am counting this insert I have already said how many constraints do I have order', 'tokens': [51412, 20150, 337, 562, 286, 669, 13251, 341, 8969, 286, 362, 1217, 848, 577, 867, 18491, 360, 286, 362, 1668, 51712], 'temperature': 0.0, 'avg_logprob': -0.12101866648747371, 'compression_ratio': 1.5766423357664234, 'no_speech_prob': 0.0010115436743944883}, {'id': 627, 'seek': 618338, 'start': 6183.38, 'end': 6188.66, 'text': ' N including the right side. I have already taken into consideration how many times will I call that.', 'tokens': [50364, 426, 3009, 264, 558, 1252, 13, 286, 362, 1217, 2726, 666, 12381, 577, 867, 1413, 486, 286, 818, 300, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.143473910302231, 'compression_ratio': 1.86, 'no_speech_prob': 0.0027114059776067734}, {'id': 628, 'seek': 618338, 'start': 6188.66, 'end': 6196.58, 'text': ' So, this is N times whatever the cost of this. So, N times N times that is N square', 'tokens': [50628, 407, 11, 341, 307, 426, 1413, 2035, 264, 2063, 295, 341, 13, 407, 11, 426, 1413, 426, 1413, 300, 307, 426, 3732, 51024], 'temperature': 0.0, 'avg_logprob': -0.143473910302231, 'compression_ratio': 1.86, 'no_speech_prob': 0.0027114059776067734}, {'id': 629, 'seek': 618338, 'start': 6197.62, 'end': 6202.9800000000005, 'text': ' I may have to do something more. So, N square times I may have to process the constraints.', 'tokens': [51076, 286, 815, 362, 281, 360, 746, 544, 13, 407, 11, 426, 3732, 1413, 286, 815, 362, 281, 1399, 264, 18491, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.143473910302231, 'compression_ratio': 1.86, 'no_speech_prob': 0.0027114059776067734}, {'id': 630, 'seek': 618338, 'start': 6202.9800000000005, 'end': 6211.46, 'text': ' So, N cube times. So, do not we should not over count this how many times will I call this total', 'tokens': [51344, 407, 11, 426, 13728, 1413, 13, 407, 11, 360, 406, 321, 820, 406, 670, 1207, 341, 577, 867, 1413, 486, 286, 818, 341, 3217, 51768], 'temperature': 0.0, 'avg_logprob': -0.143473910302231, 'compression_ratio': 1.86, 'no_speech_prob': 0.0027114059776067734}, {'id': 631, 'seek': 621146, 'start': 6211.46, 'end': 6217.62, 'text': ' N times either directly or via conditional. I should not say directly I will count once', 'tokens': [50364, 426, 1413, 2139, 3838, 420, 5766, 27708, 13, 286, 820, 406, 584, 3838, 286, 486, 1207, 1564, 50672], 'temperature': 0.0, 'avg_logprob': -0.15114148022377327, 'compression_ratio': 1.7278481012658229, 'no_speech_prob': 0.0006003851303830743}, {'id': 632, 'seek': 621146, 'start': 6217.62, 'end': 6223.86, 'text': ' and conditional again I will count once let us not do that total I will call it N times.', 'tokens': [50672, 293, 27708, 797, 286, 486, 1207, 1564, 718, 505, 406, 360, 300, 3217, 286, 486, 818, 309, 426, 1413, 13, 50984], 'temperature': 0.0, 'avg_logprob': -0.15114148022377327, 'compression_ratio': 1.7278481012658229, 'no_speech_prob': 0.0006003851303830743}, {'id': 633, 'seek': 621146, 'start': 6224.9, 'end': 6240.5, 'text': ' So, every time I call I may process this and I will. So, this is N times N square. So, I will do', 'tokens': [51036, 407, 11, 633, 565, 286, 818, 286, 815, 1399, 341, 293, 286, 486, 13, 407, 11, 341, 307, 426, 1413, 426, 3732, 13, 407, 11, 286, 486, 360, 51816], 'temperature': 0.0, 'avg_logprob': -0.15114148022377327, 'compression_ratio': 1.7278481012658229, 'no_speech_prob': 0.0006003851303830743}, {'id': 634, 'seek': 624050, 'start': 6240.5, 'end': 6253.7, 'text': ' N cube amount of time at most. So, you can I mean there is another way to calculate if you care I', 'tokens': [50364, 426, 13728, 2372, 295, 565, 412, 881, 13, 407, 11, 291, 393, 286, 914, 456, 307, 1071, 636, 281, 8873, 498, 291, 1127, 286, 51024], 'temperature': 0.0, 'avg_logprob': -0.11126512289047241, 'compression_ratio': 1.127906976744186, 'no_speech_prob': 0.0015965113416314125}, {'id': 635, 'seek': 625370, 'start': 6253.7, 'end': 6270.5, 'text': ' mean there are N nodes up to N square edges you will for each at each call site you will have', 'tokens': [50364, 914, 456, 366, 426, 13891, 493, 281, 426, 3732, 8819, 291, 486, 337, 1184, 412, 1184, 818, 3621, 291, 486, 362, 51204], 'temperature': 0.0, 'avg_logprob': -0.13159607887268066, 'compression_ratio': 1.4621212121212122, 'no_speech_prob': 0.002792789600789547}, {'id': 636, 'seek': 625370, 'start': 6270.5, 'end': 6278.34, 'text': ' N possible calls N possible classes and you will add N number of constraints. So, that is O N cube.', 'tokens': [51204, 426, 1944, 5498, 426, 1944, 5359, 293, 291, 486, 909, 426, 1230, 295, 18491, 13, 407, 11, 300, 307, 422, 426, 13728, 13, 51596], 'temperature': 0.0, 'avg_logprob': -0.13159607887268066, 'compression_ratio': 1.4621212121212122, 'no_speech_prob': 0.002792789600789547}, {'id': 637, 'seek': 627834, 'start': 6279.3, 'end': 6287.78, 'text': ' So, the work done at most is it is kind of bound by that, but if we calculate from the propagate', 'tokens': [50412, 407, 11, 264, 589, 1096, 412, 881, 307, 309, 307, 733, 295, 5472, 538, 300, 11, 457, 498, 321, 8873, 490, 264, 48256, 50836], 'temperature': 0.0, 'avg_logprob': -0.1270590220412163, 'compression_ratio': 1.558659217877095, 'no_speech_prob': 0.0004908621194772422}, {'id': 638, 'seek': 627834, 'start': 6287.78, 'end': 6293.9400000000005, 'text': ' side we say how many times it is called N square number I mean for each call you are calling once', 'tokens': [50836, 1252, 321, 584, 577, 867, 1413, 309, 307, 1219, 426, 3732, 1230, 286, 914, 337, 1184, 818, 291, 366, 5141, 1564, 51144], 'temperature': 0.0, 'avg_logprob': -0.1270590220412163, 'compression_ratio': 1.558659217877095, 'no_speech_prob': 0.0004908621194772422}, {'id': 639, 'seek': 627834, 'start': 6293.9400000000005, 'end': 6300.900000000001, 'text': ' propagate that is also N cube. Moral of the story it is a N cube algorithm on paper,', 'tokens': [51144, 48256, 300, 307, 611, 426, 13728, 13, 5146, 304, 295, 264, 1657, 309, 307, 257, 426, 13728, 9284, 322, 3035, 11, 51492], 'temperature': 0.0, 'avg_logprob': -0.1270590220412163, 'compression_ratio': 1.558659217877095, 'no_speech_prob': 0.0004908621194772422}, {'id': 640, 'seek': 630090, 'start': 6301.86, 'end': 6311.0599999999995, 'text': ' but as we have seen in practice it runs much faster. So, it is a common thing that people', 'tokens': [50412, 457, 382, 321, 362, 1612, 294, 3124, 309, 6676, 709, 4663, 13, 407, 11, 309, 307, 257, 2689, 551, 300, 561, 50872], 'temperature': 0.0, 'avg_logprob': -0.21311476693224551, 'compression_ratio': 1.5917159763313609, 'no_speech_prob': 0.020944278687238693}, {'id': 641, 'seek': 630090, 'start': 6311.0599999999995, 'end': 6319.54, 'text': ' keep remembering doing this CFA is an N cube algorithm control flow analysis is an N cube', 'tokens': [50872, 1066, 20719, 884, 341, 383, 19684, 307, 364, 426, 13728, 9284, 1969, 3095, 5215, 307, 364, 426, 13728, 51296], 'temperature': 0.0, 'avg_logprob': -0.21311476693224551, 'compression_ratio': 1.5917159763313609, 'no_speech_prob': 0.020944278687238693}, {'id': 642, 'seek': 630090, 'start': 6319.54, 'end': 6330.259999999999, 'text': ' algorithm in practice it is mostly linear. So, do not worry about this is an over this is', 'tokens': [51296, 9284, 294, 3124, 309, 307, 5240, 8213, 13, 407, 11, 360, 406, 3292, 466, 341, 307, 364, 670, 341, 307, 51832], 'temperature': 0.0, 'avg_logprob': -0.21311476693224551, 'compression_ratio': 1.5917159763313609, 'no_speech_prob': 0.020944278687238693}, {'id': 643, 'seek': 633026, 'start': 6330.26, 'end': 6334.900000000001, 'text': ' taken this slide is taken from a class. So, there is an assignment due for you there is no assignment,', 'tokens': [50364, 2726, 341, 4137, 307, 2726, 490, 257, 1508, 13, 407, 11, 456, 307, 364, 15187, 3462, 337, 291, 456, 307, 572, 15187, 11, 50596], 'temperature': 0.0, 'avg_logprob': -0.20416279995080197, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.0005701220943592489}, {'id': 644, 'seek': 633026, 'start': 6336.74, 'end': 6348.74, 'text': ' but you should be able to from what we have learned given a program O program should be able', 'tokens': [50688, 457, 291, 820, 312, 1075, 281, 490, 437, 321, 362, 3264, 2212, 257, 1461, 422, 1461, 820, 312, 1075, 51288], 'temperature': 0.0, 'avg_logprob': -0.20416279995080197, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.0005701220943592489}, {'id': 645, 'seek': 633026, 'start': 6348.74, 'end': 6354.26, 'text': ' to generate the constraints solve the constraints right we should be able to do that.', 'tokens': [51288, 281, 8460, 264, 18491, 5039, 264, 18491, 558, 321, 820, 312, 1075, 281, 360, 300, 13, 51564], 'temperature': 0.0, 'avg_logprob': -0.20416279995080197, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.0005701220943592489}, {'id': 646, 'seek': 635426, 'start': 6355.14, 'end': 6364.820000000001, 'text': ' So, the algorithm that we have seen is not very precise there are many challenges there can be', 'tokens': [50408, 407, 11, 264, 9284, 300, 321, 362, 1612, 307, 406, 588, 13600, 456, 366, 867, 4759, 456, 393, 312, 50892], 'temperature': 0.0, 'avg_logprob': -0.13382726557114544, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.0023225476033985615}, {'id': 647, 'seek': 635426, 'start': 6364.820000000001, 'end': 6370.58, 'text': ' large number of libraries I am going over all classes and all that right. So, that can be a', 'tokens': [50892, 2416, 1230, 295, 15148, 286, 669, 516, 670, 439, 5359, 293, 439, 300, 558, 13, 407, 11, 300, 393, 312, 257, 51180], 'temperature': 0.0, 'avg_logprob': -0.13382726557114544, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.0023225476033985615}, {'id': 648, 'seek': 635426, 'start': 6370.58, 'end': 6378.9800000000005, 'text': ' bit of an issue we can improve by improve, but so that we do not generate too many constraints', 'tokens': [51180, 857, 295, 364, 2734, 321, 393, 3470, 538, 3470, 11, 457, 370, 300, 321, 360, 406, 8460, 886, 867, 18491, 51600], 'temperature': 0.0, 'avg_logprob': -0.13382726557114544, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.0023225476033985615}, {'id': 649, 'seek': 637898, 'start': 6379.94, 'end': 6389.78, 'text': ' we will see two of them one we will say we will not generate code for unreachable code.', 'tokens': [50412, 321, 486, 536, 732, 295, 552, 472, 321, 486, 584, 321, 486, 406, 8460, 3089, 337, 517, 16226, 712, 3089, 13, 50904], 'temperature': 0.0, 'avg_logprob': -0.12009807788964474, 'compression_ratio': 1.7134146341463414, 'no_speech_prob': 0.0010588123695924878}, {'id': 650, 'seek': 637898, 'start': 6391.0599999999995, 'end': 6396.339999999999, 'text': ' For example, it is a library code right for a given program the library may not even be accessed', 'tokens': [50968, 1171, 1365, 11, 309, 307, 257, 6405, 3089, 558, 337, 257, 2212, 1461, 264, 6405, 815, 406, 754, 312, 34211, 51232], 'temperature': 0.0, 'avg_logprob': -0.12009807788964474, 'compression_ratio': 1.7134146341463414, 'no_speech_prob': 0.0010588123695924878}, {'id': 651, 'seek': 637898, 'start': 6397.219999999999, 'end': 6403.219999999999, 'text': ' why should I generate constraint if that for each class I am generating constraint right if that', 'tokens': [51276, 983, 820, 286, 8460, 25534, 498, 300, 337, 1184, 1508, 286, 669, 17746, 25534, 558, 498, 300, 51576], 'temperature': 0.0, 'avg_logprob': -0.12009807788964474, 'compression_ratio': 1.7134146341463414, 'no_speech_prob': 0.0010588123695924878}, {'id': 652, 'seek': 640322, 'start': 6403.22, 'end': 6408.9800000000005, 'text': ' class is a member of this conditional constraint if that class there are lot of conditional', 'tokens': [50364, 1508, 307, 257, 4006, 295, 341, 27708, 25534, 498, 300, 1508, 456, 366, 688, 295, 27708, 50652], 'temperature': 0.0, 'avg_logprob': -0.1356495359669561, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.0001477539335610345}, {'id': 653, 'seek': 640322, 'start': 6408.9800000000005, 'end': 6413.46, 'text': ' constraints that we generate we can avoid that for library classes which are not called.', 'tokens': [50652, 18491, 300, 321, 8460, 321, 393, 5042, 300, 337, 6405, 5359, 597, 366, 406, 1219, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.1356495359669561, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.0001477539335610345}, {'id': 654, 'seek': 640322, 'start': 6416.740000000001, 'end': 6417.62, 'text': ' So, what I can do', 'tokens': [51040, 407, 11, 437, 286, 393, 360, 51084], 'temperature': 0.0, 'avg_logprob': -0.1356495359669561, 'compression_ratio': 1.5714285714285714, 'no_speech_prob': 0.0001477539335610345}, {'id': 655, 'seek': 641762, 'start': 6417.7, 'end': 6434.42, 'text': ' is I can look at my main program look at the main program and say for in the main program', 'tokens': [50368, 307, 286, 393, 574, 412, 452, 2135, 1461, 574, 412, 264, 2135, 1461, 293, 584, 337, 294, 264, 2135, 1461, 51204], 'temperature': 0.0, 'avg_logprob': -0.18966754647188408, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.003775541903451085}, {'id': 656, 'seek': 641762, 'start': 6435.0599999999995, 'end': 6443.3, 'text': ' whatever are the for those constraints I will add them the constraint, but in the library code', 'tokens': [51236, 2035, 366, 264, 337, 729, 18491, 286, 486, 909, 552, 264, 25534, 11, 457, 294, 264, 6405, 3089, 51648], 'temperature': 0.0, 'avg_logprob': -0.18966754647188408, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.003775541903451085}, {'id': 657, 'seek': 644762, 'start': 6447.62, 'end': 6457.78, 'text': ' right. So, I will take the methods of main add to live take from the main there is a method which', 'tokens': [50364, 558, 13, 407, 11, 286, 486, 747, 264, 7150, 295, 2135, 909, 281, 1621, 747, 490, 264, 2135, 456, 307, 257, 3170, 597, 50872], 'temperature': 0.0, 'avg_logprob': -0.16482280962394946, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.0002958715776912868}, {'id': 658, 'seek': 644762, 'start': 6457.78, 'end': 6463.14, 'text': ' is called add the constraints of that do not add the constraints of the whole world because', 'tokens': [50872, 307, 1219, 909, 264, 18491, 295, 300, 360, 406, 909, 264, 18491, 295, 264, 1379, 1002, 570, 51140], 'temperature': 0.0, 'avg_logprob': -0.16482280962394946, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.0002958715776912868}, {'id': 659, 'seek': 644762, 'start': 6463.14, 'end': 6469.46, 'text': ' the library methods which are not even called why should I add the constraints for that right.', 'tokens': [51140, 264, 6405, 7150, 597, 366, 406, 754, 1219, 983, 820, 286, 909, 264, 18491, 337, 300, 558, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.16482280962394946, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.0002958715776912868}, {'id': 660, 'seek': 646946, 'start': 6469.62, 'end': 6475.38, 'text': ' So, the complexity does not change the complexity still remains so in queue', 'tokens': [50372, 407, 11, 264, 14024, 775, 406, 1319, 264, 14024, 920, 7023, 370, 294, 18639, 50660], 'temperature': 0.0, 'avg_logprob': -0.25487599607373845, 'compression_ratio': 1.5031847133757963, 'no_speech_prob': 0.002931304043158889}, {'id': 661, 'seek': 646946, 'start': 6479.78, 'end': 6486.58, 'text': ' but it will be more efficient in practice similarly here is one more I have a class C', 'tokens': [50880, 457, 309, 486, 312, 544, 7148, 294, 3124, 14138, 510, 307, 472, 544, 286, 362, 257, 1508, 383, 51220], 'temperature': 0.0, 'avg_logprob': -0.25487599607373845, 'compression_ratio': 1.5031847133757963, 'no_speech_prob': 0.002931304043158889}, {'id': 662, 'seek': 646946, 'start': 6488.9800000000005, 'end': 6496.58, 'text': ' in which there is a method id. So, here if you look at it I am doing new c', 'tokens': [51340, 294, 597, 456, 307, 257, 3170, 4496, 13, 407, 11, 510, 498, 291, 574, 412, 309, 286, 669, 884, 777, 269, 51720], 'temperature': 0.0, 'avg_logprob': -0.25487599607373845, 'compression_ratio': 1.5031847133757963, 'no_speech_prob': 0.002931304043158889}, {'id': 663, 'seek': 649658, 'start': 6496.58, 'end': 6503.22, 'text': ' dot id new c dot id the argument here I am passing new a here I am passing new b', 'tokens': [50364, 5893, 4496, 777, 269, 5893, 4496, 264, 6770, 510, 286, 669, 8437, 777, 257, 510, 286, 669, 8437, 777, 272, 50696], 'temperature': 0.0, 'avg_logprob': -0.1425499590960416, 'compression_ratio': 1.8983050847457628, 'no_speech_prob': 0.0019262698478996754}, {'id': 664, 'seek': 649658, 'start': 6504.74, 'end': 6509.14, 'text': ' and then I am calling dot m this m is present in the interface.', 'tokens': [50772, 293, 550, 286, 669, 5141, 5893, 275, 341, 275, 307, 1974, 294, 264, 9226, 13, 50992], 'temperature': 0.0, 'avg_logprob': -0.1425499590960416, 'compression_ratio': 1.8983050847457628, 'no_speech_prob': 0.0019262698478996754}, {'id': 665, 'seek': 649658, 'start': 6513.3, 'end': 6518.98, 'text': ' The problem is even though it is a identity function I am calling identity dot method. So,', 'tokens': [51200, 440, 1154, 307, 754, 1673, 309, 307, 257, 6575, 2445, 286, 669, 5141, 6575, 5893, 3170, 13, 407, 11, 51484], 'temperature': 0.0, 'avg_logprob': -0.1425499590960416, 'compression_ratio': 1.8983050847457628, 'no_speech_prob': 0.0019262698478996754}, {'id': 666, 'seek': 649658, 'start': 6518.98, 'end': 6525.22, 'text': ' this should have been new a dot m this should have been new b dot m, but the way the code is written', 'tokens': [51484, 341, 820, 362, 668, 777, 257, 5893, 275, 341, 820, 362, 668, 777, 272, 5893, 275, 11, 457, 264, 636, 264, 3089, 307, 3720, 51796], 'temperature': 0.0, 'avg_logprob': -0.1425499590960416, 'compression_ratio': 1.8983050847457628, 'no_speech_prob': 0.0019262698478996754}, {'id': 667, 'seek': 652522, 'start': 6525.780000000001, 'end': 6536.34, 'text': ' my x will have flow set of both a and b do you see that because I am calling new a flows into x', 'tokens': [50392, 452, 2031, 486, 362, 3095, 992, 295, 1293, 257, 293, 272, 360, 291, 536, 300, 570, 286, 669, 5141, 777, 257, 12867, 666, 2031, 50920], 'temperature': 0.0, 'avg_logprob': -0.10955236174843529, 'compression_ratio': 1.781954887218045, 'no_speech_prob': 0.0005182934110052884}, {'id': 668, 'seek': 652522, 'start': 6536.34, 'end': 6543.14, 'text': ' new b flows into x I am calling returning x. So, whatever this return x will be the', 'tokens': [50920, 777, 272, 12867, 666, 2031, 286, 669, 5141, 12678, 2031, 13, 407, 11, 2035, 341, 2736, 2031, 486, 312, 264, 51260], 'temperature': 0.0, 'avg_logprob': -0.10955236174843529, 'compression_ratio': 1.781954887218045, 'no_speech_prob': 0.0005182934110052884}, {'id': 669, 'seek': 652522, 'start': 6543.780000000001, 'end': 6547.22, 'text': ' will flow into this guy. So, what will flow into this guy', 'tokens': [51292, 486, 3095, 666, 341, 2146, 13, 407, 11, 437, 486, 3095, 666, 341, 2146, 51464], 'temperature': 0.0, 'avg_logprob': -0.10955236174843529, 'compression_ratio': 1.781954887218045, 'no_speech_prob': 0.0005182934110052884}, {'id': 670, 'seek': 654722, 'start': 6547.38, 'end': 6555.3, 'text': ' a b what will flow into this guy a b as a result this m is going from both a and b.', 'tokens': [50372, 257, 272, 437, 486, 3095, 666, 341, 2146, 257, 272, 382, 257, 1874, 341, 275, 307, 516, 490, 1293, 257, 293, 272, 13, 50768], 'temperature': 0.0, 'avg_logprob': -0.16981579008556547, 'compression_ratio': 1.2476190476190476, 'no_speech_prob': 0.007448052987456322}, {'id': 671, 'seek': 654722, 'start': 6556.58, 'end': 6564.1, 'text': ' So, one thing I could do is I can create a copy', 'tokens': [50832, 407, 11, 472, 551, 286, 727, 360, 307, 286, 393, 1884, 257, 5055, 51208], 'temperature': 0.0, 'avg_logprob': -0.16981579008556547, 'compression_ratio': 1.2476190476190476, 'no_speech_prob': 0.007448052987456322}, {'id': 672, 'seek': 656410, 'start': 6564.5, 'end': 6581.780000000001, 'text': ' of this id this id I can create one id 1 and one id 2 and in new c in the class I duplicated the', 'tokens': [50384, 295, 341, 4496, 341, 4496, 286, 393, 1884, 472, 4496, 502, 293, 472, 4496, 568, 293, 294, 777, 269, 294, 264, 1508, 286, 1581, 564, 3587, 264, 51248], 'temperature': 0.0, 'avg_logprob': -0.18134668523615058, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.001722602522931993}, {'id': 673, 'seek': 656410, 'start': 6581.780000000001, 'end': 6590.820000000001, 'text': ' method in the class I can duplicate the method this id becomes id 1 and id 2 for new a I will', 'tokens': [51248, 3170, 294, 264, 1508, 286, 393, 23976, 264, 3170, 341, 4496, 3643, 4496, 502, 293, 4496, 568, 337, 777, 257, 286, 486, 51700], 'temperature': 0.0, 'avg_logprob': -0.18134668523615058, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.001722602522931993}, {'id': 674, 'seek': 659082, 'start': 6590.82, 'end': 6601.46, 'text': ' call id 1 for new b I will call id 2. So, what will flow into this x now a what will flow into this x b', 'tokens': [50364, 818, 4496, 502, 337, 777, 272, 286, 486, 818, 4496, 568, 13, 407, 11, 437, 486, 3095, 666, 341, 2031, 586, 257, 437, 486, 3095, 666, 341, 2031, 272, 50896], 'temperature': 0.0, 'avg_logprob': -0.10107476743933273, 'compression_ratio': 1.8805970149253732, 'no_speech_prob': 0.0003297391813248396}, {'id': 675, 'seek': 659082, 'start': 6605.54, 'end': 6609.139999999999, 'text': ' so what I did I duplicated the method because I duplicated the method', 'tokens': [51100, 370, 437, 286, 630, 286, 1581, 564, 3587, 264, 3170, 570, 286, 1581, 564, 3587, 264, 3170, 51280], 'temperature': 0.0, 'avg_logprob': -0.10107476743933273, 'compression_ratio': 1.8805970149253732, 'no_speech_prob': 0.0003297391813248396}, {'id': 676, 'seek': 659082, 'start': 6610.0199999999995, 'end': 6614.34, 'text': ' for at this context I am calling id 1 in the second context I am calling id 2.', 'tokens': [51324, 337, 412, 341, 4319, 286, 669, 5141, 4496, 502, 294, 264, 1150, 4319, 286, 669, 5141, 4496, 568, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.10107476743933273, 'compression_ratio': 1.8805970149253732, 'no_speech_prob': 0.0003297391813248396}, {'id': 677, 'seek': 661434, 'start': 6614.34, 'end': 6623.3, 'text': ' So, you can I mean and again this will this is more precise not changing the complexity,', 'tokens': [50364, 407, 11, 291, 393, 286, 914, 293, 797, 341, 486, 341, 307, 544, 13600, 406, 4473, 264, 14024, 11, 50812], 'temperature': 0.0, 'avg_logprob': -0.2113308345570284, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.011312905699014664}, {'id': 678, 'seek': 661434, 'start': 6623.3, 'end': 6633.9400000000005, 'text': ' but making it more precise sorry so that I can inline we will come we will see now', 'tokens': [50812, 457, 1455, 309, 544, 13600, 2597, 370, 300, 286, 393, 294, 1889, 321, 486, 808, 321, 486, 536, 586, 51344], 'temperature': 0.0, 'avg_logprob': -0.2113308345570284, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.011312905699014664}, {'id': 679, 'seek': 661434, 'start': 6635.3, 'end': 6643.14, 'text': ' how will be inline we already have said every time there is a at a call site x.foo', 'tokens': [51412, 577, 486, 312, 294, 1889, 321, 1217, 362, 848, 633, 565, 456, 307, 257, 412, 257, 818, 3621, 2031, 13, 69, 1986, 51804], 'temperature': 0.0, 'avg_logprob': -0.2113308345570284, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.011312905699014664}, {'id': 680, 'seek': 664314, 'start': 6644.1, 'end': 6649.3, 'text': " if x's flow set is a singleton set only then I can inline correct.", 'tokens': [50412, 498, 2031, 311, 3095, 992, 307, 257, 1522, 14806, 992, 787, 550, 286, 393, 294, 1889, 3006, 13, 50672], 'temperature': 0.0, 'avg_logprob': -0.25878105163574217, 'compression_ratio': 1.3529411764705883, 'no_speech_prob': 0.0002972598886117339}, {'id': 681, 'seek': 664314, 'start': 6653.54, 'end': 6665.860000000001, 'text': ' Okay I can also I can also do a class duplication I will skip that there are few other methods', 'tokens': [50884, 1033, 286, 393, 611, 286, 393, 611, 360, 257, 1508, 17154, 399, 286, 486, 10023, 300, 456, 366, 1326, 661, 7150, 51500], 'temperature': 0.0, 'avg_logprob': -0.25878105163574217, 'compression_ratio': 1.3529411764705883, 'no_speech_prob': 0.0002972598886117339}, {'id': 682, 'seek': 666586, 'start': 6666.74, 'end': 6673.299999999999, 'text': ' in which you can improve the precision we will take a break now, but let us remember what we', 'tokens': [50408, 294, 597, 291, 393, 3470, 264, 18356, 321, 486, 747, 257, 1821, 586, 11, 457, 718, 505, 1604, 437, 321, 50736], 'temperature': 0.0, 'avg_logprob': -0.15221925882192758, 'compression_ratio': 1.76875, 'no_speech_prob': 0.0007109726429916918}, {'id': 683, 'seek': 666586, 'start': 6673.299999999999, 'end': 6682.099999999999, 'text': ' learned now we learned how to do flow analysis how to solve the constraints generate the constraints', 'tokens': [50736, 3264, 586, 321, 3264, 577, 281, 360, 3095, 5215, 577, 281, 5039, 264, 18491, 8460, 264, 18491, 51176], 'temperature': 0.0, 'avg_logprob': -0.15221925882192758, 'compression_ratio': 1.76875, 'no_speech_prob': 0.0007109726429916918}, {'id': 684, 'seek': 666586, 'start': 6682.099999999999, 'end': 6688.0199999999995, 'text': ' how to solve the constraints. So, out if you construct make a black box with what we have', 'tokens': [51176, 577, 281, 5039, 264, 18491, 13, 407, 11, 484, 498, 291, 7690, 652, 257, 2211, 2424, 365, 437, 321, 362, 51472], 'temperature': 0.0, 'avg_logprob': -0.15221925882192758, 'compression_ratio': 1.76875, 'no_speech_prob': 0.0007109726429916918}, {'id': 685, 'seek': 668802, 'start': 6688.02, 'end': 6694.660000000001, 'text': ' learnt to now in comes a program out tells out goes the flow sets for every expression', 'tokens': [50364, 18991, 281, 586, 294, 1487, 257, 1461, 484, 5112, 484, 1709, 264, 3095, 6352, 337, 633, 6114, 50696], 'temperature': 0.0, 'avg_logprob': -0.10825947003486829, 'compression_ratio': 1.3884297520661157, 'no_speech_prob': 0.00023892820172477514}, {'id': 686, 'seek': 668802, 'start': 6696.660000000001, 'end': 6703.860000000001, 'text': ' remember this when we come back we will use that information to do inlining okay.', 'tokens': [50796, 1604, 341, 562, 321, 808, 646, 321, 486, 764, 300, 1589, 281, 360, 294, 31079, 1392, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.10825947003486829, 'compression_ratio': 1.3884297520661157, 'no_speech_prob': 0.00023892820172477514}]