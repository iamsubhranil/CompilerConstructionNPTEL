[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 13.4, 'text': ' So, if you look at the previous example, if you see it as a flowchart, this is the flowchart', 'tokens': [50364, 407, 11, 498, 291, 574, 412, 264, 3894, 1365, 11, 498, 291, 536, 309, 382, 257, 3095, 339, 446, 11, 341, 307, 264, 3095, 339, 446, 51034], 'temperature': 0.0, 'avg_logprob': -0.24831521922144398, 'compression_ratio': 1.5, 'no_speech_prob': 0.03695540875196457}, {'id': 1, 'seek': 0, 'start': 13.4, 'end': 23.72, 'text': ' of that Fibonacci code. If you look at the flowchart, you say there is an if then else,', 'tokens': [51034, 295, 300, 479, 897, 266, 43870, 3089, 13, 759, 291, 574, 412, 264, 3095, 339, 446, 11, 291, 584, 456, 307, 364, 498, 550, 1646, 11, 51550], 'temperature': 0.0, 'avg_logprob': -0.24831521922144398, 'compression_ratio': 1.5, 'no_speech_prob': 0.03695540875196457}, {'id': 2, 'seek': 2372, 'start': 23.72, 'end': 38.4, 'text': ' there is a nice loop. In this flowchart, there are a sequence of instructions here, where', 'tokens': [50364, 456, 307, 257, 1481, 6367, 13, 682, 341, 3095, 339, 446, 11, 456, 366, 257, 8310, 295, 9415, 510, 11, 689, 51098], 'temperature': 0.0, 'avg_logprob': -0.21784713051535867, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.10655812174081802}, {'id': 3, 'seek': 2372, 'start': 38.4, 'end': 46.16, 'text': ' there are no one is jumping in between and the control is not flowing anywhere out. The', 'tokens': [51098, 456, 366, 572, 472, 307, 11233, 294, 1296, 293, 264, 1969, 307, 406, 13974, 4992, 484, 13, 440, 51486], 'temperature': 0.0, 'avg_logprob': -0.21784713051535867, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.10655812174081802}, {'id': 4, 'seek': 2372, 'start': 46.16, 'end': 53.519999999999996, 'text': ' control enters at the beginning, exits at the end. I will call such a sequence of instructions', 'tokens': [51486, 1969, 18780, 412, 264, 2863, 11, 44183, 412, 264, 917, 13, 286, 486, 818, 1270, 257, 8310, 295, 9415, 51854], 'temperature': 0.0, 'avg_logprob': -0.21784713051535867, 'compression_ratio': 1.7106918238993711, 'no_speech_prob': 0.10655812174081802}, {'id': 5, 'seek': 5352, 'start': 53.52, 'end': 61.760000000000005, 'text': ' as a basic block. Basic blocks has been already covered. I heard, I hear both yes and no.', 'tokens': [50364, 382, 257, 3875, 3461, 13, 31598, 8474, 575, 668, 1217, 5343, 13, 286, 2198, 11, 286, 1568, 1293, 2086, 293, 572, 13, 50776], 'temperature': 0.0, 'avg_logprob': -0.4073258505927192, 'compression_ratio': 1.3582089552238805, 'no_speech_prob': 0.865710437297821}, {'id': 6, 'seek': 5352, 'start': 61.760000000000005, 'end': 80.76, 'text': ' Yes, who covered it? Shubhajit. Did you also learn how to build basic blocks? Fine. Perfect.', 'tokens': [50776, 1079, 11, 567, 5343, 309, 30, 1160, 836, 71, 1805, 270, 13, 2589, 291, 611, 1466, 577, 281, 1322, 3875, 8474, 30, 12024, 13, 10246, 13, 51726], 'temperature': 0.0, 'avg_logprob': -0.4073258505927192, 'compression_ratio': 1.3582089552238805, 'no_speech_prob': 0.865710437297821}, {'id': 7, 'seek': 8076, 'start': 81.0, 'end': 89.44, 'text': ' Have you also been, was dominator is also covered? Yes. Perfect. So, that saves me more time.', 'tokens': [50376, 3560, 291, 611, 668, 11, 390, 8859, 1639, 307, 611, 5343, 30, 1079, 13, 10246, 13, 407, 11, 300, 19155, 385, 544, 565, 13, 50798], 'temperature': 0.0, 'avg_logprob': -0.29738624007613573, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.04205531254410744}, {'id': 8, 'seek': 8076, 'start': 89.44, 'end': 99.60000000000001, 'text': ' So, did Shubhajit cover loops, how to find loops using dominators? Natural loops.', 'tokens': [50798, 407, 11, 630, 1160, 836, 71, 1805, 270, 2060, 16121, 11, 577, 281, 915, 16121, 1228, 8859, 3391, 30, 20137, 16121, 13, 51306], 'temperature': 0.0, 'avg_logprob': -0.29738624007613573, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.04205531254410744}, {'id': 9, 'seek': 8076, 'start': 99.60000000000001, 'end': 107.36000000000001, 'text': ' Natural loops? Lovely. So, then I can jump, then I can jump. So, I will, what I was planning to', 'tokens': [51306, 20137, 16121, 30, 33925, 13, 407, 11, 550, 286, 393, 3012, 11, 550, 286, 393, 3012, 13, 407, 11, 286, 486, 11, 437, 286, 390, 5038, 281, 51694], 'temperature': 0.0, 'avg_logprob': -0.29738624007613573, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.04205531254410744}, {'id': 10, 'seek': 10736, 'start': 107.36, 'end': 118.0, 'text': ' cover, half an hour or so, I will make it much faster. So, we have loops, sorry, we have from', 'tokens': [50364, 2060, 11, 1922, 364, 1773, 420, 370, 11, 286, 486, 652, 309, 709, 4663, 13, 407, 11, 321, 362, 16121, 11, 2597, 11, 321, 362, 490, 50896], 'temperature': 0.0, 'avg_logprob': -0.21578228690407492, 'compression_ratio': 1.4881889763779528, 'no_speech_prob': 0.15139351785182953}, {'id': 11, 'seek': 10736, 'start': 118.0, 'end': 128.24, 'text': ' the code, we can construct control flow graphs. So, what is a control flow graph? It is a graph', 'tokens': [50896, 264, 3089, 11, 321, 393, 7690, 1969, 3095, 24877, 13, 407, 11, 437, 307, 257, 1969, 3095, 4295, 30, 467, 307, 257, 4295, 51408], 'temperature': 0.0, 'avg_logprob': -0.21578228690407492, 'compression_ratio': 1.4881889763779528, 'no_speech_prob': 0.15139351785182953}, {'id': 12, 'seek': 12824, 'start': 128.24, 'end': 138.28, 'text': ' where the nodes are basic blocks and the edges indicate flow of control, right? Good.', 'tokens': [50364, 689, 264, 13891, 366, 3875, 8474, 293, 264, 8819, 13330, 3095, 295, 1969, 11, 558, 30, 2205, 13, 50866], 'temperature': 0.0, 'avg_logprob': -0.2947032356262207, 'compression_ratio': 1.356060606060606, 'no_speech_prob': 0.0779733806848526}, {'id': 13, 'seek': 12824, 'start': 138.28, 'end': 154.32000000000002, 'text': ' And here is a question, if I build, so this is, so, given a sequence of code, we do whatever,', 'tokens': [50866, 400, 510, 307, 257, 1168, 11, 498, 286, 1322, 11, 370, 341, 307, 11, 370, 11, 2212, 257, 8310, 295, 3089, 11, 321, 360, 2035, 11, 51668], 'temperature': 0.0, 'avg_logprob': -0.2947032356262207, 'compression_ratio': 1.356060606060606, 'no_speech_prob': 0.0779733806848526}, {'id': 14, 'seek': 15432, 'start': 154.79999999999998, 'end': 159.28, 'text': ' generate the IR and then do control flow analysis to get some graph like this. The question is,', 'tokens': [50388, 8460, 264, 16486, 293, 550, 360, 1969, 3095, 5215, 281, 483, 512, 4295, 411, 341, 13, 440, 1168, 307, 11, 50612], 'temperature': 0.0, 'avg_logprob': -0.1350266138712565, 'compression_ratio': 1.8871794871794871, 'no_speech_prob': 0.05161530151963234}, {'id': 15, 'seek': 15432, 'start': 159.28, 'end': 165.0, 'text': ' can the control flow analysis expose control structures which are not obvious in the high', 'tokens': [50612, 393, 264, 1969, 3095, 5215, 19219, 1969, 9227, 597, 366, 406, 6322, 294, 264, 1090, 50898], 'temperature': 0.0, 'avg_logprob': -0.1350266138712565, 'compression_ratio': 1.8871794871794871, 'no_speech_prob': 0.05161530151963234}, {'id': 16, 'seek': 15432, 'start': 165.0, 'end': 170.92, 'text': ' level code? In the high level code, it is not obvious, but it is more obvious in the,', 'tokens': [50898, 1496, 3089, 30, 682, 264, 1090, 1496, 3089, 11, 309, 307, 406, 6322, 11, 457, 309, 307, 544, 6322, 294, 264, 11, 51194], 'temperature': 0.0, 'avg_logprob': -0.1350266138712565, 'compression_ratio': 1.8871794871794871, 'no_speech_prob': 0.05161530151963234}, {'id': 17, 'seek': 15432, 'start': 170.92, 'end': 176.6, 'text': ' the answer is yes, right? Because in the high level code, for instance, in this high level code,', 'tokens': [51194, 264, 1867, 307, 2086, 11, 558, 30, 1436, 294, 264, 1090, 1496, 3089, 11, 337, 5197, 11, 294, 341, 1090, 1496, 3089, 11, 51478], 'temperature': 0.0, 'avg_logprob': -0.1350266138712565, 'compression_ratio': 1.8871794871794871, 'no_speech_prob': 0.05161530151963234}, {'id': 18, 'seek': 17660, 'start': 176.6, 'end': 187.28, 'text': ' this could have been the high level code, the loop is not obvious, right? So, you can have loops', 'tokens': [50364, 341, 727, 362, 668, 264, 1090, 1496, 3089, 11, 264, 6367, 307, 406, 6322, 11, 558, 30, 407, 11, 291, 393, 362, 16121, 50898], 'temperature': 0.0, 'avg_logprob': -0.24648152122014685, 'compression_ratio': 1.4795918367346939, 'no_speech_prob': 0.00805802084505558}, {'id': 19, 'seek': 17660, 'start': 187.28, 'end': 195.6, 'text': " constructed from if and go to's and so on, which are otherwise not, okay. Question, is it? Okay.", 'tokens': [50898, 17083, 490, 498, 293, 352, 281, 311, 293, 370, 322, 11, 597, 366, 5911, 406, 11, 1392, 13, 14464, 11, 307, 309, 30, 1033, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.24648152122014685, 'compression_ratio': 1.4795918367346939, 'no_speech_prob': 0.00805802084505558}, {'id': 20, 'seek': 17660, 'start': 195.6, 'end': 206.35999999999999, 'text': ' We already know that the CFG has a special entry and exit block and all that, okay. We know what', 'tokens': [51314, 492, 1217, 458, 300, 264, 21792, 38, 575, 257, 2121, 8729, 293, 11043, 3461, 293, 439, 300, 11, 1392, 13, 492, 458, 437, 51852], 'temperature': 0.0, 'avg_logprob': -0.24648152122014685, 'compression_ratio': 1.4795918367346939, 'no_speech_prob': 0.00805802084505558}, {'id': 21, 'seek': 20636, 'start': 206.36, 'end': 216.56, 'text': ' is the dominator, right? What is the dominator? If I dominate you, then the control starting', 'tokens': [50364, 307, 264, 8859, 1639, 11, 558, 30, 708, 307, 264, 8859, 1639, 30, 759, 286, 28246, 291, 11, 550, 264, 1969, 2891, 50874], 'temperature': 0.0, 'avg_logprob': -0.14371163368225098, 'compression_ratio': 1.5338983050847457, 'no_speech_prob': 0.005553262773901224}, {'id': 22, 'seek': 20636, 'start': 216.56, 'end': 227.20000000000002, 'text': ' from the start to reach you must go through me, right? Okay. And then the, the dominator', 'tokens': [50874, 490, 264, 722, 281, 2524, 291, 1633, 352, 807, 385, 11, 558, 30, 1033, 13, 400, 550, 264, 11, 264, 8859, 1639, 51406], 'temperature': 0.0, 'avg_logprob': -0.14371163368225098, 'compression_ratio': 1.5338983050847457, 'no_speech_prob': 0.005553262773901224}, {'id': 23, 'seek': 22720, 'start': 227.2, 'end': 237.28, 'text': ' relation is anti-symmetric, reflexive and transitive. Reflexive as in I dominate myself,', 'tokens': [50364, 9721, 307, 6061, 12, 3187, 2174, 17475, 11, 23802, 488, 293, 1145, 2187, 13, 16957, 2021, 488, 382, 294, 286, 28246, 2059, 11, 50868], 'temperature': 0.0, 'avg_logprob': -0.20207019952627328, 'compression_ratio': 1.6605504587155964, 'no_speech_prob': 0.15591999888420105}, {'id': 24, 'seek': 22720, 'start': 237.28, 'end': 247.79999999999998, 'text': ' if I dominate you, you dominate him, then I dominate, that is transitive. If I dominate you,', 'tokens': [50868, 498, 286, 28246, 291, 11, 291, 28246, 796, 11, 550, 286, 28246, 11, 300, 307, 1145, 2187, 13, 759, 286, 28246, 291, 11, 51394], 'temperature': 0.0, 'avg_logprob': -0.20207019952627328, 'compression_ratio': 1.6605504587155964, 'no_speech_prob': 0.15591999888420105}, {'id': 25, 'seek': 24780, 'start': 247.8, 'end': 258.84000000000003, 'text': ' you do not dominate me, that is anti-reflexive, okay. And we know how to compute the loops from', 'tokens': [50364, 291, 360, 406, 28246, 385, 11, 300, 307, 6061, 12, 33115, 2021, 488, 11, 1392, 13, 400, 321, 458, 577, 281, 14722, 264, 16121, 490, 50916], 'temperature': 0.0, 'avg_logprob': -0.1808615281031682, 'compression_ratio': 1.4761904761904763, 'no_speech_prob': 0.010326573625206947}, {'id': 26, 'seek': 24780, 'start': 258.84000000000003, 'end': 267.04, 'text': ' your dominators and you know how to compute the dominators as well, right? Was it covered?', 'tokens': [50916, 428, 8859, 3391, 293, 291, 458, 577, 281, 14722, 264, 8859, 3391, 382, 731, 11, 558, 30, 3027, 309, 5343, 30, 51326], 'temperature': 0.0, 'avg_logprob': -0.1808615281031682, 'compression_ratio': 1.4761904761904763, 'no_speech_prob': 0.010326573625206947}, {'id': 27, 'seek': 26704, 'start': 267.04, 'end': 280.76000000000005, 'text': ' How the dominators, how do you build dominators? Okay. Before you go to dominators, we talked', 'tokens': [50364, 1012, 264, 8859, 3391, 11, 577, 360, 291, 1322, 8859, 3391, 30, 1033, 13, 4546, 291, 352, 281, 8859, 3391, 11, 321, 2825, 51050], 'temperature': 0.0, 'avg_logprob': -0.20744894610510933, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.008572663180530071}, {'id': 28, 'seek': 26704, 'start': 280.76000000000005, 'end': 288.96000000000004, 'text': ' about basic block building using leaders. Yeah. And then we talked about, I mean, you said,', 'tokens': [51050, 466, 3875, 3461, 2390, 1228, 3523, 13, 865, 13, 400, 550, 321, 2825, 466, 11, 286, 914, 11, 291, 848, 11, 51460], 'temperature': 0.0, 'avg_logprob': -0.20744894610510933, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.008572663180530071}, {'id': 29, 'seek': 26704, 'start': 288.96000000000004, 'end': 294.48, 'text': ' you already know about leaders and how to construct basic blocks using them. Let me ask a question.', 'tokens': [51460, 291, 1217, 458, 466, 3523, 293, 577, 281, 7690, 3875, 8474, 1228, 552, 13, 961, 385, 1029, 257, 1168, 13, 51736], 'temperature': 0.0, 'avg_logprob': -0.20744894610510933, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.008572663180530071}, {'id': 30, 'seek': 29448, 'start': 294.48, 'end': 304.32, 'text': ' If there are, if there is an if then else, I can build my CFG understands that. Does C', 'tokens': [50364, 759, 456, 366, 11, 498, 456, 307, 364, 498, 550, 1646, 11, 286, 393, 1322, 452, 21792, 38, 15146, 300, 13, 4402, 383, 50856], 'temperature': 0.0, 'avg_logprob': -0.3297764107033058, 'compression_ratio': 1.1025641025641026, 'no_speech_prob': 0.2710527777671814}, {'id': 31, 'seek': 30432, 'start': 304.32, 'end': 320.76, 'text': ' support something like exceptions? Exceptions, no. Sure.', 'tokens': [50364, 1406, 746, 411, 22847, 30, 16192, 626, 11, 572, 13, 4894, 13, 51186], 'temperature': 0.0, 'avg_logprob': -0.6211244463920593, 'compression_ratio': 1.0, 'no_speech_prob': 0.6469174027442932}, {'id': 32, 'seek': 32076, 'start': 320.76, 'end': 337.32, 'text': ' No, the idea, what is an idea of exception? You install an exception handler, right? Like', 'tokens': [50364, 883, 11, 264, 1558, 11, 437, 307, 364, 1558, 295, 11183, 30, 509, 3625, 364, 11183, 41967, 11, 558, 30, 1743, 51192], 'temperature': 0.0, 'avg_logprob': -0.18342460526360405, 'compression_ratio': 1.6686746987951808, 'no_speech_prob': 0.016357945278286934}, {'id': 33, 'seek': 32076, 'start': 337.32, 'end': 342.08, 'text': ' when you have a tri-catch block, you are saying at the beginning of the tri, you are installing', 'tokens': [51192, 562, 291, 362, 257, 1376, 12, 66, 852, 3461, 11, 291, 366, 1566, 412, 264, 2863, 295, 264, 1376, 11, 291, 366, 20762, 51430], 'temperature': 0.0, 'avg_logprob': -0.18342460526360405, 'compression_ratio': 1.6686746987951808, 'no_speech_prob': 0.016357945278286934}, {'id': 34, 'seek': 32076, 'start': 342.08, 'end': 346.28, 'text': ' a handler which is the catch block. You are saying anything that happens in this tri-block,', 'tokens': [51430, 257, 41967, 597, 307, 264, 3745, 3461, 13, 509, 366, 1566, 1340, 300, 2314, 294, 341, 1376, 12, 28830, 11, 51640], 'temperature': 0.0, 'avg_logprob': -0.18342460526360405, 'compression_ratio': 1.6686746987951808, 'no_speech_prob': 0.016357945278286934}, {'id': 35, 'seek': 34628, 'start': 346.28, 'end': 357.08, 'text': ' I will return back to the handler and that could be happening way deep inside a function call. So,', 'tokens': [50364, 286, 486, 2736, 646, 281, 264, 41967, 293, 300, 727, 312, 2737, 636, 2452, 1854, 257, 2445, 818, 13, 407, 11, 50904], 'temperature': 0.0, 'avg_logprob': -0.15336728777204242, 'compression_ratio': 1.4594594594594594, 'no_speech_prob': 0.034033406525850296}, {'id': 36, 'seek': 34628, 'start': 357.08, 'end': 363.15999999999997, 'text': ' it is not just checking at that place. The point is how do you go to get back? So,', 'tokens': [50904, 309, 307, 406, 445, 8568, 412, 300, 1081, 13, 440, 935, 307, 577, 360, 291, 352, 281, 483, 646, 30, 407, 11, 51208], 'temperature': 0.0, 'avg_logprob': -0.15336728777204242, 'compression_ratio': 1.4594594594594594, 'no_speech_prob': 0.034033406525850296}, {'id': 37, 'seek': 34628, 'start': 363.15999999999997, 'end': 373.32, 'text': ' the short answer is C does have some way to handle exceptions, okay. Read about set jump', 'tokens': [51208, 264, 2099, 1867, 307, 383, 775, 362, 512, 636, 281, 4813, 22847, 11, 1392, 13, 17604, 466, 992, 3012, 51716], 'temperature': 0.0, 'avg_logprob': -0.15336728777204242, 'compression_ratio': 1.4594594594594594, 'no_speech_prob': 0.034033406525850296}, {'id': 38, 'seek': 37332, 'start': 373.36, 'end': 379.2, 'text': ' and long jump. Those who are interested, find out the set jump and long jump instructions in C.', 'tokens': [50366, 293, 938, 3012, 13, 3950, 567, 366, 3102, 11, 915, 484, 264, 992, 3012, 293, 938, 3012, 9415, 294, 383, 13, 50658], 'temperature': 0.0, 'avg_logprob': -0.2753230200873481, 'compression_ratio': 1.5263157894736843, 'no_speech_prob': 0.7871636152267456}, {'id': 39, 'seek': 37332, 'start': 379.2, 'end': 384.92, 'text': ' Anyone heard of these two, these instructions? Yes.', 'tokens': [50658, 14643, 2198, 295, 613, 732, 11, 613, 9415, 30, 1079, 13, 50944], 'temperature': 0.0, 'avg_logprob': -0.2753230200873481, 'compression_ratio': 1.5263157894736843, 'no_speech_prob': 0.7871636152267456}, {'id': 40, 'seek': 37332, 'start': 384.92, 'end': 402.24, 'text': ' Really? You use set jump and long jump? Okay, yeah. Tri-catch looks more high level.', 'tokens': [50944, 4083, 30, 509, 764, 992, 3012, 293, 938, 3012, 30, 1033, 11, 1338, 13, 10931, 12, 66, 852, 1542, 544, 1090, 1496, 13, 51810], 'temperature': 0.0, 'avg_logprob': -0.2753230200873481, 'compression_ratio': 1.5263157894736843, 'no_speech_prob': 0.7871636152267456}, {'id': 41, 'seek': 40224, 'start': 402.24, 'end': 408.64, 'text': ' Yeah, that looks more, I do not know. I find tri-catch to be more intuitive,', 'tokens': [50364, 865, 11, 300, 1542, 544, 11, 286, 360, 406, 458, 13, 286, 915, 1376, 12, 66, 852, 281, 312, 544, 21769, 11, 50684], 'temperature': 0.0, 'avg_logprob': -0.27078101945960004, 'compression_ratio': 1.517094017094017, 'no_speech_prob': 0.0007203527493402362}, {'id': 42, 'seek': 40224, 'start': 408.64, 'end': 414.0, 'text': ' maybe because I started thinking of exceptions from there, but this is not terribly bad either,', 'tokens': [50684, 1310, 570, 286, 1409, 1953, 295, 22847, 490, 456, 11, 457, 341, 307, 406, 22903, 1578, 2139, 11, 50952], 'temperature': 0.0, 'avg_logprob': -0.27078101945960004, 'compression_ratio': 1.517094017094017, 'no_speech_prob': 0.0007203527493402362}, {'id': 43, 'seek': 40224, 'start': 414.0, 'end': 420.76, 'text': ' okay. But nevertheless, read what these are. When you see a function call in your code,', 'tokens': [50952, 1392, 13, 583, 26924, 11, 1401, 437, 613, 366, 13, 1133, 291, 536, 257, 2445, 818, 294, 428, 3089, 11, 51290], 'temperature': 0.0, 'avg_logprob': -0.27078101945960004, 'compression_ratio': 1.517094017094017, 'no_speech_prob': 0.0007203527493402362}, {'id': 44, 'seek': 40224, 'start': 420.76, 'end': 430.2, 'text': ' right? You have built the, I have code for which I want to build the control flow graph. Every', 'tokens': [51290, 558, 30, 509, 362, 3094, 264, 11, 286, 362, 3089, 337, 597, 286, 528, 281, 1322, 264, 1969, 3095, 4295, 13, 2048, 51762], 'temperature': 0.0, 'avg_logprob': -0.27078101945960004, 'compression_ratio': 1.517094017094017, 'no_speech_prob': 0.0007203527493402362}, {'id': 45, 'seek': 43020, 'start': 430.2, 'end': 435.56, 'text': ' instruction or rather every sequence of instructions become a basic block. If there is a function', 'tokens': [50364, 10951, 420, 2831, 633, 8310, 295, 9415, 1813, 257, 3875, 3461, 13, 759, 456, 307, 257, 2445, 50632], 'temperature': 0.0, 'avg_logprob': -0.1567988872528076, 'compression_ratio': 1.644736842105263, 'no_speech_prob': 0.021603193134069443}, {'id': 46, 'seek': 43020, 'start': 435.56, 'end': 442.36, 'text': ' call in between, what will happen? What, I mean, you see what I am saying, right? Say for instance,', 'tokens': [50632, 818, 294, 1296, 11, 437, 486, 1051, 30, 708, 11, 286, 914, 11, 291, 536, 437, 286, 669, 1566, 11, 558, 30, 6463, 337, 5197, 11, 50972], 'temperature': 0.0, 'avg_logprob': -0.1567988872528076, 'compression_ratio': 1.644736842105263, 'no_speech_prob': 0.021603193134069443}, {'id': 47, 'seek': 43020, 'start': 442.36, 'end': 446.71999999999997, 'text': ' in the previous, no I would not go there. I mean, let us say in some piece of the code here,', 'tokens': [50972, 294, 264, 3894, 11, 572, 286, 576, 406, 352, 456, 13, 286, 914, 11, 718, 505, 584, 294, 512, 2522, 295, 264, 3089, 510, 11, 51190], 'temperature': 0.0, 'avg_logprob': -0.1567988872528076, 'compression_ratio': 1.644736842105263, 'no_speech_prob': 0.021603193134069443}, {'id': 48, 'seek': 43020, 'start': 446.71999999999997, 'end': 458.08, 'text': ' let us say I have a call. What will you do? Typically, we treat the call as a single', 'tokens': [51190, 718, 505, 584, 286, 362, 257, 818, 13, 708, 486, 291, 360, 30, 23129, 11, 321, 2387, 264, 818, 382, 257, 2167, 51758], 'temperature': 0.0, 'avg_logprob': -0.1567988872528076, 'compression_ratio': 1.644736842105263, 'no_speech_prob': 0.021603193134069443}, {'id': 49, 'seek': 45808, 'start': 458.08, 'end': 464.4, 'text': ' instruction. In the same basic block. I do not treat, I do not make a separate basic block for', 'tokens': [50364, 10951, 13, 682, 264, 912, 3875, 3461, 13, 286, 360, 406, 2387, 11, 286, 360, 406, 652, 257, 4994, 3875, 3461, 337, 50680], 'temperature': 0.0, 'avg_logprob': -0.24254706246512278, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.07798731327056885}, {'id': 50, 'seek': 45808, 'start': 464.4, 'end': 475.03999999999996, 'text': ' it. It is easy to deal with, deal it that way. We have looked at this way, right? This call,', 'tokens': [50680, 309, 13, 467, 307, 1858, 281, 2028, 365, 11, 2028, 309, 300, 636, 13, 492, 362, 2956, 412, 341, 636, 11, 558, 30, 639, 818, 11, 51212], 'temperature': 0.0, 'avg_logprob': -0.24254706246512278, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.07798731327056885}, {'id': 51, 'seek': 45808, 'start': 475.03999999999996, 'end': 481.47999999999996, 'text': ' the control reached it from the previous instruction and its next instruction will get', 'tokens': [51212, 264, 1969, 6488, 309, 490, 264, 3894, 10951, 293, 1080, 958, 10951, 486, 483, 51534], 'temperature': 0.0, 'avg_logprob': -0.24254706246512278, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.07798731327056885}, {'id': 52, 'seek': 48148, 'start': 481.48, 'end': 491.8, 'text': ' the control after the call, okay. So, just a minor point, okay. In most cases, it is not considered', 'tokens': [50364, 264, 1969, 934, 264, 818, 11, 1392, 13, 407, 11, 445, 257, 6696, 935, 11, 1392, 13, 682, 881, 3331, 11, 309, 307, 406, 4888, 50880], 'temperature': 0.0, 'avg_logprob': -0.18711984784979568, 'compression_ratio': 1.6444444444444444, 'no_speech_prob': 0.01683911494910717}, {'id': 53, 'seek': 48148, 'start': 491.8, 'end': 498.16, 'text': ' as a branch and return. It is considered just as a single instruction, okay. You already have done', 'tokens': [50880, 382, 257, 9819, 293, 2736, 13, 467, 307, 4888, 445, 382, 257, 2167, 10951, 11, 1392, 13, 509, 1217, 362, 1096, 51198], 'temperature': 0.0, 'avg_logprob': -0.18711984784979568, 'compression_ratio': 1.6444444444444444, 'no_speech_prob': 0.01683911494910717}, {'id': 54, 'seek': 48148, 'start': 498.16, 'end': 504.48, 'text': ' control flow graph. You know what is the successor of a node, predecessor and all that, okay. You', 'tokens': [51198, 1969, 3095, 4295, 13, 509, 458, 437, 307, 264, 31864, 295, 257, 9984, 11, 34991, 293, 439, 300, 11, 1392, 13, 509, 51514], 'temperature': 0.0, 'avg_logprob': -0.18711984784979568, 'compression_ratio': 1.6444444444444444, 'no_speech_prob': 0.01683911494910717}, {'id': 55, 'seek': 50448, 'start': 504.48, 'end': 515.8000000000001, 'text': ' know dominators. I wanted you to understand how, two things. Given dominators, how do you', 'tokens': [50364, 458, 8859, 3391, 13, 286, 1415, 291, 281, 1223, 577, 11, 732, 721, 13, 18600, 8859, 3391, 11, 577, 360, 291, 50930], 'temperature': 0.0, 'avg_logprob': -0.1596308668998823, 'compression_ratio': 1.6184971098265897, 'no_speech_prob': 0.024192290380597115}, {'id': 56, 'seek': 50448, 'start': 515.8000000000001, 'end': 521.9200000000001, 'text': ' identify, get the loops? You already know that. How to get the natural loops from a dominator?', 'tokens': [50930, 5876, 11, 483, 264, 16121, 30, 509, 1217, 458, 300, 13, 1012, 281, 483, 264, 3303, 16121, 490, 257, 8859, 1639, 30, 51236], 'temperature': 0.0, 'avg_logprob': -0.1596308668998823, 'compression_ratio': 1.6184971098265897, 'no_speech_prob': 0.024192290380597115}, {'id': 57, 'seek': 50448, 'start': 521.9200000000001, 'end': 529.44, 'text': ' Now, the question is how to get the dominator information? Has it been already covered? If yes,', 'tokens': [51236, 823, 11, 264, 1168, 307, 577, 281, 483, 264, 8859, 1639, 1589, 30, 8646, 309, 668, 1217, 5343, 30, 759, 2086, 11, 51612], 'temperature': 0.0, 'avg_logprob': -0.1596308668998823, 'compression_ratio': 1.6184971098265897, 'no_speech_prob': 0.024192290380597115}, {'id': 58, 'seek': 52944, 'start': 529.44, 'end': 539.36, 'text': ' I will not cover. Else, I will cover that. Not covered? Okay. Then, I will start from,', 'tokens': [50364, 286, 486, 406, 2060, 13, 45472, 11, 286, 486, 2060, 300, 13, 1726, 5343, 30, 1033, 13, 1396, 11, 286, 486, 722, 490, 11, 50860], 'temperature': 0.0, 'avg_logprob': -0.1944044940876511, 'compression_ratio': 1.3430656934306568, 'no_speech_prob': 0.007715854328125715}, {'id': 59, 'seek': 52944, 'start': 539.36, 'end': 555.12, 'text': ' yeah. See, given the control flow graph, I want to compute the dominator information. Let us say,', 'tokens': [50860, 1338, 13, 3008, 11, 2212, 264, 1969, 3095, 4295, 11, 286, 528, 281, 14722, 264, 8859, 1639, 1589, 13, 961, 505, 584, 11, 51648], 'temperature': 0.0, 'avg_logprob': -0.1944044940876511, 'compression_ratio': 1.3430656934306568, 'no_speech_prob': 0.007715854328125715}, {'id': 60, 'seek': 55512, 'start': 555.12, 'end': 559.48, 'text': ' I want to compute the dominator information of only the basic blocks. Once I have the', 'tokens': [50364, 286, 528, 281, 14722, 264, 8859, 1639, 1589, 295, 787, 264, 3875, 8474, 13, 3443, 286, 362, 264, 50582], 'temperature': 0.0, 'avg_logprob': -0.2328992207845052, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.03307216241955757}, {'id': 61, 'seek': 55512, 'start': 559.48, 'end': 565.72, 'text': ' dominator information of basic blocks, the individual statements is trivial, right? Or,', 'tokens': [50582, 8859, 1639, 1589, 295, 3875, 8474, 11, 264, 2609, 12363, 307, 26703, 11, 558, 30, 1610, 11, 50894], 'temperature': 0.0, 'avg_logprob': -0.2328992207845052, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.03307216241955757}, {'id': 62, 'seek': 55512, 'start': 565.72, 'end': 570.68, 'text': ' I can, I will say, I will treat each statement as this individual basic block. Either way,', 'tokens': [50894, 286, 393, 11, 286, 486, 584, 11, 286, 486, 2387, 1184, 5629, 382, 341, 2609, 3875, 3461, 13, 13746, 636, 11, 51142], 'temperature': 0.0, 'avg_logprob': -0.2328992207845052, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.03307216241955757}, {'id': 63, 'seek': 55512, 'start': 570.68, 'end': 576.68, 'text': ' it is fine. Does not matter. Now, how do I compute the dominator information? Any thoughts? I will', 'tokens': [51142, 309, 307, 2489, 13, 4402, 406, 1871, 13, 823, 11, 577, 360, 286, 14722, 264, 8859, 1639, 1589, 30, 2639, 4598, 30, 286, 486, 51442], 'temperature': 0.0, 'avg_logprob': -0.2328992207845052, 'compression_ratio': 1.8426395939086295, 'no_speech_prob': 0.03307216241955757}, {'id': 64, 'seek': 57668, 'start': 576.68, 'end': 589.8399999999999, 'text': ' give you a clue. The clue is, we will use this part. It is anti-symmetric, reflexive and transitive.', 'tokens': [50364, 976, 291, 257, 13602, 13, 440, 13602, 307, 11, 321, 486, 764, 341, 644, 13, 467, 307, 6061, 12, 3187, 2174, 17475, 11, 23802, 488, 293, 1145, 2187, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.1813475664924173, 'compression_ratio': 1.4253731343283582, 'no_speech_prob': 0.07571268826723099}, {'id': 65, 'seek': 57668, 'start': 589.8399999999999, 'end': 599.1999999999999, 'text': ' These properties we will use to compute the dominator information. There is one particular', 'tokens': [51022, 1981, 7221, 321, 486, 764, 281, 14722, 264, 8859, 1639, 1589, 13, 821, 307, 472, 1729, 51490], 'temperature': 0.0, 'avg_logprob': -0.1813475664924173, 'compression_ratio': 1.4253731343283582, 'no_speech_prob': 0.07571268826723099}, {'id': 66, 'seek': 59920, 'start': 599.2, 'end': 609.08, 'text': ' node in your control flow graph whose dominator information you always know and that is entry.', 'tokens': [50364, 9984, 294, 428, 1969, 3095, 4295, 6104, 8859, 1639, 1589, 291, 1009, 458, 293, 300, 307, 8729, 13, 50858], 'temperature': 0.0, 'avg_logprob': -0.19997439781824747, 'compression_ratio': 1.4375, 'no_speech_prob': 0.039551567286252975}, {'id': 67, 'seek': 59920, 'start': 609.08, 'end': 628.2800000000001, 'text': ' Entry dominates whom? It dominates all. Exit dominates itself, only itself, right? Let us', 'tokens': [50858, 3951, 627, 8859, 1024, 7101, 30, 467, 8859, 1024, 439, 13, 2111, 270, 8859, 1024, 2564, 11, 787, 2564, 11, 558, 30, 961, 505, 51818], 'temperature': 0.0, 'avg_logprob': -0.19997439781824747, 'compression_ratio': 1.4375, 'no_speech_prob': 0.039551567286252975}, {'id': 68, 'seek': 62828, 'start': 629.0, 'end': 637.0, 'text': ' use the first reflexive property. What does the reflexive property say? A dominates A. So,', 'tokens': [50400, 764, 264, 700, 23802, 488, 4707, 13, 708, 775, 264, 23802, 488, 4707, 584, 30, 316, 8859, 1024, 316, 13, 407, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.17803071794055758, 'compression_ratio': 1.625, 'no_speech_prob': 0.006803339812904596}, {'id': 69, 'seek': 62828, 'start': 637.0, 'end': 642.9599999999999, 'text': ' I know. So, I can first, what I can do? For each node, I will say, okay, dominates, yes,', 'tokens': [50800, 286, 458, 13, 407, 11, 286, 393, 700, 11, 437, 286, 393, 360, 30, 1171, 1184, 9984, 11, 286, 486, 584, 11, 1392, 11, 8859, 1024, 11, 2086, 11, 51098], 'temperature': 0.0, 'avg_logprob': -0.17803071794055758, 'compression_ratio': 1.625, 'no_speech_prob': 0.006803339812904596}, {'id': 70, 'seek': 62828, 'start': 642.9599999999999, 'end': 653.9599999999999, 'text': ' it dominates itself. Reflexive property, done. Okay. If I am a node and I have two successes,', 'tokens': [51098, 309, 8859, 1024, 2564, 13, 16957, 2021, 488, 4707, 11, 1096, 13, 1033, 13, 759, 286, 669, 257, 9984, 293, 286, 362, 732, 26101, 11, 51648], 'temperature': 0.0, 'avg_logprob': -0.17803071794055758, 'compression_ratio': 1.625, 'no_speech_prob': 0.006803339812904596}, {'id': 71, 'seek': 65396, 'start': 653.96, 'end': 665.0400000000001, 'text': ' right? What can I know about, or if I have one successor, why two? If I have a successor,', 'tokens': [50364, 558, 30, 708, 393, 286, 458, 466, 11, 420, 498, 286, 362, 472, 31864, 11, 983, 732, 30, 759, 286, 362, 257, 31864, 11, 50918], 'temperature': 0.0, 'avg_logprob': -0.31573442050388884, 'compression_ratio': 1.1265822784810127, 'no_speech_prob': 0.5361135005950928}, {'id': 72, 'seek': 66504, 'start': 665.04, 'end': 685.56, 'text': ' what if I know my dominators, okay? If I know, no sorry, A and B, okay? B is a successor of A.', 'tokens': [50364, 437, 498, 286, 458, 452, 8859, 3391, 11, 1392, 30, 759, 286, 458, 11, 572, 2597, 11, 316, 293, 363, 11, 1392, 30, 363, 307, 257, 31864, 295, 316, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.23891451779533834, 'compression_ratio': 1.1604938271604939, 'no_speech_prob': 0.05992722138762474}, {'id': 73, 'seek': 68556, 'start': 685.56, 'end': 695.1199999999999, 'text': ' If you know what B dominates, B dominates someone or a set, what do you know about A now?', 'tokens': [50364, 759, 291, 458, 437, 363, 8859, 1024, 11, 363, 8859, 1024, 1580, 420, 257, 992, 11, 437, 360, 291, 458, 466, 316, 586, 30, 50842], 'temperature': 0.0, 'avg_logprob': -0.22796186411155844, 'compression_ratio': 1.435483870967742, 'no_speech_prob': 0.09787804633378983}, {'id': 74, 'seek': 68556, 'start': 695.1199999999999, 'end': 711.0799999999999, 'text': ' Whatever A was dominating, that plus? Yes, make sense. Make sense. So, what I am saying,', 'tokens': [50842, 8541, 316, 390, 43306, 11, 300, 1804, 30, 1079, 11, 652, 2020, 13, 4387, 2020, 13, 407, 11, 437, 286, 669, 1566, 11, 51640], 'temperature': 0.0, 'avg_logprob': -0.22796186411155844, 'compression_ratio': 1.435483870967742, 'no_speech_prob': 0.09787804633378983}, {'id': 75, 'seek': 71108, 'start': 711.08, 'end': 725.84, 'text': ' first of all, each node dominates itself. Then, if A is a predecessor of B and B dominates a bunch', 'tokens': [50364, 700, 295, 439, 11, 1184, 9984, 8859, 1024, 2564, 13, 1396, 11, 498, 316, 307, 257, 34991, 295, 363, 293, 363, 8859, 1024, 257, 3840, 51102], 'temperature': 0.0, 'avg_logprob': -0.13177963603626597, 'compression_ratio': 1.4318181818181819, 'no_speech_prob': 0.01334192231297493}, {'id': 76, 'seek': 71108, 'start': 725.84, 'end': 733.9200000000001, 'text': ' of nodes, then A will dominate all of those. And now that I know about A, what can I know,', 'tokens': [51102, 295, 13891, 11, 550, 316, 486, 28246, 439, 295, 729, 13, 400, 586, 300, 286, 458, 466, 316, 11, 437, 393, 286, 458, 11, 51506], 'temperature': 0.0, 'avg_logprob': -0.13177963603626597, 'compression_ratio': 1.4318181818181819, 'no_speech_prob': 0.01334192231297493}, {'id': 77, 'seek': 73392, 'start': 734.64, 'end': 759.04, 'text': ' its predecessor can include all of these. Make sense? Good. If B has multiple parents,', 'tokens': [50400, 1080, 34991, 393, 4090, 439, 295, 613, 13, 4387, 2020, 30, 2205, 13, 759, 363, 575, 3866, 3152, 11, 51620], 'temperature': 0.0, 'avg_logprob': -0.22162574270497198, 'compression_ratio': 1.048780487804878, 'no_speech_prob': 0.7424632906913757}, {'id': 78, 'seek': 75904, 'start': 759.04, 'end': 778.4399999999999, 'text': ' then what will happen? Good. So, now let us come to the, here is a block B.', 'tokens': [50364, 550, 437, 486, 1051, 30, 2205, 13, 407, 11, 586, 718, 505, 808, 281, 264, 11, 510, 307, 257, 3461, 363, 13, 51334], 'temperature': 0.0, 'avg_logprob': -0.2708007049560547, 'compression_ratio': 1.0, 'no_speech_prob': 0.8481437563896179}, {'id': 79, 'seek': 78904, 'start': 789.04, 'end': 813.7199999999999, 'text': ' Now, we are saying B1, if whatever B2 dominates, B1 will also dominate, whatever B3 dominates,', 'tokens': [50364, 823, 11, 321, 366, 1566, 363, 16, 11, 498, 2035, 363, 17, 8859, 1024, 11, 363, 16, 486, 611, 28246, 11, 2035, 363, 18, 8859, 1024, 11, 51598], 'temperature': 0.0, 'avg_logprob': -0.16623081699494394, 'compression_ratio': 1.2702702702702702, 'no_speech_prob': 0.5015192031860352}, {'id': 80, 'seek': 81372, 'start': 814.6, 'end': 839.6800000000001, 'text': ' right? What about here? So, B4 may dominate, B4 may dominate a set, but will B5 dominate them?', 'tokens': [50408, 558, 30, 708, 466, 510, 30, 407, 11, 363, 19, 815, 28246, 11, 363, 19, 815, 28246, 257, 992, 11, 457, 486, 363, 20, 28246, 552, 30, 51662], 'temperature': 0.0, 'avg_logprob': -0.20445054577242944, 'compression_ratio': 1.205128205128205, 'no_speech_prob': 0.8503124713897705}, {'id': 81, 'seek': 83968, 'start': 839.68, 'end': 847.28, 'text': ' No. No. Will B6 dominate them? No. So, now what is the property that, I mean,', 'tokens': [50364, 883, 13, 883, 13, 3099, 363, 21, 28246, 552, 30, 883, 13, 407, 11, 586, 437, 307, 264, 4707, 300, 11, 286, 914, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.21138290189347178, 'compression_ratio': 1.359375, 'no_speech_prob': 0.01774376817047596}, {'id': 82, 'seek': 83968, 'start': 847.28, 'end': 859.4, 'text': ' that is kind of, what is happening here? I mean, what can I do to get the dominance information?', 'tokens': [50744, 300, 307, 733, 295, 11, 437, 307, 2737, 510, 30, 286, 914, 11, 437, 393, 286, 360, 281, 483, 264, 34987, 1589, 30, 51350], 'temperature': 0.0, 'avg_logprob': -0.21138290189347178, 'compression_ratio': 1.359375, 'no_speech_prob': 0.01774376817047596}, {'id': 83, 'seek': 85940, 'start': 859.4, 'end': 871.68, 'text': ' If B5, so what I am saying, if I know B2, B3, in this case I can compute that of B1. Here,', 'tokens': [50364, 759, 363, 20, 11, 370, 437, 286, 669, 1566, 11, 498, 286, 458, 363, 17, 11, 363, 18, 11, 294, 341, 1389, 286, 393, 14722, 300, 295, 363, 16, 13, 1692, 11, 50978], 'temperature': 0.0, 'avg_logprob': -0.10533090259717859, 'compression_ratio': 1.338235294117647, 'no_speech_prob': 0.011247300542891026}, {'id': 84, 'seek': 85940, 'start': 871.68, 'end': 882.16, 'text': ' if I know B4, I cannot do for B5, B6, right? If I know, let us try the other way round now.', 'tokens': [50978, 498, 286, 458, 363, 19, 11, 286, 2644, 360, 337, 363, 20, 11, 363, 21, 11, 558, 30, 759, 286, 458, 11, 718, 505, 853, 264, 661, 636, 3098, 586, 13, 51502], 'temperature': 0.0, 'avg_logprob': -0.10533090259717859, 'compression_ratio': 1.338235294117647, 'no_speech_prob': 0.011247300542891026}, {'id': 85, 'seek': 88216, 'start': 883.04, 'end': 897.1999999999999, 'text': ' I know what? That B1 dominates a few, right? Or rather, B1 knows who is dominating B1. If', 'tokens': [50408, 286, 458, 437, 30, 663, 363, 16, 8859, 1024, 257, 1326, 11, 558, 30, 1610, 2831, 11, 363, 16, 3255, 567, 307, 43306, 363, 16, 13, 759, 51116], 'temperature': 0.0, 'avg_logprob': -0.20628218815244478, 'compression_ratio': 1.5041322314049588, 'no_speech_prob': 0.031113658100366592}, {'id': 86, 'seek': 88216, 'start': 897.1999999999999, 'end': 907.0799999999999, 'text': ' B1 knows who is dominating B1, can I know about B2? Yeah? Whoever is dominating B1 will also', 'tokens': [51116, 363, 16, 3255, 567, 307, 43306, 363, 16, 11, 393, 286, 458, 466, 363, 17, 30, 865, 30, 24743, 307, 43306, 363, 16, 486, 611, 51610], 'temperature': 0.0, 'avg_logprob': -0.20628218815244478, 'compression_ratio': 1.5041322314049588, 'no_speech_prob': 0.031113658100366592}, {'id': 87, 'seek': 90708, 'start': 907.2, 'end': 915.84, 'text': ' dominate B2. Whoever is dominating B1 will also dominate? Good. Whoever is dominating B5,', 'tokens': [50370, 28246, 363, 17, 13, 24743, 307, 43306, 363, 16, 486, 611, 28246, 30, 2205, 13, 24743, 307, 43306, 363, 20, 11, 50802], 'temperature': 0.0, 'avg_logprob': -0.2199824985704924, 'compression_ratio': 2.0757575757575757, 'no_speech_prob': 0.0715288519859314}, {'id': 88, 'seek': 90708, 'start': 915.84, 'end': 922.88, 'text': ' are they guaranteed to dominate B4? Whoever is dominating B6, are they guaranteed to dominate', 'tokens': [50802, 366, 436, 18031, 281, 28246, 363, 19, 30, 24743, 307, 43306, 363, 21, 11, 366, 436, 18031, 281, 28246, 51154], 'temperature': 0.0, 'avg_logprob': -0.2199824985704924, 'compression_ratio': 2.0757575757575757, 'no_speech_prob': 0.0715288519859314}, {'id': 89, 'seek': 90708, 'start': 922.88, 'end': 936.9200000000001, 'text': " B4? No. But the dominators of B4 are included in B5's dominators. The dominators of B4 are", 'tokens': [51154, 363, 19, 30, 883, 13, 583, 264, 8859, 3391, 295, 363, 19, 366, 5556, 294, 363, 20, 311, 8859, 3391, 13, 440, 8859, 3391, 295, 363, 19, 366, 51856], 'temperature': 0.0, 'avg_logprob': -0.2199824985704924, 'compression_ratio': 2.0757575757575757, 'no_speech_prob': 0.0715288519859314}, {'id': 90, 'seek': 93692, 'start': 937.7199999999999, 'end': 946.36, 'text': ' also included in B6. If I know the dominators of B5, if I know the dominators of B6, how do', 'tokens': [50404, 611, 5556, 294, 363, 21, 13, 759, 286, 458, 264, 8859, 3391, 295, 363, 20, 11, 498, 286, 458, 264, 8859, 3391, 295, 363, 21, 11, 577, 360, 50836], 'temperature': 0.0, 'avg_logprob': -0.19711179248357225, 'compression_ratio': 1.575, 'no_speech_prob': 0.0010648248717188835}, {'id': 91, 'seek': 93692, 'start': 946.36, 'end': 960.52, 'text': ' I compute the dominators of B4? So, now if I know my dominators, then I can pass this information', 'tokens': [50836, 286, 14722, 264, 8859, 3391, 295, 363, 19, 30, 407, 11, 586, 498, 286, 458, 452, 8859, 3391, 11, 550, 286, 393, 1320, 341, 1589, 51544], 'temperature': 0.0, 'avg_logprob': -0.19711179248357225, 'compression_ratio': 1.575, 'no_speech_prob': 0.0010648248717188835}, {'id': 92, 'seek': 96052, 'start': 960.52, 'end': 975.64, 'text': ' to my children. My children, notes, will take the dominators of, take a intersection. What if there', 'tokens': [50364, 281, 452, 2227, 13, 1222, 2227, 11, 5570, 11, 486, 747, 264, 8859, 3391, 295, 11, 747, 257, 15236, 13, 708, 498, 456, 51120], 'temperature': 0.0, 'avg_logprob': -0.16709228924342565, 'compression_ratio': 1.5625, 'no_speech_prob': 0.24576641619205475}, {'id': 93, 'seek': 96052, 'start': 975.64, 'end': 983.16, 'text': ' is a loop? So, this says that my children depend on me. If there is a loop, I depend on my children,', 'tokens': [51120, 307, 257, 6367, 30, 407, 11, 341, 1619, 300, 452, 2227, 5672, 322, 385, 13, 759, 456, 307, 257, 6367, 11, 286, 5672, 322, 452, 2227, 11, 51496], 'temperature': 0.0, 'avg_logprob': -0.16709228924342565, 'compression_ratio': 1.5625, 'no_speech_prob': 0.24576641619205475}, {'id': 94, 'seek': 98316, 'start': 984.12, 'end': 995.48, 'text': ' my children depend upon me. What will happen? And this is where comes the beauty of iterative', 'tokens': [50412, 452, 2227, 5672, 3564, 385, 13, 708, 486, 1051, 30, 400, 341, 307, 689, 1487, 264, 6643, 295, 17138, 1166, 50980], 'temperature': 0.0, 'avg_logprob': -0.15322990806735293, 'compression_ratio': 1.3706293706293706, 'no_speech_prob': 0.03153941035270691}, {'id': 95, 'seek': 98316, 'start': 995.48, 'end': 1004.4399999999999, 'text': ' data flow analysis. You would have heard this phrase already, right? Have you? No? Data flow analysis.', 'tokens': [50980, 1412, 3095, 5215, 13, 509, 576, 362, 2198, 341, 9535, 1217, 11, 558, 30, 3560, 291, 30, 883, 30, 11888, 3095, 5215, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.15322990806735293, 'compression_ratio': 1.3706293706293706, 'no_speech_prob': 0.03153941035270691}, {'id': 96, 'seek': 100444, 'start': 1004.44, 'end': 1018.36, 'text': ' So, what we will do here? Here is a piece of algorithm. This algorithm, what it computes,', 'tokens': [50364, 407, 11, 437, 321, 486, 360, 510, 30, 1692, 307, 257, 2522, 295, 9284, 13, 639, 9284, 11, 437, 309, 715, 1819, 11, 51060], 'temperature': 0.0, 'avg_logprob': -0.17251226637098524, 'compression_ratio': 1.0987654320987654, 'no_speech_prob': 0.02666866034269333}, {'id': 97, 'seek': 101836, 'start': 1018.36, 'end': 1037.4, 'text': ' let us see. It computes the set of all dominators. It initializes the dominator of root to be just', 'tokens': [50364, 718, 505, 536, 13, 467, 715, 1819, 264, 992, 295, 439, 8859, 3391, 13, 467, 5883, 5660, 264, 8859, 1639, 295, 5593, 281, 312, 445, 51316], 'temperature': 0.0, 'avg_logprob': -0.1479745932987758, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.012026412412524223}, {'id': 98, 'seek': 101836, 'start': 1037.4, 'end': 1044.3600000000001, 'text': ' the root. Then, for the rest of the guys, it initializes the dominators to be set of all nodes,', 'tokens': [51316, 264, 5593, 13, 1396, 11, 337, 264, 1472, 295, 264, 1074, 11, 309, 5883, 5660, 264, 8859, 3391, 281, 312, 992, 295, 439, 13891, 11, 51664], 'temperature': 0.0, 'avg_logprob': -0.1479745932987758, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.012026412412524223}, {'id': 99, 'seek': 104436, 'start': 1044.52, 'end': 1056.6799999999998, 'text': ' set of all nodes. And then, do not worry about the repeat until loop yet. Look at just this part.', 'tokens': [50372, 992, 295, 439, 13891, 13, 400, 550, 11, 360, 406, 3292, 466, 264, 7149, 1826, 6367, 1939, 13, 2053, 412, 445, 341, 644, 13, 50980], 'temperature': 0.0, 'avg_logprob': -0.17021588178781363, 'compression_ratio': 1.4202898550724639, 'no_speech_prob': 0.005214678589254618}, {'id': 100, 'seek': 104436, 'start': 1056.6799999999998, 'end': 1067.7199999999998, 'text': ' What it does? It goes over every node. Find out the predecessor of the node. For each predecessor,', 'tokens': [50980, 708, 309, 775, 30, 467, 1709, 670, 633, 9984, 13, 11809, 484, 264, 34991, 295, 264, 9984, 13, 1171, 1184, 34991, 11, 51532], 'temperature': 0.0, 'avg_logprob': -0.17021588178781363, 'compression_ratio': 1.4202898550724639, 'no_speech_prob': 0.005214678589254618}, {'id': 101, 'seek': 106772, 'start': 1068.28, 'end': 1076.28, 'text': ' it says, hey, who are all your dominators? Let me take an intersection.', 'tokens': [50392, 309, 1619, 11, 4177, 11, 567, 366, 439, 428, 8859, 3391, 30, 961, 385, 747, 364, 15236, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.13582601266748764, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0029318807646632195}, {'id': 102, 'seek': 106772, 'start': 1078.28, 'end': 1085.32, 'text': ' So, it finds out for each predecessor, it does an intersection. How does it compute the intersection?', 'tokens': [50892, 407, 11, 309, 10704, 484, 337, 1184, 34991, 11, 309, 775, 364, 15236, 13, 1012, 775, 309, 14722, 264, 15236, 30, 51244], 'temperature': 0.0, 'avg_logprob': -0.13582601266748764, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0029318807646632195}, {'id': 103, 'seek': 106772, 'start': 1086.04, 'end': 1092.44, 'text': ' It sets t equal to set of all nodes and keep taking t intersection, the dominator of p.', 'tokens': [51280, 467, 6352, 256, 2681, 281, 992, 295, 439, 13891, 293, 1066, 1940, 256, 15236, 11, 264, 8859, 1639, 295, 280, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.13582601266748764, 'compression_ratio': 1.6012269938650308, 'no_speech_prob': 0.0029318807646632195}, {'id': 104, 'seek': 109244, 'start': 1092.44, 'end': 1101.4, 'text': ' When I say this dominator, it is the current dominators. Initially, for each node, the dominator', 'tokens': [50364, 1133, 286, 584, 341, 8859, 1639, 11, 309, 307, 264, 2190, 8859, 3391, 13, 29446, 11, 337, 1184, 9984, 11, 264, 8859, 1639, 50812], 'temperature': 0.0, 'avg_logprob': -0.12593974076308212, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.0011936925584450364}, {'id': 105, 'seek': 109244, 'start': 1101.4, 'end': 1108.6000000000001, 'text': " is set of all nodes. So, initially, they will try to, if my predecessor's dominators have not", 'tokens': [50812, 307, 992, 295, 439, 13891, 13, 407, 11, 9105, 11, 436, 486, 853, 281, 11, 498, 452, 34991, 311, 8859, 3391, 362, 406, 51172], 'temperature': 0.0, 'avg_logprob': -0.12593974076308212, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.0011936925584450364}, {'id': 106, 'seek': 109244, 'start': 1108.6000000000001, 'end': 1115.96, 'text': ' changed, I will take their intersection and still get the whole set. That is fine. After I do this,', 'tokens': [51172, 3105, 11, 286, 486, 747, 641, 15236, 293, 920, 483, 264, 1379, 992, 13, 663, 307, 2489, 13, 2381, 286, 360, 341, 11, 51540], 'temperature': 0.0, 'avg_logprob': -0.12593974076308212, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.0011936925584450364}, {'id': 107, 'seek': 111596, 'start': 1115.96, 'end': 1127.8, 'text': ' after I have taken an intersection, what I will do? I will check the new set of dominators.', 'tokens': [50364, 934, 286, 362, 2726, 364, 15236, 11, 437, 286, 486, 360, 30, 286, 486, 1520, 264, 777, 992, 295, 8859, 3391, 13, 50956], 'temperature': 0.0, 'avg_logprob': -0.10692701584253556, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.0027120979502797127}, {'id': 108, 'seek': 111596, 'start': 1130.44, 'end': 1134.44, 'text': ' By the way, I will take the intersection and add myself. I have to add myself. I forgot about it.', 'tokens': [51088, 3146, 264, 636, 11, 286, 486, 747, 264, 15236, 293, 909, 2059, 13, 286, 362, 281, 909, 2059, 13, 286, 5298, 466, 309, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.10692701584253556, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.0027120979502797127}, {'id': 109, 'seek': 111596, 'start': 1136.52, 'end': 1142.6000000000001, 'text': ' This B5, B6, right? You will take the intersection of the dominators of B5 and B6', 'tokens': [51392, 639, 363, 20, 11, 363, 21, 11, 558, 30, 509, 486, 747, 264, 15236, 295, 264, 8859, 3391, 295, 363, 20, 293, 363, 21, 51696], 'temperature': 0.0, 'avg_logprob': -0.10692701584253556, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.0027120979502797127}, {'id': 110, 'seek': 114260, 'start': 1143.08, 'end': 1155.7199999999998, 'text': ' and then add B4. You are adding the same n here, t union n. What is this d? d is the new computed', 'tokens': [50388, 293, 550, 909, 363, 19, 13, 509, 366, 5127, 264, 912, 297, 510, 11, 256, 11671, 297, 13, 708, 307, 341, 274, 30, 274, 307, 264, 777, 40610, 51020], 'temperature': 0.0, 'avg_logprob': -0.2124324578505296, 'compression_ratio': 1.353846153846154, 'no_speech_prob': 0.004668149631470442}, {'id': 111, 'seek': 114260, 'start': 1157.7199999999998, 'end': 1162.76, 'text': ' dominators. You will check, is this d different from what my current value is?', 'tokens': [51120, 8859, 3391, 13, 509, 486, 1520, 11, 307, 341, 274, 819, 490, 437, 452, 2190, 2158, 307, 30, 51372], 'temperature': 0.0, 'avg_logprob': -0.2124324578505296, 'compression_ratio': 1.353846153846154, 'no_speech_prob': 0.004668149631470442}, {'id': 112, 'seek': 116276, 'start': 1163.48, 'end': 1175.0, 'text': ' If it has, if it is different, I will just say hey, I am changed. My dominator value has changed.', 'tokens': [50400, 759, 309, 575, 11, 498, 309, 307, 819, 11, 286, 486, 445, 584, 4177, 11, 286, 669, 3105, 13, 1222, 8859, 1639, 2158, 575, 3105, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.21272001033876, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.18566876649856567}, {'id': 113, 'seek': 116276, 'start': 1175.0, 'end': 1180.36, 'text': ' I will say change equal to true and say dominator, right? If it has not changed, no problem.', 'tokens': [50976, 286, 486, 584, 1319, 2681, 281, 2074, 293, 584, 8859, 1639, 11, 558, 30, 759, 309, 575, 406, 3105, 11, 572, 1154, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.21272001033876, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.18566876649856567}, {'id': 114, 'seek': 116276, 'start': 1181.56, 'end': 1190.68, 'text': ' And now, I am doing for here to here. What did I do in one round? I took whatever the dominator', 'tokens': [51304, 400, 586, 11, 286, 669, 884, 337, 510, 281, 510, 13, 708, 630, 286, 360, 294, 472, 3098, 30, 286, 1890, 2035, 264, 8859, 1639, 51760], 'temperature': 0.0, 'avg_logprob': -0.21272001033876, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.18566876649856567}, {'id': 115, 'seek': 119068, 'start': 1190.68, 'end': 1199.0, 'text': ' information I had and based on my parents information, my predecessor information,', 'tokens': [50364, 1589, 286, 632, 293, 2361, 322, 452, 3152, 1589, 11, 452, 34991, 1589, 11, 50780], 'temperature': 0.0, 'avg_logprob': -0.12237921215239025, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.0038191177882254124}, {'id': 116, 'seek': 119068, 'start': 1199.0, 'end': 1207.64, 'text': ' I recomputed myself. Done? At the end of it, I will check has any node changed.', 'tokens': [50780, 286, 23334, 2582, 292, 2059, 13, 18658, 30, 1711, 264, 917, 295, 309, 11, 286, 486, 1520, 575, 604, 9984, 3105, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.12237921215239025, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.0038191177882254124}, {'id': 117, 'seek': 119068, 'start': 1208.76, 'end': 1218.44, 'text': ' If any node has changed, you will repeat the same process. We will take an example.', 'tokens': [51268, 759, 604, 9984, 575, 3105, 11, 291, 486, 7149, 264, 912, 1399, 13, 492, 486, 747, 364, 1365, 13, 51752], 'temperature': 0.0, 'avg_logprob': -0.12237921215239025, 'compression_ratio': 1.5569620253164558, 'no_speech_prob': 0.0038191177882254124}, {'id': 118, 'seek': 121844, 'start': 1219.0800000000002, 'end': 1225.0, 'text': ' Should we take? Yeah, let us take the example and then we will analyze the algorithm.', 'tokens': [50396, 6454, 321, 747, 30, 865, 11, 718, 505, 747, 264, 1365, 293, 550, 321, 486, 12477, 264, 9284, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.18453324030316065, 'compression_ratio': 1.6481481481481481, 'no_speech_prob': 0.0014904303243383765}, {'id': 119, 'seek': 121844, 'start': 1226.8400000000001, 'end': 1233.56, 'text': ' Let us take an example to convince ourselves, yes, this works for this example. Then we will', 'tokens': [50784, 961, 505, 747, 364, 1365, 281, 13447, 4175, 11, 2086, 11, 341, 1985, 337, 341, 1365, 13, 1396, 321, 486, 51120], 'temperature': 0.0, 'avg_logprob': -0.18453324030316065, 'compression_ratio': 1.6481481481481481, 'no_speech_prob': 0.0014904303243383765}, {'id': 120, 'seek': 121844, 'start': 1233.56, 'end': 1242.2, 'text': ' convince ourselves this actually works. This is something that should make all of you at', 'tokens': [51120, 13447, 4175, 341, 767, 1985, 13, 639, 307, 746, 300, 820, 652, 439, 295, 291, 412, 51552], 'temperature': 0.0, 'avg_logprob': -0.18453324030316065, 'compression_ratio': 1.6481481481481481, 'no_speech_prob': 0.0014904303243383765}, {'id': 121, 'seek': 124220, 'start': 1242.2, 'end': 1251.32, 'text': ' least be skeptical. Will this terminate? How many of you had this doubt? If none of you had', 'tokens': [50364, 1935, 312, 28601, 13, 3099, 341, 10761, 473, 30, 1012, 867, 295, 291, 632, 341, 6385, 30, 759, 6022, 295, 291, 632, 50820], 'temperature': 0.0, 'avg_logprob': -0.26559208534859324, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.010983286425471306}, {'id': 122, 'seek': 124220, 'start': 1251.32, 'end': 1258.1200000000001, 'text': ' this doubt, yes, good. I am happy at least one had this doubt. Others did not have this doubt.', 'tokens': [50820, 341, 6385, 11, 2086, 11, 665, 13, 286, 669, 2055, 412, 1935, 472, 632, 341, 6385, 13, 20277, 630, 406, 362, 341, 6385, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.26559208534859324, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.010983286425471306}, {'id': 123, 'seek': 124220, 'start': 1258.1200000000001, 'end': 1266.8400000000001, 'text': ' This is it will not. You already have studied fixed point analysis, right? So, now,', 'tokens': [51160, 639, 307, 309, 486, 406, 13, 509, 1217, 362, 9454, 6806, 935, 5215, 11, 558, 30, 407, 11, 586, 11, 51596], 'temperature': 0.0, 'avg_logprob': -0.26559208534859324, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.010983286425471306}, {'id': 124, 'seek': 126684, 'start': 1266.9199999999998, 'end': 1273.24, 'text': ' at the end of this example, we will then reason about why this will terminate. We will come to', 'tokens': [50368, 412, 264, 917, 295, 341, 1365, 11, 321, 486, 550, 1778, 466, 983, 341, 486, 10761, 473, 13, 492, 486, 808, 281, 50684], 'temperature': 0.0, 'avg_logprob': -0.27407063228983275, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.0006985563668422401}, {'id': 125, 'seek': 126684, 'start': 1273.24, 'end': 1280.76, 'text': ' that. Good. So, we will compute the dominators. Can you take on your in your text books or other', 'tokens': [50684, 300, 13, 2205, 13, 407, 11, 321, 486, 14722, 264, 8859, 3391, 13, 1664, 291, 747, 322, 428, 294, 428, 2487, 3642, 420, 661, 51060], 'temperature': 0.0, 'avg_logprob': -0.27407063228983275, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.0006985563668422401}, {'id': 126, 'seek': 126684, 'start': 1280.76, 'end': 1290.28, 'text': ' notebooks I mean, take this example and run the algorithm and compute the dominators.', 'tokens': [51060, 43782, 286, 914, 11, 747, 341, 1365, 293, 1190, 264, 9284, 293, 14722, 264, 8859, 3391, 13, 51536], 'temperature': 0.0, 'avg_logprob': -0.27407063228983275, 'compression_ratio': 1.7098765432098766, 'no_speech_prob': 0.0006985563668422401}, {'id': 127, 'seek': 129028, 'start': 1290.28, 'end': 1297.32, 'text': ' So, we will initialize the, so write a nice simple table. I mean the way to do it would be', 'tokens': [50364, 407, 11, 321, 486, 5883, 1125, 264, 11, 370, 2464, 257, 1481, 2199, 3199, 13, 286, 914, 264, 636, 281, 360, 309, 576, 312, 50716], 'temperature': 0.0, 'avg_logprob': -0.24098313022667253, 'compression_ratio': 1.396103896103896, 'no_speech_prob': 0.00279840431176126}, {'id': 128, 'seek': 129028, 'start': 1298.52, 'end': 1307.56, 'text': ' you can do a nice table here. B1, B2, why B1, B2? It should be entry as well, right?', 'tokens': [50776, 291, 393, 360, 257, 1481, 3199, 510, 13, 363, 16, 11, 363, 17, 11, 983, 363, 16, 11, 363, 17, 30, 467, 820, 312, 8729, 382, 731, 11, 558, 30, 51228], 'temperature': 0.0, 'avg_logprob': -0.24098313022667253, 'compression_ratio': 1.396103896103896, 'no_speech_prob': 0.00279840431176126}, {'id': 129, 'seek': 129028, 'start': 1309.32, 'end': 1313.72, 'text': ' So, in round one, you are computing the', 'tokens': [51316, 407, 11, 294, 3098, 472, 11, 291, 366, 15866, 264, 51536], 'temperature': 0.0, 'avg_logprob': -0.24098313022667253, 'compression_ratio': 1.396103896103896, 'no_speech_prob': 0.00279840431176126}, {'id': 130, 'seek': 132028, 'start': 1320.28, 'end': 1331.24, 'text': ' dominators. Yeah. So, what will I initialize the dominators of each of them?', 'tokens': [50364, 8859, 3391, 13, 865, 13, 407, 11, 437, 486, 286, 5883, 1125, 264, 8859, 3391, 295, 1184, 295, 552, 30, 50912], 'temperature': 0.0, 'avg_logprob': -0.23906732073017195, 'compression_ratio': 1.3053435114503817, 'no_speech_prob': 0.005711506120860577}, {'id': 131, 'seek': 132028, 'start': 1333.96, 'end': 1342.6, 'text': ' To their own self. No, no, sorry, root as entry and all others with the whole set. I will just', 'tokens': [51048, 1407, 641, 1065, 2698, 13, 883, 11, 572, 11, 2597, 11, 5593, 382, 8729, 293, 439, 2357, 365, 264, 1379, 992, 13, 286, 486, 445, 51480], 'temperature': 0.0, 'avg_logprob': -0.23906732073017195, 'compression_ratio': 1.3053435114503817, 'no_speech_prob': 0.005711506120860577}, {'id': 132, 'seek': 134260, 'start': 1342.6, 'end': 1361.08, 'text': ' mark it as N here and then what I am doing? I am in this loop. In this loop,', 'tokens': [50364, 1491, 309, 382, 426, 510, 293, 550, 437, 286, 669, 884, 30, 286, 669, 294, 341, 6367, 13, 682, 341, 6367, 11, 51288], 'temperature': 0.0, 'avg_logprob': -0.19729262131911057, 'compression_ratio': 1.1014492753623188, 'no_speech_prob': 0.020181996747851372}, {'id': 133, 'seek': 136108, 'start': 1361.08, 'end': 1379.0, 'text': ' let us pick for B1. B1, what will happen? B1 will take an intersection of all and entry. It will get', 'tokens': [50364, 718, 505, 1888, 337, 363, 16, 13, 363, 16, 11, 437, 486, 1051, 30, 363, 16, 486, 747, 364, 15236, 295, 439, 293, 8729, 13, 467, 486, 483, 51260], 'temperature': 0.0, 'avg_logprob': -0.20504377782344818, 'compression_ratio': 1.1111111111111112, 'no_speech_prob': 0.008158581331372261}, {'id': 134, 'seek': 137900, 'start': 1379.0, 'end': 1401.48, 'text': ' entry, right? Entry, then union with B1. Entry, B1 and then what will happen to B2? Entry,', 'tokens': [50364, 8729, 11, 558, 30, 3951, 627, 11, 550, 11671, 365, 363, 16, 13, 3951, 627, 11, 363, 16, 293, 550, 437, 486, 1051, 281, 363, 17, 30, 3951, 627, 11, 51488], 'temperature': 0.0, 'avg_logprob': -0.29656533633961396, 'compression_ratio': 1.2, 'no_speech_prob': 0.0281593706458807}, {'id': 135, 'seek': 140148, 'start': 1401.64, 'end': 1425.32, 'text': ' B1, B2. Then what about B3? B4, B4 be careful, right? B4 has two predecessors, B3 and B6.', 'tokens': [50372, 363, 16, 11, 363, 17, 13, 1396, 437, 466, 363, 18, 30, 363, 19, 11, 363, 19, 312, 5026, 11, 558, 30, 363, 19, 575, 732, 24874, 45700, 11, 363, 18, 293, 363, 21, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.22287896963266227, 'compression_ratio': 1.0229885057471264, 'no_speech_prob': 0.010012850165367126}, {'id': 136, 'seek': 142532, 'start': 1425.96, 'end': 1434.4399999999998, 'text': " What is B3's dominator of information? I already have entry B1, B3 intersection with", 'tokens': [50396, 708, 307, 363, 18, 311, 8859, 1639, 295, 1589, 30, 286, 1217, 362, 8729, 363, 16, 11, 363, 18, 15236, 365, 50820], 'temperature': 0.0, 'avg_logprob': -0.10641983677359189, 'compression_ratio': 1.4331210191082802, 'no_speech_prob': 0.00553822610527277}, {'id': 137, 'seek': 142532, 'start': 1436.36, 'end': 1444.2, 'text': ' the full set N. So, the intersection will give me entry B1, B3 and I will add B4.', 'tokens': [50916, 264, 1577, 992, 426, 13, 407, 11, 264, 15236, 486, 976, 385, 8729, 363, 16, 11, 363, 18, 293, 286, 486, 909, 363, 19, 13, 51308], 'temperature': 0.0, 'avg_logprob': -0.10641983677359189, 'compression_ratio': 1.4331210191082802, 'no_speech_prob': 0.00553822610527277}, {'id': 138, 'seek': 142532, 'start': 1447.48, 'end': 1450.36, 'text': ' So, why do not you finish it individually? The rest of the', 'tokens': [51472, 407, 11, 983, 360, 406, 291, 2413, 309, 16652, 30, 440, 1472, 295, 264, 51616], 'temperature': 0.0, 'avg_logprob': -0.10641983677359189, 'compression_ratio': 1.4331210191082802, 'no_speech_prob': 0.00553822610527277}, {'id': 139, 'seek': 145036, 'start': 1451.08, 'end': 1461.8799999999999, 'text': ' table, once you are done with round 1, let me know. First round is over. So, at the end of', 'tokens': [50400, 3199, 11, 1564, 291, 366, 1096, 365, 3098, 502, 11, 718, 385, 458, 13, 2386, 3098, 307, 670, 13, 407, 11, 412, 264, 917, 295, 50940], 'temperature': 0.0, 'avg_logprob': -0.1848480918190696, 'compression_ratio': 1.4076923076923078, 'no_speech_prob': 0.016977956518530846}, {'id': 140, 'seek': 145036, 'start': 1461.8799999999999, 'end': 1467.9599999999998, 'text': ' the first round, the value of change flag is true. So, we will go to the second round. Yeah,', 'tokens': [50940, 264, 700, 3098, 11, 264, 2158, 295, 1319, 7166, 307, 2074, 13, 407, 11, 321, 486, 352, 281, 264, 1150, 3098, 13, 865, 11, 51244], 'temperature': 0.0, 'avg_logprob': -0.1848480918190696, 'compression_ratio': 1.4076923076923078, 'no_speech_prob': 0.016977956518530846}, {'id': 141, 'seek': 146796, 'start': 1467.96, 'end': 1484.44, 'text': ' continue with the second round. So, at the end of first round, so let me fill the table. Tell', 'tokens': [50364, 2354, 365, 264, 1150, 3098, 13, 407, 11, 412, 264, 917, 295, 700, 3098, 11, 370, 718, 385, 2836, 264, 3199, 13, 5115, 51188], 'temperature': 0.0, 'avg_logprob': -0.2527821858723958, 'compression_ratio': 1.1625, 'no_speech_prob': 0.0013105155667290092}, {'id': 142, 'seek': 148444, 'start': 1484.44, 'end': 1503.88, 'text': ' me the names for this. What is the number for B5? Entry, yeah, louder. Entry, yeah, B1, B3, B4', 'tokens': [50364, 385, 264, 5288, 337, 341, 13, 708, 307, 264, 1230, 337, 363, 20, 30, 3951, 627, 11, 1338, 11, 22717, 13, 3951, 627, 11, 1338, 11, 363, 16, 11, 363, 18, 11, 363, 19, 51336], 'temperature': 0.0, 'avg_logprob': -0.21728796707956413, 'compression_ratio': 1.205128205128205, 'no_speech_prob': 0.035493601113557816}, {'id': 143, 'seek': 150388, 'start': 1503.88, 'end': 1530.7600000000002, 'text': ' and B5, okay. And B6? Entry, B1, B3, B4, B6, okay. And exit? Entry, B1 and exit.', 'tokens': [50368, 293, 363, 20, 11, 1392, 13, 400, 363, 21, 30, 3951, 627, 11, 363, 16, 11, 363, 18, 11, 363, 19, 11, 363, 21, 11, 1392, 13, 400, 11043, 30, 3951, 627, 11, 363, 16, 293, 11043, 13, 51708], 'temperature': 0.0, 'avg_logprob': -0.31606904471792824, 'compression_ratio': 1.4035087719298245, 'no_speech_prob': 0.11479891091585159}, {'id': 144, 'seek': 153388, 'start': 1534.2800000000002, 'end': 1539.24, 'text': ' Everyone got the same set? Anyone who got it different?', 'tokens': [50384, 5198, 658, 264, 912, 992, 30, 14643, 567, 658, 309, 819, 30, 50632], 'temperature': 0.0, 'avg_logprob': -0.26828520386307325, 'compression_ratio': 1.2949640287769784, 'no_speech_prob': 0.007469013798981905}, {'id': 145, 'seek': 153388, 'start': 1541.3200000000002, 'end': 1547.24, 'text': ' No? Okay, then we will go by Konbanega Kararpati, audience poll. Okay, next round,', 'tokens': [50736, 883, 30, 1033, 11, 550, 321, 486, 352, 538, 12718, 5144, 6335, 8009, 6529, 6908, 11, 4034, 6418, 13, 1033, 11, 958, 3098, 11, 51032], 'temperature': 0.0, 'avg_logprob': -0.26828520386307325, 'compression_ratio': 1.2949640287769784, 'no_speech_prob': 0.007469013798981905}, {'id': 146, 'seek': 153388, 'start': 1549.5600000000002, 'end': 1550.3600000000001, 'text': ' anything is changing?', 'tokens': [51148, 1340, 307, 4473, 30, 51188], 'temperature': 0.0, 'avg_logprob': -0.26828520386307325, 'compression_ratio': 1.2949640287769784, 'no_speech_prob': 0.007469013798981905}, {'id': 147, 'seek': 153388, 'start': 1555.48, 'end': 1556.7600000000002, 'text': ' Did anyone say yes?', 'tokens': [51444, 2589, 2878, 584, 2086, 30, 51508], 'temperature': 0.0, 'avg_logprob': -0.26828520386307325, 'compression_ratio': 1.2949640287769784, 'no_speech_prob': 0.007469013798981905}, {'id': 148, 'seek': 156388, 'start': 1564.0400000000002, 'end': 1566.92, 'text': ' No change.', 'tokens': [50372, 883, 1319, 13, 50516], 'temperature': 0.0, 'avg_logprob': -0.52940354347229, 'compression_ratio': 1.125, 'no_speech_prob': 0.3094346523284912}, {'id': 149, 'seek': 156388, 'start': 1566.92, 'end': 1568.92, 'text': ' No change?', 'tokens': [50516, 883, 1319, 30, 50616], 'temperature': 0.0, 'avg_logprob': -0.52940354347229, 'compression_ratio': 1.125, 'no_speech_prob': 0.3094346523284912}, {'id': 150, 'seek': 156388, 'start': 1588.6000000000001, 'end': 1592.0400000000002, 'text': ' Did something change? Which one?', 'tokens': [51600, 2589, 746, 1319, 30, 3013, 472, 30, 51772], 'temperature': 0.0, 'avg_logprob': -0.52940354347229, 'compression_ratio': 1.125, 'no_speech_prob': 0.3094346523284912}, {'id': 151, 'seek': 159388, 'start': 1594.2800000000002, 'end': 1601.64, 'text': ' B4, what happened to that? B4 was entry, B1, B3, B4, right? Okay.', 'tokens': [50384, 363, 19, 11, 437, 2011, 281, 300, 30, 363, 19, 390, 8729, 11, 363, 16, 11, 363, 18, 11, 363, 19, 11, 558, 30, 1033, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.144370174407959, 'compression_ratio': 1.4820512820512821, 'no_speech_prob': 0.0037272884510457516}, {'id': 152, 'seek': 159388, 'start': 1605.72, 'end': 1612.7600000000002, 'text': ' Now, B6 is getting added, is it? How is it getting added? Let us compute that of B4, no?', 'tokens': [50956, 823, 11, 363, 21, 307, 1242, 3869, 11, 307, 309, 30, 1012, 307, 309, 1242, 3869, 30, 961, 505, 14722, 300, 295, 363, 19, 11, 572, 30, 51308], 'temperature': 0.0, 'avg_logprob': -0.144370174407959, 'compression_ratio': 1.4820512820512821, 'no_speech_prob': 0.0037272884510457516}, {'id': 153, 'seek': 159388, 'start': 1613.96, 'end': 1618.6000000000001, 'text': ' So, in the second next round, so for B4, who are the predecessors of B4?', 'tokens': [51368, 407, 11, 294, 264, 1150, 958, 3098, 11, 370, 337, 363, 19, 11, 567, 366, 264, 24874, 45700, 295, 363, 19, 30, 51600], 'temperature': 0.0, 'avg_logprob': -0.144370174407959, 'compression_ratio': 1.4820512820512821, 'no_speech_prob': 0.0037272884510457516}, {'id': 154, 'seek': 159388, 'start': 1620.7600000000002, 'end': 1623.4, 'text': ' B3 and B6, let us take the intersection of their dominatives.', 'tokens': [51708, 363, 18, 293, 363, 21, 11, 718, 505, 747, 264, 15236, 295, 641, 8859, 4884, 13, 51840], 'temperature': 0.0, 'avg_logprob': -0.144370174407959, 'compression_ratio': 1.4820512820512821, 'no_speech_prob': 0.0037272884510457516}, {'id': 155, 'seek': 162388, 'start': 1624.68, 'end': 1635.96, 'text': ' What do you get if you take the intersection? Same? Nothing has changed? Okay, fine number?', 'tokens': [50404, 708, 360, 291, 483, 498, 291, 747, 264, 15236, 30, 10635, 30, 6693, 575, 3105, 30, 1033, 11, 2489, 1230, 30, 50968], 'temperature': 0.0, 'avg_logprob': -0.2606042974135455, 'compression_ratio': 1.3157894736842106, 'no_speech_prob': 0.0006316038779914379}, {'id': 156, 'seek': 162388, 'start': 1637.64, 'end': 1650.6000000000001, 'text': ' Okay, anyone? Good. So, if you look at it, in this case, within one round, we could', 'tokens': [51052, 1033, 11, 2878, 30, 2205, 13, 407, 11, 498, 291, 574, 412, 309, 11, 294, 341, 1389, 11, 1951, 472, 3098, 11, 321, 727, 51700], 'temperature': 0.0, 'avg_logprob': -0.2606042974135455, 'compression_ratio': 1.3157894736842106, 'no_speech_prob': 0.0006316038779914379}, {'id': 157, 'seek': 165060, 'start': 1650.6799999999998, 'end': 1656.76, 'text': ' get the same set. Okay, finished. Now, but in general, what is the guarantee that this will terminate?', 'tokens': [50368, 483, 264, 912, 992, 13, 1033, 11, 4335, 13, 823, 11, 457, 294, 2674, 11, 437, 307, 264, 10815, 300, 341, 486, 10761, 473, 30, 50672], 'temperature': 0.4, 'avg_logprob': -0.487675648815227, 'compression_ratio': 1.4087591240875912, 'no_speech_prob': 0.0075898803770542145}, {'id': 158, 'seek': 165060, 'start': 1669.9599999999998, 'end': 1680.12, 'text': ' At any, in every round, either the set remains the same or it reduces, okay, reduces by at', 'tokens': [51332, 1711, 604, 11, 294, 633, 3098, 11, 2139, 264, 992, 7023, 264, 912, 420, 309, 18081, 11, 1392, 11, 18081, 538, 412, 51840], 'temperature': 0.4, 'avg_logprob': -0.487675648815227, 'compression_ratio': 1.4087591240875912, 'no_speech_prob': 0.0075898803770542145}, {'id': 159, 'seek': 168012, 'start': 1680.12, 'end': 1687.9599999999998, 'text': ' least one. We start with a finite number of elements.', 'tokens': [50364, 1935, 472, 13, 492, 722, 365, 257, 19362, 1230, 295, 4959, 13, 50756], 'temperature': 0.0, 'avg_logprob': -0.2449052095413208, 'compression_ratio': 1.2583333333333333, 'no_speech_prob': 0.0026309287641197443}, {'id': 160, 'seek': 168012, 'start': 1698.4399999999998, 'end': 1704.36, 'text': ' You are reducing and finally, at most you will reach the empty set. So, this gives a guarantee of', 'tokens': [51280, 509, 366, 12245, 293, 2721, 11, 412, 881, 291, 486, 2524, 264, 6707, 992, 13, 407, 11, 341, 2709, 257, 10815, 295, 51576], 'temperature': 0.0, 'avg_logprob': -0.2449052095413208, 'compression_ratio': 1.2583333333333333, 'no_speech_prob': 0.0026309287641197443}, {'id': 161, 'seek': 170436, 'start': 1704.6, 'end': 1707.8, 'text': ' termination. What is the complexity of this?', 'tokens': [50376, 1433, 2486, 13, 708, 307, 264, 14024, 295, 341, 30, 50536], 'temperature': 0.0, 'avg_logprob': -0.35625038146972654, 'compression_ratio': 1.3148148148148149, 'no_speech_prob': 0.04465970769524574}, {'id': 162, 'seek': 170436, 'start': 1716.52, 'end': 1717.0, 'text': ' There is, sorry?', 'tokens': [50972, 821, 307, 11, 2597, 30, 50996], 'temperature': 0.0, 'avg_logprob': -0.35625038146972654, 'compression_ratio': 1.3148148148148149, 'no_speech_prob': 0.04465970769524574}, {'id': 163, 'seek': 170436, 'start': 1723.08, 'end': 1729.24, 'text': ' Okay, so we will do one by one. We will start with the, we will start with this,', 'tokens': [51300, 1033, 11, 370, 321, 486, 360, 472, 538, 472, 13, 492, 486, 722, 365, 264, 11, 321, 486, 722, 365, 341, 11, 51608], 'temperature': 0.0, 'avg_logprob': -0.35625038146972654, 'compression_ratio': 1.3148148148148149, 'no_speech_prob': 0.04465970769524574}, {'id': 164, 'seek': 172924, 'start': 1729.96, 'end': 1738.84, 'text': ' what is the cost of this loop? How many predecessors can be there for a block? At most n,', 'tokens': [50400, 437, 307, 264, 2063, 295, 341, 6367, 30, 1012, 867, 24874, 45700, 393, 312, 456, 337, 257, 3461, 30, 1711, 881, 297, 11, 50844], 'temperature': 0.0, 'avg_logprob': -0.13051250401665182, 'compression_ratio': 1.5632183908045978, 'no_speech_prob': 0.0008092944044619799}, {'id': 165, 'seek': 172924, 'start': 1739.4, 'end': 1744.04, 'text': ' order n and you are doing order n intersections. What is the cost of intersection?', 'tokens': [50872, 1668, 297, 293, 291, 366, 884, 1668, 297, 47664, 13, 708, 307, 264, 2063, 295, 15236, 30, 51104], 'temperature': 0.0, 'avg_logprob': -0.13051250401665182, 'compression_ratio': 1.5632183908045978, 'no_speech_prob': 0.0008092944044619799}, {'id': 166, 'seek': 172924, 'start': 1750.6, 'end': 1758.36, 'text': ' It can be done under some circumstances constant, okay, but the more naive algorithm will take o n.', 'tokens': [51432, 467, 393, 312, 1096, 833, 512, 9121, 5754, 11, 1392, 11, 457, 264, 544, 29052, 9284, 486, 747, 277, 297, 13, 51820], 'temperature': 0.0, 'avg_logprob': -0.13051250401665182, 'compression_ratio': 1.5632183908045978, 'no_speech_prob': 0.0008092944044619799}, {'id': 167, 'seek': 175924, 'start': 1759.64, 'end': 1765.8, 'text': ' Okay, because sub, size of the set is o n. So, if I consider this as n square,', 'tokens': [50384, 1033, 11, 570, 1422, 11, 2744, 295, 264, 992, 307, 277, 297, 13, 407, 11, 498, 286, 1949, 341, 382, 297, 3732, 11, 50692], 'temperature': 0.0, 'avg_logprob': -0.1230688602366346, 'compression_ratio': 1.8841463414634145, 'no_speech_prob': 9.899946599034593e-05}, {'id': 168, 'seek': 175924, 'start': 1767.8, 'end': 1774.2, 'text': ' if intersection is one, it will be o n. If intersection is n, then it is n square. What', 'tokens': [50792, 498, 15236, 307, 472, 11, 309, 486, 312, 277, 297, 13, 759, 15236, 307, 297, 11, 550, 309, 307, 297, 3732, 13, 708, 51112], 'temperature': 0.0, 'avg_logprob': -0.1230688602366346, 'compression_ratio': 1.8841463414634145, 'no_speech_prob': 9.899946599034593e-05}, {'id': 169, 'seek': 175924, 'start': 1774.2, 'end': 1779.64, 'text': ' is the cost of this loop? What is the cost of this body here, dominated by this loop?', 'tokens': [51112, 307, 264, 2063, 295, 341, 6367, 30, 708, 307, 264, 2063, 295, 341, 1772, 510, 11, 23755, 538, 341, 6367, 30, 51384], 'temperature': 0.0, 'avg_logprob': -0.1230688602366346, 'compression_ratio': 1.8841463414634145, 'no_speech_prob': 9.899946599034593e-05}, {'id': 170, 'seek': 175924, 'start': 1781.16, 'end': 1788.6, 'text': ' What is the cost of this one? o n times, so this is o n.', 'tokens': [51460, 708, 307, 264, 2063, 295, 341, 472, 30, 277, 297, 1413, 11, 370, 341, 307, 277, 297, 13, 51832], 'temperature': 0.0, 'avg_logprob': -0.1230688602366346, 'compression_ratio': 1.8841463414634145, 'no_speech_prob': 9.899946599034593e-05}, {'id': 171, 'seek': 178924, 'start': 1789.72, 'end': 1798.6, 'text': ' o n times o n square, which is o n cubed. Good. What is the cost of the repeat until now?', 'tokens': [50388, 277, 297, 1413, 277, 297, 3732, 11, 597, 307, 277, 297, 36510, 13, 2205, 13, 708, 307, 264, 2063, 295, 264, 7149, 1826, 586, 30, 50832], 'temperature': 0.0, 'avg_logprob': -0.34294644717512457, 'compression_ratio': 1.0987654320987654, 'no_speech_prob': 0.005910277366638184}, {'id': 172, 'seek': 179860, 'start': 1798.6, 'end': 1822.84, 'text': ' Perfect, perfect, perfect. So, to compute, so here is the key, right? If we want to compute', 'tokens': [50364, 10246, 11, 2176, 11, 2176, 13, 407, 11, 281, 14722, 11, 370, 510, 307, 264, 2141, 11, 558, 30, 759, 321, 528, 281, 14722, 51576], 'temperature': 0.0, 'avg_logprob': -0.2986042158944266, 'compression_ratio': 1.1818181818181819, 'no_speech_prob': 0.025163844227790833}, {'id': 173, 'seek': 182284, 'start': 1822.84, 'end': 1829.48, 'text': ' the complexity of the repeat until loop, we have to fall back on the termination condition.', 'tokens': [50364, 264, 14024, 295, 264, 7149, 1826, 6367, 11, 321, 362, 281, 2100, 646, 322, 264, 1433, 2486, 4188, 13, 50696], 'temperature': 0.0, 'avg_logprob': -0.1597181215678176, 'compression_ratio': 1.7604790419161678, 'no_speech_prob': 0.002699202625080943}, {'id': 174, 'seek': 182284, 'start': 1830.6, 'end': 1832.4399999999998, 'text': ' What was the termination argument given by? Savit.', 'tokens': [50752, 708, 390, 264, 1433, 2486, 6770, 2212, 538, 30, 12346, 270, 13, 50844], 'temperature': 0.0, 'avg_logprob': -0.1597181215678176, 'compression_ratio': 1.7604790419161678, 'no_speech_prob': 0.002699202625080943}, {'id': 175, 'seek': 182284, 'start': 1836.6, 'end': 1842.04, 'text': ' Savit. The termination argument given by Savit was at every point,', 'tokens': [51052, 12346, 270, 13, 440, 1433, 2486, 6770, 2212, 538, 12346, 270, 390, 412, 633, 935, 11, 51324], 'temperature': 0.0, 'avg_logprob': -0.1597181215678176, 'compression_ratio': 1.7604790419161678, 'no_speech_prob': 0.002699202625080943}, {'id': 176, 'seek': 182284, 'start': 1844.04, 'end': 1851.08, 'text': " in every repeat until loop, at least one node's dominator information has changed by", 'tokens': [51424, 294, 633, 7149, 1826, 6367, 11, 412, 1935, 472, 9984, 311, 8859, 1639, 1589, 575, 3105, 538, 51776], 'temperature': 0.0, 'avg_logprob': -0.1597181215678176, 'compression_ratio': 1.7604790419161678, 'no_speech_prob': 0.002699202625080943}, {'id': 177, 'seek': 185284, 'start': 1852.84, 'end': 1857.9599999999998, 'text': ' at least one. So, for one node, how many times it may change in the worst case?', 'tokens': [50364, 412, 1935, 472, 13, 407, 11, 337, 472, 9984, 11, 577, 867, 1413, 309, 815, 1319, 294, 264, 5855, 1389, 30, 50620], 'temperature': 0.0, 'avg_logprob': -0.13880027868808845, 'compression_ratio': 1.5, 'no_speech_prob': 0.000526410061866045}, {'id': 178, 'seek': 185284, 'start': 1858.9199999999998, 'end': 1865.0, 'text': ' N times. N times. I have n nodes, so n square. So, this is o n to the power of', 'tokens': [50668, 426, 1413, 13, 426, 1413, 13, 286, 362, 297, 13891, 11, 370, 297, 3732, 13, 407, 11, 341, 307, 277, 297, 281, 264, 1347, 295, 50972], 'temperature': 0.0, 'avg_logprob': -0.13880027868808845, 'compression_ratio': 1.5, 'no_speech_prob': 0.000526410061866045}, {'id': 179, 'seek': 185284, 'start': 1866.84, 'end': 1873.72, 'text': ' 5. But in practice, how much time did it take? Just one round, much faster in general. So,', 'tokens': [51064, 1025, 13, 583, 294, 3124, 11, 577, 709, 565, 630, 309, 747, 30, 1449, 472, 3098, 11, 709, 4663, 294, 2674, 13, 407, 11, 51408], 'temperature': 0.0, 'avg_logprob': -0.13880027868808845, 'compression_ratio': 1.5, 'no_speech_prob': 0.000526410061866045}, {'id': 180, 'seek': 187372, 'start': 1873.72, 'end': 1883.24, 'text': ' it is not as bad as it looks, right? Fine. So, once you know the dominator information,', 'tokens': [50364, 309, 307, 406, 382, 1578, 382, 309, 1542, 11, 558, 30, 12024, 13, 407, 11, 1564, 291, 458, 264, 8859, 1639, 1589, 11, 50840], 'temperature': 0.0, 'avg_logprob': -0.13040992736816406, 'compression_ratio': 1.4260355029585798, 'no_speech_prob': 0.004604586865752935}, {'id': 181, 'seek': 187372, 'start': 1883.24, 'end': 1886.44, 'text': ' once you compute this, you can now compute the loops.', 'tokens': [50840, 1564, 291, 14722, 341, 11, 291, 393, 586, 14722, 264, 16121, 13, 51000], 'temperature': 0.0, 'avg_logprob': -0.13040992736816406, 'compression_ratio': 1.4260355029585798, 'no_speech_prob': 0.004604586865752935}, {'id': 182, 'seek': 187372, 'start': 1891.08, 'end': 1901.24, 'text': ' Here, when I did this for each n in capital N, in the example, I started from entry B1, B2, B3, B4.', 'tokens': [51232, 1692, 11, 562, 286, 630, 341, 337, 1184, 297, 294, 4238, 426, 11, 294, 264, 1365, 11, 286, 1409, 490, 8729, 363, 16, 11, 363, 17, 11, 363, 18, 11, 363, 19, 13, 51740], 'temperature': 0.0, 'avg_logprob': -0.13040992736816406, 'compression_ratio': 1.4260355029585798, 'no_speech_prob': 0.004604586865752935}, {'id': 183, 'seek': 190372, 'start': 1904.28, 'end': 1910.3600000000001, 'text': ' What if I had started from exit B5, B6, B4 and all that? Let us say, I started in the opposite', 'tokens': [50392, 708, 498, 286, 632, 1409, 490, 11043, 363, 20, 11, 363, 21, 11, 363, 19, 293, 439, 300, 30, 961, 505, 584, 11, 286, 1409, 294, 264, 6182, 50696], 'temperature': 0.0, 'avg_logprob': -0.13332954267176186, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.0006070148665457964}, {'id': 184, 'seek': 190372, 'start': 1910.3600000000001, 'end': 1919.88, 'text': ' direction. Try it for just one round. Start from exit and do it. Start from, do the same thing like', 'tokens': [50696, 3513, 13, 6526, 309, 337, 445, 472, 3098, 13, 6481, 490, 11043, 293, 360, 309, 13, 6481, 490, 11, 360, 264, 912, 551, 411, 51172], 'temperature': 0.0, 'avg_logprob': -0.13332954267176186, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.0006070148665457964}, {'id': 185, 'seek': 190372, 'start': 1919.88, 'end': 1925.88, 'text': ' what we are doing there on the board, but just start from exit. Just do, you do this,', 'tokens': [51172, 437, 321, 366, 884, 456, 322, 264, 3150, 11, 457, 445, 722, 490, 11043, 13, 1449, 360, 11, 291, 360, 341, 11, 51472], 'temperature': 0.0, 'avg_logprob': -0.13332954267176186, 'compression_ratio': 1.5730337078651686, 'no_speech_prob': 0.0006070148665457964}, {'id': 186, 'seek': 192588, 'start': 1926.8400000000001, 'end': 1934.0400000000002, 'text': ' take this as the starting point and then start filling from here and see how many rounds you', 'tokens': [50412, 747, 341, 382, 264, 2891, 935, 293, 550, 722, 10623, 490, 510, 293, 536, 577, 867, 13757, 291, 50772], 'temperature': 0.0, 'avg_logprob': -0.11768090023713954, 'compression_ratio': 1.6848484848484848, 'no_speech_prob': 0.0011874412884935737}, {'id': 187, 'seek': 192588, 'start': 1934.0400000000002, 'end': 1941.16, 'text': ' will take. Will it terminate in first round? Same. We will do the same initialization.', 'tokens': [50772, 486, 747, 13, 3099, 309, 10761, 473, 294, 700, 3098, 30, 10635, 13, 492, 486, 360, 264, 912, 5883, 2144, 13, 51128], 'temperature': 0.0, 'avg_logprob': -0.11768090023713954, 'compression_ratio': 1.6848484848484848, 'no_speech_prob': 0.0011874412884935737}, {'id': 188, 'seek': 192588, 'start': 1943.16, 'end': 1951.64, 'text': ' Take this initialization as same and just start from exit. Two questions. Will it still terminate?', 'tokens': [51228, 3664, 341, 5883, 2144, 382, 912, 293, 445, 722, 490, 11043, 13, 4453, 1651, 13, 3099, 309, 920, 10761, 473, 30, 51652], 'temperature': 0.0, 'avg_logprob': -0.11768090023713954, 'compression_ratio': 1.6848484848484848, 'no_speech_prob': 0.0011874412884935737}, {'id': 189, 'seek': 195164, 'start': 1952.6000000000001, 'end': 1959.16, 'text': ' Number two, will it still terminate within one round? How many rounds it may take, right?', 'tokens': [50412, 5118, 732, 11, 486, 309, 920, 10761, 473, 1951, 472, 3098, 30, 1012, 867, 13757, 309, 815, 747, 11, 558, 30, 50740], 'temperature': 0.0, 'avg_logprob': -0.14088747718117453, 'compression_ratio': 1.5375, 'no_speech_prob': 0.00039102151640690863}, {'id': 190, 'seek': 195164, 'start': 1961.8000000000002, 'end': 1964.2800000000002, 'text': ' But are you convinced that it will not terminate in the first round?', 'tokens': [50872, 583, 366, 291, 12561, 300, 309, 486, 406, 10761, 473, 294, 264, 700, 3098, 30, 50996], 'temperature': 0.0, 'avg_logprob': -0.14088747718117453, 'compression_ratio': 1.5375, 'no_speech_prob': 0.00039102151640690863}, {'id': 191, 'seek': 195164, 'start': 1967.4, 'end': 1973.48, 'text': ' Intersection of? So, how many will get, how many will have dominators set to capital N?', 'tokens': [51152, 5751, 11963, 295, 30, 407, 11, 577, 867, 486, 483, 11, 577, 867, 486, 362, 8859, 3391, 992, 281, 4238, 426, 30, 51456], 'temperature': 0.0, 'avg_logprob': -0.14088747718117453, 'compression_ratio': 1.5375, 'no_speech_prob': 0.00039102151640690863}, {'id': 192, 'seek': 197348, 'start': 1973.48, 'end': 1988.76, 'text': ' All except entry and B1. So, the moral of the story is the order in which you choose the nodes', 'tokens': [50364, 1057, 3993, 8729, 293, 363, 16, 13, 407, 11, 264, 9723, 295, 264, 1657, 307, 264, 1668, 294, 597, 291, 2826, 264, 13891, 51128], 'temperature': 0.0, 'avg_logprob': -0.15960010615262119, 'compression_ratio': 1.3801652892561984, 'no_speech_prob': 0.0058172233402729034}, {'id': 193, 'seek': 197348, 'start': 1990.2, 'end': 1995.72, 'text': ' will have a practical, will have an impact on the actual execution time.', 'tokens': [51200, 486, 362, 257, 8496, 11, 486, 362, 364, 2712, 322, 264, 3539, 15058, 565, 13, 51476], 'temperature': 0.0, 'avg_logprob': -0.15960010615262119, 'compression_ratio': 1.3801652892561984, 'no_speech_prob': 0.0058172233402729034}, {'id': 194, 'seek': 199572, 'start': 1995.8, 'end': 2000.6000000000001, 'text': ' The order does not change the complexity of the algorithm.', 'tokens': [50368, 440, 1668, 775, 406, 1319, 264, 14024, 295, 264, 9284, 13, 50608], 'temperature': 0.0, 'avg_logprob': -0.1583027217699134, 'compression_ratio': 1.53475935828877, 'no_speech_prob': 0.009706573560833931}, {'id': 195, 'seek': 199572, 'start': 2002.76, 'end': 2007.32, 'text': ' The complexity is still O and 5, but the order makes a difference on', 'tokens': [50716, 440, 14024, 307, 920, 422, 293, 1025, 11, 457, 264, 1668, 1669, 257, 2649, 322, 50944], 'temperature': 0.0, 'avg_logprob': -0.1583027217699134, 'compression_ratio': 1.53475935828877, 'no_speech_prob': 0.009706573560833931}, {'id': 196, 'seek': 199572, 'start': 2009.88, 'end': 2016.3600000000001, 'text': ' the actual execution time. And you will see that many of these iterative data flow analysis,', 'tokens': [51072, 264, 3539, 15058, 565, 13, 400, 291, 486, 536, 300, 867, 295, 613, 17138, 1166, 1412, 3095, 5215, 11, 51396], 'temperature': 0.0, 'avg_logprob': -0.1583027217699134, 'compression_ratio': 1.53475935828877, 'no_speech_prob': 0.009706573560833931}, {'id': 197, 'seek': 199572, 'start': 2017.24, 'end': 2021.32, 'text': ' wherever they will say keep on doing till you reach a fixed point,', 'tokens': [51440, 8660, 436, 486, 584, 1066, 322, 884, 4288, 291, 2524, 257, 6806, 935, 11, 51644], 'temperature': 0.0, 'avg_logprob': -0.1583027217699134, 'compression_ratio': 1.53475935828877, 'no_speech_prob': 0.009706573560833931}, {'id': 198, 'seek': 202132, 'start': 2021.32, 'end': 2026.6799999999998, 'text': ' the order in which you do this makes a difference.', 'tokens': [50364, 264, 1668, 294, 597, 291, 360, 341, 1669, 257, 2649, 13, 50632], 'temperature': 0.0, 'avg_logprob': -0.17879195213317872, 'compression_ratio': 1.5121951219512195, 'no_speech_prob': 0.0005029470776207745}, {'id': 199, 'seek': 202132, 'start': 2032.28, 'end': 2041.32, 'text': ' By the way, I hope you have noticed that here I am computing the dominator information of one node', 'tokens': [50912, 3146, 264, 636, 11, 286, 1454, 291, 362, 5694, 300, 510, 286, 669, 15866, 264, 8859, 1639, 1589, 295, 472, 9984, 51364], 'temperature': 0.0, 'avg_logprob': -0.17879195213317872, 'compression_ratio': 1.5121951219512195, 'no_speech_prob': 0.0005029470776207745}, {'id': 200, 'seek': 202132, 'start': 2041.32, 'end': 2046.12, 'text': ' and pushing it to its children or rather in this case the children are pulling it does not matter,', 'tokens': [51364, 293, 7380, 309, 281, 1080, 2227, 420, 2831, 294, 341, 1389, 264, 2227, 366, 8407, 309, 775, 406, 1871, 11, 51604], 'temperature': 0.0, 'avg_logprob': -0.17879195213317872, 'compression_ratio': 1.5121951219512195, 'no_speech_prob': 0.0005029470776207745}, {'id': 201, 'seek': 204612, 'start': 2046.6, 'end': 2054.44, 'text': ' but the information is flowing top down. So, such analysis are called as top down analysis.', 'tokens': [50388, 457, 264, 1589, 307, 13974, 1192, 760, 13, 407, 11, 1270, 5215, 366, 1219, 382, 1192, 760, 5215, 13, 50780], 'temperature': 0.0, 'avg_logprob': -0.23560747892960257, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.0011834549950435758}, {'id': 202, 'seek': 204612, 'start': 2055.88, 'end': 2062.2799999999997, 'text': ' There are also bottom up analysis. Have you been exposed to any bottom up analysis already?', 'tokens': [50852, 821, 366, 611, 2767, 493, 5215, 13, 3560, 291, 668, 9495, 281, 604, 2767, 493, 5215, 1217, 30, 51172], 'temperature': 0.0, 'avg_logprob': -0.23560747892960257, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.0011834549950435758}, {'id': 203, 'seek': 204612, 'start': 2063.0, 'end': 2066.3599999999997, 'text': ' Which one? Liveness analysis.', 'tokens': [51208, 3013, 472, 30, 10385, 1287, 5215, 13, 51376], 'temperature': 0.0, 'avg_logprob': -0.23560747892960257, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.0011834549950435758}, {'id': 204, 'seek': 204612, 'start': 2067.08, 'end': 2071.48, 'text': ' I thought liveness analysis will be called in the low-level optimizations.', 'tokens': [51412, 286, 1194, 1621, 1287, 5215, 486, 312, 1219, 294, 264, 2295, 12, 12418, 5028, 14455, 13, 51632], 'temperature': 0.0, 'avg_logprob': -0.23560747892960257, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.0011834549950435758}, {'id': 205, 'seek': 207612, 'start': 2076.2, 'end': 2083.64, 'text': ' Oh, is it? Oh, very good. Then, please mention it to Govind. If he is doing register location,', 'tokens': [50368, 876, 11, 307, 309, 30, 876, 11, 588, 665, 13, 1396, 11, 1767, 2152, 309, 281, 1037, 85, 471, 13, 759, 415, 307, 884, 7280, 4914, 11, 50740], 'temperature': 0.0, 'avg_logprob': -0.2295898957685991, 'compression_ratio': 1.6395939086294415, 'no_speech_prob': 0.0031207697466015816}, {'id': 206, 'seek': 207612, 'start': 2084.44, 'end': 2090.7599999999998, 'text': ' he does not have to repeat this. So, this is a top down analysis,', 'tokens': [50780, 415, 775, 406, 362, 281, 7149, 341, 13, 407, 11, 341, 307, 257, 1192, 760, 5215, 11, 51096], 'temperature': 0.0, 'avg_logprob': -0.2295898957685991, 'compression_ratio': 1.6395939086294415, 'no_speech_prob': 0.0031207697466015816}, {'id': 207, 'seek': 207612, 'start': 2091.88, 'end': 2097.72, 'text': ' liveness analysis is a backward analysis, this is a forward analysis, that is a backward analysis.', 'tokens': [51152, 1621, 1287, 5215, 307, 257, 23897, 5215, 11, 341, 307, 257, 2128, 5215, 11, 300, 307, 257, 23897, 5215, 13, 51444], 'temperature': 0.0, 'avg_logprob': -0.2295898957685991, 'compression_ratio': 1.6395939086294415, 'no_speech_prob': 0.0031207697466015816}, {'id': 208, 'seek': 207612, 'start': 2100.04, 'end': 2104.2, 'text': ' What I will do? You have been already exposed to natural loops.', 'tokens': [51560, 708, 286, 486, 360, 30, 509, 362, 668, 1217, 9495, 281, 3303, 16121, 13, 51768], 'temperature': 0.0, 'avg_logprob': -0.2295898957685991, 'compression_ratio': 1.6395939086294415, 'no_speech_prob': 0.0031207697466015816}, {'id': 209, 'seek': 210420, 'start': 2104.2, 'end': 2113.72, 'text': ' So, can you give an example of a what when will I get a non-natural loop? Can you write a code', 'tokens': [50364, 407, 11, 393, 291, 976, 364, 1365, 295, 257, 437, 562, 486, 286, 483, 257, 2107, 12, 16296, 6367, 30, 1664, 291, 2464, 257, 3089, 50840], 'temperature': 0.0, 'avg_logprob': -0.1828118499956633, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.0020651347003877163}, {'id': 210, 'seek': 210420, 'start': 2114.3599999999997, 'end': 2124.8399999999997, 'text': ' where I will have a non-natural loop? Code, write a piece of code which is which will lead to a', 'tokens': [50872, 689, 286, 486, 362, 257, 2107, 12, 16296, 6367, 30, 15549, 11, 2464, 257, 2522, 295, 3089, 597, 307, 597, 486, 1477, 281, 257, 51396], 'temperature': 0.0, 'avg_logprob': -0.1828118499956633, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.0020651347003877163}, {'id': 211, 'seek': 210420, 'start': 2124.8399999999997, 'end': 2132.3599999999997, 'text': ' non-natural or unnatural loop whatever. Can you write a code which will give me natural loop?', 'tokens': [51396, 2107, 12, 16296, 420, 43470, 6367, 2035, 13, 1664, 291, 2464, 257, 3089, 597, 486, 976, 385, 3303, 6367, 30, 51772], 'temperature': 0.0, 'avg_logprob': -0.1828118499956633, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.0020651347003877163}, {'id': 212, 'seek': 213420, 'start': 2134.52, 'end': 2144.04, 'text': ' Normal while any loop it. What about non-natural loop? Do whatever.', 'tokens': [50380, 21277, 1339, 604, 6367, 309, 13, 708, 466, 2107, 12, 16296, 6367, 30, 1144, 2035, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.2768813239203559, 'compression_ratio': 1.2661290322580645, 'no_speech_prob': 0.001925367978401482}, {'id': 213, 'seek': 213420, 'start': 2152.7599999999998, 'end': 2156.3599999999997, 'text': ' Should I write the code? You are telling the code, right? Yeah, wait and let me write it.', 'tokens': [51292, 6454, 286, 2464, 264, 3089, 30, 509, 366, 3585, 264, 3089, 11, 558, 30, 865, 11, 1699, 293, 718, 385, 2464, 309, 13, 51472], 'temperature': 0.0, 'avg_logprob': -0.2768813239203559, 'compression_ratio': 1.2661290322580645, 'no_speech_prob': 0.001925367978401482}, {'id': 214, 'seek': 215636, 'start': 2156.44, 'end': 2162.2000000000003, 'text': ' Just a minute. Yeah.', 'tokens': [50368, 1449, 257, 3456, 13, 865, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.9281769802695826, 'compression_ratio': 0.8297872340425532, 'no_speech_prob': 0.07012242823839188}, {'id': 215, 'seek': 215636, 'start': 2171.32, 'end': 2175.08, 'text': ' Else? Go to? Same.', 'tokens': [51112, 45472, 30, 1037, 281, 30, 10635, 13, 51300], 'temperature': 0.0, 'avg_logprob': -0.9281769802695826, 'compression_ratio': 0.8297872340425532, 'no_speech_prob': 0.07012242823839188}, {'id': 216, 'seek': 217508, 'start': 2175.88, 'end': 2184.92, 'text': ' Yeah. No, no, he says go to L1, both. How is it a, where is L1?', 'tokens': [50404, 865, 13, 883, 11, 572, 11, 415, 1619, 352, 281, 441, 16, 11, 1293, 13, 1012, 307, 309, 257, 11, 689, 307, 441, 16, 30, 50856], 'temperature': 0.0, 'avg_logprob': -0.5012743061986463, 'compression_ratio': 0.9545454545454546, 'no_speech_prob': 0.01561054214835167}, {'id': 217, 'seek': 218492, 'start': 2184.92, 'end': 2190.76, 'text': ' L1 is pointing just above.', 'tokens': [50364, 441, 16, 307, 12166, 445, 3673, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.5874671300252279, 'compression_ratio': 0.84, 'no_speech_prob': 0.2608514130115509}, {'id': 218, 'seek': 218492, 'start': 2197.7200000000003, 'end': 2204.76, 'text': ' Some condition.', 'tokens': [51004, 2188, 4188, 13, 51356], 'temperature': 0.0, 'avg_logprob': -0.5874671300252279, 'compression_ratio': 0.84, 'no_speech_prob': 0.2608514130115509}, {'id': 219, 'seek': 221492, 'start': 2214.92, 'end': 2222.76, 'text': ' Yeah.', 'tokens': [50364, 865, 13, 50756], 'temperature': 0.0, 'avg_logprob': -0.3882100654370857, 'compression_ratio': 1.1058823529411765, 'no_speech_prob': 0.022857705131173134}, {'id': 220, 'seek': 221492, 'start': 2222.76, 'end': 2226.76, 'text': ' Yeah.', 'tokens': [50756, 865, 13, 50956], 'temperature': 0.0, 'avg_logprob': -0.3882100654370857, 'compression_ratio': 1.1058823529411765, 'no_speech_prob': 0.022857705131173134}, {'id': 221, 'seek': 221492, 'start': 2235.96, 'end': 2243.16, 'text': ' Right. So, now in Java, can you get a loop using Java syntax without if then else,', 'tokens': [51416, 1779, 13, 407, 11, 586, 294, 10745, 11, 393, 291, 483, 257, 6367, 1228, 10745, 28431, 1553, 498, 550, 1646, 11, 51776], 'temperature': 0.0, 'avg_logprob': -0.3882100654370857, 'compression_ratio': 1.1058823529411765, 'no_speech_prob': 0.022857705131173134}, {'id': 222, 'seek': 224316, 'start': 2243.16, 'end': 2249.0, 'text': ' sorry without if and go to, can you get a non-reducible loop?', 'tokens': [50364, 2597, 1553, 498, 293, 352, 281, 11, 393, 291, 483, 257, 2107, 12, 265, 769, 32128, 6367, 30, 50656], 'temperature': 0.0, 'avg_logprob': -0.17455093065897623, 'compression_ratio': 1.247191011235955, 'no_speech_prob': 0.0006352852797135711}, {'id': 223, 'seek': 224316, 'start': 2259.3999999999996, 'end': 2267.0, 'text': " Without go to's, can you get something like this?", 'tokens': [51176, 9129, 352, 281, 311, 11, 393, 291, 483, 746, 411, 341, 30, 51556], 'temperature': 0.0, 'avg_logprob': -0.17455093065897623, 'compression_ratio': 1.247191011235955, 'no_speech_prob': 0.0006352852797135711}, {'id': 224, 'seek': 226700, 'start': 2267.0, 'end': 2277.8, 'text': ' Okay, the quick answer is no. And I mean do not worry about exceptions, but if you look at the', 'tokens': [50364, 1033, 11, 264, 1702, 1867, 307, 572, 13, 400, 286, 914, 360, 406, 3292, 466, 22847, 11, 457, 498, 291, 574, 412, 264, 50904], 'temperature': 0.0, 'avg_logprob': -0.2357388885927872, 'compression_ratio': 1.4583333333333333, 'no_speech_prob': 0.0026658964343369007}, {'id': 225, 'seek': 226700, 'start': 2277.8, 'end': 2283.08, 'text': ' language Java, right, lot of people use it and you can write fairly complex programs,', 'tokens': [50904, 2856, 10745, 11, 558, 11, 688, 295, 561, 764, 309, 293, 291, 393, 2464, 6457, 3997, 4268, 11, 51168], 'temperature': 0.0, 'avg_logprob': -0.2357388885927872, 'compression_ratio': 1.4583333333333333, 'no_speech_prob': 0.0026658964343369007}, {'id': 226, 'seek': 226700, 'start': 2283.08, 'end': 2290.12, 'text': ' but you do not have these non-natural loops. The moral of the story is the techniques that give you', 'tokens': [51168, 457, 291, 360, 406, 362, 613, 2107, 12, 16296, 16121, 13, 440, 9723, 295, 264, 1657, 307, 264, 7512, 300, 976, 291, 51520], 'temperature': 0.0, 'avg_logprob': -0.2357388885927872, 'compression_ratio': 1.4583333333333333, 'no_speech_prob': 0.0026658964343369007}, {'id': 227, 'seek': 229012, 'start': 2290.7599999999998, 'end': 2297.48, 'text': ' let you handle, identify natural loops that is sufficient for a large set of programs.', 'tokens': [50396, 718, 291, 4813, 11, 5876, 3303, 16121, 300, 307, 11563, 337, 257, 2416, 992, 295, 4268, 13, 50732], 'temperature': 0.0, 'avg_logprob': -0.1779377352107655, 'compression_ratio': 1.806282722513089, 'no_speech_prob': 0.01629956252872944}, {'id': 228, 'seek': 229012, 'start': 2299.56, 'end': 2304.8399999999997, 'text': ' It is not that oh we are using dominators, I cannot handle non-natural loops, hence it is not good,', 'tokens': [50836, 467, 307, 406, 300, 1954, 321, 366, 1228, 8859, 3391, 11, 286, 2644, 4813, 2107, 12, 16296, 16121, 11, 16678, 309, 307, 406, 665, 11, 51100], 'temperature': 0.0, 'avg_logprob': -0.1779377352107655, 'compression_ratio': 1.806282722513089, 'no_speech_prob': 0.01629956252872944}, {'id': 229, 'seek': 229012, 'start': 2305.64, 'end': 2311.08, 'text': ' not like that. Yes, you cannot handle non-natural loops, but it is okay.', 'tokens': [51140, 406, 411, 300, 13, 1079, 11, 291, 2644, 4813, 2107, 12, 16296, 16121, 11, 457, 309, 307, 1392, 13, 51412], 'temperature': 0.0, 'avg_logprob': -0.1779377352107655, 'compression_ratio': 1.806282722513089, 'no_speech_prob': 0.01629956252872944}, {'id': 230, 'seek': 229012, 'start': 2311.08, 'end': 2315.64, 'text': ' You have large class of problems where you can only, people only write natural loops,', 'tokens': [51412, 509, 362, 2416, 1508, 295, 2740, 689, 291, 393, 787, 11, 561, 787, 2464, 3303, 16121, 11, 51640], 'temperature': 0.0, 'avg_logprob': -0.1779377352107655, 'compression_ratio': 1.806282722513089, 'no_speech_prob': 0.01629956252872944}, {'id': 231, 'seek': 231564, 'start': 2316.6, 'end': 2324.3599999999997, 'text': " right. You can, you know go to's are not always so essential. Without go to's also,", 'tokens': [50412, 558, 13, 509, 393, 11, 291, 458, 352, 281, 311, 366, 406, 1009, 370, 7115, 13, 9129, 352, 281, 311, 611, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.1484964124618038, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.00031968456460162997}, {'id': 232, 'seek': 231564, 'start': 2324.3599999999997, 'end': 2330.52, 'text': ' you can write fairly large number of problems. Okay. What I will do, I was thinking I will stop', 'tokens': [50800, 291, 393, 2464, 6457, 2416, 1230, 295, 2740, 13, 1033, 13, 708, 286, 486, 360, 11, 286, 390, 1953, 286, 486, 1590, 51108], 'temperature': 0.0, 'avg_logprob': -0.1484964124618038, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.00031968456460162997}, {'id': 233, 'seek': 231564, 'start': 2330.52, 'end': 2336.6, 'text': ' at 5.30, but I will slightly stretch it. Okay. We also started slightly late. Okay.', 'tokens': [51108, 412, 1025, 13, 3446, 11, 457, 286, 486, 4748, 5985, 309, 13, 1033, 13, 492, 611, 1409, 4748, 3469, 13, 1033, 13, 51412], 'temperature': 0.0, 'avg_logprob': -0.1484964124618038, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.00031968456460162997}, {'id': 234, 'seek': 231564, 'start': 2338.04, 'end': 2345.24, 'text': ' So, one of the uses of control flow analysis is to do control flow optimizations.', 'tokens': [51484, 407, 11, 472, 295, 264, 4960, 295, 1969, 3095, 5215, 307, 281, 360, 1969, 3095, 5028, 14455, 13, 51844], 'temperature': 0.0, 'avg_logprob': -0.1484964124618038, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.00031968456460162997}, {'id': 235, 'seek': 234564, 'start': 2345.8799999999997, 'end': 2351.7999999999997, 'text': ' Okay. And one of the main goals in control flow optimizations is to produce longer basic blocks,', 'tokens': [50376, 1033, 13, 400, 472, 295, 264, 2135, 5493, 294, 1969, 3095, 5028, 14455, 307, 281, 5258, 2854, 3875, 8474, 11, 50672], 'temperature': 0.0, 'avg_logprob': -0.15616790453592935, 'compression_ratio': 1.3394495412844036, 'no_speech_prob': 0.0020783364307135344}, {'id': 236, 'seek': 234564, 'start': 2353.7999999999997, 'end': 2361.7999999999997, 'text': ' produce longer basic blocks. What is it good for?', 'tokens': [50772, 5258, 2854, 3875, 8474, 13, 708, 307, 309, 665, 337, 30, 51172], 'temperature': 0.0, 'avg_logprob': -0.15616790453592935, 'compression_ratio': 1.3394495412844036, 'no_speech_prob': 0.0020783364307135344}, {'id': 237, 'seek': 237564, 'start': 2375.64, 'end': 2386.8399999999997, 'text': ' Okay. But the complexity does not change much. I mean I guess I do not care much about the', 'tokens': [50364, 1033, 13, 583, 264, 14024, 775, 406, 1319, 709, 13, 286, 914, 286, 2041, 286, 360, 406, 1127, 709, 466, 264, 50924], 'temperature': 0.0, 'avg_logprob': -0.24699499493553526, 'compression_ratio': 1.4444444444444444, 'no_speech_prob': 0.0085248788818717}, {'id': 238, 'seek': 237564, 'start': 2386.8399999999997, 'end': 2395.3199999999997, 'text': ' complexity. The complexity still remains something like O n or something. See,', 'tokens': [50924, 14024, 13, 440, 14024, 920, 7023, 746, 411, 422, 297, 420, 746, 13, 3008, 11, 51348], 'temperature': 0.0, 'avg_logprob': -0.24699499493553526, 'compression_ratio': 1.4444444444444444, 'no_speech_prob': 0.0085248788818717}, {'id': 239, 'seek': 239532, 'start': 2395.32, 'end': 2406.6800000000003, 'text': ' if I have longer basic blocks, I have few advantages, right. I can do within, I can do', 'tokens': [50364, 498, 286, 362, 2854, 3875, 8474, 11, 286, 362, 1326, 14906, 11, 558, 13, 286, 393, 360, 1951, 11, 286, 393, 360, 50932], 'temperature': 0.0, 'avg_logprob': -0.11287524279426125, 'compression_ratio': 1.9190751445086704, 'no_speech_prob': 0.0006983208586461842}, {'id': 240, 'seek': 239532, 'start': 2406.6800000000003, 'end': 2411.88, 'text': ' lot of local optimizations. Within one basic block, if I am doing any optimization,', 'tokens': [50932, 688, 295, 2654, 5028, 14455, 13, 15996, 472, 3875, 3461, 11, 498, 286, 669, 884, 604, 19618, 11, 51192], 'temperature': 0.0, 'avg_logprob': -0.11287524279426125, 'compression_ratio': 1.9190751445086704, 'no_speech_prob': 0.0006983208586461842}, {'id': 241, 'seek': 239532, 'start': 2413.2400000000002, 'end': 2417.2400000000002, 'text': ' I can do fairly complex, very powerful optimization within one basic block.', 'tokens': [51260, 286, 393, 360, 6457, 3997, 11, 588, 4005, 19618, 1951, 472, 3875, 3461, 13, 51460], 'temperature': 0.0, 'avg_logprob': -0.11287524279426125, 'compression_ratio': 1.9190751445086704, 'no_speech_prob': 0.0006983208586461842}, {'id': 242, 'seek': 239532, 'start': 2417.88, 'end': 2424.28, 'text': ' Within one basic block, I, see if there are multiple, if I have one basic block here,', 'tokens': [51492, 15996, 472, 3875, 3461, 11, 286, 11, 536, 498, 456, 366, 3866, 11, 498, 286, 362, 472, 3875, 3461, 510, 11, 51812], 'temperature': 0.0, 'avg_logprob': -0.11287524279426125, 'compression_ratio': 1.9190751445086704, 'no_speech_prob': 0.0006983208586461842}, {'id': 243, 'seek': 242428, 'start': 2424.28, 'end': 2429.8, 'text': ' one basic block here, some structure like this, right, then you will keep taking intersection', 'tokens': [50364, 472, 3875, 3461, 510, 11, 512, 3877, 411, 341, 11, 558, 11, 550, 291, 486, 1066, 1940, 15236, 50640], 'temperature': 0.0, 'avg_logprob': -0.12085818207782248, 'compression_ratio': 1.7201834862385321, 'no_speech_prob': 0.00020000491349492222}, {'id': 244, 'seek': 242428, 'start': 2429.8, 'end': 2435.5600000000004, 'text': ' whenever you are doing data flow analysis, right. So, you will be kind of losing some information', 'tokens': [50640, 5699, 291, 366, 884, 1412, 3095, 5215, 11, 558, 13, 407, 11, 291, 486, 312, 733, 295, 7027, 512, 1589, 50928], 'temperature': 0.0, 'avg_logprob': -0.12085818207782248, 'compression_ratio': 1.7201834862385321, 'no_speech_prob': 0.00020000491349492222}, {'id': 245, 'seek': 242428, 'start': 2435.5600000000004, 'end': 2441.0, 'text': ' and so on, but if it is a long, longer basic block, you do not have, you have fewer jumps,', 'tokens': [50928, 293, 370, 322, 11, 457, 498, 309, 307, 257, 938, 11, 2854, 3875, 3461, 11, 291, 360, 406, 362, 11, 291, 362, 13366, 16704, 11, 51200], 'temperature': 0.0, 'avg_logprob': -0.12085818207782248, 'compression_ratio': 1.7201834862385321, 'no_speech_prob': 0.00020000491349492222}, {'id': 246, 'seek': 242428, 'start': 2443.2400000000002, 'end': 2449.88, 'text': ' you have, you can do more local optimizations and you will see later that register location,', 'tokens': [51312, 291, 362, 11, 291, 393, 360, 544, 2654, 5028, 14455, 293, 291, 486, 536, 1780, 300, 7280, 4914, 11, 51644], 'temperature': 0.0, 'avg_logprob': -0.12085818207782248, 'compression_ratio': 1.7201834862385321, 'no_speech_prob': 0.00020000491349492222}, {'id': 247, 'seek': 244988, 'start': 2449.88, 'end': 2454.6, 'text': ' etc., you can do a better job when you have bigger basic blocks.', 'tokens': [50364, 5183, 7933, 291, 393, 360, 257, 1101, 1691, 562, 291, 362, 3801, 3875, 8474, 13, 50600], 'temperature': 0.0, 'avg_logprob': -0.14255828207189386, 'compression_ratio': 1.7025641025641025, 'no_speech_prob': 0.001808519009500742}, {'id': 248, 'seek': 244988, 'start': 2456.44, 'end': 2464.92, 'text': ' So, this is our goal and you can also get better ILP. That is, if you have a longer basic block,', 'tokens': [50692, 407, 11, 341, 307, 527, 3387, 293, 291, 393, 611, 483, 1101, 40413, 47, 13, 663, 307, 11, 498, 291, 362, 257, 2854, 3875, 3461, 11, 51116], 'temperature': 0.0, 'avg_logprob': -0.14255828207189386, 'compression_ratio': 1.7025641025641025, 'no_speech_prob': 0.001808519009500742}, {'id': 249, 'seek': 244988, 'start': 2466.6800000000003, 'end': 2472.52, 'text': ' those instructions can go in, you can kind of rearrange them, do a better scheduling to do', 'tokens': [51204, 729, 9415, 393, 352, 294, 11, 291, 393, 733, 295, 39568, 552, 11, 360, 257, 1101, 29055, 281, 360, 51496], 'temperature': 0.0, 'avg_logprob': -0.14255828207189386, 'compression_ratio': 1.7025641025641025, 'no_speech_prob': 0.001808519009500742}, {'id': 250, 'seek': 244988, 'start': 2472.52, 'end': 2476.84, 'text': ' better instruction level parallelism, okay, pipelining, improve the pipelining.', 'tokens': [51496, 1101, 10951, 1496, 8952, 1434, 11, 1392, 11, 8489, 338, 1760, 11, 3470, 264, 8489, 338, 1760, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.14255828207189386, 'compression_ratio': 1.7025641025641025, 'no_speech_prob': 0.001808519009500742}, {'id': 251, 'seek': 247684, 'start': 2476.84, 'end': 2482.6800000000003, 'text': ' If you have branches, then there will always be some issues, I mean, and the second goal of', 'tokens': [50364, 759, 291, 362, 14770, 11, 550, 456, 486, 1009, 312, 512, 2663, 11, 286, 914, 11, 293, 264, 1150, 3387, 295, 50656], 'temperature': 0.0, 'avg_logprob': -0.11772249747013701, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0028418959118425846}, {'id': 252, 'seek': 247684, 'start': 2482.6800000000003, 'end': 2490.44, 'text': ' control flow optimization is to reduce code size. We will see, okay. The first one, when I build', 'tokens': [50656, 1969, 3095, 19618, 307, 281, 5407, 3089, 2744, 13, 492, 486, 536, 11, 1392, 13, 440, 700, 472, 11, 562, 286, 1322, 51044], 'temperature': 0.0, 'avg_logprob': -0.11772249747013701, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0028418959118425846}, {'id': 253, 'seek': 247684, 'start': 2490.44, 'end': 2498.84, 'text': ' control flow graphs, the first optimization that comes for free is unreachable code elimination.', 'tokens': [51044, 1969, 3095, 24877, 11, 264, 700, 19618, 300, 1487, 337, 1737, 307, 517, 16226, 712, 3089, 29224, 13, 51464], 'temperature': 0.0, 'avg_logprob': -0.11772249747013701, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0028418959118425846}, {'id': 254, 'seek': 249884, 'start': 2498.84, 'end': 2509.32, 'text': ' Yes. So, what I can do, I can start from the leaders, keep building my basic blocks,', 'tokens': [50364, 1079, 13, 407, 11, 437, 286, 393, 360, 11, 286, 393, 722, 490, 264, 3523, 11, 1066, 2390, 452, 3875, 8474, 11, 50888], 'temperature': 0.0, 'avg_logprob': -0.14204950202001285, 'compression_ratio': 1.4739884393063585, 'no_speech_prob': 0.001754114986397326}, {'id': 255, 'seek': 249884, 'start': 2510.28, 'end': 2518.28, 'text': ' whichever code is not part of anything, any of this, any node in my CFG, I can just', 'tokens': [50936, 24123, 3089, 307, 406, 644, 295, 1340, 11, 604, 295, 341, 11, 604, 9984, 294, 452, 21792, 38, 11, 286, 393, 445, 51336], 'temperature': 0.0, 'avg_logprob': -0.14204950202001285, 'compression_ratio': 1.4739884393063585, 'no_speech_prob': 0.001754114986397326}, {'id': 256, 'seek': 249884, 'start': 2519.96, 'end': 2528.1200000000003, 'text': ' throw it away because that is unreachable. So, if I have some piece of code like this,', 'tokens': [51420, 3507, 309, 1314, 570, 300, 307, 517, 16226, 712, 13, 407, 11, 498, 286, 362, 512, 2522, 295, 3089, 411, 341, 11, 51828], 'temperature': 0.0, 'avg_logprob': -0.14204950202001285, 'compression_ratio': 1.4739884393063585, 'no_speech_prob': 0.001754114986397326}, {'id': 257, 'seek': 252884, 'start': 2528.84, 'end': 2545.96, 'text': ' if some condition go to L1, right, or why if condition? I only go to L1 and I have S1 here.', 'tokens': [50364, 498, 512, 4188, 352, 281, 441, 16, 11, 558, 11, 420, 983, 498, 4188, 30, 286, 787, 352, 281, 441, 16, 293, 286, 362, 318, 16, 510, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.19060724012313351, 'compression_ratio': 1.4328358208955223, 'no_speech_prob': 0.0006505929050035775}, {'id': 258, 'seek': 252884, 'start': 2549.8, 'end': 2555.56, 'text': ' So, I will take the code above, it will go to L1, that will be part of some basic block. From there,', 'tokens': [51412, 407, 11, 286, 486, 747, 264, 3089, 3673, 11, 309, 486, 352, 281, 441, 16, 11, 300, 486, 312, 644, 295, 512, 3875, 3461, 13, 3358, 456, 11, 51700], 'temperature': 0.0, 'avg_logprob': -0.19060724012313351, 'compression_ratio': 1.4328358208955223, 'no_speech_prob': 0.0006505929050035775}, {'id': 259, 'seek': 255556, 'start': 2555.56, 'end': 2566.6, 'text': ' there is an edge to S2. If this S1 is not part of any basic block, then it is automatically deleted.', 'tokens': [50364, 456, 307, 364, 4691, 281, 318, 17, 13, 759, 341, 318, 16, 307, 406, 644, 295, 604, 3875, 3461, 11, 550, 309, 307, 6772, 22981, 13, 50916], 'temperature': 0.0, 'avg_logprob': -0.09842895974918288, 'compression_ratio': 1.3093525179856116, 'no_speech_prob': 0.0026633546222001314}, {'id': 260, 'seek': 255556, 'start': 2568.36, 'end': 2575.88, 'text': ' So, control flow analysis gives me free unreachable code elimination pass, right.', 'tokens': [51004, 407, 11, 1969, 3095, 5215, 2709, 385, 1737, 517, 16226, 712, 3089, 29224, 1320, 11, 558, 13, 51380], 'temperature': 0.0, 'avg_logprob': -0.09842895974918288, 'compression_ratio': 1.3093525179856116, 'no_speech_prob': 0.0026633546222001314}, {'id': 261, 'seek': 257588, 'start': 2576.84, 'end': 2587.0, 'text': ' Second, I want to see, now that I have this go to L1 here on S2, how will my basic block look like?', 'tokens': [50412, 5736, 11, 286, 528, 281, 536, 11, 586, 300, 286, 362, 341, 352, 281, 441, 16, 510, 322, 318, 17, 11, 577, 486, 452, 3875, 3461, 574, 411, 30, 50920], 'temperature': 0.0, 'avg_logprob': -0.1628362387418747, 'compression_ratio': 1.4928571428571429, 'no_speech_prob': 0.00657354760915041}, {'id': 262, 'seek': 257588, 'start': 2587.0, 'end': 2594.2000000000003, 'text': ' I have one basic block for this, I will call it as B0 and there is another basic block for this, which is B1.', 'tokens': [50920, 286, 362, 472, 3875, 3461, 337, 341, 11, 286, 486, 818, 309, 382, 363, 15, 293, 456, 307, 1071, 3875, 3461, 337, 341, 11, 597, 307, 363, 16, 13, 51280], 'temperature': 0.0, 'avg_logprob': -0.1628362387418747, 'compression_ratio': 1.4928571428571429, 'no_speech_prob': 0.00657354760915041}, {'id': 263, 'seek': 259420, 'start': 2594.52, 'end': 2608.7599999999998, 'text': ' If I have a basic block, which has a single predecessor, then I can merge the two. I do not need a jump,', 'tokens': [50380, 759, 286, 362, 257, 3875, 3461, 11, 597, 575, 257, 2167, 34991, 11, 550, 286, 393, 22183, 264, 732, 13, 286, 360, 406, 643, 257, 3012, 11, 51092], 'temperature': 0.0, 'avg_logprob': -0.16354410765600985, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.000625976303126663}, {'id': 264, 'seek': 259420, 'start': 2610.4399999999996, 'end': 2614.6, 'text': ' right. So, this is called code straightening,', 'tokens': [51176, 558, 13, 407, 11, 341, 307, 1219, 3089, 2997, 4559, 11, 51384], 'temperature': 0.0, 'avg_logprob': -0.16354410765600985, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.000625976303126663}, {'id': 265, 'seek': 259420, 'start': 2617.08, 'end': 2622.2, 'text': ' but when can I do it? Only if it has single predecessor, right.', 'tokens': [51508, 457, 562, 393, 286, 360, 309, 30, 5686, 498, 309, 575, 2167, 34991, 11, 558, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.16354410765600985, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.000625976303126663}, {'id': 266, 'seek': 262420, 'start': 2624.2, 'end': 2639.64, 'text': ' So, if B0 has a single successor and this guy has a single predecessor, if this guy has multiple', 'tokens': [50364, 407, 11, 498, 363, 15, 575, 257, 2167, 31864, 293, 341, 2146, 575, 257, 2167, 34991, 11, 498, 341, 2146, 575, 3866, 51136], 'temperature': 0.0, 'avg_logprob': -0.17589692866548579, 'compression_ratio': 1.7, 'no_speech_prob': 0.001469251001253724}, {'id': 267, 'seek': 262420, 'start': 2639.64, 'end': 2645.8799999999997, 'text': ' successors, then I cannot straighten it. Similarly, if this guy has multiple predecessors,', 'tokens': [51136, 2245, 830, 11, 550, 286, 2644, 32777, 309, 13, 13157, 11, 498, 341, 2146, 575, 3866, 24874, 45700, 11, 51448], 'temperature': 0.0, 'avg_logprob': -0.17589692866548579, 'compression_ratio': 1.7, 'no_speech_prob': 0.001469251001253724}, {'id': 268, 'seek': 264588, 'start': 2646.52, 'end': 2655.32, 'text': ' then also I cannot straighten it, right. Any questions? Any doubts?', 'tokens': [50396, 550, 611, 286, 2644, 32777, 309, 11, 558, 13, 2639, 1651, 30, 2639, 22618, 30, 50836], 'temperature': 0.0, 'avg_logprob': -0.20222441773665578, 'compression_ratio': 1.25, 'no_speech_prob': 0.02223077230155468}, {'id': 269, 'seek': 264588, 'start': 2660.6, 'end': 2669.0, 'text': ' If simplification, let us say I have some pieces of code which are like this.', 'tokens': [51100, 759, 6883, 3774, 11, 718, 505, 584, 286, 362, 512, 3755, 295, 3089, 597, 366, 411, 341, 13, 51520], 'temperature': 0.0, 'avg_logprob': -0.20222441773665578, 'compression_ratio': 1.25, 'no_speech_prob': 0.02223077230155468}, {'id': 270, 'seek': 267588, 'start': 2676.28, 'end': 2689.1600000000003, 'text': ' I have if condition then do this, else this, okay.', 'tokens': [50384, 286, 362, 498, 4188, 550, 360, 341, 11, 1646, 341, 11, 1392, 13, 51028], 'temperature': 0.0, 'avg_logprob': -0.13020303374842593, 'compression_ratio': 1.2524271844660195, 'no_speech_prob': 0.015188437886536121}, {'id': 271, 'seek': 267588, 'start': 2694.76, 'end': 2699.8, 'text': ' Let us say both the then and the else part are empty statements, what do I do?', 'tokens': [51308, 961, 505, 584, 1293, 264, 550, 293, 264, 1646, 644, 366, 6707, 12363, 11, 437, 360, 286, 360, 30, 51560], 'temperature': 0.0, 'avg_logprob': -0.13020303374842593, 'compression_ratio': 1.2524271844660195, 'no_speech_prob': 0.015188437886536121}, {'id': 272, 'seek': 269980, 'start': 2700.36, 'end': 2705.1600000000003, 'text': ' Can I remove the whole if then else?', 'tokens': [50392, 1664, 286, 4159, 264, 1379, 498, 550, 1646, 30, 50632], 'temperature': 0.0, 'avg_logprob': -0.1988171561289642, 'compression_ratio': 1.4679487179487178, 'no_speech_prob': 0.001601538504473865}, {'id': 273, 'seek': 269980, 'start': 2711.4, 'end': 2719.0, 'text': ' What is the question? I have some expression if E then somebody else somebody, let us say both of', 'tokens': [50944, 708, 307, 264, 1168, 30, 286, 362, 512, 6114, 498, 462, 550, 2618, 1646, 2618, 11, 718, 505, 584, 1293, 295, 51324], 'temperature': 0.0, 'avg_logprob': -0.1988171561289642, 'compression_ratio': 1.4679487179487178, 'no_speech_prob': 0.001601538504473865}, {'id': 274, 'seek': 269980, 'start': 2719.0, 'end': 2726.52, 'text': ' them are no ops. How did they become no ops? May be because of some optimization that code got', 'tokens': [51324, 552, 366, 572, 44663, 13, 1012, 630, 436, 1813, 572, 44663, 30, 1891, 312, 570, 295, 512, 19618, 300, 3089, 658, 51700], 'temperature': 0.0, 'avg_logprob': -0.1988171561289642, 'compression_ratio': 1.4679487179487178, 'no_speech_prob': 0.001601538504473865}, {'id': 275, 'seek': 272652, 'start': 2727.16, 'end': 2734.52, 'text': ' thrown away. The user is unlikely to write if some condition then semicolon else semicolon, right.', 'tokens': [50396, 11732, 1314, 13, 440, 4195, 307, 17518, 281, 2464, 498, 512, 4188, 550, 27515, 38780, 1646, 27515, 38780, 11, 558, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.20117619543364554, 'compression_ratio': 1.5, 'no_speech_prob': 0.001046370598487556}, {'id': 276, 'seek': 272652, 'start': 2735.56, 'end': 2741.0, 'text': ' Can, but unlikely. So, can I throw away the whole if then else? Yes.', 'tokens': [50816, 1664, 11, 457, 17518, 13, 407, 11, 393, 286, 3507, 1314, 264, 1379, 498, 550, 1646, 30, 1079, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.20117619543364554, 'compression_ratio': 1.5, 'no_speech_prob': 0.001046370598487556}, {'id': 277, 'seek': 272652, 'start': 2745.0, 'end': 2752.2, 'text': ' Perfect. There may be some, so I can remove, so I can replace it with', 'tokens': [51288, 10246, 13, 821, 815, 312, 512, 11, 370, 286, 393, 4159, 11, 370, 286, 393, 7406, 309, 365, 51648], 'temperature': 0.0, 'avg_logprob': -0.20117619543364554, 'compression_ratio': 1.5, 'no_speech_prob': 0.001046370598487556}, {'id': 278, 'seek': 275220, 'start': 2752.2, 'end': 2759.72, 'text': ' E. If E is no op, then I can throw away no op. So, we can do one step at a time.', 'tokens': [50364, 462, 13, 759, 462, 307, 572, 999, 11, 550, 286, 393, 3507, 1314, 572, 999, 13, 407, 11, 321, 393, 360, 472, 1823, 412, 257, 565, 13, 50740], 'temperature': 0.0, 'avg_logprob': -0.2509758472442627, 'compression_ratio': 1.3453237410071943, 'no_speech_prob': 0.0036998253781348467}, {'id': 279, 'seek': 275220, 'start': 2760.7599999999998, 'end': 2768.2799999999997, 'text': ' You replace this with E, some other pass will find that E is empty and throw it away. Make sense?', 'tokens': [50792, 509, 7406, 341, 365, 462, 11, 512, 661, 1320, 486, 915, 300, 462, 307, 6707, 293, 3507, 309, 1314, 13, 4387, 2020, 30, 51168], 'temperature': 0.0, 'avg_logprob': -0.2509758472442627, 'compression_ratio': 1.3453237410071943, 'no_speech_prob': 0.0036998253781348467}, {'id': 280, 'seek': 275220, 'start': 2771.96, 'end': 2775.48, 'text': ' What if?', 'tokens': [51352, 708, 498, 30, 51528], 'temperature': 0.0, 'avg_logprob': -0.2509758472442627, 'compression_ratio': 1.3453237410071943, 'no_speech_prob': 0.0036998253781348467}, {'id': 281, 'seek': 278220, 'start': 2782.2799999999997, 'end': 2794.52, 'text': ' Why java does not allow arbitrary computation?', 'tokens': [50368, 1545, 361, 4061, 775, 406, 2089, 23211, 24903, 30, 50980], 'temperature': 0.0, 'avg_logprob': -0.3394840657711029, 'compression_ratio': 1.1744186046511629, 'no_speech_prob': 0.007066302467137575}, {'id': 282, 'seek': 278220, 'start': 2802.7599999999998, 'end': 2807.3999999999996, 'text': ' No, but java does allow a function called foo, if foo,', 'tokens': [51392, 883, 11, 457, 361, 4061, 775, 2089, 257, 2445, 1219, 726, 78, 11, 498, 726, 78, 11, 51624], 'temperature': 0.0, 'avg_logprob': -0.3394840657711029, 'compression_ratio': 1.1744186046511629, 'no_speech_prob': 0.007066302467137575}, {'id': 283, 'seek': 280740, 'start': 2807.4, 'end': 2813.0, 'text': ' right. No, no, do not worry about it.', 'tokens': [50364, 558, 13, 883, 11, 572, 11, 360, 406, 3292, 466, 309, 13, 50644], 'temperature': 0.0, 'avg_logprob': -0.6680204391479492, 'compression_ratio': 0.8809523809523809, 'no_speech_prob': 0.08708008378744125}, {'id': 284, 'seek': 283740, 'start': 2837.7200000000003, 'end': 2847.48, 'text': ' So, his question is when we are building the dominators, let us say there is one particular', 'tokens': [50380, 407, 11, 702, 1168, 307, 562, 321, 366, 2390, 264, 8859, 3391, 11, 718, 505, 584, 456, 307, 472, 1729, 50868], 'temperature': 0.0, 'avg_logprob': -0.14806262866870776, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.04079465940594673}, {'id': 285, 'seek': 283740, 'start': 2847.48, 'end': 2858.28, 'text': ' node. We initialize the everything to n. Now, there is one node which has no, which is not', 'tokens': [50868, 9984, 13, 492, 5883, 1125, 264, 1203, 281, 297, 13, 823, 11, 456, 307, 472, 9984, 597, 575, 572, 11, 597, 307, 406, 51408], 'temperature': 0.0, 'avg_logprob': -0.14806262866870776, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.04079465940594673}, {'id': 286, 'seek': 283740, 'start': 2858.28, 'end': 2864.28, 'text': ' connected to start, which is not reachable from start, right. If it is not reachable from start,', 'tokens': [51408, 4582, 281, 722, 11, 597, 307, 406, 2524, 712, 490, 722, 11, 558, 13, 759, 309, 307, 406, 2524, 712, 490, 722, 11, 51708], 'temperature': 0.0, 'avg_logprob': -0.14806262866870776, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.04079465940594673}, {'id': 287, 'seek': 286428, 'start': 2864.92, 'end': 2870.1200000000003, 'text': ' we could probably, first thing we could do is do this. We could do unreachable code.', 'tokens': [50396, 321, 727, 1391, 11, 700, 551, 321, 727, 360, 307, 360, 341, 13, 492, 727, 360, 517, 16226, 712, 3089, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.10828054868257962, 'compression_ratio': 2.0588235294117645, 'no_speech_prob': 0.0004874167207162827}, {'id': 288, 'seek': 286428, 'start': 2871.48, 'end': 2876.6000000000004, 'text': ' Any code which is not reachable from start, I can throw it away. So, one possibility is I will first', 'tokens': [50724, 2639, 3089, 597, 307, 406, 2524, 712, 490, 722, 11, 286, 393, 3507, 309, 1314, 13, 407, 11, 472, 7959, 307, 286, 486, 700, 50980], 'temperature': 0.0, 'avg_logprob': -0.10828054868257962, 'compression_ratio': 2.0588235294117645, 'no_speech_prob': 0.0004874167207162827}, {'id': 289, 'seek': 286428, 'start': 2876.6000000000004, 'end': 2884.76, 'text': ' do this. Any basic block not reachable from start, I will throw it away. So, this is a code which is', 'tokens': [50980, 360, 341, 13, 2639, 3875, 3461, 406, 2524, 712, 490, 722, 11, 286, 486, 3507, 309, 1314, 13, 407, 11, 341, 307, 257, 3089, 597, 307, 51388], 'temperature': 0.0, 'avg_logprob': -0.10828054868257962, 'compression_ratio': 2.0588235294117645, 'no_speech_prob': 0.0004874167207162827}, {'id': 290, 'seek': 286428, 'start': 2884.76, 'end': 2893.32, 'text': ' part of some basic block, but it is not reachable from start. Throw it away. Second option, second', 'tokens': [51388, 644, 295, 512, 3875, 3461, 11, 457, 309, 307, 406, 2524, 712, 490, 722, 13, 22228, 309, 1314, 13, 5736, 3614, 11, 1150, 51816], 'temperature': 0.0, 'avg_logprob': -0.10828054868257962, 'compression_ratio': 2.0588235294117645, 'no_speech_prob': 0.0004874167207162827}, {'id': 291, 'seek': 289332, 'start': 2893.32, 'end': 2899.0800000000004, 'text': ' thing, let us say no, you did not do this optimization. You have a basic CFG where', 'tokens': [50364, 551, 11, 718, 505, 584, 572, 11, 291, 630, 406, 360, 341, 19618, 13, 509, 362, 257, 3875, 21792, 38, 689, 50652], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5502392344497609, 'no_speech_prob': 0.00034559861524030566}, {'id': 292, 'seek': 289332, 'start': 2900.84, 'end': 2905.2400000000002, 'text': ' it is a weird CFG in the sense it is not starting from entry. It has an entry and exit point,', 'tokens': [50740, 309, 307, 257, 3657, 21792, 38, 294, 264, 2020, 309, 307, 406, 2891, 490, 8729, 13, 467, 575, 364, 8729, 293, 11043, 935, 11, 50960], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5502392344497609, 'no_speech_prob': 0.00034559861524030566}, {'id': 293, 'seek': 289332, 'start': 2905.2400000000002, 'end': 2910.28, 'text': ' but there are some nodes which are not connected. If you have such a code, first,', 'tokens': [50960, 457, 456, 366, 512, 13891, 597, 366, 406, 4582, 13, 759, 291, 362, 1270, 257, 3089, 11, 700, 11, 51212], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5502392344497609, 'no_speech_prob': 0.00034559861524030566}, {'id': 294, 'seek': 289332, 'start': 2910.92, 'end': 2914.6800000000003, 'text': ' how that code came is separate issue. Then, you will have a node,', 'tokens': [51244, 577, 300, 3089, 1361, 307, 4994, 2734, 13, 1396, 11, 291, 486, 362, 257, 9984, 11, 51432], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5502392344497609, 'no_speech_prob': 0.00034559861524030566}, {'id': 295, 'seek': 291468, 'start': 2914.68, 'end': 2926.6, 'text': ' right. So, it will have a bunch of n. I mean it will have everybody has its dominator,', 'tokens': [50364, 558, 13, 407, 11, 309, 486, 362, 257, 3840, 295, 297, 13, 286, 914, 309, 486, 362, 2201, 575, 1080, 8859, 1639, 11, 50960], 'temperature': 0.0, 'avg_logprob': -0.21975374221801758, 'compression_ratio': 1.4409448818897639, 'no_speech_prob': 0.03841055557131767}, {'id': 296, 'seek': 291468, 'start': 2929.0, 'end': 2935.64, 'text': ' but you will probably throw it. I mean you would not use it for anything, right. So, yes, it is.', 'tokens': [51080, 457, 291, 486, 1391, 3507, 309, 13, 286, 914, 291, 576, 406, 764, 309, 337, 1340, 11, 558, 13, 407, 11, 2086, 11, 309, 307, 13, 51412], 'temperature': 0.0, 'avg_logprob': -0.21975374221801758, 'compression_ratio': 1.4409448818897639, 'no_speech_prob': 0.03841055557131767}, {'id': 297, 'seek': 294468, 'start': 2944.68, 'end': 2966.04, 'text': ' But you can say do I mean. So, his suggestion is when you are doing the dominator computation,', 'tokens': [50364, 583, 291, 393, 584, 360, 286, 914, 13, 407, 11, 702, 16541, 307, 562, 291, 366, 884, 264, 8859, 1639, 24903, 11, 51432], 'temperature': 0.0, 'avg_logprob': -0.3443698516258827, 'compression_ratio': 1.0930232558139534, 'no_speech_prob': 0.018533024936914444}, {'id': 298, 'seek': 296604, 'start': 2966.04, 'end': 2982.6, 'text': ' let me mark every node. Let me mark every node with no every node with initialize the dominator', 'tokens': [50364, 718, 385, 1491, 633, 9984, 13, 961, 385, 1491, 633, 9984, 365, 572, 633, 9984, 365, 5883, 1125, 264, 8859, 1639, 51192], 'temperature': 0.0, 'avg_logprob': -0.20982406616210938, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.003424068447202444}, {'id': 299, 'seek': 296604, 'start': 2982.6, 'end': 2987.8, 'text': ' information every node with n minus r, n minus root. And he says at the end if there is a node', 'tokens': [51192, 1589, 633, 9984, 365, 297, 3175, 367, 11, 297, 3175, 5593, 13, 400, 415, 1619, 412, 264, 917, 498, 456, 307, 257, 9984, 51452], 'temperature': 0.0, 'avg_logprob': -0.20982406616210938, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.003424068447202444}, {'id': 300, 'seek': 298780, 'start': 2987.8, 'end': 2995.96, 'text': ' whose dominator information is still n minus r, then that node can be thrown away because', 'tokens': [50364, 6104, 8859, 1639, 1589, 307, 920, 297, 3175, 367, 11, 550, 300, 9984, 393, 312, 11732, 1314, 570, 50772], 'temperature': 0.0, 'avg_logprob': -0.12275325550752528, 'compression_ratio': 1.7783783783783784, 'no_speech_prob': 0.007517575286328793}, {'id': 301, 'seek': 298780, 'start': 2996.76, 'end': 3001.2400000000002, 'text': ' every node should have been dominator. I mean should have root as the dominator.', 'tokens': [50812, 633, 9984, 820, 362, 668, 8859, 1639, 13, 286, 914, 820, 362, 5593, 382, 264, 8859, 1639, 13, 51036], 'temperature': 0.0, 'avg_logprob': -0.12275325550752528, 'compression_ratio': 1.7783783783783784, 'no_speech_prob': 0.007517575286328793}, {'id': 302, 'seek': 298780, 'start': 3001.2400000000002, 'end': 3004.28, 'text': ' If there is some node which does not have root as the dominator, then', 'tokens': [51036, 759, 456, 307, 512, 9984, 597, 775, 406, 362, 5593, 382, 264, 8859, 1639, 11, 550, 51188], 'temperature': 0.0, 'avg_logprob': -0.12275325550752528, 'compression_ratio': 1.7783783783783784, 'no_speech_prob': 0.007517575286328793}, {'id': 303, 'seek': 298780, 'start': 3007.32, 'end': 3012.28, 'text': ' that can also be done or I can just do a simple reachability, right. I can do simple BFS', 'tokens': [51340, 300, 393, 611, 312, 1096, 420, 286, 393, 445, 360, 257, 2199, 2524, 2310, 11, 558, 13, 286, 393, 360, 2199, 363, 29318, 51588], 'temperature': 0.0, 'avg_logprob': -0.12275325550752528, 'compression_ratio': 1.7783783783783784, 'no_speech_prob': 0.007517575286328793}, {'id': 304, 'seek': 301228, 'start': 3013.2400000000002, 'end': 3018.52, 'text': ' or the CSG and do it without complicating the rest of it. There are multiple ways in which', 'tokens': [50412, 420, 264, 9460, 38, 293, 360, 309, 1553, 16060, 990, 264, 1472, 295, 309, 13, 821, 366, 3866, 2098, 294, 597, 50676], 'temperature': 0.0, 'avg_logprob': -0.14012374877929687, 'compression_ratio': 1.6830357142857142, 'no_speech_prob': 0.003001298988237977}, {'id': 305, 'seek': 301228, 'start': 3020.1200000000003, 'end': 3030.84, 'text': ' it can be done. Here is to continue if I have a condition if let us say if some condition which', 'tokens': [50756, 309, 393, 312, 1096, 13, 1692, 307, 281, 2354, 498, 286, 362, 257, 4188, 498, 718, 505, 584, 498, 512, 4188, 597, 51292], 'temperature': 0.0, 'avg_logprob': -0.14012374877929687, 'compression_ratio': 1.6830357142857142, 'no_speech_prob': 0.003001298988237977}, {'id': 306, 'seek': 301228, 'start': 3030.84, 'end': 3035.6400000000003, 'text': ' happens to be in our case if you remember I did some constant propagation because of which one of', 'tokens': [51292, 2314, 281, 312, 294, 527, 1389, 498, 291, 1604, 286, 630, 512, 5754, 38377, 570, 295, 597, 472, 295, 51532], 'temperature': 0.0, 'avg_logprob': -0.14012374877929687, 'compression_ratio': 1.6830357142857142, 'no_speech_prob': 0.003001298988237977}, {'id': 307, 'seek': 301228, 'start': 3035.6400000000003, 'end': 3040.76, 'text': ' them became one variable became a constant. And let us say I had some comparison that looked', 'tokens': [51532, 552, 3062, 472, 7006, 3062, 257, 5754, 13, 400, 718, 505, 584, 286, 632, 512, 9660, 300, 2956, 51788], 'temperature': 0.0, 'avg_logprob': -0.14012374877929687, 'compression_ratio': 1.6830357142857142, 'no_speech_prob': 0.003001298988237977}, {'id': 308, 'seek': 304076, 'start': 3040.76, 'end': 3049.48, 'text': ' like this. Initially it was a greater than 3, then s1 else s2. And what you found this to be a', 'tokens': [50364, 411, 341, 13, 29446, 309, 390, 257, 5044, 813, 805, 11, 550, 262, 16, 1646, 262, 17, 13, 400, 437, 291, 1352, 341, 281, 312, 257, 50800], 'temperature': 0.0, 'avg_logprob': -0.16504453420639037, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0008549216436222196}, {'id': 309, 'seek': 304076, 'start': 3049.48, 'end': 3057.4, 'text': ' constant which became 2 let us say. So now this constant value is false. Then what you can do?', 'tokens': [50800, 5754, 597, 3062, 568, 718, 505, 584, 13, 407, 586, 341, 5754, 2158, 307, 7908, 13, 1396, 437, 291, 393, 360, 30, 51196], 'temperature': 0.0, 'avg_logprob': -0.16504453420639037, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0008549216436222196}, {'id': 310, 'seek': 304076, 'start': 3060.2000000000003, 'end': 3066.36, 'text': ' You can throw away the s1 and just keep s2. You do not need the condition you can just keep the', 'tokens': [51336, 509, 393, 3507, 1314, 264, 262, 16, 293, 445, 1066, 262, 17, 13, 509, 360, 406, 643, 264, 4188, 291, 393, 445, 1066, 264, 51644], 'temperature': 0.0, 'avg_logprob': -0.16504453420639037, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.0008549216436222196}, {'id': 311, 'seek': 306636, 'start': 3066.36, 'end': 3071.8, 'text': ' s2. And similarly if it is always true you can keep the then part and throw away the', 'tokens': [50364, 262, 17, 13, 400, 14138, 498, 309, 307, 1009, 2074, 291, 393, 1066, 264, 550, 644, 293, 3507, 1314, 264, 50636], 'temperature': 0.0, 'avg_logprob': -0.19008641323800815, 'compression_ratio': 1.5602836879432624, 'no_speech_prob': 0.001860133372247219}, {'id': 312, 'seek': 306636, 'start': 3072.92, 'end': 3076.6800000000003, 'text': ' else part. Here is another type of example you will find.', 'tokens': [50692, 1646, 644, 13, 1692, 307, 1071, 2010, 295, 1365, 291, 486, 915, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.19008641323800815, 'compression_ratio': 1.5602836879432624, 'no_speech_prob': 0.001860133372247219}, {'id': 313, 'seek': 306636, 'start': 3081.48, 'end': 3095.56, 'text': ' If i greater than 3 in the then part you will see if i greater than no wait i', 'tokens': [51120, 759, 741, 5044, 813, 805, 294, 264, 550, 644, 291, 486, 536, 498, 741, 5044, 813, 572, 1699, 741, 51824], 'temperature': 0.0, 'avg_logprob': -0.19008641323800815, 'compression_ratio': 1.5602836879432624, 'no_speech_prob': 0.001860133372247219}, {'id': 314, 'seek': 309636, 'start': 3096.36, 'end': 3114.04, 'text': ' less than 2. If i greater than 3 in this piece of the code here I am taking if i less than 2.', 'tokens': [50364, 1570, 813, 568, 13, 759, 741, 5044, 813, 805, 294, 341, 2522, 295, 264, 3089, 510, 286, 669, 1940, 498, 741, 1570, 813, 568, 13, 51248], 'temperature': 0.0, 'avg_logprob': -0.1562981699027267, 'compression_ratio': 1.449612403100775, 'no_speech_prob': 0.00031006778590381145}, {'id': 315, 'seek': 309636, 'start': 3114.04, 'end': 3122.1200000000003, 'text': ' You know that this condition is false because of the then condition. So if you have in nested', 'tokens': [51248, 509, 458, 300, 341, 4188, 307, 7908, 570, 295, 264, 550, 4188, 13, 407, 498, 291, 362, 294, 15646, 292, 51652], 'temperature': 0.0, 'avg_logprob': -0.1562981699027267, 'compression_ratio': 1.449612403100775, 'no_speech_prob': 0.00031006778590381145}, {'id': 316, 'seek': 312212, 'start': 3122.12, 'end': 3129.96, 'text': ' if conditions if the outer condition implies the inner condition or the outer condition', 'tokens': [50364, 498, 4487, 498, 264, 10847, 4188, 18779, 264, 7284, 4188, 420, 264, 10847, 4188, 50756], 'temperature': 0.0, 'avg_logprob': -0.1373243496335786, 'compression_ratio': 1.8873239436619718, 'no_speech_prob': 0.005295126233249903}, {'id': 317, 'seek': 312212, 'start': 3129.96, 'end': 3135.64, 'text': ' is guaranteed to implies the negation of the inner condition you can optimize away the inner', 'tokens': [50756, 307, 18031, 281, 18779, 264, 2485, 399, 295, 264, 7284, 4188, 291, 393, 19719, 1314, 264, 7284, 51040], 'temperature': 0.0, 'avg_logprob': -0.1373243496335786, 'compression_ratio': 1.8873239436619718, 'no_speech_prob': 0.005295126233249903}, {'id': 318, 'seek': 312212, 'start': 3135.64, 'end': 3146.92, 'text': ' then or the else part. Here is a more a popular word that you will hear loop inversion.', 'tokens': [51040, 550, 420, 264, 1646, 644, 13, 1692, 307, 257, 544, 257, 3743, 1349, 300, 291, 486, 1568, 6367, 43576, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.1373243496335786, 'compression_ratio': 1.8873239436619718, 'no_speech_prob': 0.005295126233249903}, {'id': 319, 'seek': 315212, 'start': 3152.2799999999997, 'end': 3158.44, 'text': ' What is it? It takes a while loop. What is the while loop? In while loop you check the', 'tokens': [50372, 708, 307, 309, 30, 467, 2516, 257, 1339, 6367, 13, 708, 307, 264, 1339, 6367, 30, 682, 1339, 6367, 291, 1520, 264, 50680], 'temperature': 0.0, 'avg_logprob': -0.13867499033610026, 'compression_ratio': 1.9482758620689655, 'no_speech_prob': 0.01626378670334816}, {'id': 320, 'seek': 315212, 'start': 3158.44, 'end': 3165.24, 'text': ' condition and enter. It transforms the while loop to a do while loop.', 'tokens': [50680, 4188, 293, 3242, 13, 467, 35592, 264, 1339, 6367, 281, 257, 360, 1339, 6367, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.13867499033610026, 'compression_ratio': 1.9482758620689655, 'no_speech_prob': 0.01626378670334816}, {'id': 321, 'seek': 315212, 'start': 3168.92, 'end': 3178.92, 'text': ' It transforms a while loop to a do while loop. What is the advantage?', 'tokens': [51204, 467, 35592, 257, 1339, 6367, 281, 257, 360, 1339, 6367, 13, 708, 307, 264, 5002, 30, 51704], 'temperature': 0.0, 'avg_logprob': -0.13867499033610026, 'compression_ratio': 1.9482758620689655, 'no_speech_prob': 0.01626378670334816}, {'id': 322, 'seek': 318212, 'start': 3182.12, 'end': 3190.52, 'text': ' Check. Sorry I could not hear sorry usual right.', 'tokens': [50364, 6881, 13, 4919, 286, 727, 406, 1568, 2597, 7713, 558, 13, 50784], 'temperature': 0.0, 'avg_logprob': -0.6239000956217448, 'compression_ratio': 1.4809160305343512, 'no_speech_prob': 0.12698432803153992}, {'id': 323, 'seek': 318212, 'start': 3190.52, 'end': 3193.72, 'text': ' The check condition that we have in while loop.', 'tokens': [50784, 440, 1520, 4188, 300, 321, 362, 294, 1339, 6367, 13, 50944], 'temperature': 0.0, 'avg_logprob': -0.6239000956217448, 'compression_ratio': 1.4809160305343512, 'no_speech_prob': 0.12698432803153992}, {'id': 324, 'seek': 318212, 'start': 3193.72, 'end': 3197.16, 'text': ' So that the check condition. Happens at the end now.', 'tokens': [50944, 407, 300, 264, 1520, 4188, 13, 7412, 694, 412, 264, 917, 586, 13, 51116], 'temperature': 0.0, 'avg_logprob': -0.6239000956217448, 'compression_ratio': 1.4809160305343512, 'no_speech_prob': 0.12698432803153992}, {'id': 325, 'seek': 318212, 'start': 3197.16, 'end': 3206.92, 'text': ' That instruction will execute one time less.', 'tokens': [51116, 663, 10951, 486, 14483, 472, 565, 1570, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.6239000956217448, 'compression_ratio': 1.4809160305343512, 'no_speech_prob': 0.12698432803153992}, {'id': 326, 'seek': 321212, 'start': 3212.92, 'end': 3219.7999999999997, 'text': ' So in a while loop how many times do I check the condition? Let us say if I am checking', 'tokens': [50404, 407, 294, 257, 1339, 6367, 577, 867, 1413, 360, 286, 1520, 264, 4188, 30, 961, 505, 584, 498, 286, 669, 8568, 50748], 'temperature': 0.0, 'avg_logprob': -0.15584852529126544, 'compression_ratio': 1.8685714285714285, 'no_speech_prob': 0.002794617787003517}, {'id': 327, 'seek': 321212, 'start': 3219.7999999999997, 'end': 3227.7999999999997, 'text': ' the condition k times in the do while loop you are saying I will check it one less time.', 'tokens': [50748, 264, 4188, 350, 1413, 294, 264, 360, 1339, 6367, 291, 366, 1566, 286, 486, 1520, 309, 472, 1570, 565, 13, 51148], 'temperature': 0.0, 'avg_logprob': -0.15584852529126544, 'compression_ratio': 1.8685714285714285, 'no_speech_prob': 0.002794617787003517}, {'id': 328, 'seek': 321212, 'start': 3227.7999999999997, 'end': 3232.04, 'text': ' But is it equivalent? Let me ask you that question. Is while loop same as do while loop?', 'tokens': [51148, 583, 307, 309, 10344, 30, 961, 385, 1029, 291, 300, 1168, 13, 1119, 1339, 6367, 912, 382, 360, 1339, 6367, 30, 51360], 'temperature': 0.0, 'avg_logprob': -0.15584852529126544, 'compression_ratio': 1.8685714285714285, 'no_speech_prob': 0.002794617787003517}, {'id': 329, 'seek': 321212, 'start': 3235.4, 'end': 3238.12, 'text': ' So how can I make a while loop equivalent to a do while loop?', 'tokens': [51528, 407, 577, 393, 286, 652, 257, 1339, 6367, 10344, 281, 257, 360, 1339, 6367, 30, 51664], 'temperature': 0.0, 'avg_logprob': -0.15584852529126544, 'compression_ratio': 1.8685714285714285, 'no_speech_prob': 0.002794617787003517}, {'id': 330, 'seek': 324212, 'start': 3242.12, 'end': 3249.0, 'text': ' First add a if. If you have a while loop if I have a while', 'tokens': [50364, 2386, 909, 257, 498, 13, 759, 291, 362, 257, 1339, 6367, 498, 286, 362, 257, 1339, 50708], 'temperature': 0.0, 'avg_logprob': -0.26140428626019024, 'compression_ratio': 1.3904761904761904, 'no_speech_prob': 0.010944990441203117}, {'id': 331, 'seek': 324212, 'start': 3251.7999999999997, 'end': 3269.3199999999997, 'text': ' es I transform it to if e do while e. If I know that this e is true for the first time.', 'tokens': [50848, 785, 286, 4088, 309, 281, 498, 308, 360, 1339, 308, 13, 759, 286, 458, 300, 341, 308, 307, 2074, 337, 264, 700, 565, 13, 51724], 'temperature': 0.0, 'avg_logprob': -0.26140428626019024, 'compression_ratio': 1.3904761904761904, 'no_speech_prob': 0.010944990441203117}, {'id': 332, 'seek': 326932, 'start': 3269.96, 'end': 3277.7200000000003, 'text': ' Let us say this condition is i equal to 1 while i less than 100. Then you do not need to check', 'tokens': [50396, 961, 505, 584, 341, 4188, 307, 741, 2681, 281, 502, 1339, 741, 1570, 813, 2319, 13, 1396, 291, 360, 406, 643, 281, 1520, 50784], 'temperature': 0.0, 'avg_logprob': -0.1338072485393948, 'compression_ratio': 1.5, 'no_speech_prob': 0.0014732363633811474}, {'id': 333, 'seek': 326932, 'start': 3277.7200000000003, 'end': 3283.8, 'text': ' this if e. But if you do not then you have to keep the if e. Now my question is what is', 'tokens': [50784, 341, 498, 308, 13, 583, 498, 291, 360, 406, 550, 291, 362, 281, 1066, 264, 498, 308, 13, 823, 452, 1168, 307, 437, 307, 51088], 'temperature': 0.0, 'avg_logprob': -0.1338072485393948, 'compression_ratio': 1.5, 'no_speech_prob': 0.0014732363633811474}, {'id': 334, 'seek': 326932, 'start': 3283.8, 'end': 3291.88, 'text': ' the advantage of this code over this? I will be saving one go to statement.', 'tokens': [51088, 264, 5002, 295, 341, 3089, 670, 341, 30, 286, 486, 312, 6816, 472, 352, 281, 5629, 13, 51492], 'temperature': 0.0, 'avg_logprob': -0.1338072485393948, 'compression_ratio': 1.5, 'no_speech_prob': 0.0014732363633811474}, {'id': 335, 'seek': 329188, 'start': 3291.88, 'end': 3303.0, 'text': ' Because in the while loop you will come back, check then decide whether to continue or not.', 'tokens': [50364, 1436, 294, 264, 1339, 6367, 291, 486, 808, 646, 11, 1520, 550, 4536, 1968, 281, 2354, 420, 406, 13, 50920], 'temperature': 0.0, 'avg_logprob': -0.24984374253646188, 'compression_ratio': 1.4, 'no_speech_prob': 0.004911907948553562}, {'id': 336, 'seek': 329188, 'start': 3303.6400000000003, 'end': 3317.96, 'text': ' Here you will first check and then go back. So let us look at this. There is an additional', 'tokens': [50952, 1692, 291, 486, 700, 1520, 293, 550, 352, 646, 13, 407, 718, 505, 574, 412, 341, 13, 821, 307, 364, 4497, 51668], 'temperature': 0.0, 'avg_logprob': -0.24984374253646188, 'compression_ratio': 1.4, 'no_speech_prob': 0.004911907948553562}, {'id': 337, 'seek': 331796, 'start': 3317.96, 'end': 3327.4, 'text': ' advantage. Let us look at this code. x equal to 3 while some condition s1 x equal to 4.', 'tokens': [50364, 5002, 13, 961, 505, 574, 412, 341, 3089, 13, 2031, 2681, 281, 805, 1339, 512, 4188, 262, 16, 2031, 2681, 281, 1017, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.18883403466672313, 'compression_ratio': 1.3153846153846154, 'no_speech_prob': 0.011381548829376698}, {'id': 338, 'seek': 331796, 'start': 3329.96, 'end': 3347.2400000000002, 'text': ' At this point is x a constant. Why not? While might or not execute. But if you know', 'tokens': [50964, 1711, 341, 935, 307, 2031, 257, 5754, 13, 1545, 406, 30, 3987, 1062, 420, 406, 14483, 13, 583, 498, 291, 458, 51828], 'temperature': 0.0, 'avg_logprob': -0.18883403466672313, 'compression_ratio': 1.3153846153846154, 'no_speech_prob': 0.011381548829376698}, {'id': 339, 'seek': 334796, 'start': 3348.92, 'end': 3354.44, 'text': ' that the condition is guaranteed to execute and you let us say you turn it into a do while loop.', 'tokens': [50412, 300, 264, 4188, 307, 18031, 281, 14483, 293, 291, 718, 505, 584, 291, 1261, 309, 666, 257, 360, 1339, 6367, 13, 50688], 'temperature': 0.0, 'avg_logprob': -0.1575784038853001, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.0004618217353709042}, {'id': 340, 'seek': 334796, 'start': 3356.2, 'end': 3365.2400000000002, 'text': ' Then if this was a do while loop do s1 x equal to 4 while some condition. You know that x will', 'tokens': [50776, 1396, 498, 341, 390, 257, 360, 1339, 6367, 360, 262, 16, 2031, 2681, 281, 1017, 1339, 512, 4188, 13, 509, 458, 300, 2031, 486, 51228], 'temperature': 0.0, 'avg_logprob': -0.1575784038853001, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.0004618217353709042}, {'id': 341, 'seek': 334796, 'start': 3365.2400000000002, 'end': 3372.28, 'text': ' is guaranteed to be a constant. So this turning this to a do while loop can have some side benefits', 'tokens': [51228, 307, 18031, 281, 312, 257, 5754, 13, 407, 341, 6246, 341, 281, 257, 360, 1339, 6367, 393, 362, 512, 1252, 5311, 51580], 'temperature': 0.0, 'avg_logprob': -0.1575784038853001, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.0004618217353709042}, {'id': 342, 'seek': 337228, 'start': 3372.28, 'end': 3382.6000000000004, 'text': ' as well. So basically do while gives a guarantee that the loop is executed at least once.', 'tokens': [50364, 382, 731, 13, 407, 1936, 360, 1339, 2709, 257, 10815, 300, 264, 6367, 307, 17577, 412, 1935, 1564, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.17240741517808703, 'compression_ratio': 1.4384615384615385, 'no_speech_prob': 0.030197693035006523}, {'id': 343, 'seek': 337228, 'start': 3386.84, 'end': 3397.96, 'text': ' The last thing we will. I think we have already talked about when we know that the loop condition', 'tokens': [51092, 440, 1036, 551, 321, 486, 13, 286, 519, 321, 362, 1217, 2825, 466, 562, 321, 458, 300, 264, 6367, 4188, 51648], 'temperature': 0.0, 'avg_logprob': -0.17240741517808703, 'compression_ratio': 1.4384615384615385, 'no_speech_prob': 0.030197693035006523}, {'id': 344, 'seek': 339796, 'start': 3397.96, 'end': 3403.4, 'text': ' will hold we will throw away the if e. If we do not know we will keep the if e.', 'tokens': [50364, 486, 1797, 321, 486, 3507, 1314, 264, 498, 308, 13, 759, 321, 360, 406, 458, 321, 486, 1066, 264, 498, 308, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.18300900856653848, 'compression_ratio': 1.4789915966386555, 'no_speech_prob': 0.032465871423482895}, {'id': 345, 'seek': 339796, 'start': 3406.2, 'end': 3412.04, 'text': ' So what we looked at now? We looked at control flow analysis by building the control flow graph.', 'tokens': [50776, 407, 437, 321, 2956, 412, 586, 30, 492, 2956, 412, 1969, 3095, 5215, 538, 2390, 264, 1969, 3095, 4295, 13, 51068], 'temperature': 0.0, 'avg_logprob': -0.18300900856653848, 'compression_ratio': 1.4789915966386555, 'no_speech_prob': 0.032465871423482895}, {'id': 346, 'seek': 341204, 'start': 3412.04, 'end': 3416.92, 'text': ' Both the advantages have to be mentioned on y e.', 'tokens': [50364, 6767, 264, 14906, 362, 281, 312, 2835, 322, 288, 308, 13, 50608], 'temperature': 0.0, 'avg_logprob': -0.41311990398250215, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.01801224797964096}, {'id': 347, 'seek': 341204, 'start': 3416.92, 'end': 3421.56, 'text': ' Or just simply negated by having the if because.', 'tokens': [50608, 1610, 445, 2935, 2485, 770, 538, 1419, 264, 498, 570, 13, 50840], 'temperature': 0.0, 'avg_logprob': -0.41311990398250215, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.01801224797964096}, {'id': 348, 'seek': 341204, 'start': 3421.56, 'end': 3425.16, 'text': ' Because. Because the if will also add a block.', 'tokens': [50840, 1436, 13, 1436, 264, 498, 486, 611, 909, 257, 3461, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.41311990398250215, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.01801224797964096}, {'id': 349, 'seek': 341204, 'start': 3425.16, 'end': 3428.68, 'text': ' Good. And it will also. So if is a condition check.', 'tokens': [51020, 2205, 13, 400, 309, 486, 611, 13, 407, 498, 307, 257, 4188, 1520, 13, 51196], 'temperature': 0.0, 'avg_logprob': -0.41311990398250215, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.01801224797964096}, {'id': 350, 'seek': 341204, 'start': 3429.72, 'end': 3433.4, 'text': ' You are checking and then entering. Here you are checking and entering.', 'tokens': [51248, 509, 366, 8568, 293, 550, 11104, 13, 1692, 291, 366, 8568, 293, 11104, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.41311990398250215, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.01801224797964096}, {'id': 351, 'seek': 343340, 'start': 3433.4, 'end': 3445.1600000000003, 'text': ' Both are same. Let us say at the end of this loop what do you do? You will go back and then', 'tokens': [50364, 6767, 366, 912, 13, 961, 505, 584, 412, 264, 917, 295, 341, 6367, 437, 360, 291, 360, 30, 509, 486, 352, 646, 293, 550, 50952], 'temperature': 0.0, 'avg_logprob': -0.16850476651578336, 'compression_ratio': 1.588235294117647, 'no_speech_prob': 0.029775554314255714}, {'id': 352, 'seek': 343340, 'start': 3445.1600000000003, 'end': 3451.2400000000002, 'text': ' check and if it is false you will come out. Here what happens you did you check and then', 'tokens': [50952, 1520, 293, 498, 309, 307, 7908, 291, 486, 808, 484, 13, 1692, 437, 2314, 291, 630, 291, 1520, 293, 550, 51256], 'temperature': 0.0, 'avg_logprob': -0.16850476651578336, 'compression_ratio': 1.588235294117647, 'no_speech_prob': 0.029775554314255714}, {'id': 353, 'seek': 343340, 'start': 3453.4, 'end': 3462.6800000000003, 'text': ' you do not go here to come back. Make sense right? Simple subtle point. Let us see right.', 'tokens': [51364, 291, 360, 406, 352, 510, 281, 808, 646, 13, 4387, 2020, 558, 30, 21532, 13743, 935, 13, 961, 505, 536, 558, 13, 51828], 'temperature': 0.0, 'avg_logprob': -0.16850476651578336, 'compression_ratio': 1.588235294117647, 'no_speech_prob': 0.029775554314255714}, {'id': 354, 'seek': 346268, 'start': 3462.68, 'end': 3480.68, 'text': ' Let us let us write the steps here. E1 correct. S1 jump. E1 jump. Here what is it?', 'tokens': [50364, 961, 505, 718, 505, 2464, 264, 4439, 510, 13, 462, 16, 3006, 13, 318, 16, 3012, 13, 462, 16, 3012, 13, 1692, 437, 307, 309, 30, 51264], 'temperature': 0.0, 'avg_logprob': -0.19239527384440105, 'compression_ratio': 1.0649350649350648, 'no_speech_prob': 0.006740746088325977}, {'id': 355, 'seek': 348068, 'start': 3480.68, 'end': 3504.52, 'text': ' E1 then S1 then E and then I mean follow through. So it is kind of saving one or two jumps.', 'tokens': [50364, 462, 16, 550, 318, 16, 550, 462, 293, 550, 286, 914, 1524, 807, 13, 407, 309, 307, 733, 295, 6816, 472, 420, 732, 16704, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.2948908970273774, 'compression_ratio': 1.0963855421686748, 'no_speech_prob': 0.029890788719058037}, {'id': 356, 'seek': 350452, 'start': 3504.92, 'end': 3508.36, 'text': ' Saving one edge. One edge.', 'tokens': [50384, 318, 6152, 472, 4691, 13, 1485, 4691, 13, 50556], 'temperature': 0.0, 'avg_logprob': -0.2427121422507546, 'compression_ratio': 1.632, 'no_speech_prob': 0.005389357917010784}, {'id': 357, 'seek': 350452, 'start': 3513.24, 'end': 3519.08, 'text': ' So the last while here also is a jump. So this follow through is conditional jump right.', 'tokens': [50800, 407, 264, 1036, 1339, 510, 611, 307, 257, 3012, 13, 407, 341, 1524, 807, 307, 27708, 3012, 558, 13, 51092], 'temperature': 0.0, 'avg_logprob': -0.2427121422507546, 'compression_ratio': 1.632, 'no_speech_prob': 0.005389357917010784}, {'id': 358, 'seek': 350452, 'start': 3519.72, 'end': 3528.36, 'text': ' So I can I can probably make it as conditional jump. Here also it is a conditional jump.', 'tokens': [51124, 407, 286, 393, 286, 393, 1391, 652, 309, 382, 27708, 3012, 13, 1692, 611, 309, 307, 257, 27708, 3012, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.2427121422507546, 'compression_ratio': 1.632, 'no_speech_prob': 0.005389357917010784}, {'id': 359, 'seek': 352836, 'start': 3528.84, 'end': 3535.48, 'text': ' So one jump less. This jump.', 'tokens': [50388, 407, 472, 3012, 1570, 13, 639, 3012, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.31617675224939984, 'compression_ratio': 1.5495495495495495, 'no_speech_prob': 0.016776686534285545}, {'id': 360, 'seek': 352836, 'start': 3539.1600000000003, 'end': 3543.32, 'text': ' This is same. In both the case this is a conditional jump. This is also conditional jump. Both are same.', 'tokens': [50904, 639, 307, 912, 13, 682, 1293, 264, 1389, 341, 307, 257, 27708, 3012, 13, 639, 307, 611, 27708, 3012, 13, 6767, 366, 912, 13, 51112], 'temperature': 0.0, 'avg_logprob': -0.31617675224939984, 'compression_ratio': 1.5495495495495495, 'no_speech_prob': 0.016776686534285545}, {'id': 361, 'seek': 352836, 'start': 3546.84, 'end': 3548.6, 'text': ' Just you are saving one the last jump.', 'tokens': [51288, 1449, 291, 366, 6816, 472, 264, 1036, 3012, 13, 51376], 'temperature': 0.0, 'avg_logprob': -0.31617675224939984, 'compression_ratio': 1.5495495495495495, 'no_speech_prob': 0.016776686534285545}, {'id': 362, 'seek': 355836, 'start': 3558.92, 'end': 3560.2000000000003, 'text': ' Why should I worry about one jump?', 'tokens': [50392, 1545, 820, 286, 3292, 466, 472, 3012, 30, 50456], 'temperature': 0.0, 'avg_logprob': -0.16228925531560726, 'compression_ratio': 1.445945945945946, 'no_speech_prob': 0.010628826916217804}, {'id': 363, 'seek': 355836, 'start': 3563.56, 'end': 3572.36, 'text': ' One jump here. What is this do while loop is inside a loop which is going over a million iterations.', 'tokens': [50624, 1485, 3012, 510, 13, 708, 307, 341, 360, 1339, 6367, 307, 1854, 257, 6367, 597, 307, 516, 670, 257, 2459, 36540, 13, 51064], 'temperature': 0.0, 'avg_logprob': -0.16228925531560726, 'compression_ratio': 1.445945945945946, 'no_speech_prob': 0.010628826916217804}, {'id': 364, 'seek': 355836, 'start': 3573.7200000000003, 'end': 3581.4, 'text': ' Then this is million jumps you have saved. See those of you who are doing this', 'tokens': [51132, 1396, 341, 307, 2459, 16704, 291, 362, 6624, 13, 3008, 729, 295, 291, 567, 366, 884, 341, 51516], 'temperature': 0.0, 'avg_logprob': -0.16228925531560726, 'compression_ratio': 1.445945945945946, 'no_speech_prob': 0.010628826916217804}, {'id': 365, 'seek': 358140, 'start': 3581.64, 'end': 3588.76, 'text': ' P1 P2 with small values of n you found no improvement. When you increased it you started', 'tokens': [50376, 430, 16, 430, 17, 365, 1359, 4190, 295, 297, 291, 1352, 572, 10444, 13, 1133, 291, 6505, 309, 291, 1409, 50732], 'temperature': 0.0, 'avg_logprob': -0.21538427670796711, 'compression_ratio': 1.5935483870967742, 'no_speech_prob': 0.059808120131492615}, {'id': 366, 'seek': 358140, 'start': 3588.76, 'end': 3598.6800000000003, 'text': ' seeing more improvements right. So take care of your pennies. Your dollars or your paisas', 'tokens': [50732, 2577, 544, 13797, 558, 13, 407, 747, 1127, 295, 428, 34911, 530, 13, 2260, 3808, 420, 428, 34955, 296, 51228], 'temperature': 0.0, 'avg_logprob': -0.21538427670796711, 'compression_ratio': 1.5935483870967742, 'no_speech_prob': 0.059808120131492615}, {'id': 367, 'seek': 358140, 'start': 3599.48, 'end': 3602.12, 'text': ' and then your rupees and dollars will take care of themselves right.', 'tokens': [51268, 293, 550, 428, 24638, 293, 3808, 486, 747, 1127, 295, 2969, 558, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.21538427670796711, 'compression_ratio': 1.5935483870967742, 'no_speech_prob': 0.059808120131492615}, {'id': 368, 'seek': 360212, 'start': 3602.12, 'end': 3612.2799999999997, 'text': ' Okay any questions? Any further questions? Okay in such a case I will summarize before we wind up.', 'tokens': [50364, 1033, 604, 1651, 30, 2639, 3052, 1651, 30, 1033, 294, 1270, 257, 1389, 286, 486, 20858, 949, 321, 2468, 493, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.19180834677911573, 'compression_ratio': 1.679245283018868, 'no_speech_prob': 0.007803668733686209}, {'id': 369, 'seek': 360212, 'start': 3613.96, 'end': 3620.52, 'text': ' We started today with introduction to optimizations compilers and optimizations. We', 'tokens': [50956, 492, 1409, 965, 365, 9339, 281, 5028, 14455, 715, 388, 433, 293, 5028, 14455, 13, 492, 51284], 'temperature': 0.0, 'avg_logprob': -0.19180834677911573, 'compression_ratio': 1.679245283018868, 'no_speech_prob': 0.007803668733686209}, {'id': 370, 'seek': 360212, 'start': 3620.52, 'end': 3625.96, 'text': ' looked at constant propagation what it is. We looked at copy propagation what it is.', 'tokens': [51284, 2956, 412, 5754, 38377, 437, 309, 307, 13, 492, 2956, 412, 5055, 38377, 437, 309, 307, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.19180834677911573, 'compression_ratio': 1.679245283018868, 'no_speech_prob': 0.007803668733686209}, {'id': 371, 'seek': 362596, 'start': 3626.76, 'end': 3633.7200000000003, 'text': ' We looked at loop unrolling its benefits. We looked at loop invariant code motion.', 'tokens': [50404, 492, 2956, 412, 6367, 517, 18688, 1080, 5311, 13, 492, 2956, 412, 6367, 33270, 394, 3089, 5394, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.11786349875028015, 'compression_ratio': 1.7197452229299364, 'no_speech_prob': 0.017153052613139153}, {'id': 372, 'seek': 362596, 'start': 3635.32, 'end': 3646.04, 'text': ' We looked at strength reduction. Then we came to control flow analysis in the post launch session.', 'tokens': [50832, 492, 2956, 412, 3800, 11004, 13, 1396, 321, 1361, 281, 1969, 3095, 5215, 294, 264, 2183, 4025, 5481, 13, 51368], 'temperature': 0.0, 'avg_logprob': -0.11786349875028015, 'compression_ratio': 1.7197452229299364, 'no_speech_prob': 0.017153052613139153}, {'id': 373, 'seek': 362596, 'start': 3646.04, 'end': 3652.6, 'text': ' The control flow analysis we looked at basic block building which you guys already knew.', 'tokens': [51368, 440, 1969, 3095, 5215, 321, 2956, 412, 3875, 3461, 2390, 597, 291, 1074, 1217, 2586, 13, 51696], 'temperature': 0.0, 'avg_logprob': -0.11786349875028015, 'compression_ratio': 1.7197452229299364, 'no_speech_prob': 0.017153052613139153}, {'id': 374, 'seek': 365260, 'start': 3653.08, 'end': 3662.36, 'text': ' Then we looked at how to build dominators right. Then we looked at different optimizations we do by', 'tokens': [50388, 1396, 321, 2956, 412, 577, 281, 1322, 8859, 3391, 558, 13, 1396, 321, 2956, 412, 819, 5028, 14455, 321, 360, 538, 50852], 'temperature': 0.0, 'avg_logprob': -0.09911348860142595, 'compression_ratio': 1.8, 'no_speech_prob': 0.00070114218397066}, {'id': 375, 'seek': 365260, 'start': 3664.2799999999997, 'end': 3669.3199999999997, 'text': ' after we build the control flow graph as part of control flow optimizations right.', 'tokens': [50948, 934, 321, 1322, 264, 1969, 3095, 4295, 382, 644, 295, 1969, 3095, 5028, 14455, 558, 13, 51200], 'temperature': 0.0, 'avg_logprob': -0.09911348860142595, 'compression_ratio': 1.8, 'no_speech_prob': 0.00070114218397066}, {'id': 376, 'seek': 365260, 'start': 3669.3199999999997, 'end': 3675.16, 'text': ' There is one important control flow related optimization which is called which is based', 'tokens': [51200, 821, 307, 472, 1021, 1969, 3095, 4077, 19618, 597, 307, 1219, 597, 307, 2361, 51492], 'temperature': 0.0, 'avg_logprob': -0.09911348860142595, 'compression_ratio': 1.8, 'no_speech_prob': 0.00070114218397066}, {'id': 377, 'seek': 367516, 'start': 3675.16, 'end': 3683.08, 'text': ' on again control flow analysis which is called inlining okay. We will do it hopefully tomorrow', 'tokens': [50364, 322, 797, 1969, 3095, 5215, 597, 307, 1219, 294, 31079, 1392, 13, 492, 486, 360, 309, 4696, 4153, 50760], 'temperature': 0.0, 'avg_logprob': -0.17866923762302772, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.02587313763797283}, {'id': 378, 'seek': 367516, 'start': 3683.08, 'end': 3696.7599999999998, 'text': ' towards the end okay. Any questions before we wind up for the day? No? They would not like you.', 'tokens': [50760, 3030, 264, 917, 1392, 13, 2639, 1651, 949, 321, 2468, 493, 337, 264, 786, 30, 883, 30, 814, 576, 406, 411, 291, 13, 51444], 'temperature': 0.0, 'avg_logprob': -0.17866923762302772, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.02587313763797283}, {'id': 379, 'seek': 367516, 'start': 3699.64, 'end': 3700.44, 'text': ' Excellent question.', 'tokens': [51588, 16723, 1168, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.17866923762302772, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.02587313763797283}, {'id': 380, 'seek': 370516, 'start': 3705.16, 'end': 3719.3999999999996, 'text': ' Correct. So the question is when you do loop unrolling you are increasing the body of the loop.', 'tokens': [50364, 12753, 13, 407, 264, 1168, 307, 562, 291, 360, 6367, 517, 18688, 291, 366, 5662, 264, 1772, 295, 264, 6367, 13, 51076], 'temperature': 0.0, 'avg_logprob': -0.18571149385892427, 'compression_ratio': 1.4028776978417266, 'no_speech_prob': 0.002905123634263873}, {'id': 381, 'seek': 370516, 'start': 3720.92, 'end': 3727.3199999999997, 'text': ' It may have an impact somewhere else. If you keep on unrolling why did we only unroll by 2 or 4 why', 'tokens': [51152, 467, 815, 362, 364, 2712, 4079, 1646, 13, 759, 291, 1066, 322, 517, 18688, 983, 630, 321, 787, 517, 3970, 538, 568, 420, 1017, 983, 51472], 'temperature': 0.0, 'avg_logprob': -0.18571149385892427, 'compression_ratio': 1.4028776978417266, 'no_speech_prob': 0.002905123634263873}, {'id': 382, 'seek': 372732, 'start': 3727.32, 'end': 3745.56, 'text': ' not 8 or 16 or 32 or full 100 right. How did the compiler decide how much to unroll? Any thoughts?', 'tokens': [50364, 406, 1649, 420, 3165, 420, 8858, 420, 1577, 2319, 558, 13, 1012, 630, 264, 31958, 4536, 577, 709, 281, 517, 3970, 30, 2639, 4598, 30, 51276], 'temperature': 0.0, 'avg_logprob': -0.19170291083199636, 'compression_ratio': 1.0769230769230769, 'no_speech_prob': 0.1554284542798996}, {'id': 383, 'seek': 375732, 'start': 3757.48, 'end': 3776.04, 'text': ' So do you know what are the factors that decide that? Yes so what size of the?', 'tokens': [50372, 407, 360, 291, 458, 437, 366, 264, 6771, 300, 4536, 300, 30, 1079, 370, 437, 2744, 295, 264, 30, 51300], 'temperature': 0.0, 'avg_logprob': -0.45680012910262396, 'compression_ratio': 1.0684931506849316, 'no_speech_prob': 0.08467131853103638}, {'id': 384, 'seek': 377604, 'start': 3776.92, 'end': 3777.4, 'text': ' Cache.', 'tokens': [50408, 383, 6000, 13, 50432], 'temperature': 0.0, 'avg_logprob': -0.24405654560435902, 'compression_ratio': 1.4507042253521127, 'no_speech_prob': 0.02027505822479725}, {'id': 385, 'seek': 377604, 'start': 3778.52, 'end': 3788.68, 'text': ' Which cache? Size of the eye cache is important here. See if the loop body is fully within my eye cache', 'tokens': [50488, 3013, 19459, 30, 35818, 295, 264, 3313, 19459, 307, 1021, 510, 13, 3008, 498, 264, 6367, 1772, 307, 4498, 1951, 452, 3313, 19459, 50996], 'temperature': 0.0, 'avg_logprob': -0.24405654560435902, 'compression_ratio': 1.4507042253521127, 'no_speech_prob': 0.02027505822479725}, {'id': 386, 'seek': 377604, 'start': 3791.8, 'end': 3800.6, 'text': ' it is better but at the same time unrolling has its own benefits right. So because of unrolling', 'tokens': [51152, 309, 307, 1101, 457, 412, 264, 912, 565, 517, 18688, 575, 1080, 1065, 5311, 558, 13, 407, 570, 295, 517, 18688, 51592], 'temperature': 0.0, 'avg_logprob': -0.24405654560435902, 'compression_ratio': 1.4507042253521127, 'no_speech_prob': 0.02027505822479725}, {'id': 387, 'seek': 380060, 'start': 3800.6, 'end': 3806.36, 'text': ' I get some benefits because of unrolling I am also filling in the I mean I may cross the', 'tokens': [50364, 286, 483, 512, 5311, 570, 295, 517, 18688, 286, 669, 611, 10623, 294, 264, 286, 914, 286, 815, 3278, 264, 50652], 'temperature': 0.0, 'avg_logprob': -0.13757886308612247, 'compression_ratio': 1.5823529411764705, 'no_speech_prob': 0.005141021683812141}, {'id': 388, 'seek': 380060, 'start': 3807.4, 'end': 3811.7999999999997, 'text': ' the loop body is not fully fitting within the eye cache I may have some penalty.', 'tokens': [50704, 264, 6367, 1772, 307, 406, 4498, 15669, 1951, 264, 3313, 19459, 286, 815, 362, 512, 16263, 13, 50924], 'temperature': 0.0, 'avg_logprob': -0.13757886308612247, 'compression_ratio': 1.5823529411764705, 'no_speech_prob': 0.005141021683812141}, {'id': 389, 'seek': 380060, 'start': 3812.6, 'end': 3824.92, 'text': ' So now so that means you gain some you are losing some. Traditionally there is no agreement on what', 'tokens': [50964, 407, 586, 370, 300, 1355, 291, 6052, 512, 291, 366, 7027, 512, 13, 22017, 15899, 456, 307, 572, 8106, 322, 437, 51580], 'temperature': 0.0, 'avg_logprob': -0.13757886308612247, 'compression_ratio': 1.5823529411764705, 'no_speech_prob': 0.005141021683812141}, {'id': 390, 'seek': 382492, 'start': 3824.92, 'end': 3832.28, 'text': ' is the golden formula or how big my loop unrolling can be. There is no such golden formula. People', 'tokens': [50364, 307, 264, 9729, 8513, 420, 577, 955, 452, 6367, 517, 18688, 393, 312, 13, 821, 307, 572, 1270, 9729, 8513, 13, 3432, 50732], 'temperature': 0.0, 'avg_logprob': -0.1313000032978673, 'compression_ratio': 1.668141592920354, 'no_speech_prob': 0.004462713375687599}, {'id': 391, 'seek': 382492, 'start': 3832.28, 'end': 3841.08, 'text': ' do not agree. Then pretty much every compiler has their own group of experts who say okay this is', 'tokens': [50732, 360, 406, 3986, 13, 1396, 1238, 709, 633, 31958, 575, 641, 1065, 1594, 295, 8572, 567, 584, 1392, 341, 307, 51172], 'temperature': 0.0, 'avg_logprob': -0.1313000032978673, 'compression_ratio': 1.668141592920354, 'no_speech_prob': 0.004462713375687599}, {'id': 392, 'seek': 382492, 'start': 3841.08, 'end': 3846.2000000000003, 'text': ' let us do this. They test it on a large set of benchmarks and say this looks good.', 'tokens': [51172, 718, 505, 360, 341, 13, 814, 1500, 309, 322, 257, 2416, 992, 295, 43751, 293, 584, 341, 1542, 665, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.1313000032978673, 'compression_ratio': 1.668141592920354, 'no_speech_prob': 0.004462713375687599}, {'id': 393, 'seek': 382492, 'start': 3848.12, 'end': 3854.36, 'text': ' I mean it is kind of engineering and they do the engineering at a level that you will say how did', 'tokens': [51524, 286, 914, 309, 307, 733, 295, 7043, 293, 436, 360, 264, 7043, 412, 257, 1496, 300, 291, 486, 584, 577, 630, 51836], 'temperature': 0.0, 'avg_logprob': -0.1313000032978673, 'compression_ratio': 1.668141592920354, 'no_speech_prob': 0.004462713375687599}, {'id': 394, 'seek': 385436, 'start': 3854.36, 'end': 3860.6, 'text': ' they arrive at this number k where that k could be your favorite random number 37 right. Not', 'tokens': [50364, 436, 8881, 412, 341, 1230, 350, 689, 300, 350, 727, 312, 428, 2954, 4974, 1230, 13435, 558, 13, 1726, 50676], 'temperature': 0.0, 'avg_logprob': -0.08344313303629557, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 5.4711497796233743e-05}, {'id': 395, 'seek': 385436, 'start': 3860.6, 'end': 3867.08, 'text': ' 37 but they say look do not go beyond this. Similarly for unrolling they say do not unroll', 'tokens': [50676, 13435, 457, 436, 584, 574, 360, 406, 352, 4399, 341, 13, 13157, 337, 517, 18688, 436, 584, 360, 406, 517, 3970, 51000], 'temperature': 0.0, 'avg_logprob': -0.08344313303629557, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 5.4711497796233743e-05}, {'id': 396, 'seek': 385436, 'start': 3867.08, 'end': 3873.7200000000003, 'text': ' a function which will lead which will have more than some k number of instructions sorry do not', 'tokens': [51000, 257, 2445, 597, 486, 1477, 597, 486, 362, 544, 813, 512, 350, 1230, 295, 9415, 2597, 360, 406, 51332], 'temperature': 0.0, 'avg_logprob': -0.08344313303629557, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 5.4711497796233743e-05}, {'id': 397, 'seek': 385436, 'start': 3873.7200000000003, 'end': 3881.56, 'text': ' inline a function which has more than k number of instructions. Again this is I mean there is lot of', 'tokens': [51332, 294, 1889, 257, 2445, 597, 575, 544, 813, 350, 1230, 295, 9415, 13, 3764, 341, 307, 286, 914, 456, 307, 688, 295, 51724], 'temperature': 0.0, 'avg_logprob': -0.08344313303629557, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 5.4711497796233743e-05}, {'id': 398, 'seek': 388156, 'start': 3882.52, 'end': 3887.88, 'text': ' engineering expertise that gets in gets into it for different architectures for different', 'tokens': [50412, 7043, 11769, 300, 2170, 294, 2170, 666, 309, 337, 819, 6331, 1303, 337, 819, 50680], 'temperature': 0.0, 'avg_logprob': -0.1428129900069464, 'compression_ratio': 1.7222222222222223, 'no_speech_prob': 0.00027789565501734614}, {'id': 399, 'seek': 388156, 'start': 3889.32, 'end': 3897.08, 'text': ' compilers that combination they have different sets right. But yes it is a very important point', 'tokens': [50752, 715, 388, 433, 300, 6562, 436, 362, 819, 6352, 558, 13, 583, 2086, 309, 307, 257, 588, 1021, 935, 51140], 'temperature': 0.0, 'avg_logprob': -0.1428129900069464, 'compression_ratio': 1.7222222222222223, 'no_speech_prob': 0.00027789565501734614}, {'id': 400, 'seek': 388156, 'start': 3897.08, 'end': 3902.92, 'text': ' that how much to unroll. They definitely will not unroll too much. What is too much there is', 'tokens': [51140, 300, 577, 709, 281, 517, 3970, 13, 814, 2138, 486, 406, 517, 3970, 886, 709, 13, 708, 307, 886, 709, 456, 307, 51432], 'temperature': 0.0, 'avg_logprob': -0.1428129900069464, 'compression_ratio': 1.7222222222222223, 'no_speech_prob': 0.00027789565501734614}, {'id': 401, 'seek': 388156, 'start': 3902.92, 'end': 3907.48, 'text': ' a clear understanding. What is the right thing there is no agreement yet. I mean because some', 'tokens': [51432, 257, 1850, 3701, 13, 708, 307, 264, 558, 551, 456, 307, 572, 8106, 1939, 13, 286, 914, 570, 512, 51660], 'temperature': 0.0, 'avg_logprob': -0.1428129900069464, 'compression_ratio': 1.7222222222222223, 'no_speech_prob': 0.00027789565501734614}, {'id': 402, 'seek': 390748, 'start': 3907.48, 'end': 3912.68, 'text': ' will say no I can do see because by unrolling my block has become bigger because of which I am', 'tokens': [50364, 486, 584, 572, 286, 393, 360, 536, 570, 538, 517, 18688, 452, 3461, 575, 1813, 3801, 570, 295, 597, 286, 669, 50624], 'temperature': 0.0, 'avg_logprob': -0.12940327326456705, 'compression_ratio': 1.8151658767772512, 'no_speech_prob': 0.0022385644260793924}, {'id': 403, 'seek': 390748, 'start': 3912.68, 'end': 3917.0, 'text': ' able to do better register allocation which will give me yes I am losing on iCache but I am getting', 'tokens': [50624, 1075, 281, 360, 1101, 7280, 27599, 597, 486, 976, 385, 2086, 286, 669, 7027, 322, 741, 34, 6000, 457, 286, 669, 1242, 50840], 'temperature': 0.0, 'avg_logprob': -0.12940327326456705, 'compression_ratio': 1.8151658767772512, 'no_speech_prob': 0.0022385644260793924}, {'id': 404, 'seek': 390748, 'start': 3917.0, 'end': 3925.8, 'text': ' benefits somewhere else right. So there is a push and pull I am able to do better pipelining', 'tokens': [50840, 5311, 4079, 1646, 558, 13, 407, 456, 307, 257, 2944, 293, 2235, 286, 669, 1075, 281, 360, 1101, 8489, 338, 1760, 51280], 'temperature': 0.0, 'avg_logprob': -0.12940327326456705, 'compression_ratio': 1.8151658767772512, 'no_speech_prob': 0.0022385644260793924}, {'id': 405, 'seek': 390748, 'start': 3925.8, 'end': 3933.4, 'text': ' because of unrolling great right because unrolling helps me do better instruction scheduling do', 'tokens': [51280, 570, 295, 517, 18688, 869, 558, 570, 517, 18688, 3665, 385, 360, 1101, 10951, 29055, 360, 51660], 'temperature': 0.0, 'avg_logprob': -0.12940327326456705, 'compression_ratio': 1.8151658767772512, 'no_speech_prob': 0.0022385644260793924}, {'id': 406, 'seek': 393340, 'start': 3933.4, 'end': 3940.6, 'text': ' better software pipelining. So these things are kind of not so easy. So that is why so when', 'tokens': [50364, 1101, 4722, 8489, 338, 1760, 13, 407, 613, 721, 366, 733, 295, 406, 370, 1858, 13, 407, 300, 307, 983, 370, 562, 50724], 'temperature': 0.0, 'avg_logprob': -0.13928575773496885, 'compression_ratio': 1.547872340425532, 'no_speech_prob': 0.0008961231214925647}, {'id': 407, 'seek': 393340, 'start': 3940.6, 'end': 3947.32, 'text': ' Shaujit mentioned about the decision tree basically what he is saying is people use some many complex', 'tokens': [50724, 1160, 1459, 73, 270, 2835, 466, 264, 3537, 4230, 1936, 437, 415, 307, 1566, 307, 561, 764, 512, 867, 3997, 51060], 'temperature': 0.0, 'avg_logprob': -0.13928575773496885, 'compression_ratio': 1.547872340425532, 'no_speech_prob': 0.0008961231214925647}, {'id': 408, 'seek': 393340, 'start': 3947.32, 'end': 3959.7200000000003, 'text': ' heuristics to compute what is right. So I do not have an easy answer what is the number but all I', 'tokens': [51060, 415, 374, 6006, 281, 14722, 437, 307, 558, 13, 407, 286, 360, 406, 362, 364, 1858, 1867, 437, 307, 264, 1230, 457, 439, 286, 51680], 'temperature': 0.0, 'avg_logprob': -0.13928575773496885, 'compression_ratio': 1.547872340425532, 'no_speech_prob': 0.0008961231214925647}, {'id': 409, 'seek': 395972, 'start': 3959.72, 'end': 3966.4399999999996, 'text': ' can tell you is it is a complex problem and the factors that impact are iCache the fall the', 'tokens': [50364, 393, 980, 291, 307, 309, 307, 257, 3997, 1154, 293, 264, 6771, 300, 2712, 366, 741, 34, 6000, 264, 2100, 264, 50700], 'temperature': 0.0, 'avg_logprob': -0.18046711285909017, 'compression_ratio': 1.5222929936305734, 'no_speech_prob': 0.005069716367870569}, {'id': 410, 'seek': 395972, 'start': 3967.64, 'end': 3975.3999999999996, 'text': ' impact on the register allocation the impact on what do you say pipelining and so on okay.', 'tokens': [50760, 2712, 322, 264, 7280, 27599, 264, 2712, 322, 437, 360, 291, 584, 8489, 338, 1760, 293, 370, 322, 1392, 13, 51148], 'temperature': 0.0, 'avg_logprob': -0.18046711285909017, 'compression_ratio': 1.5222929936305734, 'no_speech_prob': 0.005069716367870569}, {'id': 411, 'seek': 395972, 'start': 3977.16, 'end': 3982.68, 'text': ' ILP instructional parallelism okay. Any other questions?', 'tokens': [51236, 40413, 47, 35716, 8952, 1434, 1392, 13, 2639, 661, 1651, 30, 51512], 'temperature': 0.0, 'avg_logprob': -0.18046711285909017, 'compression_ratio': 1.5222929936305734, 'no_speech_prob': 0.005069716367870569}, {'id': 412, 'seek': 398268, 'start': 3982.68, 'end': 3993.0, 'text': ' I still have an through even though I am tired I still have an through those who are those who', 'tokens': [50364, 286, 920, 362, 364, 807, 754, 1673, 286, 669, 5868, 286, 920, 362, 364, 807, 729, 567, 366, 729, 567, 50880], 'temperature': 0.0, 'avg_logprob': -0.31874330227191633, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.015405392274260521}, {'id': 413, 'seek': 398268, 'start': 3993.0, 'end': 3995.64, 'text': ' want to wait they can wait any questions on what we have covered.', 'tokens': [50880, 528, 281, 1699, 436, 393, 1699, 604, 1651, 322, 437, 321, 362, 5343, 13, 51012], 'temperature': 0.0, 'avg_logprob': -0.31874330227191633, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.015405392274260521}, {'id': 414, 'seek': 398268, 'start': 4005.16, 'end': 4009.16, 'text': ' I do not see why it cannot happen tomorrow unless', 'tokens': [51488, 286, 360, 406, 536, 983, 309, 2644, 1051, 4153, 5969, 51688], 'temperature': 0.0, 'avg_logprob': -0.31874330227191633, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.015405392274260521}, {'id': 415, 'seek': 400916, 'start': 4010.12, 'end': 4012.92, 'text': ' the critical mass says the same thing for tomorrow.', 'tokens': [50412, 264, 4924, 2758, 1619, 264, 912, 551, 337, 4153, 13, 50552], 'temperature': 0.0, 'avg_logprob': -0.33728861341289446, 'compression_ratio': 1.5396825396825398, 'no_speech_prob': 0.007003880105912685}, {'id': 416, 'seek': 400916, 'start': 4016.44, 'end': 4018.52, 'text': ' Well tomorrow will also be the same thing I think I mean I', 'tokens': [50728, 1042, 4153, 486, 611, 312, 264, 912, 551, 286, 519, 286, 914, 286, 50832], 'temperature': 0.0, 'avg_logprob': -0.33728861341289446, 'compression_ratio': 1.5396825396825398, 'no_speech_prob': 0.007003880105912685}, {'id': 417, 'seek': 400916, 'start': 4021.8799999999997, 'end': 4033.64, 'text': ' tomorrow let us start at 5 30 or so if we start okay is that fine then okay we will', 'tokens': [51000, 4153, 718, 505, 722, 412, 1025, 2217, 420, 370, 498, 321, 722, 1392, 307, 300, 2489, 550, 1392, 321, 486, 51588], 'temperature': 0.0, 'avg_logprob': -0.33728861341289446, 'compression_ratio': 1.5396825396825398, 'no_speech_prob': 0.007003880105912685}, {'id': 418, 'seek': 403364, 'start': 4034.6, 'end': 4039.16, 'text': ' we will try to wind up tomorrow slightly early and talk about that.', 'tokens': [50412, 321, 486, 853, 281, 2468, 493, 4153, 4748, 2440, 293, 751, 466, 300, 13, 50640], 'temperature': 0.0, 'avg_logprob': -0.2195484726517289, 'compression_ratio': 1.1777777777777778, 'no_speech_prob': 0.0012181251076981425}, {'id': 419, 'seek': 403364, 'start': 4040.68, 'end': 4045.72, 'text': ' Any other question before you wind up?', 'tokens': [50716, 2639, 661, 1168, 949, 291, 2468, 493, 30, 50968], 'temperature': 0.0, 'avg_logprob': -0.2195484726517289, 'compression_ratio': 1.1777777777777778, 'no_speech_prob': 0.0012181251076981425}]