[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 10.72, 'text': ' So, as I mentioned in the last class, now we are going to focus on optimizations for', 'tokens': [50364, 407, 11, 382, 286, 2835, 294, 264, 1036, 1508, 11, 586, 321, 366, 516, 281, 1879, 322, 5028, 14455, 337, 50900], 'temperature': 0.0, 'avg_logprob': -0.19489885305429433, 'compression_ratio': 1.6512820512820512, 'no_speech_prob': 0.026484565809369087}, {'id': 1, 'seek': 0, 'start': 10.72, 'end': 15.76, 'text': ' memory hierarchy and parallelization, specifically vectorization that is the one that thing that', 'tokens': [50900, 4675, 22333, 293, 8952, 2144, 11, 4682, 8062, 2144, 300, 307, 264, 472, 300, 551, 300, 51152], 'temperature': 0.0, 'avg_logprob': -0.19489885305429433, 'compression_ratio': 1.6512820512820512, 'no_speech_prob': 0.026484565809369087}, {'id': 2, 'seek': 0, 'start': 15.76, 'end': 20.56, 'text': ' you are going to focus on. Similar techniques can be done for parallelization as well, but', 'tokens': [51152, 291, 366, 516, 281, 1879, 322, 13, 10905, 7512, 393, 312, 1096, 337, 8952, 2144, 382, 731, 11, 457, 51392], 'temperature': 0.0, 'avg_logprob': -0.19489885305429433, 'compression_ratio': 1.6512820512820512, 'no_speech_prob': 0.026484565809369087}, {'id': 3, 'seek': 0, 'start': 20.56, 'end': 24.28, 'text': ' we will not talk about it right in this slide ok.', 'tokens': [51392, 321, 486, 406, 751, 466, 309, 558, 294, 341, 4137, 3133, 13, 51578], 'temperature': 0.0, 'avg_logprob': -0.19489885305429433, 'compression_ratio': 1.6512820512820512, 'no_speech_prob': 0.026484565809369087}, {'id': 4, 'seek': 2428, 'start': 24.68, 'end': 30.48, 'text': ' Now the idea is to exploit more performance and then try to do some of these optimizations.', 'tokens': [50384, 823, 264, 1558, 307, 281, 25924, 544, 3389, 293, 550, 853, 281, 360, 512, 295, 613, 5028, 14455, 13, 50674], 'temperature': 0.0, 'avg_logprob': -0.1919714106191503, 'compression_ratio': 2.0707547169811322, 'no_speech_prob': 0.048326801508665085}, {'id': 5, 'seek': 2428, 'start': 30.48, 'end': 36.04, 'text': ' One important thing that you are going to see today, I mean important thing that you', 'tokens': [50674, 1485, 1021, 551, 300, 291, 366, 516, 281, 536, 965, 11, 286, 914, 1021, 551, 300, 291, 50952], 'temperature': 0.0, 'avg_logprob': -0.1919714106191503, 'compression_ratio': 2.0707547169811322, 'no_speech_prob': 0.048326801508665085}, {'id': 6, 'seek': 2428, 'start': 36.04, 'end': 40.28, 'text': ' are going to see in this lecture as opposed to some other thing that we discussed, we', 'tokens': [50952, 366, 516, 281, 536, 294, 341, 7991, 382, 8851, 281, 512, 661, 551, 300, 321, 7152, 11, 321, 51164], 'temperature': 0.0, 'avg_logprob': -0.1919714106191503, 'compression_ratio': 2.0707547169811322, 'no_speech_prob': 0.048326801508665085}, {'id': 7, 'seek': 2428, 'start': 40.28, 'end': 44.16, 'text': ' will have to come back and ask the question where are these optimizations going to be', 'tokens': [51164, 486, 362, 281, 808, 646, 293, 1029, 264, 1168, 689, 366, 613, 5028, 14455, 516, 281, 312, 51358], 'temperature': 0.0, 'avg_logprob': -0.1919714106191503, 'compression_ratio': 2.0707547169811322, 'no_speech_prob': 0.048326801508665085}, {'id': 8, 'seek': 2428, 'start': 44.16, 'end': 48.94, 'text': ' done or when are these optimizations going to be done. Because some of these optimizations', 'tokens': [51358, 1096, 420, 562, 366, 613, 5028, 14455, 516, 281, 312, 1096, 13, 1436, 512, 295, 613, 5028, 14455, 51597], 'temperature': 0.0, 'avg_logprob': -0.1919714106191503, 'compression_ratio': 2.0707547169811322, 'no_speech_prob': 0.048326801508665085}, {'id': 9, 'seek': 4894, 'start': 49.14, 'end': 55.699999999999996, 'text': ' need to be done at a higher level rather than at the machine code or at the intermediate', 'tokens': [50374, 643, 281, 312, 1096, 412, 257, 2946, 1496, 2831, 813, 412, 264, 3479, 3089, 420, 412, 264, 19376, 50702], 'temperature': 0.0, 'avg_logprob': -0.2211848339402532, 'compression_ratio': 1.6933962264150944, 'no_speech_prob': 0.21430034935474396}, {'id': 10, 'seek': 4894, 'start': 55.699999999999996, 'end': 61.099999999999994, 'text': ' code level. So, we will talk about that towards the end and then say why that is important', 'tokens': [50702, 3089, 1496, 13, 407, 11, 321, 486, 751, 466, 300, 3030, 264, 917, 293, 550, 584, 983, 300, 307, 1021, 50972], 'temperature': 0.0, 'avg_logprob': -0.2211848339402532, 'compression_ratio': 1.6933962264150944, 'no_speech_prob': 0.21430034935474396}, {'id': 11, 'seek': 4894, 'start': 61.099999999999994, 'end': 68.38, 'text': ' for this ok. The idea here is again to exploit higher performance and possibly exploit parallelism', 'tokens': [50972, 337, 341, 3133, 13, 440, 1558, 510, 307, 797, 281, 25924, 2946, 3389, 293, 6264, 25924, 8952, 1434, 51336], 'temperature': 0.0, 'avg_logprob': -0.2211848339402532, 'compression_ratio': 1.6933962264150944, 'no_speech_prob': 0.21430034935474396}, {'id': 12, 'seek': 4894, 'start': 68.38, 'end': 73.82, 'text': ' and locality in loops, that is really why we are talking about these techniques.', 'tokens': [51336, 293, 1628, 1860, 294, 16121, 11, 300, 307, 534, 983, 321, 366, 1417, 466, 613, 7512, 13, 51608], 'temperature': 0.0, 'avg_logprob': -0.2211848339402532, 'compression_ratio': 1.6933962264150944, 'no_speech_prob': 0.21430034935474396}, {'id': 13, 'seek': 7382, 'start': 74.3, 'end': 78.89999999999999, 'text': ' We already talked about instruction level parallelism in the earlier class, today we', 'tokens': [50388, 492, 1217, 2825, 466, 10951, 1496, 8952, 1434, 294, 264, 3071, 1508, 11, 965, 321, 50618], 'temperature': 0.0, 'avg_logprob': -0.2081159837175124, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.052855655550956726}, {'id': 14, 'seek': 7382, 'start': 78.89999999999999, 'end': 83.97999999999999, 'text': ' will talk more about data level parallelism. Thread level parallelism is something similar,', 'tokens': [50618, 486, 751, 544, 466, 1412, 1496, 8952, 1434, 13, 334, 2538, 1496, 8952, 1434, 307, 746, 2531, 11, 50872], 'temperature': 0.0, 'avg_logprob': -0.2081159837175124, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.052855655550956726}, {'id': 15, 'seek': 7382, 'start': 83.97999999999999, 'end': 89.02, 'text': ' task level parallelism is something I have sliced, but I do not think we will be able', 'tokens': [50872, 5633, 1496, 8952, 1434, 307, 746, 286, 362, 27098, 11, 457, 286, 360, 406, 519, 321, 486, 312, 1075, 51124], 'temperature': 0.0, 'avg_logprob': -0.2081159837175124, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.052855655550956726}, {'id': 16, 'seek': 7382, 'start': 89.02, 'end': 94.78, 'text': ' to cover that in this lecture. We will also very briefly talk about exploiting data locality', 'tokens': [51124, 281, 2060, 300, 294, 341, 7991, 13, 492, 486, 611, 588, 10515, 751, 466, 12382, 1748, 1412, 1628, 1860, 51412], 'temperature': 0.0, 'avg_logprob': -0.2081159837175124, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.052855655550956726}, {'id': 17, 'seek': 7382, 'start': 94.78, 'end': 100.58, 'text': ' ok. So, as I mentioned earlier data level parallelism is exploited by vector machines,', 'tokens': [51412, 3133, 13, 407, 11, 382, 286, 2835, 3071, 1412, 1496, 8952, 1434, 307, 40918, 538, 8062, 8379, 11, 51702], 'temperature': 0.0, 'avg_logprob': -0.2081159837175124, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.052855655550956726}, {'id': 18, 'seek': 10058, 'start': 100.58, 'end': 107.66, 'text': ' M D machines, sub-word parallelism and GPUs we saw that ok. Again I am going to skip', 'tokens': [50364, 376, 413, 8379, 11, 1422, 12, 7462, 8952, 1434, 293, 18407, 82, 321, 1866, 300, 3133, 13, 3764, 286, 669, 516, 281, 10023, 50718], 'temperature': 0.0, 'avg_logprob': -0.22647395980692356, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.01702912524342537}, {'id': 19, 'seek': 10058, 'start': 107.66, 'end': 113.1, 'text': ' this example, because we have already seen this in the previous lecture. If you have', 'tokens': [50718, 341, 1365, 11, 570, 321, 362, 1217, 1612, 341, 294, 264, 3894, 7991, 13, 759, 291, 362, 50990], 'temperature': 0.0, 'avg_logprob': -0.22647395980692356, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.01702912524342537}, {'id': 20, 'seek': 10058, 'start': 113.1, 'end': 118.62, 'text': ' a piece of code which is like this right, then for the vectorized machine which we have', 'tokens': [50990, 257, 2522, 295, 3089, 597, 307, 411, 341, 558, 11, 550, 337, 264, 8062, 1602, 3479, 597, 321, 362, 51266], 'temperature': 0.0, 'avg_logprob': -0.22647395980692356, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.01702912524342537}, {'id': 21, 'seek': 10058, 'start': 118.62, 'end': 123.94, 'text': ' not seen the code would look something like this if the vector length is 64 right. Again', 'tokens': [51266, 406, 1612, 264, 3089, 576, 574, 746, 411, 341, 498, 264, 8062, 4641, 307, 12145, 558, 13, 3764, 51532], 'temperature': 0.0, 'avg_logprob': -0.22647395980692356, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.01702912524342537}, {'id': 22, 'seek': 10058, 'start': 123.94, 'end': 128.9, 'text': ' this is still a high level representation of the code, but what it says is that for', 'tokens': [51532, 341, 307, 920, 257, 1090, 1496, 10290, 295, 264, 3089, 11, 457, 437, 309, 1619, 307, 300, 337, 51780], 'temperature': 0.0, 'avg_logprob': -0.22647395980692356, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.01702912524342537}, {'id': 23, 'seek': 12890, 'start': 128.9, 'end': 135.98000000000002, 'text': ' elements j to j plus 63 or totally 64 elements right the vector operation would be performed.', 'tokens': [50364, 4959, 361, 281, 361, 1804, 25082, 420, 3879, 12145, 4959, 558, 264, 8062, 6916, 576, 312, 10332, 13, 50718], 'temperature': 0.0, 'avg_logprob': -0.17026168697482938, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.019520102068781853}, {'id': 24, 'seek': 12890, 'start': 135.98000000000002, 'end': 140.1, 'text': ' Then again for the next set of vector, then again for the next set of vector and so on.', 'tokens': [50718, 1396, 797, 337, 264, 958, 992, 295, 8062, 11, 550, 797, 337, 264, 958, 992, 295, 8062, 293, 370, 322, 13, 50924], 'temperature': 0.0, 'avg_logprob': -0.17026168697482938, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.019520102068781853}, {'id': 25, 'seek': 12890, 'start': 140.1, 'end': 146.66, 'text': ' Whereas, if it is an AVX kind of a code, then you are going to do it for 16 or right 8 or', 'tokens': [50924, 13813, 11, 498, 309, 307, 364, 30198, 55, 733, 295, 257, 3089, 11, 550, 291, 366, 516, 281, 360, 309, 337, 3165, 420, 558, 1649, 420, 51252], 'temperature': 0.0, 'avg_logprob': -0.17026168697482938, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.019520102068781853}, {'id': 26, 'seek': 12890, 'start': 146.66, 'end': 152.98000000000002, 'text': ' whatever number of operations in parallel using this v move and v add v multiply kind', 'tokens': [51252, 2035, 1230, 295, 7705, 294, 8952, 1228, 341, 371, 1286, 293, 371, 909, 371, 12972, 733, 51568], 'temperature': 0.0, 'avg_logprob': -0.17026168697482938, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.019520102068781853}, {'id': 27, 'seek': 15298, 'start': 152.98, 'end': 159.89999999999998, 'text': ' of instructions ok. If it is a GPU kind of a situation, then it is going to be in the', 'tokens': [50364, 295, 9415, 3133, 13, 759, 309, 307, 257, 18407, 733, 295, 257, 2590, 11, 550, 309, 307, 516, 281, 312, 294, 264, 50710], 'temperature': 0.0, 'avg_logprob': -0.17422156377669867, 'compression_ratio': 1.765625, 'no_speech_prob': 0.09075736254453659}, {'id': 28, 'seek': 15298, 'start': 159.89999999999998, 'end': 164.89999999999998, 'text': ' form of a CUDA kernel well I am not saying that the compiler is going to generate this,', 'tokens': [50710, 1254, 295, 257, 29777, 7509, 28256, 731, 286, 669, 406, 1566, 300, 264, 31958, 307, 516, 281, 8460, 341, 11, 50960], 'temperature': 0.0, 'avg_logprob': -0.17422156377669867, 'compression_ratio': 1.765625, 'no_speech_prob': 0.09075736254453659}, {'id': 29, 'seek': 15298, 'start': 164.89999999999998, 'end': 169.22, 'text': ' but in order for you to exploit the data level parallelism right you may have to write as', 'tokens': [50960, 457, 294, 1668, 337, 291, 281, 25924, 264, 1412, 1496, 8952, 1434, 558, 291, 815, 362, 281, 2464, 382, 51176], 'temperature': 0.0, 'avg_logprob': -0.17422156377669867, 'compression_ratio': 1.765625, 'no_speech_prob': 0.09075736254453659}, {'id': 30, 'seek': 15298, 'start': 169.22, 'end': 174.7, 'text': ' a programmer this kind of a CUDA code which essentially talks about data level parallelism.', 'tokens': [51176, 257, 32116, 341, 733, 295, 257, 29777, 7509, 3089, 597, 4476, 6686, 466, 1412, 1496, 8952, 1434, 13, 51450], 'temperature': 0.0, 'avg_logprob': -0.17422156377669867, 'compression_ratio': 1.765625, 'no_speech_prob': 0.09075736254453659}, {'id': 31, 'seek': 15298, 'start': 174.7, 'end': 180.7, 'text': ' So, talking about thread or task level parallelism typically this is exploited in the multi core', 'tokens': [51450, 407, 11, 1417, 466, 7207, 420, 5633, 1496, 8952, 1434, 5850, 341, 307, 40918, 294, 264, 4825, 4965, 51750], 'temperature': 0.0, 'avg_logprob': -0.17422156377669867, 'compression_ratio': 1.765625, 'no_speech_prob': 0.09075736254453659}, {'id': 32, 'seek': 18070, 'start': 180.7, 'end': 185.54, 'text': ' architecture all other processors are already multi core they have multiple processors in', 'tokens': [50364, 9482, 439, 661, 27751, 366, 1217, 4825, 4965, 436, 362, 3866, 27751, 294, 50606], 'temperature': 0.0, 'avg_logprob': -0.23795649769541982, 'compression_ratio': 2.013333333333333, 'no_speech_prob': 0.03470556437969208}, {'id': 33, 'seek': 18070, 'start': 185.54, 'end': 193.5, 'text': ' that ok. And this multi processor architecture can be either a shared memory system or a', 'tokens': [50606, 300, 3133, 13, 400, 341, 4825, 15321, 9482, 393, 312, 2139, 257, 5507, 4675, 1185, 420, 257, 51004], 'temperature': 0.0, 'avg_logprob': -0.23795649769541982, 'compression_ratio': 2.013333333333333, 'no_speech_prob': 0.03470556437969208}, {'id': 34, 'seek': 18070, 'start': 193.5, 'end': 198.98, 'text': ' distributed memory or message processing system. In the case of a shared memory system the', 'tokens': [51004, 12631, 4675, 420, 3636, 9007, 1185, 13, 682, 264, 1389, 295, 257, 5507, 4675, 1185, 264, 51278], 'temperature': 0.0, 'avg_logprob': -0.23795649769541982, 'compression_ratio': 2.013333333333333, 'no_speech_prob': 0.03470556437969208}, {'id': 35, 'seek': 18070, 'start': 198.98, 'end': 204.73999999999998, 'text': ' different cores that you have in the processor they share a common memory right and there', 'tokens': [51278, 819, 24826, 300, 291, 362, 294, 264, 15321, 436, 2073, 257, 2689, 4675, 558, 293, 456, 51566], 'temperature': 0.0, 'avg_logprob': -0.23795649769541982, 'compression_ratio': 2.013333333333333, 'no_speech_prob': 0.03470556437969208}, {'id': 36, 'seek': 18070, 'start': 204.73999999999998, 'end': 209.7, 'text': ' is hardware abstraction for sharing this memory. Whereas, in the case of a distributed memory', 'tokens': [51566, 307, 8837, 37765, 337, 5414, 341, 4675, 13, 13813, 11, 294, 264, 1389, 295, 257, 12631, 4675, 51814], 'temperature': 0.0, 'avg_logprob': -0.23795649769541982, 'compression_ratio': 2.013333333333333, 'no_speech_prob': 0.03470556437969208}, {'id': 37, 'seek': 20970, 'start': 209.7, 'end': 216.1, 'text': ' architecture different machines or different processors have their own local memory and', 'tokens': [50364, 9482, 819, 8379, 420, 819, 27751, 362, 641, 1065, 2654, 4675, 293, 50684], 'temperature': 0.0, 'avg_logprob': -0.15185968426690585, 'compression_ratio': 1.872340425531915, 'no_speech_prob': 0.011915762908756733}, {'id': 38, 'seek': 20970, 'start': 216.1, 'end': 221.54, 'text': ' they communicate with other processors by means of messages which is send receive messages', 'tokens': [50684, 436, 7890, 365, 661, 27751, 538, 1355, 295, 7897, 597, 307, 2845, 4774, 7897, 50956], 'temperature': 0.0, 'avg_logprob': -0.15185968426690585, 'compression_ratio': 1.872340425531915, 'no_speech_prob': 0.011915762908756733}, {'id': 39, 'seek': 20970, 'start': 221.54, 'end': 227.45999999999998, 'text': ' and they do not share common memory right they have to explicitly send data by means', 'tokens': [50956, 293, 436, 360, 406, 2073, 2689, 4675, 558, 436, 362, 281, 20803, 2845, 1412, 538, 1355, 51252], 'temperature': 0.0, 'avg_logprob': -0.15185968426690585, 'compression_ratio': 1.872340425531915, 'no_speech_prob': 0.011915762908756733}, {'id': 40, 'seek': 20970, 'start': 227.45999999999998, 'end': 233.85999999999999, 'text': ' of messages or receive data as messages ok. For the shared memory machine and multi core', 'tokens': [51252, 295, 7897, 420, 4774, 1412, 382, 7897, 3133, 13, 1171, 264, 5507, 4675, 3479, 293, 4825, 4965, 51572], 'temperature': 0.0, 'avg_logprob': -0.15185968426690585, 'compression_ratio': 1.872340425531915, 'no_speech_prob': 0.011915762908756733}, {'id': 41, 'seek': 23386, 'start': 233.86, 'end': 240.10000000000002, 'text': ' architecture typically you use open MP kind of a programming model whereas, for the distributed', 'tokens': [50364, 9482, 5850, 291, 764, 1269, 14146, 733, 295, 257, 9410, 2316, 9735, 11, 337, 264, 12631, 50676], 'temperature': 0.0, 'avg_logprob': -0.15665202464872194, 'compression_ratio': 1.7587548638132295, 'no_speech_prob': 0.029949907213449478}, {'id': 42, 'seek': 23386, 'start': 240.10000000000002, 'end': 245.9, 'text': ' memory machine you use MPI of course, it is possible to write your MPI code and run it', 'tokens': [50676, 4675, 3479, 291, 764, 14146, 40, 295, 1164, 11, 309, 307, 1944, 281, 2464, 428, 14146, 40, 3089, 293, 1190, 309, 50966], 'temperature': 0.0, 'avg_logprob': -0.15665202464872194, 'compression_ratio': 1.7587548638132295, 'no_speech_prob': 0.029949907213449478}, {'id': 43, 'seek': 23386, 'start': 245.9, 'end': 252.54000000000002, 'text': ' on a multi core architecture also right ok. If you have not seen an open MP code this', 'tokens': [50966, 322, 257, 4825, 4965, 9482, 611, 558, 3133, 13, 759, 291, 362, 406, 1612, 364, 1269, 14146, 3089, 341, 51298], 'temperature': 0.0, 'avg_logprob': -0.15665202464872194, 'compression_ratio': 1.7587548638132295, 'no_speech_prob': 0.029949907213449478}, {'id': 44, 'seek': 23386, 'start': 252.54000000000002, 'end': 257.42, 'text': ' is how an open MP code would look like it essentially has what are called pragmas which', 'tokens': [51298, 307, 577, 364, 1269, 14146, 3089, 576, 574, 411, 309, 4476, 575, 437, 366, 1219, 33394, 3799, 597, 51542], 'temperature': 0.0, 'avg_logprob': -0.15665202464872194, 'compression_ratio': 1.7587548638132295, 'no_speech_prob': 0.029949907213449478}, {'id': 45, 'seek': 23386, 'start': 257.42, 'end': 263.22, 'text': ' are compiler directives right and these compiler directives are being looked at by the compiler', 'tokens': [51542, 366, 31958, 2047, 1539, 558, 293, 613, 31958, 2047, 1539, 366, 885, 2956, 412, 538, 264, 31958, 51832], 'temperature': 0.0, 'avg_logprob': -0.15665202464872194, 'compression_ratio': 1.7587548638132295, 'no_speech_prob': 0.029949907213449478}, {'id': 46, 'seek': 26322, 'start': 263.34000000000003, 'end': 269.38000000000005, 'text': ' the compiler understands that this piece of code is actually can be executed in parallel', 'tokens': [50370, 264, 31958, 15146, 300, 341, 2522, 295, 3089, 307, 767, 393, 312, 17577, 294, 8952, 50672], 'temperature': 0.0, 'avg_logprob': -0.20080516145036026, 'compression_ratio': 1.8994708994708995, 'no_speech_prob': 0.0038188002072274685}, {'id': 47, 'seek': 26322, 'start': 269.38000000000005, 'end': 276.1, 'text': ' right and that parallel code essentially says that you have to execute this for n elements', 'tokens': [50672, 558, 293, 300, 8952, 3089, 4476, 1619, 300, 291, 362, 281, 14483, 341, 337, 297, 4959, 51008], 'temperature': 0.0, 'avg_logprob': -0.20080516145036026, 'compression_ratio': 1.8994708994708995, 'no_speech_prob': 0.0038188002072274685}, {'id': 48, 'seek': 26322, 'start': 276.1, 'end': 281.3, 'text': ' and let us say that there are four processors or four processes or in this particular case', 'tokens': [51008, 293, 718, 505, 584, 300, 456, 366, 1451, 27751, 420, 1451, 7555, 420, 294, 341, 1729, 1389, 51268], 'temperature': 0.0, 'avg_logprob': -0.20080516145036026, 'compression_ratio': 1.8994708994708995, 'no_speech_prob': 0.0038188002072274685}, {'id': 49, 'seek': 26322, 'start': 281.3, 'end': 286.78000000000003, 'text': ' four threads that are there then each one of the threads can actually execute one fourth', 'tokens': [51268, 1451, 19314, 300, 366, 456, 550, 1184, 472, 295, 264, 19314, 393, 767, 14483, 472, 6409, 51542], 'temperature': 0.0, 'avg_logprob': -0.20080516145036026, 'compression_ratio': 1.8994708994708995, 'no_speech_prob': 0.0038188002072274685}, {'id': 50, 'seek': 28678, 'start': 286.78, 'end': 293.02, 'text': ' of the task right in parallel. So, execution would proceed something like this roughly', 'tokens': [50364, 295, 264, 5633, 558, 294, 8952, 13, 407, 11, 15058, 576, 8991, 746, 411, 341, 9810, 50676], 'temperature': 0.0, 'avg_logprob': -0.16007858815819326, 'compression_ratio': 1.8155737704918034, 'no_speech_prob': 0.020364869385957718}, {'id': 51, 'seek': 28678, 'start': 293.02, 'end': 298.78, 'text': ' right the first thread will do for the first one fourth of the data element the second', 'tokens': [50676, 558, 264, 700, 7207, 486, 360, 337, 264, 700, 472, 6409, 295, 264, 1412, 4478, 264, 1150, 50964], 'temperature': 0.0, 'avg_logprob': -0.16007858815819326, 'compression_ratio': 1.8155737704918034, 'no_speech_prob': 0.020364869385957718}, {'id': 52, 'seek': 28678, 'start': 298.78, 'end': 303.94, 'text': ' thread would do for the second one fourth and so on and all of them would execute these', 'tokens': [50964, 7207, 576, 360, 337, 264, 1150, 472, 6409, 293, 370, 322, 293, 439, 295, 552, 576, 14483, 613, 51222], 'temperature': 0.0, 'avg_logprob': -0.16007858815819326, 'compression_ratio': 1.8155737704918034, 'no_speech_prob': 0.020364869385957718}, {'id': 53, 'seek': 28678, 'start': 303.94, 'end': 309.61999999999995, 'text': ' statements in parallel, but they can kind of execute them at their own speed it is not', 'tokens': [51222, 12363, 294, 8952, 11, 457, 436, 393, 733, 295, 14483, 552, 412, 641, 1065, 3073, 309, 307, 406, 51506], 'temperature': 0.0, 'avg_logprob': -0.16007858815819326, 'compression_ratio': 1.8155737704918034, 'no_speech_prob': 0.020364869385957718}, {'id': 54, 'seek': 28678, 'start': 309.61999999999995, 'end': 314.94, 'text': ' like a SIMD machine where everybody is executing the same instruction at a given point in time', 'tokens': [51506, 411, 257, 24738, 35, 3479, 689, 2201, 307, 32368, 264, 912, 10951, 412, 257, 2212, 935, 294, 565, 51772], 'temperature': 0.0, 'avg_logprob': -0.16007858815819326, 'compression_ratio': 1.8155737704918034, 'no_speech_prob': 0.020364869385957718}, {'id': 55, 'seek': 31494, 'start': 314.94, 'end': 321.78, 'text': ' right this code or this processor has to execute this sequence of instructions right', 'tokens': [50364, 558, 341, 3089, 420, 341, 15321, 575, 281, 14483, 341, 8310, 295, 9415, 558, 50706], 'temperature': 0.0, 'avg_logprob': -0.16259960744572782, 'compression_ratio': 2.0, 'no_speech_prob': 0.0038501655217260122}, {'id': 56, 'seek': 31494, 'start': 321.78, 'end': 327.3, 'text': ' for n by four elements it will execute in its own way as fetch decode execute and so', 'tokens': [50706, 337, 297, 538, 1451, 4959, 309, 486, 14483, 294, 1080, 1065, 636, 382, 23673, 979, 1429, 14483, 293, 370, 50982], 'temperature': 0.0, 'avg_logprob': -0.16259960744572782, 'compression_ratio': 2.0, 'no_speech_prob': 0.0038501655217260122}, {'id': 57, 'seek': 31494, 'start': 327.3, 'end': 330.46, 'text': ' on. Whereas, some other processor would execute', 'tokens': [50982, 322, 13, 13813, 11, 512, 661, 15321, 576, 14483, 51140], 'temperature': 0.0, 'avg_logprob': -0.16259960744572782, 'compression_ratio': 2.0, 'no_speech_prob': 0.0038501655217260122}, {'id': 58, 'seek': 31494, 'start': 330.46, 'end': 335.3, 'text': ' the next one fourth or the next one fourth and so on and they will all do instruction', 'tokens': [51140, 264, 958, 472, 6409, 420, 264, 958, 472, 6409, 293, 370, 322, 293, 436, 486, 439, 360, 10951, 51382], 'temperature': 0.0, 'avg_logprob': -0.16259960744572782, 'compression_ratio': 2.0, 'no_speech_prob': 0.0038501655217260122}, {'id': 59, 'seek': 31494, 'start': 335.3, 'end': 341.74, 'text': ' fetch decode and execute individually that means that they fetch decode instruction separately', 'tokens': [51382, 23673, 979, 1429, 293, 14483, 16652, 300, 1355, 300, 436, 23673, 979, 1429, 10951, 14759, 51704], 'temperature': 0.0, 'avg_logprob': -0.16259960744572782, 'compression_ratio': 2.0, 'no_speech_prob': 0.0038501655217260122}, {'id': 60, 'seek': 34174, 'start': 341.94, 'end': 347.42, 'text': ' and because of that they can actually operate in different speeds that is possible you should', 'tokens': [50374, 293, 570, 295, 300, 436, 393, 767, 9651, 294, 819, 16411, 300, 307, 1944, 291, 820, 50648], 'temperature': 0.0, 'avg_logprob': -0.1536652104238446, 'compression_ratio': 1.7113821138211383, 'no_speech_prob': 0.056168168783187866}, {'id': 61, 'seek': 34174, 'start': 347.42, 'end': 353.1, 'text': ' not be thinking that this is also same as SIMD or SIMD architecture here they are actually', 'tokens': [50648, 406, 312, 1953, 300, 341, 307, 611, 912, 382, 24738, 35, 420, 24738, 35, 9482, 510, 436, 366, 767, 50932], 'temperature': 0.0, 'avg_logprob': -0.1536652104238446, 'compression_ratio': 1.7113821138211383, 'no_speech_prob': 0.056168168783187866}, {'id': 62, 'seek': 34174, 'start': 353.1, 'end': 359.46000000000004, 'text': ' executing individual pieces of code by themselves right.', 'tokens': [50932, 32368, 2609, 3755, 295, 3089, 538, 2969, 558, 13, 51250], 'temperature': 0.0, 'avg_logprob': -0.1536652104238446, 'compression_ratio': 1.7113821138211383, 'no_speech_prob': 0.056168168783187866}, {'id': 63, 'seek': 34174, 'start': 359.46000000000004, 'end': 364.7, 'text': ' But here one thing that we can notice is that in this particular case as I mentioned earlier', 'tokens': [51250, 583, 510, 472, 551, 300, 321, 393, 3449, 307, 300, 294, 341, 1729, 1389, 382, 286, 2835, 3071, 51512], 'temperature': 0.0, 'avg_logprob': -0.1536652104238446, 'compression_ratio': 1.7113821138211383, 'no_speech_prob': 0.056168168783187866}, {'id': 64, 'seek': 34174, 'start': 364.7, 'end': 369.82, 'text': ' the programmer gives certain directives to the compiler saying that this piece of code', 'tokens': [51512, 264, 32116, 2709, 1629, 2047, 1539, 281, 264, 31958, 1566, 300, 341, 2522, 295, 3089, 51768], 'temperature': 0.0, 'avg_logprob': -0.1536652104238446, 'compression_ratio': 1.7113821138211383, 'no_speech_prob': 0.056168168783187866}, {'id': 65, 'seek': 36982, 'start': 369.86, 'end': 376.14, 'text': ' can be executed in parallel and this for loop can be split across four threads or eight', 'tokens': [50366, 393, 312, 17577, 294, 8952, 293, 341, 337, 6367, 393, 312, 7472, 2108, 1451, 19314, 420, 3180, 50680], 'temperature': 0.0, 'avg_logprob': -0.19479048252105713, 'compression_ratio': 2.00561797752809, 'no_speech_prob': 0.007077950052917004}, {'id': 66, 'seek': 36982, 'start': 376.14, 'end': 381.5, 'text': ' threads or whatever number of threads and the task can be executed in parallel why does', 'tokens': [50680, 19314, 420, 2035, 1230, 295, 19314, 293, 264, 5633, 393, 312, 17577, 294, 8952, 983, 775, 50948], 'temperature': 0.0, 'avg_logprob': -0.19479048252105713, 'compression_ratio': 2.00561797752809, 'no_speech_prob': 0.007077950052917004}, {'id': 67, 'seek': 36982, 'start': 381.5, 'end': 388.5, 'text': ' he say that because right these are independent tasks right when we talk about instruction', 'tokens': [50948, 415, 584, 300, 570, 558, 613, 366, 6695, 9608, 558, 562, 321, 751, 466, 10951, 51298], 'temperature': 0.0, 'avg_logprob': -0.19479048252105713, 'compression_ratio': 2.00561797752809, 'no_speech_prob': 0.007077950052917004}, {'id': 68, 'seek': 36982, 'start': 390.74, 'end': 395.1, 'text': ' level parallelism we talked about independent instruction when you talk about thread level', 'tokens': [51410, 1496, 8952, 1434, 321, 2825, 466, 6695, 10951, 562, 291, 751, 466, 7207, 1496, 51628], 'temperature': 0.0, 'avg_logprob': -0.19479048252105713, 'compression_ratio': 2.00561797752809, 'no_speech_prob': 0.007077950052917004}, {'id': 69, 'seek': 39510, 'start': 395.1, 'end': 399.98, 'text': ' or task level parallelism you have to think in terms of these tasks being independent', 'tokens': [50364, 420, 5633, 1496, 8952, 1434, 291, 362, 281, 519, 294, 2115, 295, 613, 9608, 885, 6695, 50608], 'temperature': 0.0, 'avg_logprob': -0.13000388940175375, 'compression_ratio': 1.865546218487395, 'no_speech_prob': 0.0017379331402480602}, {'id': 70, 'seek': 39510, 'start': 399.98, 'end': 405.74, 'text': ' of each other that means that performing the operation ai is equal to ai plus s for the', 'tokens': [50608, 295, 1184, 661, 300, 1355, 300, 10205, 264, 6916, 9783, 307, 2681, 281, 9783, 1804, 262, 337, 264, 50896], 'temperature': 0.0, 'avg_logprob': -0.13000388940175375, 'compression_ratio': 1.865546218487395, 'no_speech_prob': 0.0017379331402480602}, {'id': 71, 'seek': 39510, 'start': 405.74, 'end': 411.90000000000003, 'text': ' first one fourth of the element is definitely independent from performing for the next one', 'tokens': [50896, 700, 472, 6409, 295, 264, 4478, 307, 2138, 6695, 490, 10205, 337, 264, 958, 472, 51204], 'temperature': 0.0, 'avg_logprob': -0.13000388940175375, 'compression_ratio': 1.865546218487395, 'no_speech_prob': 0.0017379331402480602}, {'id': 72, 'seek': 39510, 'start': 411.90000000000003, 'end': 417.86, 'text': ' fourth and for the next one fourth and so on. Therefore, they can be done in parallel right', 'tokens': [51204, 6409, 293, 337, 264, 958, 472, 6409, 293, 370, 322, 13, 7504, 11, 436, 393, 312, 1096, 294, 8952, 558, 51502], 'temperature': 0.0, 'avg_logprob': -0.13000388940175375, 'compression_ratio': 1.865546218487395, 'no_speech_prob': 0.0017379331402480602}, {'id': 73, 'seek': 39510, 'start': 417.86, 'end': 424.86, 'text': ' and the programmer has made the compiler job easy by specifying that these are parallel', 'tokens': [51502, 293, 264, 32116, 575, 1027, 264, 31958, 1691, 1858, 538, 1608, 5489, 300, 613, 366, 8952, 51852], 'temperature': 0.0, 'avg_logprob': -0.13000388940175375, 'compression_ratio': 1.865546218487395, 'no_speech_prob': 0.0017379331402480602}, {'id': 74, 'seek': 42510, 'start': 425.26000000000005, 'end': 430.22, 'text': ' that means that compiler need not have to analyze whether they are parallel or not correct', 'tokens': [50372, 300, 1355, 300, 31958, 643, 406, 362, 281, 12477, 1968, 436, 366, 8952, 420, 406, 3006, 50620], 'temperature': 0.0, 'avg_logprob': -0.18606111192211663, 'compression_ratio': 1.8200836820083681, 'no_speech_prob': 0.001183504587970674}, {'id': 75, 'seek': 42510, 'start': 430.22, 'end': 435.82000000000005, 'text': ' the compiler was told look this is parallel go ahead and parallelize it right.', 'tokens': [50620, 264, 31958, 390, 1907, 574, 341, 307, 8952, 352, 2286, 293, 8952, 1125, 309, 558, 13, 50900], 'temperature': 0.0, 'avg_logprob': -0.18606111192211663, 'compression_ratio': 1.8200836820083681, 'no_speech_prob': 0.001183504587970674}, {'id': 76, 'seek': 42510, 'start': 435.82000000000005, 'end': 441.90000000000003, 'text': ' So openMP allows you to specify allows the programmer to specify this therefore, that', 'tokens': [50900, 407, 1269, 12224, 4045, 291, 281, 16500, 4045, 264, 32116, 281, 16500, 341, 4412, 11, 300, 51204], 'temperature': 0.0, 'avg_logprob': -0.18606111192211663, 'compression_ratio': 1.8200836820083681, 'no_speech_prob': 0.001183504587970674}, {'id': 77, 'seek': 42510, 'start': 441.90000000000003, 'end': 446.66, 'text': ' the compiler does not have to do really do anything but supposing you are given this', 'tokens': [51204, 264, 31958, 775, 406, 362, 281, 360, 534, 360, 1340, 457, 1003, 6110, 291, 366, 2212, 341, 51442], 'temperature': 0.0, 'avg_logprob': -0.18606111192211663, 'compression_ratio': 1.8200836820083681, 'no_speech_prob': 0.001183504587970674}, {'id': 78, 'seek': 42510, 'start': 446.66, 'end': 453.66, 'text': ' piece of code as a sequential C code can you analyze this and find out that this is a parallel', 'tokens': [51442, 2522, 295, 3089, 382, 257, 42881, 383, 3089, 393, 291, 12477, 341, 293, 915, 484, 300, 341, 307, 257, 8952, 51792], 'temperature': 0.0, 'avg_logprob': -0.18606111192211663, 'compression_ratio': 1.8200836820083681, 'no_speech_prob': 0.001183504587970674}, {'id': 79, 'seek': 45366, 'start': 454.06, 'end': 460.42, 'text': ' task and I can execute this in parallel or I can put these directives like this so that', 'tokens': [50384, 5633, 293, 286, 393, 14483, 341, 294, 8952, 420, 286, 393, 829, 613, 2047, 1539, 411, 341, 370, 300, 50702], 'temperature': 0.0, 'avg_logprob': -0.14892151297592535, 'compression_ratio': 1.77, 'no_speech_prob': 0.0020905339624732733}, {'id': 80, 'seek': 45366, 'start': 460.42, 'end': 466.78000000000003, 'text': ' my openMP program will execute them in parallel that is the job of a compiler right if a sequential', 'tokens': [50702, 452, 1269, 12224, 1461, 486, 14483, 552, 294, 8952, 300, 307, 264, 1691, 295, 257, 31958, 558, 498, 257, 42881, 51020], 'temperature': 0.0, 'avg_logprob': -0.14892151297592535, 'compression_ratio': 1.77, 'no_speech_prob': 0.0020905339624732733}, {'id': 81, 'seek': 45366, 'start': 466.78000000000003, 'end': 472.90000000000003, 'text': ' code was given only this part of the code was given can we analyze this and then find', 'tokens': [51020, 3089, 390, 2212, 787, 341, 644, 295, 264, 3089, 390, 2212, 393, 321, 12477, 341, 293, 550, 915, 51326], 'temperature': 0.0, 'avg_logprob': -0.14892151297592535, 'compression_ratio': 1.77, 'no_speech_prob': 0.0020905339624732733}, {'id': 82, 'seek': 45366, 'start': 472.90000000000003, 'end': 478.82000000000005, 'text': ' out that these are independent tasks and they can be executed in parallel right.', 'tokens': [51326, 484, 300, 613, 366, 6695, 9608, 293, 436, 393, 312, 17577, 294, 8952, 558, 13, 51622], 'temperature': 0.0, 'avg_logprob': -0.14892151297592535, 'compression_ratio': 1.77, 'no_speech_prob': 0.0020905339624732733}, {'id': 83, 'seek': 47882, 'start': 478.86, 'end': 484.62, 'text': ' In general the task is a very hard task right taking completely sequential program and parallelizing', 'tokens': [50366, 682, 2674, 264, 5633, 307, 257, 588, 1152, 5633, 558, 1940, 2584, 42881, 1461, 293, 8952, 3319, 50654], 'temperature': 0.0, 'avg_logprob': -0.1576959490776062, 'compression_ratio': 1.7058823529411764, 'no_speech_prob': 0.03039616160094738}, {'id': 84, 'seek': 47882, 'start': 484.62, 'end': 491.3, 'text': ' this right we have only had limited success but certain part of the code can be analyzed', 'tokens': [50654, 341, 558, 321, 362, 787, 632, 5567, 2245, 457, 1629, 644, 295, 264, 3089, 393, 312, 28181, 50988], 'temperature': 0.0, 'avg_logprob': -0.1576959490776062, 'compression_ratio': 1.7058823529411764, 'no_speech_prob': 0.03039616160094738}, {'id': 85, 'seek': 47882, 'start': 491.3, 'end': 496.58, 'text': ' and definitely that can be parallelized right this is possibly an easier task to do this', 'tokens': [50988, 293, 2138, 300, 393, 312, 8952, 1602, 558, 341, 307, 6264, 364, 3571, 5633, 281, 360, 341, 51252], 'temperature': 0.0, 'avg_logprob': -0.1576959490776062, 'compression_ratio': 1.7058823529411764, 'no_speech_prob': 0.03039616160094738}, {'id': 86, 'seek': 47882, 'start': 496.58, 'end': 501.86, 'text': ' particular example okay. So in this talk what we are going to do is', 'tokens': [51252, 1729, 1365, 1392, 13, 407, 294, 341, 751, 437, 321, 366, 516, 281, 360, 307, 51516], 'temperature': 0.0, 'avg_logprob': -0.1576959490776062, 'compression_ratio': 1.7058823529411764, 'no_speech_prob': 0.03039616160094738}, {'id': 87, 'seek': 47882, 'start': 501.86, 'end': 507.38, 'text': ' that given a piece of code which is like this how do we generate code for vector machine', 'tokens': [51516, 300, 2212, 257, 2522, 295, 3089, 597, 307, 411, 341, 577, 360, 321, 8460, 3089, 337, 8062, 3479, 51792], 'temperature': 0.0, 'avg_logprob': -0.1576959490776062, 'compression_ratio': 1.7058823529411764, 'no_speech_prob': 0.03039616160094738}, {'id': 88, 'seek': 50738, 'start': 507.46, 'end': 512.86, 'text': ' how do we generate code for let us say a parallel machine or how do we generate right how do', 'tokens': [50368, 577, 360, 321, 8460, 3089, 337, 718, 505, 584, 257, 8952, 3479, 420, 577, 360, 321, 8460, 558, 577, 360, 50638], 'temperature': 0.0, 'avg_logprob': -0.13347060009113793, 'compression_ratio': 2.236180904522613, 'no_speech_prob': 0.00464025279507041}, {'id': 89, 'seek': 50738, 'start': 512.86, 'end': 518.38, 'text': ' we identify whether locality is being exploited or not how do we modify this loop so that', 'tokens': [50638, 321, 5876, 1968, 1628, 1860, 307, 885, 40918, 420, 406, 577, 360, 321, 16927, 341, 6367, 370, 300, 50914], 'temperature': 0.0, 'avg_logprob': -0.13347060009113793, 'compression_ratio': 2.236180904522613, 'no_speech_prob': 0.00464025279507041}, {'id': 90, 'seek': 50738, 'start': 518.38, 'end': 523.3, 'text': ' locality can be exploit that is essentially what we are going to focus on what is required', 'tokens': [50914, 1628, 1860, 393, 312, 25924, 300, 307, 4476, 437, 321, 366, 516, 281, 1879, 322, 437, 307, 4739, 51160], 'temperature': 0.0, 'avg_logprob': -0.13347060009113793, 'compression_ratio': 2.236180904522613, 'no_speech_prob': 0.00464025279507041}, {'id': 91, 'seek': 50738, 'start': 523.3, 'end': 528.38, 'text': ' to understand this how do we change those things or how do we generate code for those', 'tokens': [51160, 281, 1223, 341, 577, 360, 321, 1319, 729, 721, 420, 577, 360, 321, 8460, 3089, 337, 729, 51414], 'temperature': 0.0, 'avg_logprob': -0.13347060009113793, 'compression_ratio': 2.236180904522613, 'no_speech_prob': 0.00464025279507041}, {'id': 92, 'seek': 50738, 'start': 528.38, 'end': 532.62, 'text': ' things that is really what we are going to focus on and because we are going to focus', 'tokens': [51414, 721, 300, 307, 534, 437, 321, 366, 516, 281, 1879, 322, 293, 570, 321, 366, 516, 281, 1879, 51626], 'temperature': 0.0, 'avg_logprob': -0.13347060009113793, 'compression_ratio': 2.236180904522613, 'no_speech_prob': 0.00464025279507041}, {'id': 93, 'seek': 53262, 'start': 532.62, 'end': 538.34, 'text': ' on that primarily we are going to focus on array variables and loops right because that', 'tokens': [50364, 322, 300, 10029, 321, 366, 516, 281, 1879, 322, 10225, 9102, 293, 16121, 558, 570, 300, 50650], 'temperature': 0.0, 'avg_logprob': -0.145767120214609, 'compression_ratio': 1.8903508771929824, 'no_speech_prob': 0.010758461430668831}, {'id': 94, 'seek': 53262, 'start': 538.34, 'end': 542.5, 'text': ' is where most of the time is spent in the code we have a sequence of code like a is', 'tokens': [50650, 307, 689, 881, 295, 264, 565, 307, 4418, 294, 264, 3089, 321, 362, 257, 8310, 295, 3089, 411, 257, 307, 50858], 'temperature': 0.0, 'avg_logprob': -0.145767120214609, 'compression_ratio': 1.8903508771929824, 'no_speech_prob': 0.010758461430668831}, {'id': 95, 'seek': 53262, 'start': 542.5, 'end': 548.66, 'text': ' equal to b plus c something something right and not inside a loop then very little time', 'tokens': [50858, 2681, 281, 272, 1804, 269, 746, 746, 558, 293, 406, 1854, 257, 6367, 550, 588, 707, 565, 51166], 'temperature': 0.0, 'avg_logprob': -0.145767120214609, 'compression_ratio': 1.8903508771929824, 'no_speech_prob': 0.010758461430668831}, {'id': 96, 'seek': 53262, 'start': 548.66, 'end': 553.74, 'text': ' is going to be spent on that part of the code and that may not be really exciting okay.', 'tokens': [51166, 307, 516, 281, 312, 4418, 322, 300, 644, 295, 264, 3089, 293, 300, 815, 406, 312, 534, 4670, 1392, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.145767120214609, 'compression_ratio': 1.8903508771929824, 'no_speech_prob': 0.010758461430668831}, {'id': 97, 'seek': 53262, 'start': 553.74, 'end': 558.66, 'text': ' So our focus is going to be on arrays and what we are going to talk very briefly is', 'tokens': [51420, 407, 527, 1879, 307, 516, 281, 312, 322, 41011, 293, 437, 321, 366, 516, 281, 751, 588, 10515, 307, 51666], 'temperature': 0.0, 'avg_logprob': -0.145767120214609, 'compression_ratio': 1.8903508771929824, 'no_speech_prob': 0.010758461430668831}, {'id': 98, 'seek': 55866, 'start': 558.66, 'end': 565.2199999999999, 'text': ' about array dependence analysis how to identify what kind of dependences exist in program', 'tokens': [50364, 466, 10225, 31704, 5215, 577, 281, 5876, 437, 733, 295, 5672, 2667, 2514, 294, 1461, 50692], 'temperature': 0.0, 'avg_logprob': -0.14275161743164064, 'compression_ratio': 1.9502762430939227, 'no_speech_prob': 0.016635913401842117}, {'id': 99, 'seek': 55866, 'start': 565.2199999999999, 'end': 572.26, 'text': ' okay and how do we figure out what part of the program are independent and can be executed', 'tokens': [50692, 1392, 293, 577, 360, 321, 2573, 484, 437, 644, 295, 264, 1461, 366, 6695, 293, 393, 312, 17577, 51044], 'temperature': 0.0, 'avg_logprob': -0.14275161743164064, 'compression_ratio': 1.9502762430939227, 'no_speech_prob': 0.016635913401842117}, {'id': 100, 'seek': 55866, 'start': 572.26, 'end': 578.06, 'text': ' in parallel okay and then what kind of loop transformations can be done and when these', 'tokens': [51044, 294, 8952, 1392, 293, 550, 437, 733, 295, 6367, 34852, 393, 312, 1096, 293, 562, 613, 51334], 'temperature': 0.0, 'avg_logprob': -0.14275161743164064, 'compression_ratio': 1.9502762430939227, 'no_speech_prob': 0.016635913401842117}, {'id': 101, 'seek': 55866, 'start': 578.06, 'end': 582.74, 'text': ' loop transformations are legal to be done so that you can transform the loop from for', 'tokens': [51334, 6367, 34852, 366, 5089, 281, 312, 1096, 370, 300, 291, 393, 4088, 264, 6367, 490, 337, 51568], 'temperature': 0.0, 'avg_logprob': -0.14275161743164064, 'compression_ratio': 1.9502762430939227, 'no_speech_prob': 0.016635913401842117}, {'id': 102, 'seek': 58274, 'start': 583.74, 'end': 589.26, 'text': ' example we saw in the case of caches that having for j for i loop is a bad thing you', 'tokens': [50414, 1365, 321, 1866, 294, 264, 1389, 295, 269, 13272, 300, 1419, 337, 361, 337, 741, 6367, 307, 257, 1578, 551, 291, 50690], 'temperature': 0.0, 'avg_logprob': -0.1633610586518223, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.12325642257928848}, {'id': 103, 'seek': 58274, 'start': 589.26, 'end': 594.9, 'text': ' want to change it to for i for j right that is that transformation is called loop interchange', 'tokens': [50690, 528, 281, 1319, 309, 281, 337, 741, 337, 361, 558, 300, 307, 300, 9887, 307, 1219, 6367, 30358, 50972], 'temperature': 0.0, 'avg_logprob': -0.1633610586518223, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.12325642257928848}, {'id': 104, 'seek': 58274, 'start': 594.9, 'end': 600.22, 'text': ' when can we do loop interchange transform is it legal to do that right those are things', 'tokens': [50972, 562, 393, 321, 360, 6367, 30358, 4088, 307, 309, 5089, 281, 360, 300, 558, 729, 366, 721, 51238], 'temperature': 0.0, 'avg_logprob': -0.1633610586518223, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.12325642257928848}, {'id': 105, 'seek': 58274, 'start': 600.22, 'end': 605.5, 'text': ' that we are going to study right of course all of this is going to be used for parallelizing', 'tokens': [51238, 300, 321, 366, 516, 281, 2979, 558, 295, 1164, 439, 295, 341, 307, 516, 281, 312, 1143, 337, 8952, 3319, 51502], 'temperature': 0.0, 'avg_logprob': -0.1633610586518223, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.12325642257928848}, {'id': 106, 'seek': 58274, 'start': 605.5, 'end': 611.02, 'text': ' and vectorizing the code okay. Let us formally define what is data dependence', 'tokens': [51502, 293, 8062, 3319, 264, 3089, 1392, 13, 961, 505, 25983, 6964, 437, 307, 1412, 31704, 51778], 'temperature': 0.0, 'avg_logprob': -0.1633610586518223, 'compression_ratio': 1.8755364806866952, 'no_speech_prob': 0.12325642257928848}, {'id': 107, 'seek': 61102, 'start': 611.22, 'end': 616.22, 'text': ' since you are going to be talking about array variables and when I say array variables what', 'tokens': [50374, 1670, 291, 366, 516, 281, 312, 1417, 466, 10225, 9102, 293, 562, 286, 584, 10225, 9102, 437, 50624], 'temperature': 0.0, 'avg_logprob': -0.17155449564863995, 'compression_ratio': 1.8645833333333333, 'no_speech_prob': 0.03572368994355202}, {'id': 108, 'seek': 61102, 'start': 616.22, 'end': 623.14, 'text': ' do I mean one array can have several elements and you are going to talk about dependences', 'tokens': [50624, 360, 286, 914, 472, 10225, 393, 362, 2940, 4959, 293, 291, 366, 516, 281, 751, 466, 5672, 2667, 50970], 'temperature': 0.0, 'avg_logprob': -0.17155449564863995, 'compression_ratio': 1.8645833333333333, 'no_speech_prob': 0.03572368994355202}, {'id': 109, 'seek': 61102, 'start': 623.14, 'end': 630.14, 'text': ' okay so we say that there is a dependence from statement s 1 to statement s 2 if both', 'tokens': [50970, 1392, 370, 321, 584, 300, 456, 307, 257, 31704, 490, 5629, 262, 502, 281, 5629, 262, 568, 498, 1293, 51320], 'temperature': 0.0, 'avg_logprob': -0.17155449564863995, 'compression_ratio': 1.8645833333333333, 'no_speech_prob': 0.03572368994355202}, {'id': 110, 'seek': 61102, 'start': 630.74, 'end': 636.02, 'text': ' s 1 and s 2 access the same memory location same array location both of them are accessing', 'tokens': [51350, 262, 502, 293, 262, 568, 2105, 264, 912, 4675, 4914, 912, 10225, 4914, 1293, 295, 552, 366, 26440, 51614], 'temperature': 0.0, 'avg_logprob': -0.17155449564863995, 'compression_ratio': 1.8645833333333333, 'no_speech_prob': 0.03572368994355202}, {'id': 111, 'seek': 63602, 'start': 636.02, 'end': 643.02, 'text': ' a of i or both of them are accessing b of i j right that particular location right and', 'tokens': [50364, 257, 295, 741, 420, 1293, 295, 552, 366, 26440, 272, 295, 741, 361, 558, 300, 1729, 4914, 558, 293, 50714], 'temperature': 0.0, 'avg_logprob': -0.14652079885656183, 'compression_ratio': 1.8316326530612246, 'no_speech_prob': 0.007112583145499229}, {'id': 112, 'seek': 63602, 'start': 644.22, 'end': 650.14, 'text': ' if there is a feasible runtime execution path from s 1 to s 2 that is fine okay and one', 'tokens': [50774, 498, 456, 307, 257, 26648, 34474, 15058, 3100, 490, 262, 502, 281, 262, 568, 300, 307, 2489, 1392, 293, 472, 51070], 'temperature': 0.0, 'avg_logprob': -0.14652079885656183, 'compression_ratio': 1.8316326530612246, 'no_speech_prob': 0.007112583145499229}, {'id': 113, 'seek': 63602, 'start': 650.14, 'end': 655.66, 'text': ' of these operations is a write and the other one can be either a write or a read this is', 'tokens': [51070, 295, 613, 7705, 307, 257, 2464, 293, 264, 661, 472, 393, 312, 2139, 257, 2464, 420, 257, 1401, 341, 307, 51346], 'temperature': 0.0, 'avg_logprob': -0.14652079885656183, 'compression_ratio': 1.8316326530612246, 'no_speech_prob': 0.007112583145499229}, {'id': 114, 'seek': 63602, 'start': 655.66, 'end': 661.14, 'text': ' when we say that there is a dependence right we are not interested in a read to read dependence', 'tokens': [51346, 562, 321, 584, 300, 456, 307, 257, 31704, 558, 321, 366, 406, 3102, 294, 257, 1401, 281, 1401, 31704, 51620], 'temperature': 0.0, 'avg_logprob': -0.14652079885656183, 'compression_ratio': 1.8316326530612246, 'no_speech_prob': 0.007112583145499229}, {'id': 115, 'seek': 66114, 'start': 661.14, 'end': 665.98, 'text': ' we are always interested in the read to write write to write or write to read right those', 'tokens': [50364, 321, 366, 1009, 3102, 294, 264, 1401, 281, 2464, 2464, 281, 2464, 420, 2464, 281, 1401, 558, 729, 50606], 'temperature': 0.0, 'avg_logprob': -0.20629695854564706, 'compression_ratio': 2.154589371980676, 'no_speech_prob': 0.003904697485268116}, {'id': 116, 'seek': 66114, 'start': 665.98, 'end': 670.66, 'text': ' are the dependences that we talk right. Now let us look at these dependences earlier', 'tokens': [50606, 366, 264, 5672, 2667, 300, 321, 751, 558, 13, 823, 718, 505, 574, 412, 613, 5672, 2667, 3071, 50840], 'temperature': 0.0, 'avg_logprob': -0.20629695854564706, 'compression_ratio': 2.154589371980676, 'no_speech_prob': 0.003904697485268116}, {'id': 117, 'seek': 66114, 'start': 670.66, 'end': 674.9, 'text': ' we looked at the dependences in the form of instruction now let us look at it in the form', 'tokens': [50840, 321, 2956, 412, 264, 5672, 2667, 294, 264, 1254, 295, 10951, 586, 718, 505, 574, 412, 309, 294, 264, 1254, 51052], 'temperature': 0.0, 'avg_logprob': -0.20629695854564706, 'compression_ratio': 2.154589371980676, 'no_speech_prob': 0.003904697485268116}, {'id': 118, 'seek': 66114, 'start': 674.9, 'end': 681.9, 'text': ' of statements right and then talk about dependences between these statements right look at the', 'tokens': [51052, 295, 12363, 558, 293, 550, 751, 466, 5672, 2667, 1296, 613, 12363, 558, 574, 412, 264, 51402], 'temperature': 0.0, 'avg_logprob': -0.20629695854564706, 'compression_ratio': 2.154589371980676, 'no_speech_prob': 0.003904697485268116}, {'id': 119, 'seek': 66114, 'start': 682.46, 'end': 689.46, 'text': ' code on the left hand side right now can you see any raw dependence here right so this', 'tokens': [51430, 3089, 322, 264, 1411, 1011, 1252, 558, 586, 393, 291, 536, 604, 8936, 31704, 510, 558, 370, 341, 51780], 'temperature': 0.0, 'avg_logprob': -0.20629695854564706, 'compression_ratio': 2.154589371980676, 'no_speech_prob': 0.003904697485268116}, {'id': 120, 'seek': 69114, 'start': 691.54, 'end': 698.54, 'text': ' is read after write true dependence there is a dependence from s 1 to s 2 on which variable', 'tokens': [50384, 307, 1401, 934, 2464, 2074, 31704, 456, 307, 257, 31704, 490, 262, 502, 281, 262, 568, 322, 597, 7006, 50734], 'temperature': 0.0, 'avg_logprob': -0.22642933112987573, 'compression_ratio': 1.8680555555555556, 'no_speech_prob': 0.0032690209336578846}, {'id': 121, 'seek': 69114, 'start': 701.5, 'end': 708.5, 'text': ' x i j x i j is being written here and the same value is being read here any other dependence', 'tokens': [50882, 2031, 741, 361, 2031, 741, 361, 307, 885, 3720, 510, 293, 264, 912, 2158, 307, 885, 1401, 510, 604, 661, 31704, 51232], 'temperature': 0.0, 'avg_logprob': -0.22642933112987573, 'compression_ratio': 1.8680555555555556, 'no_speech_prob': 0.0032690209336578846}, {'id': 122, 'seek': 69114, 'start': 710.3, 'end': 717.3, 'text': ' that you see there is an output dependence x i j to x i j and therefore, there is an', 'tokens': [51322, 300, 291, 536, 456, 307, 364, 5598, 31704, 2031, 741, 361, 281, 2031, 741, 361, 293, 4412, 11, 456, 307, 364, 51672], 'temperature': 0.0, 'avg_logprob': -0.22642933112987573, 'compression_ratio': 1.8680555555555556, 'no_speech_prob': 0.0032690209336578846}, {'id': 123, 'seek': 71730, 'start': 718.14, 'end': 725.14, 'text': ' anti dependence okay anything else that you see any other dependences okay let us see', 'tokens': [50406, 6061, 31704, 1392, 1340, 1646, 300, 291, 536, 604, 661, 5672, 2667, 1392, 718, 505, 536, 50756], 'temperature': 0.0, 'avg_logprob': -0.2273093106453879, 'compression_ratio': 1.8794326241134751, 'no_speech_prob': 0.004254607949405909}, {'id': 124, 'seek': 71730, 'start': 727.78, 'end': 734.78, 'text': ' what I see right this is fine flow dependence or true dependence anti dependence that is', 'tokens': [50888, 437, 286, 536, 558, 341, 307, 2489, 3095, 31704, 420, 2074, 31704, 6061, 31704, 300, 307, 51238], 'temperature': 0.0, 'avg_logprob': -0.2273093106453879, 'compression_ratio': 1.8794326241134751, 'no_speech_prob': 0.004254607949405909}, {'id': 125, 'seek': 71730, 'start': 736.8199999999999, 'end': 743.8199999999999, 'text': ' fine output dependence okay right we are only seeing some of the simple dependences I will', 'tokens': [51340, 2489, 5598, 31704, 1392, 558, 321, 366, 787, 2577, 512, 295, 264, 2199, 5672, 2667, 286, 486, 51690], 'temperature': 0.0, 'avg_logprob': -0.2273093106453879, 'compression_ratio': 1.8794326241134751, 'no_speech_prob': 0.004254607949405909}, {'id': 126, 'seek': 74382, 'start': 744.38, 'end': 751.38, 'text': ' ask you the question what about from this x i comma j plus 1 to this x i comma j is', 'tokens': [50392, 1029, 291, 264, 1168, 437, 466, 490, 341, 2031, 741, 22117, 361, 1804, 502, 281, 341, 2031, 741, 22117, 361, 307, 50742], 'temperature': 0.0, 'avg_logprob': -0.16540748051234655, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.002248371485620737}, {'id': 127, 'seek': 74382, 'start': 755.1400000000001, 'end': 762.1400000000001, 'text': ' there a dependence anti dependence this is a read that is a write okay for example, let', 'tokens': [50930, 456, 257, 31704, 6061, 31704, 341, 307, 257, 1401, 300, 307, 257, 2464, 1392, 337, 1365, 11, 718, 51280], 'temperature': 0.0, 'avg_logprob': -0.16540748051234655, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.002248371485620737}, {'id': 128, 'seek': 74382, 'start': 763.0600000000001, 'end': 769.0600000000001, 'text': ' us take i is equal to 4 and j is equal to 5 so this is going to read the value i is', 'tokens': [51326, 505, 747, 741, 307, 2681, 281, 1017, 293, 361, 307, 2681, 281, 1025, 370, 341, 307, 516, 281, 1401, 264, 2158, 741, 307, 51626], 'temperature': 0.0, 'avg_logprob': -0.16540748051234655, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.002248371485620737}, {'id': 129, 'seek': 76906, 'start': 769.06, 'end': 776.06, 'text': ' equal to 4 j is equal to 5 we are going to read the value 5 comma 6 right after that', 'tokens': [50364, 2681, 281, 1017, 361, 307, 2681, 281, 1025, 321, 366, 516, 281, 1401, 264, 2158, 1025, 22117, 1386, 558, 934, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.16540915724160016, 'compression_ratio': 1.7687074829931972, 'no_speech_prob': 0.0011071660555899143}, {'id': 130, 'seek': 76906, 'start': 777.2199999999999, 'end': 784.2199999999999, 'text': ' you are going to execute the statement i is equal to 4 j is equal to 6 and this will also', 'tokens': [50772, 291, 366, 516, 281, 14483, 264, 5629, 741, 307, 2681, 281, 1017, 361, 307, 2681, 281, 1386, 293, 341, 486, 611, 51122], 'temperature': 0.0, 'avg_logprob': -0.16540915724160016, 'compression_ratio': 1.7687074829931972, 'no_speech_prob': 0.0011071660555899143}, {'id': 131, 'seek': 76906, 'start': 784.5799999999999, 'end': 791.5799999999999, 'text': ' be 4 comma 6 so is there an anti dependence from here to here what about from here to', 'tokens': [51140, 312, 1017, 22117, 1386, 370, 307, 456, 364, 6061, 31704, 490, 510, 281, 510, 437, 466, 490, 510, 281, 51490], 'temperature': 0.0, 'avg_logprob': -0.16540915724160016, 'compression_ratio': 1.7687074829931972, 'no_speech_prob': 0.0011071660555899143}, {'id': 132, 'seek': 79158, 'start': 791.58, 'end': 798.58, 'text': ' here from this y i j in statement s 2 to the statement y i comma j minus 1 just use', 'tokens': [50364, 510, 490, 341, 288, 741, 361, 294, 5629, 262, 568, 281, 264, 5629, 288, 741, 22117, 361, 3175, 502, 445, 764, 50714], 'temperature': 0.0, 'avg_logprob': -0.16052907446156378, 'compression_ratio': 1.4132231404958677, 'no_speech_prob': 0.000644360261503607}, {'id': 133, 'seek': 79158, 'start': 806.34, 'end': 813.34, 'text': ' some examples and then figure out right the value produced by y i j is going to be read', 'tokens': [51102, 512, 5110, 293, 550, 2573, 484, 558, 264, 2158, 7126, 538, 288, 741, 361, 307, 516, 281, 312, 1401, 51452], 'temperature': 0.0, 'avg_logprob': -0.16052907446156378, 'compression_ratio': 1.4132231404958677, 'no_speech_prob': 0.000644360261503607}, {'id': 134, 'seek': 81334, 'start': 814.34, 'end': 821.34, 'text': ' in the iteration y i comma j plus 1 right so there is a true dependence from s 2 to', 'tokens': [50414, 294, 264, 24784, 288, 741, 22117, 361, 1804, 502, 558, 370, 456, 307, 257, 2074, 31704, 490, 262, 568, 281, 50764], 'temperature': 0.0, 'avg_logprob': -0.19506562839854846, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.0031409291550517082}, {'id': 135, 'seek': 81334, 'start': 823.4200000000001, 'end': 830.4200000000001, 'text': ' s 1 right there is a true dependence any other thing I think that is all we have covered', 'tokens': [50868, 262, 502, 558, 456, 307, 257, 2074, 31704, 604, 661, 551, 286, 519, 300, 307, 439, 321, 362, 5343, 51218], 'temperature': 0.0, 'avg_logprob': -0.19506562839854846, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.0031409291550517082}, {'id': 136, 'seek': 81334, 'start': 832.26, 'end': 839.26, 'text': ' all the occurrences of x y right so all of this are dependences earlier we were dealing', 'tokens': [51310, 439, 264, 5160, 38983, 295, 2031, 288, 558, 370, 439, 295, 341, 366, 5672, 2667, 3071, 321, 645, 6260, 51660], 'temperature': 0.0, 'avg_logprob': -0.19506562839854846, 'compression_ratio': 1.7218543046357615, 'no_speech_prob': 0.0031409291550517082}, {'id': 137, 'seek': 83926, 'start': 839.66, 'end': 846.66, 'text': ' with scalar variables now we are dealing with arrays non scalar variables so not only you', 'tokens': [50384, 365, 39684, 9102, 586, 321, 366, 6260, 365, 41011, 2107, 39684, 9102, 370, 406, 787, 291, 50734], 'temperature': 0.0, 'avg_logprob': -0.1741062800089518, 'compression_ratio': 1.9120879120879122, 'no_speech_prob': 0.0014088664902374148}, {'id': 138, 'seek': 83926, 'start': 847.62, 'end': 852.9399999999999, 'text': ' see dependences which are within the same iteration but you would also see dependences', 'tokens': [50782, 536, 5672, 2667, 597, 366, 1951, 264, 912, 24784, 457, 291, 576, 611, 536, 5672, 2667, 51048], 'temperature': 0.0, 'avg_logprob': -0.1741062800089518, 'compression_ratio': 1.9120879120879122, 'no_speech_prob': 0.0014088664902374148}, {'id': 139, 'seek': 83926, 'start': 852.9399999999999, 'end': 859.3, 'text': ' which are across iterations just like what we saw in software pipelining correct we saw', 'tokens': [51048, 597, 366, 2108, 36540, 445, 411, 437, 321, 1866, 294, 4722, 8489, 338, 1760, 3006, 321, 1866, 51366], 'temperature': 0.0, 'avg_logprob': -0.1741062800089518, 'compression_ratio': 1.9120879120879122, 'no_speech_prob': 0.0014088664902374148}, {'id': 140, 'seek': 83926, 'start': 859.3, 'end': 865.78, 'text': ' a similar situation what is being created in the jth iteration is being consumed in', 'tokens': [51366, 257, 2531, 2590, 437, 307, 885, 2942, 294, 264, 361, 392, 24784, 307, 885, 21226, 294, 51690], 'temperature': 0.0, 'avg_logprob': -0.1741062800089518, 'compression_ratio': 1.9120879120879122, 'no_speech_prob': 0.0014088664902374148}, {'id': 141, 'seek': 86578, 'start': 865.78, 'end': 871.3, 'text': ' the j plus 1th iteration of course here it is a two dimensional loop so we are talking', 'tokens': [50364, 264, 361, 1804, 502, 392, 24784, 295, 1164, 510, 309, 307, 257, 732, 18795, 6367, 370, 321, 366, 1417, 50640], 'temperature': 0.0, 'avg_logprob': -0.16702343117107044, 'compression_ratio': 1.8870967741935485, 'no_speech_prob': 0.007513208314776421}, {'id': 142, 'seek': 86578, 'start': 871.3, 'end': 878.3, 'text': ' about i j i comma j plus 1 what is consumed in the i jth iteration is written in the i', 'tokens': [50640, 466, 741, 361, 741, 22117, 361, 1804, 502, 437, 307, 21226, 294, 264, 741, 361, 392, 24784, 307, 3720, 294, 264, 741, 50990], 'temperature': 0.0, 'avg_logprob': -0.16702343117107044, 'compression_ratio': 1.8870967741935485, 'no_speech_prob': 0.007513208314776421}, {'id': 143, 'seek': 86578, 'start': 879.8199999999999, 'end': 886.8199999999999, 'text': ' j plus 1th iteration it is also possible that there is a dependence on the i side ok let', 'tokens': [51066, 361, 1804, 502, 392, 24784, 309, 307, 611, 1944, 300, 456, 307, 257, 31704, 322, 264, 741, 1252, 3133, 718, 51416], 'temperature': 0.0, 'avg_logprob': -0.16702343117107044, 'compression_ratio': 1.8870967741935485, 'no_speech_prob': 0.007513208314776421}, {'id': 144, 'seek': 86578, 'start': 886.9399999999999, 'end': 893.9399999999999, 'text': ' see whether you see that over here right what is produced by x what is produced by state', 'tokens': [51422, 536, 1968, 291, 536, 300, 670, 510, 558, 437, 307, 7126, 538, 2031, 437, 307, 7126, 538, 1785, 51772], 'temperature': 0.0, 'avg_logprob': -0.16702343117107044, 'compression_ratio': 1.8870967741935485, 'no_speech_prob': 0.007513208314776421}, {'id': 145, 'seek': 89578, 'start': 895.78, 'end': 902.78, 'text': ' statement s 2 in the i jth iteration is going to be consumed by statement s 3 in the i plus', 'tokens': [50364, 5629, 262, 568, 294, 264, 741, 361, 392, 24784, 307, 516, 281, 312, 21226, 538, 5629, 262, 805, 294, 264, 741, 1804, 50714], 'temperature': 0.0, 'avg_logprob': -0.18127249536060153, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0061126756481826305}, {'id': 146, 'seek': 89578, 'start': 903.26, 'end': 909.02, 'text': ' 1 comma jth iteration right that is after all j iterations for i is over you are going', 'tokens': [50738, 502, 22117, 361, 392, 24784, 558, 300, 307, 934, 439, 361, 36540, 337, 741, 307, 670, 291, 366, 516, 51026], 'temperature': 0.0, 'avg_logprob': -0.18127249536060153, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0061126756481826305}, {'id': 147, 'seek': 89578, 'start': 909.02, 'end': 916.02, 'text': ' to go i plus 1 and that corresponding j you will have a dependence right so when we talk', 'tokens': [51026, 281, 352, 741, 1804, 502, 293, 300, 11760, 361, 291, 486, 362, 257, 31704, 558, 370, 562, 321, 751, 51376], 'temperature': 0.0, 'avg_logprob': -0.18127249536060153, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0061126756481826305}, {'id': 148, 'seek': 89578, 'start': 916.9399999999999, 'end': 923.9399999999999, 'text': ' about array data dependence analysis we are talking about identifying all of them correct', 'tokens': [51422, 466, 10225, 1412, 31704, 5215, 321, 366, 1417, 466, 16696, 439, 295, 552, 3006, 51772], 'temperature': 0.0, 'avg_logprob': -0.18127249536060153, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0061126756481826305}, {'id': 149, 'seek': 92394, 'start': 924.94, 'end': 931.94, 'text': ' now because there is a dependence from this statement to this statement in the jth iteration', 'tokens': [50414, 586, 570, 456, 307, 257, 31704, 490, 341, 5629, 281, 341, 5629, 294, 264, 361, 392, 24784, 50764], 'temperature': 0.0, 'avg_logprob': -0.17669053638682647, 'compression_ratio': 2.015151515151515, 'no_speech_prob': 0.0007755947299301624}, {'id': 150, 'seek': 92394, 'start': 932.46, 'end': 939.46, 'text': ' correct so can i execute statement s 2 sorry statement s 1 s 2 s 3 of i jth iteration in', 'tokens': [50790, 3006, 370, 393, 741, 14483, 5629, 262, 568, 2597, 5629, 262, 502, 262, 568, 262, 805, 295, 741, 361, 392, 24784, 294, 51140], 'temperature': 0.0, 'avg_logprob': -0.17669053638682647, 'compression_ratio': 2.015151515151515, 'no_speech_prob': 0.0007755947299301624}, {'id': 151, 'seek': 92394, 'start': 941.2600000000001, 'end': 948.2600000000001, 'text': ' parallel with statement s 1 s 2 s 3 of i j plus 1th iteration can i execute them yes', 'tokens': [51230, 8952, 365, 5629, 262, 502, 262, 568, 262, 805, 295, 741, 361, 1804, 502, 392, 24784, 393, 741, 14483, 552, 2086, 51580], 'temperature': 0.0, 'avg_logprob': -0.17669053638682647, 'compression_ratio': 2.015151515151515, 'no_speech_prob': 0.0007755947299301624}, {'id': 152, 'seek': 94826, 'start': 948.26, 'end': 955.26, 'text': ' no maybe again i will repeat there is a dependence from statement s 2 to statement s 1 what is', 'tokens': [50364, 572, 1310, 797, 741, 486, 7149, 456, 307, 257, 31704, 490, 5629, 262, 568, 281, 5629, 262, 502, 437, 307, 50714], 'temperature': 0.0, 'avg_logprob': -0.169516335672407, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.001579166273586452}, {'id': 153, 'seek': 94826, 'start': 960.86, 'end': 967.86, 'text': ' produced by statement s 2 in the i jth iteration is going to be used by this in the i comma', 'tokens': [50994, 7126, 538, 5629, 262, 568, 294, 264, 741, 361, 392, 24784, 307, 516, 281, 312, 1143, 538, 341, 294, 264, 741, 22117, 51344], 'temperature': 0.0, 'avg_logprob': -0.169516335672407, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.001579166273586452}, {'id': 154, 'seek': 94826, 'start': 967.86, 'end': 973.98, 'text': ' j plus 1th iteration so the question is can we execute these two iterations in parallel', 'tokens': [51344, 361, 1804, 502, 392, 24784, 370, 264, 1168, 307, 393, 321, 14483, 613, 732, 36540, 294, 8952, 51650], 'temperature': 0.0, 'avg_logprob': -0.169516335672407, 'compression_ratio': 1.7452229299363058, 'no_speech_prob': 0.001579166273586452}, {'id': 155, 'seek': 97398, 'start': 973.98, 'end': 979.7, 'text': ' no whenever there is a dependence you cannot unless you put appropriate synchronization', 'tokens': [50364, 572, 5699, 456, 307, 257, 31704, 291, 2644, 5969, 291, 829, 6854, 19331, 2144, 50650], 'temperature': 0.0, 'avg_logprob': -0.1589436992522209, 'compression_ratio': 1.9375, 'no_speech_prob': 0.005275110248476267}, {'id': 156, 'seek': 97398, 'start': 979.7, 'end': 984.54, 'text': ' otherwise they cannot execute in parallel so these are not independent operations if', 'tokens': [50650, 5911, 436, 2644, 14483, 294, 8952, 370, 613, 366, 406, 6695, 7705, 498, 50892], 'temperature': 0.0, 'avg_logprob': -0.1589436992522209, 'compression_ratio': 1.9375, 'no_speech_prob': 0.005275110248476267}, {'id': 157, 'seek': 97398, 'start': 984.54, 'end': 989.9, 'text': ' i look at s 1 s 2 s 3 together as one group of statements and this one group of statement', 'tokens': [50892, 741, 574, 412, 262, 502, 262, 568, 262, 805, 1214, 382, 472, 1594, 295, 12363, 293, 341, 472, 1594, 295, 5629, 51160], 'temperature': 0.0, 'avg_logprob': -0.1589436992522209, 'compression_ratio': 1.9375, 'no_speech_prob': 0.005275110248476267}, {'id': 158, 'seek': 97398, 'start': 989.9, 'end': 996.54, 'text': ' is dependent on that one group of statement so i cannot execute them in parallel right', 'tokens': [51160, 307, 12334, 322, 300, 472, 1594, 295, 5629, 370, 741, 2644, 14483, 552, 294, 8952, 558, 51492], 'temperature': 0.0, 'avg_logprob': -0.1589436992522209, 'compression_ratio': 1.9375, 'no_speech_prob': 0.005275110248476267}, {'id': 159, 'seek': 97398, 'start': 996.54, 'end': 1002.3000000000001, 'text': ' so to do analysis like this is essentially what is what is the framework that we are', 'tokens': [51492, 370, 281, 360, 5215, 411, 341, 307, 4476, 437, 307, 437, 307, 264, 8388, 300, 321, 366, 51780], 'temperature': 0.0, 'avg_logprob': -0.1589436992522209, 'compression_ratio': 1.9375, 'no_speech_prob': 0.005275110248476267}, {'id': 160, 'seek': 100230, 'start': 1002.3, 'end': 1009.3, 'text': ' going to talk in this lecture it is actually fairly i mean somewhat involved mathematics', 'tokens': [50364, 516, 281, 751, 294, 341, 7991, 309, 307, 767, 6457, 741, 914, 8344, 3288, 18666, 50714], 'temperature': 0.0, 'avg_logprob': -0.18822225739684287, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.008947289548814297}, {'id': 161, 'seek': 100230, 'start': 1009.5, 'end': 1016.5, 'text': ' involved in this but we will try to keep it to a minimum level because a i am very tired', 'tokens': [50724, 3288, 294, 341, 457, 321, 486, 853, 281, 1066, 309, 281, 257, 7285, 1496, 570, 257, 741, 669, 588, 5868, 51074], 'temperature': 0.0, 'avg_logprob': -0.18822225739684287, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.008947289548814297}, {'id': 162, 'seek': 100230, 'start': 1016.5, 'end': 1023.5, 'text': ' b softer length session right so we will not go into all of that we will only talk about', 'tokens': [51074, 272, 23119, 4641, 5481, 558, 370, 321, 486, 406, 352, 666, 439, 295, 300, 321, 486, 787, 751, 466, 51424], 'temperature': 0.0, 'avg_logprob': -0.18822225739684287, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.008947289548814297}, {'id': 163, 'seek': 100230, 'start': 1023.66, 'end': 1028.26, 'text': ' what is really required so each statement in a loop is executed several times because', 'tokens': [51432, 437, 307, 534, 4739, 370, 1184, 5629, 294, 257, 6367, 307, 17577, 2940, 1413, 570, 51662], 'temperature': 0.0, 'avg_logprob': -0.18822225739684287, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.008947289548814297}, {'id': 164, 'seek': 102826, 'start': 1028.26, 'end': 1034.62, 'text': ' it is inside a loop right and that is possible to have a dependence from a statement to itself', 'tokens': [50364, 309, 307, 1854, 257, 6367, 558, 293, 300, 307, 1944, 281, 362, 257, 31704, 490, 257, 5629, 281, 2564, 50682], 'temperature': 0.0, 'avg_logprob': -0.13932909910706268, 'compression_ratio': 1.922279792746114, 'no_speech_prob': 0.003069337923079729}, {'id': 165, 'seek': 102826, 'start': 1034.62, 'end': 1041.26, 'text': ' okay we have not seen that example here for example if this statement says c of i plus', 'tokens': [50682, 1392, 321, 362, 406, 1612, 300, 1365, 510, 337, 1365, 498, 341, 5629, 1619, 269, 295, 741, 1804, 51014], 'temperature': 0.0, 'avg_logprob': -0.13932909910706268, 'compression_ratio': 1.922279792746114, 'no_speech_prob': 0.003069337923079729}, {'id': 166, 'seek': 102826, 'start': 1041.26, 'end': 1048.26, 'text': ' y of i comma j minus 1 then from i j statement to i j plus 1th iteration there is a dependency', 'tokens': [51014, 288, 295, 741, 22117, 361, 3175, 502, 550, 490, 741, 361, 5629, 281, 741, 361, 1804, 502, 392, 24784, 456, 307, 257, 33621, 51364], 'temperature': 0.0, 'avg_logprob': -0.13932909910706268, 'compression_ratio': 1.922279792746114, 'no_speech_prob': 0.003069337923079729}, {'id': 167, 'seek': 102826, 'start': 1049.3, 'end': 1055.14, 'text': ' so a statement can have a dependency with itself right and then there are so many dependencies', 'tokens': [51416, 370, 257, 5629, 393, 362, 257, 33621, 365, 2564, 558, 293, 550, 456, 366, 370, 867, 36606, 51708], 'temperature': 0.0, 'avg_logprob': -0.13932909910706268, 'compression_ratio': 1.922279792746114, 'no_speech_prob': 0.003069337923079729}, {'id': 168, 'seek': 105514, 'start': 1055.14, 'end': 1060.26, 'text': ' not just the number of dependencies that i talked about just look at these two dependencies', 'tokens': [50364, 406, 445, 264, 1230, 295, 36606, 300, 741, 2825, 466, 445, 574, 412, 613, 732, 36606, 50620], 'temperature': 0.0, 'avg_logprob': -0.15284849296916614, 'compression_ratio': 1.86096256684492, 'no_speech_prob': 0.004175418522208929}, {'id': 169, 'seek': 105514, 'start': 1060.26, 'end': 1066.7, 'text': ' right now i said that i jth iteration to i j plus 1th iteration if i actually enumerate', 'tokens': [50620, 558, 586, 741, 848, 300, 741, 361, 392, 24784, 281, 741, 361, 1804, 502, 392, 24784, 498, 741, 767, 465, 15583, 473, 50942], 'temperature': 0.0, 'avg_logprob': -0.15284849296916614, 'compression_ratio': 1.86096256684492, 'no_speech_prob': 0.004175418522208929}, {'id': 170, 'seek': 105514, 'start': 1066.7, 'end': 1073.7, 'text': " this for all values of i and j correct it will be n cross n isn't it it is just one", 'tokens': [50942, 341, 337, 439, 4190, 295, 741, 293, 361, 3006, 309, 486, 312, 297, 3278, 297, 1943, 380, 309, 309, 307, 445, 472, 51292], 'temperature': 0.0, 'avg_logprob': -0.15284849296916614, 'compression_ratio': 1.86096256684492, 'no_speech_prob': 0.004175418522208929}, {'id': 171, 'seek': 105514, 'start': 1075.42, 'end': 1080.14, 'text': ' dependence that you are talking about but then if you enumerate it for all values of', 'tokens': [51378, 31704, 300, 291, 366, 1417, 466, 457, 550, 498, 291, 465, 15583, 473, 309, 337, 439, 4190, 295, 51614], 'temperature': 0.0, 'avg_logprob': -0.15284849296916614, 'compression_ratio': 1.86096256684492, 'no_speech_prob': 0.004175418522208929}, {'id': 172, 'seek': 108014, 'start': 1080.14, 'end': 1086.0600000000002, 'text': ' i and j it is n square dependencies that you are talking about right so we want a compact', 'tokens': [50364, 741, 293, 361, 309, 307, 297, 3732, 36606, 300, 291, 366, 1417, 466, 558, 370, 321, 528, 257, 14679, 50660], 'temperature': 0.0, 'avg_logprob': -0.18384398970493052, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.010549494065344334}, {'id': 173, 'seek': 108014, 'start': 1086.0600000000002, 'end': 1092.1000000000001, 'text': ' representation for this otherwise i have to say that 3 4th it means iteration 3 comma', 'tokens': [50660, 10290, 337, 341, 5911, 741, 362, 281, 584, 300, 805, 1017, 392, 309, 1355, 24784, 805, 22117, 50962], 'temperature': 0.0, 'avg_logprob': -0.18384398970493052, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.010549494065344334}, {'id': 174, 'seek': 108014, 'start': 1092.1000000000001, 'end': 1099.1000000000001, 'text': ' 4 is dependent on iteration 3 comma 5 or the other way around right or iteration 3 comma', 'tokens': [50962, 1017, 307, 12334, 322, 24784, 805, 22117, 1025, 420, 264, 661, 636, 926, 558, 420, 24784, 805, 22117, 51312], 'temperature': 0.0, 'avg_logprob': -0.18384398970493052, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.010549494065344334}, {'id': 175, 'seek': 108014, 'start': 1099.3400000000001, 'end': 1106.3400000000001, 'text': ' 5 is dependent on 3 comma 6 3 comma 7 3 comma 8 whatever it is like that we have to say', 'tokens': [51324, 1025, 307, 12334, 322, 805, 22117, 1386, 805, 22117, 1614, 805, 22117, 1649, 2035, 309, 307, 411, 300, 321, 362, 281, 584, 51674], 'temperature': 0.0, 'avg_logprob': -0.18384398970493052, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.010549494065344334}, {'id': 176, 'seek': 110634, 'start': 1106.34, 'end': 1111.34, 'text': ' all of them so we need a compact representation for that so let us see how we are going to', 'tokens': [50364, 439, 295, 552, 370, 321, 643, 257, 14679, 10290, 337, 300, 370, 718, 505, 536, 577, 321, 366, 516, 281, 50614], 'temperature': 0.0, 'avg_logprob': -0.1627001190185547, 'compression_ratio': 1.9344978165938864, 'no_speech_prob': 0.01144735049456358}, {'id': 177, 'seek': 110634, 'start': 1111.34, 'end': 1117.22, 'text': ' do that and the dependencies can be either loop carried or loop independent we will give', 'tokens': [50614, 360, 300, 293, 264, 36606, 393, 312, 2139, 6367, 9094, 420, 6367, 6695, 321, 486, 976, 50908], 'temperature': 0.0, 'avg_logprob': -0.1627001190185547, 'compression_ratio': 1.9344978165938864, 'no_speech_prob': 0.01144735049456358}, {'id': 178, 'seek': 110634, 'start': 1117.22, 'end': 1122.4599999999998, 'text': ' examples we have already given examples but we will also see more examples of them okay', 'tokens': [50908, 5110, 321, 362, 1217, 2212, 5110, 457, 321, 486, 611, 536, 544, 5110, 295, 552, 1392, 51170], 'temperature': 0.0, 'avg_logprob': -0.1627001190185547, 'compression_ratio': 1.9344978165938864, 'no_speech_prob': 0.01144735049456358}, {'id': 179, 'seek': 110634, 'start': 1122.4599999999998, 'end': 1127.8999999999999, 'text': ' so before we define this let us define two terms one called the iteration space iteration', 'tokens': [51170, 370, 949, 321, 6964, 341, 718, 505, 6964, 732, 2115, 472, 1219, 264, 24784, 1901, 24784, 51442], 'temperature': 0.0, 'avg_logprob': -0.1627001190185547, 'compression_ratio': 1.9344978165938864, 'no_speech_prob': 0.01144735049456358}, {'id': 180, 'seek': 110634, 'start': 1127.8999999999999, 'end': 1134.34, 'text': ' vector and iteration space if you have a n way nested loop that means for i for j for', 'tokens': [51442, 8062, 293, 24784, 1901, 498, 291, 362, 257, 297, 636, 15646, 292, 6367, 300, 1355, 337, 741, 337, 361, 337, 51764], 'temperature': 0.0, 'avg_logprob': -0.1627001190185547, 'compression_ratio': 1.9344978165938864, 'no_speech_prob': 0.01144735049456358}, {'id': 181, 'seek': 113434, 'start': 1134.6999999999998, 'end': 1141.6999999999998, 'text': ' l like that right then that loop is going to be when one iteration of that loop is executing', 'tokens': [50382, 287, 411, 300, 558, 550, 300, 6367, 307, 516, 281, 312, 562, 472, 24784, 295, 300, 6367, 307, 32368, 50732], 'temperature': 0.0, 'avg_logprob': -0.17814678615993923, 'compression_ratio': 1.9508196721311475, 'no_speech_prob': 0.006189233157783747}, {'id': 182, 'seek': 113434, 'start': 1142.6999999999998, 'end': 1147.3, 'text': ' right you have one value for the first let us talk about a two dimensional a two way', 'tokens': [50782, 558, 291, 362, 472, 2158, 337, 264, 700, 718, 505, 751, 466, 257, 732, 18795, 257, 732, 636, 51012], 'temperature': 0.0, 'avg_logprob': -0.17814678615993923, 'compression_ratio': 1.9508196721311475, 'no_speech_prob': 0.006189233157783747}, {'id': 183, 'seek': 113434, 'start': 1147.3, 'end': 1154.3, 'text': ' nested loop i comma j i going from 1 to n j going from 1 to n right then for each value', 'tokens': [51012, 15646, 292, 6367, 741, 22117, 361, 741, 516, 490, 502, 281, 297, 361, 516, 490, 502, 281, 297, 558, 550, 337, 1184, 2158, 51362], 'temperature': 0.0, 'avg_logprob': -0.17814678615993923, 'compression_ratio': 1.9508196721311475, 'no_speech_prob': 0.006189233157783747}, {'id': 184, 'seek': 113434, 'start': 1154.3, 'end': 1161.3, 'text': ' of i comma j i have one iteration for example 3 4 is one iteration 5 7 is another iteration', 'tokens': [51362, 295, 741, 22117, 361, 741, 362, 472, 24784, 337, 1365, 805, 1017, 307, 472, 24784, 1025, 1614, 307, 1071, 24784, 51712], 'temperature': 0.0, 'avg_logprob': -0.17814678615993923, 'compression_ratio': 1.9508196721311475, 'no_speech_prob': 0.006189233157783747}, {'id': 185, 'seek': 116130, 'start': 1162.3, 'end': 1169.3, 'text': ' right 23 is another iteration as long as n is greater than 20 all of these are points', 'tokens': [50414, 558, 6673, 307, 1071, 24784, 382, 938, 382, 297, 307, 5044, 813, 945, 439, 295, 613, 366, 2793, 50764], 'temperature': 0.0, 'avg_logprob': -0.15827064256410342, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0015194041188806295}, {'id': 186, 'seek': 116130, 'start': 1169.98, 'end': 1174.98, 'text': ' in the iteration space right that is really what we are talking about right iteration', 'tokens': [50798, 294, 264, 24784, 1901, 558, 300, 307, 534, 437, 321, 366, 1417, 466, 558, 24784, 51048], 'temperature': 0.0, 'avg_logprob': -0.15827064256410342, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0015194041188806295}, {'id': 187, 'seek': 116130, 'start': 1174.98, 'end': 1180.6599999999999, 'text': ' space is the set of all possible iteration vectors iteration vector is essentially the', 'tokens': [51048, 1901, 307, 264, 992, 295, 439, 1944, 24784, 18875, 24784, 8062, 307, 4476, 264, 51332], 'temperature': 0.0, 'avg_logprob': -0.15827064256410342, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0015194041188806295}, {'id': 188, 'seek': 116130, 'start': 1180.6599999999999, 'end': 1187.6599999999999, 'text': ' index value index value for a particular iteration right we will also talk about what is called', 'tokens': [51332, 8186, 2158, 8186, 2158, 337, 257, 1729, 24784, 558, 321, 486, 611, 751, 466, 437, 307, 1219, 51682], 'temperature': 0.0, 'avg_logprob': -0.15827064256410342, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0015194041188806295}, {'id': 189, 'seek': 118766, 'start': 1187.8200000000002, 'end': 1194.02, 'text': ' the lexicographic ordering since you are talking about nested loops correct in the nested loop', 'tokens': [50372, 264, 476, 47228, 12295, 21739, 1670, 291, 366, 1417, 466, 15646, 292, 16121, 3006, 294, 264, 15646, 292, 6367, 50682], 'temperature': 0.0, 'avg_logprob': -0.14126505022463592, 'compression_ratio': 2.348684210526316, 'no_speech_prob': 0.007737406995147467}, {'id': 190, 'seek': 118766, 'start': 1194.02, 'end': 1200.3400000000001, 'text': ' you can say that i jth iteration i j plus 1th iteration which one is earlier which one', 'tokens': [50682, 291, 393, 584, 300, 741, 361, 392, 24784, 741, 361, 1804, 502, 392, 24784, 597, 472, 307, 3071, 597, 472, 50998], 'temperature': 0.0, 'avg_logprob': -0.14126505022463592, 'compression_ratio': 2.348684210526316, 'no_speech_prob': 0.007737406995147467}, {'id': 191, 'seek': 118766, 'start': 1200.3400000000001, 'end': 1207.3400000000001, 'text': ' is later i j is earlier i j plus 1 is later this is the lexicographic ordering correct', 'tokens': [50998, 307, 1780, 741, 361, 307, 3071, 741, 361, 1804, 502, 307, 1780, 341, 307, 264, 476, 47228, 12295, 21739, 3006, 51348], 'temperature': 0.0, 'avg_logprob': -0.14126505022463592, 'compression_ratio': 2.348684210526316, 'no_speech_prob': 0.007737406995147467}, {'id': 192, 'seek': 118766, 'start': 1208.46, 'end': 1215.46, 'text': ' i jth iteration i plus 1 jth iteration which one is earlier i j is earlier i plus 1 j is', 'tokens': [51404, 741, 361, 392, 24784, 741, 1804, 502, 361, 392, 24784, 597, 472, 307, 3071, 741, 361, 307, 3071, 741, 1804, 502, 361, 307, 51754], 'temperature': 0.0, 'avg_logprob': -0.14126505022463592, 'compression_ratio': 2.348684210526316, 'no_speech_prob': 0.007737406995147467}, {'id': 193, 'seek': 121546, 'start': 1216.46, 'end': 1223.46, 'text': ' later right let us do one more i jth iteration right i minus 1 j plus 1 i minus 1 j plus', 'tokens': [50414, 1780, 558, 718, 505, 360, 472, 544, 741, 361, 392, 24784, 558, 741, 3175, 502, 361, 1804, 502, 741, 3175, 502, 361, 1804, 50764], 'temperature': 0.0, 'avg_logprob': -0.16866706399356618, 'compression_ratio': 1.65625, 'no_speech_prob': 0.003976841922849417}, {'id': 194, 'seek': 121546, 'start': 1230.38, 'end': 1235.26, 'text': ' 1 is earlier the other one is later just like you have a sequence of letters you try to', 'tokens': [51110, 502, 307, 3071, 264, 661, 472, 307, 1780, 445, 411, 291, 362, 257, 8310, 295, 7825, 291, 853, 281, 51354], 'temperature': 0.0, 'avg_logprob': -0.16866706399356618, 'compression_ratio': 1.65625, 'no_speech_prob': 0.003976841922849417}, {'id': 195, 'seek': 121546, 'start': 1235.26, 'end': 1241.38, 'text': ' do lexicographic ordering of that right that is really what we are talking about so when', 'tokens': [51354, 360, 476, 47228, 12295, 21739, 295, 300, 558, 300, 307, 534, 437, 321, 366, 1417, 466, 370, 562, 51660], 'temperature': 0.0, 'avg_logprob': -0.16866706399356618, 'compression_ratio': 1.65625, 'no_speech_prob': 0.003976841922849417}, {'id': 196, 'seek': 124138, 'start': 1241.38, 'end': 1246.5800000000002, 'text': ' you specify the loop the order in which it is going to execute right all of this is essentially', 'tokens': [50364, 291, 16500, 264, 6367, 264, 1668, 294, 597, 309, 307, 516, 281, 14483, 558, 439, 295, 341, 307, 4476, 50624], 'temperature': 0.0, 'avg_logprob': -0.09004653802438944, 'compression_ratio': 2.1346153846153846, 'no_speech_prob': 0.0037379032000899315}, {'id': 197, 'seek': 124138, 'start': 1246.5800000000002, 'end': 1252.7, 'text': ' the lexicographic order in all of this what we are assuming is that you have a loop nest', 'tokens': [50624, 264, 476, 47228, 12295, 1668, 294, 439, 295, 341, 437, 321, 366, 11926, 307, 300, 291, 362, 257, 6367, 15646, 50930], 'temperature': 0.0, 'avg_logprob': -0.09004653802438944, 'compression_ratio': 2.1346153846153846, 'no_speech_prob': 0.0037379032000899315}, {'id': 198, 'seek': 124138, 'start': 1252.7, 'end': 1258.5, 'text': ' n and the loop nest is typically written in what is called the canonical form for i is', 'tokens': [50930, 297, 293, 264, 6367, 15646, 307, 5850, 3720, 294, 437, 307, 1219, 264, 46491, 1254, 337, 741, 307, 51220], 'temperature': 0.0, 'avg_logprob': -0.09004653802438944, 'compression_ratio': 2.1346153846153846, 'no_speech_prob': 0.0037379032000899315}, {'id': 199, 'seek': 124138, 'start': 1258.5, 'end': 1264.7, 'text': ' equal to 1 to n for j is equal to 1 to n for k is equal to 1 to n it is not like for i', 'tokens': [51220, 2681, 281, 502, 281, 297, 337, 361, 307, 2681, 281, 502, 281, 297, 337, 350, 307, 2681, 281, 502, 281, 297, 309, 307, 406, 411, 337, 741, 51530], 'temperature': 0.0, 'avg_logprob': -0.09004653802438944, 'compression_ratio': 2.1346153846153846, 'no_speech_prob': 0.0037379032000899315}, {'id': 200, 'seek': 124138, 'start': 1264.7, 'end': 1270.46, 'text': ' is equal to 1 to n for j is equal to n down to 0 it is not like that because when you', 'tokens': [51530, 307, 2681, 281, 502, 281, 297, 337, 361, 307, 2681, 281, 297, 760, 281, 1958, 309, 307, 406, 411, 300, 570, 562, 291, 51818], 'temperature': 0.0, 'avg_logprob': -0.09004653802438944, 'compression_ratio': 2.1346153846153846, 'no_speech_prob': 0.0037379032000899315}, {'id': 201, 'seek': 127046, 'start': 1270.46, 'end': 1275.66, 'text': ' do things like that this lexicographic ordering will have a different interpretation so let', 'tokens': [50364, 360, 721, 411, 300, 341, 476, 47228, 12295, 21739, 486, 362, 257, 819, 14174, 370, 718, 50624], 'temperature': 0.0, 'avg_logprob': -0.164900944556719, 'compression_ratio': 1.665137614678899, 'no_speech_prob': 0.0016192966140806675}, {'id': 202, 'seek': 127046, 'start': 1275.66, 'end': 1280.02, 'text': ' us assume for the time being everything is in the canonical form that means always going', 'tokens': [50624, 505, 6552, 337, 264, 565, 885, 1203, 307, 294, 264, 46491, 1254, 300, 1355, 1009, 516, 50842], 'temperature': 0.0, 'avg_logprob': -0.164900944556719, 'compression_ratio': 1.665137614678899, 'no_speech_prob': 0.0016192966140806675}, {'id': 203, 'seek': 127046, 'start': 1280.02, 'end': 1287.02, 'text': ' from 1 to n in steps of 1 actually in mathematics this is basically said well let me not go', 'tokens': [50842, 490, 502, 281, 297, 294, 4439, 295, 502, 767, 294, 18666, 341, 307, 1936, 848, 731, 718, 385, 406, 352, 51192], 'temperature': 0.0, 'avg_logprob': -0.164900944556719, 'compression_ratio': 1.665137614678899, 'no_speech_prob': 0.0016192966140806675}, {'id': 204, 'seek': 127046, 'start': 1289.3400000000001, 'end': 1296.3400000000001, 'text': ' into the definition because i mean few people got an idea of what it is so for example let', 'tokens': [51308, 666, 264, 7123, 570, 741, 914, 1326, 561, 658, 364, 1558, 295, 437, 309, 307, 370, 337, 1365, 718, 51658], 'temperature': 0.0, 'avg_logprob': -0.164900944556719, 'compression_ratio': 1.665137614678899, 'no_speech_prob': 0.0016192966140806675}, {'id': 205, 'seek': 129634, 'start': 1296.82, 'end': 1303.82, 'text': ' us look at this loop right i going from 1 to 4 j going from 1 to 6 so what is an iteration', 'tokens': [50388, 505, 574, 412, 341, 6367, 558, 741, 516, 490, 502, 281, 1017, 361, 516, 490, 502, 281, 1386, 370, 437, 307, 364, 24784, 50738], 'temperature': 0.0, 'avg_logprob': -0.1254671760227369, 'compression_ratio': 1.9142857142857144, 'no_speech_prob': 0.0014190537622198462}, {'id': 206, 'seek': 129634, 'start': 1304.8999999999999, 'end': 1311.8999999999999, 'text': ' vector for this 1 3 4 2 these are all iteration vector what is the iteration space for this', 'tokens': [50792, 8062, 337, 341, 502, 805, 1017, 568, 613, 366, 439, 24784, 8062, 437, 307, 264, 24784, 1901, 337, 341, 51142], 'temperature': 0.0, 'avg_logprob': -0.1254671760227369, 'compression_ratio': 1.9142857142857144, 'no_speech_prob': 0.0014190537622198462}, {'id': 207, 'seek': 129634, 'start': 1312.98, 'end': 1319.98, 'text': ' how many points are there in the iteration space 24 right from 1 1 to 4 6 right those', 'tokens': [51196, 577, 867, 2793, 366, 456, 294, 264, 24784, 1901, 4022, 558, 490, 502, 502, 281, 1017, 1386, 558, 729, 51546], 'temperature': 0.0, 'avg_logprob': -0.1254671760227369, 'compression_ratio': 1.9142857142857144, 'no_speech_prob': 0.0014190537622198462}, {'id': 208, 'seek': 131998, 'start': 1319.98, 'end': 1326.98, 'text': ' points are being put in here there are some red arrows blue arrows and dotted arrows', 'tokens': [50364, 2793, 366, 885, 829, 294, 510, 456, 366, 512, 2182, 19669, 3344, 19669, 293, 37459, 19669, 50714], 'temperature': 0.0, 'avg_logprob': -0.1469589907948564, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.00385899911634624}, {'id': 209, 'seek': 131998, 'start': 1330.18, 'end': 1335.54, 'text': ' let us see what they are correct so as i mentioned earlier where you are always going to talk', 'tokens': [50874, 718, 505, 536, 437, 436, 366, 3006, 370, 382, 741, 2835, 3071, 689, 291, 366, 1009, 516, 281, 751, 51142], 'temperature': 0.0, 'avg_logprob': -0.1469589907948564, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.00385899911634624}, {'id': 210, 'seek': 131998, 'start': 1335.54, 'end': 1340.26, 'text': ' about these loops in the loop nest in what is called the normalized form or canonical', 'tokens': [51142, 466, 613, 16121, 294, 264, 6367, 15646, 294, 437, 307, 1219, 264, 48704, 1254, 420, 46491, 51378], 'temperature': 0.0, 'avg_logprob': -0.1469589907948564, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.00385899911634624}, {'id': 211, 'seek': 131998, 'start': 1340.26, 'end': 1345.34, 'text': ' form which is always going from 1 to n or 1 to m they need not have to be same they', 'tokens': [51378, 1254, 597, 307, 1009, 516, 490, 502, 281, 297, 420, 502, 281, 275, 436, 643, 406, 362, 281, 312, 912, 436, 51632], 'temperature': 0.0, 'avg_logprob': -0.1469589907948564, 'compression_ratio': 1.7487437185929648, 'no_speech_prob': 0.00385899911634624}, {'id': 212, 'seek': 134534, 'start': 1345.34, 'end': 1352.34, 'text': ' can be different like what you have but always going from some 1 to k right ok now this is', 'tokens': [50364, 393, 312, 819, 411, 437, 291, 362, 457, 1009, 516, 490, 512, 502, 281, 350, 558, 3133, 586, 341, 307, 50714], 'temperature': 0.0, 'avg_logprob': -0.14621075716885654, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.001733846846036613}, {'id': 213, 'seek': 134534, 'start': 1352.6999999999998, 'end': 1359.6999999999998, 'text': ' the iteration space you can see that i going from 1 to 4 j going from 1 to 6 what is the', 'tokens': [50732, 264, 24784, 1901, 291, 393, 536, 300, 741, 516, 490, 502, 281, 1017, 361, 516, 490, 502, 281, 1386, 437, 307, 264, 51082], 'temperature': 0.0, 'avg_logprob': -0.14621075716885654, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.001733846846036613}, {'id': 214, 'seek': 134534, 'start': 1360.74, 'end': 1367.74, 'text': ' iteration order the iteration order or the lexicographic ordering in this is this like', 'tokens': [51134, 24784, 1668, 264, 24784, 1668, 420, 264, 476, 47228, 12295, 21739, 294, 341, 307, 341, 411, 51484], 'temperature': 0.0, 'avg_logprob': -0.14621075716885654, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.001733846846036613}, {'id': 215, 'seek': 136774, 'start': 1368.74, 'end': 1375.74, 'text': ' this right that is the dotted arrow correct for i is equal to 1 j is going to go from', 'tokens': [50414, 341, 558, 300, 307, 264, 37459, 11610, 3006, 337, 741, 307, 2681, 281, 502, 361, 307, 516, 281, 352, 490, 50764], 'temperature': 0.0, 'avg_logprob': -0.1632406643458775, 'compression_ratio': 1.8450704225352113, 'no_speech_prob': 0.005064220167696476}, {'id': 216, 'seek': 136774, 'start': 1376.42, 'end': 1383.42, 'text': ' 1 to 6 and then i will increase to 2 j will go from 1 to 6 then i will increase to 3 j', 'tokens': [50798, 502, 281, 1386, 293, 550, 741, 486, 3488, 281, 568, 361, 486, 352, 490, 502, 281, 1386, 550, 741, 486, 3488, 281, 805, 361, 51148], 'temperature': 0.0, 'avg_logprob': -0.1632406643458775, 'compression_ratio': 1.8450704225352113, 'no_speech_prob': 0.005064220167696476}, {'id': 217, 'seek': 136774, 'start': 1383.9, 'end': 1390.9, 'text': ' will go from 1 to 6 that is the lexicographic ordering right therefore between this which', 'tokens': [51172, 486, 352, 490, 502, 281, 1386, 300, 307, 264, 476, 47228, 12295, 21739, 558, 4412, 1296, 341, 597, 51522], 'temperature': 0.0, 'avg_logprob': -0.1632406643458775, 'compression_ratio': 1.8450704225352113, 'no_speech_prob': 0.005064220167696476}, {'id': 218, 'seek': 139090, 'start': 1391.8600000000001, 'end': 1398.8600000000001, 'text': ' one is earlier which one is later obviously this is earlier this is later right so if', 'tokens': [50412, 472, 307, 3071, 597, 472, 307, 1780, 2745, 341, 307, 3071, 341, 307, 1780, 558, 370, 498, 50762], 'temperature': 0.0, 'avg_logprob': -0.21731175013950893, 'compression_ratio': 1.7549668874172186, 'no_speech_prob': 0.0047693937085568905}, {'id': 219, 'seek': 139090, 'start': 1398.8600000000001, 'end': 1405.8600000000001, 'text': ' i have said yeah let us say 4 2 and then 4 2 and 5 1 which one is earlier 4 2 is earlier', 'tokens': [50762, 741, 362, 848, 1338, 718, 505, 584, 1017, 568, 293, 550, 1017, 568, 293, 1025, 502, 597, 472, 307, 3071, 1017, 568, 307, 3071, 51112], 'temperature': 0.0, 'avg_logprob': -0.21731175013950893, 'compression_ratio': 1.7549668874172186, 'no_speech_prob': 0.0047693937085568905}, {'id': 220, 'seek': 139090, 'start': 1412.38, 'end': 1418.74, 'text': ' ok of course 5 1 is not here because i cannot go to 5 but anyway right ok this blue arrows', 'tokens': [51438, 3133, 295, 1164, 1025, 502, 307, 406, 510, 570, 741, 2644, 352, 281, 1025, 457, 4033, 558, 3133, 341, 3344, 19669, 51756], 'temperature': 0.0, 'avg_logprob': -0.21731175013950893, 'compression_ratio': 1.7549668874172186, 'no_speech_prob': 0.0047693937085568905}, {'id': 221, 'seek': 141874, 'start': 1418.74, 'end': 1423.38, 'text': ' and red arrows i think they are not really important but anyway i will briefly tell you', 'tokens': [50364, 293, 2182, 19669, 741, 519, 436, 366, 406, 534, 1021, 457, 4033, 741, 486, 10515, 980, 291, 50596], 'temperature': 0.0, 'avg_logprob': -0.14893867752768777, 'compression_ratio': 1.7878787878787878, 'no_speech_prob': 0.0012977832229807973}, {'id': 222, 'seek': 141874, 'start': 1423.38, 'end': 1429.94, 'text': ' they talk about the various dependences that are there in this program ok now let us just', 'tokens': [50596, 436, 751, 466, 264, 3683, 5672, 2667, 300, 366, 456, 294, 341, 1461, 3133, 586, 718, 505, 445, 50924], 'temperature': 0.0, 'avg_logprob': -0.14893867752768777, 'compression_ratio': 1.7878787878787878, 'no_speech_prob': 0.0012977832229807973}, {'id': 223, 'seek': 141874, 'start': 1429.94, 'end': 1436.94, 'text': ' try to look at one or two of them this arrow here right if this element is x i j it says', 'tokens': [50924, 853, 281, 574, 412, 472, 420, 732, 295, 552, 341, 11610, 510, 558, 498, 341, 4478, 307, 2031, 741, 361, 309, 1619, 51274], 'temperature': 0.0, 'avg_logprob': -0.14893867752768777, 'compression_ratio': 1.7878787878787878, 'no_speech_prob': 0.0012977832229807973}, {'id': 224, 'seek': 141874, 'start': 1438.18, 'end': 1445.18, 'text': ' that x i j is dependent on x i minus 1 j is that such a dependency such a dependency is', 'tokens': [51336, 300, 2031, 741, 361, 307, 12334, 322, 2031, 741, 3175, 502, 361, 307, 300, 1270, 257, 33621, 1270, 257, 33621, 307, 51686], 'temperature': 0.0, 'avg_logprob': -0.14893867752768777, 'compression_ratio': 1.7878787878787878, 'no_speech_prob': 0.0012977832229807973}, {'id': 225, 'seek': 144518, 'start': 1446.0600000000002, 'end': 1453.0600000000002, 'text': ' there for y correct so this dependency is possibly for this dependence between them', 'tokens': [50408, 456, 337, 288, 3006, 370, 341, 33621, 307, 6264, 337, 341, 31704, 1296, 552, 50758], 'temperature': 0.0, 'avg_logprob': -0.3659835142247817, 'compression_ratio': 1.8013698630136987, 'no_speech_prob': 0.002631954150274396}, {'id': 226, 'seek': 144518, 'start': 1456.22, 'end': 1463.22, 'text': ' correct what about this let us look at this again right if this is x i j this is x i j', 'tokens': [50916, 3006, 437, 466, 341, 718, 505, 574, 412, 341, 797, 558, 498, 341, 307, 2031, 741, 361, 341, 307, 2031, 741, 361, 51266], 'temperature': 0.0, 'avg_logprob': -0.3659835142247817, 'compression_ratio': 1.8013698630136987, 'no_speech_prob': 0.002631954150274396}, {'id': 227, 'seek': 144518, 'start': 1465.98, 'end': 1472.98, 'text': ' minus 1 got it the red arrows are anti-dependence ok so this is x i j minus 1 j is there any', 'tokens': [51404, 3175, 502, 658, 309, 264, 2182, 19669, 366, 6061, 12, 36763, 655, 3133, 370, 341, 307, 2031, 741, 361, 3175, 502, 361, 307, 456, 604, 51754], 'temperature': 0.0, 'avg_logprob': -0.3659835142247817, 'compression_ratio': 1.8013698630136987, 'no_speech_prob': 0.002631954150274396}, {'id': 228, 'seek': 147518, 'start': 1475.38, 'end': 1482.38, 'text': ' so that must be this one ok there is some loop independent dependent that is not being', 'tokens': [50374, 370, 300, 1633, 312, 341, 472, 3133, 456, 307, 512, 6367, 6695, 12334, 300, 307, 406, 885, 50724], 'temperature': 0.0, 'avg_logprob': -0.16419272545056465, 'compression_ratio': 1.903225806451613, 'no_speech_prob': 0.0017036683857440948}, {'id': 229, 'seek': 147518, 'start': 1482.8600000000001, 'end': 1488.18, 'text': ' shown here because loop independent dependence is within this each one of them is one iteration', 'tokens': [50748, 4898, 510, 570, 6367, 6695, 31704, 307, 1951, 341, 1184, 472, 295, 552, 307, 472, 24784, 51014], 'temperature': 0.0, 'avg_logprob': -0.16419272545056465, 'compression_ratio': 1.903225806451613, 'no_speech_prob': 0.0017036683857440948}, {'id': 230, 'seek': 147518, 'start': 1488.18, 'end': 1495.18, 'text': ' of the loop ok right so typically whenever we talk about iteration space this is what', 'tokens': [51014, 295, 264, 6367, 3133, 558, 370, 5850, 5699, 321, 751, 466, 24784, 1901, 341, 307, 437, 51364], 'temperature': 0.0, 'avg_logprob': -0.16419272545056465, 'compression_ratio': 1.903225806451613, 'no_speech_prob': 0.0017036683857440948}, {'id': 231, 'seek': 147518, 'start': 1495.18, 'end': 1502.18, 'text': ' we say iteration space and we also got an idea of what is a lexicographic order right', 'tokens': [51364, 321, 584, 24784, 1901, 293, 321, 611, 658, 364, 1558, 295, 437, 307, 257, 476, 47228, 12295, 1668, 558, 51714], 'temperature': 0.0, 'avg_logprob': -0.16419272545056465, 'compression_ratio': 1.903225806451613, 'no_speech_prob': 0.0017036683857440948}, {'id': 232, 'seek': 150218, 'start': 1502.9, 'end': 1508.22, 'text': ' again the same definition of data dependence we will go through this one more time we are', 'tokens': [50400, 797, 264, 912, 7123, 295, 1412, 31704, 321, 486, 352, 807, 341, 472, 544, 565, 321, 366, 50666], 'temperature': 0.0, 'avg_logprob': -0.1724443326051208, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.002122887410223484}, {'id': 233, 'seek': 150218, 'start': 1508.22, 'end': 1512.38, 'text': ' going to see one or two more times but let us see that there exists a dependence from', 'tokens': [50666, 516, 281, 536, 472, 420, 732, 544, 1413, 457, 718, 505, 536, 300, 456, 8198, 257, 31704, 490, 50874], 'temperature': 0.0, 'avg_logprob': -0.1724443326051208, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.002122887410223484}, {'id': 234, 'seek': 150218, 'start': 1512.38, 'end': 1519.38, 'text': ' s 1 to s 2 in a loop in a loop nest if there exists two iteration vectors i and j such', 'tokens': [50874, 262, 502, 281, 262, 568, 294, 257, 6367, 294, 257, 6367, 15646, 498, 456, 8198, 732, 24784, 18875, 741, 293, 361, 1270, 51224], 'temperature': 0.0, 'avg_logprob': -0.1724443326051208, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.002122887410223484}, {'id': 235, 'seek': 150218, 'start': 1519.7, 'end': 1526.7, 'text': ' that i is less than j that means that i happens earlier j happens later ok and there is a', 'tokens': [51240, 300, 741, 307, 1570, 813, 361, 300, 1355, 300, 741, 2314, 3071, 361, 2314, 1780, 3133, 293, 456, 307, 257, 51590], 'temperature': 0.0, 'avg_logprob': -0.1724443326051208, 'compression_ratio': 1.8238341968911918, 'no_speech_prob': 0.002122887410223484}, {'id': 236, 'seek': 152670, 'start': 1527.38, 'end': 1534.38, 'text': ' path from s 1 to s 2 both s 1 and s 2 access the same memory location right that is s 1', 'tokens': [50398, 3100, 490, 262, 502, 281, 262, 568, 1293, 262, 502, 293, 262, 568, 2105, 264, 912, 4675, 4914, 558, 300, 307, 262, 502, 50748], 'temperature': 0.0, 'avg_logprob': -0.16257166506639167, 'compression_ratio': 1.8642857142857143, 'no_speech_prob': 0.003191169584169984}, {'id': 237, 'seek': 152670, 'start': 1535.8600000000001, 'end': 1542.8600000000001, 'text': ' at iteration i and s 2 at iteration j they access the same memory location again it is', 'tokens': [50822, 412, 24784, 741, 293, 262, 568, 412, 24784, 361, 436, 2105, 264, 912, 4675, 4914, 797, 309, 307, 51172], 'temperature': 0.0, 'avg_logprob': -0.16257166506639167, 'compression_ratio': 1.8642857142857143, 'no_speech_prob': 0.003191169584169984}, {'id': 238, 'seek': 152670, 'start': 1542.8600000000001, 'end': 1549.8600000000001, 'text': ' the same point that we talked about right for example here when i talk about 3 2 right', 'tokens': [51172, 264, 912, 935, 300, 321, 2825, 466, 558, 337, 1365, 510, 562, 741, 751, 466, 805, 568, 558, 51522], 'temperature': 0.0, 'avg_logprob': -0.16257166506639167, 'compression_ratio': 1.8642857142857143, 'no_speech_prob': 0.003191169584169984}, {'id': 239, 'seek': 154986, 'start': 1550.3, 'end': 1556.9399999999998, 'text': ' y of 3 2 a value is being produced in the 3 2 iteration right that is iteration point', 'tokens': [50386, 288, 295, 805, 568, 257, 2158, 307, 885, 7126, 294, 264, 805, 568, 24784, 558, 300, 307, 24784, 935, 50718], 'temperature': 0.0, 'avg_logprob': -0.11967826235121574, 'compression_ratio': 1.6625, 'no_speech_prob': 0.0018037647241726518}, {'id': 240, 'seek': 154986, 'start': 1556.9399999999998, 'end': 1563.9399999999998, 'text': ' that is going to be consumed by s 1 in 3 3 because this index is j minus 1 correct so', 'tokens': [50718, 300, 307, 516, 281, 312, 21226, 538, 262, 502, 294, 805, 805, 570, 341, 8186, 307, 361, 3175, 502, 3006, 370, 51068], 'temperature': 0.0, 'avg_logprob': -0.11967826235121574, 'compression_ratio': 1.6625, 'no_speech_prob': 0.0018037647241726518}, {'id': 241, 'seek': 154986, 'start': 1567.1399999999999, 'end': 1573.1399999999999, 'text': ' that is really what we are talking about there are two statements s 1 and s 2 s 1 in iteration', 'tokens': [51228, 300, 307, 534, 437, 321, 366, 1417, 466, 456, 366, 732, 12363, 262, 502, 293, 262, 568, 262, 502, 294, 24784, 51528], 'temperature': 0.0, 'avg_logprob': -0.11967826235121574, 'compression_ratio': 1.6625, 'no_speech_prob': 0.0018037647241726518}, {'id': 242, 'seek': 157314, 'start': 1573.14, 'end': 1579.98, 'text': ' i and s 2 in iteration j access the same memory location that is when there is a dependence', 'tokens': [50364, 741, 293, 262, 568, 294, 24784, 361, 2105, 264, 912, 4675, 4914, 300, 307, 562, 456, 307, 257, 31704, 50706], 'temperature': 0.0, 'avg_logprob': -0.21035334847190162, 'compression_ratio': 2.161764705882353, 'no_speech_prob': 0.012229065410792828}, {'id': 243, 'seek': 157314, 'start': 1579.98, 'end': 1584.98, 'text': ' and in this case we assume that i happens earlier than j then it is a true dependence', 'tokens': [50706, 293, 294, 341, 1389, 321, 6552, 300, 741, 2314, 3071, 813, 361, 550, 309, 307, 257, 2074, 31704, 50956], 'temperature': 0.0, 'avg_logprob': -0.21035334847190162, 'compression_ratio': 2.161764705882353, 'no_speech_prob': 0.012229065410792828}, {'id': 244, 'seek': 157314, 'start': 1584.98, 'end': 1591.98, 'text': ' right i mean if yeah if i is a right i mean if s 1 is a right and s 2 is a read and so', 'tokens': [50956, 558, 741, 914, 498, 1338, 498, 741, 307, 257, 558, 741, 914, 498, 262, 502, 307, 257, 558, 293, 262, 568, 307, 257, 1401, 293, 370, 51306], 'temperature': 0.0, 'avg_logprob': -0.21035334847190162, 'compression_ratio': 2.161764705882353, 'no_speech_prob': 0.012229065410792828}, {'id': 245, 'seek': 157314, 'start': 1592.14, 'end': 1597.14, 'text': ' ok right there is a dependence here we actually are talking about just a dependence so it', 'tokens': [51314, 3133, 558, 456, 307, 257, 31704, 510, 321, 767, 366, 1417, 466, 445, 257, 31704, 370, 309, 51564], 'temperature': 0.0, 'avg_logprob': -0.21035334847190162, 'compression_ratio': 2.161764705882353, 'no_speech_prob': 0.012229065410792828}, {'id': 246, 'seek': 157314, 'start': 1597.14, 'end': 1601.7800000000002, 'text': ' it just says that they both access the same memory location and one of them is a right', 'tokens': [51564, 309, 445, 1619, 300, 436, 1293, 2105, 264, 912, 4675, 4914, 293, 472, 295, 552, 307, 257, 558, 51796], 'temperature': 0.0, 'avg_logprob': -0.21035334847190162, 'compression_ratio': 2.161764705882353, 'no_speech_prob': 0.012229065410792828}, {'id': 247, 'seek': 160178, 'start': 1601.86, 'end': 1608.86, 'text': ' that is all that you need ok ok now again the same points but now we are going to have', 'tokens': [50368, 300, 307, 439, 300, 291, 643, 3133, 3133, 586, 797, 264, 912, 2793, 457, 586, 321, 366, 516, 281, 362, 50718], 'temperature': 0.0, 'avg_logprob': -0.16394436877706778, 'compression_ratio': 1.5892857142857142, 'no_speech_prob': 0.0014963751891627908}, {'id': 248, 'seek': 160178, 'start': 1609.66, 'end': 1616.66, 'text': ' a representation for this so there are three statements s 1 and s 2 and s 3 there is a', 'tokens': [50758, 257, 10290, 337, 341, 370, 456, 366, 1045, 12363, 262, 502, 293, 262, 568, 293, 262, 805, 456, 307, 257, 51108], 'temperature': 0.0, 'avg_logprob': -0.16394436877706778, 'compression_ratio': 1.5892857142857142, 'no_speech_prob': 0.0014963751891627908}, {'id': 249, 'seek': 160178, 'start': 1617.7, 'end': 1624.7, 'text': ' two way nested loop correct there is a dependence from s 1 to s 2 because you produce a value', 'tokens': [51160, 732, 636, 15646, 292, 6367, 3006, 456, 307, 257, 31704, 490, 262, 502, 281, 262, 568, 570, 291, 5258, 257, 2158, 51510], 'temperature': 0.0, 'avg_logprob': -0.16394436877706778, 'compression_ratio': 1.5892857142857142, 'no_speech_prob': 0.0014963751891627908}, {'id': 250, 'seek': 162470, 'start': 1625.7, 'end': 1632.7, 'text': ' x i j which is being consumed correct now let us look at this dependence s 2 to s 1', 'tokens': [50414, 2031, 741, 361, 597, 307, 885, 21226, 3006, 586, 718, 505, 574, 412, 341, 31704, 262, 568, 281, 262, 502, 50764], 'temperature': 0.0, 'avg_logprob': -0.13929636086990585, 'compression_ratio': 1.6644736842105263, 'no_speech_prob': 0.0035983023699373007}, {'id': 251, 'seek': 162470, 'start': 1634.3400000000001, 'end': 1640.78, 'text': ' you produce it in the i jth iteration and you consume it in the i j plus 1 the value', 'tokens': [50846, 291, 5258, 309, 294, 264, 741, 361, 392, 24784, 293, 291, 14732, 309, 294, 264, 741, 361, 1804, 502, 264, 2158, 51168], 'temperature': 0.0, 'avg_logprob': -0.13929636086990585, 'compression_ratio': 1.6644736842105263, 'no_speech_prob': 0.0035983023699373007}, {'id': 252, 'seek': 162470, 'start': 1640.78, 'end': 1647.78, 'text': ' produced by this statement s 2 is going to be consumed by s 3 one iteration later in', 'tokens': [51168, 7126, 538, 341, 5629, 262, 568, 307, 516, 281, 312, 21226, 538, 262, 805, 472, 24784, 1780, 294, 51518], 'temperature': 0.0, 'avg_logprob': -0.13929636086990585, 'compression_ratio': 1.6644736842105263, 'no_speech_prob': 0.0035983023699373007}, {'id': 253, 'seek': 164778, 'start': 1648.18, 'end': 1654.62, 'text': ' the j dimension and zero iteration later in the i dimension correct that is why it is', 'tokens': [50384, 264, 361, 10139, 293, 4018, 24784, 1780, 294, 264, 741, 10139, 3006, 300, 307, 983, 309, 307, 50706], 'temperature': 0.0, 'avg_logprob': -0.1591658521054396, 'compression_ratio': 1.5679012345679013, 'no_speech_prob': 0.006022189278155565}, {'id': 254, 'seek': 164778, 'start': 1654.62, 'end': 1661.62, 'text': ' i comma j plus 1 that is represented as a dependence distance of 0 comma 1 right now', 'tokens': [50706, 741, 22117, 361, 1804, 502, 300, 307, 10379, 382, 257, 31704, 4560, 295, 1958, 22117, 502, 558, 586, 51056], 'temperature': 0.0, 'avg_logprob': -0.1591658521054396, 'compression_ratio': 1.5679012345679013, 'no_speech_prob': 0.006022189278155565}, {'id': 255, 'seek': 164778, 'start': 1665.02, 'end': 1672.02, 'text': ' let us look at s 2 s 2 produces a value y of i j that is being consumed by s 3 in i', 'tokens': [51226, 718, 505, 574, 412, 262, 568, 262, 568, 14725, 257, 2158, 288, 295, 741, 361, 300, 307, 885, 21226, 538, 262, 805, 294, 741, 51576], 'temperature': 0.0, 'avg_logprob': -0.1591658521054396, 'compression_ratio': 1.5679012345679013, 'no_speech_prob': 0.006022189278155565}, {'id': 256, 'seek': 167202, 'start': 1672.58, 'end': 1679.58, 'text': ' minus 1 j that means it is one iteration later in the i th dimension zero iteration later', 'tokens': [50392, 3175, 502, 361, 300, 1355, 309, 307, 472, 24784, 1780, 294, 264, 741, 258, 10139, 4018, 24784, 1780, 50742], 'temperature': 0.0, 'avg_logprob': -0.18023641181714606, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.003063762793317437}, {'id': 257, 'seek': 167202, 'start': 1679.58, 'end': 1686.58, 'text': ' in the j th dimension so that is written as 1 0 whereas this is 0 0 typically 0 0 is something', 'tokens': [50742, 294, 264, 361, 258, 10139, 370, 300, 307, 3720, 382, 502, 1958, 9735, 341, 307, 1958, 1958, 5850, 1958, 1958, 307, 746, 51092], 'temperature': 0.0, 'avg_logprob': -0.18023641181714606, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.003063762793317437}, {'id': 258, 'seek': 167202, 'start': 1688.46, 'end': 1695.46, 'text': ' that we do not write it means it is loop independent dependence correct it happens with the same', 'tokens': [51186, 300, 321, 360, 406, 2464, 309, 1355, 309, 307, 6367, 6695, 31704, 3006, 309, 2314, 365, 264, 912, 51536], 'temperature': 0.0, 'avg_logprob': -0.18023641181714606, 'compression_ratio': 1.8012820512820513, 'no_speech_prob': 0.003063762793317437}, {'id': 259, 'seek': 169546, 'start': 1695.46, 'end': 1702.46, 'text': ' loop s 1 s 2 same loop i jth iteration i jth iteration so when the dependence is in the', 'tokens': [50364, 6367, 262, 502, 262, 568, 912, 6367, 741, 361, 392, 24784, 741, 361, 392, 24784, 370, 562, 264, 31704, 307, 294, 264, 50714], 'temperature': 0.0, 'avg_logprob': -0.15454146736546567, 'compression_ratio': 2.2100840336134455, 'no_speech_prob': 0.001712349010631442}, {'id': 260, 'seek': 169546, 'start': 1705.6200000000001, 'end': 1712.6200000000001, 'text': ' same loop iteration same iteration that is called loop independent dependence when it', 'tokens': [50872, 912, 6367, 24784, 912, 24784, 300, 307, 1219, 6367, 6695, 31704, 562, 309, 51222], 'temperature': 0.0, 'avg_logprob': -0.15454146736546567, 'compression_ratio': 2.2100840336134455, 'no_speech_prob': 0.001712349010631442}, {'id': 261, 'seek': 169546, 'start': 1713.6200000000001, 'end': 1718.66, 'text': ' is across iterations it is called loop carried dependence and the loop carried dependence', 'tokens': [51272, 307, 2108, 36540, 309, 307, 1219, 6367, 9094, 31704, 293, 264, 6367, 9094, 31704, 51524], 'temperature': 0.0, 'avg_logprob': -0.15454146736546567, 'compression_ratio': 2.2100840336134455, 'no_speech_prob': 0.001712349010631442}, {'id': 262, 'seek': 171866, 'start': 1718.66, 'end': 1725.66, 'text': ' can be in the i th dimension or j th dimension depending on that it is either 1 0 or 0 1', 'tokens': [50364, 393, 312, 294, 264, 741, 258, 10139, 420, 361, 258, 10139, 5413, 322, 300, 309, 307, 2139, 502, 1958, 420, 1958, 502, 50714], 'temperature': 0.0, 'avg_logprob': -0.21988925305041637, 'compression_ratio': 1.74, 'no_speech_prob': 0.004305864218622446}, {'id': 263, 'seek': 171866, 'start': 1725.66, 'end': 1732.66, 'text': ' it is not even have to be 0 and 1 it can be a large value also i minus 4 i minus 8 i plus', 'tokens': [50714, 309, 307, 406, 754, 362, 281, 312, 1958, 293, 502, 309, 393, 312, 257, 2416, 2158, 611, 741, 3175, 1017, 741, 3175, 1649, 741, 1804, 51064], 'temperature': 0.0, 'avg_logprob': -0.21988925305041637, 'compression_ratio': 1.74, 'no_speech_prob': 0.004305864218622446}, {'id': 264, 'seek': 171866, 'start': 1732.66, 'end': 1739.66, 'text': ' 3 right you could also have something like 1 minus 1 what does a 1 minus 1 dependence', 'tokens': [51064, 805, 558, 291, 727, 611, 362, 746, 411, 502, 3175, 502, 437, 775, 257, 502, 3175, 502, 31704, 51414], 'temperature': 0.0, 'avg_logprob': -0.21988925305041637, 'compression_ratio': 1.74, 'no_speech_prob': 0.004305864218622446}, {'id': 265, 'seek': 171866, 'start': 1740.66, 'end': 1747.66, 'text': ' represent correct so what happens is that the value producing the i jth is going to', 'tokens': [51464, 2906, 3006, 370, 437, 2314, 307, 300, 264, 2158, 10501, 264, 741, 361, 392, 307, 516, 281, 51814], 'temperature': 0.0, 'avg_logprob': -0.21988925305041637, 'compression_ratio': 1.74, 'no_speech_prob': 0.004305864218622446}, {'id': 266, 'seek': 174866, 'start': 1749.18, 'end': 1756.18, 'text': ' be consumed in the i plus 1 but yeah sorry i minus 1 sorry yeah i plus 1 and j minus', 'tokens': [50390, 312, 21226, 294, 264, 741, 1804, 502, 457, 1338, 2597, 741, 3175, 502, 2597, 1338, 741, 1804, 502, 293, 361, 3175, 50740], 'temperature': 0.0, 'avg_logprob': -0.21438141430125518, 'compression_ratio': 1.6415094339622642, 'no_speech_prob': 0.0022481002379208803}, {'id': 267, 'seek': 174866, 'start': 1757.94, 'end': 1764.5, 'text': ' 1th iteration right that is also possible now you can think of this as having any value', 'tokens': [50828, 502, 392, 24784, 558, 300, 307, 611, 1944, 586, 291, 393, 519, 295, 341, 382, 1419, 604, 2158, 51156], 'temperature': 0.0, 'avg_logprob': -0.21438141430125518, 'compression_ratio': 1.6415094339622642, 'no_speech_prob': 0.0022481002379208803}, {'id': 268, 'seek': 174866, 'start': 1764.5, 'end': 1771.5, 'text': ' from 0 to n or n minus 1 plus or minus right okay so this is essentially what we call as', 'tokens': [51156, 490, 1958, 281, 297, 420, 297, 3175, 502, 1804, 420, 3175, 558, 1392, 370, 341, 307, 4476, 437, 321, 818, 382, 51506], 'temperature': 0.0, 'avg_logprob': -0.21438141430125518, 'compression_ratio': 1.6415094339622642, 'no_speech_prob': 0.0022481002379208803}, {'id': 269, 'seek': 177150, 'start': 1771.5, 'end': 1778.5, 'text': ' the dependence distance take the vector i i mean sorry take the iteration vector i which', 'tokens': [50364, 264, 31704, 4560, 747, 264, 8062, 741, 741, 914, 2597, 747, 264, 24784, 8062, 741, 597, 50714], 'temperature': 0.0, 'avg_logprob': -0.17187942398918998, 'compression_ratio': 1.9297297297297298, 'no_speech_prob': 0.006153759080916643}, {'id': 270, 'seek': 177150, 'start': 1784.02, 'end': 1788.66, 'text': ' is actually a two dimensional variable i comma j take the iteration vector here which is', 'tokens': [50990, 307, 767, 257, 732, 18795, 7006, 741, 22117, 361, 747, 264, 24784, 8062, 510, 597, 307, 51222], 'temperature': 0.0, 'avg_logprob': -0.17187942398918998, 'compression_ratio': 1.9297297297297298, 'no_speech_prob': 0.006153759080916643}, {'id': 271, 'seek': 177150, 'start': 1788.66, 'end': 1793.98, 'text': ' again another two dimensional vector i prime j prime whenever they access the same memory', 'tokens': [51222, 797, 1071, 732, 18795, 8062, 741, 5835, 361, 5835, 5699, 436, 2105, 264, 912, 4675, 51488], 'temperature': 0.0, 'avg_logprob': -0.17187942398918998, 'compression_ratio': 1.9297297297297298, 'no_speech_prob': 0.006153759080916643}, {'id': 272, 'seek': 177150, 'start': 1793.98, 'end': 1799.1, 'text': ' location whatever are these vector values you do a vector subtraction that is essentially', 'tokens': [51488, 4914, 2035, 366, 613, 8062, 4190, 291, 360, 257, 8062, 16390, 313, 300, 307, 4476, 51744], 'temperature': 0.0, 'avg_logprob': -0.17187942398918998, 'compression_ratio': 1.9297297297297298, 'no_speech_prob': 0.006153759080916643}, {'id': 273, 'seek': 179910, 'start': 1799.1, 'end': 1804.06, 'text': ' what is the dependent distance okay mathematically that is how it is defined but intuitively', 'tokens': [50364, 437, 307, 264, 12334, 4560, 1392, 44003, 300, 307, 577, 309, 307, 7642, 457, 46506, 50612], 'temperature': 0.0, 'avg_logprob': -0.17118045446035024, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.007203961256891489}, {'id': 274, 'seek': 179910, 'start': 1804.06, 'end': 1809.9399999999998, 'text': ' you people now understand what it correct the intuition is more important you can formalize', 'tokens': [50612, 291, 561, 586, 1223, 437, 309, 3006, 264, 24002, 307, 544, 1021, 291, 393, 9860, 1125, 50906], 'temperature': 0.0, 'avg_logprob': -0.17118045446035024, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.007203961256891489}, {'id': 275, 'seek': 179910, 'start': 1809.9399999999998, 'end': 1816.9399999999998, 'text': ' it as you go by okay now sometimes what we do is that we can actually specify this as', 'tokens': [50906, 309, 382, 291, 352, 538, 1392, 586, 2171, 437, 321, 360, 307, 300, 321, 393, 767, 16500, 341, 382, 51256], 'temperature': 0.0, 'avg_logprob': -0.17118045446035024, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.007203961256891489}, {'id': 276, 'seek': 179910, 'start': 1817.6599999999999, 'end': 1823.6599999999999, 'text': ' distance okay in terms of dependence distance vector sometimes you are only interested in', 'tokens': [51292, 4560, 1392, 294, 2115, 295, 31704, 4560, 8062, 2171, 291, 366, 787, 3102, 294, 51592], 'temperature': 0.0, 'avg_logprob': -0.17118045446035024, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.007203961256891489}, {'id': 277, 'seek': 182366, 'start': 1823.66, 'end': 1830.0600000000002, 'text': ' knowing whether it is positive or negative okay i i i will come back and then talk about', 'tokens': [50364, 5276, 1968, 309, 307, 3353, 420, 3671, 1392, 741, 741, 741, 486, 808, 646, 293, 550, 751, 466, 50684], 'temperature': 0.0, 'avg_logprob': -0.16801093419392904, 'compression_ratio': 2.046511627906977, 'no_speech_prob': 0.0018171274568885565}, {'id': 278, 'seek': 182366, 'start': 1830.0600000000002, 'end': 1837.0600000000002, 'text': ' that okay so as i said you want to know whether the value is greater than 0 equal to 0 or', 'tokens': [50684, 300, 1392, 370, 382, 741, 848, 291, 528, 281, 458, 1968, 264, 2158, 307, 5044, 813, 1958, 2681, 281, 1958, 420, 51034], 'temperature': 0.0, 'avg_logprob': -0.16801093419392904, 'compression_ratio': 2.046511627906977, 'no_speech_prob': 0.0018171274568885565}, {'id': 279, 'seek': 182366, 'start': 1837.0600000000002, 'end': 1844.0600000000002, 'text': ' less than 0 if it is greater than 0 a bit confusing you put the less than sign right', 'tokens': [51034, 1570, 813, 1958, 498, 309, 307, 5044, 813, 1958, 257, 857, 13181, 291, 829, 264, 1570, 813, 1465, 558, 51384], 'temperature': 0.0, 'avg_logprob': -0.16801093419392904, 'compression_ratio': 2.046511627906977, 'no_speech_prob': 0.0018171274568885565}, {'id': 280, 'seek': 182366, 'start': 1844.3000000000002, 'end': 1849.22, 'text': ' if it is equal to 0 you put the equal sign if it is less than 0 you put the greater than', 'tokens': [51396, 498, 309, 307, 2681, 281, 1958, 291, 829, 264, 2681, 1465, 498, 309, 307, 1570, 813, 1958, 291, 829, 264, 5044, 813, 51642], 'temperature': 0.0, 'avg_logprob': -0.16801093419392904, 'compression_ratio': 2.046511627906977, 'no_speech_prob': 0.0018171274568885565}, {'id': 281, 'seek': 184922, 'start': 1849.3, 'end': 1856.3, 'text': ' sign okay this kind of a representation is called a dependence direction vector direction', 'tokens': [50368, 1465, 1392, 341, 733, 295, 257, 10290, 307, 1219, 257, 31704, 3513, 8062, 3513, 50718], 'temperature': 0.0, 'avg_logprob': -0.14934970203198886, 'compression_ratio': 1.780612244897959, 'no_speech_prob': 0.00879589468240738}, {'id': 282, 'seek': 184922, 'start': 1856.7, 'end': 1861.7, 'text': ' essentially says that which way it is okay that is why it is slightly on the reverse', 'tokens': [50738, 4476, 1619, 300, 597, 636, 309, 307, 1392, 300, 307, 983, 309, 307, 4748, 322, 264, 9943, 50988], 'temperature': 0.0, 'avg_logprob': -0.14934970203198886, 'compression_ratio': 1.780612244897959, 'no_speech_prob': 0.00879589468240738}, {'id': 283, 'seek': 184922, 'start': 1861.7, 'end': 1867.22, 'text': ' direction all right we will we will always talk about it with regard to the numbers and', 'tokens': [50988, 3513, 439, 558, 321, 486, 321, 486, 1009, 751, 466, 309, 365, 3843, 281, 264, 3547, 293, 51264], 'temperature': 0.0, 'avg_logprob': -0.14934970203198886, 'compression_ratio': 1.780612244897959, 'no_speech_prob': 0.00879589468240738}, {'id': 284, 'seek': 184922, 'start': 1867.22, 'end': 1873.66, 'text': ' then from there move on again the same graph right i have marked all the dependences i', 'tokens': [51264, 550, 490, 456, 1286, 322, 797, 264, 912, 4295, 558, 741, 362, 12658, 439, 264, 5672, 2667, 741, 51586], 'temperature': 0.0, 'avg_logprob': -0.14934970203198886, 'compression_ratio': 1.780612244897959, 'no_speech_prob': 0.00879589468240738}, {'id': 285, 'seek': 187366, 'start': 1873.66, 'end': 1879.7, 'text': ' have also marked the directions whenever it is 0 we have put an equal whenever it is', 'tokens': [50364, 362, 611, 12658, 264, 11095, 5699, 309, 307, 1958, 321, 362, 829, 364, 2681, 5699, 309, 307, 50666], 'temperature': 0.0, 'avg_logprob': -0.18120870919063173, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0046730125322937965}, {'id': 286, 'seek': 187366, 'start': 1879.7, 'end': 1884.46, 'text': ' positive we have put a less than there is nothing which is negative here therefore you', 'tokens': [50666, 3353, 321, 362, 829, 257, 1570, 813, 456, 307, 1825, 597, 307, 3671, 510, 4412, 291, 50904], 'temperature': 0.0, 'avg_logprob': -0.18120870919063173, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0046730125322937965}, {'id': 287, 'seek': 187366, 'start': 1884.46, 'end': 1890.6200000000001, 'text': ' would not see a greater than sign this dependence is an anti-dependence okay that anti-dependence', 'tokens': [50904, 576, 406, 536, 257, 5044, 813, 1465, 341, 31704, 307, 364, 6061, 12, 36763, 655, 1392, 300, 6061, 12, 36763, 655, 51212], 'temperature': 0.0, 'avg_logprob': -0.18120870919063173, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0046730125322937965}, {'id': 288, 'seek': 187366, 'start': 1890.6200000000001, 'end': 1896.6200000000001, 'text': ' you remember that x of i, j plus 1 going to x of i j that is the dependence that we are', 'tokens': [51212, 291, 1604, 300, 2031, 295, 741, 11, 361, 1804, 502, 516, 281, 2031, 295, 741, 361, 300, 307, 264, 31704, 300, 321, 366, 51512], 'temperature': 0.0, 'avg_logprob': -0.18120870919063173, 'compression_ratio': 1.8307692307692307, 'no_speech_prob': 0.0046730125322937965}, {'id': 289, 'seek': 189662, 'start': 1897.4199999999998, 'end': 1904.4199999999998, 'text': ' that also is 0, 1 so this is the dependence distance representation 0, 1 this is the dependence', 'tokens': [50404, 300, 611, 307, 1958, 11, 502, 370, 341, 307, 264, 31704, 4560, 10290, 1958, 11, 502, 341, 307, 264, 31704, 50754], 'temperature': 0.0, 'avg_logprob': -0.20214168648970754, 'compression_ratio': 2.146198830409357, 'no_speech_prob': 0.04985319823026657}, {'id': 290, 'seek': 189662, 'start': 1907.1399999999999, 'end': 1911.6599999999999, 'text': ' direction representation direction so this is called the direction vector this is called', 'tokens': [50890, 3513, 10290, 3513, 370, 341, 307, 1219, 264, 3513, 8062, 341, 307, 1219, 51116], 'temperature': 0.0, 'avg_logprob': -0.20214168648970754, 'compression_ratio': 2.146198830409357, 'no_speech_prob': 0.04985319823026657}, {'id': 291, 'seek': 189662, 'start': 1911.6599999999999, 'end': 1918.1, 'text': ' the distance vector okay we will interchangeably use these things some cases it is only enough', 'tokens': [51116, 264, 4560, 8062, 1392, 321, 486, 30358, 1188, 764, 613, 721, 512, 3331, 309, 307, 787, 1547, 51438], 'temperature': 0.0, 'avg_logprob': -0.20214168648970754, 'compression_ratio': 2.146198830409357, 'no_speech_prob': 0.04985319823026657}, {'id': 292, 'seek': 189662, 'start': 1918.1, 'end': 1924.54, 'text': ' to know about the direction some cases it might be required to know about the distances', 'tokens': [51438, 281, 458, 466, 264, 3513, 512, 3331, 309, 1062, 312, 4739, 281, 458, 466, 264, 22182, 51760], 'temperature': 0.0, 'avg_logprob': -0.20214168648970754, 'compression_ratio': 2.146198830409357, 'no_speech_prob': 0.04985319823026657}, {'id': 293, 'seek': 192454, 'start': 1924.54, 'end': 1931.54, 'text': ' okay so one last example in this case so let us look at this code now there is a triply', 'tokens': [50364, 1392, 370, 472, 1036, 1365, 294, 341, 1389, 370, 718, 505, 574, 412, 341, 3089, 586, 456, 307, 257, 1376, 2724, 50714], 'temperature': 0.0, 'avg_logprob': -0.17325286342673105, 'compression_ratio': 1.6369426751592357, 'no_speech_prob': 0.008505146950483322}, {'id': 294, 'seek': 192454, 'start': 1932.78, 'end': 1939.78, 'text': ' nested loop so it has to be a 3-tip right a i plus 1 j k is being produced and then', 'tokens': [50776, 15646, 292, 6367, 370, 309, 575, 281, 312, 257, 805, 12, 83, 647, 558, 257, 741, 1804, 502, 361, 350, 307, 885, 7126, 293, 550, 51126], 'temperature': 0.0, 'avg_logprob': -0.17325286342673105, 'compression_ratio': 1.6369426751592357, 'no_speech_prob': 0.008505146950483322}, {'id': 295, 'seek': 192454, 'start': 1944.34, 'end': 1951.1, 'text': ' a i j k plus 1 is being consumed so what is the distance vector what is produced here', 'tokens': [51354, 257, 741, 361, 350, 1804, 502, 307, 885, 21226, 370, 437, 307, 264, 4560, 8062, 437, 307, 7126, 510, 51692], 'temperature': 0.0, 'avg_logprob': -0.17325286342673105, 'compression_ratio': 1.6369426751592357, 'no_speech_prob': 0.008505146950483322}, {'id': 296, 'seek': 195110, 'start': 1951.1, 'end': 1958.1, 'text': ' in the i j kth iteration is going to be consumed in the i plus 1 j k minus 1 correct so the', 'tokens': [50364, 294, 264, 741, 361, 350, 392, 24784, 307, 516, 281, 312, 21226, 294, 264, 741, 1804, 502, 361, 350, 3175, 502, 3006, 370, 264, 50714], 'temperature': 0.0, 'avg_logprob': -0.2009671756199428, 'compression_ratio': 1.7088607594936709, 'no_speech_prob': 0.004106166306883097}, {'id': 297, 'seek': 195110, 'start': 1961.6599999999999, 'end': 1968.6599999999999, 'text': ' distance vector is 1 0 minus 1 and the direction vector is this okay all right we will come', 'tokens': [50892, 4560, 8062, 307, 502, 1958, 3175, 502, 293, 264, 3513, 8062, 307, 341, 1392, 439, 558, 321, 486, 808, 51242], 'temperature': 0.0, 'avg_logprob': -0.2009671756199428, 'compression_ratio': 1.7088607594936709, 'no_speech_prob': 0.004106166306883097}, {'id': 298, 'seek': 195110, 'start': 1973.78, 'end': 1978.74, 'text': ' back and then this first non-zero vector has to be less than and things like that that', 'tokens': [51498, 646, 293, 550, 341, 700, 2107, 12, 32226, 8062, 575, 281, 312, 1570, 813, 293, 721, 411, 300, 300, 51746], 'temperature': 0.0, 'avg_logprob': -0.2009671756199428, 'compression_ratio': 1.7088607594936709, 'no_speech_prob': 0.004106166306883097}, {'id': 299, 'seek': 197874, 'start': 1978.74, 'end': 1985.22, 'text': ' is why I keep putting this also let us look at another example I have a two-dimensional', 'tokens': [50364, 307, 983, 286, 1066, 3372, 341, 611, 718, 505, 574, 412, 1071, 1365, 286, 362, 257, 732, 12, 18759, 50688], 'temperature': 0.0, 'avg_logprob': -0.22288031805129277, 'compression_ratio': 1.658682634730539, 'no_speech_prob': 0.0008090806077234447}, {'id': 300, 'seek': 197874, 'start': 1985.22, 'end': 1992.22, 'text': ' loop nest and I am accessing a single dimensional array right now what happens here right there', 'tokens': [50688, 6367, 15646, 293, 286, 669, 26440, 257, 2167, 18795, 10225, 558, 586, 437, 2314, 510, 558, 456, 51038], 'temperature': 0.0, 'avg_logprob': -0.22288031805129277, 'compression_ratio': 1.658682634730539, 'no_speech_prob': 0.0008090806077234447}, {'id': 301, 'seek': 197874, 'start': 1997.66, 'end': 2004.66, 'text': ' is a dependence from the i th iteration to the i plus 1 th iteration right and this iteration', 'tokens': [51310, 307, 257, 31704, 490, 264, 741, 258, 24784, 281, 264, 741, 1804, 502, 258, 24784, 558, 293, 341, 24784, 51660], 'temperature': 0.0, 'avg_logprob': -0.22288031805129277, 'compression_ratio': 1.658682634730539, 'no_speech_prob': 0.0008090806077234447}, {'id': 302, 'seek': 200466, 'start': 2005.66, 'end': 2012.66, 'text': ' is there for all j iterations so in this case right the first distance vector is 1 the second', 'tokens': [50414, 307, 456, 337, 439, 361, 36540, 370, 294, 341, 1389, 558, 264, 700, 4560, 8062, 307, 502, 264, 1150, 50764], 'temperature': 0.0, 'avg_logprob': -0.16554583364458225, 'compression_ratio': 1.6832298136645962, 'no_speech_prob': 0.0014735654694959521}, {'id': 303, 'seek': 200466, 'start': 2015.78, 'end': 2022.78, 'text': ' distance vector is dash or star right so as long as you have i and i plus 1 whatever is', 'tokens': [50920, 4560, 8062, 307, 8240, 420, 3543, 558, 370, 382, 938, 382, 291, 362, 741, 293, 741, 1804, 502, 2035, 307, 51270], 'temperature': 0.0, 'avg_logprob': -0.16554583364458225, 'compression_ratio': 1.6832298136645962, 'no_speech_prob': 0.0014735654694959521}, {'id': 304, 'seek': 200466, 'start': 2025.5, 'end': 2031.74, 'text': ' the value of j does not really matter j is in this case like do not care correct so there', 'tokens': [51406, 264, 2158, 295, 361, 775, 406, 534, 1871, 361, 307, 294, 341, 1389, 411, 360, 406, 1127, 3006, 370, 456, 51718], 'temperature': 0.0, 'avg_logprob': -0.16554583364458225, 'compression_ratio': 1.6832298136645962, 'no_speech_prob': 0.0014735654694959521}, {'id': 305, 'seek': 203174, 'start': 2031.74, 'end': 2038.74, 'text': ' is a dependence that is represented as 1, dash or less than, star there are also other', 'tokens': [50364, 307, 257, 31704, 300, 307, 10379, 382, 502, 11, 8240, 420, 1570, 813, 11, 3543, 456, 366, 611, 661, 50714], 'temperature': 0.0, 'avg_logprob': -0.1392451838443154, 'compression_ratio': 1.6586538461538463, 'no_speech_prob': 0.0019152871100232005}, {'id': 306, 'seek': 203174, 'start': 2040.1, 'end': 2044.6200000000001, 'text': ' complicated things but I will not get into this in this lecture right we want to kind', 'tokens': [50782, 6179, 721, 457, 286, 486, 406, 483, 666, 341, 294, 341, 7991, 558, 321, 528, 281, 733, 51008], 'temperature': 0.0, 'avg_logprob': -0.1392451838443154, 'compression_ratio': 1.6586538461538463, 'no_speech_prob': 0.0019152871100232005}, {'id': 307, 'seek': 203174, 'start': 2044.6200000000001, 'end': 2049.94, 'text': ' of quickly get to some basic transformations and things like that so does this give you', 'tokens': [51008, 295, 2661, 483, 281, 512, 3875, 34852, 293, 721, 411, 300, 370, 775, 341, 976, 291, 51274], 'temperature': 0.0, 'avg_logprob': -0.1392451838443154, 'compression_ratio': 1.6586538461538463, 'no_speech_prob': 0.0019152871100232005}, {'id': 308, 'seek': 203174, 'start': 2049.94, 'end': 2055.7, 'text': ' a good picture of what dependence distance vectors are and direction vectors are any', 'tokens': [51274, 257, 665, 3036, 295, 437, 31704, 4560, 18875, 366, 293, 3513, 18875, 366, 604, 51562], 'temperature': 0.0, 'avg_logprob': -0.1392451838443154, 'compression_ratio': 1.6586538461538463, 'no_speech_prob': 0.0019152871100232005}, {'id': 309, 'seek': 205570, 'start': 2055.7, 'end': 2062.7, 'text': ' confusion no okay good understood that as I mentioned earlier okay again look at the', 'tokens': [50364, 15075, 572, 1392, 665, 7320, 300, 382, 286, 2835, 3071, 1392, 797, 574, 412, 264, 50714], 'temperature': 0.0, 'avg_logprob': -0.17273775736490884, 'compression_ratio': 1.7018633540372672, 'no_speech_prob': 0.0045023225247859955}, {'id': 310, 'seek': 205570, 'start': 2063.8199999999997, 'end': 2070.3399999999997, 'text': ' same definition of dependence there is a dependence from s 1 to s 2 if s 1 is an iteration vector', 'tokens': [50770, 912, 7123, 295, 31704, 456, 307, 257, 31704, 490, 262, 502, 281, 262, 568, 498, 262, 502, 307, 364, 24784, 8062, 51096], 'temperature': 0.0, 'avg_logprob': -0.17273775736490884, 'compression_ratio': 1.7018633540372672, 'no_speech_prob': 0.0045023225247859955}, {'id': 311, 'seek': 205570, 'start': 2070.3399999999997, 'end': 2077.3399999999997, 'text': ' i and s 2 in iteration j access the same memory location and if i is equal to j that is the', 'tokens': [51096, 741, 293, 262, 568, 294, 24784, 361, 2105, 264, 912, 4675, 4914, 293, 498, 741, 307, 2681, 281, 361, 300, 307, 264, 51446], 'temperature': 0.0, 'avg_logprob': -0.17273775736490884, 'compression_ratio': 1.7018633540372672, 'no_speech_prob': 0.0045023225247859955}, {'id': 312, 'seek': 207734, 'start': 2078.34, 'end': 2085.34, 'text': ' two iteration vectors are same then it means it is a loop independent dependence correct', 'tokens': [50414, 732, 24784, 18875, 366, 912, 550, 309, 1355, 309, 307, 257, 6367, 6695, 31704, 3006, 50764], 'temperature': 0.0, 'avg_logprob': -0.13776357712284212, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.003921633120626211}, {'id': 313, 'seek': 207734, 'start': 2086.6200000000003, 'end': 2093.6200000000003, 'text': ' that is the case of 0 0 if i is different from j then it is a loop carried dependence', 'tokens': [50828, 300, 307, 264, 1389, 295, 1958, 1958, 498, 741, 307, 819, 490, 361, 550, 309, 307, 257, 6367, 9094, 31704, 51178], 'temperature': 0.0, 'avg_logprob': -0.13776357712284212, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.003921633120626211}, {'id': 314, 'seek': 207734, 'start': 2094.1400000000003, 'end': 2100.82, 'text': ' if the iteration vector i is less than the iteration vector j and i happens to be a right', 'tokens': [51204, 498, 264, 24784, 8062, 741, 307, 1570, 813, 264, 24784, 8062, 361, 293, 741, 2314, 281, 312, 257, 558, 51538], 'temperature': 0.0, 'avg_logprob': -0.13776357712284212, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.003921633120626211}, {'id': 315, 'seek': 210082, 'start': 2100.9, 'end': 2107.9, 'text': ' then it is a true dependence right if j happens to be a right then it is a war dependence', 'tokens': [50368, 550, 309, 307, 257, 2074, 31704, 558, 498, 361, 2314, 281, 312, 257, 558, 550, 309, 307, 257, 1516, 31704, 50718], 'temperature': 0.0, 'avg_logprob': -0.1329251943009623, 'compression_ratio': 1.9095744680851063, 'no_speech_prob': 0.0046711089089512825}, {'id': 316, 'seek': 210082, 'start': 2109.34, 'end': 2115.54, 'text': ' and so on if both of them happen to be rights then it is a war dependence okay we can define', 'tokens': [50790, 293, 370, 322, 498, 1293, 295, 552, 1051, 281, 312, 4601, 550, 309, 307, 257, 1516, 31704, 1392, 321, 393, 6964, 51100], 'temperature': 0.0, 'avg_logprob': -0.1329251943009623, 'compression_ratio': 1.9095744680851063, 'no_speech_prob': 0.0046711089089512825}, {'id': 317, 'seek': 210082, 'start': 2115.54, 'end': 2122.42, 'text': ' that okay this is an important point let me try to spend some time on this so when i is', 'tokens': [51100, 300, 1392, 341, 307, 364, 1021, 935, 718, 385, 853, 281, 3496, 512, 565, 322, 341, 370, 562, 741, 307, 51444], 'temperature': 0.0, 'avg_logprob': -0.1329251943009623, 'compression_ratio': 1.9095744680851063, 'no_speech_prob': 0.0046711089089512825}, {'id': 318, 'seek': 210082, 'start': 2122.42, 'end': 2128.76, 'text': ' not equal to j and the distance vector has to be positive we use the word positive again', 'tokens': [51444, 406, 2681, 281, 361, 293, 264, 4560, 8062, 575, 281, 312, 3353, 321, 764, 264, 1349, 3353, 797, 51761], 'temperature': 0.0, 'avg_logprob': -0.1329251943009623, 'compression_ratio': 1.9095744680851063, 'no_speech_prob': 0.0046711089089512825}, {'id': 319, 'seek': 212876, 'start': 2128.76, 'end': 2133.4, 'text': ' let us see we can go back to that example and then talk about it so whenever you talk', 'tokens': [50364, 718, 505, 536, 321, 393, 352, 646, 281, 300, 1365, 293, 550, 751, 466, 309, 370, 5699, 291, 751, 50596], 'temperature': 0.0, 'avg_logprob': -0.15761335690816244, 'compression_ratio': 1.96045197740113, 'no_speech_prob': 0.002791880862787366}, {'id': 320, 'seek': 212876, 'start': 2133.4, 'end': 2140.4, 'text': ' about a true dependence right well not just for true dependence even for other thing but', 'tokens': [50596, 466, 257, 2074, 31704, 558, 731, 406, 445, 337, 2074, 31704, 754, 337, 661, 551, 457, 50946], 'temperature': 0.0, 'avg_logprob': -0.15761335690816244, 'compression_ratio': 1.96045197740113, 'no_speech_prob': 0.002791880862787366}, {'id': 321, 'seek': 212876, 'start': 2140.46, 'end': 2144.76, 'text': ' even for the other dependences you need this but let us first try to talk about it for', 'tokens': [50949, 754, 337, 264, 661, 5672, 2667, 291, 643, 341, 457, 718, 505, 700, 853, 281, 751, 466, 309, 337, 51164], 'temperature': 0.0, 'avg_logprob': -0.15761335690816244, 'compression_ratio': 1.96045197740113, 'no_speech_prob': 0.002791880862787366}, {'id': 322, 'seek': 212876, 'start': 2144.76, 'end': 2151.76, 'text': ' the true dependence we say that a of i j k or the value produced in the iteration i j', 'tokens': [51164, 264, 2074, 31704, 321, 584, 300, 257, 295, 741, 361, 350, 420, 264, 2158, 7126, 294, 264, 24784, 741, 361, 51514], 'temperature': 0.0, 'avg_logprob': -0.15761335690816244, 'compression_ratio': 1.96045197740113, 'no_speech_prob': 0.002791880862787366}, {'id': 323, 'seek': 215176, 'start': 2152.6400000000003, 'end': 2159.6400000000003, 'text': ' k right is going to be consumed by the iteration i i plus 1 j k minus 1 so there is a dependence', 'tokens': [50408, 350, 558, 307, 516, 281, 312, 21226, 538, 264, 24784, 741, 741, 1804, 502, 361, 350, 3175, 502, 370, 456, 307, 257, 31704, 50758], 'temperature': 0.0, 'avg_logprob': -0.17032261748812091, 'compression_ratio': 1.7662337662337662, 'no_speech_prob': 0.0016443097265437245}, {'id': 324, 'seek': 215176, 'start': 2163.1600000000003, 'end': 2168.76, 'text': ' from that vector to this vector that is what we say but this dependence it starts with', 'tokens': [50934, 490, 300, 8062, 281, 341, 8062, 300, 307, 437, 321, 584, 457, 341, 31704, 309, 3719, 365, 51214], 'temperature': 0.0, 'avg_logprob': -0.17032261748812091, 'compression_ratio': 1.7662337662337662, 'no_speech_prob': 0.0016443097265437245}, {'id': 325, 'seek': 215176, 'start': 2168.76, 'end': 2175.76, 'text': ' a 1 0 and a minus 1 we call this vector right we call this dependence vector as positive', 'tokens': [51214, 257, 502, 1958, 293, 257, 3175, 502, 321, 818, 341, 8062, 558, 321, 818, 341, 31704, 8062, 382, 3353, 51564], 'temperature': 0.0, 'avg_logprob': -0.17032261748812091, 'compression_ratio': 1.7662337662337662, 'no_speech_prob': 0.0016443097265437245}, {'id': 326, 'seek': 217576, 'start': 2176.76, 'end': 2183.76, 'text': ' right because the first non zero element is positive in this vector the first non zero', 'tokens': [50414, 558, 570, 264, 700, 2107, 4018, 4478, 307, 3353, 294, 341, 8062, 264, 700, 2107, 4018, 50764], 'temperature': 0.0, 'avg_logprob': -0.18979846636454265, 'compression_ratio': 1.9710144927536233, 'no_speech_prob': 0.003355642082169652}, {'id': 327, 'seek': 217576, 'start': 2185.48, 'end': 2192.48, 'text': ' element is positive right if the first non zero element is negative let us see what happens', 'tokens': [50850, 4478, 307, 3353, 558, 498, 264, 700, 2107, 4018, 4478, 307, 3671, 718, 505, 536, 437, 2314, 51200], 'temperature': 0.0, 'avg_logprob': -0.18979846636454265, 'compression_ratio': 1.9710144927536233, 'no_speech_prob': 0.003355642082169652}, {'id': 328, 'seek': 217576, 'start': 2193.2000000000003, 'end': 2200.2000000000003, 'text': ' right okay let us again write the following a of i j k or the value produced in the iteration', 'tokens': [51236, 558, 1392, 718, 505, 797, 2464, 264, 3480, 257, 295, 741, 361, 350, 420, 264, 2158, 7126, 294, 264, 24784, 51586], 'temperature': 0.0, 'avg_logprob': -0.18979846636454265, 'compression_ratio': 1.9710144927536233, 'no_speech_prob': 0.003355642082169652}, {'id': 329, 'seek': 220576, 'start': 2206.6000000000004, 'end': 2213.6000000000004, 'text': ' equal to a of i plus 1 j correct let us assume a two dimensional loop now what does this', 'tokens': [50406, 2681, 281, 257, 295, 741, 1804, 502, 361, 3006, 718, 505, 6552, 257, 732, 18795, 6367, 586, 437, 775, 341, 50756], 'temperature': 0.0, 'avg_logprob': -0.1942502312038256, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.02266322635114193}, {'id': 330, 'seek': 220576, 'start': 2222.48, 'end': 2229.48, 'text': ' mean i am talking about some statement s 1 to itself okay now if i am looking at it from', 'tokens': [51200, 914, 741, 669, 1417, 466, 512, 5629, 262, 502, 281, 2564, 1392, 586, 498, 741, 669, 1237, 412, 309, 490, 51550], 'temperature': 0.0, 'avg_logprob': -0.1942502312038256, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.02266322635114193}, {'id': 331, 'seek': 222948, 'start': 2229.48, 'end': 2236.48, 'text': ' here to here right okay now if i am looking at it from here to here all i know is that', 'tokens': [50364, 510, 281, 510, 558, 1392, 586, 498, 741, 669, 1237, 412, 309, 490, 510, 281, 510, 439, 741, 458, 307, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.1600184073814979, 'compression_ratio': 1.6948051948051948, 'no_speech_prob': 0.005915559362620115}, {'id': 332, 'seek': 222948, 'start': 2247.2, 'end': 2254.04, 'text': ' can you say something about it what can you say about this if it had been i minus 1 you', 'tokens': [51250, 393, 291, 584, 746, 466, 309, 437, 393, 291, 584, 466, 341, 498, 309, 632, 668, 741, 3175, 502, 291, 51592], 'temperature': 0.0, 'avg_logprob': -0.1600184073814979, 'compression_ratio': 1.6948051948051948, 'no_speech_prob': 0.005915559362620115}, {'id': 333, 'seek': 222948, 'start': 2254.04, 'end': 2258.84, 'text': ' know that the value produced here is being consumed in the next iteration but now here', 'tokens': [51592, 458, 300, 264, 2158, 7126, 510, 307, 885, 21226, 294, 264, 958, 24784, 457, 586, 510, 51832], 'temperature': 0.0, 'avg_logprob': -0.1600184073814979, 'compression_ratio': 1.6948051948051948, 'no_speech_prob': 0.005915559362620115}, {'id': 334, 'seek': 225884, 'start': 2258.84, 'end': 2265.84, 'text': ' is the case that the value in a i j must be consumed right before the i plus 1 jth iteration', 'tokens': [50364, 307, 264, 1389, 300, 264, 2158, 294, 257, 741, 361, 1633, 312, 21226, 558, 949, 264, 741, 1804, 502, 361, 392, 24784, 50714], 'temperature': 0.0, 'avg_logprob': -0.21544123755560982, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.00199831067584455}, {'id': 335, 'seek': 225884, 'start': 2272.6000000000004, 'end': 2279.6000000000004, 'text': ' writes into it correct so in this case the dependence vector okay is minus 1 comma 0', 'tokens': [51052, 13657, 666, 309, 3006, 370, 294, 341, 1389, 264, 31704, 8062, 1392, 307, 3175, 502, 22117, 1958, 51402], 'temperature': 0.0, 'avg_logprob': -0.21544123755560982, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.00199831067584455}, {'id': 336, 'seek': 227960, 'start': 2279.6, 'end': 2286.6, 'text': ' right but that is if you are looking at it from the left hand side to the right hand', 'tokens': [50364, 558, 457, 300, 307, 498, 291, 366, 1237, 412, 309, 490, 264, 1411, 1011, 1252, 281, 264, 558, 1011, 50714], 'temperature': 0.0, 'avg_logprob': -0.20721432420073962, 'compression_ratio': 1.9923664122137406, 'no_speech_prob': 0.0029175765812397003}, {'id': 337, 'seek': 227960, 'start': 2292.12, 'end': 2299.12, 'text': ' side right and that kind of a dependence cannot exist cannot satisfy that it is not a true', 'tokens': [50990, 1252, 558, 293, 300, 733, 295, 257, 31704, 2644, 2514, 2644, 19319, 300, 309, 307, 406, 257, 2074, 51340], 'temperature': 0.0, 'avg_logprob': -0.20721432420073962, 'compression_ratio': 1.9923664122137406, 'no_speech_prob': 0.0029175765812397003}, {'id': 338, 'seek': 227960, 'start': 2299.3199999999997, 'end': 2303.2, 'text': ' dependence if you think of this as a true dependence that kind of a dependence cannot', 'tokens': [51350, 31704, 498, 291, 519, 295, 341, 382, 257, 2074, 31704, 300, 733, 295, 257, 31704, 2644, 51544], 'temperature': 0.0, 'avg_logprob': -0.20721432420073962, 'compression_ratio': 1.9923664122137406, 'no_speech_prob': 0.0029175765812397003}, {'id': 339, 'seek': 230320, 'start': 2303.2799999999997, 'end': 2308.96, 'text': ' exist because that means that i plus 1 jth iteration has to be executed before i jth', 'tokens': [50368, 2514, 570, 300, 1355, 300, 741, 1804, 502, 361, 392, 24784, 575, 281, 312, 17577, 949, 741, 361, 392, 50652], 'temperature': 0.0, 'avg_logprob': -0.18163771629333497, 'compression_ratio': 1.9234972677595628, 'no_speech_prob': 0.006574220024049282}, {'id': 340, 'seek': 230320, 'start': 2308.96, 'end': 2315.96, 'text': ' iteration that is not possible so if you have a legal dependence in the legal dependence', 'tokens': [50652, 24784, 300, 307, 406, 1944, 370, 498, 291, 362, 257, 5089, 31704, 294, 264, 5089, 31704, 51002], 'temperature': 0.0, 'avg_logprob': -0.18163771629333497, 'compression_ratio': 1.9234972677595628, 'no_speech_prob': 0.006574220024049282}, {'id': 341, 'seek': 230320, 'start': 2316.08, 'end': 2323.08, 'text': ' the distance vector will always have the first element as first non-zero element right the', 'tokens': [51008, 264, 4560, 8062, 486, 1009, 362, 264, 700, 4478, 382, 700, 2107, 12, 32226, 4478, 558, 264, 51358], 'temperature': 0.0, 'avg_logprob': -0.18163771629333497, 'compression_ratio': 1.9234972677595628, 'no_speech_prob': 0.006574220024049282}, {'id': 342, 'seek': 230320, 'start': 2323.72, 'end': 2330.72, 'text': ' first non-zero element as positive okay if the first non-zero element is negative right', 'tokens': [51390, 700, 2107, 12, 32226, 4478, 382, 3353, 1392, 498, 264, 700, 2107, 12, 32226, 4478, 307, 3671, 558, 51740], 'temperature': 0.0, 'avg_logprob': -0.18163771629333497, 'compression_ratio': 1.9234972677595628, 'no_speech_prob': 0.006574220024049282}, {'id': 343, 'seek': 233072, 'start': 2331.2799999999997, 'end': 2337.48, 'text': ' either you have talk you are talking about the dependence in the other direction correct', 'tokens': [50392, 2139, 291, 362, 751, 291, 366, 1417, 466, 264, 31704, 294, 264, 661, 3513, 3006, 50702], 'temperature': 0.0, 'avg_logprob': -0.21240447403548599, 'compression_ratio': 2.109090909090909, 'no_speech_prob': 0.004575739614665508}, {'id': 344, 'seek': 233072, 'start': 2337.48, 'end': 2340.72, 'text': ' you are talking about the dependence in the other direction i am looking at a dependence', 'tokens': [50702, 291, 366, 1417, 466, 264, 31704, 294, 264, 661, 3513, 741, 669, 1237, 412, 257, 31704, 50864], 'temperature': 0.0, 'avg_logprob': -0.21240447403548599, 'compression_ratio': 2.109090909090909, 'no_speech_prob': 0.004575739614665508}, {'id': 345, 'seek': 233072, 'start': 2340.72, 'end': 2347.72, 'text': ' from here to here right from this side to this side it would have been 1 0 right so', 'tokens': [50864, 490, 510, 281, 510, 558, 490, 341, 1252, 281, 341, 1252, 309, 576, 362, 668, 502, 1958, 558, 370, 51214], 'temperature': 0.0, 'avg_logprob': -0.21240447403548599, 'compression_ratio': 2.109090909090909, 'no_speech_prob': 0.004575739614665508}, {'id': 346, 'seek': 233072, 'start': 2348.7599999999998, 'end': 2354.7599999999998, 'text': ' any legal dependence has to be positive and by positive what we mean is that the first', 'tokens': [51266, 604, 5089, 31704, 575, 281, 312, 3353, 293, 538, 3353, 437, 321, 914, 307, 300, 264, 700, 51566], 'temperature': 0.0, 'avg_logprob': -0.21240447403548599, 'compression_ratio': 2.109090909090909, 'no_speech_prob': 0.004575739614665508}, {'id': 347, 'seek': 235476, 'start': 2354.76, 'end': 2360.84, 'text': ' non-zero element has to be greater than 0 i mean yeah the first non-zero element has', 'tokens': [50364, 2107, 12, 32226, 4478, 575, 281, 312, 5044, 813, 1958, 741, 914, 1338, 264, 700, 2107, 12, 32226, 4478, 575, 50668], 'temperature': 0.0, 'avg_logprob': -0.20845110663052263, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0009180291672237217}, {'id': 348, 'seek': 235476, 'start': 2360.84, 'end': 2367.84, 'text': ' to be positive okay or we can also say in the case of dependence in the case of direction', 'tokens': [50668, 281, 312, 3353, 1392, 420, 321, 393, 611, 584, 294, 264, 1389, 295, 31704, 294, 264, 1389, 295, 3513, 51018], 'temperature': 0.0, 'avg_logprob': -0.20845110663052263, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0009180291672237217}, {'id': 349, 'seek': 235476, 'start': 2367.84, 'end': 2374.84, 'text': ' vector the first non-equal sign has to be less than both are same right so is that clear', 'tokens': [51018, 8062, 264, 700, 2107, 12, 12816, 304, 1465, 575, 281, 312, 1570, 813, 1293, 366, 912, 558, 370, 307, 300, 1850, 51368], 'temperature': 0.0, 'avg_logprob': -0.20845110663052263, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0009180291672237217}, {'id': 350, 'seek': 235476, 'start': 2377.6000000000004, 'end': 2383.0400000000004, 'text': ' so whenever we talk about a dependence a true dependence that dependence i mean not in the', 'tokens': [51506, 370, 5699, 321, 751, 466, 257, 31704, 257, 2074, 31704, 300, 31704, 741, 914, 406, 294, 264, 51778], 'temperature': 0.0, 'avg_logprob': -0.20845110663052263, 'compression_ratio': 1.945054945054945, 'no_speech_prob': 0.0009180291672237217}, {'id': 351, 'seek': 238304, 'start': 2383.04, 'end': 2387.8, 'text': ' case of true dependence like flow dependence what i meant to say is that whenever you talk', 'tokens': [50364, 1389, 295, 2074, 31704, 411, 3095, 31704, 437, 741, 4140, 281, 584, 307, 300, 5699, 291, 751, 50602], 'temperature': 0.0, 'avg_logprob': -0.158978513492051, 'compression_ratio': 2.0675675675675675, 'no_speech_prob': 0.0013448401587083936}, {'id': 352, 'seek': 238304, 'start': 2387.8, 'end': 2394.12, 'text': ' about a dependence in a particular direction if it is positive then that is a dependence', 'tokens': [50602, 466, 257, 31704, 294, 257, 1729, 3513, 498, 309, 307, 3353, 550, 300, 307, 257, 31704, 50918], 'temperature': 0.0, 'avg_logprob': -0.158978513492051, 'compression_ratio': 2.0675675675675675, 'no_speech_prob': 0.0013448401587083936}, {'id': 353, 'seek': 238304, 'start': 2394.12, 'end': 2399.12, 'text': ' if it is negative then you are actually reversing the dependence that is really what is happen', 'tokens': [50918, 498, 309, 307, 3671, 550, 291, 366, 767, 14582, 278, 264, 31704, 300, 307, 534, 437, 307, 1051, 51168], 'temperature': 0.0, 'avg_logprob': -0.158978513492051, 'compression_ratio': 2.0675675675675675, 'no_speech_prob': 0.0013448401587083936}, {'id': 354, 'seek': 238304, 'start': 2399.12, 'end': 2405.12, 'text': ' okay okay now we will talk about loop transformations there are several loop transformations that', 'tokens': [51168, 1392, 1392, 586, 321, 486, 751, 466, 6367, 34852, 456, 366, 2940, 6367, 34852, 300, 51468], 'temperature': 0.0, 'avg_logprob': -0.158978513492051, 'compression_ratio': 2.0675675675675675, 'no_speech_prob': 0.0013448401587083936}, {'id': 355, 'seek': 238304, 'start': 2405.12, 'end': 2410.2, 'text': ' are possible right initially i will tell you what the loop transformation is and later', 'tokens': [51468, 366, 1944, 558, 9105, 741, 486, 980, 291, 437, 264, 6367, 9887, 307, 293, 1780, 51722], 'temperature': 0.0, 'avg_logprob': -0.158978513492051, 'compression_ratio': 2.0675675675675675, 'no_speech_prob': 0.0013448401587083936}, {'id': 356, 'seek': 241020, 'start': 2410.2, 'end': 2415.72, 'text': ' on you can figure out where it is useful you also have to see whether these loop transformations', 'tokens': [50364, 322, 291, 393, 2573, 484, 689, 309, 307, 4420, 291, 611, 362, 281, 536, 1968, 613, 6367, 34852, 50640], 'temperature': 0.0, 'avg_logprob': -0.16161685392081018, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.012002889066934586}, {'id': 357, 'seek': 241020, 'start': 2415.72, 'end': 2421.3599999999997, 'text': ' are legal to be performed anything is legal only if it satisfies all the dependences otherwise', 'tokens': [50640, 366, 5089, 281, 312, 10332, 1340, 307, 5089, 787, 498, 309, 44271, 439, 264, 5672, 2667, 5911, 50922], 'temperature': 0.0, 'avg_logprob': -0.16161685392081018, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.012002889066934586}, {'id': 358, 'seek': 241020, 'start': 2421.3599999999997, 'end': 2428.3599999999997, 'text': ' it is not legal okay let us look at it first thing is loop unrolling do we know this right', 'tokens': [50922, 309, 307, 406, 5089, 1392, 718, 505, 574, 412, 309, 700, 551, 307, 6367, 517, 18688, 360, 321, 458, 341, 558, 51272], 'temperature': 0.0, 'avg_logprob': -0.16161685392081018, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.012002889066934586}, {'id': 359, 'seek': 241020, 'start': 2430.72, 'end': 2437.72, 'text': ' so essentially it is duplicating the loop body multiple times okay so unrolling it twice', 'tokens': [51390, 370, 4476, 309, 307, 17154, 990, 264, 6367, 1772, 3866, 1413, 1392, 370, 517, 18688, 309, 6091, 51740], 'temperature': 0.0, 'avg_logprob': -0.16161685392081018, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.012002889066934586}, {'id': 360, 'seek': 243772, 'start': 2438.12, 'end': 2445.12, 'text': ' essentially means this right is loop unrolling legal loop unrolling is always legal okay', 'tokens': [50384, 4476, 1355, 341, 558, 307, 6367, 517, 18688, 5089, 6367, 517, 18688, 307, 1009, 5089, 1392, 50734], 'temperature': 0.0, 'avg_logprob': -0.16277296919571727, 'compression_ratio': 1.9447513812154695, 'no_speech_prob': 0.0016982747474685311}, {'id': 361, 'seek': 243772, 'start': 2447.2799999999997, 'end': 2453.4399999999996, 'text': ' as long as the index variable that is the counts are actually taken care of in the proper', 'tokens': [50842, 382, 938, 382, 264, 8186, 7006, 300, 307, 264, 14893, 366, 767, 2726, 1127, 295, 294, 264, 2296, 51150], 'temperature': 0.0, 'avg_logprob': -0.16277296919571727, 'compression_ratio': 1.9447513812154695, 'no_speech_prob': 0.0016982747474685311}, {'id': 362, 'seek': 243772, 'start': 2453.4399999999996, 'end': 2460.4399999999996, 'text': ' way right it is always legal right where do you do loop unrolling we did right we did', 'tokens': [51150, 636, 558, 309, 307, 1009, 5089, 558, 689, 360, 291, 360, 6367, 517, 18688, 321, 630, 558, 321, 630, 51500], 'temperature': 0.0, 'avg_logprob': -0.16277296919571727, 'compression_ratio': 1.9447513812154695, 'no_speech_prob': 0.0016982747474685311}, {'id': 363, 'seek': 243772, 'start': 2461.08, 'end': 2466.68, 'text': ' loop unrolling specifically for instruction scheduling increasing the size of the basic', 'tokens': [51532, 6367, 517, 18688, 4682, 337, 10951, 29055, 5662, 264, 2744, 295, 264, 3875, 51812], 'temperature': 0.0, 'avg_logprob': -0.16277296919571727, 'compression_ratio': 1.9447513812154695, 'no_speech_prob': 0.0016982747474685311}, {'id': 364, 'seek': 246668, 'start': 2466.68, 'end': 2473.68, 'text': ' blocks right you do loop unrolling right loop rolling is the opposite of unrolling', 'tokens': [50364, 8474, 558, 291, 360, 6367, 517, 18688, 558, 6367, 9439, 307, 264, 6182, 295, 517, 18688, 50714], 'temperature': 0.0, 'avg_logprob': -0.18979366302490233, 'compression_ratio': 1.7933333333333332, 'no_speech_prob': 0.003611421212553978}, {'id': 365, 'seek': 246668, 'start': 2475.72, 'end': 2482.72, 'text': ' correct so here is a very complex set of statement but if you look at it everywhere i have z', 'tokens': [50816, 3006, 370, 510, 307, 257, 588, 3997, 992, 295, 5629, 457, 498, 291, 574, 412, 309, 5315, 741, 362, 710, 51166], 'temperature': 0.0, 'avg_logprob': -0.18979366302490233, 'compression_ratio': 1.7933333333333332, 'no_speech_prob': 0.003611421212553978}, {'id': 366, 'seek': 246668, 'start': 2482.72, 'end': 2489.72, 'text': ' k z k plus 1 k plus 2 k plus 3 x k x k plus 1 k plus 2 k plus 3 so it is a four time unrolled', 'tokens': [51166, 350, 710, 350, 1804, 502, 350, 1804, 568, 350, 1804, 805, 2031, 350, 2031, 350, 1804, 502, 350, 1804, 568, 350, 1804, 805, 370, 309, 307, 257, 1451, 565, 517, 28850, 51516], 'temperature': 0.0, 'avg_logprob': -0.18979366302490233, 'compression_ratio': 1.7933333333333332, 'no_speech_prob': 0.003611421212553978}, {'id': 367, 'seek': 248972, 'start': 2490.72, 'end': 2497.72, 'text': ' version right or five times unrolled version that can be rolled back into this version', 'tokens': [50414, 3037, 558, 420, 1732, 1413, 517, 28850, 3037, 300, 393, 312, 14306, 646, 666, 341, 3037, 50764], 'temperature': 0.0, 'avg_logprob': -0.1515114277969172, 'compression_ratio': 1.8306878306878307, 'no_speech_prob': 0.0028302203863859177}, {'id': 368, 'seek': 248972, 'start': 2497.8399999999997, 'end': 2502.8399999999997, 'text': ' right typically this transformation is never done but just for our understanding i put', 'tokens': [50770, 558, 5850, 341, 9887, 307, 1128, 1096, 457, 445, 337, 527, 3701, 741, 829, 51020], 'temperature': 0.0, 'avg_logprob': -0.1515114277969172, 'compression_ratio': 1.8306878306878307, 'no_speech_prob': 0.0028302203863859177}, {'id': 369, 'seek': 248972, 'start': 2502.8399999999997, 'end': 2509.8399999999997, 'text': ' that loop peeling let us look at loop peeling right now in this program or in this piece', 'tokens': [51020, 300, 6367, 39926, 718, 505, 574, 412, 6367, 39926, 558, 586, 294, 341, 1461, 420, 294, 341, 2522, 51370], 'temperature': 0.0, 'avg_logprob': -0.1515114277969172, 'compression_ratio': 1.8306878306878307, 'no_speech_prob': 0.0028302203863859177}, {'id': 370, 'seek': 248972, 'start': 2510.7599999999998, 'end': 2517.7599999999998, 'text': ' of code i goes from 1 to n a of i is a of i plus a of 1 right now try to understand', 'tokens': [51416, 295, 3089, 741, 1709, 490, 502, 281, 297, 257, 295, 741, 307, 257, 295, 741, 1804, 257, 295, 502, 558, 586, 853, 281, 1223, 51766], 'temperature': 0.0, 'avg_logprob': -0.1515114277969172, 'compression_ratio': 1.8306878306878307, 'no_speech_prob': 0.0028302203863859177}, {'id': 371, 'seek': 251972, 'start': 2519.72, 'end': 2526.52, 'text': ' analyze the dependence for the statements the first iteration is obviously dependent', 'tokens': [50364, 12477, 264, 31704, 337, 264, 12363, 264, 700, 24784, 307, 2745, 12334, 50704], 'temperature': 0.0, 'avg_logprob': -0.14482695177981728, 'compression_ratio': 2.2420382165605095, 'no_speech_prob': 0.0020874564070254564}, {'id': 372, 'seek': 251972, 'start': 2526.52, 'end': 2533.52, 'text': ' on itself a of 1 what about the second iteration in the first iteration we would have produced', 'tokens': [50704, 322, 2564, 257, 295, 502, 437, 466, 264, 1150, 24784, 294, 264, 700, 24784, 321, 576, 362, 7126, 51054], 'temperature': 0.0, 'avg_logprob': -0.14482695177981728, 'compression_ratio': 2.2420382165605095, 'no_speech_prob': 0.0020874564070254564}, {'id': 373, 'seek': 251972, 'start': 2534.16, 'end': 2541.16, 'text': ' a of 1 the second iteration a of 1 is being consumed in the third iteration a of 1 is', 'tokens': [51086, 257, 295, 502, 264, 1150, 24784, 257, 295, 502, 307, 885, 21226, 294, 264, 2636, 24784, 257, 295, 502, 307, 51436], 'temperature': 0.0, 'avg_logprob': -0.14482695177981728, 'compression_ratio': 2.2420382165605095, 'no_speech_prob': 0.0020874564070254564}, {'id': 374, 'seek': 251972, 'start': 2541.3199999999997, 'end': 2547.04, 'text': ' being consumed in the fourth iteration a of 1 is being consumed so essentially in this', 'tokens': [51444, 885, 21226, 294, 264, 6409, 24784, 257, 295, 502, 307, 885, 21226, 370, 4476, 294, 341, 51730], 'temperature': 0.0, 'avg_logprob': -0.14482695177981728, 'compression_ratio': 2.2420382165605095, 'no_speech_prob': 0.0020874564070254564}, {'id': 375, 'seek': 254704, 'start': 2547.04, 'end': 2554.04, 'text': ' case what we have is that all iterations are dependent on a of 1 so we cannot execute this', 'tokens': [50364, 1389, 437, 321, 362, 307, 300, 439, 36540, 366, 12334, 322, 257, 295, 502, 370, 321, 2644, 14483, 341, 50714], 'temperature': 0.0, 'avg_logprob': -0.17903498749234784, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.0030585017520934343}, {'id': 376, 'seek': 254704, 'start': 2554.56, 'end': 2561.56, 'text': ' loop in parallel or we cannot vectorize correct that is a bad thing because if i have a vectorizable', 'tokens': [50740, 6367, 294, 8952, 420, 321, 2644, 8062, 1125, 3006, 300, 307, 257, 1578, 551, 570, 498, 741, 362, 257, 8062, 22395, 51090], 'temperature': 0.0, 'avg_logprob': -0.17903498749234784, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.0030585017520934343}, {'id': 377, 'seek': 254704, 'start': 2564.08, 'end': 2571.08, 'text': ' a processor like a v x or something available and if i have this loop i cannot vectorize', 'tokens': [51216, 257, 15321, 411, 257, 371, 2031, 420, 746, 2435, 293, 498, 741, 362, 341, 6367, 741, 2644, 8062, 1125, 51566], 'temperature': 0.0, 'avg_logprob': -0.17903498749234784, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.0030585017520934343}, {'id': 378, 'seek': 257108, 'start': 2571.2799999999997, 'end': 2578.2799999999997, 'text': ' it right can you think of some simple transformations that can be done sorry tell me store a of', 'tokens': [50374, 309, 558, 393, 291, 519, 295, 512, 2199, 34852, 300, 393, 312, 1096, 2597, 980, 385, 3531, 257, 295, 50724], 'temperature': 0.0, 'avg_logprob': -0.1911044418811798, 'compression_ratio': 1.6790123456790123, 'no_speech_prob': 0.001565720303915441}, {'id': 379, 'seek': 257108, 'start': 2583.68, 'end': 2590.68, 'text': ' 1 in some other but then where will you do that a of 1 writing inside that loop right', 'tokens': [50994, 502, 294, 512, 661, 457, 550, 689, 486, 291, 360, 300, 257, 295, 502, 3579, 1854, 300, 6367, 558, 51344], 'temperature': 0.0, 'avg_logprob': -0.1911044418811798, 'compression_ratio': 1.6790123456790123, 'no_speech_prob': 0.001565720303915441}, {'id': 380, 'seek': 257108, 'start': 2590.68, 'end': 2597.68, 'text': ' so you do not need to necessarily store it in a separate array just do iteration 1 outside', 'tokens': [51344, 370, 291, 360, 406, 643, 281, 4725, 3531, 309, 294, 257, 4994, 10225, 445, 360, 24784, 502, 2380, 51694], 'temperature': 0.0, 'avg_logprob': -0.1911044418811798, 'compression_ratio': 1.6790123456790123, 'no_speech_prob': 0.001565720303915441}, {'id': 381, 'seek': 259768, 'start': 2597.9199999999996, 'end': 2604.9199999999996, 'text': ' of the loop right that is what we call as peeling remove the first iteration the name', 'tokens': [50376, 295, 264, 6367, 558, 300, 307, 437, 321, 818, 382, 39926, 4159, 264, 700, 24784, 264, 1315, 50726], 'temperature': 0.0, 'avg_logprob': -0.13909017844278304, 'compression_ratio': 1.7733333333333334, 'no_speech_prob': 0.002832443453371525}, {'id': 382, 'seek': 259768, 'start': 2605.48, 'end': 2612.48, 'text': ' means what it is right do not be too surprised right so every iteration depends on iteration', 'tokens': [50754, 1355, 437, 309, 307, 558, 360, 406, 312, 886, 6100, 558, 370, 633, 24784, 5946, 322, 24784, 51104], 'temperature': 0.0, 'avg_logprob': -0.13909017844278304, 'compression_ratio': 1.7733333333333334, 'no_speech_prob': 0.002832443453371525}, {'id': 383, 'seek': 259768, 'start': 2613.0, 'end': 2620.0, 'text': ' 1 so take out iteration 1 right from the loop then what you have is you have this piece', 'tokens': [51130, 502, 370, 747, 484, 24784, 502, 558, 490, 264, 6367, 550, 437, 291, 362, 307, 291, 362, 341, 2522, 51480], 'temperature': 0.0, 'avg_logprob': -0.13909017844278304, 'compression_ratio': 1.7733333333333334, 'no_speech_prob': 0.002832443453371525}, {'id': 384, 'seek': 262000, 'start': 2621.0, 'end': 2628.0, 'text': ' of code a of 1 is a of 1 plus a of 1 whereas a of i is a of i plus a of 1 now what happened', 'tokens': [50414, 295, 3089, 257, 295, 502, 307, 257, 295, 502, 1804, 257, 295, 502, 9735, 257, 295, 741, 307, 257, 295, 741, 1804, 257, 295, 502, 586, 437, 2011, 50764], 'temperature': 0.0, 'avg_logprob': -0.15784628097325154, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.0034517799504101276}, {'id': 385, 'seek': 262000, 'start': 2631.2, 'end': 2638.2, 'text': ' is that here all of these statements are dependent on this one so once you execute this serially', 'tokens': [50924, 307, 300, 510, 439, 295, 613, 12363, 366, 12334, 322, 341, 472, 370, 1564, 291, 14483, 341, 816, 2270, 51274], 'temperature': 0.0, 'avg_logprob': -0.15784628097325154, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.0034517799504101276}, {'id': 386, 'seek': 262000, 'start': 2639.08, 'end': 2646.08, 'text': ' the rest of it all can be executed in parallel so you can vectorize this execution whereas', 'tokens': [51318, 264, 1472, 295, 309, 439, 393, 312, 17577, 294, 8952, 370, 291, 393, 8062, 1125, 341, 15058, 9735, 51668], 'temperature': 0.0, 'avg_logprob': -0.15784628097325154, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.0034517799504101276}, {'id': 387, 'seek': 264608, 'start': 2646.08, 'end': 2651.7999999999997, 'text': ' you cannot vectorize this execution this is loop peeling from the beginning of the iteration', 'tokens': [50364, 291, 2644, 8062, 1125, 341, 15058, 341, 307, 6367, 39926, 490, 264, 2863, 295, 264, 24784, 50650], 'temperature': 0.0, 'avg_logprob': -0.17294858052180365, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.002769176149740815}, {'id': 388, 'seek': 264608, 'start': 2651.7999999999997, 'end': 2657.2, 'text': ' what about loop peeling from the end of the iteration right if it is dependent on a of', 'tokens': [50650, 437, 466, 6367, 39926, 490, 264, 917, 295, 264, 24784, 558, 498, 309, 307, 12334, 322, 257, 295, 50920], 'temperature': 0.0, 'avg_logprob': -0.17294858052180365, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.002769176149740815}, {'id': 389, 'seek': 264608, 'start': 2657.2, 'end': 2664.2, 'text': ' m something like that would happen and you have to do ok alright now let us look at another', 'tokens': [50920, 275, 746, 411, 300, 576, 1051, 293, 291, 362, 281, 360, 3133, 5845, 586, 718, 505, 574, 412, 1071, 51270], 'temperature': 0.0, 'avg_logprob': -0.17294858052180365, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.002769176149740815}, {'id': 390, 'seek': 264608, 'start': 2664.56, 'end': 2671.56, 'text': ' loop transformation called loop fission it is also called loop distribution oh boy so', 'tokens': [51288, 6367, 9887, 1219, 6367, 283, 3106, 309, 307, 611, 1219, 6367, 7316, 1954, 3237, 370, 51638], 'temperature': 0.0, 'avg_logprob': -0.17294858052180365, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.002769176149740815}, {'id': 391, 'seek': 267156, 'start': 2672.24, 'end': 2679.24, 'text': ' sequence of statements right for i is equal to 1 to n right can I break these things in', 'tokens': [50398, 8310, 295, 12363, 558, 337, 741, 307, 2681, 281, 502, 281, 297, 558, 393, 286, 1821, 613, 721, 294, 50748], 'temperature': 0.0, 'avg_logprob': -0.14107313934637575, 'compression_ratio': 1.9774011299435028, 'no_speech_prob': 0.003784395754337311}, {'id': 392, 'seek': 267156, 'start': 2680.6, 'end': 2687.6, 'text': ' terms of for i is equal to 1 s 1 for i is equal to 1 s 2 for i is equal to 1 to n s', 'tokens': [50816, 2115, 295, 337, 741, 307, 2681, 281, 502, 262, 502, 337, 741, 307, 2681, 281, 502, 262, 568, 337, 741, 307, 2681, 281, 502, 281, 297, 262, 51166], 'temperature': 0.0, 'avg_logprob': -0.14107313934637575, 'compression_ratio': 1.9774011299435028, 'no_speech_prob': 0.003784395754337311}, {'id': 393, 'seek': 267156, 'start': 2687.6, 'end': 2694.6, 'text': ' 3 for i is equal to 1 to n s 4 can I do that will that have the same meaning as this one', 'tokens': [51166, 805, 337, 741, 307, 2681, 281, 502, 281, 297, 262, 1017, 393, 286, 360, 300, 486, 300, 362, 264, 912, 3620, 382, 341, 472, 51516], 'temperature': 0.0, 'avg_logprob': -0.14107313934637575, 'compression_ratio': 1.9774011299435028, 'no_speech_prob': 0.003784395754337311}, {'id': 394, 'seek': 267156, 'start': 2695.7999999999997, 'end': 2700.7599999999998, 'text': ' you all understand right I have 4 statements which are put in the loop and I am executing', 'tokens': [51576, 291, 439, 1223, 558, 286, 362, 1017, 12363, 597, 366, 829, 294, 264, 6367, 293, 286, 669, 32368, 51824], 'temperature': 0.0, 'avg_logprob': -0.14107313934637575, 'compression_ratio': 1.9774011299435028, 'no_speech_prob': 0.003784395754337311}, {'id': 395, 'seek': 270076, 'start': 2700.76, 'end': 2706.8, 'text': ' this s 1 s 2 s 3 s 4 s 1 s 2 s 3 s 4 like that I am executing but what I want to do', 'tokens': [50364, 341, 262, 502, 262, 568, 262, 805, 262, 1017, 262, 502, 262, 568, 262, 805, 262, 1017, 411, 300, 286, 669, 32368, 457, 437, 286, 528, 281, 360, 50666], 'temperature': 0.0, 'avg_logprob': -0.11321652492630148, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.0008670924580655992}, {'id': 396, 'seek': 270076, 'start': 2706.8, 'end': 2713.32, 'text': ' is that I want to execute s 1 s 1 s 1 n times s 2 s 2 s 2 n times ok let us look at what', 'tokens': [50666, 307, 300, 286, 528, 281, 14483, 262, 502, 262, 502, 262, 502, 297, 1413, 262, 568, 262, 568, 262, 568, 297, 1413, 3133, 718, 505, 574, 412, 437, 50992], 'temperature': 0.0, 'avg_logprob': -0.11321652492630148, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.0008670924580655992}, {'id': 397, 'seek': 270076, 'start': 2713.32, 'end': 2720.32, 'text': ' happens right so this produces a value in the ith iteration which is going to be consumed', 'tokens': [50992, 2314, 558, 370, 341, 14725, 257, 2158, 294, 264, 309, 71, 24784, 597, 307, 516, 281, 312, 21226, 51342], 'temperature': 0.0, 'avg_logprob': -0.11321652492630148, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.0008670924580655992}, {'id': 398, 'seek': 270076, 'start': 2720.44, 'end': 2727.44, 'text': ' by s 2 in the i plus 1th iteration so if I execute all iterations of b 2 I mean all iterations', 'tokens': [51348, 538, 262, 568, 294, 264, 741, 1804, 502, 392, 24784, 370, 498, 286, 14483, 439, 36540, 295, 272, 568, 286, 914, 439, 36540, 51698], 'temperature': 0.0, 'avg_logprob': -0.11321652492630148, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.0008670924580655992}, {'id': 399, 'seek': 272744, 'start': 2728.44, 'end': 2735.44, 'text': ' of s 2 then this will take the old value of c it will not take the new value of c so obviously', 'tokens': [50414, 295, 262, 568, 550, 341, 486, 747, 264, 1331, 2158, 295, 269, 309, 486, 406, 747, 264, 777, 2158, 295, 269, 370, 2745, 50764], 'temperature': 0.0, 'avg_logprob': -0.15668603648310123, 'compression_ratio': 1.720496894409938, 'no_speech_prob': 0.005156803410500288}, {'id': 400, 'seek': 272744, 'start': 2738.44, 'end': 2745.44, 'text': ' I am breaking this dependence correct anything else that you can see this also b of i b of', 'tokens': [50914, 286, 669, 7697, 341, 31704, 3006, 1340, 1646, 300, 291, 393, 536, 341, 611, 272, 295, 741, 272, 295, 51264], 'temperature': 0.0, 'avg_logprob': -0.15668603648310123, 'compression_ratio': 1.720496894409938, 'no_speech_prob': 0.005156803410500288}, {'id': 401, 'seek': 272744, 'start': 2748.36, 'end': 2755.36, 'text': ' i minus 1 correct right so if you have a loop carried dependence then you are going to have', 'tokens': [51410, 741, 3175, 502, 3006, 558, 370, 498, 291, 362, 257, 6367, 9094, 31704, 550, 291, 366, 516, 281, 362, 51760], 'temperature': 0.0, 'avg_logprob': -0.15668603648310123, 'compression_ratio': 1.720496894409938, 'no_speech_prob': 0.005156803410500288}, {'id': 402, 'seek': 275536, 'start': 2755.84, 'end': 2762.84, 'text': ' a problem right but you can handle it let us see what we can do right so again we will', 'tokens': [50388, 257, 1154, 558, 457, 291, 393, 4813, 309, 718, 505, 536, 437, 321, 393, 360, 558, 370, 797, 321, 486, 50738], 'temperature': 0.0, 'avg_logprob': -0.1772482426961263, 'compression_ratio': 1.8681318681318682, 'no_speech_prob': 0.0010378534207120538}, {'id': 403, 'seek': 275536, 'start': 2763.92, 'end': 2770.28, 'text': ' build a dependence graph and then annotate it right and then in the dependence graph', 'tokens': [50792, 1322, 257, 31704, 4295, 293, 550, 25339, 473, 309, 558, 293, 550, 294, 264, 31704, 4295, 51110], 'temperature': 0.0, 'avg_logprob': -0.1772482426961263, 'compression_ratio': 1.8681318681318682, 'no_speech_prob': 0.0010378534207120538}, {'id': 404, 'seek': 275536, 'start': 2770.28, 'end': 2775.1200000000003, 'text': ' we will identify what are called strongly connected components all of you know about', 'tokens': [51110, 321, 486, 5876, 437, 366, 1219, 10613, 4582, 6677, 439, 295, 291, 458, 466, 51352], 'temperature': 0.0, 'avg_logprob': -0.1772482426961263, 'compression_ratio': 1.8681318681318682, 'no_speech_prob': 0.0010378534207120538}, {'id': 405, 'seek': 275536, 'start': 2775.1200000000003, 'end': 2779.48, 'text': ' strongly connected components right it is a subset of the graph where every node is', 'tokens': [51352, 10613, 4582, 6677, 558, 309, 307, 257, 25993, 295, 264, 4295, 689, 633, 9984, 307, 51570], 'temperature': 0.0, 'avg_logprob': -0.1772482426961263, 'compression_ratio': 1.8681318681318682, 'no_speech_prob': 0.0010378534207120538}, {'id': 406, 'seek': 277948, 'start': 2779.48, 'end': 2785.64, 'text': ' connected to every other node right and then combine all these strongly connected graphs', 'tokens': [50364, 4582, 281, 633, 661, 9984, 558, 293, 550, 10432, 439, 613, 10613, 4582, 24877, 50672], 'temperature': 0.0, 'avg_logprob': -0.1441386705869204, 'compression_ratio': 1.7211538461538463, 'no_speech_prob': 0.003528977744281292}, {'id': 407, 'seek': 277948, 'start': 2785.64, 'end': 2792.64, 'text': ' into a single node right and then do topological sorting right so let us see how that works', 'tokens': [50672, 666, 257, 2167, 9984, 558, 293, 550, 360, 1192, 4383, 32411, 558, 370, 718, 505, 536, 577, 300, 1985, 51022], 'temperature': 0.0, 'avg_logprob': -0.1441386705869204, 'compression_ratio': 1.7211538461538463, 'no_speech_prob': 0.003528977744281292}, {'id': 408, 'seek': 277948, 'start': 2794.12, 'end': 2801.12, 'text': ' this is the program ok now this is the dependence ok here the distance vectors are only one', 'tokens': [51096, 341, 307, 264, 1461, 3133, 586, 341, 307, 264, 31704, 3133, 510, 264, 4560, 18875, 366, 787, 472, 51446], 'temperature': 0.0, 'avg_logprob': -0.1441386705869204, 'compression_ratio': 1.7211538461538463, 'no_speech_prob': 0.003528977744281292}, {'id': 409, 'seek': 277948, 'start': 2801.32, 'end': 2806.6, 'text': ' dimension therefore I have just represented them by a number again you can see that b', 'tokens': [51456, 10139, 4412, 286, 362, 445, 10379, 552, 538, 257, 1230, 797, 291, 393, 536, 300, 272, 51720], 'temperature': 0.0, 'avg_logprob': -0.1441386705869204, 'compression_ratio': 1.7211538461538463, 'no_speech_prob': 0.003528977744281292}, {'id': 410, 'seek': 280660, 'start': 2806.6, 'end': 2813.6, 'text': ' of i b of i minus 1 so that dependence is here c of i c of i minus 1 ok there is a dependence', 'tokens': [50364, 295, 741, 272, 295, 741, 3175, 502, 370, 300, 31704, 307, 510, 269, 295, 741, 269, 295, 741, 3175, 502, 3133, 456, 307, 257, 31704, 50714], 'temperature': 0.0, 'avg_logprob': -0.1254189850448014, 'compression_ratio': 1.9027777777777777, 'no_speech_prob': 0.00775257358327508}, {'id': 411, 'seek': 280660, 'start': 2815.08, 'end': 2822.08, 'text': ' from s 1 to s 2 to s 3 that is a loop independent dependence correct so that is also put in', 'tokens': [50788, 490, 262, 502, 281, 262, 568, 281, 262, 805, 300, 307, 257, 6367, 6695, 31704, 3006, 370, 300, 307, 611, 829, 294, 51138], 'temperature': 0.0, 'avg_logprob': -0.1254189850448014, 'compression_ratio': 1.9027777777777777, 'no_speech_prob': 0.00775257358327508}, {'id': 412, 'seek': 280660, 'start': 2824.6, 'end': 2831.6, 'text': ' here s 3 to s 4 and then from s 4 to itself right so all of these dependences are marked', 'tokens': [51264, 510, 262, 805, 281, 262, 1017, 293, 550, 490, 262, 1017, 281, 2564, 558, 370, 439, 295, 613, 5672, 2667, 366, 12658, 51614], 'temperature': 0.0, 'avg_logprob': -0.1254189850448014, 'compression_ratio': 1.9027777777777777, 'no_speech_prob': 0.00775257358327508}, {'id': 413, 'seek': 283160, 'start': 2832.6, 'end': 2839.6, 'text': ' in this graph now which is the strongly connected component here s 2 s 3 correct so combine', 'tokens': [50414, 294, 341, 4295, 586, 597, 307, 264, 10613, 4582, 6542, 510, 262, 568, 262, 805, 3006, 370, 10432, 50764], 'temperature': 0.0, 'avg_logprob': -0.16186689686130834, 'compression_ratio': 1.7651006711409396, 'no_speech_prob': 0.003372955834493041}, {'id': 414, 'seek': 283160, 'start': 2840.24, 'end': 2847.24, 'text': ' them into one node right then s 2 s 3 is a single node there is an edge from s 2 s 3', 'tokens': [50796, 552, 666, 472, 9984, 558, 550, 262, 568, 262, 805, 307, 257, 2167, 9984, 456, 307, 364, 4691, 490, 262, 568, 262, 805, 51146], 'temperature': 0.0, 'avg_logprob': -0.16186689686130834, 'compression_ratio': 1.7651006711409396, 'no_speech_prob': 0.003372955834493041}, {'id': 415, 'seek': 283160, 'start': 2851.16, 'end': 2858.16, 'text': ' to s 1 there is an edge from s 3 to s 4 and of course there is a loop on s 4 right you', 'tokens': [51342, 281, 262, 502, 456, 307, 364, 4691, 490, 262, 805, 281, 262, 1017, 293, 295, 1164, 456, 307, 257, 6367, 322, 262, 1017, 558, 291, 51692], 'temperature': 0.0, 'avg_logprob': -0.16186689686130834, 'compression_ratio': 1.7651006711409396, 'no_speech_prob': 0.003372955834493041}, {'id': 416, 'seek': 285816, 'start': 2858.64, 'end': 2864.48, 'text': ' have marked all of them right now what do we understand from here if I understand s', 'tokens': [50388, 362, 12658, 439, 295, 552, 558, 586, 437, 360, 321, 1223, 490, 510, 498, 286, 1223, 262, 50680], 'temperature': 0.0, 'avg_logprob': -0.12324556370371396, 'compression_ratio': 1.899441340782123, 'no_speech_prob': 0.004420197103172541}, {'id': 417, 'seek': 285816, 'start': 2864.48, 'end': 2870.24, 'text': ' 2 s 3 together in this form together meaning that there is a single loop for that that', 'tokens': [50680, 568, 262, 805, 1214, 294, 341, 1254, 1214, 3620, 300, 456, 307, 257, 2167, 6367, 337, 300, 300, 50968], 'temperature': 0.0, 'avg_logprob': -0.12324556370371396, 'compression_ratio': 1.899441340782123, 'no_speech_prob': 0.004420197103172541}, {'id': 418, 'seek': 285816, 'start': 2870.24, 'end': 2877.24, 'text': ' is for i is equal to 1 to n s 2 s 3 so it executes s 2 s 3 s 2 s 3 s 2 s 3 like that', 'tokens': [50968, 307, 337, 741, 307, 2681, 281, 502, 281, 297, 262, 568, 262, 805, 370, 309, 4454, 1819, 262, 568, 262, 805, 262, 568, 262, 805, 262, 568, 262, 805, 411, 300, 51318], 'temperature': 0.0, 'avg_logprob': -0.12324556370371396, 'compression_ratio': 1.899441340782123, 'no_speech_prob': 0.004420197103172541}, {'id': 419, 'seek': 285816, 'start': 2878.3599999999997, 'end': 2885.3599999999997, 'text': ' right and then after that if I execute s 1 n times and after that if I execute s 4 n', 'tokens': [51374, 558, 293, 550, 934, 300, 498, 286, 14483, 262, 502, 297, 1413, 293, 934, 300, 498, 286, 14483, 262, 1017, 297, 51724], 'temperature': 0.0, 'avg_logprob': -0.12324556370371396, 'compression_ratio': 1.899441340782123, 'no_speech_prob': 0.004420197103172541}, {'id': 420, 'seek': 288536, 'start': 2885.36, 'end': 2892.36, 'text': ' times or in any order it does not really matter correct I would have met all the dependences', 'tokens': [50364, 1413, 420, 294, 604, 1668, 309, 775, 406, 534, 1871, 3006, 286, 576, 362, 1131, 439, 264, 5672, 2667, 50714], 'temperature': 0.0, 'avg_logprob': -0.15590809330795752, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.0019346059998497367}, {'id': 421, 'seek': 288536, 'start': 2894.1600000000003, 'end': 2901.1600000000003, 'text': ' right let us see that in the next slide ok correct now does this satisfy all your dependences', 'tokens': [50804, 558, 718, 505, 536, 300, 294, 264, 958, 4137, 3133, 3006, 586, 775, 341, 19319, 439, 428, 5672, 2667, 51154], 'temperature': 0.0, 'avg_logprob': -0.15590809330795752, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.0019346059998497367}, {'id': 422, 'seek': 288536, 'start': 2905.2400000000002, 'end': 2911.88, 'text': ' yes because the c 1 to c c to c dependence is satisfied because this is going to be executed', 'tokens': [51358, 2086, 570, 264, 269, 502, 281, 269, 269, 281, 269, 31704, 307, 11239, 570, 341, 307, 516, 281, 312, 17577, 51690], 'temperature': 0.0, 'avg_logprob': -0.15590809330795752, 'compression_ratio': 1.7116564417177915, 'no_speech_prob': 0.0019346059998497367}, {'id': 423, 'seek': 291188, 'start': 2911.88, 'end': 2918.52, 'text': ' in this way right there was a dependence from b of i to b of i minus 1 which was actually', 'tokens': [50364, 294, 341, 636, 558, 456, 390, 257, 31704, 490, 272, 295, 741, 281, 272, 295, 741, 3175, 502, 597, 390, 767, 50696], 'temperature': 0.0, 'avg_logprob': -0.12297113551649937, 'compression_ratio': 1.8205128205128205, 'no_speech_prob': 0.005235742777585983}, {'id': 424, 'seek': 291188, 'start': 2918.52, 'end': 2922.7200000000003, 'text': ' loop carried and it was going backward but now what we have done is that we are going', 'tokens': [50696, 6367, 9094, 293, 309, 390, 516, 23897, 457, 586, 437, 321, 362, 1096, 307, 300, 321, 366, 516, 50906], 'temperature': 0.0, 'avg_logprob': -0.12297113551649937, 'compression_ratio': 1.8205128205128205, 'no_speech_prob': 0.005235742777585983}, {'id': 425, 'seek': 291188, 'start': 2922.7200000000003, 'end': 2929.7200000000003, 'text': ' to execute b first and then a later so that is going to go like this that is also taken', 'tokens': [50906, 281, 14483, 272, 700, 293, 550, 257, 1780, 370, 300, 307, 516, 281, 352, 411, 341, 300, 307, 611, 2726, 51256], 'temperature': 0.0, 'avg_logprob': -0.12297113551649937, 'compression_ratio': 1.8205128205128205, 'no_speech_prob': 0.005235742777585983}, {'id': 426, 'seek': 291188, 'start': 2930.2000000000003, 'end': 2937.2000000000003, 'text': ' care of d of course only had a self dependence there was a loop independent dependence from', 'tokens': [51280, 1127, 295, 274, 295, 1164, 787, 632, 257, 2698, 31704, 456, 390, 257, 6367, 6695, 31704, 490, 51630], 'temperature': 0.0, 'avg_logprob': -0.12297113551649937, 'compression_ratio': 1.8205128205128205, 'no_speech_prob': 0.005235742777585983}, {'id': 427, 'seek': 293720, 'start': 2937.7599999999998, 'end': 2943.4399999999996, 'text': ' c to d that is also being satisfied now you have this 4 loops which was originally put', 'tokens': [50392, 269, 281, 274, 300, 307, 611, 885, 11239, 586, 291, 362, 341, 1017, 16121, 597, 390, 7993, 829, 50676], 'temperature': 0.0, 'avg_logprob': -0.19251402597578746, 'compression_ratio': 1.8299319727891157, 'no_speech_prob': 0.006730210967361927}, {'id': 428, 'seek': 293720, 'start': 2943.4399999999996, 'end': 2950.4399999999996, 'text': ' as a single loop you have distributed them what can you do with them right some loops', 'tokens': [50676, 382, 257, 2167, 6367, 291, 362, 12631, 552, 437, 393, 291, 360, 365, 552, 558, 512, 16121, 51026], 'temperature': 0.0, 'avg_logprob': -0.19251402597578746, 'compression_ratio': 1.8299319727891157, 'no_speech_prob': 0.006730210967361927}, {'id': 429, 'seek': 293720, 'start': 2950.64, 'end': 2957.64, 'text': ' can be parallelized some loops cannot be parallelized right which one can be parallelized a of i', 'tokens': [51036, 393, 312, 8952, 1602, 512, 16121, 2644, 312, 8952, 1602, 558, 597, 472, 393, 312, 8952, 1602, 257, 295, 741, 51386], 'temperature': 0.0, 'avg_logprob': -0.19251402597578746, 'compression_ratio': 1.8299319727891157, 'no_speech_prob': 0.006730210967361927}, {'id': 430, 'seek': 295764, 'start': 2958.48, 'end': 2965.48, 'text': ' is equal to a of i plus b of i minus 1 can be parallelized right I think that is coming', 'tokens': [50406, 307, 2681, 281, 257, 295, 741, 1804, 272, 295, 741, 3175, 502, 393, 312, 8952, 1602, 558, 286, 519, 300, 307, 1348, 50756], 'temperature': 0.0, 'avg_logprob': -0.16610557382757013, 'compression_ratio': 1.6708860759493671, 'no_speech_prob': 0.00591034023091197}, {'id': 431, 'seek': 295764, 'start': 2968.64, 'end': 2975.64, 'text': ' over here ok just went to one more level right it can be parallelized what about this one', 'tokens': [50914, 670, 510, 3133, 445, 1437, 281, 472, 544, 1496, 558, 309, 393, 312, 8952, 1602, 437, 466, 341, 472, 51264], 'temperature': 0.0, 'avg_logprob': -0.16610557382757013, 'compression_ratio': 1.6708860759493671, 'no_speech_prob': 0.00591034023091197}, {'id': 432, 'seek': 295764, 'start': 2977.7999999999997, 'end': 2984.7999999999997, 'text': ' this cannot be vectorized because there is a self dependency so it cannot be this also', 'tokens': [51372, 341, 2644, 312, 8062, 1602, 570, 456, 307, 257, 2698, 33621, 370, 309, 2644, 312, 341, 611, 51722], 'temperature': 0.0, 'avg_logprob': -0.16610557382757013, 'compression_ratio': 1.6708860759493671, 'no_speech_prob': 0.00591034023091197}, {'id': 433, 'seek': 298480, 'start': 2984.88, 'end': 2990.04, 'text': ' cannot be vectorized because there are two statements and one depends on the other and', 'tokens': [50368, 2644, 312, 8062, 1602, 570, 456, 366, 732, 12363, 293, 472, 5946, 322, 264, 661, 293, 50626], 'temperature': 0.0, 'avg_logprob': -0.1448312924232012, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0017066492000594735}, {'id': 434, 'seek': 298480, 'start': 2990.04, 'end': 2997.04, 'text': ' then vice versa so that cannot be parallelized so if you are given a original loop like this', 'tokens': [50626, 550, 11964, 25650, 370, 300, 2644, 312, 8952, 1602, 370, 498, 291, 366, 2212, 257, 3380, 6367, 411, 341, 50976], 'temperature': 0.0, 'avg_logprob': -0.1448312924232012, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0017066492000594735}, {'id': 435, 'seek': 298480, 'start': 2998.76, 'end': 3005.76, 'text': ' by analyzing all the dependences and doing these sequence of steps you can actually reduce', 'tokens': [51062, 538, 23663, 439, 264, 5672, 2667, 293, 884, 613, 8310, 295, 4439, 291, 393, 767, 5407, 51412], 'temperature': 0.0, 'avg_logprob': -0.1448312924232012, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0017066492000594735}, {'id': 436, 'seek': 298480, 'start': 3006.32, 'end': 3013.32, 'text': ' it to this right and then you can parallelize some of that so the compiler can do this no', 'tokens': [51440, 309, 281, 341, 558, 293, 550, 291, 393, 8952, 1125, 512, 295, 300, 370, 264, 31958, 393, 360, 341, 572, 51790], 'temperature': 0.0, 'avg_logprob': -0.1448312924232012, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0017066492000594735}, {'id': 437, 'seek': 301332, 'start': 3014.1200000000003, 'end': 3021.1200000000003, 'text': ' longer magic correct so well defined sequence of steps that can be done ok now before we', 'tokens': [50404, 2854, 5585, 3006, 370, 731, 7642, 8310, 295, 4439, 300, 393, 312, 1096, 3133, 586, 949, 321, 50754], 'temperature': 0.0, 'avg_logprob': -0.18242920620340697, 'compression_ratio': 1.9005235602094241, 'no_speech_prob': 0.001388878677971661}, {'id': 438, 'seek': 301332, 'start': 3021.6800000000003, 'end': 3027.1600000000003, 'text': ' go more into this now tell me where do you think it would be more appropriate to do this', 'tokens': [50782, 352, 544, 666, 341, 586, 980, 385, 689, 360, 291, 519, 309, 576, 312, 544, 6854, 281, 360, 341, 51056], 'temperature': 0.0, 'avg_logprob': -0.18242920620340697, 'compression_ratio': 1.9005235602094241, 'no_speech_prob': 0.001388878677971661}, {'id': 439, 'seek': 301332, 'start': 3027.1600000000003, 'end': 3033.84, 'text': ' kind of transformations or optimizations after we do register allocation instruction scheduling', 'tokens': [51056, 733, 295, 34852, 420, 5028, 14455, 934, 321, 360, 7280, 27599, 10951, 29055, 51390], 'temperature': 0.0, 'avg_logprob': -0.18242920620340697, 'compression_ratio': 1.9005235602094241, 'no_speech_prob': 0.001388878677971661}, {'id': 440, 'seek': 301332, 'start': 3033.84, 'end': 3038.44, 'text': ' register allocation and other things because after you do register allocation instruction', 'tokens': [51390, 7280, 27599, 293, 661, 721, 570, 934, 291, 360, 7280, 27599, 10951, 51620], 'temperature': 0.0, 'avg_logprob': -0.18242920620340697, 'compression_ratio': 1.9005235602094241, 'no_speech_prob': 0.001388878677971661}, {'id': 441, 'seek': 303844, 'start': 3038.44, 'end': 3044.32, 'text': ' scheduling in what form are you seeing the loop you are seeing the loop as a sequence', 'tokens': [50364, 29055, 294, 437, 1254, 366, 291, 2577, 264, 6367, 291, 366, 2577, 264, 6367, 382, 257, 8310, 50658], 'temperature': 0.0, 'avg_logprob': -0.13816242416699728, 'compression_ratio': 1.7975206611570247, 'no_speech_prob': 0.004958720412105322}, {'id': 442, 'seek': 303844, 'start': 3044.32, 'end': 3051.2400000000002, 'text': ' of statements with some control branches right this structure of the loop is not really seen', 'tokens': [50658, 295, 12363, 365, 512, 1969, 14770, 558, 341, 3877, 295, 264, 6367, 307, 406, 534, 1612, 51004], 'temperature': 0.0, 'avg_logprob': -0.13816242416699728, 'compression_ratio': 1.7975206611570247, 'no_speech_prob': 0.004958720412105322}, {'id': 443, 'seek': 303844, 'start': 3051.2400000000002, 'end': 3056.28, 'text': ' at that level whereas if you have looked at this loop at a much earlier point in time', 'tokens': [51004, 412, 300, 1496, 9735, 498, 291, 362, 2956, 412, 341, 6367, 412, 257, 709, 3071, 935, 294, 565, 51256], 'temperature': 0.0, 'avg_logprob': -0.13816242416699728, 'compression_ratio': 1.7975206611570247, 'no_speech_prob': 0.004958720412105322}, {'id': 444, 'seek': 303844, 'start': 3056.28, 'end': 3061.96, 'text': ' like the AST or even before that right you could have actually had information about', 'tokens': [51256, 411, 264, 316, 6840, 420, 754, 949, 300, 558, 291, 727, 362, 767, 632, 1589, 466, 51540], 'temperature': 0.0, 'avg_logprob': -0.13816242416699728, 'compression_ratio': 1.7975206611570247, 'no_speech_prob': 0.004958720412105322}, {'id': 445, 'seek': 303844, 'start': 3061.96, 'end': 3066.76, 'text': ' the loops and other things you could have had see for example this array accesses are', 'tokens': [51540, 264, 16121, 293, 661, 721, 291, 727, 362, 632, 536, 337, 1365, 341, 10225, 2105, 279, 366, 51780], 'temperature': 0.0, 'avg_logprob': -0.13816242416699728, 'compression_ratio': 1.7975206611570247, 'no_speech_prob': 0.004958720412105322}, {'id': 446, 'seek': 306676, 'start': 3066.76, 'end': 3072.32, 'text': ' being looked at as B of I and C of I minus 1 whereas if you are looking at the code after', 'tokens': [50364, 885, 2956, 412, 382, 363, 295, 286, 293, 383, 295, 286, 3175, 502, 9735, 498, 291, 366, 1237, 412, 264, 3089, 934, 50642], 'temperature': 0.0, 'avg_logprob': -0.17370835091303855, 'compression_ratio': 1.743083003952569, 'no_speech_prob': 0.0050903307273983955}, {'id': 447, 'seek': 306676, 'start': 3072.32, 'end': 3076.76, 'text': ' instruction scheduling or register allocation right we discussed at length about this in', 'tokens': [50642, 10951, 29055, 420, 7280, 27599, 558, 321, 7152, 412, 4641, 466, 341, 294, 50864], 'temperature': 0.0, 'avg_logprob': -0.17370835091303855, 'compression_ratio': 1.743083003952569, 'no_speech_prob': 0.0050903307273983955}, {'id': 448, 'seek': 306676, 'start': 3076.76, 'end': 3082.6400000000003, 'text': ' the afternoon right it is going to be seen as some index you would not know I or J or', 'tokens': [50864, 264, 6499, 558, 309, 307, 516, 281, 312, 1612, 382, 512, 8186, 291, 576, 406, 458, 286, 420, 508, 420, 51158], 'temperature': 0.0, 'avg_logprob': -0.17370835091303855, 'compression_ratio': 1.743083003952569, 'no_speech_prob': 0.0050903307273983955}, {'id': 449, 'seek': 306676, 'start': 3082.6400000000003, 'end': 3089.0, 'text': ' I minus 1 or J minus 1 nothing will be there that is the last case right so many of this', 'tokens': [51158, 286, 3175, 502, 420, 508, 3175, 502, 1825, 486, 312, 456, 300, 307, 264, 1036, 1389, 558, 370, 867, 295, 341, 51476], 'temperature': 0.0, 'avg_logprob': -0.17370835091303855, 'compression_ratio': 1.743083003952569, 'no_speech_prob': 0.0050903307273983955}, {'id': 450, 'seek': 306676, 'start': 3089.0, 'end': 3094.44, 'text': ' optimization that we talk about in terms of loop transformations they are often done at', 'tokens': [51476, 19618, 300, 321, 751, 466, 294, 2115, 295, 6367, 34852, 436, 366, 2049, 1096, 412, 51748], 'temperature': 0.0, 'avg_logprob': -0.17370835091303855, 'compression_ratio': 1.743083003952569, 'no_speech_prob': 0.0050903307273983955}, {'id': 451, 'seek': 309444, 'start': 3094.44, 'end': 3100.56, 'text': ' the early part of the compilation okay so do not think that all optimizations have to be done after', 'tokens': [50364, 264, 2440, 644, 295, 264, 40261, 1392, 370, 360, 406, 519, 300, 439, 5028, 14455, 362, 281, 312, 1096, 934, 50670], 'temperature': 0.0, 'avg_logprob': -0.10150599256854191, 'compression_ratio': 2.0598290598290596, 'no_speech_prob': 0.03544825688004494}, {'id': 452, 'seek': 309444, 'start': 3100.56, 'end': 3106.04, 'text': ' the intermediate representation not necessarily and it is also not that all optimizations have', 'tokens': [50670, 264, 19376, 10290, 406, 4725, 293, 309, 307, 611, 406, 300, 439, 5028, 14455, 362, 50944], 'temperature': 0.0, 'avg_logprob': -0.10150599256854191, 'compression_ratio': 2.0598290598290596, 'no_speech_prob': 0.03544825688004494}, {'id': 453, 'seek': 309444, 'start': 3106.04, 'end': 3112.36, 'text': ' to be done only on the machine code or the output of the optimization has to be on the machine code', 'tokens': [50944, 281, 312, 1096, 787, 322, 264, 3479, 3089, 420, 264, 5598, 295, 264, 19618, 575, 281, 312, 322, 264, 3479, 3089, 51260], 'temperature': 0.0, 'avg_logprob': -0.10150599256854191, 'compression_ratio': 2.0598290598290596, 'no_speech_prob': 0.03544825688004494}, {'id': 454, 'seek': 309444, 'start': 3112.36, 'end': 3117.32, 'text': ' in this case what we have done is we have taken the original loop and then we have rewritten it', 'tokens': [51260, 294, 341, 1389, 437, 321, 362, 1096, 307, 321, 362, 2726, 264, 3380, 6367, 293, 550, 321, 362, 319, 26859, 309, 51508], 'temperature': 0.0, 'avg_logprob': -0.10150599256854191, 'compression_ratio': 2.0598290598290596, 'no_speech_prob': 0.03544825688004494}, {'id': 455, 'seek': 309444, 'start': 3117.32, 'end': 3122.7200000000003, 'text': ' as another loop so in some sense this is a source to source transformation so some of these', 'tokens': [51508, 382, 1071, 6367, 370, 294, 512, 2020, 341, 307, 257, 4009, 281, 4009, 9887, 370, 512, 295, 613, 51778], 'temperature': 0.0, 'avg_logprob': -0.10150599256854191, 'compression_ratio': 2.0598290598290596, 'no_speech_prob': 0.03544825688004494}, {'id': 456, 'seek': 312272, 'start': 3122.72, 'end': 3129.12, 'text': ' optimizations may happen at a higher level it may not be in C code it may be in AST or it may be in', 'tokens': [50364, 5028, 14455, 815, 1051, 412, 257, 2946, 1496, 309, 815, 406, 312, 294, 383, 3089, 309, 815, 312, 294, 316, 6840, 420, 309, 815, 312, 294, 50684], 'temperature': 0.0, 'avg_logprob': -0.13004522925024634, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.03056933730840683}, {'id': 457, 'seek': 312272, 'start': 3129.12, 'end': 3135.2799999999997, 'text': ' some appropriate representation but it happens at a slightly higher level if you go to the level', 'tokens': [50684, 512, 6854, 10290, 457, 309, 2314, 412, 257, 4748, 2946, 1496, 498, 291, 352, 281, 264, 1496, 50992], 'temperature': 0.0, 'avg_logprob': -0.13004522925024634, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.03056933730840683}, {'id': 458, 'seek': 312272, 'start': 3135.2799999999997, 'end': 3140.4399999999996, 'text': ' of instructions or three address code or something below that many of these information should have', 'tokens': [50992, 295, 9415, 420, 1045, 2985, 3089, 420, 746, 2507, 300, 867, 295, 613, 1589, 820, 362, 51250], 'temperature': 0.0, 'avg_logprob': -0.13004522925024634, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.03056933730840683}, {'id': 459, 'seek': 312272, 'start': 3140.4399999999996, 'end': 3146.68, 'text': ' been lost and you may not be able to do that right so you have to now understand a different', 'tokens': [51250, 668, 2731, 293, 291, 815, 406, 312, 1075, 281, 360, 300, 558, 370, 291, 362, 281, 586, 1223, 257, 819, 51562], 'temperature': 0.0, 'avg_logprob': -0.13004522925024634, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.03056933730840683}, {'id': 460, 'seek': 312272, 'start': 3146.68, 'end': 3151.3999999999996, 'text': ' that something that we have not seen in the last two days right you are saying that oh take the', 'tokens': [51562, 300, 746, 300, 321, 362, 406, 1612, 294, 264, 1036, 732, 1708, 558, 291, 366, 1566, 300, 1954, 747, 264, 51798], 'temperature': 0.0, 'avg_logprob': -0.13004522925024634, 'compression_ratio': 1.9094488188976377, 'no_speech_prob': 0.03056933730840683}, {'id': 461, 'seek': 315140, 'start': 3151.4, 'end': 3156.76, 'text': ' three address code do that or take the machine code do this right now you are also going to do', 'tokens': [50364, 1045, 2985, 3089, 360, 300, 420, 747, 264, 3479, 3089, 360, 341, 558, 586, 291, 366, 611, 516, 281, 360, 50632], 'temperature': 0.0, 'avg_logprob': -0.1221643048663472, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.007305898237973452}, {'id': 462, 'seek': 315140, 'start': 3156.76, 'end': 3163.12, 'text': ' things at the higher end to optimize certainly so again depending on what optimization you want', 'tokens': [50632, 721, 412, 264, 2946, 917, 281, 19719, 3297, 370, 797, 5413, 322, 437, 19618, 291, 528, 50950], 'temperature': 0.0, 'avg_logprob': -0.1221643048663472, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.007305898237973452}, {'id': 463, 'seek': 315140, 'start': 3163.12, 'end': 3167.6, 'text': ' to perform there is an appropriate place and representation on which you have to perform that', 'tokens': [50950, 281, 2042, 456, 307, 364, 6854, 1081, 293, 10290, 322, 597, 291, 362, 281, 2042, 300, 51174], 'temperature': 0.0, 'avg_logprob': -0.1221643048663472, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.007305898237973452}, {'id': 464, 'seek': 315140, 'start': 3167.6, 'end': 3175.8, 'text': ' okay you are doing okay in terms of time let me just go a little bit for that so here is a nested', 'tokens': [51174, 1392, 291, 366, 884, 1392, 294, 2115, 295, 565, 718, 385, 445, 352, 257, 707, 857, 337, 300, 370, 510, 307, 257, 15646, 292, 51584], 'temperature': 0.0, 'avg_logprob': -0.1221643048663472, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.007305898237973452}, {'id': 465, 'seek': 317580, 'start': 3175.8, 'end': 3181.52, 'text': ' loop making things a little bit more complicated let us see what is happening here again this is', 'tokens': [50364, 6367, 1455, 721, 257, 707, 857, 544, 6179, 718, 505, 536, 437, 307, 2737, 510, 797, 341, 307, 50650], 'temperature': 0.0, 'avg_logprob': -0.11223535239696503, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.032423440366983414}, {'id': 466, 'seek': 317580, 'start': 3181.52, 'end': 3190.28, 'text': ' the code okay now we will introduce one new point here okay so again I have represented', 'tokens': [50650, 264, 3089, 1392, 586, 321, 486, 5366, 472, 777, 935, 510, 1392, 370, 797, 286, 362, 10379, 51088], 'temperature': 0.0, 'avg_logprob': -0.11223535239696503, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.032423440366983414}, {'id': 467, 'seek': 317580, 'start': 3190.28, 'end': 3199.04, 'text': ' the dependence distances correct so this dependence distance is 1 0 this is 1 0 this is 1 0 and this', 'tokens': [51088, 264, 31704, 22182, 3006, 370, 341, 31704, 4560, 307, 502, 1958, 341, 307, 502, 1958, 341, 307, 502, 1958, 293, 341, 51526], 'temperature': 0.0, 'avg_logprob': -0.11223535239696503, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.032423440366983414}, {'id': 468, 'seek': 319904, 'start': 3199.04, 'end': 3209.72, 'text': ' is 0 1 okay that possibly is this from this C of i j to C of i, j minus 1 in all other cases it is', 'tokens': [50364, 307, 1958, 502, 1392, 300, 6264, 307, 341, 490, 341, 383, 295, 741, 361, 281, 383, 295, 741, 11, 361, 3175, 502, 294, 439, 661, 3331, 309, 307, 50898], 'temperature': 0.0, 'avg_logprob': -0.15220277449663946, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014231999404728413}, {'id': 469, 'seek': 319904, 'start': 3209.72, 'end': 3220.4, 'text': ' i plus 1 to i okay that you can see i plus 1 to i i plus 1 to i okay let us say that in this particular', 'tokens': [50898, 741, 1804, 502, 281, 741, 1392, 300, 291, 393, 536, 741, 1804, 502, 281, 741, 741, 1804, 502, 281, 741, 1392, 718, 505, 584, 300, 294, 341, 1729, 51432], 'temperature': 0.0, 'avg_logprob': -0.15220277449663946, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014231999404728413}, {'id': 470, 'seek': 319904, 'start': 3220.4, 'end': 3228.16, 'text': ' loop in this nested loop I am only interested in parallelizing the innermost loop or vectorizing', 'tokens': [51432, 6367, 294, 341, 15646, 292, 6367, 286, 669, 787, 3102, 294, 8952, 3319, 264, 7714, 966, 555, 6367, 420, 8062, 3319, 51820], 'temperature': 0.0, 'avg_logprob': -0.15220277449663946, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014231999404728413}, {'id': 471, 'seek': 322816, 'start': 3228.3199999999997, 'end': 3233.96, 'text': ' the innermost loop typically only innermost loops are vectorized right let us say that we are only', 'tokens': [50372, 264, 7714, 966, 555, 6367, 5850, 787, 7714, 966, 555, 16121, 366, 8062, 1602, 558, 718, 505, 584, 300, 321, 366, 787, 50654], 'temperature': 0.0, 'avg_logprob': -0.12248681675304066, 'compression_ratio': 2.375609756097561, 'no_speech_prob': 0.0021976481657475233}, {'id': 472, 'seek': 322816, 'start': 3233.96, 'end': 3239.72, 'text': ' interested in vectorizing the innermost loop if I look at this code and look at all the distances', 'tokens': [50654, 3102, 294, 8062, 3319, 264, 7714, 966, 555, 6367, 498, 286, 574, 412, 341, 3089, 293, 574, 412, 439, 264, 22182, 50942], 'temperature': 0.0, 'avg_logprob': -0.12248681675304066, 'compression_ratio': 2.375609756097561, 'no_speech_prob': 0.0021976481657475233}, {'id': 473, 'seek': 322816, 'start': 3239.72, 'end': 3245.12, 'text': ' dependence distances this I am only interested in vectorizing the innermost loop and let us say', 'tokens': [50942, 31704, 22182, 341, 286, 669, 787, 3102, 294, 8062, 3319, 264, 7714, 966, 555, 6367, 293, 718, 505, 584, 51212], 'temperature': 0.0, 'avg_logprob': -0.12248681675304066, 'compression_ratio': 2.375609756097561, 'no_speech_prob': 0.0021976481657475233}, {'id': 474, 'seek': 322816, 'start': 3245.12, 'end': 3251.08, 'text': ' the outer loop is going to be executed sequentially correct then I do not have to worry about this', 'tokens': [51212, 264, 10847, 6367, 307, 516, 281, 312, 17577, 5123, 3137, 3006, 550, 286, 360, 406, 362, 281, 3292, 466, 341, 51510], 'temperature': 0.0, 'avg_logprob': -0.12248681675304066, 'compression_ratio': 2.375609756097561, 'no_speech_prob': 0.0021976481657475233}, {'id': 475, 'seek': 322816, 'start': 3251.08, 'end': 3256.04, 'text': ' dependence because the outer loop is going to be executed sequentially right this dependence is', 'tokens': [51510, 31704, 570, 264, 10847, 6367, 307, 516, 281, 312, 17577, 5123, 3137, 558, 341, 31704, 307, 51758], 'temperature': 0.0, 'avg_logprob': -0.12248681675304066, 'compression_ratio': 2.375609756097561, 'no_speech_prob': 0.0021976481657475233}, {'id': 476, 'seek': 325604, 'start': 3256.04, 'end': 3260.68, 'text': ' always going to be satisfied this dependence is also going to be satisfied because the outer loop', 'tokens': [50364, 1009, 516, 281, 312, 11239, 341, 31704, 307, 611, 516, 281, 312, 11239, 570, 264, 10847, 6367, 50596], 'temperature': 0.0, 'avg_logprob': -0.10953717881982977, 'compression_ratio': 2.026315789473684, 'no_speech_prob': 0.016253028064966202}, {'id': 477, 'seek': 325604, 'start': 3260.68, 'end': 3266.6, 'text': ' is executed sequentially this self loop is also going to be satisfied so what I need to make sure', 'tokens': [50596, 307, 17577, 5123, 3137, 341, 2698, 6367, 307, 611, 516, 281, 312, 11239, 370, 437, 286, 643, 281, 652, 988, 50892], 'temperature': 0.0, 'avg_logprob': -0.10953717881982977, 'compression_ratio': 2.026315789473684, 'no_speech_prob': 0.016253028064966202}, {'id': 478, 'seek': 325604, 'start': 3266.6, 'end': 3273.44, 'text': ' is that whether this is going to be satisfied or not so let us look at it so when I do this and', 'tokens': [50892, 307, 300, 1968, 341, 307, 516, 281, 312, 11239, 420, 406, 370, 718, 505, 574, 412, 309, 370, 562, 286, 360, 341, 293, 51234], 'temperature': 0.0, 'avg_logprob': -0.10953717881982977, 'compression_ratio': 2.026315789473684, 'no_speech_prob': 0.016253028064966202}, {'id': 479, 'seek': 325604, 'start': 3273.44, 'end': 3281.16, 'text': ' only consider vectorizing the inner loop the only dependence that I need to care about is the', 'tokens': [51234, 787, 1949, 8062, 3319, 264, 7284, 6367, 264, 787, 31704, 300, 286, 643, 281, 1127, 466, 307, 264, 51620], 'temperature': 0.0, 'avg_logprob': -0.10953717881982977, 'compression_ratio': 2.026315789473684, 'no_speech_prob': 0.016253028064966202}, {'id': 480, 'seek': 328116, 'start': 3281.16, 'end': 3290.3999999999996, 'text': ' dependence from s1 to s2 and what is the dependence s1 produces C of ij s2 consumes C of i, j-1 now', 'tokens': [50364, 31704, 490, 262, 16, 281, 262, 17, 293, 437, 307, 264, 31704, 262, 16, 14725, 383, 295, 741, 73, 262, 17, 48823, 383, 295, 741, 11, 361, 12, 16, 586, 50826], 'temperature': 0.0, 'avg_logprob': -0.18023939242308168, 'compression_ratio': 1.9517241379310344, 'no_speech_prob': 0.03837154060602188}, {'id': 481, 'seek': 328116, 'start': 3290.3999999999996, 'end': 3300.64, 'text': ' the question is can I do loop fission on the innermost loop I can write I can write this as', 'tokens': [50826, 264, 1168, 307, 393, 286, 360, 6367, 283, 3106, 322, 264, 7714, 966, 555, 6367, 286, 393, 2464, 286, 393, 2464, 341, 382, 51338], 'temperature': 0.0, 'avg_logprob': -0.18023939242308168, 'compression_ratio': 1.9517241379310344, 'no_speech_prob': 0.03837154060602188}, {'id': 482, 'seek': 328116, 'start': 3300.64, 'end': 3306.64, 'text': ' a for j loop I can write this as a for j loop I can write this as a for j loop as long as I', 'tokens': [51338, 257, 337, 361, 6367, 286, 393, 2464, 341, 382, 257, 337, 361, 6367, 286, 393, 2464, 341, 382, 257, 337, 361, 6367, 382, 938, 382, 286, 51638], 'temperature': 0.0, 'avg_logprob': -0.18023939242308168, 'compression_ratio': 1.9517241379310344, 'no_speech_prob': 0.03837154060602188}, {'id': 483, 'seek': 330664, 'start': 3306.64, 'end': 3314.08, 'text': ' execute this for j loop after this for j loop this dependence is satisfied correct so when you', 'tokens': [50364, 14483, 341, 337, 361, 6367, 934, 341, 337, 361, 6367, 341, 31704, 307, 11239, 3006, 370, 562, 291, 50736], 'temperature': 0.0, 'avg_logprob': -0.09143424328462577, 'compression_ratio': 1.943298969072165, 'no_speech_prob': 0.02391587756574154}, {'id': 484, 'seek': 330664, 'start': 3314.08, 'end': 3320.56, 'text': ' are looking at vectorizing the innermost loop you can actually ignore all dependences which', 'tokens': [50736, 366, 1237, 412, 8062, 3319, 264, 7714, 966, 555, 6367, 291, 393, 767, 11200, 439, 5672, 2667, 597, 51060], 'temperature': 0.0, 'avg_logprob': -0.09143424328462577, 'compression_ratio': 1.943298969072165, 'no_speech_prob': 0.02391587756574154}, {'id': 485, 'seek': 330664, 'start': 3320.56, 'end': 3327.0, 'text': ' are on the outer loop okay correct all dependences which are on the outer loop can be ignored and', 'tokens': [51060, 366, 322, 264, 10847, 6367, 1392, 3006, 439, 5672, 2667, 597, 366, 322, 264, 10847, 6367, 393, 312, 19735, 293, 51382], 'temperature': 0.0, 'avg_logprob': -0.09143424328462577, 'compression_ratio': 1.943298969072165, 'no_speech_prob': 0.02391587756574154}, {'id': 486, 'seek': 330664, 'start': 3327.0, 'end': 3333.12, 'text': ' now your dependence graph has become like this there are no strongly connected components so', 'tokens': [51382, 586, 428, 31704, 4295, 575, 1813, 411, 341, 456, 366, 572, 10613, 4582, 6677, 370, 51688], 'temperature': 0.0, 'avg_logprob': -0.09143424328462577, 'compression_ratio': 1.943298969072165, 'no_speech_prob': 0.02391587756574154}, {'id': 487, 'seek': 333312, 'start': 3333.12, 'end': 3340.3199999999997, 'text': ' nothing needs to be merged right as long as you satisfy this ordering of s1 followed by s2 they', 'tokens': [50364, 1825, 2203, 281, 312, 36427, 558, 382, 938, 382, 291, 19319, 341, 21739, 295, 262, 16, 6263, 538, 262, 17, 436, 50724], 'temperature': 0.0, 'avg_logprob': -0.11950757344563802, 'compression_ratio': 1.6839080459770115, 'no_speech_prob': 0.033373989164829254}, {'id': 488, 'seek': 333312, 'start': 3340.3199999999997, 'end': 3347.08, 'text': ' can be distributed and they can be executed in any order only thing is s2 has to be executed after', 'tokens': [50724, 393, 312, 12631, 293, 436, 393, 312, 17577, 294, 604, 1668, 787, 551, 307, 262, 17, 575, 281, 312, 17577, 934, 51062], 'temperature': 0.0, 'avg_logprob': -0.11950757344563802, 'compression_ratio': 1.6839080459770115, 'no_speech_prob': 0.033373989164829254}, {'id': 489, 'seek': 333312, 'start': 3347.08, 'end': 3358.72, 'text': ' s1 I could have first executed s3 then s1 then s2 that is also possible right so I have shown this', 'tokens': [51062, 262, 16, 286, 727, 362, 700, 17577, 262, 18, 550, 262, 16, 550, 262, 17, 300, 307, 611, 1944, 558, 370, 286, 362, 4898, 341, 51644], 'temperature': 0.0, 'avg_logprob': -0.11950757344563802, 'compression_ratio': 1.6839080459770115, 'no_speech_prob': 0.033373989164829254}, {'id': 490, 'seek': 335872, 'start': 3359.6, 'end': 3364.6, 'text': ' representation form that is why you do not see an inner for loop right so I have distributed it and', 'tokens': [50408, 10290, 1254, 300, 307, 983, 291, 360, 406, 536, 364, 7284, 337, 6367, 558, 370, 286, 362, 12631, 309, 293, 50658], 'temperature': 0.0, 'avg_logprob': -0.17282357153954445, 'compression_ratio': 1.81437125748503, 'no_speech_prob': 0.1396094113588333}, {'id': 491, 'seek': 335872, 'start': 3364.6, 'end': 3371.2, 'text': ' I have shown it in the vector representation which essentially means for j is equal to 1 to n C for j', 'tokens': [50658, 286, 362, 4898, 309, 294, 264, 8062, 10290, 597, 4476, 1355, 337, 361, 307, 2681, 281, 502, 281, 297, 383, 337, 361, 50988], 'temperature': 0.0, 'avg_logprob': -0.17282357153954445, 'compression_ratio': 1.81437125748503, 'no_speech_prob': 0.1396094113588333}, {'id': 492, 'seek': 335872, 'start': 3371.2, 'end': 3379.16, 'text': ' is equal to 1 to n this for j is equal to 1 to n okay now each one of this loop can now be vectorized', 'tokens': [50988, 307, 2681, 281, 502, 281, 297, 341, 337, 361, 307, 2681, 281, 502, 281, 297, 1392, 586, 1184, 472, 295, 341, 6367, 393, 586, 312, 8062, 1602, 51386], 'temperature': 0.0, 'avg_logprob': -0.17282357153954445, 'compression_ratio': 1.81437125748503, 'no_speech_prob': 0.1396094113588333}, {'id': 493, 'seek': 337916, 'start': 3379.16, 'end': 3389.64, 'text': ' so you can do AVX on that or whatever okay right so again it is possible because we did loop fission', 'tokens': [50364, 370, 291, 393, 360, 30198, 55, 322, 300, 420, 2035, 1392, 558, 370, 797, 309, 307, 1944, 570, 321, 630, 6367, 283, 3106, 50888], 'temperature': 0.0, 'avg_logprob': -0.14006222618950737, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.09330952912569046}, {'id': 494, 'seek': 337916, 'start': 3389.64, 'end': 3396.3999999999996, 'text': ' on that okay there are additional optimizations that you can do to enable you to do vectorization', 'tokens': [50888, 322, 300, 1392, 456, 366, 4497, 5028, 14455, 300, 291, 393, 360, 281, 9528, 291, 281, 360, 8062, 2144, 51226], 'temperature': 0.0, 'avg_logprob': -0.14006222618950737, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.09330952912569046}, {'id': 495, 'seek': 337916, 'start': 3396.3999999999996, 'end': 3404.7599999999998, 'text': ' we will do one or two of them okay yeah let us see this one so let us say statement s1', 'tokens': [51226, 321, 486, 360, 472, 420, 732, 295, 552, 1392, 1338, 718, 505, 536, 341, 472, 370, 718, 505, 584, 5629, 262, 16, 51644], 'temperature': 0.0, 'avg_logprob': -0.14006222618950737, 'compression_ratio': 1.6285714285714286, 'no_speech_prob': 0.09330952912569046}, {'id': 496, 'seek': 340476, 'start': 3404.76, 'end': 3414.1200000000003, 'text': ' writes x of i statement s2 uses x of i and x of i plus 1 okay so in this case what happens', 'tokens': [50364, 13657, 2031, 295, 741, 5629, 262, 17, 4960, 2031, 295, 741, 293, 2031, 295, 741, 1804, 502, 1392, 370, 294, 341, 1389, 437, 2314, 50832], 'temperature': 0.0, 'avg_logprob': -0.13314038056593674, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.01608959026634693}, {'id': 497, 'seek': 340476, 'start': 3414.1200000000003, 'end': 3420.6400000000003, 'text': ' is that there is a dependence from s1 to s2 true dependence from s1 to s2 which is loop independent', 'tokens': [50832, 307, 300, 456, 307, 257, 31704, 490, 262, 16, 281, 262, 17, 2074, 31704, 490, 262, 16, 281, 262, 17, 597, 307, 6367, 6695, 51158], 'temperature': 0.0, 'avg_logprob': -0.13314038056593674, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.01608959026634693}, {'id': 498, 'seek': 340476, 'start': 3420.6400000000003, 'end': 3430.32, 'text': ' there is a var dependence from s2 to s1 which is loop carried correct because this value has to be', 'tokens': [51158, 456, 307, 257, 1374, 31704, 490, 262, 17, 281, 262, 16, 597, 307, 6367, 9094, 3006, 570, 341, 2158, 575, 281, 312, 51642], 'temperature': 0.0, 'avg_logprob': -0.13314038056593674, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.01608959026634693}, {'id': 499, 'seek': 343032, 'start': 3430.32, 'end': 3437.4, 'text': ' consumed before the next iteration executes otherwise you will overwrite this right so in', 'tokens': [50364, 21226, 949, 264, 958, 24784, 4454, 1819, 5911, 291, 486, 670, 21561, 341, 558, 370, 294, 50718], 'temperature': 0.0, 'avg_logprob': -0.14613524350253018, 'compression_ratio': 1.9104477611940298, 'no_speech_prob': 0.06239465996623039}, {'id': 500, 'seek': 343032, 'start': 3437.4, 'end': 3442.56, 'text': ' this kind of a situation you can neither write I mean you can either distribute or you cannot', 'tokens': [50718, 341, 733, 295, 257, 2590, 291, 393, 9662, 2464, 286, 914, 291, 393, 2139, 20594, 420, 291, 2644, 50976], 'temperature': 0.0, 'avg_logprob': -0.14613524350253018, 'compression_ratio': 1.9104477611940298, 'no_speech_prob': 0.06239465996623039}, {'id': 501, 'seek': 343032, 'start': 3442.56, 'end': 3448.4, 'text': ' distribute this loop with s1 as the first statement or s2 as the first statement because there is a', 'tokens': [50976, 20594, 341, 6367, 365, 262, 16, 382, 264, 700, 5629, 420, 262, 17, 382, 264, 700, 5629, 570, 456, 307, 257, 51268], 'temperature': 0.0, 'avg_logprob': -0.14613524350253018, 'compression_ratio': 1.9104477611940298, 'no_speech_prob': 0.06239465996623039}, {'id': 502, 'seek': 343032, 'start': 3448.4, 'end': 3457.88, 'text': ' dependence from s1 to s2 there is a anti dependence from s2 to s1 correct so this essentially causes', 'tokens': [51268, 31704, 490, 262, 16, 281, 262, 17, 456, 307, 257, 6061, 31704, 490, 262, 17, 281, 262, 16, 3006, 370, 341, 4476, 7700, 51742], 'temperature': 0.0, 'avg_logprob': -0.14613524350253018, 'compression_ratio': 1.9104477611940298, 'no_speech_prob': 0.06239465996623039}, {'id': 503, 'seek': 345788, 'start': 3457.88, 'end': 3465.28, 'text': ' a problem and what you need to do is that you kind of need to use another array for x instead', 'tokens': [50364, 257, 1154, 293, 437, 291, 643, 281, 360, 307, 300, 291, 733, 295, 643, 281, 764, 1071, 10225, 337, 2031, 2602, 50734], 'temperature': 0.0, 'avg_logprob': -0.11164494303913859, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.036615826189517975}, {'id': 504, 'seek': 345788, 'start': 3465.28, 'end': 3472.84, 'text': ' of one this thing so let me show you what you do you first copy x of i into an array called t of i', 'tokens': [50734, 295, 472, 341, 551, 370, 718, 385, 855, 291, 437, 291, 360, 291, 700, 5055, 2031, 295, 741, 666, 364, 10225, 1219, 256, 295, 741, 51112], 'temperature': 0.0, 'avg_logprob': -0.11164494303913859, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.036615826189517975}, {'id': 505, 'seek': 345788, 'start': 3472.84, 'end': 3482.6, 'text': ' right and then do the statement s1 which modifies x of i then do the statement s2 using the copied', 'tokens': [51112, 558, 293, 550, 360, 264, 5629, 262, 16, 597, 1072, 11221, 2031, 295, 741, 550, 360, 264, 5629, 262, 17, 1228, 264, 25365, 51600], 'temperature': 0.0, 'avg_logprob': -0.11164494303913859, 'compression_ratio': 1.774390243902439, 'no_speech_prob': 0.036615826189517975}, {'id': 506, 'seek': 348260, 'start': 3482.6, 'end': 3489.92, 'text': ' array right you can see that this has the same semantics of this right you originally you are', 'tokens': [50364, 10225, 558, 291, 393, 536, 300, 341, 575, 264, 912, 4361, 45298, 295, 341, 558, 291, 7993, 291, 366, 50730], 'temperature': 0.0, 'avg_logprob': -0.11384635635569126, 'compression_ratio': 1.9328859060402686, 'no_speech_prob': 0.045406680554151535}, {'id': 507, 'seek': 348260, 'start': 3489.92, 'end': 3498.64, 'text': ' writing x of i using that value of x of i and using the old value of x of i plus 1 correct the', 'tokens': [50730, 3579, 2031, 295, 741, 1228, 300, 2158, 295, 2031, 295, 741, 293, 1228, 264, 1331, 2158, 295, 2031, 295, 741, 1804, 502, 3006, 264, 51166], 'temperature': 0.0, 'avg_logprob': -0.11384635635569126, 'compression_ratio': 1.9328859060402686, 'no_speech_prob': 0.045406680554151535}, {'id': 508, 'seek': 348260, 'start': 3498.64, 'end': 3506.68, 'text': ' old value of x of i plus 1 is being copied into t of i right now I am using t of i and x of i where', 'tokens': [51166, 1331, 2158, 295, 2031, 295, 741, 1804, 502, 307, 885, 25365, 666, 256, 295, 741, 558, 586, 286, 669, 1228, 256, 295, 741, 293, 2031, 295, 741, 689, 51568], 'temperature': 0.0, 'avg_logprob': -0.11384635635569126, 'compression_ratio': 1.9328859060402686, 'no_speech_prob': 0.045406680554151535}, {'id': 509, 'seek': 350668, 'start': 3507.16, 'end': 3515.5, 'text': ' is the new value so new value plus old value divided by 2 I am able to do that now I can do', 'tokens': [50388, 307, 264, 777, 2158, 370, 777, 2158, 1804, 1331, 2158, 6666, 538, 568, 286, 669, 1075, 281, 360, 300, 586, 286, 393, 360, 50805], 'temperature': 0.0, 'avg_logprob': -0.15000573566981723, 'compression_ratio': 1.6626506024096386, 'no_speech_prob': 0.05707761272788048}, {'id': 510, 'seek': 350668, 'start': 3515.5, 'end': 3521.68, 'text': ' fission of this and then I can parallelize all three statements right again the only need to', 'tokens': [50805, 283, 3106, 295, 341, 293, 550, 286, 393, 8952, 1125, 439, 1045, 12363, 558, 797, 264, 787, 643, 281, 51114], 'temperature': 0.0, 'avg_logprob': -0.15000573566981723, 'compression_ratio': 1.6626506024096386, 'no_speech_prob': 0.05707761272788048}, {'id': 511, 'seek': 350668, 'start': 3521.68, 'end': 3529.3199999999997, 'text': ' make sure that s naught happens before s2 s1 happens before s2 right that is the dependence', 'tokens': [51114, 652, 988, 300, 262, 13138, 2314, 949, 262, 17, 262, 16, 2314, 949, 262, 17, 558, 300, 307, 264, 31704, 51496], 'temperature': 0.0, 'avg_logprob': -0.15000573566981723, 'compression_ratio': 1.6626506024096386, 'no_speech_prob': 0.05707761272788048}, {'id': 512, 'seek': 352932, 'start': 3529.32, 'end': 3543.96, 'text': ' that I have to preserve yeah if you want to parallelize that you have to have a blocking', 'tokens': [50364, 300, 286, 362, 281, 15665, 1338, 498, 291, 528, 281, 8952, 1125, 300, 291, 362, 281, 362, 257, 17776, 51096], 'temperature': 0.0, 'avg_logprob': -0.15341046760822163, 'compression_ratio': 1.75, 'no_speech_prob': 0.02153438702225685}, {'id': 513, 'seek': 352932, 'start': 3543.96, 'end': 3550.6400000000003, 'text': ' mechanism but such blocking mechanisms are expensive to implement okay so oftentimes you', 'tokens': [51096, 7513, 457, 1270, 17776, 15902, 366, 5124, 281, 4445, 1392, 370, 18349, 291, 51430], 'temperature': 0.0, 'avg_logprob': -0.15341046760822163, 'compression_ratio': 1.75, 'no_speech_prob': 0.02153438702225685}, {'id': 514, 'seek': 352932, 'start': 3550.6400000000003, 'end': 3555.88, 'text': ' say it cannot be parallelized see if you want to do blocking for every iteration it will', 'tokens': [51430, 584, 309, 2644, 312, 8952, 1602, 536, 498, 291, 528, 281, 360, 17776, 337, 633, 24784, 309, 486, 51692], 'temperature': 0.0, 'avg_logprob': -0.15341046760822163, 'compression_ratio': 1.75, 'no_speech_prob': 0.02153438702225685}, {'id': 515, 'seek': 355588, 'start': 3555.88, 'end': 3561.04, 'text': ' essentially become sequential right therefore you say it is not possible whereas now by doing', 'tokens': [50364, 4476, 1813, 42881, 558, 4412, 291, 584, 309, 307, 406, 1944, 9735, 586, 538, 884, 50622], 'temperature': 0.0, 'avg_logprob': -0.1428741455078125, 'compression_ratio': 1.6473988439306357, 'no_speech_prob': 0.08545558154582977}, {'id': 516, 'seek': 355588, 'start': 3561.04, 'end': 3566.7200000000003, 'text': ' this copying I am just saying that I can do them in parallel I do not know whether you got the', 'tokens': [50622, 341, 27976, 286, 669, 445, 1566, 300, 286, 393, 360, 552, 294, 8952, 286, 360, 406, 458, 1968, 291, 658, 264, 50906], 'temperature': 0.0, 'avg_logprob': -0.1428741455078125, 'compression_ratio': 1.6473988439306357, 'no_speech_prob': 0.08545558154582977}, {'id': 517, 'seek': 355588, 'start': 3566.7200000000003, 'end': 3578.48, 'text': ' answer that you are looking for no so let us look at this so this is what we have transformed it', 'tokens': [50906, 1867, 300, 291, 366, 1237, 337, 572, 370, 718, 505, 574, 412, 341, 370, 341, 307, 437, 321, 362, 16894, 309, 51494], 'temperature': 0.0, 'avg_logprob': -0.1428741455078125, 'compression_ratio': 1.6473988439306357, 'no_speech_prob': 0.08545558154582977}, {'id': 518, 'seek': 357848, 'start': 3578.48, 'end': 3586.2400000000002, 'text': ' correct now I can execute all statements of s naught in parallel nothing prevents me I can copy', 'tokens': [50364, 3006, 586, 286, 393, 14483, 439, 12363, 295, 262, 13138, 294, 8952, 1825, 22367, 385, 286, 393, 5055, 50752], 'temperature': 0.0, 'avg_logprob': -0.1462989694931928, 'compression_ratio': 1.763975155279503, 'no_speech_prob': 0.03695080429315567}, {'id': 519, 'seek': 357848, 'start': 3586.2400000000002, 'end': 3592.2, 'text': ' this entire xra into tra with a shift without a shift also I could have done but with a shift', 'tokens': [50752, 341, 2302, 2031, 424, 666, 256, 424, 365, 257, 5513, 1553, 257, 5513, 611, 286, 727, 362, 1096, 457, 365, 257, 5513, 51050], 'temperature': 0.0, 'avg_logprob': -0.1462989694931928, 'compression_ratio': 1.763975155279503, 'no_speech_prob': 0.03695080429315567}, {'id': 520, 'seek': 357848, 'start': 3592.2, 'end': 3599.16, 'text': ' is what I have done correct I could do for all the n elements in parallel right after I finish', 'tokens': [51050, 307, 437, 286, 362, 1096, 3006, 286, 727, 360, 337, 439, 264, 297, 4959, 294, 8952, 558, 934, 286, 2413, 51398], 'temperature': 0.0, 'avg_logprob': -0.1462989694931928, 'compression_ratio': 1.763975155279503, 'no_speech_prob': 0.03695080429315567}, {'id': 521, 'seek': 359916, 'start': 3599.16, 'end': 3609.7599999999998, 'text': ' this right I do s1 again I do all the values of x of i in parallel that means that this code', 'tokens': [50364, 341, 558, 286, 360, 262, 16, 797, 286, 360, 439, 264, 4190, 295, 2031, 295, 741, 294, 8952, 300, 1355, 300, 341, 3089, 50894], 'temperature': 0.0, 'avg_logprob': -0.10927887930386308, 'compression_ratio': 1.759493670886076, 'no_speech_prob': 0.06569267064332962}, {'id': 522, 'seek': 359916, 'start': 3609.7599999999998, 'end': 3617.44, 'text': ' can also be vectorized right after that I do s2 that code can also be vectorized so there is no', 'tokens': [50894, 393, 611, 312, 8062, 1602, 558, 934, 300, 286, 360, 262, 17, 300, 3089, 393, 611, 312, 8062, 1602, 370, 456, 307, 572, 51278], 'temperature': 0.0, 'avg_logprob': -0.10927887930386308, 'compression_ratio': 1.759493670886076, 'no_speech_prob': 0.06569267064332962}, {'id': 523, 'seek': 359916, 'start': 3617.44, 'end': 3623.24, 'text': ' blocking now the moment I have renamed this variable or copied this variable into another', 'tokens': [51278, 17776, 586, 264, 1623, 286, 362, 40949, 341, 7006, 420, 25365, 341, 7006, 666, 1071, 51568], 'temperature': 0.0, 'avg_logprob': -0.10927887930386308, 'compression_ratio': 1.759493670886076, 'no_speech_prob': 0.06569267064332962}, {'id': 524, 'seek': 362324, 'start': 3623.24, 'end': 3630.72, 'text': ' array I broke one of these dependences I broke this anti-dependence in terms of this true', 'tokens': [50364, 10225, 286, 6902, 472, 295, 613, 5672, 2667, 286, 6902, 341, 6061, 12, 36763, 655, 294, 2115, 295, 341, 2074, 50738], 'temperature': 0.0, 'avg_logprob': -0.1531317699914691, 'compression_ratio': 2.0698924731182795, 'no_speech_prob': 0.2217317819595337}, {'id': 525, 'seek': 362324, 'start': 3630.72, 'end': 3639.9199999999996, 'text': ' dependence and this copied array so now it now you can actually topologically sort this graph s0 s1 s2', 'tokens': [50738, 31704, 293, 341, 25365, 10225, 370, 586, 309, 586, 291, 393, 767, 1192, 17157, 1333, 341, 4295, 262, 15, 262, 16, 262, 17, 51198], 'temperature': 0.0, 'avg_logprob': -0.1531317699914691, 'compression_ratio': 2.0698924731182795, 'no_speech_prob': 0.2217317819595337}, {'id': 526, 'seek': 362324, 'start': 3639.9199999999996, 'end': 3644.9599999999996, 'text': ' topologically sort this graph so there is no problem once you can topologically sort you can', 'tokens': [51198, 1192, 17157, 1333, 341, 4295, 370, 456, 307, 572, 1154, 1564, 291, 393, 1192, 17157, 1333, 291, 393, 51450], 'temperature': 0.0, 'avg_logprob': -0.1531317699914691, 'compression_ratio': 2.0698924731182795, 'no_speech_prob': 0.2217317819595337}, {'id': 527, 'seek': 362324, 'start': 3644.9599999999996, 'end': 3650.64, 'text': ' actually do loop distribution and the moment you do loop distribution each one of those distributed', 'tokens': [51450, 767, 360, 6367, 7316, 293, 264, 1623, 291, 360, 6367, 7316, 1184, 472, 295, 729, 12631, 51734], 'temperature': 0.0, 'avg_logprob': -0.1531317699914691, 'compression_ratio': 2.0698924731182795, 'no_speech_prob': 0.2217317819595337}, {'id': 528, 'seek': 365064, 'start': 3650.64, 'end': 3656.04, 'text': ' loops can be vectorized right as long as there is no other dependency which prevents it to vectorize', 'tokens': [50364, 16121, 393, 312, 8062, 1602, 558, 382, 938, 382, 456, 307, 572, 661, 33621, 597, 22367, 309, 281, 8062, 1125, 50634], 'temperature': 0.0, 'avg_logprob': -0.12323054838716314, 'compression_ratio': 1.9114583333333333, 'no_speech_prob': 0.0642327144742012}, {'id': 529, 'seek': 365064, 'start': 3656.04, 'end': 3665.56, 'text': ' right so it can be vectorized okay one last transformation for vectorization is this one', 'tokens': [50634, 558, 370, 309, 393, 312, 8062, 1602, 1392, 472, 1036, 9887, 337, 8062, 2144, 307, 341, 472, 51110], 'temperature': 0.0, 'avg_logprob': -0.12323054838716314, 'compression_ratio': 1.9114583333333333, 'no_speech_prob': 0.0642327144742012}, {'id': 530, 'seek': 365064, 'start': 3665.56, 'end': 3672.4, 'text': ' let us look at it here I have a variable t a scalar variable t a scalar variable t which', 'tokens': [51110, 718, 505, 574, 412, 309, 510, 286, 362, 257, 7006, 256, 257, 39684, 7006, 256, 257, 39684, 7006, 256, 597, 51452], 'temperature': 0.0, 'avg_logprob': -0.12323054838716314, 'compression_ratio': 1.9114583333333333, 'no_speech_prob': 0.0642327144742012}, {'id': 531, 'seek': 365064, 'start': 3672.4, 'end': 3679.3399999999997, 'text': ' is some a of i plus c of i minus 1 then that scalar variable t is also being used in the', 'tokens': [51452, 307, 512, 257, 295, 741, 1804, 269, 295, 741, 3175, 502, 550, 300, 39684, 7006, 256, 307, 611, 885, 1143, 294, 264, 51799], 'temperature': 0.0, 'avg_logprob': -0.12323054838716314, 'compression_ratio': 1.9114583333333333, 'no_speech_prob': 0.0642327144742012}, {'id': 532, 'seek': 367934, 'start': 3679.34, 'end': 3685.82, 'text': ' next statement again I have the same situation that there is a dependence and there is an', 'tokens': [50364, 958, 5629, 797, 286, 362, 264, 912, 2590, 300, 456, 307, 257, 31704, 293, 456, 307, 364, 50688], 'temperature': 0.0, 'avg_logprob': -0.08320311058399289, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.004886843264102936}, {'id': 533, 'seek': 367934, 'start': 3685.82, 'end': 3695.42, 'text': ' anti-dependence correct now again I can break this by making this t of i making this t from', 'tokens': [50688, 6061, 12, 36763, 655, 3006, 586, 797, 286, 393, 1821, 341, 538, 1455, 341, 256, 295, 741, 1455, 341, 256, 490, 51168], 'temperature': 0.0, 'avg_logprob': -0.08320311058399289, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.004886843264102936}, {'id': 534, 'seek': 367934, 'start': 3695.42, 'end': 3702.1400000000003, 'text': ' a scalar to a array so this is called scalar expansion so instead of having one variable t', 'tokens': [51168, 257, 39684, 281, 257, 10225, 370, 341, 307, 1219, 39684, 11260, 370, 2602, 295, 1419, 472, 7006, 256, 51504], 'temperature': 0.0, 'avg_logprob': -0.08320311058399289, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.004886843264102936}, {'id': 535, 'seek': 367934, 'start': 3702.1400000000003, 'end': 3708.34, 'text': ' I have an array of variable the moment I put this as an array of variable only the true dependence', 'tokens': [51504, 286, 362, 364, 10225, 295, 7006, 264, 1623, 286, 829, 341, 382, 364, 10225, 295, 7006, 787, 264, 2074, 31704, 51814], 'temperature': 0.0, 'avg_logprob': -0.08320311058399289, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.004886843264102936}, {'id': 536, 'seek': 370834, 'start': 3708.34, 'end': 3714.2200000000003, 'text': ' remains the anti-dependence has gone because for each iteration I have a new temporary right', 'tokens': [50364, 7023, 264, 6061, 12, 36763, 655, 575, 2780, 570, 337, 1184, 24784, 286, 362, 257, 777, 13413, 558, 50658], 'temperature': 0.0, 'avg_logprob': -0.113606156529607, 'compression_ratio': 1.6, 'no_speech_prob': 0.0025587533600628376}, {'id': 537, 'seek': 370834, 'start': 3714.2200000000003, 'end': 3721.58, 'text': ' that is essentially what it is so this can also be parallelized okay now let us come to the familiar', 'tokens': [50658, 300, 307, 4476, 437, 309, 307, 370, 341, 393, 611, 312, 8952, 1602, 1392, 586, 718, 505, 808, 281, 264, 4963, 51026], 'temperature': 0.0, 'avg_logprob': -0.113606156529607, 'compression_ratio': 1.6, 'no_speech_prob': 0.0025587533600628376}, {'id': 538, 'seek': 370834, 'start': 3721.58, 'end': 3728.5, 'text': ' things so here is a loop where I say for i is equal to 1 to m for j is equal to 1 to n do blah', 'tokens': [51026, 721, 370, 510, 307, 257, 6367, 689, 286, 584, 337, 741, 307, 2681, 281, 502, 281, 275, 337, 361, 307, 2681, 281, 502, 281, 297, 360, 12288, 51372], 'temperature': 0.0, 'avg_logprob': -0.113606156529607, 'compression_ratio': 1.6, 'no_speech_prob': 0.0025587533600628376}, {'id': 539, 'seek': 372850, 'start': 3728.5, 'end': 3739.9, 'text': ' blah okay now can I interchange the i and j loop here do not worry what it is going to how it is', 'tokens': [50364, 12288, 1392, 586, 393, 286, 30358, 264, 741, 293, 361, 6367, 510, 360, 406, 3292, 437, 309, 307, 516, 281, 577, 309, 307, 50934], 'temperature': 0.0, 'avg_logprob': -0.14283650262015207, 'compression_ratio': 1.6206896551724137, 'no_speech_prob': 0.01103880163282156}, {'id': 540, 'seek': 372850, 'start': 3739.9, 'end': 3751.42, 'text': ' going to help but can I interchange right and write it like this let us look at let us look', 'tokens': [50934, 516, 281, 854, 457, 393, 286, 30358, 558, 293, 2464, 309, 411, 341, 718, 505, 574, 412, 718, 505, 574, 51510], 'temperature': 0.0, 'avg_logprob': -0.14283650262015207, 'compression_ratio': 1.6206896551724137, 'no_speech_prob': 0.01103880163282156}, {'id': 541, 'seek': 375142, 'start': 3751.42, 'end': 3758.7400000000002, 'text': ' at the dependence right x of i j is equal to x of i minus 1 j right so the dependence here is', 'tokens': [50364, 412, 264, 31704, 558, 2031, 295, 741, 361, 307, 2681, 281, 2031, 295, 741, 3175, 502, 361, 558, 370, 264, 31704, 510, 307, 50730], 'temperature': 0.0, 'avg_logprob': -0.10571048657099406, 'compression_ratio': 1.75625, 'no_speech_prob': 0.023302672430872917}, {'id': 542, 'seek': 375142, 'start': 3758.7400000000002, 'end': 3771.62, 'text': ' 1 0 right now if you interchange the loop put j i the dependence is going to become 0 1 right now', 'tokens': [50730, 502, 1958, 558, 586, 498, 291, 30358, 264, 6367, 829, 361, 741, 264, 31704, 307, 516, 281, 1813, 1958, 502, 558, 586, 51374], 'temperature': 0.0, 'avg_logprob': -0.10571048657099406, 'compression_ratio': 1.75625, 'no_speech_prob': 0.023302672430872917}, {'id': 543, 'seek': 375142, 'start': 3771.62, 'end': 3778.42, 'text': ' the question to ask is that is 0 1 the legal dependence vector what did I say about legal', 'tokens': [51374, 264, 1168, 281, 1029, 307, 300, 307, 1958, 502, 264, 5089, 31704, 8062, 437, 630, 286, 584, 466, 5089, 51714], 'temperature': 0.0, 'avg_logprob': -0.10571048657099406, 'compression_ratio': 1.75625, 'no_speech_prob': 0.023302672430872917}, {'id': 544, 'seek': 377842, 'start': 3778.42, 'end': 3787.1, 'text': ' dependence vector the first non-zero element has to be positive is 0 1 illegal vector or not yes', 'tokens': [50364, 31704, 8062, 264, 700, 2107, 12, 32226, 4478, 575, 281, 312, 3353, 307, 1958, 502, 11905, 8062, 420, 406, 2086, 50798], 'temperature': 0.0, 'avg_logprob': -0.13918075561523438, 'compression_ratio': 1.75, 'no_speech_prob': 0.08143211156129837}, {'id': 545, 'seek': 377842, 'start': 3787.1, 'end': 3793.58, 'text': ' therefore it is possible to do interchange on this that is essentially what the previous', 'tokens': [50798, 4412, 309, 307, 1944, 281, 360, 30358, 322, 341, 300, 307, 4476, 437, 264, 3894, 51122], 'temperature': 0.0, 'avg_logprob': -0.13918075561523438, 'compression_ratio': 1.75, 'no_speech_prob': 0.08143211156129837}, {'id': 546, 'seek': 377842, 'start': 3793.58, 'end': 3798.06, 'text': ' slide was trying to tell you in mathematics okay I was just trying to give you the intuition', 'tokens': [51122, 4137, 390, 1382, 281, 980, 291, 294, 18666, 1392, 286, 390, 445, 1382, 281, 976, 291, 264, 24002, 51346], 'temperature': 0.0, 'avg_logprob': -0.13918075561523438, 'compression_ratio': 1.75, 'no_speech_prob': 0.08143211156129837}, {'id': 547, 'seek': 377842, 'start': 3798.06, 'end': 3804.14, 'text': ' behind it so in this case loop interchange is possible so now tell me where loop interchange', 'tokens': [51346, 2261, 309, 370, 294, 341, 1389, 6367, 30358, 307, 1944, 370, 586, 980, 385, 689, 6367, 30358, 51650], 'temperature': 0.0, 'avg_logprob': -0.13918075561523438, 'compression_ratio': 1.75, 'no_speech_prob': 0.08143211156129837}, {'id': 548, 'seek': 380414, 'start': 3804.14, 'end': 3815.66, 'text': ' is not possible so if instead of having x i j is equal to x i minus 1 j if I have x i minus 1', 'tokens': [50364, 307, 406, 1944, 370, 498, 2602, 295, 1419, 2031, 741, 361, 307, 2681, 281, 2031, 741, 3175, 502, 361, 498, 286, 362, 2031, 741, 3175, 502, 50940], 'temperature': 0.0, 'avg_logprob': -0.12787194368315907, 'compression_ratio': 1.868421052631579, 'no_speech_prob': 0.027291646227240562}, {'id': 549, 'seek': 380414, 'start': 3815.66, 'end': 3825.54, 'text': ' j minus 1 that is not a problem a plus 1 that is very good right if I have here as x i minus 1', 'tokens': [50940, 361, 3175, 502, 300, 307, 406, 257, 1154, 257, 1804, 502, 300, 307, 588, 665, 558, 498, 286, 362, 510, 382, 2031, 741, 3175, 502, 51434], 'temperature': 0.0, 'avg_logprob': -0.12787194368315907, 'compression_ratio': 1.868421052631579, 'no_speech_prob': 0.027291646227240562}, {'id': 550, 'seek': 380414, 'start': 3825.54, 'end': 3832.8199999999997, 'text': ' j plus 1 then what happens is that I have a 1 minus 1 dependence and when I permute them I have', 'tokens': [51434, 361, 1804, 502, 550, 437, 2314, 307, 300, 286, 362, 257, 502, 3175, 502, 31704, 293, 562, 286, 4784, 1169, 552, 286, 362, 51798], 'temperature': 0.0, 'avg_logprob': -0.12787194368315907, 'compression_ratio': 1.868421052631579, 'no_speech_prob': 0.027291646227240562}, {'id': 551, 'seek': 383282, 'start': 3832.82, 'end': 3840.3, 'text': ' a minus 1 plus 1 and the first non-zero element is negative therefore it is not a legal vector so', 'tokens': [50364, 257, 3175, 502, 1804, 502, 293, 264, 700, 2107, 12, 32226, 4478, 307, 3671, 4412, 309, 307, 406, 257, 5089, 8062, 370, 50738], 'temperature': 0.0, 'avg_logprob': -0.09571917416298226, 'compression_ratio': 1.655367231638418, 'no_speech_prob': 0.008026093244552612}, {'id': 552, 'seek': 383282, 'start': 3840.3, 'end': 3846.98, 'text': ' we are violating some dependences so that is not possible okay now let us also see pictorially what', 'tokens': [50738, 321, 366, 42201, 512, 5672, 2667, 370, 300, 307, 406, 1944, 1392, 586, 718, 505, 611, 536, 2317, 284, 2270, 437, 51072], 'temperature': 0.0, 'avg_logprob': -0.09571917416298226, 'compression_ratio': 1.655367231638418, 'no_speech_prob': 0.008026093244552612}, {'id': 553, 'seek': 383282, 'start': 3846.98, 'end': 3856.78, 'text': ' is happening here okay the same example right x i j right i minus 1 j right now see this is how', 'tokens': [51072, 307, 2737, 510, 1392, 264, 912, 1365, 558, 2031, 741, 361, 558, 741, 3175, 502, 361, 558, 586, 536, 341, 307, 577, 51562], 'temperature': 0.0, 'avg_logprob': -0.09571917416298226, 'compression_ratio': 1.655367231638418, 'no_speech_prob': 0.008026093244552612}, {'id': 554, 'seek': 385678, 'start': 3856.78, 'end': 3866.26, 'text': ' the loop is executing correct the dependence is from x i j to x i minus 1 j that means that for', 'tokens': [50364, 264, 6367, 307, 32368, 3006, 264, 31704, 307, 490, 2031, 741, 361, 281, 2031, 741, 3175, 502, 361, 300, 1355, 300, 337, 50838], 'temperature': 0.0, 'avg_logprob': -0.10860937768286401, 'compression_ratio': 1.8564356435643565, 'no_speech_prob': 0.01870189607143402}, {'id': 555, 'seek': 385678, 'start': 3866.26, 'end': 3872.7400000000002, 'text': ' the same j value but the previous i value right what is being produced in i j is consumed in i', 'tokens': [50838, 264, 912, 361, 2158, 457, 264, 3894, 741, 2158, 558, 437, 307, 885, 7126, 294, 741, 361, 307, 21226, 294, 741, 51162], 'temperature': 0.0, 'avg_logprob': -0.10860937768286401, 'compression_ratio': 1.8564356435643565, 'no_speech_prob': 0.01870189607143402}, {'id': 556, 'seek': 385678, 'start': 3872.7400000000002, 'end': 3881.1000000000004, 'text': ' plus 1 j so the dependence is this blue arrow right this was our original execution order now', 'tokens': [51162, 1804, 502, 361, 370, 264, 31704, 307, 341, 3344, 11610, 558, 341, 390, 527, 3380, 15058, 1668, 586, 51580], 'temperature': 0.0, 'avg_logprob': -0.10860937768286401, 'compression_ratio': 1.8564356435643565, 'no_speech_prob': 0.01870189607143402}, {'id': 557, 'seek': 385678, 'start': 3881.1000000000004, 'end': 3886.1400000000003, 'text': ' if I want to execute in the other order am I satisfying the dependences or not is what you', 'tokens': [51580, 498, 286, 528, 281, 14483, 294, 264, 661, 1668, 669, 286, 18348, 264, 5672, 2667, 420, 406, 307, 437, 291, 51832], 'temperature': 0.0, 'avg_logprob': -0.10860937768286401, 'compression_ratio': 1.8564356435643565, 'no_speech_prob': 0.01870189607143402}, {'id': 558, 'seek': 388614, 'start': 3886.14, 'end': 3895.2599999999998, 'text': ' need to see right if you do loop interchange this is what it is are you satisfying the', 'tokens': [50364, 643, 281, 536, 558, 498, 291, 360, 6367, 30358, 341, 307, 437, 309, 307, 366, 291, 18348, 264, 50820], 'temperature': 0.0, 'avg_logprob': -0.11637512254126278, 'compression_ratio': 2.0168539325842696, 'no_speech_prob': 0.002203477779403329}, {'id': 559, 'seek': 388614, 'start': 3895.2599999999998, 'end': 3902.3399999999997, 'text': ' dependences or not right so if you are going this way this dependence is satisfied if you', 'tokens': [50820, 5672, 2667, 420, 406, 558, 370, 498, 291, 366, 516, 341, 636, 341, 31704, 307, 11239, 498, 291, 51174], 'temperature': 0.0, 'avg_logprob': -0.11637512254126278, 'compression_ratio': 2.0168539325842696, 'no_speech_prob': 0.002203477779403329}, {'id': 560, 'seek': 388614, 'start': 3902.3399999999997, 'end': 3907.7, 'text': ' are going this way also that dependence is satisfied so there is no problem right of', 'tokens': [51174, 366, 516, 341, 636, 611, 300, 31704, 307, 11239, 370, 456, 307, 572, 1154, 558, 295, 51442], 'temperature': 0.0, 'avg_logprob': -0.11637512254126278, 'compression_ratio': 2.0168539325842696, 'no_speech_prob': 0.002203477779403329}, {'id': 561, 'seek': 388614, 'start': 3907.7, 'end': 3912.9, 'text': ' course you cannot be checking it like this this is for our understanding the way to check is look', 'tokens': [51442, 1164, 291, 2644, 312, 8568, 309, 411, 341, 341, 307, 337, 527, 3701, 264, 636, 281, 1520, 307, 574, 51702], 'temperature': 0.0, 'avg_logprob': -0.11637512254126278, 'compression_ratio': 2.0168539325842696, 'no_speech_prob': 0.002203477779403329}, {'id': 562, 'seek': 391290, 'start': 3912.9, 'end': 3919.14, 'text': ' at the dependence vector permute them and then see if the permutation does not result in a', 'tokens': [50364, 412, 264, 31704, 8062, 4784, 1169, 552, 293, 550, 536, 498, 264, 4784, 11380, 775, 406, 1874, 294, 257, 50676], 'temperature': 0.0, 'avg_logprob': -0.12464702263307036, 'compression_ratio': 1.7699530516431925, 'no_speech_prob': 0.03803274780511856}, {'id': 563, 'seek': 391290, 'start': 3919.14, 'end': 3927.54, 'text': ' illegal vector then it is a possible thing okay so here is your example for a case where interchange', 'tokens': [50676, 11905, 8062, 550, 309, 307, 257, 1944, 551, 1392, 370, 510, 307, 428, 1365, 337, 257, 1389, 689, 30358, 51096], 'temperature': 0.0, 'avg_logprob': -0.12464702263307036, 'compression_ratio': 1.7699530516431925, 'no_speech_prob': 0.03803274780511856}, {'id': 564, 'seek': 391290, 'start': 3927.54, 'end': 3934.6600000000003, 'text': ' is not permissible right as you can see I have okay this is actually an anti-dependence from', 'tokens': [51096, 307, 406, 4784, 41073, 558, 382, 291, 393, 536, 286, 362, 1392, 341, 307, 767, 364, 6061, 12, 36763, 655, 490, 51452], 'temperature': 0.0, 'avg_logprob': -0.12464702263307036, 'compression_ratio': 1.7699530516431925, 'no_speech_prob': 0.03803274780511856}, {'id': 565, 'seek': 391290, 'start': 3934.6600000000003, 'end': 3939.02, 'text': ' here to here that is what we are talking about that is why the arrow is red rather than blue', 'tokens': [51452, 510, 281, 510, 300, 307, 437, 321, 366, 1417, 466, 300, 307, 983, 264, 11610, 307, 2182, 2831, 813, 3344, 51670], 'temperature': 0.0, 'avg_logprob': -0.12464702263307036, 'compression_ratio': 1.7699530516431925, 'no_speech_prob': 0.03803274780511856}, {'id': 566, 'seek': 393902, 'start': 3939.98, 'end': 3948.74, 'text': ' so the anti-dependence vector here is 1, minus 1 right that is anti-dependence because we are', 'tokens': [50412, 370, 264, 6061, 12, 36763, 655, 8062, 510, 307, 502, 11, 3175, 502, 558, 300, 307, 6061, 12, 36763, 655, 570, 321, 366, 50850], 'temperature': 0.0, 'avg_logprob': -0.157562255859375, 'compression_ratio': 1.75625, 'no_speech_prob': 0.013183604925870895}, {'id': 567, 'seek': 393902, 'start': 3948.74, 'end': 3954.5, 'text': ' seeing it from here to here okay it is only an anti-dependence there is no true dependence here', 'tokens': [50850, 2577, 309, 490, 510, 281, 510, 1392, 309, 307, 787, 364, 6061, 12, 36763, 655, 456, 307, 572, 2074, 31704, 510, 51138], 'temperature': 0.0, 'avg_logprob': -0.157562255859375, 'compression_ratio': 1.75625, 'no_speech_prob': 0.013183604925870895}, {'id': 568, 'seek': 393902, 'start': 3954.5, 'end': 3964.74, 'text': ' all right now if I interchange the loop look at look at the execution order right when I am', 'tokens': [51138, 439, 558, 586, 498, 286, 30358, 264, 6367, 574, 412, 574, 412, 264, 15058, 1668, 558, 562, 286, 669, 51650], 'temperature': 0.0, 'avg_logprob': -0.157562255859375, 'compression_ratio': 1.75625, 'no_speech_prob': 0.013183604925870895}, {'id': 569, 'seek': 396474, 'start': 3964.74, 'end': 3969.66, 'text': ' executing this element I am using the value of this element which I have not even visited', 'tokens': [50364, 32368, 341, 4478, 286, 669, 1228, 264, 2158, 295, 341, 4478, 597, 286, 362, 406, 754, 11220, 50610], 'temperature': 0.0, 'avg_logprob': -0.10072914522085617, 'compression_ratio': 1.6768292682926829, 'no_speech_prob': 0.009330252185463905}, {'id': 570, 'seek': 396474, 'start': 3969.66, 'end': 3976.4599999999996, 'text': ' that means it is a old value correct so that is why I call it as anti-dependence right now', 'tokens': [50610, 300, 1355, 309, 307, 257, 1331, 2158, 3006, 370, 300, 307, 983, 286, 818, 309, 382, 6061, 12, 36763, 655, 558, 586, 50950], 'temperature': 0.0, 'avg_logprob': -0.10072914522085617, 'compression_ratio': 1.6768292682926829, 'no_speech_prob': 0.009330252185463905}, {'id': 571, 'seek': 396474, 'start': 3976.4599999999996, 'end': 3988.4599999999996, 'text': ' if I do loop interchange which order am I going then what happens now I am using the new value', 'tokens': [50950, 498, 286, 360, 6367, 30358, 597, 1668, 669, 286, 516, 550, 437, 2314, 586, 286, 669, 1228, 264, 777, 2158, 51550], 'temperature': 0.0, 'avg_logprob': -0.10072914522085617, 'compression_ratio': 1.6768292682926829, 'no_speech_prob': 0.009330252185463905}, {'id': 572, 'seek': 398846, 'start': 3988.46, 'end': 3997.3, 'text': ' which means that I have violated my anti-dependence so it is not a valid transformation so the', 'tokens': [50364, 597, 1355, 300, 286, 362, 33239, 452, 6061, 12, 36763, 655, 370, 309, 307, 406, 257, 7363, 9887, 370, 264, 50806], 'temperature': 0.0, 'avg_logprob': -0.13002306007477174, 'compression_ratio': 1.721698113207547, 'no_speech_prob': 0.02078157104551792}, {'id': 573, 'seek': 398846, 'start': 3997.3, 'end': 4001.62, 'text': ' anti-dependence here is actually 1, minus 1 which is same as what we discussed earlier', 'tokens': [50806, 6061, 12, 36763, 655, 510, 307, 767, 502, 11, 3175, 502, 597, 307, 912, 382, 437, 321, 7152, 3071, 51022], 'temperature': 0.0, 'avg_logprob': -0.13002306007477174, 'compression_ratio': 1.721698113207547, 'no_speech_prob': 0.02078157104551792}, {'id': 574, 'seek': 398846, 'start': 4001.62, 'end': 4010.02, 'text': ' and that anti-dependence is a right cannot be satisfied when you do a loop interchange okay', 'tokens': [51022, 293, 300, 6061, 12, 36763, 655, 307, 257, 558, 2644, 312, 11239, 562, 291, 360, 257, 6367, 30358, 1392, 51442], 'temperature': 0.0, 'avg_logprob': -0.13002306007477174, 'compression_ratio': 1.721698113207547, 'no_speech_prob': 0.02078157104551792}, {'id': 575, 'seek': 398846, 'start': 4010.02, 'end': 4017.62, 'text': ' there you go right so this is the mathematics behind this transformation can be represented', 'tokens': [51442, 456, 291, 352, 558, 370, 341, 307, 264, 18666, 2261, 341, 9887, 393, 312, 10379, 51822], 'temperature': 0.0, 'avg_logprob': -0.13002306007477174, 'compression_ratio': 1.721698113207547, 'no_speech_prob': 0.02078157104551792}, {'id': 576, 'seek': 401762, 'start': 4017.62, 'end': 4022.54, 'text': ' as a matrix and then you can multiply it with the dependence vector and then you see whether', 'tokens': [50364, 382, 257, 8141, 293, 550, 291, 393, 12972, 309, 365, 264, 31704, 8062, 293, 550, 291, 536, 1968, 50610], 'temperature': 0.0, 'avg_logprob': -0.08927845071863245, 'compression_ratio': 2.0, 'no_speech_prob': 0.005033093970268965}, {'id': 577, 'seek': 401762, 'start': 4022.54, 'end': 4028.14, 'text': ' the resulting thing is this which I kind of explained as look at it as permutation of the', 'tokens': [50610, 264, 16505, 551, 307, 341, 597, 286, 733, 295, 8825, 382, 574, 412, 309, 382, 4784, 11380, 295, 264, 50890], 'temperature': 0.0, 'avg_logprob': -0.08927845071863245, 'compression_ratio': 2.0, 'no_speech_prob': 0.005033093970268965}, {'id': 578, 'seek': 401762, 'start': 4028.14, 'end': 4033.1, 'text': ' bits and then you will get permutation of the vectors and you will get okay now let us look', 'tokens': [50890, 9239, 293, 550, 291, 486, 483, 4784, 11380, 295, 264, 18875, 293, 291, 486, 483, 1392, 586, 718, 505, 574, 51138], 'temperature': 0.0, 'avg_logprob': -0.08927845071863245, 'compression_ratio': 2.0, 'no_speech_prob': 0.005033093970268965}, {'id': 579, 'seek': 401762, 'start': 4033.1, 'end': 4039.54, 'text': ' at this example and then see if I still want to perform a loop interchange can I do that right', 'tokens': [51138, 412, 341, 1365, 293, 550, 536, 498, 286, 920, 528, 281, 2042, 257, 6367, 30358, 393, 286, 360, 300, 558, 51460], 'temperature': 0.0, 'avg_logprob': -0.08927845071863245, 'compression_ratio': 2.0, 'no_speech_prob': 0.005033093970268965}, {'id': 580, 'seek': 401762, 'start': 4039.54, 'end': 4046.42, 'text': ' in this case I do what is called loop interchange and reversal right let us see what that is', 'tokens': [51460, 294, 341, 1389, 286, 360, 437, 307, 1219, 6367, 30358, 293, 42778, 558, 718, 505, 536, 437, 300, 307, 51804], 'temperature': 0.0, 'avg_logprob': -0.08927845071863245, 'compression_ratio': 2.0, 'no_speech_prob': 0.005033093970268965}, {'id': 581, 'seek': 404642, 'start': 4046.42, 'end': 4055.34, 'text': ' okay so I have done the J loop and then the I loop I have done the interchange but now what', 'tokens': [50364, 1392, 370, 286, 362, 1096, 264, 508, 6367, 293, 550, 264, 286, 6367, 286, 362, 1096, 264, 30358, 457, 586, 437, 50810], 'temperature': 0.0, 'avg_logprob': -0.1144312336331322, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.011213836260139942}, {'id': 582, 'seek': 404642, 'start': 4055.34, 'end': 4063.7000000000003, 'text': ' I am doing is that for the J loop I am going from n minus 1 to 1 that means that this is the order', 'tokens': [50810, 286, 669, 884, 307, 300, 337, 264, 508, 6367, 286, 669, 516, 490, 297, 3175, 502, 281, 502, 300, 1355, 300, 341, 307, 264, 1668, 51228], 'temperature': 0.0, 'avg_logprob': -0.1144312336331322, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.011213836260139942}, {'id': 583, 'seek': 404642, 'start': 4063.7000000000003, 'end': 4073.3, 'text': ' that I am so for J is equal to 5 I goes from 1 to 4 and then for J is equal to 4 I goes from 1 to 4', 'tokens': [51228, 300, 286, 669, 370, 337, 508, 307, 2681, 281, 1025, 286, 1709, 490, 502, 281, 1017, 293, 550, 337, 508, 307, 2681, 281, 1017, 286, 1709, 490, 502, 281, 1017, 51708], 'temperature': 0.0, 'avg_logprob': -0.1144312336331322, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.011213836260139942}, {'id': 584, 'seek': 407330, 'start': 4073.3, 'end': 4080.38, 'text': ' and so on now is that anti-dependence is satisfied yes so now what was happening is that you had that', 'tokens': [50364, 293, 370, 322, 586, 307, 300, 6061, 12, 36763, 655, 307, 11239, 2086, 370, 586, 437, 390, 2737, 307, 300, 291, 632, 300, 50718], 'temperature': 0.0, 'avg_logprob': -0.1602228309797204, 'compression_ratio': 1.8055555555555556, 'no_speech_prob': 0.0480850487947464}, {'id': 585, 'seek': 407330, 'start': 4080.38, 'end': 4087.02, 'text': ' 1 minus 1 vector you did a permutation which resulted in minus 1 comma 1 which is not legal', 'tokens': [50718, 502, 3175, 502, 8062, 291, 630, 257, 4784, 11380, 597, 18753, 294, 3175, 502, 22117, 502, 597, 307, 406, 5089, 51050], 'temperature': 0.0, 'avg_logprob': -0.1602228309797204, 'compression_ratio': 1.8055555555555556, 'no_speech_prob': 0.0480850487947464}, {'id': 586, 'seek': 407330, 'start': 4087.02, 'end': 4093.3, 'text': ' then you did one more transformation which is the loop reversal and loop reversal has this effect', 'tokens': [51050, 550, 291, 630, 472, 544, 9887, 597, 307, 264, 6367, 42778, 293, 6367, 42778, 575, 341, 1802, 51364], 'temperature': 0.0, 'avg_logprob': -0.1602228309797204, 'compression_ratio': 1.8055555555555556, 'no_speech_prob': 0.0480850487947464}, {'id': 587, 'seek': 407330, 'start': 4093.3, 'end': 4100.5, 'text': ' of changing the order so that minus 1 1 has now become again 1 comma minus 1 so you were okay with', 'tokens': [51364, 295, 4473, 264, 1668, 370, 300, 3175, 502, 502, 575, 586, 1813, 797, 502, 22117, 3175, 502, 370, 291, 645, 1392, 365, 51724], 'temperature': 0.0, 'avg_logprob': -0.1602228309797204, 'compression_ratio': 1.8055555555555556, 'no_speech_prob': 0.0480850487947464}, {'id': 588, 'seek': 410050, 'start': 4101.02, 'end': 4104.54, 'text': ' that okay again I do not want to go into all the mathematics because it will take quite a bit of', 'tokens': [50390, 300, 1392, 797, 286, 360, 406, 528, 281, 352, 666, 439, 264, 18666, 570, 309, 486, 747, 1596, 257, 857, 295, 50566], 'temperature': 0.0, 'avg_logprob': -0.1289650024251735, 'compression_ratio': 1.8101851851851851, 'no_speech_prob': 0.017625831067562103}, {'id': 589, 'seek': 410050, 'start': 4104.54, 'end': 4111.86, 'text': ' time to do that again I think I am going to skip all of this parallelization because we do not have', 'tokens': [50566, 565, 281, 360, 300, 797, 286, 519, 286, 669, 516, 281, 10023, 439, 295, 341, 8952, 2144, 570, 321, 360, 406, 362, 50932], 'temperature': 0.0, 'avg_logprob': -0.1289650024251735, 'compression_ratio': 1.8101851851851851, 'no_speech_prob': 0.017625831067562103}, {'id': 590, 'seek': 410050, 'start': 4111.86, 'end': 4119.06, 'text': ' time for this I was trying to hide this but when it crashed it did not necessarily save this so a', 'tokens': [50932, 565, 337, 341, 286, 390, 1382, 281, 6479, 341, 457, 562, 309, 24190, 309, 630, 406, 4725, 3155, 341, 370, 257, 51292], 'temperature': 0.0, 'avg_logprob': -0.1289650024251735, 'compression_ratio': 1.8101851851851851, 'no_speech_prob': 0.017625831067562103}, {'id': 591, 'seek': 410050, 'start': 4119.06, 'end': 4123.86, 'text': ' lot of things about parallelization I will leave the slides with you you can have a look at them', 'tokens': [51292, 688, 295, 721, 466, 8952, 2144, 286, 486, 1856, 264, 9788, 365, 291, 291, 393, 362, 257, 574, 412, 552, 51532], 'temperature': 0.0, 'avg_logprob': -0.1289650024251735, 'compression_ratio': 1.8101851851851851, 'no_speech_prob': 0.017625831067562103}, {'id': 592, 'seek': 412386, 'start': 4123.86, 'end': 4131.54, 'text': ' I just want to cover one aspect of locality before we close okay so again as we mentioned', 'tokens': [50364, 286, 445, 528, 281, 2060, 472, 4171, 295, 1628, 1860, 949, 321, 1998, 1392, 370, 797, 382, 321, 2835, 50748], 'temperature': 0.0, 'avg_logprob': -0.1587228016419844, 'compression_ratio': 1.737327188940092, 'no_speech_prob': 0.12444869428873062}, {'id': 593, 'seek': 412386, 'start': 4131.54, 'end': 4136.94, 'text': ' why do we want to do loop interchange right loop interchange is typically done when you want to', 'tokens': [50748, 983, 360, 321, 528, 281, 360, 6367, 30358, 558, 6367, 30358, 307, 5850, 1096, 562, 291, 528, 281, 51018], 'temperature': 0.0, 'avg_logprob': -0.1587228016419844, 'compression_ratio': 1.737327188940092, 'no_speech_prob': 0.12444869428873062}, {'id': 594, 'seek': 412386, 'start': 4136.94, 'end': 4144.179999999999, 'text': ' exploit locality right morning we saw that example right where you had this i j and you have this', 'tokens': [51018, 25924, 1628, 1860, 558, 2446, 321, 1866, 300, 1365, 558, 689, 291, 632, 341, 741, 361, 293, 291, 362, 341, 51380], 'temperature': 0.0, 'avg_logprob': -0.1587228016419844, 'compression_ratio': 1.737327188940092, 'no_speech_prob': 0.12444869428873062}, {'id': 595, 'seek': 412386, 'start': 4144.179999999999, 'end': 4150.299999999999, 'text': ' two-dimensional array and the loop was written J i right and you are accessing B of j comma i', 'tokens': [51380, 732, 12, 18759, 10225, 293, 264, 6367, 390, 3720, 508, 741, 558, 293, 291, 366, 26440, 363, 295, 361, 22117, 741, 51686], 'temperature': 0.0, 'avg_logprob': -0.1587228016419844, 'compression_ratio': 1.737327188940092, 'no_speech_prob': 0.12444869428873062}, {'id': 596, 'seek': 415030, 'start': 4150.42, 'end': 4157.3, 'text': ' and you are going right column wise which was bad right improve your locality what you could', 'tokens': [50370, 293, 291, 366, 516, 558, 7738, 10829, 597, 390, 1578, 558, 3470, 428, 1628, 1860, 437, 291, 727, 50714], 'temperature': 0.0, 'avg_logprob': -0.10162312307475525, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.005173735320568085}, {'id': 597, 'seek': 415030, 'start': 4157.3, 'end': 4162.06, 'text': ' have done is you can do a loop interchange but you can do a loop interchange only if it is legal', 'tokens': [50714, 362, 1096, 307, 291, 393, 360, 257, 6367, 30358, 457, 291, 393, 360, 257, 6367, 30358, 787, 498, 309, 307, 5089, 50952], 'temperature': 0.0, 'avg_logprob': -0.10162312307475525, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.005173735320568085}, {'id': 598, 'seek': 415030, 'start': 4162.06, 'end': 4167.7, 'text': ' now let us look at this example of matrix multiplication right which is another interesting', 'tokens': [50952, 586, 718, 505, 574, 412, 341, 1365, 295, 8141, 27290, 558, 597, 307, 1071, 1880, 51234], 'temperature': 0.0, 'avg_logprob': -0.10162312307475525, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.005173735320568085}, {'id': 599, 'seek': 415030, 'start': 4167.7, 'end': 4173.5, 'text': ' example right so in the matrix multiplication what you have is that you have two inner loops', 'tokens': [51234, 1365, 558, 370, 294, 264, 8141, 27290, 437, 291, 362, 307, 300, 291, 362, 732, 7284, 16121, 51524], 'temperature': 0.0, 'avg_logprob': -0.10162312307475525, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.005173735320568085}, {'id': 600, 'seek': 417350, 'start': 4173.5, 'end': 4183.74, 'text': ' right and you are trying to access let us look at this right why array is being accessed i comma', 'tokens': [50364, 558, 293, 291, 366, 1382, 281, 2105, 718, 505, 574, 412, 341, 558, 983, 10225, 307, 885, 34211, 741, 22117, 50876], 'temperature': 0.0, 'avg_logprob': -0.1981630463531052, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.012787618674337864}, {'id': 601, 'seek': 417350, 'start': 4183.74, 'end': 4190.18, 'text': ' k right and k varies faster that means that you are going to access this in the row major order', 'tokens': [50876, 350, 558, 293, 350, 21716, 4663, 300, 1355, 300, 291, 366, 516, 281, 2105, 341, 294, 264, 5386, 2563, 1668, 51198], 'temperature': 0.0, 'avg_logprob': -0.1981630463531052, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.012787618674337864}, {'id': 602, 'seek': 417350, 'start': 4190.18, 'end': 4198.5, 'text': ' there is no problem whereas z array is going to be accessed as z k j k array is varying faster', 'tokens': [51198, 456, 307, 572, 1154, 9735, 710, 10225, 307, 516, 281, 312, 34211, 382, 710, 350, 361, 350, 10225, 307, 22984, 4663, 51614], 'temperature': 0.0, 'avg_logprob': -0.1981630463531052, 'compression_ratio': 1.8164556962025316, 'no_speech_prob': 0.012787618674337864}, {'id': 603, 'seek': 419850, 'start': 4198.5, 'end': 4205.06, 'text': ' than the j array sorry the k index is varying faster than the j index that means that you', 'tokens': [50364, 813, 264, 361, 10225, 2597, 264, 350, 8186, 307, 22984, 4663, 813, 264, 361, 8186, 300, 1355, 300, 291, 50692], 'temperature': 0.0, 'avg_logprob': -0.13273436764636673, 'compression_ratio': 1.7934272300469483, 'no_speech_prob': 0.012876381166279316}, {'id': 604, 'seek': 419850, 'start': 4205.06, 'end': 4214.3, 'text': ' are going column wise so this is going to have lower locality not only that both of these arrays', 'tokens': [50692, 366, 516, 7738, 10829, 370, 341, 307, 516, 281, 362, 3126, 1628, 1860, 406, 787, 300, 1293, 295, 613, 41011, 51154], 'temperature': 0.0, 'avg_logprob': -0.13273436764636673, 'compression_ratio': 1.7934272300469483, 'no_speech_prob': 0.012876381166279316}, {'id': 605, 'seek': 419850, 'start': 4214.3, 'end': 4219.86, 'text': ' are going to be repeatedly accessed because you have an outer loop also correct so if you remember', 'tokens': [51154, 366, 516, 281, 312, 18227, 34211, 570, 291, 362, 364, 10847, 6367, 611, 3006, 370, 498, 291, 1604, 51432], 'temperature': 0.0, 'avg_logprob': -0.13273436764636673, 'compression_ratio': 1.7934272300469483, 'no_speech_prob': 0.012876381166279316}, {'id': 606, 'seek': 419850, 'start': 4219.86, 'end': 4227.14, 'text': ' matrix multiplication you take each row multiply it with every column correct so first row first', 'tokens': [51432, 8141, 27290, 291, 747, 1184, 5386, 12972, 309, 365, 633, 7738, 3006, 370, 700, 5386, 700, 51796], 'temperature': 0.0, 'avg_logprob': -0.13273436764636673, 'compression_ratio': 1.7934272300469483, 'no_speech_prob': 0.012876381166279316}, {'id': 607, 'seek': 422714, 'start': 4227.14, 'end': 4233.860000000001, 'text': ' column first row second column first row third column first row nth column right so if you go', 'tokens': [50364, 7738, 700, 5386, 1150, 7738, 700, 5386, 2636, 7738, 700, 5386, 297, 392, 7738, 558, 370, 498, 291, 352, 50700], 'temperature': 0.0, 'avg_logprob': -0.12648799807526345, 'compression_ratio': 1.935, 'no_speech_prob': 0.011176793836057186}, {'id': 608, 'seek': 422714, 'start': 4233.860000000001, 'end': 4238.9800000000005, 'text': ' access all the elements of the first row then come back and try to access the elements of the first', 'tokens': [50700, 2105, 439, 264, 4959, 295, 264, 700, 5386, 550, 808, 646, 293, 853, 281, 2105, 264, 4959, 295, 264, 700, 50956], 'temperature': 0.0, 'avg_logprob': -0.12648799807526345, 'compression_ratio': 1.935, 'no_speech_prob': 0.011176793836057186}, {'id': 609, 'seek': 422714, 'start': 4238.9800000000005, 'end': 4246.700000000001, 'text': ' row again if it is not there in the cache then you have a conflict miss or a capacity miss depending', 'tokens': [50956, 5386, 797, 498, 309, 307, 406, 456, 294, 264, 19459, 550, 291, 362, 257, 6596, 1713, 420, 257, 6042, 1713, 5413, 51342], 'temperature': 0.0, 'avg_logprob': -0.12648799807526345, 'compression_ratio': 1.935, 'no_speech_prob': 0.011176793836057186}, {'id': 610, 'seek': 422714, 'start': 4246.700000000001, 'end': 4252.1, 'text': ' on whatever happens right so that is actually basically you just brought this entire row one', 'tokens': [51342, 322, 2035, 2314, 558, 370, 300, 307, 767, 1936, 291, 445, 3038, 341, 2302, 5386, 472, 51612], 'temperature': 0.0, 'avg_logprob': -0.12648799807526345, 'compression_ratio': 1.935, 'no_speech_prob': 0.011176793836057186}, {'id': 611, 'seek': 425210, 'start': 4252.1, 'end': 4257.18, 'text': ' after another one cache block after another but then again if you want to access it it is not', 'tokens': [50364, 934, 1071, 472, 19459, 3461, 934, 1071, 457, 550, 797, 498, 291, 528, 281, 2105, 309, 309, 307, 406, 50618], 'temperature': 0.0, 'avg_logprob': -0.12207761832645961, 'compression_ratio': 1.9710743801652892, 'no_speech_prob': 0.02996104769408703}, {'id': 612, 'seek': 425210, 'start': 4257.18, 'end': 4262.780000000001, 'text': ' there for you right that kind of a situation is not what you want to end up it so trying to access', 'tokens': [50618, 456, 337, 291, 558, 300, 733, 295, 257, 2590, 307, 406, 437, 291, 528, 281, 917, 493, 309, 370, 1382, 281, 2105, 50898], 'temperature': 0.0, 'avg_logprob': -0.12207761832645961, 'compression_ratio': 1.9710743801652892, 'no_speech_prob': 0.02996104769408703}, {'id': 613, 'seek': 425210, 'start': 4262.780000000001, 'end': 4267.700000000001, 'text': ' it column wise you can at least understand because you go column wise you are actually', 'tokens': [50898, 309, 7738, 10829, 291, 393, 412, 1935, 1223, 570, 291, 352, 7738, 10829, 291, 366, 767, 51144], 'temperature': 0.0, 'avg_logprob': -0.12207761832645961, 'compression_ratio': 1.9710743801652892, 'no_speech_prob': 0.02996104769408703}, {'id': 614, 'seek': 425210, 'start': 4267.700000000001, 'end': 4274.14, 'text': ' filling in new block every time so you will go n new blocks before you come back to the same block', 'tokens': [51144, 10623, 294, 777, 3461, 633, 565, 370, 291, 486, 352, 297, 777, 8474, 949, 291, 808, 646, 281, 264, 912, 3461, 51466], 'temperature': 0.0, 'avg_logprob': -0.12207761832645961, 'compression_ratio': 1.9710743801652892, 'no_speech_prob': 0.02996104769408703}, {'id': 615, 'seek': 425210, 'start': 4274.14, 'end': 4280.58, 'text': ' again whereas when you are going row wise you are actually doing n by 4 or n by 8 depending on how', 'tokens': [51466, 797, 9735, 562, 291, 366, 516, 5386, 10829, 291, 366, 767, 884, 297, 538, 1017, 420, 297, 538, 1649, 5413, 322, 577, 51788], 'temperature': 0.0, 'avg_logprob': -0.12207761832645961, 'compression_ratio': 1.9710743801652892, 'no_speech_prob': 0.02996104769408703}, {'id': 616, 'seek': 428058, 'start': 4280.58, 'end': 4285.66, 'text': " many elements are there it is the same set of things that you are bringing in right so let's", 'tokens': [50364, 867, 4959, 366, 456, 309, 307, 264, 912, 992, 295, 721, 300, 291, 366, 5062, 294, 558, 370, 718, 311, 50618], 'temperature': 0.0, 'avg_logprob': -0.11346369204313858, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.012787519954144955}, {'id': 617, 'seek': 428058, 'start': 4285.66, 'end': 4290.66, 'text': " see what happens in this example again I have given all the details here I don't want to go", 'tokens': [50618, 536, 437, 2314, 294, 341, 1365, 797, 286, 362, 2212, 439, 264, 4365, 510, 286, 500, 380, 528, 281, 352, 50868], 'temperature': 0.0, 'avg_logprob': -0.11346369204313858, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.012787519954144955}, {'id': 618, 'seek': 428058, 'start': 4290.66, 'end': 4297.14, 'text': " through this let's look at these two arrays right so essentially what you are trying to do is that", 'tokens': [50868, 807, 341, 718, 311, 574, 412, 613, 732, 41011, 558, 370, 4476, 437, 291, 366, 1382, 281, 360, 307, 300, 51192], 'temperature': 0.0, 'avg_logprob': -0.11346369204313858, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.012787519954144955}, {'id': 619, 'seek': 428058, 'start': 4297.14, 'end': 4306.0599999999995, 'text': ' you are trying to multiply y with z that means that right ik is going to multiply it by kj right', 'tokens': [51192, 291, 366, 1382, 281, 12972, 288, 365, 710, 300, 1355, 300, 558, 4320, 307, 516, 281, 12972, 309, 538, 350, 73, 558, 51638], 'temperature': 0.0, 'avg_logprob': -0.11346369204313858, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.012787519954144955}, {'id': 620, 'seek': 430606, 'start': 4306.06, 'end': 4313.06, 'text': ' now if I go through this entire set of elements and then come back here assume that this is an', 'tokens': [50364, 586, 498, 286, 352, 807, 341, 2302, 992, 295, 4959, 293, 550, 808, 646, 510, 6552, 300, 341, 307, 364, 50714], 'temperature': 0.0, 'avg_logprob': -0.11988984777572308, 'compression_ratio': 1.8851674641148326, 'no_speech_prob': 0.0041198814287781715}, {'id': 621, 'seek': 430606, 'start': 4313.06, 'end': 4320.34, 'text': ' array of 1024 elements right 1024 elements means roughly we are talking about 8k right again another', 'tokens': [50714, 10225, 295, 1266, 7911, 4959, 558, 1266, 7911, 4959, 1355, 9810, 321, 366, 1417, 466, 1649, 74, 558, 797, 1071, 51078], 'temperature': 0.0, 'avg_logprob': -0.11988984777572308, 'compression_ratio': 1.8851674641148326, 'no_speech_prob': 0.0041198814287781715}, {'id': 622, 'seek': 430606, 'start': 4320.34, 'end': 4328.02, 'text': " 1024 elements here right that's another 8k 16k your cache block is gone by the time you come back", 'tokens': [51078, 1266, 7911, 4959, 510, 558, 300, 311, 1071, 1649, 74, 3165, 74, 428, 19459, 3461, 307, 2780, 538, 264, 565, 291, 808, 646, 51462], 'temperature': 0.0, 'avg_logprob': -0.11988984777572308, 'compression_ratio': 1.8851674641148326, 'no_speech_prob': 0.0041198814287781715}, {'id': 623, 'seek': 430606, 'start': 4328.02, 'end': 4333.900000000001, 'text': ' here even if you had all of these things in the cache right by the time you come back here something', 'tokens': [51462, 510, 754, 498, 291, 632, 439, 295, 613, 721, 294, 264, 19459, 558, 538, 264, 565, 291, 808, 646, 510, 746, 51756], 'temperature': 0.0, 'avg_logprob': -0.11988984777572308, 'compression_ratio': 1.8851674641148326, 'no_speech_prob': 0.0041198814287781715}, {'id': 624, 'seek': 433390, 'start': 4333.9, 'end': 4339.7, 'text': ' would have been replaced so you would not see this again right this case of course is pretty', 'tokens': [50364, 576, 362, 668, 10772, 370, 291, 576, 406, 536, 341, 797, 558, 341, 1389, 295, 1164, 307, 1238, 50654], 'temperature': 0.0, 'avg_logprob': -0.09916553497314454, 'compression_ratio': 1.7830188679245282, 'no_speech_prob': 0.010710840113461018}, {'id': 625, 'seek': 433390, 'start': 4339.7, 'end': 4346.62, 'text': ' bad because you are trying to go through it column wise right instead what you can do is so this is', 'tokens': [50654, 1578, 570, 291, 366, 1382, 281, 352, 807, 309, 7738, 10829, 558, 2602, 437, 291, 393, 360, 307, 370, 341, 307, 51000], 'temperature': 0.0, 'avg_logprob': -0.09916553497314454, 'compression_ratio': 1.7830188679245282, 'no_speech_prob': 0.010710840113461018}, {'id': 626, 'seek': 433390, 'start': 4346.62, 'end': 4352.58, 'text': ' essentially how the accesses proceed right for one row you are trying to access all the columns', 'tokens': [51000, 4476, 577, 264, 2105, 279, 8991, 558, 337, 472, 5386, 291, 366, 1382, 281, 2105, 439, 264, 13766, 51298], 'temperature': 0.0, 'avg_logprob': -0.09916553497314454, 'compression_ratio': 1.7830188679245282, 'no_speech_prob': 0.010710840113461018}, {'id': 627, 'seek': 433390, 'start': 4352.58, 'end': 4360.299999999999, 'text': ' right so if you want to exploit both spatial locality and temporal locality my slides are', 'tokens': [51298, 558, 370, 498, 291, 528, 281, 25924, 1293, 23598, 1628, 1860, 293, 30881, 1628, 1860, 452, 9788, 366, 51684], 'temperature': 0.0, 'avg_logprob': -0.09916553497314454, 'compression_ratio': 1.7830188679245282, 'no_speech_prob': 0.010710840113461018}, {'id': 628, 'seek': 436030, 'start': 4360.3, 'end': 4367.02, 'text': ' slightly out of animation slightly out of order try to do what we are trying to do take a small', 'tokens': [50364, 4748, 484, 295, 9603, 4748, 484, 295, 1668, 853, 281, 360, 437, 321, 366, 1382, 281, 360, 747, 257, 1359, 50700], 'temperature': 0.0, 'avg_logprob': -0.14468497660622667, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.019779203459620476}, {'id': 629, 'seek': 436030, 'start': 4367.02, 'end': 4375.3, 'text': ' block of elements right and another block of elements here so maybe this is an 8 cross 8 matrix', 'tokens': [50700, 3461, 295, 4959, 558, 293, 1071, 3461, 295, 4959, 510, 370, 1310, 341, 307, 364, 1649, 3278, 1649, 8141, 51114], 'temperature': 0.0, 'avg_logprob': -0.14468497660622667, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.019779203459620476}, {'id': 630, 'seek': 436030, 'start': 4375.3, 'end': 4383.46, 'text': ' of this 1024 by 1024 try to do the multiplication of all of these elements with the multiplication', 'tokens': [51114, 295, 341, 1266, 7911, 538, 1266, 7911, 853, 281, 360, 264, 27290, 295, 439, 295, 613, 4959, 365, 264, 27290, 51522], 'temperature': 0.0, 'avg_logprob': -0.14468497660622667, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.019779203459620476}, {'id': 631, 'seek': 438346, 'start': 4383.46, 'end': 4391.42, 'text': ' of all of these elements right where else are you going to use this you could use this with this', 'tokens': [50364, 295, 439, 295, 613, 4959, 558, 689, 1646, 366, 291, 516, 281, 764, 341, 291, 727, 764, 341, 365, 341, 50762], 'temperature': 0.0, 'avg_logprob': -0.11045353911643804, 'compression_ratio': 2.198830409356725, 'no_speech_prob': 0.02875610813498497}, {'id': 632, 'seek': 438346, 'start': 4391.42, 'end': 4397.94, 'text': ' and so on similarly when you talk about this you are going to multiply it with this multiply', 'tokens': [50762, 293, 370, 322, 14138, 562, 291, 751, 466, 341, 291, 366, 516, 281, 12972, 309, 365, 341, 12972, 51088], 'temperature': 0.0, 'avg_logprob': -0.11045353911643804, 'compression_ratio': 2.198830409356725, 'no_speech_prob': 0.02875610813498497}, {'id': 633, 'seek': 438346, 'start': 4397.94, 'end': 4403.22, 'text': ' it with this and so on right so now what you are going to do is that you are going to do this', 'tokens': [51088, 309, 365, 341, 293, 370, 322, 558, 370, 586, 437, 291, 366, 516, 281, 360, 307, 300, 291, 366, 516, 281, 360, 341, 51352], 'temperature': 0.0, 'avg_logprob': -0.11045353911643804, 'compression_ratio': 2.198830409356725, 'no_speech_prob': 0.02875610813498497}, {'id': 634, 'seek': 438346, 'start': 4403.22, 'end': 4409.5, 'text': ' multiplication in what is called as a blocked multiplication right and what does that really', 'tokens': [51352, 27290, 294, 437, 307, 1219, 382, 257, 15470, 27290, 558, 293, 437, 775, 300, 534, 51666], 'temperature': 0.0, 'avg_logprob': -0.11045353911643804, 'compression_ratio': 2.198830409356725, 'no_speech_prob': 0.02875610813498497}, {'id': 635, 'seek': 440950, 'start': 4409.86, 'end': 4418.18, 'text': ' mean is this following thing right instead of i going from 1 to n in steps of 1 right actually here', 'tokens': [50382, 914, 307, 341, 3480, 551, 558, 2602, 295, 741, 516, 490, 502, 281, 297, 294, 4439, 295, 502, 558, 767, 510, 50798], 'temperature': 0.0, 'avg_logprob': -0.16853349859064276, 'compression_ratio': 1.803680981595092, 'no_speech_prob': 0.046890739351511}, {'id': 636, 'seek': 440950, 'start': 4418.18, 'end': 4426.26, 'text': ' yeah I have only done tiling for the j loop and the k loop okay the j loop is being tiled and the', 'tokens': [50798, 1338, 286, 362, 787, 1096, 256, 4883, 337, 264, 361, 6367, 293, 264, 350, 6367, 1392, 264, 361, 6367, 307, 885, 256, 7292, 293, 264, 51202], 'temperature': 0.0, 'avg_logprob': -0.16853349859064276, 'compression_ratio': 1.803680981595092, 'no_speech_prob': 0.046890739351511}, {'id': 637, 'seek': 440950, 'start': 4426.26, 'end': 4433.66, 'text': ' k loop is also being tiled you can see that the j loop right goes in steps of block size and the', 'tokens': [51202, 350, 6367, 307, 611, 885, 256, 7292, 291, 393, 536, 300, 264, 361, 6367, 558, 1709, 294, 4439, 295, 3461, 2744, 293, 264, 51572], 'temperature': 0.0, 'avg_logprob': -0.16853349859064276, 'compression_ratio': 1.803680981595092, 'no_speech_prob': 0.046890739351511}, {'id': 638, 'seek': 443366, 'start': 4433.66, 'end': 4439.9, 'text': ' k loop also goes in steps of the block size and the internal loops go in steps of 1 so essentially', 'tokens': [50364, 350, 6367, 611, 1709, 294, 4439, 295, 264, 3461, 2744, 293, 264, 6920, 16121, 352, 294, 4439, 295, 502, 370, 4476, 50676], 'temperature': 0.0, 'avg_logprob': -0.12789644158404806, 'compression_ratio': 2.1447368421052633, 'no_speech_prob': 0.025416800752282143}, {'id': 639, 'seek': 443366, 'start': 4439.9, 'end': 4444.099999999999, 'text': ' what we are trying to do is that we are trying to take a block of elements trying to multiply', 'tokens': [50676, 437, 321, 366, 1382, 281, 360, 307, 300, 321, 366, 1382, 281, 747, 257, 3461, 295, 4959, 1382, 281, 12972, 50886], 'temperature': 0.0, 'avg_logprob': -0.12789644158404806, 'compression_ratio': 2.1447368421052633, 'no_speech_prob': 0.025416800752282143}, {'id': 640, 'seek': 443366, 'start': 4444.099999999999, 'end': 4449.38, 'text': " with the other block of elements and trying to maximize reuse at least in one dimension that's", 'tokens': [50886, 365, 264, 661, 3461, 295, 4959, 293, 1382, 281, 19874, 26225, 412, 1935, 294, 472, 10139, 300, 311, 51150], 'temperature': 0.0, 'avg_logprob': -0.12789644158404806, 'compression_ratio': 2.1447368421052633, 'no_speech_prob': 0.025416800752282143}, {'id': 641, 'seek': 443366, 'start': 4449.38, 'end': 4455.78, 'text': " really what is important okay let's see whether we can see that here so what I need to do is that", 'tokens': [51150, 534, 437, 307, 1021, 1392, 718, 311, 536, 1968, 321, 393, 536, 300, 510, 370, 437, 286, 643, 281, 360, 307, 300, 51470], 'temperature': 0.0, 'avg_logprob': -0.12789644158404806, 'compression_ratio': 2.1447368421052633, 'no_speech_prob': 0.025416800752282143}, {'id': 642, 'seek': 443366, 'start': 4455.78, 'end': 4463.34, 'text': ' once I take this I can multiply it with this right I can also multiply it with this I can also multiply', 'tokens': [51470, 1564, 286, 747, 341, 286, 393, 12972, 309, 365, 341, 558, 286, 393, 611, 12972, 309, 365, 341, 286, 393, 611, 12972, 51848], 'temperature': 0.0, 'avg_logprob': -0.12789644158404806, 'compression_ratio': 2.1447368421052633, 'no_speech_prob': 0.025416800752282143}, {'id': 643, 'seek': 446334, 'start': 4463.7, 'end': 4469.58, 'text': ' it with that and so on right and if I finish all of this then I would have finished using this fully', 'tokens': [50382, 309, 365, 300, 293, 370, 322, 558, 293, 498, 286, 2413, 439, 295, 341, 550, 286, 576, 362, 4335, 1228, 341, 4498, 50676], 'temperature': 0.0, 'avg_logprob': -0.10299150822526318, 'compression_ratio': 1.92578125, 'no_speech_prob': 0.00410620728507638}, {'id': 644, 'seek': 446334, 'start': 4469.58, 'end': 4475.900000000001, 'text': ' then I can take the next one and do things like right so that depends on the order in which you', 'tokens': [50676, 550, 286, 393, 747, 264, 958, 472, 293, 360, 721, 411, 558, 370, 300, 5946, 322, 264, 1668, 294, 597, 291, 50992], 'temperature': 0.0, 'avg_logprob': -0.10299150822526318, 'compression_ratio': 1.92578125, 'no_speech_prob': 0.00410620728507638}, {'id': 645, 'seek': 446334, 'start': 4475.900000000001, 'end': 4481.18, 'text': ' are trying to do this now if you try to look at this from a loop transformation perspective right', 'tokens': [50992, 366, 1382, 281, 360, 341, 586, 498, 291, 853, 281, 574, 412, 341, 490, 257, 6367, 9887, 4585, 558, 51256], 'temperature': 0.0, 'avg_logprob': -0.10299150822526318, 'compression_ratio': 1.92578125, 'no_speech_prob': 0.00410620728507638}, {'id': 646, 'seek': 446334, 'start': 4481.18, 'end': 4487.58, 'text': ' what we are trying to do is that the j loop that you have here right you are essentially done what', 'tokens': [51256, 437, 321, 366, 1382, 281, 360, 307, 300, 264, 361, 6367, 300, 291, 362, 510, 558, 291, 366, 4476, 1096, 437, 51576], 'temperature': 0.0, 'avg_logprob': -0.10299150822526318, 'compression_ratio': 1.92578125, 'no_speech_prob': 0.00410620728507638}, {'id': 647, 'seek': 446334, 'start': 4487.58, 'end': 4493.02, 'text': ' is called a strip mining that means that you have instead of doing for i is equal to 1 to n you are', 'tokens': [51576, 307, 1219, 257, 12828, 15512, 300, 1355, 300, 291, 362, 2602, 295, 884, 337, 741, 307, 2681, 281, 502, 281, 297, 291, 366, 51848], 'temperature': 0.0, 'avg_logprob': -0.10299150822526318, 'compression_ratio': 1.92578125, 'no_speech_prob': 0.00410620728507638}, {'id': 648, 'seek': 449302, 'start': 4493.02, 'end': 4500.22, 'text': ' saying that let us do for i is equal to 1 to n in steps of 4 and then within that you have another', 'tokens': [50364, 1566, 300, 718, 505, 360, 337, 741, 307, 2681, 281, 502, 281, 297, 294, 4439, 295, 1017, 293, 550, 1951, 300, 291, 362, 1071, 50724], 'temperature': 0.0, 'avg_logprob': -0.11773432898767215, 'compression_ratio': 1.8341013824884793, 'no_speech_prob': 0.0009469378856010735}, {'id': 649, 'seek': 449302, 'start': 4500.22, 'end': 4507.540000000001, 'text': ' for loop which says i is equal to whatever current value of i plus 1 like that you are doing so that', 'tokens': [50724, 337, 6367, 597, 1619, 741, 307, 2681, 281, 2035, 2190, 2158, 295, 741, 1804, 502, 411, 300, 291, 366, 884, 370, 300, 51090], 'temperature': 0.0, 'avg_logprob': -0.11773432898767215, 'compression_ratio': 1.8341013824884793, 'no_speech_prob': 0.0009469378856010735}, {'id': 650, 'seek': 449302, 'start': 4507.540000000001, 'end': 4513.46, 'text': ' goes 4 times whereas the outer things goes n by 4 times so together it has now you have a sequence', 'tokens': [51090, 1709, 1017, 1413, 9735, 264, 10847, 721, 1709, 297, 538, 1017, 1413, 370, 1214, 309, 575, 586, 291, 362, 257, 8310, 51386], 'temperature': 0.0, 'avg_logprob': -0.11773432898767215, 'compression_ratio': 1.8341013824884793, 'no_speech_prob': 0.0009469378856010735}, {'id': 651, 'seek': 449302, 'start': 4513.46, 'end': 4519.780000000001, 'text': " of loops and you are trying to do interchange of them loop interchange of them that's really what's", 'tokens': [51386, 295, 16121, 293, 291, 366, 1382, 281, 360, 30358, 295, 552, 6367, 30358, 295, 552, 300, 311, 534, 437, 311, 51702], 'temperature': 0.0, 'avg_logprob': -0.11773432898767215, 'compression_ratio': 1.8341013824884793, 'no_speech_prob': 0.0009469378856010735}, {'id': 652, 'seek': 451978, 'start': 4519.78, 'end': 4523.179999999999, 'text': ' happening okay so with that I think I will stop', 'tokens': [50364, 2737, 1392, 370, 365, 300, 286, 519, 286, 486, 1590, 50534], 'temperature': 0.0, 'avg_logprob': -0.23961920004624587, 'compression_ratio': 0.9038461538461539, 'no_speech_prob': 0.29912635684013367}]