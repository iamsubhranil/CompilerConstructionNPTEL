[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 11.540000000000001, 'text': ' Get started. So, what we have seen so far is that we have seen code generation and instruction', 'tokens': [50364, 3240, 1409, 13, 407, 11, 437, 321, 362, 1612, 370, 1400, 307, 300, 321, 362, 1612, 3089, 5125, 293, 10951, 50941], 'temperature': 0.0, 'avg_logprob': -0.16272211074829102, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.09359210729598999}, {'id': 1, 'seek': 0, 'start': 11.540000000000001, 'end': 17.42, 'text': ' selection as well. Now, the next thing that you are going to see is register allocation', 'tokens': [50941, 9450, 382, 731, 13, 823, 11, 264, 958, 551, 300, 291, 366, 516, 281, 536, 307, 7280, 27599, 51235], 'temperature': 0.0, 'avg_logprob': -0.16272211074829102, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.09359210729598999}, {'id': 2, 'seek': 0, 'start': 17.42, 'end': 22.6, 'text': ' right. This is an important problem in the compiler and we will see in great level of', 'tokens': [51235, 558, 13, 639, 307, 364, 1021, 1154, 294, 264, 31958, 293, 321, 486, 536, 294, 869, 1496, 295, 51494], 'temperature': 0.0, 'avg_logprob': -0.16272211074829102, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.09359210729598999}, {'id': 3, 'seek': 0, 'start': 22.6, 'end': 29.060000000000002, 'text': ' detail how to do register allocation right. Subsequently, we will talk about instruction', 'tokens': [51494, 2607, 577, 281, 360, 7280, 27599, 558, 13, 8511, 46027, 11, 321, 486, 751, 466, 10951, 51817], 'temperature': 0.0, 'avg_logprob': -0.16272211074829102, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.09359210729598999}, {'id': 4, 'seek': 2906, 'start': 29.06, 'end': 34.14, 'text': ' scheduling although instruction scheduling pass might happen before the register allocation', 'tokens': [50364, 29055, 4878, 10951, 29055, 1320, 1062, 1051, 949, 264, 7280, 27599, 50618], 'temperature': 0.0, 'avg_logprob': -0.18714776929918225, 'compression_ratio': 1.7842323651452283, 'no_speech_prob': 0.12273379415273666}, {'id': 5, 'seek': 2906, 'start': 34.14, 'end': 38.98, 'text': ' in many of the compilers okay. So, this module is going to be on register', 'tokens': [50618, 294, 867, 295, 264, 715, 388, 433, 1392, 13, 407, 11, 341, 10088, 307, 516, 281, 312, 322, 7280, 50860], 'temperature': 0.0, 'avg_logprob': -0.18714776929918225, 'compression_ratio': 1.7842323651452283, 'no_speech_prob': 0.12273379415273666}, {'id': 6, 'seek': 2906, 'start': 38.98, 'end': 44.34, 'text': ' allocation and in register allocation after introducing the problem we will talk about', 'tokens': [50860, 27599, 293, 294, 7280, 27599, 934, 15424, 264, 1154, 321, 486, 751, 466, 51128], 'temperature': 0.0, 'avg_logprob': -0.18714776929918225, 'compression_ratio': 1.7842323651452283, 'no_speech_prob': 0.12273379415273666}, {'id': 7, 'seek': 2906, 'start': 44.34, 'end': 50.0, 'text': ' a very simple register allocator using usage code. In fact, this is a high level way of', 'tokens': [51128, 257, 588, 2199, 7280, 12660, 1639, 1228, 14924, 3089, 13, 682, 1186, 11, 341, 307, 257, 1090, 1496, 636, 295, 51411], 'temperature': 0.0, 'avg_logprob': -0.18714776929918225, 'compression_ratio': 1.7842323651452283, 'no_speech_prob': 0.12273379415273666}, {'id': 8, 'seek': 2906, 'start': 50.0, 'end': 55.46, 'text': ' explaining what is happening right and we will do something better than this, but quickly', 'tokens': [51411, 13468, 437, 307, 2737, 558, 293, 321, 486, 360, 746, 1101, 813, 341, 11, 457, 2661, 51684], 'temperature': 0.0, 'avg_logprob': -0.18714776929918225, 'compression_ratio': 1.7842323651452283, 'no_speech_prob': 0.12273379415273666}, {'id': 9, 'seek': 5546, 'start': 55.46, 'end': 60.86, 'text': ' see an example of how to do register allocation just using register count.', 'tokens': [50364, 536, 364, 1365, 295, 577, 281, 360, 7280, 27599, 445, 1228, 7280, 1207, 13, 50634], 'temperature': 0.0, 'avg_logprob': -0.16116791386758128, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.7860241532325745}, {'id': 10, 'seek': 5546, 'start': 60.86, 'end': 66.46000000000001, 'text': ' Subsequently, we will talk about register allocation using graph coloring. This is typically', 'tokens': [50634, 8511, 46027, 11, 321, 486, 751, 466, 7280, 27599, 1228, 4295, 23198, 13, 639, 307, 5850, 50914], 'temperature': 0.0, 'avg_logprob': -0.16116791386758128, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.7860241532325745}, {'id': 11, 'seek': 5546, 'start': 66.46000000000001, 'end': 71.42, 'text': ' how register allocation is done in a compiler. We will also talk about the problem of doing', 'tokens': [50914, 577, 7280, 27599, 307, 1096, 294, 257, 31958, 13, 492, 486, 611, 751, 466, 264, 1154, 295, 884, 51162], 'temperature': 0.0, 'avg_logprob': -0.16116791386758128, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.7860241532325745}, {'id': 12, 'seek': 5546, 'start': 71.42, 'end': 75.9, 'text': ' register allocation within a basic block and when it is within a basic block the problem', 'tokens': [51162, 7280, 27599, 1951, 257, 3875, 3461, 293, 562, 309, 307, 1951, 257, 3875, 3461, 264, 1154, 51386], 'temperature': 0.0, 'avg_logprob': -0.16116791386758128, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.7860241532325745}, {'id': 13, 'seek': 5546, 'start': 75.9, 'end': 82.9, 'text': ' becomes a simpler problem and can be solved okay in near linear time kind of a algorithm', 'tokens': [51386, 3643, 257, 18587, 1154, 293, 393, 312, 13041, 1392, 294, 2651, 8213, 565, 733, 295, 257, 9284, 51736], 'temperature': 0.0, 'avg_logprob': -0.16116791386758128, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.7860241532325745}, {'id': 14, 'seek': 8290, 'start': 83.02000000000001, 'end': 90.02000000000001, 'text': ' and you can in fact do optimal register allocation using near linear time. That kind of inspires', 'tokens': [50370, 293, 291, 393, 294, 1186, 360, 16252, 7280, 27599, 1228, 2651, 8213, 565, 13, 663, 733, 295, 32566, 50720], 'temperature': 0.0, 'avg_logprob': -0.1603352427482605, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.13093005120754242}, {'id': 15, 'seek': 8290, 'start': 90.02000000000001, 'end': 97.02000000000001, 'text': ' another allocator which is called the linear scan register allocator which is not optimal,', 'tokens': [50720, 1071, 12660, 1639, 597, 307, 1219, 264, 8213, 11049, 7280, 12660, 1639, 597, 307, 406, 16252, 11, 51070], 'temperature': 0.0, 'avg_logprob': -0.1603352427482605, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.13093005120754242}, {'id': 16, 'seek': 8290, 'start': 97.5, 'end': 103.04, 'text': ' but which is very efficient, very efficient in terms of the time it takes to generate', 'tokens': [51094, 457, 597, 307, 588, 7148, 11, 588, 7148, 294, 2115, 295, 264, 565, 309, 2516, 281, 8460, 51371], 'temperature': 0.0, 'avg_logprob': -0.1603352427482605, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.13093005120754242}, {'id': 17, 'seek': 8290, 'start': 103.04, 'end': 108.42, 'text': ' the register allocation okay. So, we will also talk about that and it seems to perform', 'tokens': [51371, 264, 7280, 27599, 1392, 13, 407, 11, 321, 486, 611, 751, 466, 300, 293, 309, 2544, 281, 2042, 51640], 'temperature': 0.0, 'avg_logprob': -0.1603352427482605, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.13093005120754242}, {'id': 18, 'seek': 10842, 'start': 108.42, 'end': 113.62, 'text': ' close enough to the graph coloring allocator. Graph coloring allocator itself is a heuristic', 'tokens': [50364, 1998, 1547, 281, 264, 4295, 23198, 12660, 1639, 13, 21884, 23198, 12660, 1639, 2564, 307, 257, 415, 374, 3142, 50624], 'temperature': 0.0, 'avg_logprob': -0.19778752108232692, 'compression_ratio': 1.8617886178861789, 'no_speech_prob': 0.16373251378536224}, {'id': 19, 'seek': 10842, 'start': 113.62, 'end': 119.74000000000001, 'text': ' approach so that is also not going to generate optimal code right. So, generating optimal', 'tokens': [50624, 3109, 370, 300, 307, 611, 406, 516, 281, 8460, 16252, 3089, 558, 13, 407, 11, 17746, 16252, 50930], 'temperature': 0.0, 'avg_logprob': -0.19778752108232692, 'compression_ratio': 1.8617886178861789, 'no_speech_prob': 0.16373251378536224}, {'id': 20, 'seek': 10842, 'start': 119.74000000000001, 'end': 125.42, 'text': ' register allocation is again an NP hard problem. So, we will not try to solve it using I mean', 'tokens': [50930, 7280, 27599, 307, 797, 364, 38611, 1152, 1154, 13, 407, 11, 321, 486, 406, 853, 281, 5039, 309, 1228, 286, 914, 51214], 'temperature': 0.0, 'avg_logprob': -0.19778752108232692, 'compression_ratio': 1.8617886178861789, 'no_speech_prob': 0.16373251378536224}, {'id': 21, 'seek': 10842, 'start': 125.42, 'end': 130.78, 'text': ' we will not try to get the optimal solution, but we will try to get a solution which is', 'tokens': [51214, 321, 486, 406, 853, 281, 483, 264, 16252, 3827, 11, 457, 321, 486, 853, 281, 483, 257, 3827, 597, 307, 51482], 'temperature': 0.0, 'avg_logprob': -0.19778752108232692, 'compression_ratio': 1.8617886178861789, 'no_speech_prob': 0.16373251378536224}, {'id': 22, 'seek': 10842, 'start': 130.78, 'end': 137.78, 'text': ' as good as possible that is really the up okay. So, this is roughly the organization for this', 'tokens': [51482, 382, 665, 382, 1944, 300, 307, 534, 264, 493, 1392, 13, 407, 11, 341, 307, 9810, 264, 4475, 337, 341, 51832], 'temperature': 0.0, 'avg_logprob': -0.19778752108232692, 'compression_ratio': 1.8617886178861789, 'no_speech_prob': 0.16373251378536224}, {'id': 23, 'seek': 13778, 'start': 137.78, 'end': 141.66, 'text': ' module okay. Now, what is the register allocation problem?', 'tokens': [50364, 10088, 1392, 13, 823, 11, 437, 307, 264, 7280, 27599, 1154, 30, 50558], 'temperature': 0.0, 'avg_logprob': -0.17341933451907734, 'compression_ratio': 1.858695652173913, 'no_speech_prob': 0.009546242654323578}, {'id': 24, 'seek': 13778, 'start': 141.66, 'end': 147.42000000000002, 'text': ' The register allocation problem essentially is to identify which variable should be allocated', 'tokens': [50558, 440, 7280, 27599, 1154, 4476, 307, 281, 5876, 597, 7006, 820, 312, 29772, 50846], 'temperature': 0.0, 'avg_logprob': -0.17341933451907734, 'compression_ratio': 1.858695652173913, 'no_speech_prob': 0.009546242654323578}, {'id': 25, 'seek': 13778, 'start': 147.42000000000002, 'end': 154.42000000000002, 'text': ' in registers okay. We also know that variables which do not overlap with each other can possibly', 'tokens': [50846, 294, 38351, 1392, 13, 492, 611, 458, 300, 9102, 597, 360, 406, 19959, 365, 1184, 661, 393, 6264, 51196], 'temperature': 0.0, 'avg_logprob': -0.17341933451907734, 'compression_ratio': 1.858695652173913, 'no_speech_prob': 0.009546242654323578}, {'id': 26, 'seek': 13778, 'start': 155.46, 'end': 162.14, 'text': ' share the same register, but we have to identify which variables can get these registers. It', 'tokens': [51248, 2073, 264, 912, 7280, 11, 457, 321, 362, 281, 5876, 597, 9102, 393, 483, 613, 38351, 13, 467, 51582], 'temperature': 0.0, 'avg_logprob': -0.17341933451907734, 'compression_ratio': 1.858695652173913, 'no_speech_prob': 0.009546242654323578}, {'id': 27, 'seek': 16214, 'start': 162.17999999999998, 'end': 167.57999999999998, 'text': ' is quite possible that there are more number of variables than the registers available', 'tokens': [50366, 307, 1596, 1944, 300, 456, 366, 544, 1230, 295, 9102, 813, 264, 38351, 2435, 50636], 'temperature': 0.0, 'avg_logprob': -0.21404764249727323, 'compression_ratio': 1.6561085972850678, 'no_speech_prob': 0.08985023945569992}, {'id': 28, 'seek': 16214, 'start': 167.57999999999998, 'end': 172.85999999999999, 'text': ' and therefore some may not necessarily stay in register. Particularly in a Sysc architecture', 'tokens': [50636, 293, 4412, 512, 815, 406, 4725, 1754, 294, 7280, 13, 32281, 294, 257, 318, 749, 66, 9482, 50900], 'temperature': 0.0, 'avg_logprob': -0.21404764249727323, 'compression_ratio': 1.6561085972850678, 'no_speech_prob': 0.08985023945569992}, {'id': 29, 'seek': 16214, 'start': 172.85999999999999, 'end': 179.85999999999999, 'text': ' we know that you can use memory operands in your arithmetic and logic instructions. Therefore,', 'tokens': [50900, 321, 458, 300, 291, 393, 764, 4675, 2208, 2967, 294, 428, 42973, 293, 9952, 9415, 13, 7504, 11, 51250], 'temperature': 0.0, 'avg_logprob': -0.21404764249727323, 'compression_ratio': 1.6561085972850678, 'no_speech_prob': 0.08985023945569992}, {'id': 30, 'seek': 16214, 'start': 179.85999999999999, 'end': 186.85999999999999, 'text': ' I mean if you cannot allocate registers for them you will continue to use them from memory.', 'tokens': [51250, 286, 914, 498, 291, 2644, 35713, 38351, 337, 552, 291, 486, 2354, 281, 764, 552, 490, 4675, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.21404764249727323, 'compression_ratio': 1.6561085972850678, 'no_speech_prob': 0.08985023945569992}, {'id': 31, 'seek': 18686, 'start': 186.86, 'end': 192.66000000000003, 'text': ' Whereas in Sysc sorry in Rysc architectures all arithmetic and logic instructions have', 'tokens': [50364, 13813, 294, 318, 749, 66, 2597, 294, 497, 749, 66, 6331, 1303, 439, 42973, 293, 9952, 9415, 362, 50654], 'temperature': 0.0, 'avg_logprob': -0.17151660919189454, 'compression_ratio': 1.782258064516129, 'no_speech_prob': 0.02454540506005287}, {'id': 32, 'seek': 18686, 'start': 192.66000000000003, 'end': 198.22000000000003, 'text': ' to be in memory. So, what happens is that you will even for variables which you cannot', 'tokens': [50654, 281, 312, 294, 4675, 13, 407, 11, 437, 2314, 307, 300, 291, 486, 754, 337, 9102, 597, 291, 2644, 50932], 'temperature': 0.0, 'avg_logprob': -0.17151660919189454, 'compression_ratio': 1.782258064516129, 'no_speech_prob': 0.02454540506005287}, {'id': 33, 'seek': 18686, 'start': 198.22000000000003, 'end': 205.14000000000001, 'text': ' allocate memory eventually when you perform certain operations from registers have to', 'tokens': [50932, 35713, 4675, 4728, 562, 291, 2042, 1629, 7705, 490, 38351, 362, 281, 51278], 'temperature': 0.0, 'avg_logprob': -0.17151660919189454, 'compression_ratio': 1.782258064516129, 'no_speech_prob': 0.02454540506005287}, {'id': 34, 'seek': 18686, 'start': 205.14000000000001, 'end': 210.26000000000002, 'text': ' be used for that. So, they have a mechanism for generating code for those kinds of architecture.', 'tokens': [51278, 312, 1143, 337, 300, 13, 407, 11, 436, 362, 257, 7513, 337, 17746, 3089, 337, 729, 3685, 295, 9482, 13, 51534], 'temperature': 0.0, 'avg_logprob': -0.17151660919189454, 'compression_ratio': 1.782258064516129, 'no_speech_prob': 0.02454540506005287}, {'id': 35, 'seek': 18686, 'start': 210.26000000000002, 'end': 214.46, 'text': ' We will talk about that. We may not really talk about that in level of great level of', 'tokens': [51534, 492, 486, 751, 466, 300, 13, 492, 815, 406, 534, 751, 466, 300, 294, 1496, 295, 869, 1496, 295, 51744], 'temperature': 0.0, 'avg_logprob': -0.17151660919189454, 'compression_ratio': 1.782258064516129, 'no_speech_prob': 0.02454540506005287}, {'id': 36, 'seek': 21446, 'start': 214.46, 'end': 220.34, 'text': ' detail, but we will see how to handle that. Maybe we will discuss that how to handle', 'tokens': [50364, 2607, 11, 457, 321, 486, 536, 577, 281, 4813, 300, 13, 2704, 321, 486, 2248, 300, 577, 281, 4813, 50658], 'temperature': 0.0, 'avg_logprob': -0.1805631464177912, 'compression_ratio': 2.227272727272727, 'no_speech_prob': 0.06031671166419983}, {'id': 37, 'seek': 21446, 'start': 220.34, 'end': 224.70000000000002, 'text': ' that okay. Again when you talk about register allocator, register allocator can be done', 'tokens': [50658, 300, 1392, 13, 3764, 562, 291, 751, 466, 7280, 12660, 1639, 11, 7280, 12660, 1639, 393, 312, 1096, 50876], 'temperature': 0.0, 'avg_logprob': -0.1805631464177912, 'compression_ratio': 2.227272727272727, 'no_speech_prob': 0.06031671166419983}, {'id': 38, 'seek': 21446, 'start': 224.70000000000002, 'end': 230.62, 'text': ' as a global register allocator or as a local register allocator. When you talk about local', 'tokens': [50876, 382, 257, 4338, 7280, 12660, 1639, 420, 382, 257, 2654, 7280, 12660, 1639, 13, 1133, 291, 751, 466, 2654, 51172], 'temperature': 0.0, 'avg_logprob': -0.1805631464177912, 'compression_ratio': 2.227272727272727, 'no_speech_prob': 0.06031671166419983}, {'id': 39, 'seek': 21446, 'start': 230.62, 'end': 235.46, 'text': ' register allocator it is register allocation within a basic block. Whereas global register', 'tokens': [51172, 7280, 12660, 1639, 309, 307, 7280, 27599, 1951, 257, 3875, 3461, 13, 13813, 4338, 7280, 51414], 'temperature': 0.0, 'avg_logprob': -0.1805631464177912, 'compression_ratio': 2.227272727272727, 'no_speech_prob': 0.06031671166419983}, {'id': 40, 'seek': 21446, 'start': 235.46, 'end': 240.98000000000002, 'text': ' allocation is beyond basic block or across basic block. Typically what is done is that', 'tokens': [51414, 27599, 307, 4399, 3875, 3461, 420, 2108, 3875, 3461, 13, 23129, 437, 307, 1096, 307, 300, 51690], 'temperature': 0.0, 'avg_logprob': -0.1805631464177912, 'compression_ratio': 2.227272727272727, 'no_speech_prob': 0.06031671166419983}, {'id': 41, 'seek': 24098, 'start': 240.98, 'end': 246.94, 'text': ' a global register allocation pass first happens and registers are allocated globally. Typically', 'tokens': [50364, 257, 4338, 7280, 27599, 1320, 700, 2314, 293, 38351, 366, 29772, 18958, 13, 23129, 50662], 'temperature': 0.0, 'avg_logprob': -0.2083453912844603, 'compression_ratio': 1.894736842105263, 'no_speech_prob': 0.21896754205226898}, {'id': 42, 'seek': 24098, 'start': 246.94, 'end': 253.94, 'text': ' at a function level is what register allocation happens right. Subsequently for certain optimizations', 'tokens': [50662, 412, 257, 2445, 1496, 307, 437, 7280, 27599, 2314, 558, 13, 8511, 46027, 337, 1629, 5028, 14455, 51012], 'temperature': 0.0, 'avg_logprob': -0.2083453912844603, 'compression_ratio': 1.894736842105263, 'no_speech_prob': 0.21896754205226898}, {'id': 43, 'seek': 24098, 'start': 253.94, 'end': 257.58, 'text': ' you would do a local register allocation on top of that.', 'tokens': [51012, 291, 576, 360, 257, 2654, 7280, 27599, 322, 1192, 295, 300, 13, 51194], 'temperature': 0.0, 'avg_logprob': -0.2083453912844603, 'compression_ratio': 1.894736842105263, 'no_speech_prob': 0.21896754205226898}, {'id': 44, 'seek': 24098, 'start': 257.58, 'end': 262.62, 'text': ' So, this is essentially the register allocation problem, but it also has a sub problem which', 'tokens': [51194, 407, 11, 341, 307, 4476, 264, 7280, 27599, 1154, 11, 457, 309, 611, 575, 257, 1422, 1154, 597, 51446], 'temperature': 0.0, 'avg_logprob': -0.2083453912844603, 'compression_ratio': 1.894736842105263, 'no_speech_prob': 0.21896754205226898}, {'id': 45, 'seek': 24098, 'start': 262.62, 'end': 266.98, 'text': ' is the register assignment problem. Having decided which variables would reside in a', 'tokens': [51446, 307, 264, 7280, 15187, 1154, 13, 10222, 3047, 597, 9102, 576, 40134, 294, 257, 51664], 'temperature': 0.0, 'avg_logprob': -0.2083453912844603, 'compression_ratio': 1.894736842105263, 'no_speech_prob': 0.21896754205226898}, {'id': 46, 'seek': 26698, 'start': 266.98, 'end': 273.38, 'text': ' register you will also have to decide on what registers. That is a subsequent problem,', 'tokens': [50364, 7280, 291, 486, 611, 362, 281, 4536, 322, 437, 38351, 13, 663, 307, 257, 19962, 1154, 11, 50684], 'temperature': 0.0, 'avg_logprob': -0.178029735883077, 'compression_ratio': 1.8922413793103448, 'no_speech_prob': 0.2810886800289154}, {'id': 47, 'seek': 26698, 'start': 273.38, 'end': 278.06, 'text': " but that in today's context many registers right if they are all homogeneous it means", 'tokens': [50684, 457, 300, 294, 965, 311, 4319, 867, 38351, 558, 498, 436, 366, 439, 42632, 309, 1355, 50918], 'temperature': 0.0, 'avg_logprob': -0.178029735883077, 'compression_ratio': 1.8922413793103448, 'no_speech_prob': 0.2810886800289154}, {'id': 48, 'seek': 26698, 'start': 278.06, 'end': 284.02000000000004, 'text': ' that any register can hold any value right. Then this register assignment problem becomes', 'tokens': [50918, 300, 604, 7280, 393, 1797, 604, 2158, 558, 13, 1396, 341, 7280, 15187, 1154, 3643, 51216], 'temperature': 0.0, 'avg_logprob': -0.178029735883077, 'compression_ratio': 1.8922413793103448, 'no_speech_prob': 0.2810886800289154}, {'id': 49, 'seek': 26698, 'start': 284.02000000000004, 'end': 288.66, 'text': ' a somewhat a trivial problem, but there are certain architectures in which you will say', 'tokens': [51216, 257, 8344, 257, 26703, 1154, 11, 457, 456, 366, 1629, 6331, 1303, 294, 597, 291, 486, 584, 51448], 'temperature': 0.0, 'avg_logprob': -0.178029735883077, 'compression_ratio': 1.8922413793103448, 'no_speech_prob': 0.2810886800289154}, {'id': 50, 'seek': 26698, 'start': 288.66, 'end': 294.98, 'text': ' that this cannot be in that register or this has to be in odd even registers or this has', 'tokens': [51448, 300, 341, 2644, 312, 294, 300, 7280, 420, 341, 575, 281, 312, 294, 7401, 754, 38351, 420, 341, 575, 51764], 'temperature': 0.0, 'avg_logprob': -0.178029735883077, 'compression_ratio': 1.8922413793103448, 'no_speech_prob': 0.2810886800289154}, {'id': 51, 'seek': 29498, 'start': 294.98, 'end': 302.1, 'text': ' to be only in these registers etc. In which case subsequent to doing this register allocation', 'tokens': [50364, 281, 312, 787, 294, 613, 38351, 5183, 13, 682, 597, 1389, 19962, 281, 884, 341, 7280, 27599, 50720], 'temperature': 0.0, 'avg_logprob': -0.17452956690932764, 'compression_ratio': 1.8724279835390947, 'no_speech_prob': 0.2424629032611847}, {'id': 52, 'seek': 29498, 'start': 302.1, 'end': 308.18, 'text': ' problem you also have to solve what is called a register assignment problem ok.', 'tokens': [50720, 1154, 291, 611, 362, 281, 5039, 437, 307, 1219, 257, 7280, 15187, 1154, 3133, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.17452956690932764, 'compression_ratio': 1.8724279835390947, 'no_speech_prob': 0.2424629032611847}, {'id': 53, 'seek': 29498, 'start': 308.18, 'end': 314.26, 'text': ' So for example is accumulator is another example. There is a special register called accumulator', 'tokens': [51024, 407, 337, 1365, 307, 12989, 16381, 307, 1071, 1365, 13, 821, 307, 257, 2121, 7280, 1219, 12989, 16381, 51328], 'temperature': 0.0, 'avg_logprob': -0.17452956690932764, 'compression_ratio': 1.8724279835390947, 'no_speech_prob': 0.2424629032611847}, {'id': 54, 'seek': 29498, 'start': 314.26, 'end': 319.54, 'text': ' and only certain things can be loaded in the accumulator right. So, if you have such situations', 'tokens': [51328, 293, 787, 1629, 721, 393, 312, 13210, 294, 264, 12989, 16381, 558, 13, 407, 11, 498, 291, 362, 1270, 6851, 51592], 'temperature': 0.0, 'avg_logprob': -0.17452956690932764, 'compression_ratio': 1.8724279835390947, 'no_speech_prob': 0.2424629032611847}, {'id': 55, 'seek': 29498, 'start': 319.54, 'end': 323.94, 'text': ' then you will also have to mark those things and then say that these registers cannot be', 'tokens': [51592, 550, 291, 486, 611, 362, 281, 1491, 729, 721, 293, 550, 584, 300, 613, 38351, 2644, 312, 51812], 'temperature': 0.0, 'avg_logprob': -0.17452956690932764, 'compression_ratio': 1.8724279835390947, 'no_speech_prob': 0.2424629032611847}, {'id': 56, 'seek': 32394, 'start': 323.94, 'end': 329.82, 'text': ' used for that purpose right. Together these two problems are always called referred to', 'tokens': [50364, 1143, 337, 300, 4334, 558, 13, 15911, 613, 732, 2740, 366, 1009, 1219, 10839, 281, 50658], 'temperature': 0.0, 'avg_logprob': -0.16402175209738992, 'compression_ratio': 1.926605504587156, 'no_speech_prob': 0.23470912873744965}, {'id': 57, 'seek': 32394, 'start': 329.82, 'end': 335.18, 'text': ' as register allocation problem although to be precise register allocation only refers', 'tokens': [50658, 382, 7280, 27599, 1154, 4878, 281, 312, 13600, 7280, 27599, 787, 14942, 50926], 'temperature': 0.0, 'avg_logprob': -0.16402175209738992, 'compression_ratio': 1.926605504587156, 'no_speech_prob': 0.23470912873744965}, {'id': 58, 'seek': 32394, 'start': 335.18, 'end': 341.94, 'text': ' to deciding which registers will be in which variables will be in register and which variables', 'tokens': [50926, 281, 17990, 597, 38351, 486, 312, 294, 597, 9102, 486, 312, 294, 7280, 293, 597, 9102, 51264], 'temperature': 0.0, 'avg_logprob': -0.16402175209738992, 'compression_ratio': 1.926605504587156, 'no_speech_prob': 0.23470912873744965}, {'id': 59, 'seek': 32394, 'start': 341.94, 'end': 347.5, 'text': ' will be in memory ok. That is really what the problem is ok.', 'tokens': [51264, 486, 312, 294, 4675, 3133, 13, 663, 307, 534, 437, 264, 1154, 307, 3133, 13, 51542], 'temperature': 0.0, 'avg_logprob': -0.16402175209738992, 'compression_ratio': 1.926605504587156, 'no_speech_prob': 0.23470912873744965}, {'id': 60, 'seek': 32394, 'start': 347.5, 'end': 353.74, 'text': ' Now every machine has a set of registers. The problem is that you are given an intermediate', 'tokens': [51542, 823, 633, 3479, 575, 257, 992, 295, 38351, 13, 440, 1154, 307, 300, 291, 366, 2212, 364, 19376, 51854], 'temperature': 0.0, 'avg_logprob': -0.16402175209738992, 'compression_ratio': 1.926605504587156, 'no_speech_prob': 0.23470912873744965}, {'id': 61, 'seek': 35374, 'start': 353.74, 'end': 362.18, 'text': ' program ok some piece of code ok which has its control flow right control flow graph', 'tokens': [50364, 1461, 3133, 512, 2522, 295, 3089, 3133, 597, 575, 1080, 1969, 3095, 558, 1969, 3095, 4295, 50786], 'temperature': 0.0, 'avg_logprob': -0.1878027319908142, 'compression_ratio': 1.8602150537634408, 'no_speech_prob': 0.01839640736579895}, {'id': 62, 'seek': 35374, 'start': 362.18, 'end': 367.86, 'text': ' represented in the form of a control flow graph and the number of registers k that is', 'tokens': [50786, 10379, 294, 264, 1254, 295, 257, 1969, 3095, 4295, 293, 264, 1230, 295, 38351, 350, 300, 307, 51070], 'temperature': 0.0, 'avg_logprob': -0.1878027319908142, 'compression_ratio': 1.8602150537634408, 'no_speech_prob': 0.01839640736579895}, {'id': 63, 'seek': 35374, 'start': 367.86, 'end': 376.90000000000003, 'text': ' available in the machine. The idea is to find out can this code can this code right be I', 'tokens': [51070, 2435, 294, 264, 3479, 13, 440, 1558, 307, 281, 915, 484, 393, 341, 3089, 393, 341, 3089, 558, 312, 286, 51522], 'temperature': 0.0, 'avg_logprob': -0.1878027319908142, 'compression_ratio': 1.8602150537634408, 'no_speech_prob': 0.01839640736579895}, {'id': 64, 'seek': 35374, 'start': 376.90000000000003, 'end': 383.66, 'text': ' mean can these registers let me put it this way can these registers be assigned to the', 'tokens': [51522, 914, 393, 613, 38351, 718, 385, 829, 309, 341, 636, 393, 613, 38351, 312, 13279, 281, 264, 51860], 'temperature': 0.0, 'avg_logprob': -0.1878027319908142, 'compression_ratio': 1.8602150537634408, 'no_speech_prob': 0.01839640736579895}, {'id': 65, 'seek': 38366, 'start': 384.58000000000004, 'end': 391.02000000000004, 'text': ' variables in the code such that no two conflicting variables are assigned the same register and', 'tokens': [50410, 9102, 294, 264, 3089, 1270, 300, 572, 732, 43784, 9102, 366, 13279, 264, 912, 7280, 293, 50732], 'temperature': 0.0, 'avg_logprob': -0.19577645032833785, 'compression_ratio': 1.924731182795699, 'no_speech_prob': 0.010379109531641006}, {'id': 66, 'seek': 38366, 'start': 391.02000000000004, 'end': 397.58000000000004, 'text': ' there is no extra spill ok there is no extra loads or stores for the spill. That is you', 'tokens': [50732, 456, 307, 572, 2857, 22044, 3133, 456, 307, 572, 2857, 12668, 420, 9512, 337, 264, 22044, 13, 663, 307, 291, 51060], 'temperature': 0.0, 'avg_logprob': -0.19577645032833785, 'compression_ratio': 1.924731182795699, 'no_speech_prob': 0.010379109531641006}, {'id': 67, 'seek': 38366, 'start': 397.58000000000004, 'end': 403.5, 'text': ' are going to have a code in which all these variables ok will be assigned the registers', 'tokens': [51060, 366, 516, 281, 362, 257, 3089, 294, 597, 439, 613, 9102, 3133, 486, 312, 13279, 264, 38351, 51356], 'temperature': 0.0, 'avg_logprob': -0.19577645032833785, 'compression_ratio': 1.924731182795699, 'no_speech_prob': 0.010379109531641006}, {'id': 68, 'seek': 38366, 'start': 403.5, 'end': 408.90000000000003, 'text': ' such that two variables which are kind of conflicting with each other are not assigned', 'tokens': [51356, 1270, 300, 732, 9102, 597, 366, 733, 295, 43784, 365, 1184, 661, 366, 406, 13279, 51626], 'temperature': 0.0, 'avg_logprob': -0.19577645032833785, 'compression_ratio': 1.924731182795699, 'no_speech_prob': 0.010379109531641006}, {'id': 69, 'seek': 40890, 'start': 408.9, 'end': 414.62, 'text': ' the same register. We will see what is conflicting in a moment ok.', 'tokens': [50364, 264, 912, 7280, 13, 492, 486, 536, 437, 307, 43784, 294, 257, 1623, 3133, 13, 50650], 'temperature': 0.0, 'avg_logprob': -0.14897313959458294, 'compression_ratio': 1.6220095693779903, 'no_speech_prob': 0.3134988844394684}, {'id': 70, 'seek': 40890, 'start': 414.62, 'end': 422.29999999999995, 'text': ' This problem is NP hard ok and therefore trying to solve this optimally is going to be going', 'tokens': [50650, 639, 1154, 307, 38611, 1152, 3133, 293, 4412, 1382, 281, 5039, 341, 5028, 379, 307, 516, 281, 312, 516, 51034], 'temperature': 0.0, 'avg_logprob': -0.14897313959458294, 'compression_ratio': 1.6220095693779903, 'no_speech_prob': 0.3134988844394684}, {'id': 71, 'seek': 40890, 'start': 422.29999999999995, 'end': 427.53999999999996, 'text': ' to take a very long time. So, you use heuristic approaches the simplest heuristic that we', 'tokens': [51034, 281, 747, 257, 588, 938, 565, 13, 407, 11, 291, 764, 415, 374, 3142, 11587, 264, 22811, 415, 374, 3142, 300, 321, 51296], 'temperature': 0.0, 'avg_logprob': -0.14897313959458294, 'compression_ratio': 1.6220095693779903, 'no_speech_prob': 0.3134988844394684}, {'id': 72, 'seek': 40890, 'start': 427.53999999999996, 'end': 433.78, 'text': ' use is what is called count based heuristic. You can also use the graph coloring approach', 'tokens': [51296, 764, 307, 437, 307, 1219, 1207, 2361, 415, 374, 3142, 13, 509, 393, 611, 764, 264, 4295, 23198, 3109, 51608], 'temperature': 0.0, 'avg_logprob': -0.14897313959458294, 'compression_ratio': 1.6220095693779903, 'no_speech_prob': 0.3134988844394684}, {'id': 73, 'seek': 43378, 'start': 433.97999999999996, 'end': 438.9, 'text': ' and then I will also briefly talk about the linear scan allocator. Remember all of these', 'tokens': [50374, 293, 550, 286, 486, 611, 10515, 751, 466, 264, 8213, 11049, 12660, 1639, 13, 5459, 439, 295, 613, 50620], 'temperature': 0.0, 'avg_logprob': -0.15777951252611377, 'compression_ratio': 1.8652849740932642, 'no_speech_prob': 0.29196545481681824}, {'id': 74, 'seek': 43378, 'start': 438.9, 'end': 446.21999999999997, 'text': ' are heuristic approaches right and they will end up generating codes which are not necessarily', 'tokens': [50620, 366, 415, 374, 3142, 11587, 558, 293, 436, 486, 917, 493, 17746, 14211, 597, 366, 406, 4725, 50986], 'temperature': 0.0, 'avg_logprob': -0.15777951252611377, 'compression_ratio': 1.8652849740932642, 'no_speech_prob': 0.29196545481681824}, {'id': 75, 'seek': 43378, 'start': 446.21999999999997, 'end': 452.73999999999995, 'text': ' optimal you can say near optimal or sub optimal code and this one is supposed to generate', 'tokens': [50986, 16252, 291, 393, 584, 2651, 16252, 420, 1422, 16252, 3089, 293, 341, 472, 307, 3442, 281, 8460, 51312], 'temperature': 0.0, 'avg_logprob': -0.15777951252611377, 'compression_ratio': 1.8652849740932642, 'no_speech_prob': 0.29196545481681824}, {'id': 76, 'seek': 43378, 'start': 452.73999999999995, 'end': 459.85999999999996, 'text': ' code which is right closer to near optimal. This is supposed to generate code which is', 'tokens': [51312, 3089, 597, 307, 558, 4966, 281, 2651, 16252, 13, 639, 307, 3442, 281, 8460, 3089, 597, 307, 51668], 'temperature': 0.0, 'avg_logprob': -0.15777951252611377, 'compression_ratio': 1.8652849740932642, 'no_speech_prob': 0.29196545481681824}, {'id': 77, 'seek': 45986, 'start': 459.86, 'end': 465.02000000000004, 'text': ' actually poorer than this one, but in terms of the time it takes to solve the problem', 'tokens': [50364, 767, 49740, 813, 341, 472, 11, 457, 294, 2115, 295, 264, 565, 309, 2516, 281, 5039, 264, 1154, 50622], 'temperature': 0.0, 'avg_logprob': -0.2009186319785543, 'compression_ratio': 1.8024691358024691, 'no_speech_prob': 0.15475037693977356}, {'id': 78, 'seek': 45986, 'start': 465.02000000000004, 'end': 470.58000000000004, 'text': ' it is faster. The time complexity of this is better than the time complexity of this', 'tokens': [50622, 309, 307, 4663, 13, 440, 565, 14024, 295, 341, 307, 1101, 813, 264, 565, 14024, 295, 341, 50900], 'temperature': 0.0, 'avg_logprob': -0.2009186319785543, 'compression_ratio': 1.8024691358024691, 'no_speech_prob': 0.15475037693977356}, {'id': 79, 'seek': 45986, 'start': 470.58000000000004, 'end': 476.82, 'text': ' right and then of course this is a very very simple approach and it generates very inefficient', 'tokens': [50900, 558, 293, 550, 295, 1164, 341, 307, 257, 588, 588, 2199, 3109, 293, 309, 23815, 588, 43495, 51212], 'temperature': 0.0, 'avg_logprob': -0.2009186319785543, 'compression_ratio': 1.8024691358024691, 'no_speech_prob': 0.15475037693977356}, {'id': 80, 'seek': 45986, 'start': 476.82, 'end': 481.54, 'text': ' kind of an allocation. So, let us see all three of them in this lecture, but before', 'tokens': [51212, 733, 295, 364, 27599, 13, 407, 11, 718, 505, 536, 439, 1045, 295, 552, 294, 341, 7991, 11, 457, 949, 51448], 'temperature': 0.0, 'avg_logprob': -0.2009186319785543, 'compression_ratio': 1.8024691358024691, 'no_speech_prob': 0.15475037693977356}, {'id': 81, 'seek': 45986, 'start': 481.54, 'end': 486.82, 'text': ' we go into that let us first talk about what are conflicting variables ok. Two variables', 'tokens': [51448, 321, 352, 666, 300, 718, 505, 700, 751, 466, 437, 366, 43784, 9102, 3133, 13, 4453, 9102, 51712], 'temperature': 0.0, 'avg_logprob': -0.2009186319785543, 'compression_ratio': 1.8024691358024691, 'no_speech_prob': 0.15475037693977356}, {'id': 82, 'seek': 48682, 'start': 486.9, 'end': 493.02, 'text': ' are said to be conflicting if they are live at the same time right and liveness is essentially', 'tokens': [50368, 366, 848, 281, 312, 43784, 498, 436, 366, 1621, 412, 264, 912, 565, 558, 293, 375, 553, 442, 307, 4476, 50674], 'temperature': 0.0, 'avg_logprob': -0.1983661861210079, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.11917445808649063}, {'id': 83, 'seek': 48682, 'start': 493.02, 'end': 500.34, 'text': ' defined as a variable is said to be live if its value is needed in the future if it holds', 'tokens': [50674, 7642, 382, 257, 7006, 307, 848, 281, 312, 1621, 498, 1080, 2158, 307, 2978, 294, 264, 2027, 498, 309, 9190, 51040], 'temperature': 0.0, 'avg_logprob': -0.1983661861210079, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.11917445808649063}, {'id': 84, 'seek': 48682, 'start': 500.34, 'end': 505.53999999999996, 'text': ' a value and its value is needed in the future. And what does this really mean we will explain', 'tokens': [51040, 257, 2158, 293, 1080, 2158, 307, 2978, 294, 264, 2027, 13, 400, 437, 775, 341, 534, 914, 321, 486, 2903, 51300], 'temperature': 0.0, 'avg_logprob': -0.1983661861210079, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.11917445808649063}, {'id': 85, 'seek': 48682, 'start': 505.53999999999996, 'end': 513.7, 'text': ' this by the following thing you take any program point P right there is a point ok P i in the', 'tokens': [51300, 341, 538, 264, 3480, 551, 291, 747, 604, 1461, 935, 430, 558, 456, 307, 257, 935, 3133, 430, 741, 294, 264, 51708], 'temperature': 0.0, 'avg_logprob': -0.1983661861210079, 'compression_ratio': 1.8146341463414635, 'no_speech_prob': 0.11917445808649063}, {'id': 86, 'seek': 51370, 'start': 513.7, 'end': 521.1400000000001, 'text': ' program which is before this point right in which it is defined the variable is defined', 'tokens': [50364, 1461, 597, 307, 949, 341, 935, 558, 294, 597, 309, 307, 7642, 264, 7006, 307, 7642, 50736], 'temperature': 0.0, 'avg_logprob': -0.14037049783242717, 'compression_ratio': 2.1363636363636362, 'no_speech_prob': 0.1483406126499176}, {'id': 87, 'seek': 51370, 'start': 521.1400000000001, 'end': 526.7800000000001, 'text': ' that means that given a program point there is a point prior to that where this variable', 'tokens': [50736, 300, 1355, 300, 2212, 257, 1461, 935, 456, 307, 257, 935, 4059, 281, 300, 689, 341, 7006, 51018], 'temperature': 0.0, 'avg_logprob': -0.14037049783242717, 'compression_ratio': 2.1363636363636362, 'no_speech_prob': 0.1483406126499176}, {'id': 88, 'seek': 51370, 'start': 526.7800000000001, 'end': 533.7, 'text': ' has been defined and there is a point after that where the variable is used that means', 'tokens': [51018, 575, 668, 7642, 293, 456, 307, 257, 935, 934, 300, 689, 264, 7006, 307, 1143, 300, 1355, 51364], 'temperature': 0.0, 'avg_logprob': -0.14037049783242717, 'compression_ratio': 2.1363636363636362, 'no_speech_prob': 0.1483406126499176}, {'id': 89, 'seek': 51370, 'start': 533.7, 'end': 539.38, 'text': ' that you are in between the definition and the use of a variable.', 'tokens': [51364, 300, 291, 366, 294, 1296, 264, 7123, 293, 264, 764, 295, 257, 7006, 13, 51648], 'temperature': 0.0, 'avg_logprob': -0.14037049783242717, 'compression_ratio': 2.1363636363636362, 'no_speech_prob': 0.1483406126499176}, {'id': 90, 'seek': 53938, 'start': 539.38, 'end': 545.02, 'text': ' But of course you also want to say that in between the value is not redefined that means', 'tokens': [50364, 583, 295, 1164, 291, 611, 528, 281, 584, 300, 294, 1296, 264, 2158, 307, 406, 38818, 2001, 300, 1355, 50646], 'temperature': 0.0, 'avg_logprob': -0.15188317182587413, 'compression_ratio': 1.9243243243243244, 'no_speech_prob': 0.12116347998380661}, {'id': 91, 'seek': 53938, 'start': 545.02, 'end': 553.3, 'text': ' that you have a definition then some use then again another definition again another use', 'tokens': [50646, 300, 291, 362, 257, 7123, 550, 512, 764, 550, 797, 1071, 7123, 797, 1071, 764, 51060], 'temperature': 0.0, 'avg_logprob': -0.15188317182587413, 'compression_ratio': 1.9243243243243244, 'no_speech_prob': 0.12116347998380661}, {'id': 92, 'seek': 53938, 'start': 553.3, 'end': 559.9399999999999, 'text': ' then in between these use and the definition those points it is not live ok. Let me give', 'tokens': [51060, 550, 294, 1296, 613, 764, 293, 264, 7123, 729, 2793, 309, 307, 406, 1621, 3133, 13, 961, 385, 976, 51392], 'temperature': 0.0, 'avg_logprob': -0.15188317182587413, 'compression_ratio': 1.9243243243243244, 'no_speech_prob': 0.12116347998380661}, {'id': 93, 'seek': 53938, 'start': 559.9399999999999, 'end': 568.34, 'text': ' that example here so let us say the temporary is defined here ok it is used here and then', 'tokens': [51392, 300, 1365, 510, 370, 718, 505, 584, 264, 13413, 307, 7642, 510, 3133, 309, 307, 1143, 510, 293, 550, 51812], 'temperature': 0.0, 'avg_logprob': -0.15188317182587413, 'compression_ratio': 1.9243243243243244, 'no_speech_prob': 0.12116347998380661}, {'id': 94, 'seek': 56834, 'start': 568.34, 'end': 576.5400000000001, 'text': ' again subsequently defined here and used here. Now you can say this program point it is live', 'tokens': [50364, 797, 26514, 7642, 510, 293, 1143, 510, 13, 823, 291, 393, 584, 341, 1461, 935, 309, 307, 1621, 50774], 'temperature': 0.0, 'avg_logprob': -0.15567348798116049, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.047152258455753326}, {'id': 95, 'seek': 56834, 'start': 576.5400000000001, 'end': 584.22, 'text': ' this program point it is live but this program point in between these two right there is', 'tokens': [50774, 341, 1461, 935, 309, 307, 1621, 457, 341, 1461, 935, 294, 1296, 613, 732, 558, 456, 307, 51158], 'temperature': 0.0, 'avg_logprob': -0.15567348798116049, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.047152258455753326}, {'id': 96, 'seek': 56834, 'start': 584.22, 'end': 590.46, 'text': ' a definition before that there is an use after that however in between this point and this', 'tokens': [51158, 257, 7123, 949, 300, 456, 307, 364, 764, 934, 300, 4461, 294, 1296, 341, 935, 293, 341, 51470], 'temperature': 0.0, 'avg_logprob': -0.15567348798116049, 'compression_ratio': 1.8888888888888888, 'no_speech_prob': 0.047152258455753326}, {'id': 97, 'seek': 59046, 'start': 590.46, 'end': 599.7800000000001, 'text': ' use there is a redefinition correct right. So we do not call this as live ok this is', 'tokens': [50364, 764, 456, 307, 257, 14328, 5194, 849, 3006, 558, 13, 407, 321, 360, 406, 818, 341, 382, 1621, 3133, 341, 307, 50830], 'temperature': 0.0, 'avg_logprob': -0.2524153526793135, 'compression_ratio': 1.5044247787610618, 'no_speech_prob': 0.2880612909793854}, {'id': 98, 'seek': 59046, 'start': 599.7800000000001, 'end': 612.3000000000001, 'text': ' not whereas this is live and ok this is live right so that is really what we mean ok.', 'tokens': [50830, 406, 9735, 341, 307, 1621, 293, 3133, 341, 307, 1621, 558, 370, 300, 307, 534, 437, 321, 914, 3133, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.2524153526793135, 'compression_ratio': 1.5044247787610618, 'no_speech_prob': 0.2880612909793854}, {'id': 99, 'seek': 61230, 'start': 612.3, 'end': 622.2199999999999, 'text': ' Let us take an example right look at this code right now for each variable we say that', 'tokens': [50364, 961, 505, 747, 364, 1365, 558, 574, 412, 341, 3089, 558, 586, 337, 1184, 7006, 321, 584, 300, 50860], 'temperature': 0.0, 'avg_logprob': -0.17397021084296993, 'compression_ratio': 1.8864864864864865, 'no_speech_prob': 0.14395906031131744}, {'id': 100, 'seek': 61230, 'start': 622.2199999999999, 'end': 629.78, 'text': ' the point in which it is defined till its last use is where it is live ok. So for example', 'tokens': [50860, 264, 935, 294, 597, 309, 307, 7642, 4288, 1080, 1036, 764, 307, 689, 309, 307, 1621, 3133, 13, 407, 337, 1365, 51238], 'temperature': 0.0, 'avg_logprob': -0.17397021084296993, 'compression_ratio': 1.8864864864864865, 'no_speech_prob': 0.14395906031131744}, {'id': 101, 'seek': 61230, 'start': 629.78, 'end': 635.06, 'text': ' the variable S 1 which is defined here is only used in the next instruction similarly', 'tokens': [51238, 264, 7006, 318, 502, 597, 307, 7642, 510, 307, 787, 1143, 294, 264, 958, 10951, 14138, 51502], 'temperature': 0.0, 'avg_logprob': -0.17397021084296993, 'compression_ratio': 1.8864864864864865, 'no_speech_prob': 0.14395906031131744}, {'id': 102, 'seek': 61230, 'start': 635.06, 'end': 641.2199999999999, 'text': ' the variable S 2 which is defined is being used in the next two instructions right and', 'tokens': [51502, 264, 7006, 318, 568, 597, 307, 7642, 307, 885, 1143, 294, 264, 958, 732, 9415, 558, 293, 51810], 'temperature': 0.0, 'avg_logprob': -0.17397021084296993, 'compression_ratio': 1.8864864864864865, 'no_speech_prob': 0.14395906031131744}, {'id': 103, 'seek': 64122, 'start': 641.22, 'end': 646.3000000000001, 'text': ' a variable which is S 3 which is defined over here is being used in the next instruction and', 'tokens': [50364, 257, 7006, 597, 307, 318, 805, 597, 307, 7642, 670, 510, 307, 885, 1143, 294, 264, 958, 10951, 293, 50618], 'temperature': 0.0, 'avg_logprob': -0.12867814844304865, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.02606544829905033}, {'id': 104, 'seek': 64122, 'start': 646.3000000000001, 'end': 652.98, 'text': ' so on right. So the live range of each one of these variables is shown here and clearly', 'tokens': [50618, 370, 322, 558, 13, 407, 264, 1621, 3613, 295, 1184, 472, 295, 613, 9102, 307, 4898, 510, 293, 4448, 50952], 'temperature': 0.0, 'avg_logprob': -0.12867814844304865, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.02606544829905033}, {'id': 105, 'seek': 64122, 'start': 652.98, 'end': 659.34, 'text': ' we can see that S 1 and S 2 conflict with each other right if they are given the same register', 'tokens': [50952, 321, 393, 536, 300, 318, 502, 293, 318, 568, 6596, 365, 1184, 661, 558, 498, 436, 366, 2212, 264, 912, 7280, 51270], 'temperature': 0.0, 'avg_logprob': -0.12867814844304865, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.02606544829905033}, {'id': 106, 'seek': 64122, 'start': 659.34, 'end': 664.86, 'text': " then obviously there is going to be a problem isn't it because they are live at this point", 'tokens': [51270, 550, 2745, 456, 307, 516, 281, 312, 257, 1154, 1943, 380, 309, 570, 436, 366, 1621, 412, 341, 935, 51546], 'temperature': 0.0, 'avg_logprob': -0.12867814844304865, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.02606544829905033}, {'id': 107, 'seek': 66486, 'start': 664.86, 'end': 673.34, 'text': ' together and therefore they cannot be using the same register whereas S 1 and S 4 can share the', 'tokens': [50364, 1214, 293, 4412, 436, 2644, 312, 1228, 264, 912, 7280, 9735, 318, 502, 293, 318, 1017, 393, 2073, 264, 50788], 'temperature': 0.0, 'avg_logprob': -0.15242866971599522, 'compression_ratio': 1.7770700636942676, 'no_speech_prob': 0.42114773392677307}, {'id': 108, 'seek': 66486, 'start': 673.34, 'end': 679.14, 'text': ' same register because they were never live together right at any of these program points', 'tokens': [50788, 912, 7280, 570, 436, 645, 1128, 1621, 1214, 558, 412, 604, 295, 613, 1461, 2793, 51078], 'temperature': 0.0, 'avg_logprob': -0.15242866971599522, 'compression_ratio': 1.7770700636942676, 'no_speech_prob': 0.42114773392677307}, {'id': 109, 'seek': 66486, 'start': 679.14, 'end': 687.34, 'text': ' if you look at it either S 1 is live or S 4 is live but not together therefore S 1 and S 4 can', 'tokens': [51078, 498, 291, 574, 412, 309, 2139, 318, 502, 307, 1621, 420, 318, 1017, 307, 1621, 457, 406, 1214, 4412, 318, 502, 293, 318, 1017, 393, 51488], 'temperature': 0.0, 'avg_logprob': -0.15242866971599522, 'compression_ratio': 1.7770700636942676, 'no_speech_prob': 0.42114773392677307}, {'id': 110, 'seek': 68734, 'start': 687.34, 'end': 695.1, 'text': ' be assigned different registers right ok. Now the same thing will go a little bit more into the', 'tokens': [50364, 312, 13279, 819, 38351, 558, 3133, 13, 823, 264, 912, 551, 486, 352, 257, 707, 857, 544, 666, 264, 50752], 'temperature': 0.0, 'avg_logprob': -0.12043295123360374, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.3196704387664795}, {'id': 111, 'seek': 68734, 'start': 695.1, 'end': 701.14, 'text': ' details as I mentioned earlier right whenever we say a variable is said to be live if there is a', 'tokens': [50752, 4365, 382, 286, 2835, 3071, 558, 5699, 321, 584, 257, 7006, 307, 848, 281, 312, 1621, 498, 456, 307, 257, 51054], 'temperature': 0.0, 'avg_logprob': -0.12043295123360374, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.3196704387664795}, {'id': 112, 'seek': 68734, 'start': 701.14, 'end': 708.9, 'text': ' definition before that and there is an use after that including that point ok. So for example if', 'tokens': [51054, 7123, 949, 300, 293, 456, 307, 364, 764, 934, 300, 3009, 300, 935, 3133, 13, 407, 337, 1365, 498, 51442], 'temperature': 0.0, 'avg_logprob': -0.12043295123360374, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.3196704387664795}, {'id': 113, 'seek': 68734, 'start': 708.9, 'end': 715.9000000000001, 'text': ' you look at C and then talk about variable S 2 then there is a definition before that and there', 'tokens': [51442, 291, 574, 412, 383, 293, 550, 751, 466, 7006, 318, 568, 550, 456, 307, 257, 7123, 949, 300, 293, 456, 51792], 'temperature': 0.0, 'avg_logprob': -0.12043295123360374, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.3196704387664795}, {'id': 114, 'seek': 71590, 'start': 715.9, 'end': 722.5, 'text': ' is an use after that and there is no redefinition from this point to the use point therefore this', 'tokens': [50364, 307, 364, 764, 934, 300, 293, 456, 307, 572, 14328, 5194, 849, 490, 341, 935, 281, 264, 764, 935, 4412, 341, 50694], 'temperature': 0.0, 'avg_logprob': -0.13112606800777812, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.05489363148808479}, {'id': 115, 'seek': 71590, 'start': 722.5, 'end': 729.6999999999999, 'text': ' is what is called the live range of this variable ok. Now we essentially define what is called an', 'tokens': [50694, 307, 437, 307, 1219, 264, 1621, 3613, 295, 341, 7006, 3133, 13, 823, 321, 4476, 6964, 437, 307, 1219, 364, 51054], 'temperature': 0.0, 'avg_logprob': -0.13112606800777812, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.05489363148808479}, {'id': 116, 'seek': 71590, 'start': 729.6999999999999, 'end': 738.5, 'text': ' interval ok so this interval between p i to p j is the live range of this variable right so S 2', 'tokens': [51054, 15035, 3133, 370, 341, 15035, 1296, 280, 741, 281, 280, 361, 307, 264, 1621, 3613, 295, 341, 7006, 558, 370, 318, 568, 51494], 'temperature': 0.0, 'avg_logprob': -0.13112606800777812, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.05489363148808479}, {'id': 117, 'seek': 73850, 'start': 738.5, 'end': 746.06, 'text': ' is live between b to d for example from this point to this point. How do we compute the live', 'tokens': [50364, 307, 1621, 1296, 272, 281, 274, 337, 1365, 490, 341, 935, 281, 341, 935, 13, 1012, 360, 321, 14722, 264, 1621, 50742], 'temperature': 0.0, 'avg_logprob': -0.1957693444677146, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.39712387323379517}, {'id': 118, 'seek': 73850, 'start': 746.06, 'end': 753.86, 'text': ' variables live range of a variable? We have been talked about the diffuse change in the data flow', 'tokens': [50742, 9102, 1621, 3613, 295, 257, 7006, 30, 492, 362, 668, 2825, 466, 264, 42165, 1319, 294, 264, 1412, 3095, 51132], 'temperature': 0.0, 'avg_logprob': -0.1957693444677146, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.39712387323379517}, {'id': 119, 'seek': 73850, 'start': 753.86, 'end': 760.5, 'text': ' analysis live variable analysis and diffuse change so using that we can calculate right', 'tokens': [51132, 5215, 1621, 7006, 5215, 293, 42165, 1319, 370, 1228, 300, 321, 393, 8873, 558, 51464], 'temperature': 0.0, 'avg_logprob': -0.1957693444677146, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.39712387323379517}, {'id': 120, 'seek': 73850, 'start': 760.5, 'end': 767.58, 'text': ' we can calculate the live range of each variable is that ok have you people been discussed I mean', 'tokens': [51464, 321, 393, 8873, 264, 1621, 3613, 295, 1184, 7006, 307, 300, 3133, 362, 291, 561, 668, 7152, 286, 914, 51818], 'temperature': 0.0, 'avg_logprob': -0.1957693444677146, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.39712387323379517}, {'id': 121, 'seek': 76758, 'start': 767.58, 'end': 774.82, 'text': ' has this been discussed as a part of the data flow analysis yeah yes and no liveness has been', 'tokens': [50364, 575, 341, 668, 7152, 382, 257, 644, 295, 264, 1412, 3095, 5215, 1338, 2086, 293, 572, 375, 553, 442, 575, 668, 50726], 'temperature': 0.0, 'avg_logprob': -0.21052556798078012, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0625818595290184}, {'id': 122, 'seek': 76758, 'start': 774.82, 'end': 784.82, 'text': ' discussed ok so d u change have not been discussed is it ok that is fine you can kind of read up that', 'tokens': [50726, 7152, 3133, 370, 274, 344, 1319, 362, 406, 668, 7152, 307, 309, 3133, 300, 307, 2489, 291, 393, 733, 295, 1401, 493, 300, 51226], 'temperature': 0.0, 'avg_logprob': -0.21052556798078012, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0625818595290184}, {'id': 123, 'seek': 76758, 'start': 784.82, 'end': 790.5, 'text': ' quickly similar data flow I mean it basically uses live variable analysis to compute the d u', 'tokens': [51226, 2661, 2531, 1412, 3095, 286, 914, 309, 1936, 4960, 1621, 7006, 5215, 281, 14722, 264, 274, 344, 51510], 'temperature': 0.0, 'avg_logprob': -0.21052556798078012, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.0625818595290184}, {'id': 124, 'seek': 79050, 'start': 790.5, 'end': 799.5, 'text': ' change the next circle I will read to that ok. Now the question is when is register allocation done', 'tokens': [50364, 1319, 264, 958, 6329, 286, 486, 1401, 281, 300, 3133, 13, 823, 264, 1168, 307, 562, 307, 7280, 27599, 1096, 50814], 'temperature': 0.0, 'avg_logprob': -0.22645322582389735, 'compression_ratio': 2.125714285714286, 'no_speech_prob': 0.31495171785354614}, {'id': 125, 'seek': 79050, 'start': 799.5, 'end': 804.86, 'text': ' and on what code is register allocation done? Register allocation is typically done on the', 'tokens': [50814, 293, 322, 437, 3089, 307, 7280, 27599, 1096, 30, 43167, 27599, 307, 5850, 1096, 322, 264, 51082], 'temperature': 0.0, 'avg_logprob': -0.22645322582389735, 'compression_ratio': 2.125714285714286, 'no_speech_prob': 0.31495171785354614}, {'id': 126, 'seek': 79050, 'start': 804.86, 'end': 811.5, 'text': ' lower level intermediate code either intermediate code or machine code typically on the machine', 'tokens': [51082, 3126, 1496, 19376, 3089, 2139, 19376, 3089, 420, 3479, 3089, 5850, 322, 264, 3479, 51414], 'temperature': 0.0, 'avg_logprob': -0.22645322582389735, 'compression_ratio': 2.125714285714286, 'no_speech_prob': 0.31495171785354614}, {'id': 127, 'seek': 79050, 'start': 811.5, 'end': 818.18, 'text': ' code more typically on the machine code ok that is where it is done it is done ok and', 'tokens': [51414, 3089, 544, 5850, 322, 264, 3479, 3089, 3133, 300, 307, 689, 309, 307, 1096, 309, 307, 1096, 3133, 293, 51748], 'temperature': 0.0, 'avg_logprob': -0.22645322582389735, 'compression_ratio': 2.125714285714286, 'no_speech_prob': 0.31495171785354614}, {'id': 128, 'seek': 81818, 'start': 818.26, 'end': 824.14, 'text': ' often times what happens is that code generation happens assuming infinite registers and what it', 'tokens': [50368, 2049, 1413, 437, 2314, 307, 300, 3089, 5125, 2314, 11926, 13785, 38351, 293, 437, 309, 50662], 'temperature': 0.0, 'avg_logprob': -0.14707882173599734, 'compression_ratio': 2.103286384976526, 'no_speech_prob': 0.07710108160972595}, {'id': 129, 'seek': 81818, 'start': 824.14, 'end': 830.7399999999999, 'text': ' does is that it uses what are called temporary vary sorry temporary registers ok or what they', 'tokens': [50662, 775, 307, 300, 309, 4960, 437, 366, 1219, 13413, 10559, 2597, 13413, 38351, 3133, 420, 437, 436, 50992], 'temperature': 0.0, 'avg_logprob': -0.14707882173599734, 'compression_ratio': 2.103286384976526, 'no_speech_prob': 0.07710108160972595}, {'id': 130, 'seek': 81818, 'start': 830.7399999999999, 'end': 835.0999999999999, 'text': ' call it as the let us call it as temporary register I do not want to call it logical.', 'tokens': [50992, 818, 309, 382, 264, 718, 505, 818, 309, 382, 13413, 7280, 286, 360, 406, 528, 281, 818, 309, 14978, 13, 51210], 'temperature': 0.0, 'avg_logprob': -0.14707882173599734, 'compression_ratio': 2.103286384976526, 'no_speech_prob': 0.07710108160972595}, {'id': 131, 'seek': 81818, 'start': 835.0999999999999, 'end': 840.5, 'text': ' So, code generation happens with temporary registers which assumes infinite amount of', 'tokens': [51210, 407, 11, 3089, 5125, 2314, 365, 13413, 38351, 597, 37808, 13785, 2372, 295, 51480], 'temperature': 0.0, 'avg_logprob': -0.14707882173599734, 'compression_ratio': 2.103286384976526, 'no_speech_prob': 0.07710108160972595}, {'id': 132, 'seek': 81818, 'start': 840.5, 'end': 845.3, 'text': ' registers now what you do in the register allocation phase is that you find out which', 'tokens': [51480, 38351, 586, 437, 291, 360, 294, 264, 7280, 27599, 5574, 307, 300, 291, 915, 484, 597, 51720], 'temperature': 0.0, 'avg_logprob': -0.14707882173599734, 'compression_ratio': 2.103286384976526, 'no_speech_prob': 0.07710108160972595}, {'id': 133, 'seek': 84530, 'start': 845.3, 'end': 851.5, 'text': ' one of them actually go to those registers and which one will be not registers or will be always', 'tokens': [50364, 472, 295, 552, 767, 352, 281, 729, 38351, 293, 597, 472, 486, 312, 406, 38351, 420, 486, 312, 1009, 50674], 'temperature': 0.0, 'avg_logprob': -0.1593340664375119, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.07542046159505844}, {'id': 134, 'seek': 84530, 'start': 851.5, 'end': 857.74, 'text': ' access from the memory that is needed to be done during the register allocation phase and this', 'tokens': [50674, 2105, 490, 264, 4675, 300, 307, 2978, 281, 312, 1096, 1830, 264, 7280, 27599, 5574, 293, 341, 50986], 'temperature': 0.0, 'avg_logprob': -0.1593340664375119, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.07542046159505844}, {'id': 135, 'seek': 84530, 'start': 857.74, 'end': 864.8599999999999, 'text': ' is typically done after all the global optimizations are also done but it can be done either before or', 'tokens': [50986, 307, 5850, 1096, 934, 439, 264, 4338, 5028, 14455, 366, 611, 1096, 457, 309, 393, 312, 1096, 2139, 949, 420, 51342], 'temperature': 0.0, 'avg_logprob': -0.1593340664375119, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.07542046159505844}, {'id': 136, 'seek': 84530, 'start': 864.8599999999999, 'end': 870.38, 'text': ' after instruction scheduling and towards the end of this lecture and possibly in the next lecture', 'tokens': [51342, 934, 10951, 29055, 293, 3030, 264, 917, 295, 341, 7991, 293, 6264, 294, 264, 958, 7991, 51618], 'temperature': 0.0, 'avg_logprob': -0.1593340664375119, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.07542046159505844}, {'id': 137, 'seek': 87038, 'start': 870.38, 'end': 876.74, 'text': ' we will discuss what are the pros and cons of doing it before as well as after right both of', 'tokens': [50364, 321, 486, 2248, 437, 366, 264, 6267, 293, 1014, 295, 884, 309, 949, 382, 731, 382, 934, 558, 1293, 295, 50682], 'temperature': 0.0, 'avg_logprob': -0.15586262941360474, 'compression_ratio': 1.9423868312757202, 'no_speech_prob': 0.34391507506370544}, {'id': 138, 'seek': 87038, 'start': 876.74, 'end': 882.62, 'text': ' them has some positive and some negative aspects of doing things and there is interaction between', 'tokens': [50682, 552, 575, 512, 3353, 293, 512, 3671, 7270, 295, 884, 721, 293, 456, 307, 9285, 1296, 50976], 'temperature': 0.0, 'avg_logprob': -0.15586262941360474, 'compression_ratio': 1.9423868312757202, 'no_speech_prob': 0.34391507506370544}, {'id': 139, 'seek': 87038, 'start': 882.62, 'end': 888.26, 'text': ' this instruction scheduling phase and the register allocation phase. So, one has to be one has to', 'tokens': [50976, 341, 10951, 29055, 5574, 293, 264, 7280, 27599, 5574, 13, 407, 11, 472, 575, 281, 312, 472, 575, 281, 51258], 'temperature': 0.0, 'avg_logprob': -0.15586262941360474, 'compression_ratio': 1.9423868312757202, 'no_speech_prob': 0.34391507506370544}, {'id': 140, 'seek': 87038, 'start': 888.26, 'end': 893.62, 'text': ' understand that in order to position them appropriately. Software pipelining is another', 'tokens': [51258, 1223, 300, 294, 1668, 281, 2535, 552, 23505, 13, 27428, 8489, 338, 1760, 307, 1071, 51526], 'temperature': 0.0, 'avg_logprob': -0.15586262941360474, 'compression_ratio': 1.9423868312757202, 'no_speech_prob': 0.34391507506370544}, {'id': 141, 'seek': 87038, 'start': 893.62, 'end': 897.78, 'text': ' instruction scheduling method when we talk about instruction scheduling we will also talk about', 'tokens': [51526, 10951, 29055, 3170, 562, 321, 751, 466, 10951, 29055, 321, 486, 611, 751, 466, 51734], 'temperature': 0.0, 'avg_logprob': -0.15586262941360474, 'compression_ratio': 1.9423868312757202, 'no_speech_prob': 0.34391507506370544}, {'id': 142, 'seek': 89778, 'start': 897.78, 'end': 904.66, 'text': ' software pipelining. Now, this again I do not understand too much of this so I copied this', 'tokens': [50364, 4722, 8489, 338, 1760, 13, 823, 11, 341, 797, 286, 360, 406, 1223, 886, 709, 295, 341, 370, 286, 25365, 341, 50708], 'temperature': 0.0, 'avg_logprob': -0.15261652440200618, 'compression_ratio': 1.592920353982301, 'no_speech_prob': 0.088826984167099}, {'id': 143, 'seek': 89778, 'start': 904.66, 'end': 912.54, 'text': ' slide from this source right and this kind of shows in the LLVM where exactly is register', 'tokens': [50708, 4137, 490, 341, 4009, 558, 293, 341, 733, 295, 3110, 294, 264, 441, 43, 53, 44, 689, 2293, 307, 7280, 51102], 'temperature': 0.0, 'avg_logprob': -0.15261652440200618, 'compression_ratio': 1.592920353982301, 'no_speech_prob': 0.088826984167099}, {'id': 144, 'seek': 89778, 'start': 912.54, 'end': 919.38, 'text': ' allocation being done right. So, you can see that you do all these code generation instruction', 'tokens': [51102, 27599, 885, 1096, 558, 13, 407, 11, 291, 393, 536, 300, 291, 360, 439, 613, 3089, 5125, 10951, 51444], 'temperature': 0.0, 'avg_logprob': -0.15261652440200618, 'compression_ratio': 1.592920353982301, 'no_speech_prob': 0.088826984167099}, {'id': 145, 'seek': 89778, 'start': 919.38, 'end': 925.5, 'text': ' selection right instruction scheduling and further some SSA based optimization which', 'tokens': [51444, 9450, 558, 10951, 29055, 293, 3052, 512, 318, 8886, 2361, 19618, 597, 51750], 'temperature': 0.0, 'avg_logprob': -0.15261652440200618, 'compression_ratio': 1.592920353982301, 'no_speech_prob': 0.088826984167099}, {'id': 146, 'seek': 92550, 'start': 925.66, 'end': 932.82, 'text': ' Malai talked about yesterday and after that you have an SSA form of instructions on that you do', 'tokens': [50372, 5746, 1301, 2825, 466, 5186, 293, 934, 300, 291, 362, 364, 318, 8886, 1254, 295, 9415, 322, 300, 291, 360, 50730], 'temperature': 0.0, 'avg_logprob': -0.17188521997252507, 'compression_ratio': 1.5351351351351352, 'no_speech_prob': 0.09800787270069122}, {'id': 147, 'seek': 92550, 'start': 932.82, 'end': 941.5, 'text': ' register allocation this is how it happens in LLVM right whereas in GCC right it is little bit', 'tokens': [50730, 7280, 27599, 341, 307, 577, 309, 2314, 294, 441, 43, 53, 44, 558, 9735, 294, 460, 11717, 558, 309, 307, 707, 857, 51164], 'temperature': 0.0, 'avg_logprob': -0.17188521997252507, 'compression_ratio': 1.5351351351351352, 'no_speech_prob': 0.09800787270069122}, {'id': 148, 'seek': 92550, 'start': 941.5, 'end': 948.94, 'text': ' different. So, after the code generation phase right there are certain optimizations that are', 'tokens': [51164, 819, 13, 407, 11, 934, 264, 3089, 5125, 5574, 558, 456, 366, 1629, 5028, 14455, 300, 366, 51536], 'temperature': 0.0, 'avg_logprob': -0.17188521997252507, 'compression_ratio': 1.5351351351351352, 'no_speech_prob': 0.09800787270069122}, {'id': 149, 'seek': 94894, 'start': 948.94, 'end': 957.22, 'text': ' done and after that you do instruction scheduling and after that you do register allocation right.', 'tokens': [50364, 1096, 293, 934, 300, 291, 360, 10951, 29055, 293, 934, 300, 291, 360, 7280, 27599, 558, 13, 50778], 'temperature': 0.0, 'avg_logprob': -0.14442334692162204, 'compression_ratio': 1.9077669902912622, 'no_speech_prob': 0.3418498933315277}, {'id': 150, 'seek': 94894, 'start': 957.22, 'end': 964.6600000000001, 'text': ' So, that is really how this happens in register allocation but for our purpose what we will assume', 'tokens': [50778, 407, 11, 300, 307, 534, 577, 341, 2314, 294, 7280, 27599, 457, 337, 527, 4334, 437, 321, 486, 6552, 51150], 'temperature': 0.0, 'avg_logprob': -0.14442334692162204, 'compression_ratio': 1.9077669902912622, 'no_speech_prob': 0.3418498933315277}, {'id': 151, 'seek': 94894, 'start': 964.6600000000001, 'end': 970.1800000000001, 'text': ' is that we have some kind of a code where there are temporary registers the code already has some', 'tokens': [51150, 307, 300, 321, 362, 512, 733, 295, 257, 3089, 689, 456, 366, 13413, 38351, 264, 3089, 1217, 575, 512, 51426], 'temperature': 0.0, 'avg_logprob': -0.14442334692162204, 'compression_ratio': 1.9077669902912622, 'no_speech_prob': 0.3418498933315277}, {'id': 152, 'seek': 94894, 'start': 970.1800000000001, 'end': 976.5400000000001, 'text': ' temporary registers and we need to decide how many of them will get actually the register that is', 'tokens': [51426, 13413, 38351, 293, 321, 643, 281, 4536, 577, 867, 295, 552, 486, 483, 767, 264, 7280, 300, 307, 51744], 'temperature': 0.0, 'avg_logprob': -0.14442334692162204, 'compression_ratio': 1.9077669902912622, 'no_speech_prob': 0.3418498933315277}, {'id': 153, 'seek': 97654, 'start': 976.54, 'end': 982.8199999999999, 'text': ' really the problem that you are trying to look at okay. Now, first thing is that let us just simply', 'tokens': [50364, 534, 264, 1154, 300, 291, 366, 1382, 281, 574, 412, 1392, 13, 823, 11, 700, 551, 307, 300, 718, 505, 445, 2935, 50678], 'temperature': 0.0, 'avg_logprob': -0.18184242248535157, 'compression_ratio': 1.7962085308056872, 'no_speech_prob': 0.09128088504076004}, {'id': 154, 'seek': 97654, 'start': 982.8199999999999, 'end': 988.98, 'text': ' explain register allocation using this usage accounts and why that is important just to get', 'tokens': [50678, 2903, 7280, 27599, 1228, 341, 14924, 9402, 293, 983, 300, 307, 1021, 445, 281, 483, 50986], 'temperature': 0.0, 'avg_logprob': -0.18184242248535157, 'compression_ratio': 1.7962085308056872, 'no_speech_prob': 0.09128088504076004}, {'id': 155, 'seek': 97654, 'start': 988.98, 'end': 995.14, 'text': ' the intuition of that. We will try to do that using a simple example but before that let us', 'tokens': [50986, 264, 24002, 295, 300, 13, 492, 486, 853, 281, 360, 300, 1228, 257, 2199, 1365, 457, 949, 300, 718, 505, 51294], 'temperature': 0.0, 'avg_logprob': -0.18184242248535157, 'compression_ratio': 1.7962085308056872, 'no_speech_prob': 0.09128088504076004}, {'id': 156, 'seek': 97654, 'start': 995.14, 'end': 1000.02, 'text': ' find out what is the objective of register allocation why do we need to do register allocation.', 'tokens': [51294, 915, 484, 437, 307, 264, 10024, 295, 7280, 27599, 983, 360, 321, 643, 281, 360, 7280, 27599, 13, 51538], 'temperature': 0.0, 'avg_logprob': -0.18184242248535157, 'compression_ratio': 1.7962085308056872, 'no_speech_prob': 0.09128088504076004}, {'id': 157, 'seek': 100002, 'start': 1000.02, 'end': 1021.02, 'text': ' So, in the register allocation problem you are now trying to do register allocation for a specific', 'tokens': [50364, 407, 11, 294, 264, 7280, 27599, 1154, 291, 366, 586, 1382, 281, 360, 7280, 27599, 337, 257, 2685, 51414], 'temperature': 0.0, 'avg_logprob': -0.28106858513572, 'compression_ratio': 1.2564102564102564, 'no_speech_prob': 0.3314991891384125}, {'id': 158, 'seek': 102102, 'start': 1021.02, 'end': 1040.34, 'text': ' target architecture correct. It is dependent on the architecture on which you are going to. Okay,', 'tokens': [50364, 3779, 9482, 3006, 13, 467, 307, 12334, 322, 264, 9482, 322, 597, 291, 366, 516, 281, 13, 1033, 11, 51330], 'temperature': 0.0, 'avg_logprob': -0.3594868977864583, 'compression_ratio': 1.4233576642335766, 'no_speech_prob': 0.6912755370140076}, {'id': 159, 'seek': 102102, 'start': 1040.34, 'end': 1046.54, 'text': ' right okay so I do not know whether I should have probably talked about this little bit but I did', 'tokens': [51330, 558, 1392, 370, 286, 360, 406, 458, 1968, 286, 820, 362, 1391, 2825, 466, 341, 707, 857, 457, 286, 630, 51640], 'temperature': 0.0, 'avg_logprob': -0.3594868977864583, 'compression_ratio': 1.4233576642335766, 'no_speech_prob': 0.6912755370140076}, {'id': 160, 'seek': 104654, 'start': 1047.02, 'end': 1053.74, 'text': ' not okay. So, you can do this is the different passes in GCC right. Now, as I mentioned here', 'tokens': [50388, 406, 1392, 13, 407, 11, 291, 393, 360, 341, 307, 264, 819, 11335, 294, 460, 11717, 558, 13, 823, 11, 382, 286, 2835, 510, 50724], 'temperature': 0.0, 'avg_logprob': -0.2244266243868096, 'compression_ratio': 1.727699530516432, 'no_speech_prob': 0.12783566117286682}, {'id': 161, 'seek': 104654, 'start': 1053.74, 'end': 1059.54, 'text': ' these are the high level languages then you do your front end part of your compilation and then', 'tokens': [50724, 613, 366, 264, 1090, 1496, 8650, 550, 291, 360, 428, 1868, 917, 644, 295, 428, 40261, 293, 550, 51014], 'temperature': 0.0, 'avg_logprob': -0.2244266243868096, 'compression_ratio': 1.727699530516432, 'no_speech_prob': 0.12783566117286682}, {'id': 162, 'seek': 104654, 'start': 1059.54, 'end': 1065.7, 'text': ' you generate different kinds of RTLs right this is like intermediate representation right.', 'tokens': [51014, 291, 8460, 819, 3685, 295, 21797, 43, 82, 558, 341, 307, 411, 19376, 10290, 558, 13, 51322], 'temperature': 0.0, 'avg_logprob': -0.2244266243868096, 'compression_ratio': 1.727699530516432, 'no_speech_prob': 0.12783566117286682}, {'id': 163, 'seek': 104654, 'start': 1065.7, 'end': 1075.58, 'text': ' Then so you can think of this as some kind of an intermediate code alright and then this', 'tokens': [51322, 1396, 370, 291, 393, 519, 295, 341, 382, 512, 733, 295, 364, 19376, 3089, 5845, 293, 550, 341, 51816], 'temperature': 0.0, 'avg_logprob': -0.2244266243868096, 'compression_ratio': 1.727699530516432, 'no_speech_prob': 0.12783566117286682}, {'id': 164, 'seek': 107558, 'start': 1075.58, 'end': 1081.1399999999999, 'text': ' intermediate code takes certain machine description this is basically description about the target', 'tokens': [50364, 19376, 3089, 2516, 1629, 3479, 3855, 341, 307, 1936, 3855, 466, 264, 3779, 50642], 'temperature': 0.0, 'avg_logprob': -0.18405742230622665, 'compression_ratio': 1.8492063492063493, 'no_speech_prob': 0.020134730264544487}, {'id': 165, 'seek': 107558, 'start': 1081.1399999999999, 'end': 1088.1399999999999, 'text': ' language this is what well I also talked about later earlier right. So, this specifies for x86', 'tokens': [50642, 2856, 341, 307, 437, 731, 286, 611, 2825, 466, 1780, 3071, 558, 13, 407, 11, 341, 1608, 11221, 337, 2031, 22193, 50992], 'temperature': 0.0, 'avg_logprob': -0.18405742230622665, 'compression_ratio': 1.8492063492063493, 'no_speech_prob': 0.020134730264544487}, {'id': 166, 'seek': 107558, 'start': 1088.1399999999999, 'end': 1093.6999999999998, 'text': ' how many registers are there what kind of instruction set is there or whatever other', 'tokens': [50992, 577, 867, 38351, 366, 456, 437, 733, 295, 10951, 992, 307, 456, 420, 2035, 661, 51270], 'temperature': 0.0, 'avg_logprob': -0.18405742230622665, 'compression_ratio': 1.8492063492063493, 'no_speech_prob': 0.020134730264544487}, {'id': 167, 'seek': 107558, 'start': 1093.6999999999998, 'end': 1099.58, 'text': ' information that you want to mention along with their cost blah blah blah etc. Then using that', 'tokens': [51270, 1589, 300, 291, 528, 281, 2152, 2051, 365, 641, 2063, 12288, 12288, 12288, 5183, 13, 1396, 1228, 300, 51564], 'temperature': 0.0, 'avg_logprob': -0.18405742230622665, 'compression_ratio': 1.8492063492063493, 'no_speech_prob': 0.020134730264544487}, {'id': 168, 'seek': 107558, 'start': 1099.58, 'end': 1105.3799999999999, 'text': ' information reading that information when you do register allocation your register allocator', 'tokens': [51564, 1589, 3760, 300, 1589, 562, 291, 360, 7280, 27599, 428, 7280, 12660, 1639, 51854], 'temperature': 0.0, 'avg_logprob': -0.18405742230622665, 'compression_ratio': 1.8492063492063493, 'no_speech_prob': 0.020134730264544487}, {'id': 169, 'seek': 110538, 'start': 1105.38, 'end': 1110.7, 'text': ' is going to use this information and then generate code for that. In fact, even before', 'tokens': [50364, 307, 516, 281, 764, 341, 1589, 293, 550, 8460, 3089, 337, 300, 13, 682, 1186, 11, 754, 949, 50630], 'temperature': 0.0, 'avg_logprob': -0.17368835494631812, 'compression_ratio': 1.6837209302325582, 'no_speech_prob': 0.006946125533431768}, {'id': 170, 'seek': 110538, 'start': 1110.7, 'end': 1118.38, 'text': ' you go to register allocation for generating machine code in fact GCC has a pass which is', 'tokens': [50630, 291, 352, 281, 7280, 27599, 337, 17746, 3479, 3089, 294, 1186, 460, 11717, 575, 257, 1320, 597, 307, 51014], 'temperature': 0.0, 'avg_logprob': -0.17368835494631812, 'compression_ratio': 1.6837209302325582, 'no_speech_prob': 0.006946125533431768}, {'id': 171, 'seek': 110538, 'start': 1118.38, 'end': 1128.7, 'text': ' called machine MD RTL which is actually machine specific RTL right. That pass also takes the', 'tokens': [51014, 1219, 3479, 22521, 21797, 43, 597, 307, 767, 3479, 2685, 21797, 43, 558, 13, 663, 1320, 611, 2516, 264, 51530], 'temperature': 0.0, 'avg_logprob': -0.17368835494631812, 'compression_ratio': 1.6837209302325582, 'no_speech_prob': 0.006946125533431768}, {'id': 172, 'seek': 110538, 'start': 1128.7, 'end': 1134.14, 'text': ' machine description in terms of generating code how do I generate code for let us say an x86', 'tokens': [51530, 3479, 3855, 294, 2115, 295, 17746, 3089, 577, 360, 286, 8460, 3089, 337, 718, 505, 584, 364, 2031, 22193, 51802], 'temperature': 0.0, 'avg_logprob': -0.17368835494631812, 'compression_ratio': 1.6837209302325582, 'no_speech_prob': 0.006946125533431768}, {'id': 173, 'seek': 113414, 'start': 1134.14, 'end': 1140.94, 'text': ' machine how do I generate code for a risk machine like let us say r 10000 or power 9 whatever it is', 'tokens': [50364, 3479, 577, 360, 286, 8460, 3089, 337, 257, 3148, 3479, 411, 718, 505, 584, 367, 2319, 628, 420, 1347, 1722, 2035, 309, 307, 50704], 'temperature': 0.0, 'avg_logprob': -0.14974128865750036, 'compression_ratio': 1.8494208494208495, 'no_speech_prob': 0.059926532208919525}, {'id': 174, 'seek': 113414, 'start': 1140.94, 'end': 1145.8200000000002, 'text': ' each one is going to be different. So, you need to take the machine description and the code', 'tokens': [50704, 1184, 472, 307, 516, 281, 312, 819, 13, 407, 11, 291, 643, 281, 747, 264, 3479, 3855, 293, 264, 3089, 50948], 'temperature': 0.0, 'avg_logprob': -0.14974128865750036, 'compression_ratio': 1.8494208494208495, 'no_speech_prob': 0.059926532208919525}, {'id': 175, 'seek': 113414, 'start': 1145.8200000000002, 'end': 1150.74, 'text': ' generator kind of understands that and then generates code based on that. Similarly, the', 'tokens': [50948, 19265, 733, 295, 15146, 300, 293, 550, 23815, 3089, 2361, 322, 300, 13, 13157, 11, 264, 51194], 'temperature': 0.0, 'avg_logprob': -0.14974128865750036, 'compression_ratio': 1.8494208494208495, 'no_speech_prob': 0.059926532208919525}, {'id': 176, 'seek': 113414, 'start': 1150.74, 'end': 1155.5, 'text': ' register allocator is also going to look at the machine description and then understand how many', 'tokens': [51194, 7280, 12660, 1639, 307, 611, 516, 281, 574, 412, 264, 3479, 3855, 293, 550, 1223, 577, 867, 51432], 'temperature': 0.0, 'avg_logprob': -0.14974128865750036, 'compression_ratio': 1.8494208494208495, 'no_speech_prob': 0.059926532208919525}, {'id': 177, 'seek': 113414, 'start': 1155.5, 'end': 1161.14, 'text': ' registers are there are there any constraints on the register right. For example, when we talk about', 'tokens': [51432, 38351, 366, 456, 366, 456, 604, 18491, 322, 264, 7280, 558, 13, 1171, 1365, 11, 562, 321, 751, 466, 51714], 'temperature': 0.0, 'avg_logprob': -0.14974128865750036, 'compression_ratio': 1.8494208494208495, 'no_speech_prob': 0.059926532208919525}, {'id': 178, 'seek': 116114, 'start': 1161.3000000000002, 'end': 1169.3400000000001, 'text': ' risk 5 right you know that there are 32 registers each one of them is 32 bit and r 0 is hardwired', 'tokens': [50372, 3148, 1025, 558, 291, 458, 300, 456, 366, 8858, 38351, 1184, 472, 295, 552, 307, 8858, 857, 293, 367, 1958, 307, 1152, 86, 1824, 50774], 'temperature': 0.0, 'avg_logprob': -0.1771030653090704, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.5566176772117615}, {'id': 179, 'seek': 116114, 'start': 1169.3400000000001, 'end': 1176.6200000000001, 'text': ' to 0. All of this information is available in the machine descriptor in some form which each one of', 'tokens': [50774, 281, 1958, 13, 1057, 295, 341, 1589, 307, 2435, 294, 264, 3479, 31280, 284, 294, 512, 1254, 597, 1184, 472, 295, 51138], 'temperature': 0.0, 'avg_logprob': -0.1771030653090704, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.5566176772117615}, {'id': 180, 'seek': 116114, 'start': 1176.6200000000001, 'end': 1182.3000000000002, 'text': ' these phases like the code generation phase or the register allocation phase or the instruction', 'tokens': [51138, 613, 18764, 411, 264, 3089, 5125, 5574, 420, 264, 7280, 27599, 5574, 420, 264, 10951, 51422], 'temperature': 0.0, 'avg_logprob': -0.1771030653090704, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.5566176772117615}, {'id': 181, 'seek': 116114, 'start': 1182.3000000000002, 'end': 1188.22, 'text': ' scheduling phase all of this remember this entire topic is machine dependent optimization.', 'tokens': [51422, 29055, 5574, 439, 295, 341, 1604, 341, 2302, 4829, 307, 3479, 12334, 19618, 13, 51718], 'temperature': 0.0, 'avg_logprob': -0.1771030653090704, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.5566176772117615}, {'id': 182, 'seek': 118822, 'start': 1188.9, 'end': 1195.14, 'text': ' So, everything we do is specific to the machine so that information about machine has to be read', 'tokens': [50398, 407, 11, 1203, 321, 360, 307, 2685, 281, 264, 3479, 370, 300, 1589, 466, 3479, 575, 281, 312, 1401, 50710], 'temperature': 0.0, 'avg_logprob': -0.14287442706880116, 'compression_ratio': 1.8932806324110671, 'no_speech_prob': 0.0905250534415245}, {'id': 183, 'seek': 118822, 'start': 1195.14, 'end': 1201.3, 'text': ' from somewhere in the case of GCC it is read from a place which is called the machine description', 'tokens': [50710, 490, 4079, 294, 264, 1389, 295, 460, 11717, 309, 307, 1401, 490, 257, 1081, 597, 307, 1219, 264, 3479, 3855, 51018], 'temperature': 0.0, 'avg_logprob': -0.14287442706880116, 'compression_ratio': 1.8932806324110671, 'no_speech_prob': 0.0905250534415245}, {'id': 184, 'seek': 118822, 'start': 1201.3, 'end': 1206.5, 'text': ' file in different compilers could have been called by different names but there is a place', 'tokens': [51018, 3991, 294, 819, 715, 388, 433, 727, 362, 668, 1219, 538, 819, 5288, 457, 456, 307, 257, 1081, 51278], 'temperature': 0.0, 'avg_logprob': -0.14287442706880116, 'compression_ratio': 1.8932806324110671, 'no_speech_prob': 0.0905250534415245}, {'id': 185, 'seek': 118822, 'start': 1206.5, 'end': 1211.6200000000001, 'text': ' from where it has to read this from it is not that the compiler is intelligent enough to probe', 'tokens': [51278, 490, 689, 309, 575, 281, 1401, 341, 490, 309, 307, 406, 300, 264, 31958, 307, 13232, 1547, 281, 22715, 51534], 'temperature': 0.0, 'avg_logprob': -0.14287442706880116, 'compression_ratio': 1.8932806324110671, 'no_speech_prob': 0.0905250534415245}, {'id': 186, 'seek': 118822, 'start': 1211.6200000000001, 'end': 1216.6200000000001, 'text': ' the processor to find out how many registers are there you specify that in the machine description', 'tokens': [51534, 264, 15321, 281, 915, 484, 577, 867, 38351, 366, 456, 291, 16500, 300, 294, 264, 3479, 3855, 51784], 'temperature': 0.0, 'avg_logprob': -0.14287442706880116, 'compression_ratio': 1.8932806324110671, 'no_speech_prob': 0.0905250534415245}, {'id': 187, 'seek': 121662, 'start': 1216.62, 'end': 1221.82, 'text': ' file right does that answer your question okay thanks for bringing up the point I thought that', 'tokens': [50364, 3991, 558, 775, 300, 1867, 428, 1168, 1392, 3231, 337, 5062, 493, 264, 935, 286, 1194, 300, 50624], 'temperature': 0.0, 'avg_logprob': -0.22283380171831915, 'compression_ratio': 1.8358778625954197, 'no_speech_prob': 0.01206000056117773}, {'id': 188, 'seek': 121662, 'start': 1222.4599999999998, 'end': 1228.3, 'text': ' people already knew about it I did not go into the details but it helped us to clarify okay.', 'tokens': [50656, 561, 1217, 2586, 466, 309, 286, 630, 406, 352, 666, 264, 4365, 457, 309, 4254, 505, 281, 17594, 1392, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.22283380171831915, 'compression_ratio': 1.8358778625954197, 'no_speech_prob': 0.01206000056117773}, {'id': 189, 'seek': 121662, 'start': 1228.3, 'end': 1235.02, 'text': ' Any more questions on that right so the description of the machine is given to the compiler particularly', 'tokens': [50948, 2639, 544, 1651, 322, 300, 558, 370, 264, 3855, 295, 264, 3479, 307, 2212, 281, 264, 31958, 4098, 51284], 'temperature': 0.0, 'avg_logprob': -0.22283380171831915, 'compression_ratio': 1.8358778625954197, 'no_speech_prob': 0.01206000056117773}, {'id': 190, 'seek': 121662, 'start': 1235.02, 'end': 1240.4199999999998, 'text': ' the backend of the compiler particularly to the machine dependent optimizations of the compiler', 'tokens': [51284, 264, 38087, 295, 264, 31958, 4098, 281, 264, 3479, 12334, 5028, 14455, 295, 264, 31958, 51554], 'temperature': 0.0, 'avg_logprob': -0.22283380171831915, 'compression_ratio': 1.8358778625954197, 'no_speech_prob': 0.01206000056117773}, {'id': 191, 'seek': 121662, 'start': 1240.4199999999998, 'end': 1246.54, 'text': ' right and based on that it actually generates a code. So, the machine description for x86 is', 'tokens': [51554, 558, 293, 2361, 322, 300, 309, 767, 23815, 257, 3089, 13, 407, 11, 264, 3479, 3855, 337, 2031, 22193, 307, 51860], 'temperature': 0.0, 'avg_logprob': -0.22283380171831915, 'compression_ratio': 1.8358778625954197, 'no_speech_prob': 0.01206000056117773}, {'id': 192, 'seek': 124654, 'start': 1246.54, 'end': 1251.18, 'text': ' going to be different from the machine description for risk 5 which is different from the machine', 'tokens': [50364, 516, 281, 312, 819, 490, 264, 3479, 3855, 337, 3148, 1025, 597, 307, 819, 490, 264, 3479, 50596], 'temperature': 0.0, 'avg_logprob': -0.1594770233352463, 'compression_ratio': 1.949748743718593, 'no_speech_prob': 0.0020658287685364485}, {'id': 193, 'seek': 124654, 'start': 1251.18, 'end': 1258.82, 'text': ' description for let us say power 9 or 10,000 or something right and the machine description', 'tokens': [50596, 3855, 337, 718, 505, 584, 1347, 1722, 420, 1266, 11, 1360, 420, 746, 558, 293, 264, 3479, 3855, 50978], 'temperature': 0.0, 'avg_logprob': -0.1594770233352463, 'compression_ratio': 1.949748743718593, 'no_speech_prob': 0.0020658287685364485}, {'id': 194, 'seek': 124654, 'start': 1258.82, 'end': 1266.1, 'text': ' has to specify all the constraints right machine description is the place where you specify what', 'tokens': [50978, 575, 281, 16500, 439, 264, 18491, 558, 3479, 3855, 307, 264, 1081, 689, 291, 16500, 437, 51342], 'temperature': 0.0, 'avg_logprob': -0.1594770233352463, 'compression_ratio': 1.949748743718593, 'no_speech_prob': 0.0020658287685364485}, {'id': 195, 'seek': 124654, 'start': 1266.1, 'end': 1272.5, 'text': ' format of instructions is allowed what of addressing modes are allowed everything has to be specified', 'tokens': [51342, 7877, 295, 9415, 307, 4350, 437, 295, 14329, 14068, 366, 4350, 1203, 575, 281, 312, 22206, 51662], 'temperature': 0.0, 'avg_logprob': -0.1594770233352463, 'compression_ratio': 1.949748743718593, 'no_speech_prob': 0.0020658287685364485}, {'id': 196, 'seek': 127250, 'start': 1272.5, 'end': 1278.86, 'text': ' there only right without which the code generator has no clue of generating code right forget about', 'tokens': [50364, 456, 787, 558, 1553, 597, 264, 3089, 19265, 575, 572, 13602, 295, 17746, 3089, 558, 2870, 466, 50682], 'temperature': 0.0, 'avg_logprob': -0.14533759929515697, 'compression_ratio': 1.9593908629441625, 'no_speech_prob': 0.2041182518005371}, {'id': 197, 'seek': 127250, 'start': 1278.86, 'end': 1286.9, 'text': ' register allocator even code generator cannot do anything up to here the front end and generating', 'tokens': [50682, 7280, 12660, 1639, 754, 3089, 19265, 2644, 360, 1340, 493, 281, 510, 264, 1868, 917, 293, 17746, 51084], 'temperature': 0.0, 'avg_logprob': -0.14533759929515697, 'compression_ratio': 1.9593908629441625, 'no_speech_prob': 0.2041182518005371}, {'id': 198, 'seek': 127250, 'start': 1286.9, 'end': 1293.82, 'text': ' the intermediate code you do not need to know anything about the machine right whereas this', 'tokens': [51084, 264, 19376, 3089, 291, 360, 406, 643, 281, 458, 1340, 466, 264, 3479, 558, 9735, 341, 51430], 'temperature': 0.0, 'avg_logprob': -0.14533759929515697, 'compression_ratio': 1.9593908629441625, 'no_speech_prob': 0.2041182518005371}, {'id': 199, 'seek': 127250, 'start': 1293.82, 'end': 1298.82, 'text': ' part there is a lot that you need to know about the machine in fact every one of the topics that', 'tokens': [51430, 644, 456, 307, 257, 688, 300, 291, 643, 281, 458, 466, 264, 3479, 294, 1186, 633, 472, 295, 264, 8378, 300, 51680], 'temperature': 0.0, 'avg_logprob': -0.14533759929515697, 'compression_ratio': 1.9593908629441625, 'no_speech_prob': 0.2041182518005371}, {'id': 200, 'seek': 129882, 'start': 1298.86, 'end': 1305.1799999999998, 'text': ' I am going to talk about right remember the title of my presentation is machine dependent', 'tokens': [50366, 286, 669, 516, 281, 751, 466, 558, 1604, 264, 4876, 295, 452, 5860, 307, 3479, 12334, 50682], 'temperature': 0.0, 'avg_logprob': -0.22332748468371405, 'compression_ratio': 1.6896551724137931, 'no_speech_prob': 0.20925873517990112}, {'id': 201, 'seek': 129882, 'start': 1305.1799999999998, 'end': 1310.74, 'text': ' optimization so dependent machine dependent everything has to be dependent on that so we', 'tokens': [50682, 19618, 370, 12334, 3479, 12334, 1203, 575, 281, 312, 12334, 322, 300, 370, 321, 50960], 'temperature': 0.0, 'avg_logprob': -0.22332748468371405, 'compression_ratio': 1.6896551724137931, 'no_speech_prob': 0.20925873517990112}, {'id': 202, 'seek': 129882, 'start': 1310.74, 'end': 1318.4199999999998, 'text': ' need to take those information from the machine description alright okay.', 'tokens': [50960, 643, 281, 747, 729, 1589, 490, 264, 3479, 3855, 5845, 1392, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.22332748468371405, 'compression_ratio': 1.6896551724137931, 'no_speech_prob': 0.20925873517990112}, {'id': 203, 'seek': 129882, 'start': 1318.4199999999998, 'end': 1325.62, 'text': ' So, let us move forward so let us quickly do this register allocation using usage accounts', 'tokens': [51344, 407, 11, 718, 505, 1286, 2128, 370, 718, 505, 2661, 360, 341, 7280, 27599, 1228, 14924, 9402, 51704], 'temperature': 0.0, 'avg_logprob': -0.22332748468371405, 'compression_ratio': 1.6896551724137931, 'no_speech_prob': 0.20925873517990112}, {'id': 204, 'seek': 132562, 'start': 1325.62, 'end': 1333.6599999999999, 'text': ' before the break right so here the idea is to okay before I talk about this particular method', 'tokens': [50364, 949, 264, 1821, 558, 370, 510, 264, 1558, 307, 281, 1392, 949, 286, 751, 466, 341, 1729, 3170, 50766], 'temperature': 0.0, 'avg_logprob': -0.15043871402740477, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.42761585116386414}, {'id': 205, 'seek': 132562, 'start': 1333.6599999999999, 'end': 1338.58, 'text': ' let us say what is the objective of doing register allocation why do we talk about it so much why', 'tokens': [50766, 718, 505, 584, 437, 307, 264, 10024, 295, 884, 7280, 27599, 983, 360, 321, 751, 466, 309, 370, 709, 983, 51012], 'temperature': 0.0, 'avg_logprob': -0.15043871402740477, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.42761585116386414}, {'id': 206, 'seek': 132562, 'start': 1338.58, 'end': 1343.62, 'text': ' cannot I just if my architecture allows things to be in memory why cannot I just take everything', 'tokens': [51012, 2644, 286, 445, 498, 452, 9482, 4045, 721, 281, 312, 294, 4675, 983, 2644, 286, 445, 747, 1203, 51264], 'temperature': 0.0, 'avg_logprob': -0.15043871402740477, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.42761585116386414}, {'id': 207, 'seek': 132562, 'start': 1343.62, 'end': 1352.3799999999999, 'text': ' from memory right that way I can completely eliminate the register allocation exactly right', 'tokens': [51264, 490, 4675, 558, 300, 636, 286, 393, 2584, 13819, 264, 7280, 27599, 2293, 558, 51702], 'temperature': 0.0, 'avg_logprob': -0.15043871402740477, 'compression_ratio': 1.8095238095238095, 'no_speech_prob': 0.42761585116386414}, {'id': 208, 'seek': 135238, 'start': 1352.38, 'end': 1358.5, 'text': ' so the access time of memory is going to be much more compared to the access time of registers so', 'tokens': [50364, 370, 264, 2105, 565, 295, 4675, 307, 516, 281, 312, 709, 544, 5347, 281, 264, 2105, 565, 295, 38351, 370, 50670], 'temperature': 0.0, 'avg_logprob': -0.11019911549308083, 'compression_ratio': 2.0473684210526315, 'no_speech_prob': 0.20042410492897034}, {'id': 209, 'seek': 135238, 'start': 1358.5, 'end': 1365.0600000000002, 'text': ' what should be the idea you should be able to put as many variables as possible in the registers', 'tokens': [50670, 437, 820, 312, 264, 1558, 291, 820, 312, 1075, 281, 829, 382, 867, 9102, 382, 1944, 294, 264, 38351, 50998], 'temperature': 0.0, 'avg_logprob': -0.11019911549308083, 'compression_ratio': 2.0473684210526315, 'no_speech_prob': 0.20042410492897034}, {'id': 210, 'seek': 135238, 'start': 1365.0600000000002, 'end': 1372.5400000000002, 'text': ' and which variable do you actually put it into the registers the ones which are being used more', 'tokens': [50998, 293, 597, 7006, 360, 291, 767, 829, 309, 666, 264, 38351, 264, 2306, 597, 366, 885, 1143, 544, 51372], 'temperature': 0.0, 'avg_logprob': -0.11019911549308083, 'compression_ratio': 2.0473684210526315, 'no_speech_prob': 0.20042410492897034}, {'id': 211, 'seek': 135238, 'start': 1372.5400000000002, 'end': 1379.3400000000001, 'text': ' often right and when you say the ones which are being used more often is it in the code the number', 'tokens': [51372, 2049, 558, 293, 562, 291, 584, 264, 2306, 597, 366, 885, 1143, 544, 2049, 307, 309, 294, 264, 3089, 264, 1230, 51712], 'temperature': 0.0, 'avg_logprob': -0.11019911549308083, 'compression_ratio': 2.0473684210526315, 'no_speech_prob': 0.20042410492897034}, {'id': 212, 'seek': 137934, 'start': 1379.34, 'end': 1390.1799999999998, 'text': ' of times that they appear so for example here in this code S2 appears three times right of course', 'tokens': [50364, 295, 1413, 300, 436, 4204, 370, 337, 1365, 510, 294, 341, 3089, 318, 17, 7038, 1045, 1413, 558, 295, 1164, 50906], 'temperature': 0.0, 'avg_logprob': -0.19142202017963797, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.12903143465518951}, {'id': 213, 'seek': 137934, 'start': 1390.1799999999998, 'end': 1395.26, 'text': ' this is a basic block so really should not have mattered but let us look at it so do you count', 'tokens': [50906, 341, 307, 257, 3875, 3461, 370, 534, 820, 406, 362, 44282, 457, 718, 505, 574, 412, 309, 370, 360, 291, 1207, 51160], 'temperature': 0.0, 'avg_logprob': -0.19142202017963797, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.12903143465518951}, {'id': 214, 'seek': 137934, 'start': 1395.26, 'end': 1401.5, 'text': ' this as three times or do you look at whether this basic block is enclosed in a loop right and', 'tokens': [51160, 341, 382, 1045, 1413, 420, 360, 291, 574, 412, 1968, 341, 3875, 3461, 307, 42089, 294, 257, 6367, 558, 293, 51472], 'temperature': 0.0, 'avg_logprob': -0.19142202017963797, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.12903143465518951}, {'id': 215, 'seek': 140150, 'start': 1402.5, 'end': 1409.02, 'text': ' that loop might be executed hundred times as opposed to some other variables which are not', 'tokens': [50414, 300, 6367, 1062, 312, 17577, 3262, 1413, 382, 8851, 281, 512, 661, 9102, 597, 366, 406, 50740], 'temperature': 0.0, 'avg_logprob': -0.12057698193718405, 'compression_ratio': 1.7877358490566038, 'no_speech_prob': 0.07810942828655243}, {'id': 216, 'seek': 140150, 'start': 1409.02, 'end': 1416.66, 'text': ' inside that basic block or whatever right okay so we will come back to this point as soon as', 'tokens': [50740, 1854, 300, 3875, 3461, 420, 2035, 558, 1392, 370, 321, 486, 808, 646, 281, 341, 935, 382, 2321, 382, 51122], 'temperature': 0.0, 'avg_logprob': -0.12057698193718405, 'compression_ratio': 1.7877358490566038, 'no_speech_prob': 0.07810942828655243}, {'id': 217, 'seek': 140150, 'start': 1416.66, 'end': 1423.06, 'text': ' I give this example then you will realize this right so what we want to do is that we want to', 'tokens': [51122, 286, 976, 341, 1365, 550, 291, 486, 4325, 341, 558, 370, 437, 321, 528, 281, 360, 307, 300, 321, 528, 281, 51442], 'temperature': 0.0, 'avg_logprob': -0.12057698193718405, 'compression_ratio': 1.7877358490566038, 'no_speech_prob': 0.07810942828655243}, {'id': 218, 'seek': 140150, 'start': 1423.06, 'end': 1430.66, 'text': ' use these registers for variables which are being used more often right that what is how do we define', 'tokens': [51442, 764, 613, 38351, 337, 9102, 597, 366, 885, 1143, 544, 2049, 558, 300, 437, 307, 577, 360, 321, 6964, 51822], 'temperature': 0.0, 'avg_logprob': -0.12057698193718405, 'compression_ratio': 1.7877358490566038, 'no_speech_prob': 0.07810942828655243}, {'id': 219, 'seek': 143066, 'start': 1430.66, 'end': 1437.42, 'text': ' how to get this count we will get it to that point little later okay of course we can use', 'tokens': [50364, 577, 281, 483, 341, 1207, 321, 486, 483, 309, 281, 300, 935, 707, 1780, 1392, 295, 1164, 321, 393, 764, 50702], 'temperature': 0.0, 'avg_logprob': -0.14652444067455472, 'compression_ratio': 1.766355140186916, 'no_speech_prob': 0.006323534529656172}, {'id': 220, 'seek': 143066, 'start': 1437.42, 'end': 1444.18, 'text': ' the same register for multiple variables as long as they do not overlap let us take this example', 'tokens': [50702, 264, 912, 7280, 337, 3866, 9102, 382, 938, 382, 436, 360, 406, 19959, 718, 505, 747, 341, 1365, 51040], 'temperature': 0.0, 'avg_logprob': -0.14652444067455472, 'compression_ratio': 1.766355140186916, 'no_speech_prob': 0.006323534529656172}, {'id': 221, 'seek': 143066, 'start': 1444.18, 'end': 1449.74, 'text': ' right and for the purpose of discussion I have taken the high level code although I should have', 'tokens': [51040, 558, 293, 337, 264, 4334, 295, 5017, 286, 362, 2726, 264, 1090, 1496, 3089, 4878, 286, 820, 362, 51318], 'temperature': 0.0, 'avg_logprob': -0.14652444067455472, 'compression_ratio': 1.766355140186916, 'no_speech_prob': 0.006323534529656172}, {'id': 222, 'seek': 143066, 'start': 1449.74, 'end': 1456.3400000000001, 'text': ' taken the intermediate code or the machine code of this the machine code is difficult for us to', 'tokens': [51318, 2726, 264, 19376, 3089, 420, 264, 3479, 3089, 295, 341, 264, 3479, 3089, 307, 2252, 337, 505, 281, 51648], 'temperature': 0.0, 'avg_logprob': -0.14652444067455472, 'compression_ratio': 1.766355140186916, 'no_speech_prob': 0.006323534529656172}, {'id': 223, 'seek': 145634, 'start': 1456.34, 'end': 1461.58, 'text': ' read and understand it also involves a lot of instruction so let us look at this particular', 'tokens': [50364, 1401, 293, 1223, 309, 611, 11626, 257, 688, 295, 10951, 370, 718, 505, 574, 412, 341, 1729, 50626], 'temperature': 0.0, 'avg_logprob': -0.12183948842490591, 'compression_ratio': 1.82, 'no_speech_prob': 0.18948104977607727}, {'id': 224, 'seek': 145634, 'start': 1461.58, 'end': 1468.1, 'text': ' code right this is the control flow graph for this right and let us say that we want to do', 'tokens': [50626, 3089, 558, 341, 307, 264, 1969, 3095, 4295, 337, 341, 558, 293, 718, 505, 584, 300, 321, 528, 281, 360, 50952], 'temperature': 0.0, 'avg_logprob': -0.12183948842490591, 'compression_ratio': 1.82, 'no_speech_prob': 0.18948104977607727}, {'id': 225, 'seek': 145634, 'start': 1468.1, 'end': 1475.3, 'text': ' register allocation for this entire function right all right now this is what I was asking', 'tokens': [50952, 7280, 27599, 337, 341, 2302, 2445, 558, 439, 558, 586, 341, 307, 437, 286, 390, 3365, 51312], 'temperature': 0.0, 'avg_logprob': -0.12183948842490591, 'compression_ratio': 1.82, 'no_speech_prob': 0.18948104977607727}, {'id': 226, 'seek': 145634, 'start': 1475.3, 'end': 1484.54, 'text': ' let us look at the variable sum right sum is defined in this position sum is used here sum', 'tokens': [51312, 718, 505, 574, 412, 264, 7006, 2408, 558, 2408, 307, 7642, 294, 341, 2535, 2408, 307, 1143, 510, 2408, 51774], 'temperature': 0.0, 'avg_logprob': -0.12183948842490591, 'compression_ratio': 1.82, 'no_speech_prob': 0.18948104977607727}, {'id': 227, 'seek': 148454, 'start': 1484.54, 'end': 1492.78, 'text': ' is also used in these locations right so if I look at sum the number of definitions right if', 'tokens': [50364, 307, 611, 1143, 294, 613, 9253, 558, 370, 498, 286, 574, 412, 2408, 264, 1230, 295, 21988, 558, 498, 50776], 'temperature': 0.0, 'avg_logprob': -0.11789936489529079, 'compression_ratio': 1.7548387096774194, 'no_speech_prob': 0.019275669008493423}, {'id': 228, 'seek': 148454, 'start': 1492.78, 'end': 1500.74, 'text': ' I look at this as one one more right but then you know that is not really true sum is being', 'tokens': [50776, 286, 574, 412, 341, 382, 472, 472, 544, 558, 457, 550, 291, 458, 300, 307, 406, 534, 2074, 2408, 307, 885, 51174], 'temperature': 0.0, 'avg_logprob': -0.11789936489529079, 'compression_ratio': 1.7548387096774194, 'no_speech_prob': 0.019275669008493423}, {'id': 229, 'seek': 148454, 'start': 1500.74, 'end': 1506.62, 'text': ' used in this loop repeatedly right that means that whenever I take this definition this', 'tokens': [51174, 1143, 294, 341, 6367, 18227, 558, 300, 1355, 300, 5699, 286, 747, 341, 7123, 341, 51468], 'temperature': 0.0, 'avg_logprob': -0.11789936489529079, 'compression_ratio': 1.7548387096774194, 'no_speech_prob': 0.019275669008493423}, {'id': 230, 'seek': 150662, 'start': 1506.62, 'end': 1514.2199999999998, 'text': ' definition is actually hundred times not just once right so this will be hundred times plus', 'tokens': [50364, 7123, 307, 767, 3262, 1413, 406, 445, 1564, 558, 370, 341, 486, 312, 3262, 1413, 1804, 50744], 'temperature': 0.0, 'avg_logprob': -0.21729639709972945, 'compression_ratio': 1.880794701986755, 'no_speech_prob': 0.1665952354669571}, {'id': 231, 'seek': 150662, 'start': 1514.2199999999998, 'end': 1521.1, 'text': " once here and right a hundred times plus once there so it's basically 101 definitions how many", 'tokens': [50744, 1564, 510, 293, 558, 257, 3262, 1413, 1804, 1564, 456, 370, 309, 311, 1936, 21055, 21988, 577, 867, 51088], 'temperature': 0.0, 'avg_logprob': -0.21729639709972945, 'compression_ratio': 1.880794701986755, 'no_speech_prob': 0.1665952354669571}, {'id': 232, 'seek': 150662, 'start': 1521.1, 'end': 1532.7399999999998, 'text': ' uses of sum one here right which corresponds to hundred uses plus one here plus one more here now', 'tokens': [51088, 4960, 295, 2408, 472, 510, 558, 597, 23249, 281, 3262, 4960, 1804, 472, 510, 1804, 472, 544, 510, 586, 51670], 'temperature': 0.0, 'avg_logprob': -0.21729639709972945, 'compression_ratio': 1.880794701986755, 'no_speech_prob': 0.1665952354669571}, {'id': 233, 'seek': 153274, 'start': 1532.74, 'end': 1539.9, 'text': " let's talk about this static versus dynamic counts right that's very important now if I look at the", 'tokens': [50364, 718, 311, 751, 466, 341, 13437, 5717, 8546, 14893, 558, 300, 311, 588, 1021, 586, 498, 286, 574, 412, 264, 50722], 'temperature': 0.0, 'avg_logprob': -0.13024845123291015, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.006953298579901457}, {'id': 234, 'seek': 153274, 'start': 1539.9, 'end': 1547.06, 'text': ' variable sum how many times does it appear in this program forget about def and use we combine', 'tokens': [50722, 7006, 2408, 577, 867, 1413, 775, 309, 4204, 294, 341, 1461, 2870, 466, 1060, 293, 764, 321, 10432, 51080], 'temperature': 0.0, 'avg_logprob': -0.13024845123291015, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.006953298579901457}, {'id': 235, 'seek': 153274, 'start': 1547.06, 'end': 1558.06, 'text': ' them together how many times one two three four five six right this is a static count right this', 'tokens': [51080, 552, 1214, 577, 867, 1413, 472, 732, 1045, 1451, 1732, 2309, 558, 341, 307, 257, 13437, 1207, 558, 341, 51630], 'temperature': 0.0, 'avg_logprob': -0.13024845123291015, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.006953298579901457}, {'id': 236, 'seek': 155806, 'start': 1558.06, 'end': 1564.1, 'text': " is what we call as the static count right because that's a number of times it appears in the code", 'tokens': [50364, 307, 437, 321, 818, 382, 264, 13437, 1207, 558, 570, 300, 311, 257, 1230, 295, 1413, 309, 7038, 294, 264, 3089, 50666], 'temperature': 0.0, 'avg_logprob': -0.13845068000885377, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.026149580255150795}, {'id': 237, 'seek': 155806, 'start': 1564.1, 'end': 1569.82, 'text': " what is the dynamic count of the usage of sum right that's what we discussed earlier hundred", 'tokens': [50666, 437, 307, 264, 8546, 1207, 295, 264, 14924, 295, 2408, 558, 300, 311, 437, 321, 7152, 3071, 3262, 50952], 'temperature': 0.0, 'avg_logprob': -0.13845068000885377, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.026149580255150795}, {'id': 238, 'seek': 155806, 'start': 1569.82, 'end': 1579.58, 'text': ' plus hundred two hundred two hundred and one two three four right all right so that is the dynamic', 'tokens': [50952, 1804, 3262, 732, 3262, 732, 3262, 293, 472, 732, 1045, 1451, 558, 439, 558, 370, 300, 307, 264, 8546, 51440], 'temperature': 0.0, 'avg_logprob': -0.13845068000885377, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.026149580255150795}, {'id': 239, 'seek': 155806, 'start': 1579.58, 'end': 1587.3, 'text': ' count since you are talking about cost saving in accessing the variable from register versus', 'tokens': [51440, 1207, 1670, 291, 366, 1417, 466, 2063, 6816, 294, 26440, 264, 7006, 490, 7280, 5717, 51826], 'temperature': 0.0, 'avg_logprob': -0.13845068000885377, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.026149580255150795}, {'id': 240, 'seek': 158730, 'start': 1587.3, 'end': 1593.1399999999999, 'text': ' cost saving in accessing the variable from memory should we worry about dynamic count or', 'tokens': [50364, 2063, 6816, 294, 26440, 264, 7006, 490, 4675, 820, 321, 3292, 466, 8546, 1207, 420, 50656], 'temperature': 0.0, 'avg_logprob': -0.13093496077131517, 'compression_ratio': 1.9112903225806452, 'no_speech_prob': 0.017680574208498}, {'id': 241, 'seek': 158730, 'start': 1593.1399999999999, 'end': 1598.5, 'text': ' should we worry about static count dynamic count no doubt about it right because this is when the', 'tokens': [50656, 820, 321, 3292, 466, 13437, 1207, 8546, 1207, 572, 6385, 466, 309, 558, 570, 341, 307, 562, 264, 50924], 'temperature': 0.0, 'avg_logprob': -0.13093496077131517, 'compression_ratio': 1.9112903225806452, 'no_speech_prob': 0.017680574208498}, {'id': 242, 'seek': 158730, 'start': 1598.5, 'end': 1605.18, 'text': ' program is being executed correct the more often a particular loop is executed the more benefit you', 'tokens': [50924, 1461, 307, 885, 17577, 3006, 264, 544, 2049, 257, 1729, 6367, 307, 17577, 264, 544, 5121, 291, 51258], 'temperature': 0.0, 'avg_logprob': -0.13093496077131517, 'compression_ratio': 1.9112903225806452, 'no_speech_prob': 0.017680574208498}, {'id': 243, 'seek': 158730, 'start': 1605.18, 'end': 1611.22, 'text': ' are going to get by putting that register into that if I ask you the question right should C be', 'tokens': [51258, 366, 516, 281, 483, 538, 3372, 300, 7280, 666, 300, 498, 286, 1029, 291, 264, 1168, 558, 820, 383, 312, 51560], 'temperature': 0.0, 'avg_logprob': -0.13093496077131517, 'compression_ratio': 1.9112903225806452, 'no_speech_prob': 0.017680574208498}, {'id': 244, 'seek': 158730, 'start': 1611.22, 'end': 1616.5, 'text': ' in a register or should sum be in a register answer is obvious right C is never used within', 'tokens': [51560, 294, 257, 7280, 420, 820, 2408, 312, 294, 257, 7280, 1867, 307, 6322, 558, 383, 307, 1128, 1143, 1951, 51824], 'temperature': 0.0, 'avg_logprob': -0.13093496077131517, 'compression_ratio': 1.9112903225806452, 'no_speech_prob': 0.017680574208498}, {'id': 245, 'seek': 161650, 'start': 1616.5, 'end': 1623.34, 'text': " the loop so don't worry about giving it a register right so so that is why when we talk about this", 'tokens': [50364, 264, 6367, 370, 500, 380, 3292, 466, 2902, 309, 257, 7280, 558, 370, 370, 300, 307, 983, 562, 321, 751, 466, 341, 50706], 'temperature': 0.0, 'avg_logprob': -0.12060791254043579, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.02139323018491268}, {'id': 246, 'seek': 161650, 'start': 1623.34, 'end': 1629.34, 'text': ' usage we are always talking about the so-called dynamic count how many times it being accessed', 'tokens': [50706, 14924, 321, 366, 1009, 1417, 466, 264, 370, 12, 11880, 8546, 1207, 577, 867, 1413, 309, 885, 34211, 51006], 'temperature': 0.0, 'avg_logprob': -0.12060791254043579, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.02139323018491268}, {'id': 247, 'seek': 161650, 'start': 1629.34, 'end': 1635.58, 'text': " in the program we may not have this count as hundred but we'll have this count as n or whatever", 'tokens': [51006, 294, 264, 1461, 321, 815, 406, 362, 341, 1207, 382, 3262, 457, 321, 603, 362, 341, 1207, 382, 297, 420, 2035, 51318], 'temperature': 0.0, 'avg_logprob': -0.12060791254043579, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.02139323018491268}, {'id': 248, 'seek': 161650, 'start': 1635.58, 'end': 1640.62, 'text': " it is and we can actually deal with that that's actually good enough for us right and we know", 'tokens': [51318, 309, 307, 293, 321, 393, 767, 2028, 365, 300, 300, 311, 767, 665, 1547, 337, 505, 558, 293, 321, 458, 51570], 'temperature': 0.0, 'avg_logprob': -0.12060791254043579, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.02139323018491268}, {'id': 249, 'seek': 161650, 'start': 1640.62, 'end': 1645.54, 'text': ' that in some cases these loops are going to be executed more than ten times or more than hundred', 'tokens': [51570, 300, 294, 512, 3331, 613, 16121, 366, 516, 281, 312, 17577, 544, 813, 2064, 1413, 420, 544, 813, 3262, 51816], 'temperature': 0.0, 'avg_logprob': -0.12060791254043579, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.02139323018491268}, {'id': 250, 'seek': 164554, 'start': 1645.54, 'end': 1650.8999999999999, 'text': " times that's actually good enough approximation for us you don't have to necessarily know the", 'tokens': [50364, 1413, 300, 311, 767, 665, 1547, 28023, 337, 505, 291, 500, 380, 362, 281, 4725, 458, 264, 50632], 'temperature': 0.0, 'avg_logprob': -0.16336164241883813, 'compression_ratio': 1.676991150442478, 'no_speech_prob': 0.0035230570938438177}, {'id': 251, 'seek': 164554, 'start': 1650.8999999999999, 'end': 1659.02, 'text': ' exact number okay so after having done this what we really find is that right both sum and i are', 'tokens': [50632, 1900, 1230, 1392, 370, 934, 1419, 1096, 341, 437, 321, 534, 915, 307, 300, 558, 1293, 2408, 293, 741, 366, 51038], 'temperature': 0.0, 'avg_logprob': -0.16336164241883813, 'compression_ratio': 1.676991150442478, 'no_speech_prob': 0.0035230570938438177}, {'id': 252, 'seek': 164554, 'start': 1659.02, 'end': 1666.7, 'text': ' used more number of times than corresponding to C and square right therefore if you have only', 'tokens': [51038, 1143, 544, 1230, 295, 1413, 813, 11760, 281, 383, 293, 3732, 558, 4412, 498, 291, 362, 787, 51422], 'temperature': 0.0, 'avg_logprob': -0.16336164241883813, 'compression_ratio': 1.676991150442478, 'no_speech_prob': 0.0035230570938438177}, {'id': 253, 'seek': 164554, 'start': 1666.7, 'end': 1674.02, 'text': ' two registers available to you then they should be allocated to sum and square sorry sum and i', 'tokens': [51422, 732, 38351, 2435, 281, 291, 550, 436, 820, 312, 29772, 281, 2408, 293, 3732, 2597, 2408, 293, 741, 51788], 'temperature': 0.0, 'avg_logprob': -0.16336164241883813, 'compression_ratio': 1.676991150442478, 'no_speech_prob': 0.0035230570938438177}, {'id': 254, 'seek': 167402, 'start': 1674.9, 'end': 1680.34, 'text': ' particularly within this loop those two registers should be assigned to sum and i outside the loop', 'tokens': [50408, 4098, 1951, 341, 6367, 729, 732, 38351, 820, 312, 13279, 281, 2408, 293, 741, 2380, 264, 6367, 50680], 'temperature': 0.0, 'avg_logprob': -0.12205419983974723, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.020620474591851234}, {'id': 255, 'seek': 167402, 'start': 1680.34, 'end': 1686.1399999999999, 'text': " you may not necessarily worry too much but within the loop if you don't allocate registers for this", 'tokens': [50680, 291, 815, 406, 4725, 3292, 886, 709, 457, 1951, 264, 6367, 498, 291, 500, 380, 35713, 38351, 337, 341, 50970], 'temperature': 0.0, 'avg_logprob': -0.12205419983974723, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.020620474591851234}, {'id': 256, 'seek': 167402, 'start': 1686.1399999999999, 'end': 1692.46, 'text': " they are going to end up coming from memory and that's not a good thing for the program right so", 'tokens': [50970, 436, 366, 516, 281, 917, 493, 1348, 490, 4675, 293, 300, 311, 406, 257, 665, 551, 337, 264, 1461, 558, 370, 51286], 'temperature': 0.0, 'avg_logprob': -0.12205419983974723, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.020620474591851234}, {'id': 257, 'seek': 167402, 'start': 1692.46, 'end': 1700.7, 'text': ' we also know right that we can also reuse the same register right for another variable if their live', 'tokens': [51286, 321, 611, 458, 558, 300, 321, 393, 611, 26225, 264, 912, 7280, 558, 337, 1071, 7006, 498, 641, 1621, 51698], 'temperature': 0.0, 'avg_logprob': -0.12205419983974723, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.020620474591851234}, {'id': 258, 'seek': 170070, 'start': 1700.7, 'end': 1709.8600000000001, 'text': ' ranges do not overlap so we can see that square and i do not overlap because when square is defined', 'tokens': [50364, 22526, 360, 406, 19959, 370, 321, 393, 536, 300, 3732, 293, 741, 360, 406, 19959, 570, 562, 3732, 307, 7642, 50822], 'temperature': 0.0, 'avg_logprob': -0.13100194931030273, 'compression_ratio': 1.6954022988505748, 'no_speech_prob': 0.19000563025474548}, {'id': 259, 'seek': 170070, 'start': 1709.8600000000001, 'end': 1717.94, 'text': ' the last use of i is already over correct so if i can use the same register which was given to i', 'tokens': [50822, 264, 1036, 764, 295, 741, 307, 1217, 670, 3006, 370, 498, 741, 393, 764, 264, 912, 7280, 597, 390, 2212, 281, 741, 51226], 'temperature': 0.0, 'avg_logprob': -0.13100194931030273, 'compression_ratio': 1.6954022988505748, 'no_speech_prob': 0.19000563025474548}, {'id': 260, 'seek': 170070, 'start': 1717.94, 'end': 1726.22, 'text': " also to square right i could have i could also save that cost even though it's only appearing once", 'tokens': [51226, 611, 281, 3732, 558, 741, 727, 362, 741, 727, 611, 3155, 300, 2063, 754, 1673, 309, 311, 787, 19870, 1564, 51640], 'temperature': 0.0, 'avg_logprob': -0.13100194931030273, 'compression_ratio': 1.6954022988505748, 'no_speech_prob': 0.19000563025474548}, {'id': 261, 'seek': 172622, 'start': 1726.22, 'end': 1734.98, 'text': ' okay now what about C can i use either one of these register or could i have used this', 'tokens': [50364, 1392, 586, 437, 466, 383, 393, 741, 764, 2139, 472, 295, 613, 7280, 420, 727, 741, 362, 1143, 341, 50802], 'temperature': 0.0, 'avg_logprob': -0.1674569796209466, 'compression_ratio': 1.6306818181818181, 'no_speech_prob': 0.02374492771923542}, {'id': 262, 'seek': 172622, 'start': 1734.98, 'end': 1743.6200000000001, 'text': ' register which was allocated to i to C no because C is defined here and the last use of C is over', 'tokens': [50802, 7280, 597, 390, 29772, 281, 741, 281, 383, 572, 570, 383, 307, 7642, 510, 293, 264, 1036, 764, 295, 383, 307, 670, 51234], 'temperature': 0.0, 'avg_logprob': -0.1674569796209466, 'compression_ratio': 1.6306818181818181, 'no_speech_prob': 0.02374492771923542}, {'id': 263, 'seek': 172622, 'start': 1743.6200000000001, 'end': 1752.38, 'text': " here which overlaps with i's live range so i cannot be used right so what we can do in this example is", 'tokens': [51234, 510, 597, 15986, 2382, 365, 741, 311, 1621, 3613, 370, 741, 2644, 312, 1143, 558, 370, 437, 321, 393, 360, 294, 341, 1365, 307, 51672], 'temperature': 0.0, 'avg_logprob': -0.1674569796209466, 'compression_ratio': 1.6306818181818181, 'no_speech_prob': 0.02374492771923542}, {'id': 264, 'seek': 175238, 'start': 1752.38, 'end': 1760.98, 'text': " that if you have two registers assign one to sum and another to i and then later to square so that's", 'tokens': [50364, 300, 498, 291, 362, 732, 38351, 6269, 472, 281, 2408, 293, 1071, 281, 741, 293, 550, 1780, 281, 3732, 370, 300, 311, 50794], 'temperature': 0.0, 'avg_logprob': -0.15775574309916435, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.11159808933734894}, {'id': 265, 'seek': 175238, 'start': 1760.98, 'end': 1767.22, 'text': ' the kind of allocation so any usage based allocator is essentially going to do things at this level', 'tokens': [50794, 264, 733, 295, 27599, 370, 604, 14924, 2361, 12660, 1639, 307, 4476, 516, 281, 360, 721, 412, 341, 1496, 51106], 'temperature': 0.0, 'avg_logprob': -0.15775574309916435, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.11159808933734894}, {'id': 266, 'seek': 175238, 'start': 1767.22, 'end': 1775.22, 'text': ' right and this is not going to be very efficient we have better methods of doing this so we will', 'tokens': [51106, 558, 293, 341, 307, 406, 516, 281, 312, 588, 7148, 321, 362, 1101, 7150, 295, 884, 341, 370, 321, 486, 51506], 'temperature': 0.0, 'avg_logprob': -0.15775574309916435, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.11159808933734894}, {'id': 267, 'seek': 175238, 'start': 1775.22, 'end': 1778.74, 'text': ' talk about the graph coloring based approach next.', 'tokens': [51506, 751, 466, 264, 4295, 23198, 2361, 3109, 958, 13, 51682], 'temperature': 0.0, 'avg_logprob': -0.15775574309916435, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.11159808933734894}]