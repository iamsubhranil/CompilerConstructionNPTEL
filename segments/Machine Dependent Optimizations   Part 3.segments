[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 13.200000000000001, 'text': ' Okay, so what we saw in the morning was a simple code generation scheme and as I said', 'tokens': [50364, 1033, 11, 370, 437, 321, 1866, 294, 264, 2446, 390, 257, 2199, 3089, 5125, 12232, 293, 382, 286, 848, 51024], 'temperature': 0.0, 'avg_logprob': -0.23115405440330505, 'compression_ratio': 1.670807453416149, 'no_speech_prob': 0.069422647356987}, {'id': 1, 'seek': 0, 'start': 13.200000000000001, 'end': 18.52, 'text': ' in the morning what we are going to now see is a more sophisticated code generation scheme', 'tokens': [51024, 294, 264, 2446, 437, 321, 366, 516, 281, 586, 536, 307, 257, 544, 16950, 3089, 5125, 12232, 51290], 'temperature': 0.0, 'avg_logprob': -0.23115405440330505, 'compression_ratio': 1.670807453416149, 'no_speech_prob': 0.069422647356987}, {'id': 2, 'seek': 0, 'start': 18.52, 'end': 24.28, 'text': ' that is by constructing the directed acyclic graph for a basic bra and then from that trying', 'tokens': [51290, 300, 307, 538, 39969, 264, 12898, 696, 88, 66, 1050, 4295, 337, 257, 3875, 1548, 293, 550, 490, 300, 1382, 51578], 'temperature': 0.0, 'avg_logprob': -0.23115405440330505, 'compression_ratio': 1.670807453416149, 'no_speech_prob': 0.069422647356987}, {'id': 3, 'seek': 2428, 'start': 24.28, 'end': 32.56, 'text': ' to generate code. Okay, so the reason why the simple code generator was not efficient', 'tokens': [50364, 281, 8460, 3089, 13, 1033, 11, 370, 264, 1778, 983, 264, 2199, 3089, 19265, 390, 406, 7148, 50778], 'temperature': 0.0, 'avg_logprob': -0.2374324571518671, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.35327211022377014}, {'id': 4, 'seek': 2428, 'start': 32.56, 'end': 38.68, 'text': ' is that it has no big picture, right. It has no idea of how, what are the variables which', 'tokens': [50778, 307, 300, 309, 575, 572, 955, 3036, 11, 558, 13, 467, 575, 572, 1558, 295, 577, 11, 437, 366, 264, 9102, 597, 51084], 'temperature': 0.0, 'avg_logprob': -0.2374324571518671, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.35327211022377014}, {'id': 5, 'seek': 2428, 'start': 38.68, 'end': 44.400000000000006, 'text': ' are going to be used in subsequent statements, right and other things. Okay, and even simple', 'tokens': [51084, 366, 516, 281, 312, 1143, 294, 19962, 12363, 11, 558, 293, 661, 721, 13, 1033, 11, 293, 754, 2199, 51370], 'temperature': 0.0, 'avg_logprob': -0.2374324571518671, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.35327211022377014}, {'id': 6, 'seek': 2428, 'start': 44.400000000000006, 'end': 50.68000000000001, 'text': ' optimizations like common sub-expression elimination which sometimes is required in the generated', 'tokens': [51370, 5028, 14455, 411, 2689, 1422, 12, 15952, 2775, 29224, 597, 2171, 307, 4739, 294, 264, 10833, 51684], 'temperature': 0.0, 'avg_logprob': -0.2374324571518671, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.35327211022377014}, {'id': 7, 'seek': 5068, 'start': 50.68, 'end': 55.92, 'text': ' code, it does not have any knowledge of that to do that. That is because it is considering', 'tokens': [50364, 3089, 11, 309, 775, 406, 362, 604, 3601, 295, 300, 281, 360, 300, 13, 663, 307, 570, 309, 307, 8079, 50626], 'temperature': 0.0, 'avg_logprob': -0.14740687403185615, 'compression_ratio': 1.6053811659192825, 'no_speech_prob': 0.04951382800936699}, {'id': 8, 'seek': 5068, 'start': 55.92, 'end': 62.519999999999996, 'text': ' one intermediate statement at a point in time. Okay, and the order of evaluation of expression', 'tokens': [50626, 472, 19376, 5629, 412, 257, 935, 294, 565, 13, 1033, 11, 293, 264, 1668, 295, 13344, 295, 6114, 50956], 'temperature': 0.0, 'avg_logprob': -0.14740687403185615, 'compression_ratio': 1.6053811659192825, 'no_speech_prob': 0.04951382800936699}, {'id': 9, 'seek': 5068, 'start': 62.519999999999996, 'end': 68.68, 'text': ' again may change the cost and it does not really take that also into account. So, let', 'tokens': [50956, 797, 815, 1319, 264, 2063, 293, 309, 775, 406, 534, 747, 300, 611, 666, 2696, 13, 407, 11, 718, 51264], 'temperature': 0.0, 'avg_logprob': -0.14740687403185615, 'compression_ratio': 1.6053811659192825, 'no_speech_prob': 0.04951382800936699}, {'id': 10, 'seek': 5068, 'start': 68.68, 'end': 77.16, 'text': ' us see how we can form code generation by constructing a directed acyclic graph. Okay,', 'tokens': [51264, 505, 536, 577, 321, 393, 1254, 3089, 5125, 538, 39969, 257, 12898, 696, 88, 66, 1050, 4295, 13, 1033, 11, 51688], 'temperature': 0.0, 'avg_logprob': -0.14740687403185615, 'compression_ratio': 1.6053811659192825, 'no_speech_prob': 0.04951382800936699}, {'id': 11, 'seek': 7716, 'start': 77.16, 'end': 82.67999999999999, 'text': ' so if you look at a basic block, the basic block has a sequence of statements and these', 'tokens': [50364, 370, 498, 291, 574, 412, 257, 3875, 3461, 11, 264, 3875, 3461, 575, 257, 8310, 295, 12363, 293, 613, 50640], 'temperature': 0.0, 'avg_logprob': -0.22728975536753832, 'compression_ratio': 1.8401639344262295, 'no_speech_prob': 0.024320073425769806}, {'id': 12, 'seek': 7716, 'start': 82.67999999999999, 'end': 87.08, 'text': ' sequence of statements for these sequence of statements again we are talking about statements', 'tokens': [50640, 8310, 295, 12363, 337, 613, 8310, 295, 12363, 797, 321, 366, 1417, 466, 12363, 50860], 'temperature': 0.0, 'avg_logprob': -0.22728975536753832, 'compression_ratio': 1.8401639344262295, 'no_speech_prob': 0.024320073425769806}, {'id': 13, 'seek': 7716, 'start': 87.08, 'end': 91.52, 'text': ' which are three address formats, right. We look at all of them and then we generate or', 'tokens': [50860, 597, 366, 1045, 2985, 25879, 11, 558, 13, 492, 574, 412, 439, 295, 552, 293, 550, 321, 8460, 420, 51082], 'temperature': 0.0, 'avg_logprob': -0.22728975536753832, 'compression_ratio': 1.8401639344262295, 'no_speech_prob': 0.024320073425769806}, {'id': 14, 'seek': 7716, 'start': 91.52, 'end': 98.08, 'text': ' we construct a DAG for that directed acyclic graph and in this DAG the reads represent', 'tokens': [51082, 321, 7690, 257, 9578, 38, 337, 300, 12898, 696, 88, 66, 1050, 4295, 293, 294, 341, 9578, 38, 264, 15700, 2906, 51410], 'temperature': 0.0, 'avg_logprob': -0.22728975536753832, 'compression_ratio': 1.8401639344262295, 'no_speech_prob': 0.024320073425769806}, {'id': 15, 'seek': 7716, 'start': 98.08, 'end': 105.08, 'text': ' okay unique identifiers that means that variables are constant in your program. Okay, and the', 'tokens': [51410, 1392, 3845, 2473, 23463, 300, 1355, 300, 9102, 366, 5754, 294, 428, 1461, 13, 1033, 11, 293, 264, 51760], 'temperature': 0.0, 'avg_logprob': -0.22728975536753832, 'compression_ratio': 1.8401639344262295, 'no_speech_prob': 0.024320073425769806}, {'id': 16, 'seek': 10508, 'start': 105.08, 'end': 112.08, 'text': ' interior nodes are operations like for example, plus or minus or whatever it is. Okay, and', 'tokens': [50364, 10636, 13891, 366, 7705, 411, 337, 1365, 11, 1804, 420, 3175, 420, 2035, 309, 307, 13, 1033, 11, 293, 50714], 'temperature': 0.0, 'avg_logprob': -0.15163703437324041, 'compression_ratio': 1.8806584362139918, 'no_speech_prob': 0.006012352649122477}, {'id': 17, 'seek': 10508, 'start': 112.56, 'end': 116.44, 'text': ' you have to now have a sequence by which you have to go through this so that you will be', 'tokens': [50738, 291, 362, 281, 586, 362, 257, 8310, 538, 597, 291, 362, 281, 352, 807, 341, 370, 300, 291, 486, 312, 50932], 'temperature': 0.0, 'avg_logprob': -0.15163703437324041, 'compression_ratio': 1.8806584362139918, 'no_speech_prob': 0.006012352649122477}, {'id': 18, 'seek': 10508, 'start': 116.44, 'end': 123.08, 'text': ' able to generate code for this in an efficient way. Okay, so the order in which they have', 'tokens': [50932, 1075, 281, 8460, 3089, 337, 341, 294, 364, 7148, 636, 13, 1033, 11, 370, 264, 1668, 294, 597, 436, 362, 51264], 'temperature': 0.0, 'avg_logprob': -0.15163703437324041, 'compression_ratio': 1.8806584362139918, 'no_speech_prob': 0.006012352649122477}, {'id': 19, 'seek': 10508, 'start': 123.08, 'end': 128.56, 'text': ' to be visited is basically the sequence number or the ID that we are going to give and if', 'tokens': [51264, 281, 312, 11220, 307, 1936, 264, 8310, 1230, 420, 264, 7348, 300, 321, 366, 516, 281, 976, 293, 498, 51538], 'temperature': 0.0, 'avg_logprob': -0.15163703437324041, 'compression_ratio': 1.8806584362139918, 'no_speech_prob': 0.006012352649122477}, {'id': 20, 'seek': 10508, 'start': 128.56, 'end': 133.92, 'text': ' you visit them in that order or in that reverse order so to say then you will be able to generate', 'tokens': [51538, 291, 3441, 552, 294, 300, 1668, 420, 294, 300, 9943, 1668, 370, 281, 584, 550, 291, 486, 312, 1075, 281, 8460, 51806], 'temperature': 0.0, 'avg_logprob': -0.15163703437324041, 'compression_ratio': 1.8806584362139918, 'no_speech_prob': 0.006012352649122477}, {'id': 21, 'seek': 13392, 'start': 133.92, 'end': 139.67999999999998, 'text': ' efficient code for that. So let me explain this by means of an example, right. So here', 'tokens': [50364, 7148, 3089, 337, 300, 13, 407, 718, 385, 2903, 341, 538, 1355, 295, 364, 1365, 11, 558, 13, 407, 510, 50652], 'temperature': 0.0, 'avg_logprob': -0.24882572719029017, 'compression_ratio': 1.5235294117647058, 'no_speech_prob': 0.008173373527824879}, {'id': 22, 'seek': 13392, 'start': 139.67999999999998, 'end': 146.67999999999998, 'text': ' is a piece of three address code, right, which is computing something, right.', 'tokens': [50652, 307, 257, 2522, 295, 1045, 2985, 3089, 11, 558, 11, 597, 307, 15866, 746, 11, 558, 13, 51002], 'temperature': 0.0, 'avg_logprob': -0.24882572719029017, 'compression_ratio': 1.5235294117647058, 'no_speech_prob': 0.008173373527824879}, {'id': 23, 'seek': 13392, 'start': 146.67999999999998, 'end': 153.67999999999998, 'text': ' So if you look at it, it is basically calculating A of I, B of I, right and then that product,', 'tokens': [51002, 407, 498, 291, 574, 412, 309, 11, 309, 307, 1936, 28258, 316, 295, 286, 11, 363, 295, 286, 11, 558, 293, 550, 300, 1674, 11, 51352], 'temperature': 0.0, 'avg_logprob': -0.24882572719029017, 'compression_ratio': 1.5235294117647058, 'no_speech_prob': 0.008173373527824879}, {'id': 24, 'seek': 15368, 'start': 153.68, 'end': 160.68, 'text': ' okay and then with that product it is basically adding that, okay adding that. Okay, so it', 'tokens': [50364, 1392, 293, 550, 365, 300, 1674, 309, 307, 1936, 5127, 300, 11, 1392, 5127, 300, 13, 1033, 11, 370, 309, 50714], 'temperature': 0.0, 'avg_logprob': -0.27226993399606625, 'compression_ratio': 1.6407185628742516, 'no_speech_prob': 0.002485063625499606}, {'id': 25, 'seek': 15368, 'start': 169.12, 'end': 175.12, 'text': ' is basically accumulating A of I into B of I across all of them some kind of a vector', 'tokens': [51136, 307, 1936, 12989, 12162, 316, 295, 286, 666, 363, 295, 286, 2108, 439, 295, 552, 512, 733, 295, 257, 8062, 51436], 'temperature': 0.0, 'avg_logprob': -0.27226993399606625, 'compression_ratio': 1.6407185628742516, 'no_speech_prob': 0.002485063625499606}, {'id': 26, 'seek': 15368, 'start': 175.12, 'end': 182.12, 'text': ' product is what it is kind of computing, incrementing I and then iterating, right. So if you look', 'tokens': [51436, 1674, 307, 437, 309, 307, 733, 295, 15866, 11, 26200, 278, 286, 293, 550, 17138, 990, 11, 558, 13, 407, 498, 291, 574, 51786], 'temperature': 0.0, 'avg_logprob': -0.27226993399606625, 'compression_ratio': 1.6407185628742516, 'no_speech_prob': 0.002485063625499606}, {'id': 27, 'seek': 18212, 'start': 183.12, 'end': 188.4, 'text': ' at it, this is a basic block because there is no control transfer instruction till the', 'tokens': [50414, 412, 309, 11, 341, 307, 257, 3875, 3461, 570, 456, 307, 572, 1969, 5003, 10951, 4288, 264, 50678], 'temperature': 0.0, 'avg_logprob': -0.17414119631745095, 'compression_ratio': 1.8172588832487309, 'no_speech_prob': 0.0029464189428836107}, {'id': 28, 'seek': 18212, 'start': 188.4, 'end': 194.8, 'text': ' last instruction and there is no instruction to which control can jump into also, right.', 'tokens': [50678, 1036, 10951, 293, 456, 307, 572, 10951, 281, 597, 1969, 393, 3012, 666, 611, 11, 558, 13, 50998], 'temperature': 0.0, 'avg_logprob': -0.17414119631745095, 'compression_ratio': 1.8172588832487309, 'no_speech_prob': 0.0029464189428836107}, {'id': 29, 'seek': 18212, 'start': 194.8, 'end': 201.66, 'text': ' So that is why it is called a single entry single exit. If it enters here, it can only', 'tokens': [50998, 407, 300, 307, 983, 309, 307, 1219, 257, 2167, 8729, 2167, 11043, 13, 759, 309, 18780, 510, 11, 309, 393, 787, 51341], 'temperature': 0.0, 'avg_logprob': -0.17414119631745095, 'compression_ratio': 1.8172588832487309, 'no_speech_prob': 0.0029464189428836107}, {'id': 30, 'seek': 18212, 'start': 201.66, 'end': 207.32, 'text': ' exit here, it cannot exit anywhere else, correct. This is the property of a basic block, single', 'tokens': [51341, 11043, 510, 11, 309, 2644, 11043, 4992, 1646, 11, 3006, 13, 639, 307, 264, 4707, 295, 257, 3875, 3461, 11, 2167, 51624], 'temperature': 0.0, 'avg_logprob': -0.17414119631745095, 'compression_ratio': 1.8172588832487309, 'no_speech_prob': 0.0029464189428836107}, {'id': 31, 'seek': 20732, 'start': 207.32, 'end': 214.32, 'text': ' entry and single entry, okay. So how many of you follow this three address code? Yeah,', 'tokens': [50364, 8729, 293, 2167, 8729, 11, 1392, 13, 407, 577, 867, 295, 291, 1524, 341, 1045, 2985, 3089, 30, 865, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.2877760036017305, 'compression_ratio': 1.5844748858447488, 'no_speech_prob': 0.0066735753789544106}, {'id': 32, 'seek': 20732, 'start': 214.32, 'end': 220.32, 'text': ' afternoon, it is because of afternoon or we are all following it, right, okay.', 'tokens': [50714, 6499, 11, 309, 307, 570, 295, 6499, 420, 321, 366, 439, 3480, 309, 11, 558, 11, 1392, 13, 51014], 'temperature': 0.0, 'avg_logprob': -0.2877760036017305, 'compression_ratio': 1.5844748858447488, 'no_speech_prob': 0.0066735753789544106}, {'id': 33, 'seek': 20732, 'start': 220.32, 'end': 226.4, 'text': ' Okay, so now if I look at the right hand side that is where I have the DAG for that, it', 'tokens': [51014, 1033, 11, 370, 586, 498, 286, 574, 412, 264, 558, 1011, 1252, 300, 307, 689, 286, 362, 264, 9578, 38, 337, 300, 11, 309, 51318], 'temperature': 0.0, 'avg_logprob': -0.2877760036017305, 'compression_ratio': 1.5844748858447488, 'no_speech_prob': 0.0066735753789544106}, {'id': 34, 'seek': 20732, 'start': 226.4, 'end': 232.6, 'text': ' is also easy to understand, right. For example, here I am doing some indexing operation, okay', 'tokens': [51318, 307, 611, 1858, 281, 1223, 11, 558, 13, 1171, 1365, 11, 510, 286, 669, 884, 512, 8186, 278, 6916, 11, 1392, 51628], 'temperature': 0.0, 'avg_logprob': -0.2877760036017305, 'compression_ratio': 1.5844748858447488, 'no_speech_prob': 0.0066735753789544106}, {'id': 35, 'seek': 23260, 'start': 232.6, 'end': 238.88, 'text': ' for A, some indexing operation for B. Here I am multiplying 4 and I, of course I use', 'tokens': [50364, 337, 316, 11, 512, 8186, 278, 6916, 337, 363, 13, 1692, 286, 669, 30955, 1017, 293, 286, 11, 295, 1164, 286, 764, 50678], 'temperature': 0.0, 'avg_logprob': -0.18508689961534866, 'compression_ratio': 1.6055045871559632, 'no_speech_prob': 0.015401054173707962}, {'id': 36, 'seek': 23260, 'start': 238.88, 'end': 245.72, 'text': ' I naught for some reason, let me explain that little later. Then the same 4 I is used in', 'tokens': [50678, 286, 13138, 337, 512, 1778, 11, 718, 385, 2903, 300, 707, 1780, 13, 1396, 264, 912, 1017, 286, 307, 1143, 294, 51020], 'temperature': 0.0, 'avg_logprob': -0.18508689961534866, 'compression_ratio': 1.6055045871559632, 'no_speech_prob': 0.015401054173707962}, {'id': 37, 'seek': 23260, 'start': 245.72, 'end': 251.4, 'text': ' indexing operation of both of this, correct. And then you can see that on this side I am', 'tokens': [51020, 8186, 278, 6916, 295, 1293, 295, 341, 11, 3006, 13, 400, 550, 291, 393, 536, 300, 322, 341, 1252, 286, 669, 51304], 'temperature': 0.0, 'avg_logprob': -0.18508689961534866, 'compression_ratio': 1.6055045871559632, 'no_speech_prob': 0.015401054173707962}, {'id': 38, 'seek': 23260, 'start': 251.4, 'end': 257.24, 'text': ' adding I with 1 and then I am checking for less than or equal to, that is possibly this', 'tokens': [51304, 5127, 286, 365, 502, 293, 550, 286, 669, 8568, 337, 1570, 813, 420, 2681, 281, 11, 300, 307, 6264, 341, 51596], 'temperature': 0.0, 'avg_logprob': -0.18508689961534866, 'compression_ratio': 1.6055045871559632, 'no_speech_prob': 0.015401054173707962}, {'id': 39, 'seek': 25724, 'start': 257.24, 'end': 263.8, 'text': ' statement. And of course here I am multiplying A of I and B of I and I am adding it with', 'tokens': [50364, 5629, 13, 400, 295, 1164, 510, 286, 669, 30955, 316, 295, 286, 293, 363, 295, 286, 293, 286, 669, 5127, 309, 365, 50692], 'temperature': 0.0, 'avg_logprob': -0.16338682174682617, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.08025842905044556}, {'id': 40, 'seek': 25724, 'start': 263.8, 'end': 270.72, 'text': ' product, okay. And I keep doing this. As far as this basic block is concerned, this is', 'tokens': [50692, 1674, 11, 1392, 13, 400, 286, 1066, 884, 341, 13, 1018, 1400, 382, 341, 3875, 3461, 307, 5922, 11, 341, 307, 51038], 'temperature': 0.0, 'avg_logprob': -0.16338682174682617, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.08025842905044556}, {'id': 41, 'seek': 25724, 'start': 270.72, 'end': 276.2, 'text': ' what is happening. As it is you can see in this three address code that 4 I is calculated', 'tokens': [51038, 437, 307, 2737, 13, 1018, 309, 307, 291, 393, 536, 294, 341, 1045, 2985, 3089, 300, 1017, 286, 307, 15598, 51312], 'temperature': 0.0, 'avg_logprob': -0.16338682174682617, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.08025842905044556}, {'id': 42, 'seek': 25724, 'start': 276.2, 'end': 282.44, 'text': ' twice, right. You could avoid that by doing common sub expression elimination or by constructing', 'tokens': [51312, 6091, 11, 558, 13, 509, 727, 5042, 300, 538, 884, 2689, 1422, 6114, 29224, 420, 538, 39969, 51624], 'temperature': 0.0, 'avg_logprob': -0.16338682174682617, 'compression_ratio': 1.5947136563876652, 'no_speech_prob': 0.08025842905044556}, {'id': 43, 'seek': 28244, 'start': 282.44, 'end': 287.04, 'text': ' this DAG itself you can actually identify the common sub expression and you can eliminate', 'tokens': [50364, 341, 9578, 38, 2564, 291, 393, 767, 5876, 264, 2689, 1422, 6114, 293, 291, 393, 13819, 50594], 'temperature': 0.0, 'avg_logprob': -0.17339522952125186, 'compression_ratio': 1.7265625, 'no_speech_prob': 0.08167270570993423}, {'id': 44, 'seek': 28244, 'start': 287.04, 'end': 292.6, 'text': ' that also, right. You will see how to construct the DAG, but I am just giving you this example', 'tokens': [50594, 300, 611, 11, 558, 13, 509, 486, 536, 577, 281, 7690, 264, 9578, 38, 11, 457, 286, 669, 445, 2902, 291, 341, 1365, 50872], 'temperature': 0.0, 'avg_logprob': -0.17339522952125186, 'compression_ratio': 1.7265625, 'no_speech_prob': 0.08167270570993423}, {'id': 45, 'seek': 28244, 'start': 292.6, 'end': 296.8, 'text': ' and then giving you the picture how the DAG will look like, right.', 'tokens': [50872, 293, 550, 2902, 291, 264, 3036, 577, 264, 9578, 38, 486, 574, 411, 11, 558, 13, 51082], 'temperature': 0.0, 'avg_logprob': -0.17339522952125186, 'compression_ratio': 1.7265625, 'no_speech_prob': 0.08167270570993423}, {'id': 46, 'seek': 28244, 'start': 296.8, 'end': 302.68, 'text': ' Now once you have this as I mentioned earlier, all the leaf nodes are either variables, variables', 'tokens': [51082, 823, 1564, 291, 362, 341, 382, 286, 2835, 3071, 11, 439, 264, 10871, 13891, 366, 2139, 9102, 11, 9102, 51376], 'temperature': 0.0, 'avg_logprob': -0.17339522952125186, 'compression_ratio': 1.7265625, 'no_speech_prob': 0.08167270570993423}, {'id': 47, 'seek': 28244, 'start': 302.68, 'end': 307.72, 'text': ' meaning typically these are program variables A, B and 4. Here in this example you can think', 'tokens': [51376, 3620, 5850, 613, 366, 1461, 9102, 316, 11, 363, 293, 1017, 13, 1692, 294, 341, 1365, 291, 393, 519, 51628], 'temperature': 0.0, 'avg_logprob': -0.17339522952125186, 'compression_ratio': 1.7265625, 'no_speech_prob': 0.08167270570993423}, {'id': 48, 'seek': 30772, 'start': 307.72, 'end': 313.52000000000004, 'text': ' that variables which start with the name T are temporaries created by your intermediate', 'tokens': [50364, 300, 9102, 597, 722, 365, 264, 1315, 314, 366, 8219, 4889, 2942, 538, 428, 19376, 50654], 'temperature': 0.0, 'avg_logprob': -0.18757160230614672, 'compression_ratio': 1.7190476190476192, 'no_speech_prob': 0.34733355045318604}, {'id': 49, 'seek': 30772, 'start': 313.52000000000004, 'end': 319.32000000000005, 'text': ' code. They are not program variables in the sense that, I mean in the sense that after', 'tokens': [50654, 3089, 13, 814, 366, 406, 1461, 9102, 294, 264, 2020, 300, 11, 286, 914, 294, 264, 2020, 300, 934, 50944], 'temperature': 0.0, 'avg_logprob': -0.18757160230614672, 'compression_ratio': 1.7190476190476192, 'no_speech_prob': 0.34733355045318604}, {'id': 50, 'seek': 30772, 'start': 319.32000000000005, 'end': 325.12, 'text': ' this basic block or after this region of code if those variable values are not saved anywhere', 'tokens': [50944, 341, 3875, 3461, 420, 934, 341, 4458, 295, 3089, 498, 729, 7006, 4190, 366, 406, 6624, 4992, 51234], 'temperature': 0.0, 'avg_logprob': -0.18757160230614672, 'compression_ratio': 1.7190476190476192, 'no_speech_prob': 0.34733355045318604}, {'id': 51, 'seek': 30772, 'start': 325.12, 'end': 333.76000000000005, 'text': ' it is okay. But variable values like A, B or in this case I etcetera, A and B are non-scalar', 'tokens': [51234, 309, 307, 1392, 13, 583, 7006, 4190, 411, 316, 11, 363, 420, 294, 341, 1389, 286, 22066, 11, 316, 293, 363, 366, 2107, 12, 4417, 12031, 51666], 'temperature': 0.0, 'avg_logprob': -0.18757160230614672, 'compression_ratio': 1.7190476190476192, 'no_speech_prob': 0.34733355045318604}, {'id': 52, 'seek': 33376, 'start': 333.76, 'end': 340.76, 'text': ' variables arrays, okay. So, they have multiple values whereas variable like I or product,', 'tokens': [50364, 9102, 41011, 11, 1392, 13, 407, 11, 436, 362, 3866, 4190, 9735, 7006, 411, 286, 420, 1674, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.23256972984031396, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.49998533725738525}, {'id': 53, 'seek': 33376, 'start': 340.76, 'end': 348.56, 'text': ' right. They are scalar variables, right. Their values need to be saved because they are program', 'tokens': [50714, 558, 13, 814, 366, 39684, 9102, 11, 558, 13, 6710, 4190, 643, 281, 312, 6624, 570, 436, 366, 1461, 51104], 'temperature': 0.0, 'avg_logprob': -0.23256972984031396, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.49998533725738525}, {'id': 54, 'seek': 33376, 'start': 348.56, 'end': 354.44, 'text': ' variables. Others are temporaries generated by your intermediate code.', 'tokens': [51104, 9102, 13, 20277, 366, 8219, 4889, 10833, 538, 428, 19376, 3089, 13, 51398], 'temperature': 0.0, 'avg_logprob': -0.23256972984031396, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.49998533725738525}, {'id': 55, 'seek': 33376, 'start': 354.44, 'end': 363.03999999999996, 'text': ' Now in this what we can see is that each leaf node is either a variable or a constant, okay.', 'tokens': [51398, 823, 294, 341, 437, 321, 393, 536, 307, 300, 1184, 10871, 9984, 307, 2139, 257, 7006, 420, 257, 5754, 11, 1392, 13, 51828], 'temperature': 0.0, 'avg_logprob': -0.23256972984031396, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.49998533725738525}, {'id': 56, 'seek': 36304, 'start': 363.04, 'end': 369.72, 'text': ' And each internal node is some kind of an operation multiplication, addition or indexing', 'tokens': [50364, 400, 1184, 6920, 9984, 307, 512, 733, 295, 364, 6916, 27290, 11, 4500, 420, 8186, 278, 50698], 'temperature': 0.0, 'avg_logprob': -0.12270087495856329, 'compression_ratio': 1.7237354085603114, 'no_speech_prob': 0.005943366792052984}, {'id': 57, 'seek': 36304, 'start': 369.72, 'end': 375.72, 'text': ' less than or equal to and so on, right. So, this is what we mean by a DAG and if you go', 'tokens': [50698, 1570, 813, 420, 2681, 281, 293, 370, 322, 11, 558, 13, 407, 11, 341, 307, 437, 321, 914, 538, 257, 9578, 38, 293, 498, 291, 352, 50998], 'temperature': 0.0, 'avg_logprob': -0.12270087495856329, 'compression_ratio': 1.7237354085603114, 'no_speech_prob': 0.005943366792052984}, {'id': 58, 'seek': 36304, 'start': 375.72, 'end': 381.12, 'text': ' back to the previous thing that is exactly what we have said, right. Leafs are labeled', 'tokens': [50998, 646, 281, 264, 3894, 551, 300, 307, 2293, 437, 321, 362, 848, 11, 558, 13, 32290, 82, 366, 21335, 51268], 'temperature': 0.0, 'avg_logprob': -0.12270087495856329, 'compression_ratio': 1.7237354085603114, 'no_speech_prob': 0.005943366792052984}, {'id': 59, 'seek': 36304, 'start': 381.12, 'end': 387.88, 'text': ' by unique identifiers, variables are constants and interior nodes are labeled by an operator,', 'tokens': [51268, 538, 3845, 2473, 23463, 11, 9102, 366, 35870, 293, 10636, 13891, 366, 21335, 538, 364, 12973, 11, 51606], 'temperature': 0.0, 'avg_logprob': -0.12270087495856329, 'compression_ratio': 1.7237354085603114, 'no_speech_prob': 0.005943366792052984}, {'id': 60, 'seek': 36304, 'start': 387.88, 'end': 392.04, 'text': ' some kind of an operation that we perform. And we are going to give a sequence ID for', 'tokens': [51606, 512, 733, 295, 364, 6916, 300, 321, 2042, 13, 400, 321, 366, 516, 281, 976, 257, 8310, 7348, 337, 51814], 'temperature': 0.0, 'avg_logprob': -0.12270087495856329, 'compression_ratio': 1.7237354085603114, 'no_speech_prob': 0.005943366792052984}, {'id': 61, 'seek': 39204, 'start': 392.04, 'end': 397.84000000000003, 'text': ' each one of these nodes and that tells us in what order we want to compute them, okay.', 'tokens': [50364, 1184, 472, 295, 613, 13891, 293, 300, 5112, 505, 294, 437, 1668, 321, 528, 281, 14722, 552, 11, 1392, 13, 50654], 'temperature': 0.0, 'avg_logprob': -0.1766136714390346, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04346087574958801}, {'id': 62, 'seek': 39204, 'start': 397.84000000000003, 'end': 402.72, 'text': ' So, first let us see how to construct the DAG. Then we will go about how to give the', 'tokens': [50654, 407, 11, 700, 718, 505, 536, 577, 281, 7690, 264, 9578, 38, 13, 1396, 321, 486, 352, 466, 577, 281, 976, 264, 50898], 'temperature': 0.0, 'avg_logprob': -0.1766136714390346, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04346087574958801}, {'id': 63, 'seek': 39204, 'start': 402.72, 'end': 408.16, 'text': ' sequence ID for them. So, again you process the tree address code one by one. Take each', 'tokens': [50898, 8310, 7348, 337, 552, 13, 407, 11, 797, 291, 1399, 264, 4230, 2985, 3089, 472, 538, 472, 13, 3664, 1184, 51170], 'temperature': 0.0, 'avg_logprob': -0.1766136714390346, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04346087574958801}, {'id': 64, 'seek': 39204, 'start': 408.16, 'end': 414.92, 'text': ' piece of each tree address code, right. And then you add certain nodes or edges in the', 'tokens': [51170, 2522, 295, 1184, 4230, 2985, 3089, 11, 558, 13, 400, 550, 291, 909, 1629, 13891, 420, 8819, 294, 264, 51508], 'temperature': 0.0, 'avg_logprob': -0.1766136714390346, 'compression_ratio': 1.6398104265402844, 'no_speech_prob': 0.04346087574958801}, {'id': 65, 'seek': 41492, 'start': 415.8, 'end': 422.12, 'text': ' So, let us take the statement of the form x is equal to y of z, right. It is basically', 'tokens': [50408, 407, 11, 718, 505, 747, 264, 5629, 295, 264, 1254, 2031, 307, 2681, 281, 288, 295, 710, 11, 558, 13, 467, 307, 1936, 50724], 'temperature': 0.0, 'avg_logprob': -0.23711989761947036, 'compression_ratio': 1.511111111111111, 'no_speech_prob': 0.06622444093227386}, {'id': 66, 'seek': 41492, 'start': 422.12, 'end': 430.12, 'text': ' performing an operation on y and z. So, you find out if node y is not defined in the graph,', 'tokens': [50724, 10205, 364, 6916, 322, 288, 293, 710, 13, 407, 11, 291, 915, 484, 498, 9984, 288, 307, 406, 7642, 294, 264, 4295, 11, 51124], 'temperature': 0.0, 'avg_logprob': -0.23711989761947036, 'compression_ratio': 1.511111111111111, 'no_speech_prob': 0.06622444093227386}, {'id': 67, 'seek': 41492, 'start': 430.12, 'end': 438.08000000000004, 'text': ' okay. That means that, right, it is not already been used. y is a program variable or y could', 'tokens': [51124, 1392, 13, 663, 1355, 300, 11, 558, 11, 309, 307, 406, 1217, 668, 1143, 13, 288, 307, 257, 1461, 7006, 420, 288, 727, 51522], 'temperature': 0.0, 'avg_logprob': -0.23711989761947036, 'compression_ratio': 1.511111111111111, 'no_speech_prob': 0.06622444093227386}, {'id': 68, 'seek': 43808, 'start': 438.08, 'end': 445.28, 'text': ' either be a program variable or could be a temporary, okay. Now, if y is not defined', 'tokens': [50364, 2139, 312, 257, 1461, 7006, 420, 727, 312, 257, 13413, 11, 1392, 13, 823, 11, 498, 288, 307, 406, 7642, 50724], 'temperature': 0.0, 'avg_logprob': -0.1751619091740361, 'compression_ratio': 1.8057851239669422, 'no_speech_prob': 0.009558085352182388}, {'id': 69, 'seek': 43808, 'start': 445.28, 'end': 450.59999999999997, 'text': ' in the DAG and you are seeing it for the first time, then it has to be a program variable', 'tokens': [50724, 294, 264, 9578, 38, 293, 291, 366, 2577, 309, 337, 264, 700, 565, 11, 550, 309, 575, 281, 312, 257, 1461, 7006, 50990], 'temperature': 0.0, 'avg_logprob': -0.1751619091740361, 'compression_ratio': 1.8057851239669422, 'no_speech_prob': 0.009558085352182388}, {'id': 70, 'seek': 43808, 'start': 450.59999999999997, 'end': 455.76, 'text': ' because if it is a temporary, it must have been defined before that, correct. If you', 'tokens': [50990, 570, 498, 309, 307, 257, 13413, 11, 309, 1633, 362, 668, 7642, 949, 300, 11, 3006, 13, 759, 291, 51248], 'temperature': 0.0, 'avg_logprob': -0.1751619091740361, 'compression_ratio': 1.8057851239669422, 'no_speech_prob': 0.009558085352182388}, {'id': 71, 'seek': 43808, 'start': 455.76, 'end': 460.03999999999996, 'text': ' are going to use a temporary which is a part of this expression, the temporary should have', 'tokens': [51248, 366, 516, 281, 764, 257, 13413, 597, 307, 257, 644, 295, 341, 6114, 11, 264, 13413, 820, 362, 51462], 'temperature': 0.0, 'avg_logprob': -0.1751619091740361, 'compression_ratio': 1.8057851239669422, 'no_speech_prob': 0.009558085352182388}, {'id': 72, 'seek': 43808, 'start': 460.03999999999996, 'end': 464.56, 'text': ' had some value defined to it without which you cannot use it in some other expression.', 'tokens': [51462, 632, 512, 2158, 7642, 281, 309, 1553, 597, 291, 2644, 764, 309, 294, 512, 661, 6114, 13, 51688], 'temperature': 0.0, 'avg_logprob': -0.1751619091740361, 'compression_ratio': 1.8057851239669422, 'no_speech_prob': 0.009558085352182388}, {'id': 73, 'seek': 46456, 'start': 465.04, 'end': 468.84, 'text': ' If it is a program variable, yes, program variable would have been defined elsewhere', 'tokens': [50388, 759, 309, 307, 257, 1461, 7006, 11, 2086, 11, 1461, 7006, 576, 362, 668, 7642, 14517, 50578], 'temperature': 0.0, 'avg_logprob': -0.1658883591492971, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.014264368452131748}, {'id': 74, 'seek': 46456, 'start': 468.84, 'end': 473.52, 'text': ' in some other basic block, okay. And it would have a value which you are going to use it,', 'tokens': [50578, 294, 512, 661, 3875, 3461, 11, 1392, 13, 400, 309, 576, 362, 257, 2158, 597, 291, 366, 516, 281, 764, 309, 11, 50812], 'temperature': 0.0, 'avg_logprob': -0.1658883591492971, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.014264368452131748}, {'id': 75, 'seek': 46456, 'start': 473.52, 'end': 480.52, 'text': ' okay. So, if node y is not defined in the DAG, right, then it must be a program variable.', 'tokens': [50812, 1392, 13, 407, 11, 498, 9984, 288, 307, 406, 7642, 294, 264, 9578, 38, 11, 558, 11, 550, 309, 1633, 312, 257, 1461, 7006, 13, 51162], 'temperature': 0.0, 'avg_logprob': -0.1658883591492971, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.014264368452131748}, {'id': 76, 'seek': 46456, 'start': 480.52, 'end': 487.8, 'text': ' So, you create a leaf node with the label y. If similarly for node z, if it is not defined', 'tokens': [51162, 407, 11, 291, 1884, 257, 10871, 9984, 365, 264, 7645, 288, 13, 759, 14138, 337, 9984, 710, 11, 498, 309, 307, 406, 7642, 51526], 'temperature': 0.0, 'avg_logprob': -0.1658883591492971, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.014264368452131748}, {'id': 77, 'seek': 48780, 'start': 487.8, 'end': 495.32, 'text': ' in the DAG, you create another leaf node and name it as z. And now you have, so basically', 'tokens': [50364, 294, 264, 9578, 38, 11, 291, 1884, 1071, 10871, 9984, 293, 1315, 309, 382, 710, 13, 400, 586, 291, 362, 11, 370, 1936, 50740], 'temperature': 0.0, 'avg_logprob': -0.13372110790676542, 'compression_ratio': 1.7661691542288558, 'no_speech_prob': 0.0280714500695467}, {'id': 78, 'seek': 48780, 'start': 495.32, 'end': 499.88, 'text': ' otherwise you have some other node which is named y, which has been computed as a part', 'tokens': [50740, 5911, 291, 362, 512, 661, 9984, 597, 307, 4926, 288, 11, 597, 575, 668, 40610, 382, 257, 644, 50968], 'temperature': 0.0, 'avg_logprob': -0.13372110790676542, 'compression_ratio': 1.7661691542288558, 'no_speech_prob': 0.0280714500695467}, {'id': 79, 'seek': 48780, 'start': 499.88, 'end': 505.44, 'text': ' of any of the previous statements. So, whichever node you have as y and whichever node you', 'tokens': [50968, 295, 604, 295, 264, 3894, 12363, 13, 407, 11, 24123, 9984, 291, 362, 382, 288, 293, 24123, 9984, 291, 51246], 'temperature': 0.0, 'avg_logprob': -0.13372110790676542, 'compression_ratio': 1.7661691542288558, 'no_speech_prob': 0.0280714500695467}, {'id': 80, 'seek': 48780, 'start': 505.44, 'end': 512.0, 'text': ' have as z, connect them and then call that as x. And the connecting node from which you', 'tokens': [51246, 362, 382, 710, 11, 1745, 552, 293, 550, 818, 300, 382, 2031, 13, 400, 264, 11015, 9984, 490, 597, 291, 51574], 'temperature': 0.0, 'avg_logprob': -0.13372110790676542, 'compression_ratio': 1.7661691542288558, 'no_speech_prob': 0.0280714500695467}, {'id': 81, 'seek': 51200, 'start': 512.0, 'end': 518.88, 'text': ' draw edges to y and z, okay, is basically what is called x and that has the operation', 'tokens': [50364, 2642, 8819, 281, 288, 293, 710, 11, 1392, 11, 307, 1936, 437, 307, 1219, 2031, 293, 300, 575, 264, 6916, 50708], 'temperature': 0.0, 'avg_logprob': -0.17150077587220727, 'compression_ratio': 1.7567567567567568, 'no_speech_prob': 0.02348717302083969}, {'id': 82, 'seek': 51200, 'start': 518.88, 'end': 524.12, 'text': ' op, okay. So, here you are also going to check if there', 'tokens': [50708, 999, 11, 1392, 13, 407, 11, 510, 291, 366, 611, 516, 281, 1520, 498, 456, 50970], 'temperature': 0.0, 'avg_logprob': -0.17150077587220727, 'compression_ratio': 1.7567567567567568, 'no_speech_prob': 0.02348717302083969}, {'id': 83, 'seek': 51200, 'start': 524.12, 'end': 530.0, 'text': ' is a node with the same operation and the left child which is node y and the right child', 'tokens': [50970, 307, 257, 9984, 365, 264, 912, 6916, 293, 264, 1411, 1440, 597, 307, 9984, 288, 293, 264, 558, 1440, 51264], 'temperature': 0.0, 'avg_logprob': -0.17150077587220727, 'compression_ratio': 1.7567567567567568, 'no_speech_prob': 0.02348717302083969}, {'id': 84, 'seek': 51200, 'start': 530.0, 'end': 535.2, 'text': ' which is node z. That means that this expression is also already computed and there is already', 'tokens': [51264, 597, 307, 9984, 710, 13, 663, 1355, 300, 341, 6114, 307, 611, 1217, 40610, 293, 456, 307, 1217, 51524], 'temperature': 0.0, 'avg_logprob': -0.17150077587220727, 'compression_ratio': 1.7567567567567568, 'no_speech_prob': 0.02348717302083969}, {'id': 85, 'seek': 53520, 'start': 535.4000000000001, 'end': 542.4000000000001, 'text': ' a temporary for this, in which case you can call that node itself also as x, okay. That', 'tokens': [50374, 257, 13413, 337, 341, 11, 294, 597, 1389, 291, 393, 818, 300, 9984, 2564, 611, 382, 2031, 11, 1392, 13, 663, 50724], 'temperature': 0.0, 'avg_logprob': -0.16337494088822052, 'compression_ratio': 1.7670682730923695, 'no_speech_prob': 0.12097037583589554}, {'id': 86, 'seek': 53520, 'start': 542.4000000000001, 'end': 547.76, 'text': ' is really what it is saying, okay. So, again let me go through this. If there is a node', 'tokens': [50724, 307, 534, 437, 309, 307, 1566, 11, 1392, 13, 407, 11, 797, 718, 385, 352, 807, 341, 13, 759, 456, 307, 257, 9984, 50992], 'temperature': 0.0, 'avg_logprob': -0.16337494088822052, 'compression_ratio': 1.7670682730923695, 'no_speech_prob': 0.12097037583589554}, {'id': 87, 'seek': 53520, 'start': 547.76, 'end': 554.76, 'text': ' with operator op and left and right children as node y and z, then call this node y, sorry,', 'tokens': [50992, 365, 12973, 999, 293, 1411, 293, 558, 2227, 382, 9984, 288, 293, 710, 11, 550, 818, 341, 9984, 288, 11, 2597, 11, 51342], 'temperature': 0.0, 'avg_logprob': -0.16337494088822052, 'compression_ratio': 1.7670682730923695, 'no_speech_prob': 0.12097037583589554}, {'id': 88, 'seek': 53520, 'start': 555.5600000000001, 'end': 560.6400000000001, 'text': ' call this node also as n because that already computes y op z. It is already existing in', 'tokens': [51382, 818, 341, 9984, 611, 382, 297, 570, 300, 1217, 715, 1819, 288, 999, 710, 13, 467, 307, 1217, 6741, 294, 51636], 'temperature': 0.0, 'avg_logprob': -0.16337494088822052, 'compression_ratio': 1.7670682730923695, 'no_speech_prob': 0.12097037583589554}, {'id': 89, 'seek': 53520, 'start': 560.6400000000001, 'end': 564.6800000000001, 'text': ' the graph, you can reuse it, okay. I will show you the example of this when we come', 'tokens': [51636, 264, 4295, 11, 291, 393, 26225, 309, 11, 1392, 13, 286, 486, 855, 291, 264, 1365, 295, 341, 562, 321, 808, 51838], 'temperature': 0.0, 'avg_logprob': -0.16337494088822052, 'compression_ratio': 1.7670682730923695, 'no_speech_prob': 0.12097037583589554}, {'id': 90, 'seek': 56468, 'start': 564.68, 'end': 570.9599999999999, 'text': ' to that 4 i statement. If it is not, then you create a node as n and then put a left', 'tokens': [50364, 281, 300, 1017, 741, 5629, 13, 759, 309, 307, 406, 11, 550, 291, 1884, 257, 9984, 382, 297, 293, 550, 829, 257, 1411, 50678], 'temperature': 0.0, 'avg_logprob': -0.16167713968377365, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.002331602154299617}, {'id': 91, 'seek': 56468, 'start': 570.9599999999999, 'end': 577.0, 'text': ' child of this as node y and right child of this as node z. Again the left and right are', 'tokens': [50678, 1440, 295, 341, 382, 9984, 288, 293, 558, 1440, 295, 341, 382, 9984, 710, 13, 3764, 264, 1411, 293, 558, 366, 50980], 'temperature': 0.0, 'avg_logprob': -0.16167713968377365, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.002331602154299617}, {'id': 92, 'seek': 56468, 'start': 577.0, 'end': 583.0, 'text': ' important because not all operations are commutative. You have to be careful about that, right.', 'tokens': [50980, 1021, 570, 406, 439, 7705, 366, 800, 325, 1166, 13, 509, 362, 281, 312, 5026, 466, 300, 11, 558, 13, 51280], 'temperature': 0.0, 'avg_logprob': -0.16167713968377365, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.002331602154299617}, {'id': 93, 'seek': 56468, 'start': 583.0, 'end': 587.8, 'text': ' So, you have to do that and you in this particular case, in the else case you actually create', 'tokens': [51280, 407, 11, 291, 362, 281, 360, 300, 293, 291, 294, 341, 1729, 1389, 11, 294, 264, 1646, 1389, 291, 767, 1884, 51520], 'temperature': 0.0, 'avg_logprob': -0.16167713968377365, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.002331602154299617}, {'id': 94, 'seek': 58780, 'start': 587.88, 'end': 594.88, 'text': ' a new node, okay. Now, delete x from the list of attached identifiers and append x to the,', 'tokens': [50368, 257, 777, 9984, 11, 1392, 13, 823, 11, 12097, 2031, 490, 264, 1329, 295, 8570, 2473, 23463, 293, 34116, 2031, 281, 264, 11, 50718], 'temperature': 0.0, 'avg_logprob': -0.16157145460112757, 'compression_ratio': 1.876595744680851, 'no_speech_prob': 0.11033432930707932}, {'id': 95, 'seek': 58780, 'start': 595.56, 'end': 602.3, 'text': ' so for the new node you basically call this as x because x may be redefined, okay or it', 'tokens': [50752, 370, 337, 264, 777, 9984, 291, 1936, 818, 341, 382, 2031, 570, 2031, 815, 312, 38818, 2001, 11, 1392, 420, 309, 51089], 'temperature': 0.0, 'avg_logprob': -0.16157145460112757, 'compression_ratio': 1.876595744680851, 'no_speech_prob': 0.11033432930707932}, {'id': 96, 'seek': 58780, 'start': 602.3, 'end': 606.1999999999999, 'text': ' may be the case x is defined for the first time, x could be a temporary and it could', 'tokens': [51089, 815, 312, 264, 1389, 2031, 307, 7642, 337, 264, 700, 565, 11, 2031, 727, 312, 257, 13413, 293, 309, 727, 51284], 'temperature': 0.0, 'avg_logprob': -0.16157145460112757, 'compression_ratio': 1.876595744680851, 'no_speech_prob': 0.11033432930707932}, {'id': 97, 'seek': 58780, 'start': 606.1999999999999, 'end': 611.8, 'text': ' be defined for the first time. Node n is the one which is going to be called as x, okay.', 'tokens': [51284, 312, 7642, 337, 264, 700, 565, 13, 38640, 297, 307, 264, 472, 597, 307, 516, 281, 312, 1219, 382, 2031, 11, 1392, 13, 51564], 'temperature': 0.0, 'avg_logprob': -0.16157145460112757, 'compression_ratio': 1.876595744680851, 'no_speech_prob': 0.11033432930707932}, {'id': 98, 'seek': 58780, 'start': 611.8, 'end': 617.76, 'text': ' So, you give the name x to that node and if there is any other identifier which also has', 'tokens': [51564, 407, 11, 291, 976, 264, 1315, 2031, 281, 300, 9984, 293, 498, 456, 307, 604, 661, 45690, 597, 611, 575, 51862], 'temperature': 0.0, 'avg_logprob': -0.16157145460112757, 'compression_ratio': 1.876595744680851, 'no_speech_prob': 0.11033432930707932}, {'id': 99, 'seek': 61776, 'start': 617.76, 'end': 624.16, 'text': ' x you delete it, okay and maybe they can be renamed as x naught or x 1 or something', 'tokens': [50364, 2031, 291, 12097, 309, 11, 1392, 293, 1310, 436, 393, 312, 40949, 382, 2031, 13138, 420, 2031, 502, 420, 746, 50684], 'temperature': 0.0, 'avg_logprob': -0.18376855289234834, 'compression_ratio': 1.781725888324873, 'no_speech_prob': 0.0012291213497519493}, {'id': 100, 'seek': 61776, 'start': 624.16, 'end': 630.28, 'text': ' like that, okay. If you have a statement of the form x is equal to y which is a copy statement,', 'tokens': [50684, 411, 300, 11, 1392, 13, 759, 291, 362, 257, 5629, 295, 264, 1254, 2031, 307, 2681, 281, 288, 597, 307, 257, 5055, 5629, 11, 50990], 'temperature': 0.0, 'avg_logprob': -0.18376855289234834, 'compression_ratio': 1.781725888324873, 'no_speech_prob': 0.0012291213497519493}, {'id': 101, 'seek': 61776, 'start': 630.28, 'end': 635.24, 'text': ' then identify if there is a node y, right. If there is a node y then you can attach x', 'tokens': [50990, 550, 5876, 498, 456, 307, 257, 9984, 288, 11, 558, 13, 759, 456, 307, 257, 9984, 288, 550, 291, 393, 5085, 2031, 51238], 'temperature': 0.0, 'avg_logprob': -0.18376855289234834, 'compression_ratio': 1.781725888324873, 'no_speech_prob': 0.0012291213497519493}, {'id': 102, 'seek': 61776, 'start': 635.24, 'end': 642.24, 'text': ' to it. If there is no node y, you create a node, leaf node with label y, add x to it.', 'tokens': [51238, 281, 309, 13, 759, 456, 307, 572, 9984, 288, 11, 291, 1884, 257, 9984, 11, 10871, 9984, 365, 7645, 288, 11, 909, 2031, 281, 309, 13, 51588], 'temperature': 0.0, 'avg_logprob': -0.18376855289234834, 'compression_ratio': 1.781725888324873, 'no_speech_prob': 0.0012291213497519493}, {'id': 103, 'seek': 64224, 'start': 643.2, 'end': 648.6, 'text': ' That is essentially what you try to do. In other words, every time you encounter an operation,', 'tokens': [50412, 663, 307, 4476, 437, 291, 853, 281, 360, 13, 682, 661, 2283, 11, 633, 565, 291, 8593, 364, 6916, 11, 50682], 'temperature': 0.0, 'avg_logprob': -0.22944395882742746, 'compression_ratio': 1.9956709956709957, 'no_speech_prob': 0.010945805348455906}, {'id': 104, 'seek': 64224, 'start': 648.6, 'end': 654.24, 'text': ' right, you find out whether its left and right children already exist. If it exists and you', 'tokens': [50682, 558, 11, 291, 915, 484, 1968, 1080, 1411, 293, 558, 2227, 1217, 2514, 13, 759, 309, 8198, 293, 291, 50964], 'temperature': 0.0, 'avg_logprob': -0.22944395882742746, 'compression_ratio': 1.9956709956709957, 'no_speech_prob': 0.010945805348455906}, {'id': 105, 'seek': 64224, 'start': 654.24, 'end': 658.84, 'text': ' also see whether the operation exists. If that operation with the left and right child already', 'tokens': [50964, 611, 536, 1968, 264, 6916, 8198, 13, 759, 300, 6916, 365, 264, 1411, 293, 558, 1440, 1217, 51194], 'temperature': 0.0, 'avg_logprob': -0.22944395882742746, 'compression_ratio': 1.9956709956709957, 'no_speech_prob': 0.010945805348455906}, {'id': 106, 'seek': 64224, 'start': 658.84, 'end': 663.24, 'text': ' exists that means that you have already computed the value. So, you can actually go and call', 'tokens': [51194, 8198, 300, 1355, 300, 291, 362, 1217, 40610, 264, 2158, 13, 407, 11, 291, 393, 767, 352, 293, 818, 51414], 'temperature': 0.0, 'avg_logprob': -0.22944395882742746, 'compression_ratio': 1.9956709956709957, 'no_speech_prob': 0.010945805348455906}, {'id': 107, 'seek': 64224, 'start': 663.24, 'end': 668.48, 'text': ' that also as x. Otherwise, you create that operation, connect the left and right child', 'tokens': [51414, 300, 611, 382, 2031, 13, 10328, 11, 291, 1884, 300, 6916, 11, 1745, 264, 1411, 293, 558, 1440, 51676], 'temperature': 0.0, 'avg_logprob': -0.22944395882742746, 'compression_ratio': 1.9956709956709957, 'no_speech_prob': 0.010945805348455906}, {'id': 108, 'seek': 66848, 'start': 668.48, 'end': 674.88, 'text': ' to it. If the nodes y and node z do not exist, create them. These are, you know, variables', 'tokens': [50364, 281, 309, 13, 759, 264, 13891, 288, 293, 9984, 710, 360, 406, 2514, 11, 1884, 552, 13, 1981, 366, 11, 291, 458, 11, 9102, 50684], 'temperature': 0.0, 'avg_logprob': -0.21835610301224226, 'compression_ratio': 1.563063063063063, 'no_speech_prob': 0.04613809287548065}, {'id': 109, 'seek': 66848, 'start': 674.88, 'end': 679.04, 'text': ' which are going to be started. So, that is essentially what we do. Let us just go through', 'tokens': [50684, 597, 366, 516, 281, 312, 1409, 13, 407, 11, 300, 307, 4476, 437, 321, 360, 13, 961, 505, 445, 352, 807, 50892], 'temperature': 0.0, 'avg_logprob': -0.21835610301224226, 'compression_ratio': 1.563063063063063, 'no_speech_prob': 0.04613809287548065}, {'id': 110, 'seek': 66848, 'start': 679.04, 'end': 684.48, 'text': ' that example step by step and then try to understand how this works, okay.', 'tokens': [50892, 300, 1365, 1823, 538, 1823, 293, 550, 853, 281, 1223, 577, 341, 1985, 11, 1392, 13, 51164], 'temperature': 0.0, 'avg_logprob': -0.21835610301224226, 'compression_ratio': 1.563063063063063, 'no_speech_prob': 0.04613809287548065}, {'id': 111, 'seek': 66848, 'start': 684.48, 'end': 691.48, 'text': ' So, let us take the first statement 4 i, right. So, here one of the operand is i, the other', 'tokens': [51164, 407, 11, 718, 505, 747, 264, 700, 5629, 1017, 741, 11, 558, 13, 407, 11, 510, 472, 295, 264, 2208, 474, 307, 741, 11, 264, 661, 51514], 'temperature': 0.0, 'avg_logprob': -0.21835610301224226, 'compression_ratio': 1.563063063063063, 'no_speech_prob': 0.04613809287548065}, {'id': 112, 'seek': 69148, 'start': 692.48, 'end': 699.48, 'text': ' one is 4, right. We are starting with an empty graph. So, neither of them is available. So,', 'tokens': [50414, 472, 307, 1017, 11, 558, 13, 492, 366, 2891, 365, 364, 6707, 4295, 13, 407, 11, 9662, 295, 552, 307, 2435, 13, 407, 11, 50764], 'temperature': 0.0, 'avg_logprob': -0.15672791864454133, 'compression_ratio': 1.735, 'no_speech_prob': 0.0035815532319247723}, {'id': 113, 'seek': 69148, 'start': 700.24, 'end': 707.24, 'text': ' we can start off with the leaf nodes 4 and i and star is the operation that you perform,', 'tokens': [50802, 321, 393, 722, 766, 365, 264, 10871, 13891, 1017, 293, 741, 293, 3543, 307, 264, 6916, 300, 291, 2042, 11, 51152], 'temperature': 0.0, 'avg_logprob': -0.15672791864454133, 'compression_ratio': 1.735, 'no_speech_prob': 0.0035815532319247723}, {'id': 114, 'seek': 69148, 'start': 707.64, 'end': 713.44, 'text': ' correct. So, you put a node with star and then left child and right child are 4 and', 'tokens': [51172, 3006, 13, 407, 11, 291, 829, 257, 9984, 365, 3543, 293, 550, 1411, 1440, 293, 558, 1440, 366, 1017, 293, 51462], 'temperature': 0.0, 'avg_logprob': -0.15672791864454133, 'compression_ratio': 1.735, 'no_speech_prob': 0.0035815532319247723}, {'id': 115, 'seek': 69148, 'start': 713.44, 'end': 720.44, 'text': ' i and this is going to be called t 1. So, attach the name t 1 to this node, right.', 'tokens': [51462, 741, 293, 341, 307, 516, 281, 312, 1219, 256, 502, 13, 407, 11, 5085, 264, 1315, 256, 502, 281, 341, 9984, 11, 558, 13, 51812], 'temperature': 0.0, 'avg_logprob': -0.15672791864454133, 'compression_ratio': 1.735, 'no_speech_prob': 0.0035815532319247723}, {'id': 116, 'seek': 72148, 'start': 721.6, 'end': 728.6, 'text': ' The next step is t 2 equal to a of t 1, right. So, here the operation is the indexing operation', 'tokens': [50370, 440, 958, 1823, 307, 256, 568, 2681, 281, 257, 295, 256, 502, 11, 558, 13, 407, 11, 510, 264, 6916, 307, 264, 8186, 278, 6916, 50720], 'temperature': 0.0, 'avg_logprob': -0.13033921559651693, 'compression_ratio': 1.5561797752808988, 'no_speech_prob': 0.0012260529911145568}, {'id': 117, 'seek': 72148, 'start': 730.4, 'end': 737.4, 'text': ' which we show it like this, correct. And one operand for this is a which is a variable', 'tokens': [50810, 597, 321, 855, 309, 411, 341, 11, 3006, 13, 400, 472, 2208, 474, 337, 341, 307, 257, 597, 307, 257, 7006, 51160], 'temperature': 0.0, 'avg_logprob': -0.13033921559651693, 'compression_ratio': 1.5561797752808988, 'no_speech_prob': 0.0012260529911145568}, {'id': 118, 'seek': 72148, 'start': 737.88, 'end': 744.88, 'text': ' name and a does not exist in this graph originally. Therefore, we create a leaf node for a and', 'tokens': [51184, 1315, 293, 257, 775, 406, 2514, 294, 341, 4295, 7993, 13, 7504, 11, 321, 1884, 257, 10871, 9984, 337, 257, 293, 51534], 'temperature': 0.0, 'avg_logprob': -0.13033921559651693, 'compression_ratio': 1.5561797752808988, 'no_speech_prob': 0.0012260529911145568}, {'id': 119, 'seek': 74488, 'start': 744.88, 'end': 751.88, 'text': ' attach it to the left child, attach it as a left child and the right child is t 1. t', 'tokens': [50364, 5085, 309, 281, 264, 1411, 1440, 11, 5085, 309, 382, 257, 1411, 1440, 293, 264, 558, 1440, 307, 256, 502, 13, 256, 50714], 'temperature': 0.0, 'avg_logprob': -0.18987203151621718, 'compression_ratio': 1.8651685393258426, 'no_speech_prob': 0.0027537604328244925}, {'id': 120, 'seek': 74488, 'start': 752.0, 'end': 757.4, 'text': ' 1 already exists in the graph. So, you connect it to t 1, correct.', 'tokens': [50720, 502, 1217, 8198, 294, 264, 4295, 13, 407, 11, 291, 1745, 309, 281, 256, 502, 11, 3006, 13, 50990], 'temperature': 0.0, 'avg_logprob': -0.18987203151621718, 'compression_ratio': 1.8651685393258426, 'no_speech_prob': 0.0027537604328244925}, {'id': 121, 'seek': 74488, 'start': 757.4, 'end': 764.4, 'text': ' Now, the next statement is 4 i, right. 4 and i already exist in the graph, constant 4 and', 'tokens': [50990, 823, 11, 264, 958, 5629, 307, 1017, 741, 11, 558, 13, 1017, 293, 741, 1217, 2514, 294, 264, 4295, 11, 5754, 1017, 293, 51340], 'temperature': 0.0, 'avg_logprob': -0.18987203151621718, 'compression_ratio': 1.8651685393258426, 'no_speech_prob': 0.0027537604328244925}, {'id': 122, 'seek': 74488, 'start': 765.12, 'end': 771.32, 'text': ' constant i already exist. In fact, there is a node with star and left child as 4 and right', 'tokens': [51376, 5754, 741, 1217, 2514, 13, 682, 1186, 11, 456, 307, 257, 9984, 365, 3543, 293, 1411, 1440, 382, 1017, 293, 558, 51686], 'temperature': 0.0, 'avg_logprob': -0.18987203151621718, 'compression_ratio': 1.8651685393258426, 'no_speech_prob': 0.0027537604328244925}, {'id': 123, 'seek': 77132, 'start': 771.32, 'end': 776.6400000000001, 'text': ' child as i. That means what? This value has already been computed. You have seen another', 'tokens': [50364, 1440, 382, 741, 13, 663, 1355, 437, 30, 639, 2158, 575, 1217, 668, 40610, 13, 509, 362, 1612, 1071, 50630], 'temperature': 0.0, 'avg_logprob': -0.16473266926217586, 'compression_ratio': 1.5814977973568283, 'no_speech_prob': 0.002869382966309786}, {'id': 124, 'seek': 77132, 'start': 776.6400000000001, 'end': 783.08, 'text': ' statement which is exactly of this form, right. So, there is no need to create another node', 'tokens': [50630, 5629, 597, 307, 2293, 295, 341, 1254, 11, 558, 13, 407, 11, 456, 307, 572, 643, 281, 1884, 1071, 9984, 50952], 'temperature': 0.0, 'avg_logprob': -0.16473266926217586, 'compression_ratio': 1.5814977973568283, 'no_speech_prob': 0.002869382966309786}, {'id': 125, 'seek': 77132, 'start': 783.08, 'end': 789.4000000000001, 'text': ' t 3 for that. You can call this itself as t 3. That is why you are attaching t 3 to', 'tokens': [50952, 256, 805, 337, 300, 13, 509, 393, 818, 341, 2564, 382, 256, 805, 13, 663, 307, 983, 291, 366, 39074, 256, 805, 281, 51268], 'temperature': 0.0, 'avg_logprob': -0.16473266926217586, 'compression_ratio': 1.5814977973568283, 'no_speech_prob': 0.002869382966309786}, {'id': 126, 'seek': 77132, 'start': 789.4000000000001, 'end': 796.4000000000001, 'text': ' the same node. Now, by doing this what have I achieved? We have achieved common sub-expression', 'tokens': [51268, 264, 912, 9984, 13, 823, 11, 538, 884, 341, 437, 362, 286, 11042, 30, 492, 362, 11042, 2689, 1422, 12, 15952, 2775, 51618], 'temperature': 0.0, 'avg_logprob': -0.16473266926217586, 'compression_ratio': 1.5814977973568283, 'no_speech_prob': 0.002869382966309786}, {'id': 127, 'seek': 79640, 'start': 796.6, 'end': 800.92, 'text': ' elimination. You are going to compute this only once, correct.', 'tokens': [50374, 29224, 13, 509, 366, 516, 281, 14722, 341, 787, 1564, 11, 3006, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.21073250818734218, 'compression_ratio': 1.625615763546798, 'no_speech_prob': 0.0036920791026204824}, {'id': 128, 'seek': 79640, 'start': 800.92, 'end': 807.92, 'text': ' Now, let us go to the next one. Next statement is b is equal to t 3. That means that it is', 'tokens': [50590, 823, 11, 718, 505, 352, 281, 264, 958, 472, 13, 3087, 5629, 307, 272, 307, 2681, 281, 256, 805, 13, 663, 1355, 300, 309, 307, 50940], 'temperature': 0.0, 'avg_logprob': -0.21073250818734218, 'compression_ratio': 1.625615763546798, 'no_speech_prob': 0.0036920791026204824}, {'id': 129, 'seek': 79640, 'start': 808.0799999999999, 'end': 814.92, 'text': ' an indexing operation. Question, yeah. Question or? Okay. Okay. Right. The next one is b is', 'tokens': [50948, 364, 8186, 278, 6916, 13, 14464, 11, 1338, 13, 14464, 420, 30, 1033, 13, 1033, 13, 1779, 13, 440, 958, 472, 307, 272, 307, 51290], 'temperature': 0.0, 'avg_logprob': -0.21073250818734218, 'compression_ratio': 1.625615763546798, 'no_speech_prob': 0.0036920791026204824}, {'id': 130, 'seek': 79640, 'start': 814.92, 'end': 821.92, 'text': ' equal to t 3, right. So, b does not exist. So, we create b as a leaf node. We put an', 'tokens': [51290, 2681, 281, 256, 805, 11, 558, 13, 407, 11, 272, 775, 406, 2514, 13, 407, 11, 321, 1884, 272, 382, 257, 10871, 9984, 13, 492, 829, 364, 51640], 'temperature': 0.0, 'avg_logprob': -0.21073250818734218, 'compression_ratio': 1.625615763546798, 'no_speech_prob': 0.0036920791026204824}, {'id': 131, 'seek': 82192, 'start': 822.4, 'end': 829.4, 'text': ' indexing node and then connect t 3 to this, okay. This is called t 4, right. t 3 can also', 'tokens': [50388, 8186, 278, 9984, 293, 550, 1745, 256, 805, 281, 341, 11, 1392, 13, 639, 307, 1219, 256, 1017, 11, 558, 13, 256, 805, 393, 611, 50738], 'temperature': 0.0, 'avg_logprob': -0.16962686018510298, 'compression_ratio': 1.6409090909090909, 'no_speech_prob': 0.013884954154491425}, {'id': 132, 'seek': 82192, 'start': 830.92, 'end': 835.68, 'text': ' exist here. I do not know why it was got removed, but t 3 will also exist here because if there', 'tokens': [50814, 2514, 510, 13, 286, 360, 406, 458, 983, 309, 390, 658, 7261, 11, 457, 256, 805, 486, 611, 2514, 510, 570, 498, 456, 51052], 'temperature': 0.0, 'avg_logprob': -0.16962686018510298, 'compression_ratio': 1.6409090909090909, 'no_speech_prob': 0.013884954154491425}, {'id': 133, 'seek': 82192, 'start': 835.68, 'end': 842.68, 'text': ' is a future reference for t 3, right, that is same as 4 i. This value has to be taken.', 'tokens': [51052, 307, 257, 2027, 6408, 337, 256, 805, 11, 558, 11, 300, 307, 912, 382, 1017, 741, 13, 639, 2158, 575, 281, 312, 2726, 13, 51402], 'temperature': 0.0, 'avg_logprob': -0.16962686018510298, 'compression_ratio': 1.6409090909090909, 'no_speech_prob': 0.013884954154491425}, {'id': 134, 'seek': 82192, 'start': 842.7199999999999, 'end': 848.68, 'text': ' So, t 3 is not removed from here. Do not take it that way. t 1 comma t 3 is here. t 4 is', 'tokens': [51404, 407, 11, 256, 805, 307, 406, 7261, 490, 510, 13, 1144, 406, 747, 309, 300, 636, 13, 256, 502, 22117, 256, 805, 307, 510, 13, 256, 1017, 307, 51702], 'temperature': 0.0, 'avg_logprob': -0.16962686018510298, 'compression_ratio': 1.6409090909090909, 'no_speech_prob': 0.013884954154491425}, {'id': 135, 'seek': 84868, 'start': 848.68, 'end': 855.68, 'text': ' created which is the indexing operation. Then the next step is t 2 star t 4. Create', 'tokens': [50364, 2942, 597, 307, 264, 8186, 278, 6916, 13, 1396, 264, 958, 1823, 307, 256, 568, 3543, 256, 1017, 13, 20248, 50714], 'temperature': 0.0, 'avg_logprob': -0.17188234040231415, 'compression_ratio': 1.7846153846153847, 'no_speech_prob': 0.016241466626524925}, {'id': 136, 'seek': 84868, 'start': 855.7199999999999, 'end': 862.7199999999999, 'text': ' a new node, put star for that and call that as t 5. The next step is one more addition,', 'tokens': [50716, 257, 777, 9984, 11, 829, 3543, 337, 300, 293, 818, 300, 382, 256, 1025, 13, 440, 958, 1823, 307, 472, 544, 4500, 11, 51066], 'temperature': 0.0, 'avg_logprob': -0.17188234040231415, 'compression_ratio': 1.7846153846153847, 'no_speech_prob': 0.016241466626524925}, {'id': 137, 'seek': 84868, 'start': 864.68, 'end': 871.3599999999999, 'text': ' okay. t 6 equal to product plus t 5. Product does not exist. So, you create a leaf node', 'tokens': [51164, 1392, 13, 256, 1386, 2681, 281, 1674, 1804, 256, 1025, 13, 22005, 775, 406, 2514, 13, 407, 11, 291, 1884, 257, 10871, 9984, 51498], 'temperature': 0.0, 'avg_logprob': -0.17188234040231415, 'compression_ratio': 1.7846153846153847, 'no_speech_prob': 0.016241466626524925}, {'id': 138, 'seek': 84868, 'start': 871.3599999999999, 'end': 878.0, 'text': ' for that and this is the right child. Create a new node, call that as t 6. Then one more', 'tokens': [51498, 337, 300, 293, 341, 307, 264, 558, 1440, 13, 20248, 257, 777, 9984, 11, 818, 300, 382, 256, 1386, 13, 1396, 472, 544, 51830], 'temperature': 0.0, 'avg_logprob': -0.17188234040231415, 'compression_ratio': 1.7846153846153847, 'no_speech_prob': 0.016241466626524925}, {'id': 139, 'seek': 87800, 'start': 878.0, 'end': 885.0, 'text': ' step, right. So, here, so this is an equal thing. Remember, this is, if you see in that', 'tokens': [50364, 1823, 11, 558, 13, 407, 11, 510, 11, 370, 341, 307, 364, 2681, 551, 13, 5459, 11, 341, 307, 11, 498, 291, 536, 294, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.22552946842078006, 'compression_ratio': 1.6869158878504673, 'no_speech_prob': 0.005988743621855974}, {'id': 140, 'seek': 87800, 'start': 886.36, 'end': 891.36, 'text': ' algorithm, we have a separate set of statement to be executed when you have a equal to b', 'tokens': [50782, 9284, 11, 321, 362, 257, 4994, 992, 295, 5629, 281, 312, 17577, 562, 291, 362, 257, 2681, 281, 272, 51032], 'temperature': 0.0, 'avg_logprob': -0.22552946842078006, 'compression_ratio': 1.6869158878504673, 'no_speech_prob': 0.005988743621855974}, {'id': 141, 'seek': 87800, 'start': 891.36, 'end': 897.16, 'text': ' kind of an operation. So, in this case, what you need to do is whatever is the node t 6,', 'tokens': [51032, 733, 295, 364, 6916, 13, 407, 11, 294, 341, 1389, 11, 437, 291, 643, 281, 360, 307, 2035, 307, 264, 9984, 256, 1386, 11, 51322], 'temperature': 0.0, 'avg_logprob': -0.22552946842078006, 'compression_ratio': 1.6869158878504673, 'no_speech_prob': 0.005988743621855974}, {'id': 142, 'seek': 87800, 'start': 897.16, 'end': 902.96, 'text': ' attach the label product to that, right, prod to that and wherever prod was there, you renumber', 'tokens': [51322, 5085, 264, 7645, 1674, 281, 300, 11, 558, 11, 15792, 281, 300, 293, 8660, 15792, 390, 456, 11, 291, 8124, 4182, 51612], 'temperature': 0.0, 'avg_logprob': -0.22552946842078006, 'compression_ratio': 1.6869158878504673, 'no_speech_prob': 0.005988743621855974}, {'id': 143, 'seek': 90296, 'start': 903.0400000000001, 'end': 909.6, 'text': ' them as prod 0, prod 1, prod 2 and so on. This is an earlier value of prod. This is a new', 'tokens': [50368, 552, 382, 15792, 1958, 11, 15792, 502, 11, 15792, 568, 293, 370, 322, 13, 639, 307, 364, 3071, 2158, 295, 15792, 13, 639, 307, 257, 777, 50696], 'temperature': 0.0, 'avg_logprob': -0.16386823654174804, 'compression_ratio': 1.7939698492462313, 'no_speech_prob': 0.02147410623729229}, {'id': 144, 'seek': 90296, 'start': 909.6, 'end': 914.6, 'text': ' value of prod. That is really what it is, okay. So, originally, if you see the previous', 'tokens': [50696, 2158, 295, 15792, 13, 663, 307, 534, 437, 309, 307, 11, 1392, 13, 407, 11, 7993, 11, 498, 291, 536, 264, 3894, 50946], 'temperature': 0.0, 'avg_logprob': -0.16386823654174804, 'compression_ratio': 1.7939698492462313, 'no_speech_prob': 0.02147410623729229}, {'id': 145, 'seek': 90296, 'start': 914.6, 'end': 919.8000000000001, 'text': ' slide, this was prod and this was t 6. Now, when you process this statement, prod equal', 'tokens': [50946, 4137, 11, 341, 390, 15792, 293, 341, 390, 256, 1386, 13, 823, 11, 562, 291, 1399, 341, 5629, 11, 15792, 2681, 51206], 'temperature': 0.0, 'avg_logprob': -0.16386823654174804, 'compression_ratio': 1.7939698492462313, 'no_speech_prob': 0.02147410623729229}, {'id': 146, 'seek': 90296, 'start': 919.8000000000001, 'end': 926.8000000000001, 'text': ' to t 6, right, this label prod is attached to t 6 and the earlier statement prod is deleted', 'tokens': [51206, 281, 256, 1386, 11, 558, 11, 341, 7645, 15792, 307, 8570, 281, 256, 1386, 293, 264, 3071, 5629, 15792, 307, 22981, 51556], 'temperature': 0.0, 'avg_logprob': -0.16386823654174804, 'compression_ratio': 1.7939698492462313, 'no_speech_prob': 0.02147410623729229}, {'id': 147, 'seek': 92680, 'start': 927.8, 'end': 933.28, 'text': ' or it has been renumbered. You can consider that as being renumbered and that is renumbered', 'tokens': [50414, 420, 309, 575, 668, 8124, 4182, 292, 13, 509, 393, 1949, 300, 382, 885, 8124, 4182, 292, 293, 300, 307, 8124, 4182, 292, 50688], 'temperature': 0.0, 'avg_logprob': -0.18269614835756015, 'compression_ratio': 1.9419642857142858, 'no_speech_prob': 0.012980494648218155}, {'id': 148, 'seek': 92680, 'start': 933.28, 'end': 938.92, 'text': ' to t prod 0. See, subsequently, if you do one more, let us say a plus prod or something', 'tokens': [50688, 281, 256, 15792, 1958, 13, 3008, 11, 26514, 11, 498, 291, 360, 472, 544, 11, 718, 505, 584, 257, 1804, 15792, 420, 746, 50970], 'temperature': 0.0, 'avg_logprob': -0.18269614835756015, 'compression_ratio': 1.9419642857142858, 'no_speech_prob': 0.012980494648218155}, {'id': 149, 'seek': 92680, 'start': 938.92, 'end': 943.8399999999999, 'text': ' like that, this will become prod 1 and the new one will become prod because that is the', 'tokens': [50970, 411, 300, 11, 341, 486, 1813, 15792, 502, 293, 264, 777, 472, 486, 1813, 15792, 570, 300, 307, 264, 51216], 'temperature': 0.0, 'avg_logprob': -0.18269614835756015, 'compression_ratio': 1.9419642857142858, 'no_speech_prob': 0.012980494648218155}, {'id': 150, 'seek': 92680, 'start': 943.8399999999999, 'end': 947.56, 'text': ' value of prod that you have to use subsequently in the basic block, correct.', 'tokens': [51216, 2158, 295, 15792, 300, 291, 362, 281, 764, 26514, 294, 264, 3875, 3461, 11, 3006, 13, 51402], 'temperature': 0.0, 'avg_logprob': -0.18269614835756015, 'compression_ratio': 1.9419642857142858, 'no_speech_prob': 0.012980494648218155}, {'id': 151, 'seek': 92680, 'start': 947.56, 'end': 953.0, 'text': ' See, remember that this value of prod is the one that you have to use in the any statement', 'tokens': [51402, 3008, 11, 1604, 300, 341, 2158, 295, 15792, 307, 264, 472, 300, 291, 362, 281, 764, 294, 264, 604, 5629, 51674], 'temperature': 0.0, 'avg_logprob': -0.18269614835756015, 'compression_ratio': 1.9419642857142858, 'no_speech_prob': 0.012980494648218155}, {'id': 152, 'seek': 95300, 'start': 953.0, 'end': 958.92, 'text': ' subsequently. That is the reason why we rename this as prod and then renumber this to prod', 'tokens': [50364, 26514, 13, 663, 307, 264, 1778, 983, 321, 36741, 341, 382, 15792, 293, 550, 8124, 4182, 341, 281, 15792, 50660], 'temperature': 0.0, 'avg_logprob': -0.1958336749319303, 'compression_ratio': 1.7261904761904763, 'no_speech_prob': 0.028679439797997475}, {'id': 153, 'seek': 95300, 'start': 958.92, 'end': 964.96, 'text': ' 0 or whatever. Is that okay? Is that clear? Okay. So, again, a similar thing is going', 'tokens': [50660, 1958, 420, 2035, 13, 1119, 300, 1392, 30, 1119, 300, 1850, 30, 1033, 13, 407, 11, 797, 11, 257, 2531, 551, 307, 516, 50962], 'temperature': 0.0, 'avg_logprob': -0.1958336749319303, 'compression_ratio': 1.7261904761904763, 'no_speech_prob': 0.028679439797997475}, {'id': 154, 'seek': 95300, 'start': 964.96, 'end': 971.04, 'text': ' to happen here when you say t 7 is equal to i plus 1 and i is equal to t 7. Essentially,', 'tokens': [50962, 281, 1051, 510, 562, 291, 584, 256, 1614, 307, 2681, 281, 741, 1804, 502, 293, 741, 307, 2681, 281, 256, 1614, 13, 23596, 11, 51266], 'temperature': 0.0, 'avg_logprob': -0.1958336749319303, 'compression_ratio': 1.7261904761904763, 'no_speech_prob': 0.028679439797997475}, {'id': 155, 'seek': 95300, 'start': 971.04, 'end': 975.92, 'text': ' what is happening is i is going to become i plus 1, right. So, when you process the', 'tokens': [51266, 437, 307, 2737, 307, 741, 307, 516, 281, 1813, 741, 1804, 502, 11, 558, 13, 407, 11, 562, 291, 1399, 264, 51510], 'temperature': 0.0, 'avg_logprob': -0.1958336749319303, 'compression_ratio': 1.7261904761904763, 'no_speech_prob': 0.028679439797997475}, {'id': 156, 'seek': 95300, 'start': 975.92, 'end': 982.92, 'text': ' next statement, i is already there, okay, you create a constant 1 and you have to use', 'tokens': [51510, 958, 5629, 11, 741, 307, 1217, 456, 11, 1392, 11, 291, 1884, 257, 5754, 502, 293, 291, 362, 281, 764, 51860], 'temperature': 0.0, 'avg_logprob': -0.1958336749319303, 'compression_ratio': 1.7261904761904763, 'no_speech_prob': 0.028679439797997475}, {'id': 157, 'seek': 98300, 'start': 983.0, 'end': 988.24, 'text': ' and then put plus there, call that as t 7. Then the next statement is i is equal to t', 'tokens': [50364, 293, 550, 829, 1804, 456, 11, 818, 300, 382, 256, 1614, 13, 1396, 264, 958, 5629, 307, 741, 307, 2681, 281, 256, 50626], 'temperature': 0.0, 'avg_logprob': -0.23685001840396802, 'compression_ratio': 1.640552995391705, 'no_speech_prob': 0.00330506288446486}, {'id': 158, 'seek': 98300, 'start': 988.24, 'end': 998.24, 'text': ' 7. So, you attach the label i also to this and then renumber this to i naught, got it?', 'tokens': [50626, 1614, 13, 407, 11, 291, 5085, 264, 7645, 741, 611, 281, 341, 293, 550, 8124, 4182, 341, 281, 741, 13138, 11, 658, 309, 30, 51126], 'temperature': 0.0, 'avg_logprob': -0.23685001840396802, 'compression_ratio': 1.640552995391705, 'no_speech_prob': 0.00330506288446486}, {'id': 159, 'seek': 98300, 'start': 998.24, 'end': 1007.0, 'text': ' Okay. Then the last statement is less than or equal to go to, right. For that, this constant', 'tokens': [51126, 1033, 13, 1396, 264, 1036, 5629, 307, 1570, 813, 420, 2681, 281, 352, 281, 11, 558, 13, 1171, 300, 11, 341, 5754, 51564], 'temperature': 0.0, 'avg_logprob': -0.23685001840396802, 'compression_ratio': 1.640552995391705, 'no_speech_prob': 0.00330506288446486}, {'id': 160, 'seek': 98300, 'start': 1007.0, 'end': 1012.12, 'text': ' 20 is needed which is another internal node. I think that number is not being put in here,', 'tokens': [51564, 945, 307, 2978, 597, 307, 1071, 6920, 9984, 13, 286, 519, 300, 1230, 307, 406, 885, 829, 294, 510, 11, 51820], 'temperature': 0.0, 'avg_logprob': -0.23685001840396802, 'compression_ratio': 1.640552995391705, 'no_speech_prob': 0.00330506288446486}, {'id': 161, 'seek': 101212, 'start': 1012.24, 'end': 1018.64, 'text': ' but that is 20, right. And then this is basically what it is. So, if you look at this, this', 'tokens': [50370, 457, 300, 307, 945, 11, 558, 13, 400, 550, 341, 307, 1936, 437, 309, 307, 13, 407, 11, 498, 291, 574, 412, 341, 11, 341, 50690], 'temperature': 0.0, 'avg_logprob': -0.18948245692897486, 'compression_ratio': 1.902542372881356, 'no_speech_prob': 0.008293567225337029}, {'id': 162, 'seek': 101212, 'start': 1018.64, 'end': 1023.92, 'text': ' is the sequence of intermediate statements, okay, the DAG for this sequence of intermediate', 'tokens': [50690, 307, 264, 8310, 295, 19376, 12363, 11, 1392, 11, 264, 9578, 38, 337, 341, 8310, 295, 19376, 50954], 'temperature': 0.0, 'avg_logprob': -0.18948245692897486, 'compression_ratio': 1.902542372881356, 'no_speech_prob': 0.008293567225337029}, {'id': 163, 'seek': 101212, 'start': 1023.92, 'end': 1030.68, 'text': ' statements. This already has removed constant sub-expression. Now, if you can come up a', 'tokens': [50954, 12363, 13, 639, 1217, 575, 7261, 5754, 1422, 12, 15952, 2775, 13, 823, 11, 498, 291, 393, 808, 493, 257, 51292], 'temperature': 0.0, 'avg_logprob': -0.18948245692897486, 'compression_ratio': 1.902542372881356, 'no_speech_prob': 0.008293567225337029}, {'id': 164, 'seek': 101212, 'start': 1030.68, 'end': 1035.96, 'text': ' very efficient way of implementing this DAG or generating code for this DAG, that is what', 'tokens': [51292, 588, 7148, 636, 295, 18114, 341, 9578, 38, 420, 17746, 3089, 337, 341, 9578, 38, 11, 300, 307, 437, 51556], 'temperature': 0.0, 'avg_logprob': -0.18948245692897486, 'compression_ratio': 1.902542372881356, 'no_speech_prob': 0.008293567225337029}, {'id': 165, 'seek': 101212, 'start': 1035.96, 'end': 1040.08, 'text': ' I mean by implementing. If you can come up with an efficient way of generating code for', 'tokens': [51556, 286, 914, 538, 18114, 13, 759, 291, 393, 808, 493, 365, 364, 7148, 636, 295, 17746, 3089, 337, 51762], 'temperature': 0.0, 'avg_logprob': -0.18948245692897486, 'compression_ratio': 1.902542372881356, 'no_speech_prob': 0.008293567225337029}, {'id': 166, 'seek': 104008, 'start': 1040.08, 'end': 1046.3999999999999, 'text': ' this DAG, that would essentially mean we are able to generate code being able to look', 'tokens': [50364, 341, 9578, 38, 11, 300, 576, 4476, 914, 321, 366, 1075, 281, 8460, 3089, 885, 1075, 281, 574, 50680], 'temperature': 0.0, 'avg_logprob': -0.10612076979417068, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.09805013239383698}, {'id': 167, 'seek': 104008, 'start': 1046.3999999999999, 'end': 1051.08, 'text': ' this far down in the code, what is being used and what is not being used, right.', 'tokens': [50680, 341, 1400, 760, 294, 264, 3089, 11, 437, 307, 885, 1143, 293, 437, 307, 406, 885, 1143, 11, 558, 13, 50914], 'temperature': 0.0, 'avg_logprob': -0.10612076979417068, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.09805013239383698}, {'id': 168, 'seek': 104008, 'start': 1051.08, 'end': 1055.6, 'text': ' Remember earlier when we said we did not have a big picture, we were saying that we were', 'tokens': [50914, 5459, 3071, 562, 321, 848, 321, 630, 406, 362, 257, 955, 3036, 11, 321, 645, 1566, 300, 321, 645, 51140], 'temperature': 0.0, 'avg_logprob': -0.10612076979417068, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.09805013239383698}, {'id': 169, 'seek': 104008, 'start': 1055.6, 'end': 1060.6399999999999, 'text': ' not even seeing the next statement in the intermediate code. Now, we are able to see', 'tokens': [51140, 406, 754, 2577, 264, 958, 5629, 294, 264, 19376, 3089, 13, 823, 11, 321, 366, 1075, 281, 536, 51392], 'temperature': 0.0, 'avg_logprob': -0.10612076979417068, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.09805013239383698}, {'id': 170, 'seek': 104008, 'start': 1060.6399999999999, 'end': 1066.96, 'text': ' a sequence of statements at the level of a basic block and then able to generate code', 'tokens': [51392, 257, 8310, 295, 12363, 412, 264, 1496, 295, 257, 3875, 3461, 293, 550, 1075, 281, 8460, 3089, 51708], 'temperature': 0.0, 'avg_logprob': -0.10612076979417068, 'compression_ratio': 1.7974683544303798, 'no_speech_prob': 0.09805013239383698}, {'id': 171, 'seek': 106696, 'start': 1066.96, 'end': 1072.48, 'text': " for that, right. That is a slightly better situation, isn't it? Okay. Now that you have", 'tokens': [50364, 337, 300, 11, 558, 13, 663, 307, 257, 4748, 1101, 2590, 11, 1943, 380, 309, 30, 1033, 13, 823, 300, 291, 362, 50640], 'temperature': 0.0, 'avg_logprob': -0.19527134240842334, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.051826898008584976}, {'id': 172, 'seek': 106696, 'start': 1072.48, 'end': 1078.3600000000001, 'text': ' this DAG, how do you generate code for this? In what order do we generate code for this?', 'tokens': [50640, 341, 9578, 38, 11, 577, 360, 291, 8460, 3089, 337, 341, 30, 682, 437, 1668, 360, 321, 8460, 3089, 337, 341, 30, 50934], 'temperature': 0.0, 'avg_logprob': -0.19527134240842334, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.051826898008584976}, {'id': 173, 'seek': 106696, 'start': 1078.3600000000001, 'end': 1085.3600000000001, 'text': ' That is the next question, right. Okay. So, before we go that, let us just say that if you look at', 'tokens': [50934, 663, 307, 264, 958, 1168, 11, 558, 13, 1033, 13, 407, 11, 949, 321, 352, 300, 11, 718, 505, 445, 584, 300, 498, 291, 574, 412, 51284], 'temperature': 0.0, 'avg_logprob': -0.19527134240842334, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.051826898008584976}, {'id': 174, 'seek': 106696, 'start': 1085.3600000000001, 'end': 1091.6000000000001, 'text': ' this DAG, it also represents data dependence, right. For example, it says to compute T6,', 'tokens': [51284, 341, 9578, 38, 11, 309, 611, 8855, 1412, 31704, 11, 558, 13, 1171, 1365, 11, 309, 1619, 281, 14722, 314, 21, 11, 51596], 'temperature': 0.0, 'avg_logprob': -0.19527134240842334, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.051826898008584976}, {'id': 175, 'seek': 109160, 'start': 1091.6, 'end': 1101.6799999999998, 'text': ' you need T5. To compute T5, you need A of 4i or T2. To compute this, you need T4 and to compute', 'tokens': [50364, 291, 643, 314, 20, 13, 1407, 14722, 314, 20, 11, 291, 643, 316, 295, 1017, 72, 420, 314, 17, 13, 1407, 14722, 341, 11, 291, 643, 314, 19, 293, 281, 14722, 50868], 'temperature': 0.0, 'avg_logprob': -0.16419299443562826, 'compression_ratio': 1.7409638554216869, 'no_speech_prob': 0.011376640759408474}, {'id': 176, 'seek': 109160, 'start': 1101.6799999999998, 'end': 1108.48, 'text': ' that you need the address of B plus 4i. To compute this, you need i and 1, all of these things. So,', 'tokens': [50868, 300, 291, 643, 264, 2985, 295, 363, 1804, 1017, 72, 13, 1407, 14722, 341, 11, 291, 643, 741, 293, 502, 11, 439, 295, 613, 721, 13, 407, 11, 51208], 'temperature': 0.0, 'avg_logprob': -0.16419299443562826, 'compression_ratio': 1.7409638554216869, 'no_speech_prob': 0.011376640759408474}, {'id': 177, 'seek': 109160, 'start': 1108.48, 'end': 1115.1599999999999, 'text': ' that the data dependence information is already stored and when you generate code, right, you', 'tokens': [51208, 300, 264, 1412, 31704, 1589, 307, 1217, 12187, 293, 562, 291, 8460, 3089, 11, 558, 11, 291, 51542], 'temperature': 0.0, 'avg_logprob': -0.16419299443562826, 'compression_ratio': 1.7409638554216869, 'no_speech_prob': 0.011376640759408474}, {'id': 178, 'seek': 111516, 'start': 1115.16, 'end': 1123.64, 'text': ' have to generate code bottom up, right. Because you cannot generate code for this unless you', 'tokens': [50364, 362, 281, 8460, 3089, 2767, 493, 11, 558, 13, 1436, 291, 2644, 8460, 3089, 337, 341, 5969, 291, 50788], 'temperature': 0.0, 'avg_logprob': -0.11733627319335938, 'compression_ratio': 2.238372093023256, 'no_speech_prob': 0.014396115206182003}, {'id': 179, 'seek': 111516, 'start': 1123.64, 'end': 1128.5600000000002, 'text': ' have generated code for these two. You cannot generate code for this unless you have generated', 'tokens': [50788, 362, 10833, 3089, 337, 613, 732, 13, 509, 2644, 8460, 3089, 337, 341, 5969, 291, 362, 10833, 51034], 'temperature': 0.0, 'avg_logprob': -0.11733627319335938, 'compression_ratio': 2.238372093023256, 'no_speech_prob': 0.014396115206182003}, {'id': 180, 'seek': 111516, 'start': 1128.5600000000002, 'end': 1134.96, 'text': ' code for this. So, in the instruction sequence also, the code generated, right, you need to have', 'tokens': [51034, 3089, 337, 341, 13, 407, 11, 294, 264, 10951, 8310, 611, 11, 264, 3089, 10833, 11, 558, 11, 291, 643, 281, 362, 51354], 'temperature': 0.0, 'avg_logprob': -0.11733627319335938, 'compression_ratio': 2.238372093023256, 'no_speech_prob': 0.014396115206182003}, {'id': 181, 'seek': 111516, 'start': 1134.96, 'end': 1142.0800000000002, 'text': ' the code for this, the code for this and then only the code for that, right. That is what that makes', 'tokens': [51354, 264, 3089, 337, 341, 11, 264, 3089, 337, 341, 293, 550, 787, 264, 3089, 337, 300, 11, 558, 13, 663, 307, 437, 300, 1669, 51710], 'temperature': 0.0, 'avg_logprob': -0.11733627319335938, 'compression_ratio': 2.238372093023256, 'no_speech_prob': 0.014396115206182003}, {'id': 182, 'seek': 114208, 'start': 1142.08, 'end': 1150.4399999999998, 'text': ' sense, right. So, code generation is always bottom up, okay. So, as we mentioned, this represents', 'tokens': [50364, 2020, 11, 558, 13, 407, 11, 3089, 5125, 307, 1009, 2767, 493, 11, 1392, 13, 407, 11, 382, 321, 2835, 11, 341, 8855, 50782], 'temperature': 0.0, 'avg_logprob': -0.14786938403515107, 'compression_ratio': 1.7400881057268722, 'no_speech_prob': 0.027062421664595604}, {'id': 183, 'seek': 114208, 'start': 1150.4399999999998, 'end': 1158.08, 'text': ' data dependences. It is useful for eliminating common sub-expression, okay. It is going to be', 'tokens': [50782, 1412, 5672, 2667, 13, 467, 307, 4420, 337, 31203, 2689, 1422, 12, 15952, 2775, 11, 1392, 13, 467, 307, 516, 281, 312, 51164], 'temperature': 0.0, 'avg_logprob': -0.14786938403515107, 'compression_ratio': 1.7400881057268722, 'no_speech_prob': 0.027062421664595604}, {'id': 184, 'seek': 114208, 'start': 1158.08, 'end': 1163.6799999999998, 'text': ' useful in identifying the expression evaluation of code generation order, okay, that we said earlier', 'tokens': [51164, 4420, 294, 16696, 264, 6114, 13344, 295, 3089, 5125, 1668, 11, 1392, 11, 300, 321, 848, 3071, 51444], 'temperature': 0.0, 'avg_logprob': -0.14786938403515107, 'compression_ratio': 1.7400881057268722, 'no_speech_prob': 0.027062421664595604}, {'id': 185, 'seek': 114208, 'start': 1163.6799999999998, 'end': 1170.96, 'text': ' also. So, if you want to do instruction reordering, again, dependence is an important information that', 'tokens': [51444, 611, 13, 407, 11, 498, 291, 528, 281, 360, 10951, 319, 765, 1794, 11, 797, 11, 31704, 307, 364, 1021, 1589, 300, 51808], 'temperature': 0.0, 'avg_logprob': -0.14786938403515107, 'compression_ratio': 1.7400881057268722, 'no_speech_prob': 0.027062421664595604}, {'id': 186, 'seek': 117096, 'start': 1170.96, 'end': 1176.96, 'text': ' you need to know. And if you use this DAG, later on, we will not exactly this DAG, but we will use', 'tokens': [50364, 291, 643, 281, 458, 13, 400, 498, 291, 764, 341, 9578, 38, 11, 1780, 322, 11, 321, 486, 406, 2293, 341, 9578, 38, 11, 457, 321, 486, 764, 50664], 'temperature': 0.0, 'avg_logprob': -0.1202058878811923, 'compression_ratio': 1.6893617021276597, 'no_speech_prob': 0.011890185996890068}, {'id': 187, 'seek': 117096, 'start': 1176.96, 'end': 1181.88, 'text': ' some form of a DAG to show how to do instruction reordering, right. That also we will talk about', 'tokens': [50664, 512, 1254, 295, 257, 9578, 38, 281, 855, 577, 281, 360, 10951, 319, 765, 1794, 11, 558, 13, 663, 611, 321, 486, 751, 466, 50910], 'temperature': 0.0, 'avg_logprob': -0.1202058878811923, 'compression_ratio': 1.6893617021276597, 'no_speech_prob': 0.011890185996890068}, {'id': 188, 'seek': 117096, 'start': 1181.88, 'end': 1189.3600000000001, 'text': ' it or instruction scheduling to exploit parallelism, okay. Now, let us just look at how do we go about', 'tokens': [50910, 309, 420, 10951, 29055, 281, 25924, 8952, 1434, 11, 1392, 13, 823, 11, 718, 505, 445, 574, 412, 577, 360, 321, 352, 466, 51284], 'temperature': 0.0, 'avg_logprob': -0.1202058878811923, 'compression_ratio': 1.6893617021276597, 'no_speech_prob': 0.011890185996890068}, {'id': 189, 'seek': 117096, 'start': 1189.3600000000001, 'end': 1196.32, 'text': ' generating code for the DAG, how do we order them and how do we list them, okay. The first step is', 'tokens': [51284, 17746, 3089, 337, 264, 9578, 38, 11, 577, 360, 321, 1668, 552, 293, 577, 360, 321, 1329, 552, 11, 1392, 13, 440, 700, 1823, 307, 51632], 'temperature': 0.0, 'avg_logprob': -0.1202058878811923, 'compression_ratio': 1.6893617021276597, 'no_speech_prob': 0.011890185996890068}, {'id': 190, 'seek': 119632, 'start': 1196.32, 'end': 1202.84, 'text': ' to list them and give a number for that and then traverse them in some reverse order of numbering', 'tokens': [50364, 281, 1329, 552, 293, 976, 257, 1230, 337, 300, 293, 550, 45674, 552, 294, 512, 9943, 1668, 295, 1230, 278, 50690], 'temperature': 0.0, 'avg_logprob': -0.10905496535762664, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.0812515839934349}, {'id': 191, 'seek': 119632, 'start': 1202.84, 'end': 1209.96, 'text': ' to generate the code. So, the algorithm proceeds in the following way. You first select an unlisted', 'tokens': [50690, 281, 8460, 264, 3089, 13, 407, 11, 264, 9284, 32280, 294, 264, 3480, 636, 13, 509, 700, 3048, 364, 517, 34890, 51046], 'temperature': 0.0, 'avg_logprob': -0.10905496535762664, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.0812515839934349}, {'id': 192, 'seek': 119632, 'start': 1209.96, 'end': 1216.48, 'text': ' node n in your DAG, okay, all of whose parents have already been listed. That means that whenever', 'tokens': [51046, 9984, 297, 294, 428, 9578, 38, 11, 1392, 11, 439, 295, 6104, 3152, 362, 1217, 668, 10052, 13, 663, 1355, 300, 5699, 51372], 'temperature': 0.0, 'avg_logprob': -0.10905496535762664, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.0812515839934349}, {'id': 193, 'seek': 119632, 'start': 1216.48, 'end': 1220.9199999999998, 'text': ' you want to visit a node, you have to make sure that their parents have already been visited,', 'tokens': [51372, 291, 528, 281, 3441, 257, 9984, 11, 291, 362, 281, 652, 988, 300, 641, 3152, 362, 1217, 668, 11220, 11, 51594], 'temperature': 0.0, 'avg_logprob': -0.10905496535762664, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.0812515839934349}, {'id': 194, 'seek': 122092, 'start': 1220.92, 'end': 1226.96, 'text': ' all their parents have been visited. Remember this is a DAG, so your node may have multiple parents,', 'tokens': [50364, 439, 641, 3152, 362, 668, 11220, 13, 5459, 341, 307, 257, 9578, 38, 11, 370, 428, 9984, 815, 362, 3866, 3152, 11, 50666], 'temperature': 0.0, 'avg_logprob': -0.15607224258722044, 'compression_ratio': 1.722943722943723, 'no_speech_prob': 0.0699017271399498}, {'id': 195, 'seek': 122092, 'start': 1226.96, 'end': 1231.76, 'text': ' parents meaning nodes which are above that. If you want to look at the graph, again look at it here,', 'tokens': [50666, 3152, 3620, 13891, 597, 366, 3673, 300, 13, 759, 291, 528, 281, 574, 412, 264, 4295, 11, 797, 574, 412, 309, 510, 11, 50906], 'temperature': 0.0, 'avg_logprob': -0.15607224258722044, 'compression_ratio': 1.722943722943723, 'no_speech_prob': 0.0699017271399498}, {'id': 196, 'seek': 122092, 'start': 1231.76, 'end': 1238.96, 'text': ' right. So, if you want to visit, let us say this node, you have to make sure that its parent has', 'tokens': [50906, 558, 13, 407, 11, 498, 291, 528, 281, 3441, 11, 718, 505, 584, 341, 9984, 11, 291, 362, 281, 652, 988, 300, 1080, 2596, 575, 51266], 'temperature': 0.0, 'avg_logprob': -0.15607224258722044, 'compression_ratio': 1.722943722943723, 'no_speech_prob': 0.0699017271399498}, {'id': 197, 'seek': 122092, 'start': 1238.96, 'end': 1245.72, 'text': ' already been visited, okay. So, this visiting you are going to do top down, code generation you are', 'tokens': [51266, 1217, 668, 11220, 11, 1392, 13, 407, 11, 341, 11700, 291, 366, 516, 281, 360, 1192, 760, 11, 3089, 5125, 291, 366, 51604], 'temperature': 0.0, 'avg_logprob': -0.15607224258722044, 'compression_ratio': 1.722943722943723, 'no_speech_prob': 0.0699017271399498}, {'id': 198, 'seek': 124572, 'start': 1245.72, 'end': 1252.56, 'text': ' going to do bottom up, right. So, if you want to visit this node, you have to ensure that its', 'tokens': [50364, 516, 281, 360, 2767, 493, 11, 558, 13, 407, 11, 498, 291, 528, 281, 3441, 341, 9984, 11, 291, 362, 281, 5586, 300, 1080, 50706], 'temperature': 0.0, 'avg_logprob': -0.11689649025599162, 'compression_ratio': 1.900497512437811, 'no_speech_prob': 0.01889445073902607}, {'id': 199, 'seek': 124572, 'start': 1252.56, 'end': 1257.8, 'text': ' parent has already been visited. Similarly, for this node, similarly for this node. In order for', 'tokens': [50706, 2596, 575, 1217, 668, 11220, 13, 13157, 11, 337, 341, 9984, 11, 14138, 337, 341, 9984, 13, 682, 1668, 337, 50968], 'temperature': 0.0, 'avg_logprob': -0.11689649025599162, 'compression_ratio': 1.900497512437811, 'no_speech_prob': 0.01889445073902607}, {'id': 200, 'seek': 124572, 'start': 1257.8, 'end': 1263.04, 'text': ' you to visit this, both these nodes must have been visited already and must have been labeled', 'tokens': [50968, 291, 281, 3441, 341, 11, 1293, 613, 13891, 1633, 362, 668, 11220, 1217, 293, 1633, 362, 668, 21335, 51230], 'temperature': 0.0, 'avg_logprob': -0.11689649025599162, 'compression_ratio': 1.900497512437811, 'no_speech_prob': 0.01889445073902607}, {'id': 201, 'seek': 124572, 'start': 1263.04, 'end': 1271.04, 'text': ' already. That is the condition, right, alright. So, first select an unlisted node n, all of whose', 'tokens': [51230, 1217, 13, 663, 307, 264, 4188, 11, 558, 11, 5845, 13, 407, 11, 700, 3048, 364, 517, 34890, 9984, 297, 11, 439, 295, 6104, 51630], 'temperature': 0.0, 'avg_logprob': -0.11689649025599162, 'compression_ratio': 1.900497512437811, 'no_speech_prob': 0.01889445073902607}, {'id': 202, 'seek': 127104, 'start': 1271.04, 'end': 1276.56, 'text': ' parents have been listed. If the node itself is the root, that means that it did not have any parents,', 'tokens': [50364, 3152, 362, 668, 10052, 13, 759, 264, 9984, 2564, 307, 264, 5593, 11, 300, 1355, 300, 309, 630, 406, 362, 604, 3152, 11, 50640], 'temperature': 0.0, 'avg_logprob': -0.11318394602561484, 'compression_ratio': 1.8627450980392157, 'no_speech_prob': 0.06074663996696472}, {'id': 203, 'seek': 127104, 'start': 1276.56, 'end': 1283.2, 'text': ' that also can be selected in that step, right. Call that node as n and list that node. So,', 'tokens': [50640, 300, 611, 393, 312, 8209, 294, 300, 1823, 11, 558, 13, 7807, 300, 9984, 382, 297, 293, 1329, 300, 9984, 13, 407, 11, 50972], 'temperature': 0.0, 'avg_logprob': -0.11318394602561484, 'compression_ratio': 1.8627450980392157, 'no_speech_prob': 0.06074663996696472}, {'id': 204, 'seek': 127104, 'start': 1283.2, 'end': 1289.96, 'text': ' basically the unlisted node n, all of whose parents have been listed is going to be listed first,', 'tokens': [50972, 1936, 264, 517, 34890, 9984, 297, 11, 439, 295, 6104, 3152, 362, 668, 10052, 307, 516, 281, 312, 10052, 700, 11, 51310], 'temperature': 0.0, 'avg_logprob': -0.11318394602561484, 'compression_ratio': 1.8627450980392157, 'no_speech_prob': 0.06074663996696472}, {'id': 205, 'seek': 127104, 'start': 1289.96, 'end': 1298.84, 'text': ' right. And then you take that node and then take the leftmost child of that node, right,', 'tokens': [51310, 558, 13, 400, 550, 291, 747, 300, 9984, 293, 550, 747, 264, 1411, 1761, 1440, 295, 300, 9984, 11, 558, 11, 51754], 'temperature': 0.0, 'avg_logprob': -0.11318394602561484, 'compression_ratio': 1.8627450980392157, 'no_speech_prob': 0.06074663996696472}, {'id': 206, 'seek': 129884, 'start': 1298.84, 'end': 1308.6799999999998, 'text': ' that is m, okay. Leftmost child of m that has no unlisted parents. Again, among the left, among the', 'tokens': [50364, 300, 307, 275, 11, 1392, 13, 16405, 1761, 1440, 295, 275, 300, 575, 572, 517, 34890, 3152, 13, 3764, 11, 3654, 264, 1411, 11, 3654, 264, 50856], 'temperature': 0.0, 'avg_logprob': -0.16986567302814964, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.024195559322834015}, {'id': 207, 'seek': 129884, 'start': 1308.6799999999998, 'end': 1314.28, 'text': ' children, you choose the one which is leftmost and all of whose parents have already been listed,', 'tokens': [50856, 2227, 11, 291, 2826, 264, 472, 597, 307, 1411, 1761, 293, 439, 295, 6104, 3152, 362, 1217, 668, 10052, 11, 51136], 'temperature': 0.0, 'avg_logprob': -0.16986567302814964, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.024195559322834015}, {'id': 208, 'seek': 129884, 'start': 1314.28, 'end': 1322.24, 'text': ' right. Now, and is not a leaf node and it is that itself is not a leaf node, then you do the', 'tokens': [51136, 558, 13, 823, 11, 293, 307, 406, 257, 10871, 9984, 293, 309, 307, 300, 2564, 307, 406, 257, 10871, 9984, 11, 550, 291, 360, 264, 51534], 'temperature': 0.0, 'avg_logprob': -0.16986567302814964, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.024195559322834015}, {'id': 209, 'seek': 129884, 'start': 1322.24, 'end': 1327.84, 'text': ' following thing. You then list m, that left node, because all his parents have been listed. So,', 'tokens': [51534, 3480, 551, 13, 509, 550, 1329, 275, 11, 300, 1411, 9984, 11, 570, 439, 702, 3152, 362, 668, 10052, 13, 407, 11, 51814], 'temperature': 0.0, 'avg_logprob': -0.16986567302814964, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.024195559322834015}, {'id': 210, 'seek': 132784, 'start': 1327.84, 'end': 1334.52, 'text': ' you can now list the node and then depth first. You go on that node and go further down. That is', 'tokens': [50364, 291, 393, 586, 1329, 264, 9984, 293, 550, 7161, 700, 13, 509, 352, 322, 300, 9984, 293, 352, 3052, 760, 13, 663, 307, 50698], 'temperature': 0.0, 'avg_logprob': -0.1498213970299923, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.010432150214910507}, {'id': 211, 'seek': 132784, 'start': 1334.52, 'end': 1341.4399999999998, 'text': ' really what you do. If you do not have any nodes, okay, which satisfy this condition, maybe there', 'tokens': [50698, 534, 437, 291, 360, 13, 759, 291, 360, 406, 362, 604, 13891, 11, 1392, 11, 597, 19319, 341, 4188, 11, 1310, 456, 51044], 'temperature': 0.0, 'avg_logprob': -0.1498213970299923, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.010432150214910507}, {'id': 212, 'seek': 132784, 'start': 1341.4399999999998, 'end': 1346.4399999999998, 'text': ' are children, but their parents have not been listed, their other parent has not been listed,', 'tokens': [51044, 366, 2227, 11, 457, 641, 3152, 362, 406, 668, 10052, 11, 641, 661, 2596, 575, 406, 668, 10052, 11, 51294], 'temperature': 0.0, 'avg_logprob': -0.1498213970299923, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.010432150214910507}, {'id': 213, 'seek': 132784, 'start': 1346.4399999999998, 'end': 1354.48, 'text': ' then what you do is you go breath first, right. So, in this step, you go to the next sibling in', 'tokens': [51294, 550, 437, 291, 360, 307, 291, 352, 6045, 700, 11, 558, 13, 407, 11, 294, 341, 1823, 11, 291, 352, 281, 264, 958, 39409, 294, 51696], 'temperature': 0.0, 'avg_logprob': -0.1498213970299923, 'compression_ratio': 1.7534246575342465, 'no_speech_prob': 0.010432150214910507}, {'id': 214, 'seek': 135448, 'start': 1354.48, 'end': 1360.24, 'text': ' this while loop. Here you go depth first. We will again see an example and then see how the', 'tokens': [50364, 341, 1339, 6367, 13, 1692, 291, 352, 7161, 700, 13, 492, 486, 797, 536, 364, 1365, 293, 550, 536, 577, 264, 50652], 'temperature': 0.0, 'avg_logprob': -0.1516721137216158, 'compression_ratio': 1.560483870967742, 'no_speech_prob': 0.028485514223575592}, {'id': 215, 'seek': 135448, 'start': 1360.24, 'end': 1365.96, 'text': ' traversal takes place, okay. So, I am going to take this particular graph, okay, which is little', 'tokens': [50652, 23149, 304, 2516, 1081, 11, 1392, 13, 407, 11, 286, 669, 516, 281, 747, 341, 1729, 4295, 11, 1392, 11, 597, 307, 707, 50938], 'temperature': 0.0, 'avg_logprob': -0.1516721137216158, 'compression_ratio': 1.560483870967742, 'no_speech_prob': 0.028485514223575592}, {'id': 216, 'seek': 135448, 'start': 1365.96, 'end': 1374.3600000000001, 'text': ' bit more of a DAG than the one that we saw earlier, right, all right. Okay, so we start with node 1,', 'tokens': [50938, 857, 544, 295, 257, 9578, 38, 813, 264, 472, 300, 321, 1866, 3071, 11, 558, 11, 439, 558, 13, 1033, 11, 370, 321, 722, 365, 9984, 502, 11, 51358], 'temperature': 0.0, 'avg_logprob': -0.1516721137216158, 'compression_ratio': 1.560483870967742, 'no_speech_prob': 0.028485514223575592}, {'id': 217, 'seek': 135448, 'start': 1374.3600000000001, 'end': 1384.4, 'text': ' okay. Node 1 has no parents, that means it can be listed, right. Then what is the next step? Then', 'tokens': [51358, 1392, 13, 38640, 502, 575, 572, 3152, 11, 300, 1355, 309, 393, 312, 10052, 11, 558, 13, 1396, 437, 307, 264, 958, 1823, 30, 1396, 51860], 'temperature': 0.0, 'avg_logprob': -0.1516721137216158, 'compression_ratio': 1.560483870967742, 'no_speech_prob': 0.028485514223575592}, {'id': 218, 'seek': 138440, 'start': 1384.4, 'end': 1392.68, 'text': ' you have to go to each children, leftmost child, all of whose parents have been listed. So, which', 'tokens': [50364, 291, 362, 281, 352, 281, 1184, 2227, 11, 1411, 1761, 1440, 11, 439, 295, 6104, 3152, 362, 668, 10052, 13, 407, 11, 597, 50778], 'temperature': 0.0, 'avg_logprob': -0.15271588734218053, 'compression_ratio': 1.4411764705882353, 'no_speech_prob': 0.0014046429423615336}, {'id': 219, 'seek': 138440, 'start': 1392.68, 'end': 1407.2800000000002, 'text': ' one is that? 2, right. Can 2 be listed? Yes, 2 has only one parent, which has already been listed.', 'tokens': [50778, 472, 307, 300, 30, 568, 11, 558, 13, 1664, 568, 312, 10052, 30, 1079, 11, 568, 575, 787, 472, 2596, 11, 597, 575, 1217, 668, 10052, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.15271588734218053, 'compression_ratio': 1.4411764705882353, 'no_speech_prob': 0.0014046429423615336}, {'id': 220, 'seek': 140728, 'start': 1407.28, 'end': 1415.08, 'text': ' So, 2 can be listed. Then what you do? Just tell me the node number, there are several pluses and', 'tokens': [50364, 407, 11, 568, 393, 312, 10052, 13, 1396, 437, 291, 360, 30, 1449, 980, 385, 264, 9984, 1230, 11, 456, 366, 2940, 1804, 279, 293, 50754], 'temperature': 0.0, 'avg_logprob': -0.1624749148333514, 'compression_ratio': 1.5238095238095237, 'no_speech_prob': 0.07025826722383499}, {'id': 221, 'seek': 140728, 'start': 1415.08, 'end': 1425.76, 'text': ' minuses in the thing. Then you try 6, but can 6 be listed? Leftmost child, all of whose parents', 'tokens': [50754, 3175, 279, 294, 264, 551, 13, 1396, 291, 853, 1386, 11, 457, 393, 1386, 312, 10052, 30, 16405, 1761, 1440, 11, 439, 295, 6104, 3152, 51288], 'temperature': 0.0, 'avg_logprob': -0.1624749148333514, 'compression_ratio': 1.5238095238095237, 'no_speech_prob': 0.07025826722383499}, {'id': 222, 'seek': 140728, 'start': 1425.76, 'end': 1433.08, 'text': ' have been listed. That is not the case because 5 was not listed, right. So, then you go breath', 'tokens': [51288, 362, 668, 10052, 13, 663, 307, 406, 264, 1389, 570, 1025, 390, 406, 10052, 11, 558, 13, 407, 11, 550, 291, 352, 6045, 51654], 'temperature': 0.0, 'avg_logprob': -0.1624749148333514, 'compression_ratio': 1.5238095238095237, 'no_speech_prob': 0.07025826722383499}, {'id': 223, 'seek': 143308, 'start': 1433.08, 'end': 1441.24, 'text': ' first, right. Then you go to the next child of this one. In fact, sorry, if you look at 2,', 'tokens': [50364, 700, 11, 558, 13, 1396, 291, 352, 281, 264, 958, 1440, 295, 341, 472, 13, 682, 1186, 11, 2597, 11, 498, 291, 574, 412, 568, 11, 50772], 'temperature': 0.0, 'avg_logprob': -0.11260162459479438, 'compression_ratio': 1.7627906976744185, 'no_speech_prob': 0.07112770527601242}, {'id': 224, 'seek': 143308, 'start': 1441.24, 'end': 1448.6799999999998, 'text': ' 2 has this as the leftmost child, this as the rightmost child or the right child if you want', 'tokens': [50772, 568, 575, 341, 382, 264, 1411, 1761, 1440, 11, 341, 382, 264, 558, 1761, 1440, 420, 264, 558, 1440, 498, 291, 528, 51144], 'temperature': 0.0, 'avg_logprob': -0.11260162459479438, 'compression_ratio': 1.7627906976744185, 'no_speech_prob': 0.07112770527601242}, {'id': 225, 'seek': 143308, 'start': 1448.6799999999998, 'end': 1455.6399999999999, 'text': ' to call it, but this also has one of its parent not listed, correct. When you were in 2, 3 was', 'tokens': [51144, 281, 818, 309, 11, 457, 341, 611, 575, 472, 295, 1080, 2596, 406, 10052, 11, 3006, 13, 1133, 291, 645, 294, 568, 11, 805, 390, 51492], 'temperature': 0.0, 'avg_logprob': -0.11260162459479438, 'compression_ratio': 1.7627906976744185, 'no_speech_prob': 0.07112770527601242}, {'id': 226, 'seek': 143308, 'start': 1455.6399999999999, 'end': 1462.52, 'text': ' not listed. So, you have found that none of these nodes can be listed next. So, you go breath first.', 'tokens': [51492, 406, 10052, 13, 407, 11, 291, 362, 1352, 300, 6022, 295, 613, 13891, 393, 312, 10052, 958, 13, 407, 11, 291, 352, 6045, 700, 13, 51836], 'temperature': 0.0, 'avg_logprob': -0.11260162459479438, 'compression_ratio': 1.7627906976744185, 'no_speech_prob': 0.07112770527601242}, {'id': 227, 'seek': 146252, 'start': 1462.52, 'end': 1469.6399999999999, 'text': ' Correct, at that point in time you go breath first and then you go to the node 3. Node 3 can', 'tokens': [50364, 12753, 11, 412, 300, 935, 294, 565, 291, 352, 6045, 700, 293, 550, 291, 352, 281, 264, 9984, 805, 13, 38640, 805, 393, 50720], 'temperature': 0.0, 'avg_logprob': -0.12851395105060778, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.002811182988807559}, {'id': 228, 'seek': 146252, 'start': 1469.6399999999999, 'end': 1477.0, 'text': ' be listed because its parent has already been listed, right. Now, next is you look at the', 'tokens': [50720, 312, 10052, 570, 1080, 2596, 575, 1217, 668, 10052, 11, 558, 13, 823, 11, 958, 307, 291, 574, 412, 264, 51088], 'temperature': 0.0, 'avg_logprob': -0.12851395105060778, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.002811182988807559}, {'id': 229, 'seek': 146252, 'start': 1477.0, 'end': 1487.36, 'text': ' children of 3, 4. 4 can be listed because both 2 and 3 have been listed, right. Then you go depth', 'tokens': [51088, 2227, 295, 805, 11, 1017, 13, 1017, 393, 312, 10052, 570, 1293, 568, 293, 805, 362, 668, 10052, 11, 558, 13, 1396, 291, 352, 7161, 51606], 'temperature': 0.0, 'avg_logprob': -0.12851395105060778, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.002811182988807559}, {'id': 230, 'seek': 148736, 'start': 1487.36, 'end': 1501.12, 'text': ' first, right. 6 can be listed, right. 9 and 10 you do not list them because they are leaf nodes,', 'tokens': [50364, 700, 11, 558, 13, 1386, 393, 312, 10052, 11, 558, 13, 1722, 293, 1266, 291, 360, 406, 1329, 552, 570, 436, 366, 10871, 13891, 11, 51052], 'temperature': 0.0, 'avg_logprob': -0.1313739333833967, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.31918951869010925}, {'id': 231, 'seek': 148736, 'start': 1501.12, 'end': 1508.0, 'text': ' right. If they are leaf nodes, you do not list them now, right. Leave that, right. Then you go', 'tokens': [51052, 558, 13, 759, 436, 366, 10871, 13891, 11, 291, 360, 406, 1329, 552, 586, 11, 558, 13, 9825, 300, 11, 558, 13, 1396, 291, 352, 51396], 'temperature': 0.0, 'avg_logprob': -0.1313739333833967, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.31918951869010925}, {'id': 232, 'seek': 150800, 'start': 1508.0, 'end': 1516.96, 'text': ' up, go up. Sorry, I am sorry, I am going. I went in the opposite direction, sorry, right.', 'tokens': [50364, 493, 11, 352, 493, 13, 4919, 11, 286, 669, 2597, 11, 286, 669, 516, 13, 286, 1437, 294, 264, 6182, 3513, 11, 2597, 11, 558, 13, 50812], 'temperature': 0.0, 'avg_logprob': -0.14881689337235463, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.05237869173288345}, {'id': 233, 'seek': 150800, 'start': 1518.96, 'end': 1525.52, 'text': ' Then of course, you have finished the left child of 4. You have to go to the right child that is 8,', 'tokens': [50912, 1396, 295, 1164, 11, 291, 362, 4335, 264, 1411, 1440, 295, 1017, 13, 509, 362, 281, 352, 281, 264, 558, 1440, 300, 307, 1649, 11, 51240], 'temperature': 0.0, 'avg_logprob': -0.14881689337235463, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.05237869173288345}, {'id': 234, 'seek': 150800, 'start': 1526.48, 'end': 1532.24, 'text': ' right. Then its left child, 8 can be listed because 8 has only one parent that has already', 'tokens': [51288, 558, 13, 1396, 1080, 1411, 1440, 11, 1649, 393, 312, 10052, 570, 1649, 575, 787, 472, 2596, 300, 575, 1217, 51576], 'temperature': 0.0, 'avg_logprob': -0.14881689337235463, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.05237869173288345}, {'id': 235, 'seek': 153224, 'start': 1532.24, 'end': 1538.96, 'text': ' been listed, right. Then you go to 8. After 8 is done, 11 and 12 need not have to be listed', 'tokens': [50364, 668, 10052, 11, 558, 13, 1396, 291, 352, 281, 1649, 13, 2381, 1649, 307, 1096, 11, 2975, 293, 2272, 643, 406, 362, 281, 312, 10052, 50700], 'temperature': 0.0, 'avg_logprob': -0.058456746899351784, 'compression_ratio': 1.7136150234741785, 'no_speech_prob': 0.003951492719352245}, {'id': 236, 'seek': 153224, 'start': 1538.96, 'end': 1547.76, 'text': ' because they are leaf nodes. Now, this is your listing order, okay. Now, if you see this,', 'tokens': [50700, 570, 436, 366, 10871, 13891, 13, 823, 11, 341, 307, 428, 22161, 1668, 11, 1392, 13, 823, 11, 498, 291, 536, 341, 11, 51140], 'temperature': 0.0, 'avg_logprob': -0.058456746899351784, 'compression_ratio': 1.7136150234741785, 'no_speech_prob': 0.003951492719352245}, {'id': 237, 'seek': 153224, 'start': 1547.76, 'end': 1554.0, 'text': ' you will see that if I am going to generate code for 1 after generating code for 2 and 3,', 'tokens': [51140, 291, 486, 536, 300, 498, 286, 669, 516, 281, 8460, 3089, 337, 502, 934, 17746, 3089, 337, 568, 293, 805, 11, 51452], 'temperature': 0.0, 'avg_logprob': -0.058456746899351784, 'compression_ratio': 1.7136150234741785, 'no_speech_prob': 0.003951492719352245}, {'id': 238, 'seek': 153224, 'start': 1554.96, 'end': 1561.28, 'text': ' then these dependencies are satisfied, right. Similarly, if I am going to generate code for 2', 'tokens': [51500, 550, 613, 36606, 366, 11239, 11, 558, 13, 13157, 11, 498, 286, 669, 516, 281, 8460, 3089, 337, 568, 51816], 'temperature': 0.0, 'avg_logprob': -0.058456746899351784, 'compression_ratio': 1.7136150234741785, 'no_speech_prob': 0.003951492719352245}, {'id': 239, 'seek': 156128, 'start': 1561.92, 'end': 1570.48, 'text': ' after generating code for 4 and 6, that is correct because it depends on 4 and 6.', 'tokens': [50396, 934, 17746, 3089, 337, 1017, 293, 1386, 11, 300, 307, 3006, 570, 309, 5946, 322, 1017, 293, 1386, 13, 50824], 'temperature': 0.0, 'avg_logprob': -0.08734645416487509, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.0007039206684567034}, {'id': 240, 'seek': 156128, 'start': 1571.04, 'end': 1578.3999999999999, 'text': ' But even to generate 4, I need code for 5 that is below, correct. So, in some sense,', 'tokens': [50852, 583, 754, 281, 8460, 1017, 11, 286, 643, 3089, 337, 1025, 300, 307, 2507, 11, 3006, 13, 407, 11, 294, 512, 2020, 11, 51220], 'temperature': 0.0, 'avg_logprob': -0.08734645416487509, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.0007039206684567034}, {'id': 241, 'seek': 156128, 'start': 1578.3999999999999, 'end': 1585.12, 'text': ' if you look at this listing order, it essentially satisfy all my dependencies, correct.', 'tokens': [51220, 498, 291, 574, 412, 341, 22161, 1668, 11, 309, 4476, 19319, 439, 452, 36606, 11, 3006, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.08734645416487509, 'compression_ratio': 1.5776397515527951, 'no_speech_prob': 0.0007039206684567034}, {'id': 242, 'seek': 158512, 'start': 1585.12, 'end': 1589.6, 'text': ' It satisfies everything, right. Any questions?', 'tokens': [50364, 467, 44271, 1203, 11, 558, 13, 2639, 1651, 30, 50588], 'temperature': 0.0, 'avg_logprob': -0.3294649124145508, 'compression_ratio': 1.1720430107526882, 'no_speech_prob': 0.3007391393184662}, {'id': 243, 'seek': 158512, 'start': 1594.6399999999999, 'end': 1597.76, 'text': ' One step backward. No, no. What is your question?', 'tokens': [50840, 1485, 1823, 23897, 13, 883, 11, 572, 13, 708, 307, 428, 1168, 30, 50996], 'temperature': 0.0, 'avg_logprob': -0.3294649124145508, 'compression_ratio': 1.1720430107526882, 'no_speech_prob': 0.3007391393184662}, {'id': 244, 'seek': 158512, 'start': 1600.8, 'end': 1601.36, 'text': ' What is the?', 'tokens': [51148, 708, 307, 264, 30, 51176], 'temperature': 0.0, 'avg_logprob': -0.3294649124145508, 'compression_ratio': 1.1720430107526882, 'no_speech_prob': 0.3007391393184662}, {'id': 245, 'seek': 160136, 'start': 1601.36, 'end': 1616.4799999999998, 'text': ' What was the problem with that one, I said? It is the same thing. Just follow the same algorithm.', 'tokens': [50364, 708, 390, 264, 1154, 365, 300, 472, 11, 286, 848, 30, 467, 307, 264, 912, 551, 13, 1449, 1524, 264, 912, 9284, 13, 51120], 'temperature': 0.0, 'avg_logprob': -0.2641240824823794, 'compression_ratio': 1.5471698113207548, 'no_speech_prob': 0.024545203894376755}, {'id': 246, 'seek': 160136, 'start': 1617.6799999999998, 'end': 1622.0, 'text': ' Only thing is I chose to do the diagram, I mean, chose to do this example rather than that example,', 'tokens': [51180, 5686, 551, 307, 286, 5111, 281, 360, 264, 10686, 11, 286, 914, 11, 5111, 281, 360, 341, 1365, 2831, 813, 300, 1365, 11, 51396], 'temperature': 0.0, 'avg_logprob': -0.2641240824823794, 'compression_ratio': 1.5471698113207548, 'no_speech_prob': 0.024545203894376755}, {'id': 247, 'seek': 160136, 'start': 1622.7199999999998, 'end': 1629.6, 'text': ' okay. That are, that have, that are root, is it?', 'tokens': [51432, 1392, 13, 663, 366, 11, 300, 362, 11, 300, 366, 5593, 11, 307, 309, 30, 51776], 'temperature': 0.0, 'avg_logprob': -0.2641240824823794, 'compression_ratio': 1.5471698113207548, 'no_speech_prob': 0.024545203894376755}, {'id': 248, 'seek': 162960, 'start': 1630.24, 'end': 1633.1999999999998, 'text': ' That did not have any parent. Does not matter, you can start off with anything,', 'tokens': [50396, 663, 630, 406, 362, 604, 2596, 13, 4402, 406, 1871, 11, 291, 393, 722, 766, 365, 1340, 11, 50544], 'temperature': 0.0, 'avg_logprob': -0.13271518514937714, 'compression_ratio': 1.7992125984251968, 'no_speech_prob': 0.0016833541449159384}, {'id': 249, 'seek': 162960, 'start': 1635.6, 'end': 1640.48, 'text': ' okay. If you have multiple options, which one to choose, right, that is the first node.', 'tokens': [50664, 1392, 13, 759, 291, 362, 3866, 3956, 11, 597, 472, 281, 2826, 11, 558, 11, 300, 307, 264, 700, 9984, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.13271518514937714, 'compression_ratio': 1.7992125984251968, 'no_speech_prob': 0.0016833541449159384}, {'id': 250, 'seek': 162960, 'start': 1640.48, 'end': 1645.12, 'text': ' That is your question, sorry, I did not understand that. So, for example, if I have one more node,', 'tokens': [50908, 663, 307, 428, 1168, 11, 2597, 11, 286, 630, 406, 1223, 300, 13, 407, 11, 337, 1365, 11, 498, 286, 362, 472, 544, 9984, 11, 51140], 'temperature': 0.0, 'avg_logprob': -0.13271518514937714, 'compression_ratio': 1.7992125984251968, 'no_speech_prob': 0.0016833541449159384}, {'id': 251, 'seek': 162960, 'start': 1645.12, 'end': 1650.8799999999999, 'text': ' which did not have any parent, right, I can choose either one of them, right. Obviously,', 'tokens': [51140, 597, 630, 406, 362, 604, 2596, 11, 558, 11, 286, 393, 2826, 2139, 472, 295, 552, 11, 558, 13, 7580, 11, 51428], 'temperature': 0.0, 'avg_logprob': -0.13271518514937714, 'compression_ratio': 1.7992125984251968, 'no_speech_prob': 0.0016833541449159384}, {'id': 252, 'seek': 162960, 'start': 1650.8799999999999, 'end': 1656.3999999999999, 'text': ' one of them may be more efficient than the other one. I will tell you later on what is that efficient', 'tokens': [51428, 472, 295, 552, 815, 312, 544, 7148, 813, 264, 661, 472, 13, 286, 486, 980, 291, 1780, 322, 437, 307, 300, 7148, 51704], 'temperature': 0.0, 'avg_logprob': -0.13271518514937714, 'compression_ratio': 1.7992125984251968, 'no_speech_prob': 0.0016833541449159384}, {'id': 253, 'seek': 165640, 'start': 1656.4, 'end': 1662.48, 'text': ' means, but I am not guaranteeing that you will generate optimal code, right. You will generate', 'tokens': [50364, 1355, 11, 457, 286, 669, 406, 10815, 278, 300, 291, 486, 8460, 16252, 3089, 11, 558, 13, 509, 486, 8460, 50668], 'temperature': 0.0, 'avg_logprob': -0.12546092861301297, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.02103607915341854}, {'id': 254, 'seek': 165640, 'start': 1662.48, 'end': 1668.0, 'text': ' more efficient code, more efficient than the simple method, but there is no guarantee that this will', 'tokens': [50668, 544, 7148, 3089, 11, 544, 7148, 813, 264, 2199, 3170, 11, 457, 456, 307, 572, 10815, 300, 341, 486, 50944], 'temperature': 0.0, 'avg_logprob': -0.12546092861301297, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.02103607915341854}, {'id': 255, 'seek': 165640, 'start': 1668.0, 'end': 1673.3600000000001, 'text': ' be the best one, okay. Let us say, remember, we said that there are several possible orders in', 'tokens': [50944, 312, 264, 1151, 472, 11, 1392, 13, 961, 505, 584, 11, 1604, 11, 321, 848, 300, 456, 366, 2940, 1944, 9470, 294, 51212], 'temperature': 0.0, 'avg_logprob': -0.12546092861301297, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.02103607915341854}, {'id': 256, 'seek': 165640, 'start': 1673.3600000000001, 'end': 1679.76, 'text': ' which you can do that and that ordering essentially changes certain things, okay. We will, we are', 'tokens': [51212, 597, 291, 393, 360, 300, 293, 300, 21739, 4476, 2962, 1629, 721, 11, 1392, 13, 492, 486, 11, 321, 366, 51532], 'temperature': 0.0, 'avg_logprob': -0.12546092861301297, 'compression_ratio': 1.7321428571428572, 'no_speech_prob': 0.02103607915341854}, {'id': 257, 'seek': 167976, 'start': 1679.76, 'end': 1686.8799999999999, 'text': ' going to talk about it very, very soon. So, wait on that, okay, right. So, if I had multiple options,', 'tokens': [50364, 516, 281, 751, 466, 309, 588, 11, 588, 2321, 13, 407, 11, 1699, 322, 300, 11, 1392, 11, 558, 13, 407, 11, 498, 286, 632, 3866, 3956, 11, 50720], 'temperature': 0.0, 'avg_logprob': -0.10093644585939918, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.0026559883262962103}, {'id': 258, 'seek': 167976, 'start': 1686.8799999999999, 'end': 1693.12, 'text': ' I would have chosen one of them and that may, may not necessarily be the best one. That,', 'tokens': [50720, 286, 576, 362, 8614, 472, 295, 552, 293, 300, 815, 11, 815, 406, 4725, 312, 264, 1151, 472, 13, 663, 11, 51032], 'temperature': 0.0, 'avg_logprob': -0.10093644585939918, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.0026559883262962103}, {'id': 259, 'seek': 167976, 'start': 1693.12, 'end': 1701.44, 'text': ' that is really what it is, okay. Now, having done this, okay, we basically have this evaluation', 'tokens': [51032, 300, 307, 534, 437, 309, 307, 11, 1392, 13, 823, 11, 1419, 1096, 341, 11, 1392, 11, 321, 1936, 362, 341, 13344, 51448], 'temperature': 0.0, 'avg_logprob': -0.10093644585939918, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.0026559883262962103}, {'id': 260, 'seek': 167976, 'start': 1701.44, 'end': 1708.16, 'text': ' order in the following way, right. I am also including all the leaf nodes in this evaluation,', 'tokens': [51448, 1668, 294, 264, 3480, 636, 11, 558, 13, 286, 669, 611, 3009, 439, 264, 10871, 13891, 294, 341, 13344, 11, 51784], 'temperature': 0.0, 'avg_logprob': -0.10093644585939918, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.0026559883262962103}, {'id': 261, 'seek': 170816, 'start': 1708.8000000000002, 'end': 1719.92, 'text': ' right. So, in order for me to evaluate 8, I need 11 and 12. So, start with 11, then 12, then 8,', 'tokens': [50396, 558, 13, 407, 11, 294, 1668, 337, 385, 281, 13059, 1649, 11, 286, 643, 2975, 293, 2272, 13, 407, 11, 722, 365, 2975, 11, 550, 2272, 11, 550, 1649, 11, 50952], 'temperature': 0.0, 'avg_logprob': -0.09714083517751386, 'compression_ratio': 1.5294117647058822, 'no_speech_prob': 0.0043401895090937614}, {'id': 262, 'seek': 170816, 'start': 1720.5600000000002, 'end': 1732.0800000000002, 'text': ' okay. Then we have 6 and in order for me to evaluate 6, I need 9 and 10, okay. Then 6,', 'tokens': [50984, 1392, 13, 1396, 321, 362, 1386, 293, 294, 1668, 337, 385, 281, 13059, 1386, 11, 286, 643, 1722, 293, 1266, 11, 1392, 13, 1396, 1386, 11, 51560], 'temperature': 0.0, 'avg_logprob': -0.09714083517751386, 'compression_ratio': 1.5294117647058822, 'no_speech_prob': 0.0043401895090937614}, {'id': 263, 'seek': 173208, 'start': 1732.08, 'end': 1744.8799999999999, 'text': ' in order for me to evaluate 5, I need 7, okay. 5, 4, in order for me to evaluate 3, well,', 'tokens': [50364, 294, 1668, 337, 385, 281, 13059, 1025, 11, 286, 643, 1614, 11, 1392, 13, 1025, 11, 1017, 11, 294, 1668, 337, 385, 281, 13059, 805, 11, 731, 11, 51004], 'temperature': 0.0, 'avg_logprob': -0.14379689001267956, 'compression_ratio': 1.453125, 'no_speech_prob': 0.002223575720563531}, {'id': 264, 'seek': 173208, 'start': 1744.8799999999999, 'end': 1754.56, 'text': ' I have already evaluated 12, so I do not need to worry about it. So, 3, 2 and 2, okay. Question?', 'tokens': [51004, 286, 362, 1217, 25509, 2272, 11, 370, 286, 360, 406, 643, 281, 3292, 466, 309, 13, 407, 11, 805, 11, 568, 293, 568, 11, 1392, 13, 14464, 30, 51488], 'temperature': 0.0, 'avg_logprob': -0.14379689001267956, 'compression_ratio': 1.453125, 'no_speech_prob': 0.002223575720563531}, {'id': 265, 'seek': 175456, 'start': 1754.56, 'end': 1766.1599999999999, 'text': ' Go ahead. No question? Okay, right. So, essentially we have listed all the internal', 'tokens': [50364, 1037, 2286, 13, 883, 1168, 30, 1033, 11, 558, 13, 407, 11, 4476, 321, 362, 10052, 439, 264, 6920, 50944], 'temperature': 0.0, 'avg_logprob': -0.1083782964677953, 'compression_ratio': 1.5808383233532934, 'no_speech_prob': 0.0010341168381273746}, {'id': 266, 'seek': 175456, 'start': 1766.1599999999999, 'end': 1772.3999999999999, 'text': ' nodes in this order and when you generate code, you have to go in the reverse order.', 'tokens': [50944, 13891, 294, 341, 1668, 293, 562, 291, 8460, 3089, 11, 291, 362, 281, 352, 294, 264, 9943, 1668, 13, 51256], 'temperature': 0.0, 'avg_logprob': -0.1083782964677953, 'compression_ratio': 1.5808383233532934, 'no_speech_prob': 0.0010341168381273746}, {'id': 267, 'seek': 175456, 'start': 1772.3999999999999, 'end': 1778.96, 'text': ' But before you generate code for 8, you have to make sure that the leaf nodes are also covered.', 'tokens': [51256, 583, 949, 291, 8460, 3089, 337, 1649, 11, 291, 362, 281, 652, 988, 300, 264, 10871, 13891, 366, 611, 5343, 13, 51584], 'temperature': 0.0, 'avg_logprob': -0.1083782964677953, 'compression_ratio': 1.5808383233532934, 'no_speech_prob': 0.0010341168381273746}, {'id': 268, 'seek': 177896, 'start': 1779.52, 'end': 1784.4, 'text': ' The reason that we do the leaf nodes in the end is also the following. For example,', 'tokens': [50392, 440, 1778, 300, 321, 360, 264, 10871, 13891, 294, 264, 917, 307, 611, 264, 3480, 13, 1171, 1365, 11, 50636], 'temperature': 0.0, 'avg_logprob': -0.07755286876971905, 'compression_ratio': 1.6214953271028036, 'no_speech_prob': 0.012400155887007713}, {'id': 269, 'seek': 177896, 'start': 1784.4, 'end': 1790.64, 'text': ' I have 11 and 12 here in order for me to calculate 8 or in order for me to generate code for 8.', 'tokens': [50636, 286, 362, 2975, 293, 2272, 510, 294, 1668, 337, 385, 281, 8873, 1649, 420, 294, 1668, 337, 385, 281, 8460, 3089, 337, 1649, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.07755286876971905, 'compression_ratio': 1.6214953271028036, 'no_speech_prob': 0.012400155887007713}, {'id': 270, 'seek': 177896, 'start': 1791.52, 'end': 1795.6000000000001, 'text': ' Now, later on you will see schemes in which you will say that the left node,', 'tokens': [50992, 823, 11, 1780, 322, 291, 486, 536, 26954, 294, 597, 291, 486, 584, 300, 264, 1411, 9984, 11, 51196], 'temperature': 0.0, 'avg_logprob': -0.07755286876971905, 'compression_ratio': 1.6214953271028036, 'no_speech_prob': 0.012400155887007713}, {'id': 271, 'seek': 177896, 'start': 1796.4, 'end': 1801.52, 'text': ' this is specifically for CISC code generation, the left node is first moved to a register,', 'tokens': [51236, 341, 307, 4682, 337, 383, 2343, 34, 3089, 5125, 11, 264, 1411, 9984, 307, 700, 4259, 281, 257, 7280, 11, 51492], 'temperature': 0.0, 'avg_logprob': -0.07755286876971905, 'compression_ratio': 1.6214953271028036, 'no_speech_prob': 0.012400155887007713}, {'id': 272, 'seek': 180152, 'start': 1802.48, 'end': 1809.2, 'text': ' the right node can be in memory, then this operation is register memory operation result', 'tokens': [50412, 264, 558, 9984, 393, 312, 294, 4675, 11, 550, 341, 6916, 307, 7280, 4675, 6916, 1874, 50748], 'temperature': 0.0, 'avg_logprob': -0.10483264923095703, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0021561989560723305}, {'id': 273, 'seek': 180152, 'start': 1809.2, 'end': 1815.92, 'text': ' going into register, right. So, that way what I will do is that I will do a move operation for', 'tokens': [50748, 516, 666, 7280, 11, 558, 13, 407, 11, 300, 636, 437, 286, 486, 360, 307, 300, 286, 486, 360, 257, 1286, 6916, 337, 51084], 'temperature': 0.0, 'avg_logprob': -0.10483264923095703, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0021561989560723305}, {'id': 274, 'seek': 180152, 'start': 1815.92, 'end': 1823.44, 'text': ' this. I do not need to generate any code for 12, I can generate code for 8 or I can generate a', 'tokens': [51084, 341, 13, 286, 360, 406, 643, 281, 8460, 604, 3089, 337, 2272, 11, 286, 393, 8460, 3089, 337, 1649, 420, 286, 393, 8460, 257, 51460], 'temperature': 0.0, 'avg_logprob': -0.10483264923095703, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0021561989560723305}, {'id': 275, 'seek': 180152, 'start': 1823.44, 'end': 1830.96, 'text': ' move operation for this, a move operation for this and an operation with two registers for this,', 'tokens': [51460, 1286, 6916, 337, 341, 11, 257, 1286, 6916, 337, 341, 293, 364, 6916, 365, 732, 38351, 337, 341, 11, 51836], 'temperature': 0.0, 'avg_logprob': -0.10483264923095703, 'compression_ratio': 2.106741573033708, 'no_speech_prob': 0.0021561989560723305}, {'id': 276, 'seek': 183096, 'start': 1830.96, 'end': 1835.52, 'text': ' either one of them I can do. So, the correct order is to traverse the nodes', 'tokens': [50364, 2139, 472, 295, 552, 286, 393, 360, 13, 407, 11, 264, 3006, 1668, 307, 281, 45674, 264, 13891, 50592], 'temperature': 0.0, 'avg_logprob': -0.11801643598647345, 'compression_ratio': 1.7323232323232323, 'no_speech_prob': 0.0003427997580729425}, {'id': 277, 'seek': 183096, 'start': 1837.3600000000001, 'end': 1844.08, 'text': ' top down using that algorithm and then when you want to generate code, you go bottom up,', 'tokens': [50684, 1192, 760, 1228, 300, 9284, 293, 550, 562, 291, 528, 281, 8460, 3089, 11, 291, 352, 2767, 493, 11, 51020], 'temperature': 0.0, 'avg_logprob': -0.11801643598647345, 'compression_ratio': 1.7323232323232323, 'no_speech_prob': 0.0003427997580729425}, {'id': 278, 'seek': 183096, 'start': 1845.68, 'end': 1851.04, 'text': ' first generating code for all the leaf nodes and then for the other nodes and so on, right.', 'tokens': [51100, 700, 17746, 3089, 337, 439, 264, 10871, 13891, 293, 550, 337, 264, 661, 13891, 293, 370, 322, 11, 558, 13, 51368], 'temperature': 0.0, 'avg_logprob': -0.11801643598647345, 'compression_ratio': 1.7323232323232323, 'no_speech_prob': 0.0003427997580729425}, {'id': 279, 'seek': 183096, 'start': 1853.76, 'end': 1859.28, 'text': ' So, what we have seen so far is code generation, DAC construction and code generation.', 'tokens': [51504, 407, 11, 437, 321, 362, 1612, 370, 1400, 307, 3089, 5125, 11, 39038, 6435, 293, 3089, 5125, 13, 51780], 'temperature': 0.0, 'avg_logprob': -0.11801643598647345, 'compression_ratio': 1.7323232323232323, 'no_speech_prob': 0.0003427997580729425}, {'id': 280, 'seek': 186096, 'start': 1861.04, 'end': 1869.28, 'text': ' Now, this part we saw as was pointed out depending on which root node I choose,', 'tokens': [50368, 823, 11, 341, 644, 321, 1866, 382, 390, 10932, 484, 5413, 322, 597, 5593, 9984, 286, 2826, 11, 50780], 'temperature': 0.0, 'avg_logprob': -0.13678693771362305, 'compression_ratio': 1.456043956043956, 'no_speech_prob': 0.0002526298048906028}, {'id': 281, 'seek': 186096, 'start': 1869.28, 'end': 1875.76, 'text': ' my ordering might change, okay and this may necessarily generate different sets of code,', 'tokens': [50780, 452, 21739, 1062, 1319, 11, 1392, 293, 341, 815, 4725, 8460, 819, 6352, 295, 3089, 11, 51104], 'temperature': 0.0, 'avg_logprob': -0.13678693771362305, 'compression_ratio': 1.456043956043956, 'no_speech_prob': 0.0002526298048906028}, {'id': 282, 'seek': 186096, 'start': 1876.4, 'end': 1884.8, 'text': ' right. We will talk about the notion of optimal code generation and then say that when my DAC is', 'tokens': [51136, 558, 13, 492, 486, 751, 466, 264, 10710, 295, 16252, 3089, 5125, 293, 550, 584, 300, 562, 452, 39038, 307, 51556], 'temperature': 0.0, 'avg_logprob': -0.13678693771362305, 'compression_ratio': 1.456043956043956, 'no_speech_prob': 0.0002526298048906028}, {'id': 283, 'seek': 188480, 'start': 1884.8, 'end': 1892.0, 'text': ' a tree, right, how this optimal, how this code generation schemes turns out to be an', 'tokens': [50364, 257, 4230, 11, 558, 11, 577, 341, 16252, 11, 577, 341, 3089, 5125, 26954, 4523, 484, 281, 312, 364, 50724], 'temperature': 0.0, 'avg_logprob': -0.13288147385055954, 'compression_ratio': 1.8714859437751004, 'no_speech_prob': 0.01167786680161953}, {'id': 284, 'seek': 188480, 'start': 1892.0, 'end': 1896.56, 'text': ' optimal code generation scheme, that is really what we are going to see. For that we are going', 'tokens': [50724, 16252, 3089, 5125, 12232, 11, 300, 307, 534, 437, 321, 366, 516, 281, 536, 13, 1171, 300, 321, 366, 516, 50952], 'temperature': 0.0, 'avg_logprob': -0.13288147385055954, 'compression_ratio': 1.8714859437751004, 'no_speech_prob': 0.01167786680161953}, {'id': 285, 'seek': 188480, 'start': 1896.56, 'end': 1902.3999999999999, 'text': ' to first talk about this algorithm called Seti-Wulman algorithm, this was developed way back in the 70s.', 'tokens': [50952, 281, 700, 751, 466, 341, 9284, 1219, 8928, 72, 12, 54, 425, 1601, 9284, 11, 341, 390, 4743, 636, 646, 294, 264, 5285, 82, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.13288147385055954, 'compression_ratio': 1.8714859437751004, 'no_speech_prob': 0.01167786680161953}, {'id': 286, 'seek': 188480, 'start': 1902.3999999999999, 'end': 1907.76, 'text': ' So, first we will talk about that. Then of course, we will talk about dynamic programming approach', 'tokens': [51244, 407, 11, 700, 321, 486, 751, 466, 300, 13, 1396, 295, 1164, 11, 321, 486, 751, 466, 8546, 9410, 3109, 51512], 'temperature': 0.0, 'avg_logprob': -0.13288147385055954, 'compression_ratio': 1.8714859437751004, 'no_speech_prob': 0.01167786680161953}, {'id': 287, 'seek': 188480, 'start': 1908.48, 'end': 1913.2, 'text': ' and then we will also talk about tree pattern matching and then conclude this with', 'tokens': [51548, 293, 550, 321, 486, 611, 751, 466, 4230, 5102, 14324, 293, 550, 16886, 341, 365, 51784], 'temperature': 0.0, 'avg_logprob': -0.13288147385055954, 'compression_ratio': 1.8714859437751004, 'no_speech_prob': 0.01167786680161953}, {'id': 288, 'seek': 191320, 'start': 1913.2, 'end': 1917.92, 'text': ' people optimization. Any questions so far? DAC construction is clear?', 'tokens': [50364, 561, 19618, 13, 2639, 1651, 370, 1400, 30, 39038, 6435, 307, 1850, 30, 50600], 'temperature': 0.0, 'avg_logprob': -0.14699354939077092, 'compression_ratio': 1.6325581395348838, 'no_speech_prob': 0.004046930465847254}, {'id': 289, 'seek': 191320, 'start': 1918.88, 'end': 1925.68, 'text': ' So, given a basic block, you first construct the DAC and if that DAC happens to be a tree,', 'tokens': [50648, 407, 11, 2212, 257, 3875, 3461, 11, 291, 700, 7690, 264, 39038, 293, 498, 300, 39038, 2314, 281, 312, 257, 4230, 11, 50988], 'temperature': 0.0, 'avg_logprob': -0.14699354939077092, 'compression_ratio': 1.6325581395348838, 'no_speech_prob': 0.004046930465847254}, {'id': 290, 'seek': 191320, 'start': 1926.64, 'end': 1932.48, 'text': ' then you can use any one of these two algorithms to generate efficient code for that. That is an', 'tokens': [51036, 550, 291, 393, 764, 604, 472, 295, 613, 732, 14642, 281, 8460, 7148, 3089, 337, 300, 13, 663, 307, 364, 51328], 'temperature': 0.0, 'avg_logprob': -0.14699354939077092, 'compression_ratio': 1.6325581395348838, 'no_speech_prob': 0.004046930465847254}, {'id': 291, 'seek': 191320, 'start': 1932.48, 'end': 1937.6000000000001, 'text': ' optimal code generator, okay. We will see what optimality is that, right, what is optimality,', 'tokens': [51328, 16252, 3089, 19265, 11, 1392, 13, 492, 486, 536, 437, 5028, 1860, 307, 300, 11, 558, 11, 437, 307, 5028, 1860, 11, 51584], 'temperature': 0.0, 'avg_logprob': -0.14699354939077092, 'compression_ratio': 1.6325581395348838, 'no_speech_prob': 0.004046930465847254}, {'id': 292, 'seek': 193760, 'start': 1938.3999999999999, 'end': 1945.52, 'text': ' right. So, again when you talk about code generation, the order of evaluation of expression', 'tokens': [50404, 558, 13, 407, 11, 797, 562, 291, 751, 466, 3089, 5125, 11, 264, 1668, 295, 13344, 295, 6114, 50760], 'temperature': 0.0, 'avg_logprob': -0.07770398222369912, 'compression_ratio': 1.6495327102803738, 'no_speech_prob': 0.002474038628861308}, {'id': 293, 'seek': 193760, 'start': 1945.52, 'end': 1950.48, 'text': ' really matters and that essentially influences the quality of the code generated.', 'tokens': [50760, 534, 7001, 293, 300, 4476, 21222, 264, 3125, 295, 264, 3089, 10833, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.07770398222369912, 'compression_ratio': 1.6495327102803738, 'no_speech_prob': 0.002474038628861308}, {'id': 294, 'seek': 193760, 'start': 1951.52, 'end': 1956.32, 'text': ' Now, I will actually go more into this problem when we talk about the Seti-Wulman algorithm', 'tokens': [51060, 823, 11, 286, 486, 767, 352, 544, 666, 341, 1154, 562, 321, 751, 466, 264, 8928, 72, 12, 54, 425, 1601, 9284, 51300], 'temperature': 0.0, 'avg_logprob': -0.07770398222369912, 'compression_ratio': 1.6495327102803738, 'no_speech_prob': 0.002474038628861308}, {'id': 295, 'seek': 193760, 'start': 1956.32, 'end': 1961.12, 'text': ' and then talk in the context of using the number of registers, stores and other things.', 'tokens': [51300, 293, 550, 751, 294, 264, 4319, 295, 1228, 264, 1230, 295, 38351, 11, 9512, 293, 661, 721, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.07770398222369912, 'compression_ratio': 1.6495327102803738, 'no_speech_prob': 0.002474038628861308}, {'id': 296, 'seek': 196112, 'start': 1961.12, 'end': 1969.12, 'text': ' So, the problem is how do we determine the optimal code generation order for a basic block', 'tokens': [50364, 407, 11, 264, 1154, 307, 577, 360, 321, 6997, 264, 16252, 3089, 5125, 1668, 337, 257, 3875, 3461, 50764], 'temperature': 0.0, 'avg_logprob': -0.1256269655729595, 'compression_ratio': 1.6017699115044248, 'no_speech_prob': 0.005798898637294769}, {'id': 297, 'seek': 196112, 'start': 1969.12, 'end': 1975.76, 'text': ' specified in the DAC representation. If it is in the DAC, this problem is NP-HOT, okay.', 'tokens': [50764, 22206, 294, 264, 39038, 10290, 13, 759, 309, 307, 294, 264, 39038, 11, 341, 1154, 307, 38611, 12, 39, 5068, 11, 1392, 13, 51096], 'temperature': 0.0, 'avg_logprob': -0.1256269655729595, 'compression_ratio': 1.6017699115044248, 'no_speech_prob': 0.005798898637294769}, {'id': 298, 'seek': 196112, 'start': 1975.76, 'end': 1983.36, 'text': ' But if this happens to be a tree, then we can actually do it in polynomial time, right. So,', 'tokens': [51096, 583, 498, 341, 2314, 281, 312, 257, 4230, 11, 550, 321, 393, 767, 360, 309, 294, 26110, 565, 11, 558, 13, 407, 11, 51476], 'temperature': 0.0, 'avg_logprob': -0.1256269655729595, 'compression_ratio': 1.6017699115044248, 'no_speech_prob': 0.005798898637294769}, {'id': 299, 'seek': 196112, 'start': 1983.9199999999998, 'end': 1989.12, 'text': ' when we say optimal, what we really mean is that it is optimal in terms of the code length,', 'tokens': [51504, 562, 321, 584, 16252, 11, 437, 321, 534, 914, 307, 300, 309, 307, 16252, 294, 2115, 295, 264, 3089, 4641, 11, 51764], 'temperature': 0.0, 'avg_logprob': -0.1256269655729595, 'compression_ratio': 1.6017699115044248, 'no_speech_prob': 0.005798898637294769}, {'id': 300, 'seek': 198912, 'start': 1989.12, 'end': 1994.9599999999998, 'text': ' number of instructions that are generated, okay. And it is also optimal in terms of the number of', 'tokens': [50364, 1230, 295, 9415, 300, 366, 10833, 11, 1392, 13, 400, 309, 307, 611, 16252, 294, 2115, 295, 264, 1230, 295, 50656], 'temperature': 0.0, 'avg_logprob': -0.08408196954166187, 'compression_ratio': 1.8428571428571427, 'no_speech_prob': 0.0011741097550839186}, {'id': 301, 'seek': 198912, 'start': 1994.9599999999998, 'end': 2000.4799999999998, 'text': ' registers that were used because often times what you are given is that you are given a basic block', 'tokens': [50656, 38351, 300, 645, 1143, 570, 2049, 1413, 437, 291, 366, 2212, 307, 300, 291, 366, 2212, 257, 3875, 3461, 50932], 'temperature': 0.0, 'avg_logprob': -0.08408196954166187, 'compression_ratio': 1.8428571428571427, 'no_speech_prob': 0.0011741097550839186}, {'id': 302, 'seek': 198912, 'start': 2000.4799999999998, 'end': 2006.32, 'text': ' and you have a machine architecture which says that you have this many free registers available', 'tokens': [50932, 293, 291, 362, 257, 3479, 9482, 597, 1619, 300, 291, 362, 341, 867, 1737, 38351, 2435, 51224], 'temperature': 0.0, 'avg_logprob': -0.08408196954166187, 'compression_ratio': 1.8428571428571427, 'no_speech_prob': 0.0011741097550839186}, {'id': 303, 'seek': 198912, 'start': 2006.32, 'end': 2012.3999999999999, 'text': ' for you which can be used for generating code for this, right. And if the number of registers', 'tokens': [51224, 337, 291, 597, 393, 312, 1143, 337, 17746, 3089, 337, 341, 11, 558, 13, 400, 498, 264, 1230, 295, 38351, 51528], 'temperature': 0.0, 'avg_logprob': -0.08408196954166187, 'compression_ratio': 1.8428571428571427, 'no_speech_prob': 0.0011741097550839186}, {'id': 304, 'seek': 201240, 'start': 2012.4, 'end': 2019.6000000000001, 'text': ' available is fewer than what this thing minimally requires, then you will generate code which will', 'tokens': [50364, 2435, 307, 13366, 813, 437, 341, 551, 4464, 379, 7029, 11, 550, 291, 486, 8460, 3089, 597, 486, 50724], 'temperature': 0.0, 'avg_logprob': -0.05858027103335359, 'compression_ratio': 1.7345971563981042, 'no_speech_prob': 0.08016213029623032}, {'id': 305, 'seek': 201240, 'start': 2019.6000000000001, 'end': 2026.5600000000002, 'text': ' involve spills, spill loads and stores and that will again add to additional code and that is why', 'tokens': [50724, 9494, 637, 2565, 11, 22044, 12668, 293, 9512, 293, 300, 486, 797, 909, 281, 4497, 3089, 293, 300, 307, 983, 51072], 'temperature': 0.0, 'avg_logprob': -0.05858027103335359, 'compression_ratio': 1.7345971563981042, 'no_speech_prob': 0.08016213029623032}, {'id': 306, 'seek': 201240, 'start': 2026.5600000000002, 'end': 2031.6000000000001, 'text': ' your code may not be optimal. So, we really have to see how do we do this efficiently', 'tokens': [51072, 428, 3089, 815, 406, 312, 16252, 13, 407, 11, 321, 534, 362, 281, 536, 577, 360, 321, 360, 341, 19621, 51324], 'temperature': 0.0, 'avg_logprob': -0.05858027103335359, 'compression_ratio': 1.7345971563981042, 'no_speech_prob': 0.08016213029623032}, {'id': 307, 'seek': 201240, 'start': 2032.16, 'end': 2037.92, 'text': ' and if this happens to be a tree, we can actually generate this efficiently, right.', 'tokens': [51352, 293, 498, 341, 2314, 281, 312, 257, 4230, 11, 321, 393, 767, 8460, 341, 19621, 11, 558, 13, 51640], 'temperature': 0.0, 'avg_logprob': -0.05858027103335359, 'compression_ratio': 1.7345971563981042, 'no_speech_prob': 0.08016213029623032}, {'id': 308, 'seek': 203792, 'start': 2037.92, 'end': 2043.6000000000001, 'text': ' So, if the DAG is a tree, then either we can use the Seti-Wulman algorithm or we can use', 'tokens': [50364, 407, 11, 498, 264, 9578, 38, 307, 257, 4230, 11, 550, 2139, 321, 393, 764, 264, 8928, 72, 12, 54, 425, 1601, 9284, 420, 321, 393, 764, 50648], 'temperature': 0.0, 'avg_logprob': -0.08996866299555852, 'compression_ratio': 1.63135593220339, 'no_speech_prob': 0.0048343222588300705}, {'id': 309, 'seek': 203792, 'start': 2043.6000000000001, 'end': 2050.2400000000002, 'text': ' dynamic programming and we can solve that problem, okay. So, again let us take another example here,', 'tokens': [50648, 8546, 9410, 293, 321, 393, 5039, 300, 1154, 11, 1392, 13, 407, 11, 797, 718, 505, 747, 1071, 1365, 510, 11, 50980], 'temperature': 0.0, 'avg_logprob': -0.08996866299555852, 'compression_ratio': 1.63135593220339, 'no_speech_prob': 0.0048343222588300705}, {'id': 310, 'seek': 203792, 'start': 2050.88, 'end': 2059.2000000000003, 'text': ' right. Here we have a piece of four instructions, okay. Now, what we will do is that we will try', 'tokens': [51012, 558, 13, 1692, 321, 362, 257, 2522, 295, 1451, 9415, 11, 1392, 13, 823, 11, 437, 321, 486, 360, 307, 300, 321, 486, 853, 51428], 'temperature': 0.0, 'avg_logprob': -0.08996866299555852, 'compression_ratio': 1.63135593220339, 'no_speech_prob': 0.0048343222588300705}, {'id': 311, 'seek': 203792, 'start': 2059.2000000000003, 'end': 2065.84, 'text': ' to generate code for this, right, without really thinking too much about it, right. By that what I', 'tokens': [51428, 281, 8460, 3089, 337, 341, 11, 558, 11, 1553, 534, 1953, 886, 709, 466, 309, 11, 558, 13, 3146, 300, 437, 286, 51760], 'temperature': 0.0, 'avg_logprob': -0.08996866299555852, 'compression_ratio': 1.63135593220339, 'no_speech_prob': 0.0048343222588300705}, {'id': 312, 'seek': 206584, 'start': 2065.84, 'end': 2071.76, 'text': ' mean is that we will use the DAG. This is also a DAG, but it is a tree, right. It is a directed', 'tokens': [50364, 914, 307, 300, 321, 486, 764, 264, 9578, 38, 13, 639, 307, 611, 257, 9578, 38, 11, 457, 309, 307, 257, 4230, 11, 558, 13, 467, 307, 257, 12898, 50660], 'temperature': 0.0, 'avg_logprob': -0.09886891234154795, 'compression_ratio': 1.691588785046729, 'no_speech_prob': 0.003641892923042178}, {'id': 313, 'seek': 206584, 'start': 2071.76, 'end': 2079.6000000000004, 'text': ' acyclic graph, right and it specifies all the dependencies, okay. Internal nodes are operations', 'tokens': [50660, 696, 88, 66, 1050, 4295, 11, 558, 293, 309, 1608, 11221, 439, 264, 36606, 11, 1392, 13, 47836, 13891, 366, 7705, 51052], 'temperature': 0.0, 'avg_logprob': -0.09886891234154795, 'compression_ratio': 1.691588785046729, 'no_speech_prob': 0.003641892923042178}, {'id': 314, 'seek': 206584, 'start': 2079.6000000000004, 'end': 2086.32, 'text': ' and leaf nodes are, okay, variables. Now, if you are given this graph and you want to', 'tokens': [51052, 293, 10871, 13891, 366, 11, 1392, 11, 9102, 13, 823, 11, 498, 291, 366, 2212, 341, 4295, 293, 291, 528, 281, 51388], 'temperature': 0.0, 'avg_logprob': -0.09886891234154795, 'compression_ratio': 1.691588785046729, 'no_speech_prob': 0.003641892923042178}, {'id': 315, 'seek': 206584, 'start': 2086.32, 'end': 2092.56, 'text': ' generate code for this, okay, and you are going to generate code for a Sysc machine,', 'tokens': [51388, 8460, 3089, 337, 341, 11, 1392, 11, 293, 291, 366, 516, 281, 8460, 3089, 337, 257, 318, 749, 66, 3479, 11, 51700], 'temperature': 0.0, 'avg_logprob': -0.09886891234154795, 'compression_ratio': 1.691588785046729, 'no_speech_prob': 0.003641892923042178}, {'id': 316, 'seek': 209256, 'start': 2092.56, 'end': 2100.48, 'text': ' right and this supports only one memory operand in an arithmetic instruction. That means that the', 'tokens': [50364, 558, 293, 341, 9346, 787, 472, 4675, 2208, 474, 294, 364, 42973, 10951, 13, 663, 1355, 300, 264, 50760], 'temperature': 0.0, 'avg_logprob': -0.12737977504730225, 'compression_ratio': 1.625, 'no_speech_prob': 0.007898684591054916}, {'id': 317, 'seek': 209256, 'start': 2100.48, 'end': 2107.2, 'text': ' other operand has to be in register, okay. So, the left operand is same register as the destination,', 'tokens': [50760, 661, 2208, 474, 575, 281, 312, 294, 7280, 11, 1392, 13, 407, 11, 264, 1411, 2208, 474, 307, 912, 7280, 382, 264, 12236, 11, 51096], 'temperature': 0.0, 'avg_logprob': -0.12737977504730225, 'compression_ratio': 1.625, 'no_speech_prob': 0.007898684591054916}, {'id': 318, 'seek': 209256, 'start': 2108.16, 'end': 2114.56, 'text': ' okay. That is really what it says, okay. Also, I will say that in this particular code,', 'tokens': [51144, 1392, 13, 663, 307, 534, 437, 309, 1619, 11, 1392, 13, 2743, 11, 286, 486, 584, 300, 294, 341, 1729, 3089, 11, 51464], 'temperature': 0.0, 'avg_logprob': -0.12737977504730225, 'compression_ratio': 1.625, 'no_speech_prob': 0.007898684591054916}, {'id': 319, 'seek': 211456, 'start': 2115.2, 'end': 2123.6, 'text': ' ABCD are the program variables, ABCDE are the program variables, T1, T2, T3, T4 are temporaries', 'tokens': [50396, 22342, 35, 366, 264, 1461, 9102, 11, 22342, 22296, 366, 264, 1461, 9102, 11, 314, 16, 11, 314, 17, 11, 314, 18, 11, 314, 19, 366, 8219, 4889, 50816], 'temperature': 0.0, 'avg_logprob': -0.10623015913852425, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.023797662928700447}, {'id': 320, 'seek': 211456, 'start': 2124.16, 'end': 2131.36, 'text': ' and at the end of the basic block only T4 is live. That means that I do not really need to worry', 'tokens': [50844, 293, 412, 264, 917, 295, 264, 3875, 3461, 787, 314, 19, 307, 1621, 13, 663, 1355, 300, 286, 360, 406, 534, 643, 281, 3292, 51204], 'temperature': 0.0, 'avg_logprob': -0.10623015913852425, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.023797662928700447}, {'id': 321, 'seek': 211456, 'start': 2131.36, 'end': 2138.32, 'text': ' about the values of T1, T2, T3 after this basic block. That means that I do not have to save', 'tokens': [51204, 466, 264, 4190, 295, 314, 16, 11, 314, 17, 11, 314, 18, 934, 341, 3875, 3461, 13, 663, 1355, 300, 286, 360, 406, 362, 281, 3155, 51552], 'temperature': 0.0, 'avg_logprob': -0.10623015913852425, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.023797662928700447}, {'id': 322, 'seek': 213832, 'start': 2138.32, 'end': 2144.8, 'text': ' these values in some memory locations, right, okay. So, what you are going to do is that since', 'tokens': [50364, 613, 4190, 294, 512, 4675, 9253, 11, 558, 11, 1392, 13, 407, 11, 437, 291, 366, 516, 281, 360, 307, 300, 1670, 50688], 'temperature': 0.0, 'avg_logprob': -0.07419050132835305, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.01163775660097599}, {'id': 323, 'seek': 213832, 'start': 2144.8, 'end': 2149.76, 'text': ' you are going to generate code for each basic block, at the end of each basic block,', 'tokens': [50688, 291, 366, 516, 281, 8460, 3089, 337, 1184, 3875, 3461, 11, 412, 264, 917, 295, 1184, 3875, 3461, 11, 50936], 'temperature': 0.0, 'avg_logprob': -0.07419050132835305, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.01163775660097599}, {'id': 324, 'seek': 213832, 'start': 2149.76, 'end': 2154.0800000000004, 'text': ' we have to make sure that any variable which is live outside that basic block,', 'tokens': [50936, 321, 362, 281, 652, 988, 300, 604, 7006, 597, 307, 1621, 2380, 300, 3875, 3461, 11, 51152], 'temperature': 0.0, 'avg_logprob': -0.07419050132835305, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.01163775660097599}, {'id': 325, 'seek': 213832, 'start': 2154.7200000000003, 'end': 2163.92, 'text': ' their value is stored in a memory location, okay. We will see that, right. So, first thing is that', 'tokens': [51184, 641, 2158, 307, 12187, 294, 257, 4675, 4914, 11, 1392, 13, 492, 486, 536, 300, 11, 558, 13, 407, 11, 700, 551, 307, 300, 51644], 'temperature': 0.0, 'avg_logprob': -0.07419050132835305, 'compression_ratio': 1.8214285714285714, 'no_speech_prob': 0.01163775660097599}, {'id': 326, 'seek': 216392, 'start': 2163.92, 'end': 2167.92, 'text': ' let us try to generate code for this. I am going to just use some arbitrary order,', 'tokens': [50364, 718, 505, 853, 281, 8460, 3089, 337, 341, 13, 286, 669, 516, 281, 445, 764, 512, 23211, 1668, 11, 50564], 'temperature': 0.0, 'avg_logprob': -0.1014423828125, 'compression_ratio': 1.8739837398373984, 'no_speech_prob': 0.0016166431596502662}, {'id': 327, 'seek': 216392, 'start': 2168.56, 'end': 2174.88, 'text': ' right, arbitrary bottom-up order just to show that one order is better than the other order.', 'tokens': [50596, 558, 11, 23211, 2767, 12, 1010, 1668, 445, 281, 855, 300, 472, 1668, 307, 1101, 813, 264, 661, 1668, 13, 50912], 'temperature': 0.0, 'avg_logprob': -0.1014423828125, 'compression_ratio': 1.8739837398373984, 'no_speech_prob': 0.0016166431596502662}, {'id': 328, 'seek': 216392, 'start': 2174.88, 'end': 2180.48, 'text': ' That is really what I wanted to do, okay. So, let us take, I like the left-hand side better. So,', 'tokens': [50912, 663, 307, 534, 437, 286, 1415, 281, 360, 11, 1392, 13, 407, 11, 718, 505, 747, 11, 286, 411, 264, 1411, 12, 5543, 1252, 1101, 13, 407, 11, 51192], 'temperature': 0.0, 'avg_logprob': -0.1014423828125, 'compression_ratio': 1.8739837398373984, 'no_speech_prob': 0.0016166431596502662}, {'id': 329, 'seek': 216392, 'start': 2181.28, 'end': 2186.8, 'text': ' let us start with the left-hand side. This is the bottom-most node. I need to generate code for this,', 'tokens': [51232, 718, 505, 722, 365, 264, 1411, 12, 5543, 1252, 13, 639, 307, 264, 2767, 12, 1761, 9984, 13, 286, 643, 281, 8460, 3089, 337, 341, 11, 51508], 'temperature': 0.0, 'avg_logprob': -0.1014423828125, 'compression_ratio': 1.8739837398373984, 'no_speech_prob': 0.0016166431596502662}, {'id': 330, 'seek': 216392, 'start': 2186.8, 'end': 2193.44, 'text': ' correct. I can generate code saying that A is moved into a register, B is added to it.', 'tokens': [51508, 3006, 13, 286, 393, 8460, 3089, 1566, 300, 316, 307, 4259, 666, 257, 7280, 11, 363, 307, 3869, 281, 309, 13, 51840], 'temperature': 0.0, 'avg_logprob': -0.1014423828125, 'compression_ratio': 1.8739837398373984, 'no_speech_prob': 0.0016166431596502662}, {'id': 331, 'seek': 219392, 'start': 2194.88, 'end': 2201.44, 'text': ' Remember here R0 which is my left operand is also the destination operand, okay, same as the', 'tokens': [50412, 5459, 510, 497, 15, 597, 307, 452, 1411, 2208, 474, 307, 611, 264, 12236, 2208, 474, 11, 1392, 11, 912, 382, 264, 50740], 'temperature': 0.0, 'avg_logprob': -0.10061839192183976, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.00012358231469988823}, {'id': 332, 'seek': 219392, 'start': 2201.44, 'end': 2210.64, 'text': ' destination. So, this generates code for A plus B, right. Now, next I go and generate code for,', 'tokens': [50740, 12236, 13, 407, 11, 341, 23815, 3089, 337, 316, 1804, 363, 11, 558, 13, 823, 11, 958, 286, 352, 293, 8460, 3089, 337, 11, 51200], 'temperature': 0.0, 'avg_logprob': -0.10061839192183976, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.00012358231469988823}, {'id': 333, 'seek': 219392, 'start': 2210.64, 'end': 2216.64, 'text': ' I cannot generate code for any of these things, right, because in order for me to generate code', 'tokens': [51200, 286, 2644, 8460, 3089, 337, 604, 295, 613, 721, 11, 558, 11, 570, 294, 1668, 337, 385, 281, 8460, 3089, 51500], 'temperature': 0.0, 'avg_logprob': -0.10061839192183976, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.00012358231469988823}, {'id': 334, 'seek': 219392, 'start': 2216.64, 'end': 2220.48, 'text': ' for this, I must have generated code for this. In order for me to generate code for this,', 'tokens': [51500, 337, 341, 11, 286, 1633, 362, 10833, 3089, 337, 341, 13, 682, 1668, 337, 385, 281, 8460, 3089, 337, 341, 11, 51692], 'temperature': 0.0, 'avg_logprob': -0.10061839192183976, 'compression_ratio': 1.9378238341968912, 'no_speech_prob': 0.00012358231469988823}, {'id': 335, 'seek': 222048, 'start': 2221.12, 'end': 2227.44, 'text': ' I must have generated code for that. So, let me go and generate code for T2. Again T2,', 'tokens': [50396, 286, 1633, 362, 10833, 3089, 337, 300, 13, 407, 11, 718, 385, 352, 293, 8460, 3089, 337, 314, 17, 13, 3764, 314, 17, 11, 50712], 'temperature': 0.0, 'avg_logprob': -0.1016068630907909, 'compression_ratio': 1.486910994764398, 'no_speech_prob': 0.003081272356212139}, {'id': 336, 'seek': 222048, 'start': 2227.44, 'end': 2236.96, 'text': ' I do a similar thing, right. Here I move C to R1 and then do the addition. Remember when I did this,', 'tokens': [50712, 286, 360, 257, 2531, 551, 11, 558, 13, 1692, 286, 1286, 383, 281, 497, 16, 293, 550, 360, 264, 4500, 13, 5459, 562, 286, 630, 341, 11, 51188], 'temperature': 0.0, 'avg_logprob': -0.1016068630907909, 'compression_ratio': 1.486910994764398, 'no_speech_prob': 0.003081272356212139}, {'id': 337, 'seek': 222048, 'start': 2237.52, 'end': 2245.6, 'text': ' I kept the added value T1 in R0 register, right. Why? Because this is going to be used somewhere', 'tokens': [51216, 286, 4305, 264, 3869, 2158, 314, 16, 294, 497, 15, 7280, 11, 558, 13, 1545, 30, 1436, 341, 307, 516, 281, 312, 1143, 4079, 51620], 'temperature': 0.0, 'avg_logprob': -0.1016068630907909, 'compression_ratio': 1.486910994764398, 'no_speech_prob': 0.003081272356212139}, {'id': 338, 'seek': 224560, 'start': 2245.6, 'end': 2251.36, 'text': ' else in the calculation. So, keeping that in R0 register is useful for me because the next', 'tokens': [50364, 1646, 294, 264, 17108, 13, 407, 11, 5145, 300, 294, 497, 15, 7280, 307, 4420, 337, 385, 570, 264, 958, 50652], 'temperature': 0.0, 'avg_logprob': -0.09299695735075036, 'compression_ratio': 1.7122641509433962, 'no_speech_prob': 0.003374773310497403}, {'id': 339, 'seek': 224560, 'start': 2251.36, 'end': 2257.2799999999997, 'text': ' operation I am going to perform on that, I can make use of this register value, right. So,', 'tokens': [50652, 6916, 286, 669, 516, 281, 2042, 322, 300, 11, 286, 393, 652, 764, 295, 341, 7280, 2158, 11, 558, 13, 407, 11, 50948], 'temperature': 0.0, 'avg_logprob': -0.09299695735075036, 'compression_ratio': 1.7122641509433962, 'no_speech_prob': 0.003374773310497403}, {'id': 340, 'seek': 224560, 'start': 2257.2799999999997, 'end': 2263.52, 'text': ' if it is possible, keep it in the register. So, that is why I gave a new register for this,', 'tokens': [50948, 498, 309, 307, 1944, 11, 1066, 309, 294, 264, 7280, 13, 407, 11, 300, 307, 983, 286, 2729, 257, 777, 7280, 337, 341, 11, 51260], 'temperature': 0.0, 'avg_logprob': -0.09299695735075036, 'compression_ratio': 1.7122641509433962, 'no_speech_prob': 0.003374773310497403}, {'id': 341, 'seek': 224560, 'start': 2263.52, 'end': 2272.3199999999997, 'text': ' right. Now, after this, if I want to do this subtract operation, right, what should I do?', 'tokens': [51260, 558, 13, 823, 11, 934, 341, 11, 498, 286, 528, 281, 360, 341, 16390, 6916, 11, 558, 11, 437, 820, 286, 360, 30, 51700], 'temperature': 0.0, 'avg_logprob': -0.09299695735075036, 'compression_ratio': 1.7122641509433962, 'no_speech_prob': 0.003374773310497403}, {'id': 342, 'seek': 227560, 'start': 2276.56, 'end': 2287.68, 'text': ' This is in R1, this I can reuse, but this R1 is in a register, but this is the right operand,', 'tokens': [50412, 639, 307, 294, 497, 16, 11, 341, 286, 393, 26225, 11, 457, 341, 497, 16, 307, 294, 257, 7280, 11, 457, 341, 307, 264, 558, 2208, 474, 11, 50968], 'temperature': 0.0, 'avg_logprob': -0.09794034829010835, 'compression_ratio': 1.7115384615384615, 'no_speech_prob': 0.007010555360466242}, {'id': 343, 'seek': 227560, 'start': 2288.88, 'end': 2294.7999999999997, 'text': ' okay. So, let us assume that only the right operand in this instruction can be a', 'tokens': [51028, 1392, 13, 407, 11, 718, 505, 6552, 300, 787, 264, 558, 2208, 474, 294, 341, 10951, 393, 312, 257, 51324], 'temperature': 0.0, 'avg_logprob': -0.09794034829010835, 'compression_ratio': 1.7115384615384615, 'no_speech_prob': 0.007010555360466242}, {'id': 344, 'seek': 227560, 'start': 2295.52, 'end': 2303.68, 'text': ' memory instruction. Left operand has to be a register instruction, right. Then what happens,', 'tokens': [51360, 4675, 10951, 13, 16405, 2208, 474, 575, 281, 312, 257, 7280, 10951, 11, 558, 13, 1396, 437, 2314, 11, 51768], 'temperature': 0.0, 'avg_logprob': -0.09794034829010835, 'compression_ratio': 1.7115384615384615, 'no_speech_prob': 0.007010555360466242}, {'id': 345, 'seek': 230368, 'start': 2303.7599999999998, 'end': 2313.04, 'text': ' sorry, right. Let us assume that we have only two registers, R0 is in this, R1 is in this.', 'tokens': [50368, 2597, 11, 558, 13, 961, 505, 6552, 300, 321, 362, 787, 732, 38351, 11, 497, 15, 307, 294, 341, 11, 497, 16, 307, 294, 341, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.07698990094779741, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.00042844554991461337}, {'id': 346, 'seek': 230368, 'start': 2313.04, 'end': 2319.12, 'text': ' Now, you say that you want to load this in one more register, you do not have a register. This', 'tokens': [50832, 823, 11, 291, 584, 300, 291, 528, 281, 3677, 341, 294, 472, 544, 7280, 11, 291, 360, 406, 362, 257, 7280, 13, 639, 51136], 'temperature': 0.0, 'avg_logprob': -0.07698990094779741, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.00042844554991461337}, {'id': 347, 'seek': 230368, 'start': 2319.12, 'end': 2325.44, 'text': ' being in a register is not very useful because this is right operand. So, we ended up doing the', 'tokens': [51136, 885, 294, 257, 7280, 307, 406, 588, 4420, 570, 341, 307, 558, 2208, 474, 13, 407, 11, 321, 4590, 493, 884, 264, 51452], 'temperature': 0.0, 'avg_logprob': -0.07698990094779741, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.00042844554991461337}, {'id': 348, 'seek': 230368, 'start': 2326.7999999999997, 'end': 2332.72, 'text': ' wrong way, correct. You understand that, right. So, the machine architecture says that you need', 'tokens': [51520, 2085, 636, 11, 3006, 13, 509, 1223, 300, 11, 558, 13, 407, 11, 264, 3479, 9482, 1619, 300, 291, 643, 51816], 'temperature': 0.0, 'avg_logprob': -0.07698990094779741, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.00042844554991461337}, {'id': 349, 'seek': 233272, 'start': 2332.72, 'end': 2337.7599999999998, 'text': ' a register for the, yeah, you need a register for the left operand, the right operand can only be', 'tokens': [50364, 257, 7280, 337, 264, 11, 1338, 11, 291, 643, 257, 7280, 337, 264, 1411, 2208, 474, 11, 264, 558, 2208, 474, 393, 787, 312, 50616], 'temperature': 0.0, 'avg_logprob': -0.09526090714537981, 'compression_ratio': 2.0, 'no_speech_prob': 0.0008999293786473572}, {'id': 350, 'seek': 233272, 'start': 2337.7599999999998, 'end': 2342.8799999999997, 'text': ' in memory. Right operand can also be in register, that is not a problem, but the left operand cannot', 'tokens': [50616, 294, 4675, 13, 1779, 2208, 474, 393, 611, 312, 294, 7280, 11, 300, 307, 406, 257, 1154, 11, 457, 264, 1411, 2208, 474, 2644, 50872], 'temperature': 0.0, 'avg_logprob': -0.09526090714537981, 'compression_ratio': 2.0, 'no_speech_prob': 0.0008999293786473572}, {'id': 351, 'seek': 233272, 'start': 2342.8799999999997, 'end': 2349.4399999999996, 'text': ' be in a memory, that is the problem, right. If your architecture specifies that your left', 'tokens': [50872, 312, 294, 257, 4675, 11, 300, 307, 264, 1154, 11, 558, 13, 759, 428, 9482, 1608, 11221, 300, 428, 1411, 51200], 'temperature': 0.0, 'avg_logprob': -0.09526090714537981, 'compression_ratio': 2.0, 'no_speech_prob': 0.0008999293786473572}, {'id': 352, 'seek': 233272, 'start': 2349.4399999999996, 'end': 2356.0, 'text': ' operand cannot be in memory, then you have ended up in the wrong side, correct. So, now, what you', 'tokens': [51200, 2208, 474, 2644, 312, 294, 4675, 11, 550, 291, 362, 4590, 493, 294, 264, 2085, 1252, 11, 3006, 13, 407, 11, 586, 11, 437, 291, 51528], 'temperature': 0.0, 'avg_logprob': -0.09526090714537981, 'compression_ratio': 2.0, 'no_speech_prob': 0.0008999293786473572}, {'id': 353, 'seek': 235600, 'start': 2356.0, 'end': 2363.12, 'text': ' have to do is you either have to spill this to memory, right, and then load this in that particular', 'tokens': [50364, 362, 281, 360, 307, 291, 2139, 362, 281, 22044, 341, 281, 4675, 11, 558, 11, 293, 550, 3677, 341, 294, 300, 1729, 50720], 'temperature': 0.0, 'avg_logprob': -0.09476073244784741, 'compression_ratio': 2.098360655737705, 'no_speech_prob': 0.009027723222970963}, {'id': 354, 'seek': 235600, 'start': 2363.12, 'end': 2370.64, 'text': ' register and then perform this operation, right, or you spill this in memory, take that register,', 'tokens': [50720, 7280, 293, 550, 2042, 341, 6916, 11, 558, 11, 420, 291, 22044, 341, 294, 4675, 11, 747, 300, 7280, 11, 51096], 'temperature': 0.0, 'avg_logprob': -0.09476073244784741, 'compression_ratio': 2.098360655737705, 'no_speech_prob': 0.009027723222970963}, {'id': 355, 'seek': 235600, 'start': 2371.2, 'end': 2377.28, 'text': ' load it, perform this operation, reload it and then perform that or you can use it even from', 'tokens': [51124, 3677, 309, 11, 2042, 341, 6916, 11, 25628, 309, 293, 550, 2042, 300, 420, 291, 393, 764, 309, 754, 490, 51428], 'temperature': 0.0, 'avg_logprob': -0.09476073244784741, 'compression_ratio': 2.098360655737705, 'no_speech_prob': 0.009027723222970963}, {'id': 356, 'seek': 235600, 'start': 2377.28, 'end': 2381.04, 'text': ' the memory because left, sorry, you cannot use it from the memory. This has to be a register,', 'tokens': [51428, 264, 4675, 570, 1411, 11, 2597, 11, 291, 2644, 764, 309, 490, 264, 4675, 13, 639, 575, 281, 312, 257, 7280, 11, 51616], 'temperature': 0.0, 'avg_logprob': -0.09476073244784741, 'compression_ratio': 2.098360655737705, 'no_speech_prob': 0.009027723222970963}, {'id': 357, 'seek': 238104, 'start': 2381.68, 'end': 2386.72, 'text': ' right. Left operand has to be a register. So, you have to reload it. So, let us see what is the cost', 'tokens': [50396, 558, 13, 16405, 2208, 474, 575, 281, 312, 257, 7280, 13, 407, 11, 291, 362, 281, 25628, 309, 13, 407, 11, 718, 505, 536, 437, 307, 264, 2063, 50648], 'temperature': 0.0, 'avg_logprob': -0.11065686190569843, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.004189068917185068}, {'id': 358, 'seek': 238104, 'start': 2386.72, 'end': 2393.6, 'text': ' that we are going to pay for that. So, I am going to save T 1, back into the memory location,', 'tokens': [50648, 300, 321, 366, 516, 281, 1689, 337, 300, 13, 407, 11, 286, 669, 516, 281, 3155, 314, 502, 11, 646, 666, 264, 4675, 4914, 11, 50992], 'temperature': 0.0, 'avg_logprob': -0.11065686190569843, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.004189068917185068}, {'id': 359, 'seek': 238104, 'start': 2393.6, 'end': 2399.12, 'text': ' that means that R naught is being put back into location T 1, right. That is the spill that we', 'tokens': [50992, 300, 1355, 300, 497, 13138, 307, 885, 829, 646, 666, 4914, 314, 502, 11, 558, 13, 663, 307, 264, 22044, 300, 321, 51268], 'temperature': 0.0, 'avg_logprob': -0.11065686190569843, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.004189068917185068}, {'id': 360, 'seek': 238104, 'start': 2399.12, 'end': 2405.7599999999998, 'text': ' are talking about. Now, R naught is available. I load E into R naught. I perform this operation,', 'tokens': [51268, 366, 1417, 466, 13, 823, 11, 497, 13138, 307, 2435, 13, 286, 3677, 462, 666, 497, 13138, 13, 286, 2042, 341, 6916, 11, 51600], 'temperature': 0.0, 'avg_logprob': -0.11065686190569843, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.004189068917185068}, {'id': 361, 'seek': 240576, 'start': 2405.76, 'end': 2412.7200000000003, 'text': ' but again look at it. I have my register available, but this is in memory. I have to', 'tokens': [50364, 457, 797, 574, 412, 309, 13, 286, 362, 452, 7280, 2435, 11, 457, 341, 307, 294, 4675, 13, 286, 362, 281, 50712], 'temperature': 0.0, 'avg_logprob': -0.0719737720489502, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.0029055725317448378}, {'id': 362, 'seek': 240576, 'start': 2412.7200000000003, 'end': 2420.5600000000004, 'text': ' reload it again in register, right. So, I load T 1 again into R 1 register and then perform my', 'tokens': [50712, 25628, 309, 797, 294, 7280, 11, 558, 13, 407, 11, 286, 3677, 314, 502, 797, 666, 497, 502, 7280, 293, 550, 2042, 452, 51104], 'temperature': 0.0, 'avg_logprob': -0.0719737720489502, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.0029055725317448378}, {'id': 363, 'seek': 240576, 'start': 2420.5600000000004, 'end': 2426.7200000000003, 'text': ' operation and because at the end of it, I have to save the value of T 4 which is live out of this', 'tokens': [51104, 6916, 293, 570, 412, 264, 917, 295, 309, 11, 286, 362, 281, 3155, 264, 2158, 295, 314, 1017, 597, 307, 1621, 484, 295, 341, 51412], 'temperature': 0.0, 'avg_logprob': -0.0719737720489502, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.0029055725317448378}, {'id': 364, 'seek': 240576, 'start': 2426.7200000000003, 'end': 2433.2000000000003, 'text': ' basic block. I do a store file, correct. So, if you look at the sequence of instruction,', 'tokens': [51412, 3875, 3461, 13, 286, 360, 257, 3531, 3991, 11, 3006, 13, 407, 11, 498, 291, 574, 412, 264, 8310, 295, 10951, 11, 51736], 'temperature': 0.0, 'avg_logprob': -0.0719737720489502, 'compression_ratio': 1.6788990825688073, 'no_speech_prob': 0.0029055725317448378}, {'id': 365, 'seek': 243320, 'start': 2433.2, 'end': 2440.3999999999996, 'text': ' this is something which is unexpected, right. Store of R 1 to T 1 is unexpected and similarly,', 'tokens': [50364, 341, 307, 746, 597, 307, 13106, 11, 558, 13, 17242, 295, 497, 502, 281, 314, 502, 307, 13106, 293, 14138, 11, 50724], 'temperature': 0.0, 'avg_logprob': -0.06693237677387807, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0021364036947488785}, {'id': 366, 'seek': 243320, 'start': 2440.3999999999996, 'end': 2446.96, 'text': ' this load of T 1 to R 1 is also unexpected, right. We could have avoided these things', 'tokens': [50724, 341, 3677, 295, 314, 502, 281, 497, 502, 307, 611, 13106, 11, 558, 13, 492, 727, 362, 24890, 613, 721, 51052], 'temperature': 0.0, 'avg_logprob': -0.06693237677387807, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0021364036947488785}, {'id': 367, 'seek': 243320, 'start': 2447.6, 'end': 2453.7599999999998, 'text': ' or we could have possibly avoided this how we did some other order of evaluation of expression.', 'tokens': [51084, 420, 321, 727, 362, 6264, 24890, 341, 577, 321, 630, 512, 661, 1668, 295, 13344, 295, 6114, 13, 51392], 'temperature': 0.0, 'avg_logprob': -0.06693237677387807, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0021364036947488785}, {'id': 368, 'seek': 243320, 'start': 2453.7599999999998, 'end': 2458.0, 'text': ' This is what we mean by order of evaluation of expression. I could have computed the left', 'tokens': [51392, 639, 307, 437, 321, 914, 538, 1668, 295, 13344, 295, 6114, 13, 286, 727, 362, 40610, 264, 1411, 51604], 'temperature': 0.0, 'avg_logprob': -0.06693237677387807, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0021364036947488785}, {'id': 369, 'seek': 245800, 'start': 2458.0, 'end': 2462.8, 'text': ' hand side first and then the right hand side or the right hand side first and then the left', 'tokens': [50364, 1011, 1252, 700, 293, 550, 264, 558, 1011, 1252, 420, 264, 558, 1011, 1252, 700, 293, 550, 264, 1411, 50604], 'temperature': 0.0, 'avg_logprob': -0.0867119504694353, 'compression_ratio': 1.91869918699187, 'no_speech_prob': 0.014214986003935337}, {'id': 370, 'seek': 245800, 'start': 2462.8, 'end': 2469.52, 'text': ' hand side. I could have even done something worse. I could have computed this first, this, this and', 'tokens': [50604, 1011, 1252, 13, 286, 727, 362, 754, 1096, 746, 5324, 13, 286, 727, 362, 40610, 341, 700, 11, 341, 11, 341, 293, 50940], 'temperature': 0.0, 'avg_logprob': -0.0867119504694353, 'compression_ratio': 1.91869918699187, 'no_speech_prob': 0.014214986003935337}, {'id': 371, 'seek': 245800, 'start': 2469.52, 'end': 2475.52, 'text': ' then found out that something else is not possible. Go do spill. I could have gone all these way.', 'tokens': [50940, 550, 1352, 484, 300, 746, 1646, 307, 406, 1944, 13, 1037, 360, 22044, 13, 286, 727, 362, 2780, 439, 613, 636, 13, 51240], 'temperature': 0.0, 'avg_logprob': -0.0867119504694353, 'compression_ratio': 1.91869918699187, 'no_speech_prob': 0.014214986003935337}, {'id': 372, 'seek': 245800, 'start': 2475.52, 'end': 2480.72, 'text': ' If the DAG is big enough, there are many such possibilities. Correct, we cannot obviously', 'tokens': [51240, 759, 264, 9578, 38, 307, 955, 1547, 11, 456, 366, 867, 1270, 12178, 13, 12753, 11, 321, 2644, 2745, 51500], 'temperature': 0.0, 'avg_logprob': -0.0867119504694353, 'compression_ratio': 1.91869918699187, 'no_speech_prob': 0.014214986003935337}, {'id': 373, 'seek': 245800, 'start': 2481.28, 'end': 2487.2, 'text': ' explore all of them in order to generate the efficient code. So, when we say efficient code,', 'tokens': [51528, 6839, 439, 295, 552, 294, 1668, 281, 8460, 264, 7148, 3089, 13, 407, 11, 562, 321, 584, 7148, 3089, 11, 51824], 'temperature': 0.0, 'avg_logprob': -0.0867119504694353, 'compression_ratio': 1.91869918699187, 'no_speech_prob': 0.014214986003935337}, {'id': 374, 'seek': 248720, 'start': 2487.2, 'end': 2492.7999999999997, 'text': ' we want to make sure that the number of instructions, right, that you have generated', 'tokens': [50364, 321, 528, 281, 652, 988, 300, 264, 1230, 295, 9415, 11, 558, 11, 300, 291, 362, 10833, 50644], 'temperature': 0.0, 'avg_logprob': -0.13673879305521647, 'compression_ratio': 1.943089430894309, 'no_speech_prob': 0.00038242831942625344}, {'id': 375, 'seek': 248720, 'start': 2492.7999999999997, 'end': 2497.9199999999996, 'text': ' is fewer in number, right. And you are given some number of registers. In this case, we assume that', 'tokens': [50644, 307, 13366, 294, 1230, 11, 558, 13, 400, 291, 366, 2212, 512, 1230, 295, 38351, 13, 682, 341, 1389, 11, 321, 6552, 300, 50900], 'temperature': 0.0, 'avg_logprob': -0.13673879305521647, 'compression_ratio': 1.943089430894309, 'no_speech_prob': 0.00038242831942625344}, {'id': 376, 'seek': 248720, 'start': 2497.9199999999996, 'end': 2502.08, 'text': ' we had only two registers, right. If you had three registers, there would not have been a problem,', 'tokens': [50900, 321, 632, 787, 732, 38351, 11, 558, 13, 759, 291, 632, 1045, 38351, 11, 456, 576, 406, 362, 668, 257, 1154, 11, 51108], 'temperature': 0.0, 'avg_logprob': -0.13673879305521647, 'compression_ratio': 1.943089430894309, 'no_speech_prob': 0.00038242831942625344}, {'id': 377, 'seek': 248720, 'start': 2503.04, 'end': 2508.0, 'text': ' right. This could have been in R naught, this could have been in R, sorry, this could have been in R 1.', 'tokens': [51156, 558, 13, 639, 727, 362, 668, 294, 497, 13138, 11, 341, 727, 362, 668, 294, 497, 11, 2597, 11, 341, 727, 362, 668, 294, 497, 502, 13, 51404], 'temperature': 0.0, 'avg_logprob': -0.13673879305521647, 'compression_ratio': 1.943089430894309, 'no_speech_prob': 0.00038242831942625344}, {'id': 378, 'seek': 248720, 'start': 2508.0, 'end': 2513.7599999999998, 'text': ' This we could have loaded it into R 2 and then computed the whole thing peacefully, right.', 'tokens': [51404, 639, 321, 727, 362, 13210, 309, 666, 497, 568, 293, 550, 40610, 264, 1379, 551, 36485, 11, 558, 13, 51692], 'temperature': 0.0, 'avg_logprob': -0.13673879305521647, 'compression_ratio': 1.943089430894309, 'no_speech_prob': 0.00038242831942625344}, {'id': 379, 'seek': 251376, 'start': 2513.76, 'end': 2520.4, 'text': ' Because you had only two registers, these spills and stores are required, sorry, spills and saves', 'tokens': [50364, 1436, 291, 632, 787, 732, 38351, 11, 613, 637, 2565, 293, 9512, 366, 4739, 11, 2597, 11, 637, 2565, 293, 19155, 50696], 'temperature': 0.0, 'avg_logprob': -0.16046841939290366, 'compression_ratio': 1.789237668161435, 'no_speech_prob': 0.035811781883239746}, {'id': 380, 'seek': 251376, 'start': 2520.4, 'end': 2527.36, 'text': ' are required, right, spills are stored, correct. Okay, so this particular order of evaluation of T', 'tokens': [50696, 366, 4739, 11, 558, 11, 637, 2565, 366, 12187, 11, 3006, 13, 1033, 11, 370, 341, 1729, 1668, 295, 13344, 295, 314, 51044], 'temperature': 0.0, 'avg_logprob': -0.16046841939290366, 'compression_ratio': 1.789237668161435, 'no_speech_prob': 0.035811781883239746}, {'id': 381, 'seek': 251376, 'start': 2527.36, 'end': 2535.6000000000004, 'text': ' 1, T 3, sorry, T 1, T 2, T 3, T 4, right, incurs ten instructions and one spill and a corresponding', 'tokens': [51044, 502, 11, 314, 805, 11, 2597, 11, 314, 502, 11, 314, 568, 11, 314, 805, 11, 314, 1017, 11, 558, 11, 834, 2156, 2064, 9415, 293, 472, 22044, 293, 257, 11760, 51456], 'temperature': 0.0, 'avg_logprob': -0.16046841939290366, 'compression_ratio': 1.789237668161435, 'no_speech_prob': 0.035811781883239746}, {'id': 382, 'seek': 251376, 'start': 2535.6000000000004, 'end': 2542.96, 'text': ' save, right, or a corresponding load so to say. Now, let us look at the same thing, but in this order,', 'tokens': [51456, 3155, 11, 558, 11, 420, 257, 11760, 3677, 370, 281, 584, 13, 823, 11, 718, 505, 574, 412, 264, 912, 551, 11, 457, 294, 341, 1668, 11, 51824], 'temperature': 0.0, 'avg_logprob': -0.16046841939290366, 'compression_ratio': 1.789237668161435, 'no_speech_prob': 0.035811781883239746}, {'id': 383, 'seek': 254296, 'start': 2543.44, 'end': 2551.92, 'text': ' right. Here my order of evaluation is T 2 first, T 3 next, T 1 later and then T 4, right. So,', 'tokens': [50388, 558, 13, 1692, 452, 1668, 295, 13344, 307, 314, 568, 700, 11, 314, 805, 958, 11, 314, 502, 1780, 293, 550, 314, 1017, 11, 558, 13, 407, 11, 50812], 'temperature': 0.0, 'avg_logprob': -0.08719901549510467, 'compression_ratio': 1.8224299065420562, 'no_speech_prob': 0.00017803566879592836}, {'id': 384, 'seek': 254296, 'start': 2551.92, 'end': 2558.7200000000003, 'text': ' what happens is if I want to do T 2 first, I will load C into R naught, I will add R naught to and', 'tokens': [50812, 437, 2314, 307, 498, 286, 528, 281, 360, 314, 568, 700, 11, 286, 486, 3677, 383, 666, 497, 13138, 11, 286, 486, 909, 497, 13138, 281, 293, 51152], 'temperature': 0.0, 'avg_logprob': -0.08719901549510467, 'compression_ratio': 1.8224299065420562, 'no_speech_prob': 0.00017803566879592836}, {'id': 385, 'seek': 254296, 'start': 2558.7200000000003, 'end': 2564.88, 'text': ' then I have to calculate T 3 for which I will load E into a register. I already have a register,', 'tokens': [51152, 550, 286, 362, 281, 8873, 314, 805, 337, 597, 286, 486, 3677, 462, 666, 257, 7280, 13, 286, 1217, 362, 257, 7280, 11, 51460], 'temperature': 0.0, 'avg_logprob': -0.08719901549510467, 'compression_ratio': 1.8224299065420562, 'no_speech_prob': 0.00017803566879592836}, {'id': 386, 'seek': 254296, 'start': 2564.88, 'end': 2571.84, 'text': ' I have two registers, only R naught has been used. I can now use R 1, right. So, I can load E into R', 'tokens': [51460, 286, 362, 732, 38351, 11, 787, 497, 13138, 575, 668, 1143, 13, 286, 393, 586, 764, 497, 502, 11, 558, 13, 407, 11, 286, 393, 3677, 462, 666, 497, 51808], 'temperature': 0.0, 'avg_logprob': -0.08719901549510467, 'compression_ratio': 1.8224299065420562, 'no_speech_prob': 0.00017803566879592836}, {'id': 387, 'seek': 257184, 'start': 2571.84, 'end': 2579.6800000000003, 'text': ' 1 and I can now do this operation subtract, the result will be in R 1. Now, I can release R naught', 'tokens': [50364, 502, 293, 286, 393, 586, 360, 341, 6916, 16390, 11, 264, 1874, 486, 312, 294, 497, 502, 13, 823, 11, 286, 393, 4374, 497, 13138, 50756], 'temperature': 0.0, 'avg_logprob': -0.06350406335324657, 'compression_ratio': 1.654708520179372, 'no_speech_prob': 0.0014213512185961008}, {'id': 388, 'seek': 257184, 'start': 2579.6800000000003, 'end': 2586.48, 'text': ' and I can use R naught to load A and I can compute this. Then of course, I can compute the remaining', 'tokens': [50756, 293, 286, 393, 764, 497, 13138, 281, 3677, 316, 293, 286, 393, 14722, 341, 13, 1396, 295, 1164, 11, 286, 393, 14722, 264, 8877, 51096], 'temperature': 0.0, 'avg_logprob': -0.06350406335324657, 'compression_ratio': 1.654708520179372, 'no_speech_prob': 0.0014213512185961008}, {'id': 389, 'seek': 257184, 'start': 2586.48, 'end': 2591.92, 'text': ' things, right. So, if I have started off somehow from here and gone all the way up,', 'tokens': [51096, 721, 11, 558, 13, 407, 11, 498, 286, 362, 1409, 766, 6063, 490, 510, 293, 2780, 439, 264, 636, 493, 11, 51368], 'temperature': 0.0, 'avg_logprob': -0.06350406335324657, 'compression_ratio': 1.654708520179372, 'no_speech_prob': 0.0014213512185961008}, {'id': 390, 'seek': 257184, 'start': 2592.6400000000003, 'end': 2598.4, 'text': ' I would have done it using two registers and with no spill loads and stores, correct.', 'tokens': [51404, 286, 576, 362, 1096, 309, 1228, 732, 38351, 293, 365, 572, 22044, 12668, 293, 9512, 11, 3006, 13, 51692], 'temperature': 0.0, 'avg_logprob': -0.06350406335324657, 'compression_ratio': 1.654708520179372, 'no_speech_prob': 0.0014213512185961008}, {'id': 391, 'seek': 259840, 'start': 2599.04, 'end': 2605.28, 'text': ' Whereas, if I did the other way around, I would have incurred more instructions, right. Yes,', 'tokens': [50396, 13813, 11, 498, 286, 630, 264, 661, 636, 926, 11, 286, 576, 362, 35774, 986, 544, 9415, 11, 558, 13, 1079, 11, 50708], 'temperature': 0.0, 'avg_logprob': -0.13825255076090495, 'compression_ratio': 1.5343915343915344, 'no_speech_prob': 0.001929490128532052}, {'id': 392, 'seek': 259840, 'start': 2606.0, 'end': 2613.6800000000003, 'text': ' okay. So, the question is given a tree like this, how do I find out in what order I have to traverse', 'tokens': [50744, 1392, 13, 407, 11, 264, 1168, 307, 2212, 257, 4230, 411, 341, 11, 577, 360, 286, 915, 484, 294, 437, 1668, 286, 362, 281, 45674, 51128], 'temperature': 0.0, 'avg_logprob': -0.13825255076090495, 'compression_ratio': 1.5343915343915344, 'no_speech_prob': 0.001929490128532052}, {'id': 393, 'seek': 259840, 'start': 2614.7200000000003, 'end': 2620.32, 'text': ' and how do I make sure that that order results in the minimal number of instructions and spills?', 'tokens': [51180, 293, 577, 360, 286, 652, 988, 300, 300, 1668, 3542, 294, 264, 13206, 1230, 295, 9415, 293, 637, 2565, 30, 51460], 'temperature': 0.0, 'avg_logprob': -0.13825255076090495, 'compression_ratio': 1.5343915343915344, 'no_speech_prob': 0.001929490128532052}, {'id': 394, 'seek': 262032, 'start': 2621.1200000000003, 'end': 2632.7200000000003, 'text': ' That is the question, right. Question? Could be happy, no? Okay. Is it afternoon or is it', 'tokens': [50404, 663, 307, 264, 1168, 11, 558, 13, 14464, 30, 7497, 312, 2055, 11, 572, 30, 1033, 13, 1119, 309, 6499, 420, 307, 309, 50984], 'temperature': 0.0, 'avg_logprob': -0.24192061026891074, 'compression_ratio': 1.3511450381679388, 'no_speech_prob': 0.029495636001229286}, {'id': 395, 'seek': 262032, 'start': 2632.7200000000003, 'end': 2639.28, 'text': ' things are so simple or things are too bad? One of the three, multiple choice question.', 'tokens': [50984, 721, 366, 370, 2199, 420, 721, 366, 886, 1578, 30, 1485, 295, 264, 1045, 11, 3866, 3922, 1168, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.24192061026891074, 'compression_ratio': 1.3511450381679388, 'no_speech_prob': 0.029495636001229286}, {'id': 396, 'seek': 263928, 'start': 2639.84, 'end': 2665.6000000000004, 'text': ' Yes, yes. Afternoon, sleepy situation, no? Yes, yes. More than the temporary variables,', 'tokens': [50392, 1079, 11, 2086, 13, 2381, 6376, 11, 24908, 2590, 11, 572, 30, 1079, 11, 2086, 13, 5048, 813, 264, 13413, 9102, 11, 51680], 'temperature': 0.0, 'avg_logprob': -0.4559158178476187, 'compression_ratio': 1.0609756097560976, 'no_speech_prob': 0.018041377887129784}, {'id': 397, 'seek': 266560, 'start': 2665.6, 'end': 2671.44, 'text': ' you definitely need to distinguish between what is live out outside of the basic block,', 'tokens': [50364, 291, 2138, 643, 281, 20206, 1296, 437, 307, 1621, 484, 2380, 295, 264, 3875, 3461, 11, 50656], 'temperature': 0.0, 'avg_logprob': -0.10270655782599199, 'compression_ratio': 1.491891891891892, 'no_speech_prob': 0.012739350087940693}, {'id': 398, 'seek': 266560, 'start': 2672.4, 'end': 2678.3199999999997, 'text': ' right. For example, here look at T 3, right. If I know that T 3 is not going to be used anywhere', 'tokens': [50704, 558, 13, 1171, 1365, 11, 510, 574, 412, 314, 805, 11, 558, 13, 759, 286, 458, 300, 314, 805, 307, 406, 516, 281, 312, 1143, 4992, 51000], 'temperature': 0.0, 'avg_logprob': -0.10270655782599199, 'compression_ratio': 1.491891891891892, 'no_speech_prob': 0.012739350087940693}, {'id': 399, 'seek': 266560, 'start': 2678.3199999999997, 'end': 2689.12, 'text': ' else, right, I have calculated T 3. Let us look at it. So, this is the calculation for T 3,', 'tokens': [51000, 1646, 11, 558, 11, 286, 362, 15598, 314, 805, 13, 961, 505, 574, 412, 309, 13, 407, 11, 341, 307, 264, 17108, 337, 314, 805, 11, 51540], 'temperature': 0.0, 'avg_logprob': -0.10270655782599199, 'compression_ratio': 1.491891891891892, 'no_speech_prob': 0.012739350087940693}, {'id': 400, 'seek': 268912, 'start': 2689.8399999999997, 'end': 2698.56, 'text': ' right. At the end of this calculation, T 3 is in R 1, okay. But T 3 is not in memory.', 'tokens': [50400, 558, 13, 1711, 264, 917, 295, 341, 17108, 11, 314, 805, 307, 294, 497, 502, 11, 1392, 13, 583, 314, 805, 307, 406, 294, 4675, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.1179553149791246, 'compression_ratio': 1.5139664804469273, 'no_speech_prob': 0.0015710557345300913}, {'id': 401, 'seek': 268912, 'start': 2699.2799999999997, 'end': 2707.12, 'text': ' T 3 is in R 1. Now, after this, similarly if I look at T 1, T 1 when it was subsequently,', 'tokens': [50872, 314, 805, 307, 294, 497, 502, 13, 823, 11, 934, 341, 11, 14138, 498, 286, 574, 412, 314, 502, 11, 314, 502, 562, 309, 390, 26514, 11, 51264], 'temperature': 0.0, 'avg_logprob': -0.1179553149791246, 'compression_ratio': 1.5139664804469273, 'no_speech_prob': 0.0015710557345300913}, {'id': 402, 'seek': 268912, 'start': 2707.12, 'end': 2715.44, 'text': ' I am computing T 1 which is in R 0, right. But when I calculate T 4, I overwrite into that R 0.', 'tokens': [51264, 286, 669, 15866, 314, 502, 597, 307, 294, 497, 1958, 11, 558, 13, 583, 562, 286, 8873, 314, 1017, 11, 286, 670, 21561, 666, 300, 497, 1958, 13, 51680], 'temperature': 0.0, 'avg_logprob': -0.1179553149791246, 'compression_ratio': 1.5139664804469273, 'no_speech_prob': 0.0015710557345300913}, {'id': 403, 'seek': 271544, 'start': 2715.44, 'end': 2720.48, 'text': ' That means that the value of T 1 is gone, right. Value of T 1 is no longer needed,', 'tokens': [50364, 663, 1355, 300, 264, 2158, 295, 314, 502, 307, 2780, 11, 558, 13, 39352, 295, 314, 502, 307, 572, 2854, 2978, 11, 50616], 'temperature': 0.0, 'avg_logprob': -0.05601651259142943, 'compression_ratio': 1.770334928229665, 'no_speech_prob': 0.005203595384955406}, {'id': 404, 'seek': 271544, 'start': 2721.36, 'end': 2727.76, 'text': ' right. Similarly, the value of T 3 is no longer needed, right, outside of this basic block. So,', 'tokens': [50660, 558, 13, 13157, 11, 264, 2158, 295, 314, 805, 307, 572, 2854, 2978, 11, 558, 11, 2380, 295, 341, 3875, 3461, 13, 407, 11, 50980], 'temperature': 0.0, 'avg_logprob': -0.05601651259142943, 'compression_ratio': 1.770334928229665, 'no_speech_prob': 0.005203595384955406}, {'id': 405, 'seek': 271544, 'start': 2727.76, 'end': 2734.2400000000002, 'text': ' I am not trying to save these values from these registers into some memory location, right. So,', 'tokens': [50980, 286, 669, 406, 1382, 281, 3155, 613, 4190, 490, 613, 38351, 666, 512, 4675, 4914, 11, 558, 13, 407, 11, 51304], 'temperature': 0.0, 'avg_logprob': -0.05601651259142943, 'compression_ratio': 1.770334928229665, 'no_speech_prob': 0.005203595384955406}, {'id': 406, 'seek': 271544, 'start': 2734.2400000000002, 'end': 2742.0, 'text': ' if it is not live out, you do not have to save them, okay. And that is the essential difference', 'tokens': [51304, 498, 309, 307, 406, 1621, 484, 11, 291, 360, 406, 362, 281, 3155, 552, 11, 1392, 13, 400, 300, 307, 264, 7115, 2649, 51692], 'temperature': 0.0, 'avg_logprob': -0.05601651259142943, 'compression_ratio': 1.770334928229665, 'no_speech_prob': 0.005203595384955406}, {'id': 407, 'seek': 274200, 'start': 2742.0, 'end': 2748.16, 'text': ' that you have to make in code generation. Only the variables which are live out of the basic block', 'tokens': [50364, 300, 291, 362, 281, 652, 294, 3089, 5125, 13, 5686, 264, 9102, 597, 366, 1621, 484, 295, 264, 3875, 3461, 50672], 'temperature': 0.0, 'avg_logprob': -0.11721207698186238, 'compression_ratio': 1.6096491228070176, 'no_speech_prob': 0.0041064308024942875}, {'id': 408, 'seek': 274200, 'start': 2748.16, 'end': 2755.04, 'text': ' need to be saved into their memory locations. So, for example, here we store R 0 into T 4', 'tokens': [50672, 643, 281, 312, 6624, 666, 641, 4675, 9253, 13, 407, 11, 337, 1365, 11, 510, 321, 3531, 497, 1958, 666, 314, 1017, 51016], 'temperature': 0.0, 'avg_logprob': -0.11721207698186238, 'compression_ratio': 1.6096491228070176, 'no_speech_prob': 0.0041064308024942875}, {'id': 409, 'seek': 274200, 'start': 2755.04, 'end': 2760.72, 'text': ' because after this basic block, we will take some other basic block. There we may to reuse R 0.', 'tokens': [51016, 570, 934, 341, 3875, 3461, 11, 321, 486, 747, 512, 661, 3875, 3461, 13, 821, 321, 815, 281, 26225, 497, 1958, 13, 51300], 'temperature': 0.0, 'avg_logprob': -0.11721207698186238, 'compression_ratio': 1.6096491228070176, 'no_speech_prob': 0.0041064308024942875}, {'id': 410, 'seek': 274200, 'start': 2761.36, 'end': 2768.72, 'text': ' And that should not lose the value of T 4, right. So, you need to save that value.', 'tokens': [51332, 400, 300, 820, 406, 3624, 264, 2158, 295, 314, 1017, 11, 558, 13, 407, 11, 291, 643, 281, 3155, 300, 2158, 13, 51700], 'temperature': 0.0, 'avg_logprob': -0.11721207698186238, 'compression_ratio': 1.6096491228070176, 'no_speech_prob': 0.0041064308024942875}, {'id': 411, 'seek': 276872, 'start': 2768.72, 'end': 2773.04, 'text': ' That is the distinction you have to make. Which one?', 'tokens': [50364, 663, 307, 264, 16844, 291, 362, 281, 652, 13, 3013, 472, 30, 50580], 'temperature': 0.0, 'avg_logprob': -0.2510877867876473, 'compression_ratio': 1.4285714285714286, 'no_speech_prob': 0.02926315739750862}, {'id': 412, 'seek': 276872, 'start': 2774.64, 'end': 2781.8399999999997, 'text': ' T 4. You have to find the location for T 4 and then store it, okay. This is temporary.', 'tokens': [50660, 314, 1017, 13, 509, 362, 281, 915, 264, 4914, 337, 314, 1017, 293, 550, 3531, 309, 11, 1392, 13, 639, 307, 13413, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.2510877867876473, 'compression_ratio': 1.4285714285714286, 'no_speech_prob': 0.02926315739750862}, {'id': 413, 'seek': 276872, 'start': 2781.8399999999997, 'end': 2786.24, 'text': ' This could be in the local variable stack frame possibly, right.', 'tokens': [51020, 639, 727, 312, 294, 264, 2654, 7006, 8630, 3920, 6264, 11, 558, 13, 51240], 'temperature': 0.0, 'avg_logprob': -0.2510877867876473, 'compression_ratio': 1.4285714285714286, 'no_speech_prob': 0.02926315739750862}, {'id': 414, 'seek': 276872, 'start': 2790.3999999999996, 'end': 2790.64, 'text': ' Yeah.', 'tokens': [51448, 865, 13, 51460], 'temperature': 0.0, 'avg_logprob': -0.2510877867876473, 'compression_ratio': 1.4285714285714286, 'no_speech_prob': 0.02926315739750862}, {'id': 415, 'seek': 279872, 'start': 2798.72, 'end': 2815.7599999999998, 'text': ' This kind of, okay, height is one possible thing, but I could have both the left child', 'tokens': [50364, 639, 733, 295, 11, 1392, 11, 6681, 307, 472, 1944, 551, 11, 457, 286, 727, 362, 1293, 264, 1411, 1440, 51216], 'temperature': 0.0, 'avg_logprob': -0.18439362754284497, 'compression_ratio': 1.6198830409356726, 'no_speech_prob': 0.00716876657679677}, {'id': 416, 'seek': 279872, 'start': 2815.7599999999998, 'end': 2820.8799999999997, 'text': ' and right child or left sub tree and right sub tree of the same height, okay. There is something', 'tokens': [51216, 293, 558, 1440, 420, 1411, 1422, 4230, 293, 558, 1422, 4230, 295, 264, 912, 6681, 11, 1392, 13, 821, 307, 746, 51472], 'temperature': 0.0, 'avg_logprob': -0.18439362754284497, 'compression_ratio': 1.6198830409356726, 'no_speech_prob': 0.00716876657679677}, {'id': 417, 'seek': 279872, 'start': 2820.8799999999997, 'end': 2825.52, 'text': ' more that is needed which we are going to talk about it next. But yes, that is really what we', 'tokens': [51472, 544, 300, 307, 2978, 597, 321, 366, 516, 281, 751, 466, 309, 958, 13, 583, 2086, 11, 300, 307, 534, 437, 321, 51704], 'temperature': 0.0, 'avg_logprob': -0.18439362754284497, 'compression_ratio': 1.6198830409356726, 'no_speech_prob': 0.00716876657679677}, {'id': 418, 'seek': 282552, 'start': 2825.52, 'end': 2837.52, 'text': ' need to find out. Yes. Height may be something, okay. Again, it is here. Okay.', 'tokens': [50364, 643, 281, 915, 484, 13, 1079, 13, 634, 397, 815, 312, 746, 11, 1392, 13, 3764, 11, 309, 307, 510, 13, 1033, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.1889156135352882, 'compression_ratio': 1.4748603351955307, 'no_speech_prob': 0.008199965581297874}, {'id': 419, 'seek': 282552, 'start': 2840.48, 'end': 2845.92, 'text': ' So, let us come to this Saiti-Wulman algorithm, right. So, again as I mentioned earlier,', 'tokens': [51112, 407, 11, 718, 505, 808, 281, 341, 318, 1001, 72, 12, 54, 425, 1601, 9284, 11, 558, 13, 407, 11, 797, 382, 286, 2835, 3071, 11, 51384], 'temperature': 0.0, 'avg_logprob': -0.1889156135352882, 'compression_ratio': 1.4748603351955307, 'no_speech_prob': 0.008199965581297874}, {'id': 420, 'seek': 282552, 'start': 2845.92, 'end': 2852.0, 'text': ' we talk about this optimal code generation for trees using this algorithm and said to be optimal', 'tokens': [51384, 321, 751, 466, 341, 16252, 3089, 5125, 337, 5852, 1228, 341, 9284, 293, 848, 281, 312, 16252, 51688], 'temperature': 0.0, 'avg_logprob': -0.1889156135352882, 'compression_ratio': 1.4748603351955307, 'no_speech_prob': 0.008199965581297874}, {'id': 421, 'seek': 285200, 'start': 2852.0, 'end': 2858.56, 'text': ' in the sense that it produces the shortest instruction sequence, okay, over all instruction', 'tokens': [50364, 294, 264, 2020, 300, 309, 14725, 264, 31875, 10951, 8310, 11, 1392, 11, 670, 439, 10951, 50692], 'temperature': 0.0, 'avg_logprob': -0.11539699291360789, 'compression_ratio': 1.7854545454545454, 'no_speech_prob': 0.07971467822790146}, {'id': 422, 'seek': 285200, 'start': 2858.56, 'end': 2863.68, 'text': ' sequences that you evaluate it. That means that you cannot do it with fewer instructions than what', 'tokens': [50692, 22978, 300, 291, 13059, 309, 13, 663, 1355, 300, 291, 2644, 360, 309, 365, 13366, 9415, 813, 437, 50948], 'temperature': 0.0, 'avg_logprob': -0.11539699291360789, 'compression_ratio': 1.7854545454545454, 'no_speech_prob': 0.07971467822790146}, {'id': 423, 'seek': 285200, 'start': 2863.68, 'end': 2869.92, 'text': ' is generated by the Saiti-Wulman algorithm, okay. And it takes into account the register requirement,', 'tokens': [50948, 307, 10833, 538, 264, 318, 1001, 72, 12, 54, 425, 1601, 9284, 11, 1392, 13, 400, 309, 2516, 666, 2696, 264, 7280, 11695, 11, 51260], 'temperature': 0.0, 'avg_logprob': -0.11539699291360789, 'compression_ratio': 1.7854545454545454, 'no_speech_prob': 0.07971467822790146}, {'id': 424, 'seek': 285200, 'start': 2869.92, 'end': 2875.76, 'text': ' right, and generates the code with this register requirement. Now, if the tag representing the data', 'tokens': [51260, 558, 11, 293, 23815, 264, 3089, 365, 341, 7280, 11695, 13, 823, 11, 498, 264, 6162, 13460, 264, 1412, 51552], 'temperature': 0.0, 'avg_logprob': -0.11539699291360789, 'compression_ratio': 1.7854545454545454, 'no_speech_prob': 0.07971467822790146}, {'id': 425, 'seek': 285200, 'start': 2875.76, 'end': 2880.48, 'text': ' flow graph is a basic block tree, of course, this is what I said. If it is a tree, then we can use', 'tokens': [51552, 3095, 4295, 307, 257, 3875, 3461, 4230, 11, 295, 1164, 11, 341, 307, 437, 286, 848, 13, 759, 309, 307, 257, 4230, 11, 550, 321, 393, 764, 51788], 'temperature': 0.0, 'avg_logprob': -0.11539699291360789, 'compression_ratio': 1.7854545454545454, 'no_speech_prob': 0.07971467822790146}, {'id': 426, 'seek': 288048, 'start': 2880.48, 'end': 2885.76, 'text': ' the Saiti-Wulman algorithm, okay. How does the Saiti-Wulman algorithm work? Again,', 'tokens': [50364, 264, 318, 1001, 72, 12, 54, 425, 1601, 9284, 11, 1392, 13, 1012, 775, 264, 318, 1001, 72, 12, 54, 425, 1601, 9284, 589, 30, 3764, 11, 50628], 'temperature': 0.0, 'avg_logprob': -0.06856480721504457, 'compression_ratio': 1.9173553719008265, 'no_speech_prob': 0.005278043448925018}, {'id': 427, 'seek': 288048, 'start': 2885.76, 'end': 2890.88, 'text': ' it works in two phases. In the first phase, we are going to label and in the second phase,', 'tokens': [50628, 309, 1985, 294, 732, 18764, 13, 682, 264, 700, 5574, 11, 321, 366, 516, 281, 7645, 293, 294, 264, 1150, 5574, 11, 50884], 'temperature': 0.0, 'avg_logprob': -0.06856480721504457, 'compression_ratio': 1.9173553719008265, 'no_speech_prob': 0.005278043448925018}, {'id': 428, 'seek': 288048, 'start': 2890.88, 'end': 2897.2, 'text': ' we are going to do code generation, okay. So, labeling is also going to be done bottom up,', 'tokens': [50884, 321, 366, 516, 281, 360, 3089, 5125, 11, 1392, 13, 407, 11, 40244, 307, 611, 516, 281, 312, 1096, 2767, 493, 11, 51200], 'temperature': 0.0, 'avg_logprob': -0.06856480721504457, 'compression_ratio': 1.9173553719008265, 'no_speech_prob': 0.005278043448925018}, {'id': 429, 'seek': 288048, 'start': 2898.08, 'end': 2903.92, 'text': ' okay. Sorry, labeling is going to be done bottom up according to the number of registers required', 'tokens': [51244, 1392, 13, 4919, 11, 40244, 307, 516, 281, 312, 1096, 2767, 493, 4650, 281, 264, 1230, 295, 38351, 4739, 51536], 'temperature': 0.0, 'avg_logprob': -0.06856480721504457, 'compression_ratio': 1.9173553719008265, 'no_speech_prob': 0.005278043448925018}, {'id': 430, 'seek': 288048, 'start': 2903.92, 'end': 2910.08, 'text': ' to generate the code. Label essentially represents if a node has a label k, it means that the minimum', 'tokens': [51536, 281, 8460, 264, 3089, 13, 10137, 338, 4476, 8855, 498, 257, 9984, 575, 257, 7645, 350, 11, 309, 1355, 300, 264, 7285, 51844], 'temperature': 0.0, 'avg_logprob': -0.06856480721504457, 'compression_ratio': 1.9173553719008265, 'no_speech_prob': 0.005278043448925018}, {'id': 431, 'seek': 291008, 'start': 2910.08, 'end': 2916.7999999999997, 'text': ' number of registers required to generate code for that node without any spill is k. That is what', 'tokens': [50364, 1230, 295, 38351, 4739, 281, 8460, 3089, 337, 300, 9984, 1553, 604, 22044, 307, 350, 13, 663, 307, 437, 50700], 'temperature': 0.0, 'avg_logprob': -0.07189481154732082, 'compression_ratio': 1.705069124423963, 'no_speech_prob': 0.0003491477691568434}, {'id': 432, 'seek': 291008, 'start': 2916.7999999999997, 'end': 2924.48, 'text': ' it means. So, we have to somehow identify this number and put it, right. Code generation is top', 'tokens': [50700, 309, 1355, 13, 407, 11, 321, 362, 281, 6063, 5876, 341, 1230, 293, 829, 309, 11, 558, 13, 15549, 5125, 307, 1192, 51084], 'temperature': 0.0, 'avg_logprob': -0.07189481154732082, 'compression_ratio': 1.705069124423963, 'no_speech_prob': 0.0003491477691568434}, {'id': 433, 'seek': 291008, 'start': 2924.48, 'end': 2930.0, 'text': ' down. Remember, see what is going to happen is that labeling is bottom up, code generation is', 'tokens': [51084, 760, 13, 5459, 11, 536, 437, 307, 516, 281, 1051, 307, 300, 40244, 307, 2767, 493, 11, 3089, 5125, 307, 51360], 'temperature': 0.0, 'avg_logprob': -0.07189481154732082, 'compression_ratio': 1.705069124423963, 'no_speech_prob': 0.0003491477691568434}, {'id': 434, 'seek': 291008, 'start': 2930.56, 'end': 2935.84, 'text': " top down, okay. It is not that the root node's code is going to be generated first,", 'tokens': [51388, 1192, 760, 11, 1392, 13, 467, 307, 406, 300, 264, 5593, 9984, 311, 3089, 307, 516, 281, 312, 10833, 700, 11, 51652], 'temperature': 0.0, 'avg_logprob': -0.07189481154732082, 'compression_ratio': 1.705069124423963, 'no_speech_prob': 0.0003491477691568434}, {'id': 435, 'seek': 293584, 'start': 2935.84, 'end': 2940.48, 'text': ' but the procedure is a depth first procedure going top down, right.', 'tokens': [50364, 457, 264, 10747, 307, 257, 7161, 700, 10747, 516, 1192, 760, 11, 558, 13, 50596], 'temperature': 0.0, 'avg_logprob': -0.0781013507109422, 'compression_ratio': 1.790794979079498, 'no_speech_prob': 0.008903080597519875}, {'id': 436, 'seek': 293584, 'start': 2941.04, 'end': 2945.04, 'text': ' So, one of the important things that is being followed in this code generation', 'tokens': [50624, 407, 11, 472, 295, 264, 1021, 721, 300, 307, 885, 6263, 294, 341, 3089, 5125, 50824], 'temperature': 0.0, 'avg_logprob': -0.0781013507109422, 'compression_ratio': 1.790794979079498, 'no_speech_prob': 0.008903080597519875}, {'id': 437, 'seek': 293584, 'start': 2945.04, 'end': 2950.56, 'text': ' is what is going to be called as contiguous evaluation. By contiguous evaluation, what we', 'tokens': [50824, 307, 437, 307, 516, 281, 312, 1219, 382, 660, 30525, 13344, 13, 3146, 660, 30525, 13344, 11, 437, 321, 51100], 'temperature': 0.0, 'avg_logprob': -0.0781013507109422, 'compression_ratio': 1.790794979079498, 'no_speech_prob': 0.008903080597519875}, {'id': 438, 'seek': 293584, 'start': 2950.56, 'end': 2958.08, 'text': ' mean is that, right, you want to complete code generation of a sub-tree in full before you move', 'tokens': [51100, 914, 307, 300, 11, 558, 11, 291, 528, 281, 3566, 3089, 5125, 295, 257, 1422, 12, 83, 701, 294, 1577, 949, 291, 1286, 51476], 'temperature': 0.0, 'avg_logprob': -0.0781013507109422, 'compression_ratio': 1.790794979079498, 'no_speech_prob': 0.008903080597519875}, {'id': 439, 'seek': 293584, 'start': 2958.08, 'end': 2963.6000000000004, 'text': ' to the other sibling. That means that let us say when you are working on the left child or left', 'tokens': [51476, 281, 264, 661, 39409, 13, 663, 1355, 300, 718, 505, 584, 562, 291, 366, 1364, 322, 264, 1411, 1440, 420, 1411, 51752], 'temperature': 0.0, 'avg_logprob': -0.0781013507109422, 'compression_ratio': 1.790794979079498, 'no_speech_prob': 0.008903080597519875}, {'id': 440, 'seek': 296360, 'start': 2963.6, 'end': 2969.92, 'text': ' sub-tree of a node, if you have done some part of code generation, you do not stop it half way', 'tokens': [50364, 1422, 12, 83, 701, 295, 257, 9984, 11, 498, 291, 362, 1096, 512, 644, 295, 3089, 5125, 11, 291, 360, 406, 1590, 309, 1922, 636, 50680], 'temperature': 0.0, 'avg_logprob': -0.059014938845492824, 'compression_ratio': 1.8142857142857143, 'no_speech_prob': 0.005857120733708143}, {'id': 441, 'seek': 296360, 'start': 2969.92, 'end': 2976.88, 'text': ' through and then jump to the other sub-tree. You complete this entire sub-tree before you move', 'tokens': [50680, 807, 293, 550, 3012, 281, 264, 661, 1422, 12, 83, 701, 13, 509, 3566, 341, 2302, 1422, 12, 83, 701, 949, 291, 1286, 51028], 'temperature': 0.0, 'avg_logprob': -0.059014938845492824, 'compression_ratio': 1.8142857142857143, 'no_speech_prob': 0.005857120733708143}, {'id': 442, 'seek': 296360, 'start': 2976.88, 'end': 2982.08, 'text': ' to that other one. The reason for doing that is that if you leave some part of this sub-tree', 'tokens': [51028, 281, 300, 661, 472, 13, 440, 1778, 337, 884, 300, 307, 300, 498, 291, 1856, 512, 644, 295, 341, 1422, 12, 83, 701, 51288], 'temperature': 0.0, 'avg_logprob': -0.059014938845492824, 'compression_ratio': 1.8142857142857143, 'no_speech_prob': 0.005857120733708143}, {'id': 443, 'seek': 296360, 'start': 2982.88, 'end': 2989.2799999999997, 'text': ' computed and then you want to jump, then whatever registers that you have used, either you have to', 'tokens': [51328, 40610, 293, 550, 291, 528, 281, 3012, 11, 550, 2035, 38351, 300, 291, 362, 1143, 11, 2139, 291, 362, 281, 51648], 'temperature': 0.0, 'avg_logprob': -0.059014938845492824, 'compression_ratio': 1.8142857142857143, 'no_speech_prob': 0.005857120733708143}, {'id': 444, 'seek': 298928, 'start': 2990.2400000000002, 'end': 2995.76, 'text': ' save them in memory and give those registers for the computation of the other sub-tree,', 'tokens': [50412, 3155, 552, 294, 4675, 293, 976, 729, 38351, 337, 264, 24903, 295, 264, 661, 1422, 12, 83, 701, 11, 50688], 'temperature': 0.0, 'avg_logprob': -0.06121971655865105, 'compression_ratio': 1.7239819004524888, 'no_speech_prob': 0.0070012654177844524}, {'id': 445, 'seek': 298928, 'start': 2996.6400000000003, 'end': 3004.0800000000004, 'text': ' right, or you have to incur more spills, right. That is the reason. So, if you complete that entire', 'tokens': [50732, 558, 11, 420, 291, 362, 281, 35774, 544, 637, 2565, 11, 558, 13, 663, 307, 264, 1778, 13, 407, 11, 498, 291, 3566, 300, 2302, 51104], 'temperature': 0.0, 'avg_logprob': -0.06121971655865105, 'compression_ratio': 1.7239819004524888, 'no_speech_prob': 0.0070012654177844524}, {'id': 446, 'seek': 298928, 'start': 3004.0800000000004, 'end': 3010.6400000000003, 'text': ' sub-tree first and then go to the other sub-tree, then it is guaranteed that that code necessarily', 'tokens': [51104, 1422, 12, 83, 701, 700, 293, 550, 352, 281, 264, 661, 1422, 12, 83, 701, 11, 550, 309, 307, 18031, 300, 300, 3089, 4725, 51432], 'temperature': 0.0, 'avg_logprob': -0.06121971655865105, 'compression_ratio': 1.7239819004524888, 'no_speech_prob': 0.0070012654177844524}, {'id': 447, 'seek': 298928, 'start': 3010.6400000000003, 'end': 3016.96, 'text': ' results in minimum instruction sequence, okay. So, we are going to do this for a machine model', 'tokens': [51432, 3542, 294, 7285, 10951, 8310, 11, 1392, 13, 407, 11, 321, 366, 516, 281, 360, 341, 337, 257, 3479, 2316, 51748], 'temperature': 0.0, 'avg_logprob': -0.06121971655865105, 'compression_ratio': 1.7239819004524888, 'no_speech_prob': 0.0070012654177844524}, {'id': 448, 'seek': 301696, 'start': 3016.96, 'end': 3023.28, 'text': ' where these computations are carried out in registers and the instructions are of the form', 'tokens': [50364, 689, 613, 2807, 763, 366, 9094, 484, 294, 38351, 293, 264, 9415, 366, 295, 264, 1254, 50680], 'temperature': 0.0, 'avg_logprob': -0.06979255461960696, 'compression_ratio': 1.7810945273631842, 'no_speech_prob': 0.0034199419897049665}, {'id': 449, 'seek': 301696, 'start': 3023.28, 'end': 3029.76, 'text': ' either having two register operands or one register operand and a memory operand.', 'tokens': [50680, 2139, 1419, 732, 7280, 2208, 2967, 420, 472, 7280, 2208, 474, 293, 257, 4675, 2208, 474, 13, 51004], 'temperature': 0.0, 'avg_logprob': -0.06979255461960696, 'compression_ratio': 1.7810945273631842, 'no_speech_prob': 0.0034199419897049665}, {'id': 450, 'seek': 301696, 'start': 3029.76, 'end': 3035.68, 'text': ' The left operand has to be a register, cannot be a memory. Right operand can be a memory,', 'tokens': [51004, 440, 1411, 2208, 474, 575, 281, 312, 257, 7280, 11, 2644, 312, 257, 4675, 13, 1779, 2208, 474, 393, 312, 257, 4675, 11, 51300], 'temperature': 0.0, 'avg_logprob': -0.06979255461960696, 'compression_ratio': 1.7810945273631842, 'no_speech_prob': 0.0034199419897049665}, {'id': 451, 'seek': 301696, 'start': 3036.48, 'end': 3043.36, 'text': ' okay. So, same as what we have seen earlier, okay. Now, the labeling algorithm is a very simple', 'tokens': [51340, 1392, 13, 407, 11, 912, 382, 437, 321, 362, 1612, 3071, 11, 1392, 13, 823, 11, 264, 40244, 9284, 307, 257, 588, 2199, 51684], 'temperature': 0.0, 'avg_logprob': -0.06979255461960696, 'compression_ratio': 1.7810945273631842, 'no_speech_prob': 0.0034199419897049665}, {'id': 452, 'seek': 304336, 'start': 3043.36, 'end': 3050.88, 'text': ' algorithm, okay. You look at that node. If the node is a leaf node and it is a left node,', 'tokens': [50364, 9284, 11, 1392, 13, 509, 574, 412, 300, 9984, 13, 759, 264, 9984, 307, 257, 10871, 9984, 293, 309, 307, 257, 1411, 9984, 11, 50740], 'temperature': 0.0, 'avg_logprob': -0.0728835758410002, 'compression_ratio': 1.7606382978723405, 'no_speech_prob': 0.0017439223593100905}, {'id': 453, 'seek': 304336, 'start': 3051.6800000000003, 'end': 3058.1600000000003, 'text': ' right, because the left has to be in register, correct. Leaf node is typically a', 'tokens': [50780, 558, 11, 570, 264, 1411, 575, 281, 312, 294, 7280, 11, 3006, 13, 32290, 9984, 307, 5850, 257, 51104], 'temperature': 0.0, 'avg_logprob': -0.0728835758410002, 'compression_ratio': 1.7606382978723405, 'no_speech_prob': 0.0017439223593100905}, {'id': 454, 'seek': 304336, 'start': 3058.7200000000003, 'end': 3062.96, 'text': ' variable or a value, right. So, if it has to go into a register,', 'tokens': [51132, 7006, 420, 257, 2158, 11, 558, 13, 407, 11, 498, 309, 575, 281, 352, 666, 257, 7280, 11, 51344], 'temperature': 0.0, 'avg_logprob': -0.0728835758410002, 'compression_ratio': 1.7606382978723405, 'no_speech_prob': 0.0017439223593100905}, {'id': 455, 'seek': 304336, 'start': 3063.6800000000003, 'end': 3070.2400000000002, 'text': ' you have to move that value to a register. So, it requires some cost. So, if the node is a leaf', 'tokens': [51380, 291, 362, 281, 1286, 300, 2158, 281, 257, 7280, 13, 407, 11, 309, 7029, 512, 2063, 13, 407, 11, 498, 264, 9984, 307, 257, 10871, 51708], 'temperature': 0.0, 'avg_logprob': -0.0728835758410002, 'compression_ratio': 1.7606382978723405, 'no_speech_prob': 0.0017439223593100905}, {'id': 456, 'seek': 307024, 'start': 3070.24, 'end': 3077.68, 'text': ' node and it is a left node, then it incurs a cost of one to move that value into a register.', 'tokens': [50364, 9984, 293, 309, 307, 257, 1411, 9984, 11, 550, 309, 834, 2156, 257, 2063, 295, 472, 281, 1286, 300, 2158, 666, 257, 7280, 13, 50736], 'temperature': 0.0, 'avg_logprob': -0.07414849211529988, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.002245107898488641}, {'id': 457, 'seek': 307024, 'start': 3078.7999999999997, 'end': 3085.2, 'text': ' Whereas, if it is a right node, it can be in memory. I do not have to move it because my operands', 'tokens': [50792, 13813, 11, 498, 309, 307, 257, 558, 9984, 11, 309, 393, 312, 294, 4675, 13, 286, 360, 406, 362, 281, 1286, 309, 570, 452, 2208, 2967, 51112], 'temperature': 0.0, 'avg_logprob': -0.07414849211529988, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.002245107898488641}, {'id': 458, 'seek': 307024, 'start': 3085.2, 'end': 3091.52, 'text': ' allow my right operand to be in memory, right. So, I will node, I will label those nodes,', 'tokens': [51112, 2089, 452, 558, 2208, 474, 281, 312, 294, 4675, 11, 558, 13, 407, 11, 286, 486, 9984, 11, 286, 486, 7645, 729, 13891, 11, 51428], 'temperature': 0.0, 'avg_logprob': -0.07414849211529988, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.002245107898488641}, {'id': 459, 'seek': 309152, 'start': 3091.52, 'end': 3101.12, 'text': ' right nodes as value 0, okay. This is for the leaf node, right. Then for any other node,', 'tokens': [50364, 558, 13891, 382, 2158, 1958, 11, 1392, 13, 639, 307, 337, 264, 10871, 9984, 11, 558, 13, 1396, 337, 604, 661, 9984, 11, 50844], 'temperature': 0.0, 'avg_logprob': -0.1031839391018482, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.013348075561225414}, {'id': 460, 'seek': 309152, 'start': 3101.84, 'end': 3108.88, 'text': ' which has let us say two children, okay. If both children have the same label,', 'tokens': [50880, 597, 575, 718, 505, 584, 732, 2227, 11, 1392, 13, 759, 1293, 2227, 362, 264, 912, 7645, 11, 51232], 'temperature': 0.0, 'avg_logprob': -0.1031839391018482, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.013348075561225414}, {'id': 461, 'seek': 309152, 'start': 3108.88, 'end': 3113.92, 'text': ' let us look at this case. If both, sorry, if both do not have the same label value,', 'tokens': [51232, 718, 505, 574, 412, 341, 1389, 13, 759, 1293, 11, 2597, 11, 498, 1293, 360, 406, 362, 264, 912, 7645, 2158, 11, 51484], 'temperature': 0.0, 'avg_logprob': -0.1031839391018482, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.013348075561225414}, {'id': 462, 'seek': 309152, 'start': 3113.92, 'end': 3119.2, 'text': ' then whichever one is maximum, that will be the label value. If they have the same label value,', 'tokens': [51484, 550, 24123, 472, 307, 6674, 11, 300, 486, 312, 264, 7645, 2158, 13, 759, 436, 362, 264, 912, 7645, 2158, 11, 51748], 'temperature': 0.0, 'avg_logprob': -0.1031839391018482, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.013348075561225414}, {'id': 463, 'seek': 311920, 'start': 3120.16, 'end': 3127.12, 'text': ' then it is either one of them plus one, right. So, this is exactly what you are going to do.', 'tokens': [50412, 550, 309, 307, 2139, 472, 295, 552, 1804, 472, 11, 558, 13, 407, 11, 341, 307, 2293, 437, 291, 366, 516, 281, 360, 13, 50760], 'temperature': 0.0, 'avg_logprob': -0.07581756960961127, 'compression_ratio': 1.7546296296296295, 'no_speech_prob': 0.000986048486083746}, {'id': 464, 'seek': 311920, 'start': 3127.12, 'end': 3132.8799999999997, 'text': ' Again, I will show you the example and tell you why this makes sense. Again, remember the label', 'tokens': [50760, 3764, 11, 286, 486, 855, 291, 264, 1365, 293, 980, 291, 983, 341, 1669, 2020, 13, 3764, 11, 1604, 264, 7645, 51048], 'temperature': 0.0, 'avg_logprob': -0.07581756960961127, 'compression_ratio': 1.7546296296296295, 'no_speech_prob': 0.000986048486083746}, {'id': 465, 'seek': 311920, 'start': 3132.8799999999997, 'end': 3140.64, 'text': ' of a node represents what? Minimum number of registers required to compute that node without', 'tokens': [51048, 295, 257, 9984, 8855, 437, 30, 2829, 332, 449, 1230, 295, 38351, 4739, 281, 14722, 300, 9984, 1553, 51436], 'temperature': 0.0, 'avg_logprob': -0.07581756960961127, 'compression_ratio': 1.7546296296296295, 'no_speech_prob': 0.000986048486083746}, {'id': 466, 'seek': 311920, 'start': 3140.64, 'end': 3146.7999999999997, 'text': ' any spill. That is also important, right. Minimum number of registers required to compute without', 'tokens': [51436, 604, 22044, 13, 663, 307, 611, 1021, 11, 558, 13, 2829, 332, 449, 1230, 295, 38351, 4739, 281, 14722, 1553, 51744], 'temperature': 0.0, 'avg_logprob': -0.07581756960961127, 'compression_ratio': 1.7546296296296295, 'no_speech_prob': 0.000986048486083746}, {'id': 467, 'seek': 314680, 'start': 3146.8, 'end': 3153.2000000000003, 'text': ' any spill, okay. Now, let us see how this makes sense, right. Yeah, go ahead.', 'tokens': [50364, 604, 22044, 11, 1392, 13, 823, 11, 718, 505, 536, 577, 341, 1669, 2020, 11, 558, 13, 865, 11, 352, 2286, 13, 50684], 'temperature': 0.0, 'avg_logprob': -0.1571778342837379, 'compression_ratio': 1.6071428571428572, 'no_speech_prob': 0.009890655986964703}, {'id': 468, 'seek': 314680, 'start': 3157.2000000000003, 'end': 3166.32, 'text': ' Is, well, here what we are going to assume is that if it is a left node and it is a constant,', 'tokens': [50884, 1119, 11, 731, 11, 510, 437, 321, 366, 516, 281, 6552, 307, 300, 498, 309, 307, 257, 1411, 9984, 293, 309, 307, 257, 5754, 11, 51340], 'temperature': 0.0, 'avg_logprob': -0.1571778342837379, 'compression_ratio': 1.6071428571428572, 'no_speech_prob': 0.009890655986964703}, {'id': 469, 'seek': 314680, 'start': 3166.32, 'end': 3172.5600000000004, 'text': ' it has to be moved to a register, right. If it is a right node, it can be, it need not have to be,', 'tokens': [51340, 309, 575, 281, 312, 4259, 281, 257, 7280, 11, 558, 13, 759, 309, 307, 257, 558, 9984, 11, 309, 393, 312, 11, 309, 643, 406, 362, 281, 312, 11, 51652], 'temperature': 0.0, 'avg_logprob': -0.1571778342837379, 'compression_ratio': 1.6071428571428572, 'no_speech_prob': 0.009890655986964703}, {'id': 470, 'seek': 317256, 'start': 3172.56, 'end': 3177.92, 'text': ' okay. Again, as I mentioned to you, this scheme that we are going to discuss in the example that', 'tokens': [50364, 1392, 13, 3764, 11, 382, 286, 2835, 281, 291, 11, 341, 12232, 300, 321, 366, 516, 281, 2248, 294, 264, 1365, 300, 50632], 'temperature': 0.0, 'avg_logprob': -0.08360681533813477, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.0017349235713481903}, {'id': 471, 'seek': 317256, 'start': 3177.92, 'end': 3182.96, 'text': ' we are going to see is for CISC code generation because we are going to assume this model,', 'tokens': [50632, 321, 366, 516, 281, 536, 307, 337, 383, 2343, 34, 3089, 5125, 570, 321, 366, 516, 281, 6552, 341, 2316, 11, 50884], 'temperature': 0.0, 'avg_logprob': -0.08360681533813477, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.0017349235713481903}, {'id': 472, 'seek': 317256, 'start': 3183.7599999999998, 'end': 3189.44, 'text': ' right. If this model changes, then the algorithm also has to be adapted accordingly,', 'tokens': [50924, 558, 13, 759, 341, 2316, 2962, 11, 550, 264, 9284, 611, 575, 281, 312, 20871, 19717, 11, 51208], 'temperature': 0.0, 'avg_logprob': -0.08360681533813477, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.0017349235713481903}, {'id': 473, 'seek': 317256, 'start': 3191.2799999999997, 'end': 3197.52, 'text': ' okay. Now, let us look at this algorithm and then see when it is applied to this DAG, what happens,', 'tokens': [51300, 1392, 13, 823, 11, 718, 505, 574, 412, 341, 9284, 293, 550, 536, 562, 309, 307, 6456, 281, 341, 9578, 38, 11, 437, 2314, 11, 51612], 'temperature': 0.0, 'avg_logprob': -0.08360681533813477, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.0017349235713481903}, {'id': 474, 'seek': 319752, 'start': 3198.48, 'end': 3207.44, 'text': ' right. So, this is a leaf node and it is a left child. So, what should be the label value for this?', 'tokens': [50412, 558, 13, 407, 11, 341, 307, 257, 10871, 9984, 293, 309, 307, 257, 1411, 1440, 13, 407, 11, 437, 820, 312, 264, 7645, 2158, 337, 341, 30, 50860], 'temperature': 0.0, 'avg_logprob': -0.1617838390289791, 'compression_ratio': 1.462686567164179, 'no_speech_prob': 0.0009943308541551232}, {'id': 475, 'seek': 319752, 'start': 3208.56, 'end': 3221.7599999999998, 'text': ' 1. What about here? 0. 0. 1. 1. 0. So, we can easily label all the leaf nodes without a problem.', 'tokens': [50916, 502, 13, 708, 466, 510, 30, 1958, 13, 1958, 13, 502, 13, 502, 13, 1958, 13, 407, 11, 321, 393, 3612, 7645, 439, 264, 10871, 13891, 1553, 257, 1154, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.1617838390289791, 'compression_ratio': 1.462686567164179, 'no_speech_prob': 0.0009943308541551232}, {'id': 476, 'seek': 322176, 'start': 3222.7200000000003, 'end': 3231.44, 'text': ' Take all the leaf nodes. If it is a left child, 1, right child, 0, right. Now, if I look at this', 'tokens': [50412, 3664, 439, 264, 10871, 13891, 13, 759, 309, 307, 257, 1411, 1440, 11, 502, 11, 558, 1440, 11, 1958, 11, 558, 13, 823, 11, 498, 286, 574, 412, 341, 50848], 'temperature': 0.0, 'avg_logprob': -0.1078039144540762, 'compression_ratio': 1.5444444444444445, 'no_speech_prob': 0.001994716003537178}, {'id': 477, 'seek': 322176, 'start': 3231.44, 'end': 3240.88, 'text': ' particular subtree, how many registers do I need to evaluate that? Only 1. And if I apply my', 'tokens': [50848, 1729, 7257, 701, 11, 577, 867, 38351, 360, 286, 643, 281, 13059, 300, 30, 5686, 502, 13, 400, 498, 286, 3079, 452, 51320], 'temperature': 0.0, 'avg_logprob': -0.1078039144540762, 'compression_ratio': 1.5444444444444445, 'no_speech_prob': 0.001994716003537178}, {'id': 478, 'seek': 322176, 'start': 3240.88, 'end': 3246.0800000000004, 'text': ' algorithm, my algorithm says that the left child and right child do not have same value,', 'tokens': [51320, 9284, 11, 452, 9284, 1619, 300, 264, 1411, 1440, 293, 558, 1440, 360, 406, 362, 912, 2158, 11, 51580], 'temperature': 0.0, 'avg_logprob': -0.1078039144540762, 'compression_ratio': 1.5444444444444445, 'no_speech_prob': 0.001994716003537178}, {'id': 479, 'seek': 324608, 'start': 3246.88, 'end': 3258.56, 'text': ' then it is a maximum of the 2, which means 1, okay, correct. So, if I consider this particular 1,', 'tokens': [50404, 550, 309, 307, 257, 6674, 295, 264, 568, 11, 597, 1355, 502, 11, 1392, 11, 3006, 13, 407, 11, 498, 286, 1949, 341, 1729, 502, 11, 50988], 'temperature': 0.0, 'avg_logprob': -0.1472122266695097, 'compression_ratio': 1.5360824742268042, 'no_speech_prob': 0.002378503791987896}, {'id': 480, 'seek': 324608, 'start': 3259.6, 'end': 3265.44, 'text': ' right, these two have different values, maximum of this is 1. Now, if you ask me why is that that', 'tokens': [51040, 558, 11, 613, 732, 362, 819, 4190, 11, 6674, 295, 341, 307, 502, 13, 823, 11, 498, 291, 1029, 385, 983, 307, 300, 300, 51332], 'temperature': 0.0, 'avg_logprob': -0.1472122266695097, 'compression_ratio': 1.5360824742268042, 'no_speech_prob': 0.002378503791987896}, {'id': 481, 'seek': 324608, 'start': 3266.24, 'end': 3274.16, 'text': ' computing T1 requires only 1 register even though computing one of its child also requires 1 register.', 'tokens': [51372, 15866, 314, 16, 7029, 787, 502, 7280, 754, 1673, 15866, 472, 295, 1080, 1440, 611, 7029, 502, 7280, 13, 51768], 'temperature': 0.0, 'avg_logprob': -0.1472122266695097, 'compression_ratio': 1.5360824742268042, 'no_speech_prob': 0.002378503791987896}, {'id': 482, 'seek': 327416, 'start': 3274.3199999999997, 'end': 3284.3199999999997, 'text': ' The other can be in memory, right. That is the reason. Now, what about T3? T3 requires 2 by our', 'tokens': [50372, 440, 661, 393, 312, 294, 4675, 11, 558, 13, 663, 307, 264, 1778, 13, 823, 11, 437, 466, 314, 18, 30, 314, 18, 7029, 568, 538, 527, 50872], 'temperature': 0.0, 'avg_logprob': -0.14376861572265626, 'compression_ratio': 1.4919786096256684, 'no_speech_prob': 0.002819404471665621}, {'id': 483, 'seek': 327416, 'start': 3284.3199999999997, 'end': 3288.64, 'text': ' algorithm. That is true. You people remember the algorithm and you have applied it correctly.', 'tokens': [50872, 9284, 13, 663, 307, 2074, 13, 509, 561, 1604, 264, 9284, 293, 291, 362, 6456, 309, 8944, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.14376861572265626, 'compression_ratio': 1.4919786096256684, 'no_speech_prob': 0.002819404471665621}, {'id': 484, 'seek': 327416, 'start': 3288.64, 'end': 3299.44, 'text': ' That is good. But why does it require 2? Both are not leaf. Both will be in the register.', 'tokens': [51088, 663, 307, 665, 13, 583, 983, 775, 309, 3651, 568, 30, 6767, 366, 406, 10871, 13, 6767, 486, 312, 294, 264, 7280, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.14376861572265626, 'compression_ratio': 1.4919786096256684, 'no_speech_prob': 0.002819404471665621}, {'id': 485, 'seek': 330416, 'start': 3304.64, 'end': 3312.48, 'text': ' So, E has to be in the register. So, that requires 1 register, correct. But this can be in memory.', 'tokens': [50388, 407, 11, 462, 575, 281, 312, 294, 264, 7280, 13, 407, 11, 300, 7029, 502, 7280, 11, 3006, 13, 583, 341, 393, 312, 294, 4675, 13, 50780], 'temperature': 0.0, 'avg_logprob': -0.12536532878875734, 'compression_ratio': 1.7804878048780488, 'no_speech_prob': 0.00285504013299942}, {'id': 486, 'seek': 330416, 'start': 3317.44, 'end': 3325.04, 'text': ' To calculate T3, you need at least 1 register, correct. To calculate T2, you need at least 1', 'tokens': [51028, 1407, 8873, 314, 18, 11, 291, 643, 412, 1935, 502, 7280, 11, 3006, 13, 1407, 8873, 314, 17, 11, 291, 643, 412, 1935, 502, 51408], 'temperature': 0.0, 'avg_logprob': -0.12536532878875734, 'compression_ratio': 1.7804878048780488, 'no_speech_prob': 0.00285504013299942}, {'id': 487, 'seek': 330416, 'start': 3325.04, 'end': 3330.3199999999997, 'text': ' register. Without that, you cannot calculate, right. Therefore, even if you say that you do not need', 'tokens': [51408, 7280, 13, 9129, 300, 11, 291, 2644, 8873, 11, 558, 13, 7504, 11, 754, 498, 291, 584, 300, 291, 360, 406, 643, 51672], 'temperature': 0.0, 'avg_logprob': -0.12536532878875734, 'compression_ratio': 1.7804878048780488, 'no_speech_prob': 0.00285504013299942}, {'id': 488, 'seek': 333032, 'start': 3330.96, 'end': 3335.84, 'text': ' any register for doing this, you need to do this first before you can do this thing.', 'tokens': [50396, 604, 7280, 337, 884, 341, 11, 291, 643, 281, 360, 341, 700, 949, 291, 393, 360, 341, 551, 13, 50640], 'temperature': 0.0, 'avg_logprob': -0.07968779750492262, 'compression_ratio': 1.7727272727272727, 'no_speech_prob': 0.002568882890045643}, {'id': 489, 'seek': 333032, 'start': 3336.56, 'end': 3341.1200000000003, 'text': ' So, essentially the minimum register that is required to do this would be the', 'tokens': [50676, 407, 11, 4476, 264, 7285, 7280, 300, 307, 4739, 281, 360, 341, 576, 312, 264, 50904], 'temperature': 0.0, 'avg_logprob': -0.07968779750492262, 'compression_ratio': 1.7727272727272727, 'no_speech_prob': 0.002568882890045643}, {'id': 490, 'seek': 333032, 'start': 3343.04, 'end': 3349.1200000000003, 'text': ' maximum of this plus 1. Sorry, not the maximum. These are equal. Sorry. So, any one of them plus', 'tokens': [51000, 6674, 295, 341, 1804, 502, 13, 4919, 11, 406, 264, 6674, 13, 1981, 366, 2681, 13, 4919, 13, 407, 11, 604, 472, 295, 552, 1804, 51304], 'temperature': 0.0, 'avg_logprob': -0.07968779750492262, 'compression_ratio': 1.7727272727272727, 'no_speech_prob': 0.002568882890045643}, {'id': 491, 'seek': 333032, 'start': 3349.1200000000003, 'end': 3358.0800000000004, 'text': ' 1, correct. So, if I have 2 registers, right, then I can use one register to calculate this', 'tokens': [51304, 502, 11, 3006, 13, 407, 11, 498, 286, 362, 568, 38351, 11, 558, 11, 550, 286, 393, 764, 472, 7280, 281, 8873, 341, 51752], 'temperature': 0.0, 'avg_logprob': -0.07968779750492262, 'compression_ratio': 1.7727272727272727, 'no_speech_prob': 0.002568882890045643}, {'id': 492, 'seek': 335808, 'start': 3358.72, 'end': 3363.04, 'text': ' and another register to load this and then compute this value.', 'tokens': [50396, 293, 1071, 7280, 281, 3677, 341, 293, 550, 14722, 341, 2158, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.11729159721961388, 'compression_ratio': 1.5314009661835748, 'no_speech_prob': 0.0020904354751110077}, {'id': 493, 'seek': 335808, 'start': 3364.64, 'end': 3369.6, 'text': ' I am going to extend this little later, but let us go with this example for the time being.', 'tokens': [50692, 286, 669, 516, 281, 10101, 341, 707, 1780, 11, 457, 718, 505, 352, 365, 341, 1365, 337, 264, 565, 885, 13, 50940], 'temperature': 0.0, 'avg_logprob': -0.11729159721961388, 'compression_ratio': 1.5314009661835748, 'no_speech_prob': 0.0020904354751110077}, {'id': 494, 'seek': 335808, 'start': 3370.3199999999997, 'end': 3376.72, 'text': ' Now, what about here? Again, we can say T1 requires 1 register. What about T4?', 'tokens': [50976, 823, 11, 437, 466, 510, 30, 3764, 11, 321, 393, 584, 314, 16, 7029, 502, 7280, 13, 708, 466, 314, 19, 30, 51296], 'temperature': 0.0, 'avg_logprob': -0.11729159721961388, 'compression_ratio': 1.5314009661835748, 'no_speech_prob': 0.0020904354751110077}, {'id': 495, 'seek': 335808, 'start': 3380.72, 'end': 3387.6, 'text': ' 2. Why 2? Maximum of that. Algorithm says maximum of that. So, say T and Wolman are', 'tokens': [51496, 568, 13, 1545, 568, 30, 29076, 449, 295, 300, 13, 35014, 6819, 76, 1619, 6674, 295, 300, 13, 407, 11, 584, 314, 293, 19925, 1601, 366, 51840], 'temperature': 0.0, 'avg_logprob': -0.11729159721961388, 'compression_ratio': 1.5314009661835748, 'no_speech_prob': 0.0020904354751110077}, {'id': 496, 'seek': 338760, 'start': 3387.6, 'end': 3391.12, 'text': ' correct. They are intelligent. They said that correctly, but why are they intelligent?', 'tokens': [50364, 3006, 13, 814, 366, 13232, 13, 814, 848, 300, 8944, 11, 457, 983, 366, 436, 13232, 30, 50540], 'temperature': 0.0, 'avg_logprob': -0.16562949909883387, 'compression_ratio': 1.5317460317460319, 'no_speech_prob': 0.002823233837261796}, {'id': 497, 'seek': 338760, 'start': 3395.92, 'end': 3400.3199999999997, 'text': ' For computing, correct.', 'tokens': [50780, 1171, 15866, 11, 3006, 13, 51000], 'temperature': 0.0, 'avg_logprob': -0.16562949909883387, 'compression_ratio': 1.5317460317460319, 'no_speech_prob': 0.002823233837261796}, {'id': 498, 'seek': 338760, 'start': 3404.4, 'end': 3410.3199999999997, 'text': ' But for calculating T3, I need 2 registers. For calculating T1, I need 1 register.', 'tokens': [51204, 583, 337, 28258, 314, 18, 11, 286, 643, 568, 38351, 13, 1171, 28258, 314, 16, 11, 286, 643, 502, 7280, 13, 51500], 'temperature': 0.0, 'avg_logprob': -0.16562949909883387, 'compression_ratio': 1.5317460317460319, 'no_speech_prob': 0.002823233837261796}, {'id': 499, 'seek': 341032, 'start': 3410.4, 'end': 3411.76, 'text': ' Should not it be totally 3?', 'tokens': [50368, 6454, 406, 309, 312, 3879, 805, 30, 50436], 'temperature': 0.0, 'avg_logprob': -0.13083737333055953, 'compression_ratio': 1.6775956284153006, 'no_speech_prob': 0.011733739636838436}, {'id': 500, 'seek': 341032, 'start': 3417.6000000000004, 'end': 3423.1200000000003, 'text': ' Even though I might require 2 registers for this, after calculating the result,', 'tokens': [50728, 2754, 1673, 286, 1062, 3651, 568, 38351, 337, 341, 11, 934, 28258, 264, 1874, 11, 51004], 'temperature': 0.0, 'avg_logprob': -0.13083737333055953, 'compression_ratio': 1.6775956284153006, 'no_speech_prob': 0.011733739636838436}, {'id': 501, 'seek': 341032, 'start': 3423.1200000000003, 'end': 3430.32, 'text': ' I can keep the value in one register and then reuse the other registers for the other calculation.', 'tokens': [51004, 286, 393, 1066, 264, 2158, 294, 472, 7280, 293, 550, 26225, 264, 661, 38351, 337, 264, 661, 17108, 13, 51364], 'temperature': 0.0, 'avg_logprob': -0.13083737333055953, 'compression_ratio': 1.6775956284153006, 'no_speech_prob': 0.011733739636838436}, {'id': 502, 'seek': 341032, 'start': 3430.32, 'end': 3435.84, 'text': ' So, essentially after computing this value, there is only one register that I need for storing this,', 'tokens': [51364, 407, 11, 4476, 934, 15866, 341, 2158, 11, 456, 307, 787, 472, 7280, 300, 286, 643, 337, 26085, 341, 11, 51640], 'temperature': 0.0, 'avg_logprob': -0.13083737333055953, 'compression_ratio': 1.6775956284153006, 'no_speech_prob': 0.011733739636838436}, {'id': 503, 'seek': 343584, 'start': 3436.48, 'end': 3440.32, 'text': ' correct. And if these 2 are different, the maximum is at least going to be', 'tokens': [50396, 3006, 13, 400, 498, 613, 568, 366, 819, 11, 264, 6674, 307, 412, 1935, 516, 281, 312, 50588], 'temperature': 0.0, 'avg_logprob': -0.0931097789875512, 'compression_ratio': 1.8101265822784811, 'no_speech_prob': 0.002122423378750682}, {'id': 504, 'seek': 343584, 'start': 3441.04, 'end': 3446.96, 'text': ' one more than the other, right. Therefore, if I take one out of this,', 'tokens': [50624, 472, 544, 813, 264, 661, 11, 558, 13, 7504, 11, 498, 286, 747, 472, 484, 295, 341, 11, 50920], 'temperature': 0.0, 'avg_logprob': -0.0931097789875512, 'compression_ratio': 1.8101265822784811, 'no_speech_prob': 0.002122423378750682}, {'id': 505, 'seek': 343584, 'start': 3446.96, 'end': 3454.0, 'text': ' the remaining should be enough for computing this one. So, the requirement for this is specified by', 'tokens': [50920, 264, 8877, 820, 312, 1547, 337, 15866, 341, 472, 13, 407, 11, 264, 11695, 337, 341, 307, 22206, 538, 51272], 'temperature': 0.0, 'avg_logprob': -0.0931097789875512, 'compression_ratio': 1.8101265822784811, 'no_speech_prob': 0.002122423378750682}, {'id': 506, 'seek': 343584, 'start': 3454.0, 'end': 3459.76, 'text': ' the requirement of the one which has more registers, which requires more registers, right.', 'tokens': [51272, 264, 11695, 295, 264, 472, 597, 575, 544, 38351, 11, 597, 7029, 544, 38351, 11, 558, 13, 51560], 'temperature': 0.0, 'avg_logprob': -0.0931097789875512, 'compression_ratio': 1.8101265822784811, 'no_speech_prob': 0.002122423378750682}, {'id': 507, 'seek': 343584, 'start': 3459.76, 'end': 3465.28, 'text': ' That is the reason for this. So, does that mean that the order of evaluation does not matter?', 'tokens': [51560, 663, 307, 264, 1778, 337, 341, 13, 407, 11, 775, 300, 914, 300, 264, 1668, 295, 13344, 775, 406, 1871, 30, 51836], 'temperature': 0.0, 'avg_logprob': -0.0931097789875512, 'compression_ratio': 1.8101265822784811, 'no_speech_prob': 0.002122423378750682}, {'id': 508, 'seek': 346584, 'start': 3466.32, 'end': 3473.36, 'text': ' Say that it is only the maximum subtree that I have to, the one which requires the maximum register.', 'tokens': [50388, 6463, 300, 309, 307, 787, 264, 6674, 7257, 701, 300, 286, 362, 281, 11, 264, 472, 597, 7029, 264, 6674, 7280, 13, 50740], 'temperature': 0.0, 'avg_logprob': -0.14224899990457884, 'compression_ratio': 1.572972972972973, 'no_speech_prob': 0.002080332487821579}, {'id': 509, 'seek': 346584, 'start': 3477.6000000000004, 'end': 3484.56, 'text': ' It matters because if I do end up generating code for this first and want to keep this in', 'tokens': [50952, 467, 7001, 570, 498, 286, 360, 917, 493, 17746, 3089, 337, 341, 700, 293, 528, 281, 1066, 341, 294, 51300], 'temperature': 0.0, 'avg_logprob': -0.14224899990457884, 'compression_ratio': 1.572972972972973, 'no_speech_prob': 0.002080332487821579}, {'id': 510, 'seek': 346584, 'start': 3484.56, 'end': 3491.76, 'text': ' the register, then I would require 2 more registers for doing this, correct. That is a bad decision.', 'tokens': [51300, 264, 7280, 11, 550, 286, 576, 3651, 568, 544, 38351, 337, 884, 341, 11, 3006, 13, 663, 307, 257, 1578, 3537, 13, 51660], 'temperature': 0.0, 'avg_logprob': -0.14224899990457884, 'compression_ratio': 1.572972972972973, 'no_speech_prob': 0.002080332487821579}, {'id': 511, 'seek': 349176, 'start': 3492.5600000000004, 'end': 3498.96, 'text': ' Whereas, if I have done this first, I could have done it with 2 registers and then given up all,', 'tokens': [50404, 13813, 11, 498, 286, 362, 1096, 341, 700, 11, 286, 727, 362, 1096, 309, 365, 568, 38351, 293, 550, 2212, 493, 439, 11, 50724], 'temperature': 0.0, 'avg_logprob': -0.08412773468915154, 'compression_ratio': 1.793103448275862, 'no_speech_prob': 0.007263512350618839}, {'id': 512, 'seek': 349176, 'start': 3498.96, 'end': 3505.6000000000004, 'text': ' but one register and then use those registers for calculating this subtree. That means that', 'tokens': [50724, 457, 472, 7280, 293, 550, 764, 729, 38351, 337, 28258, 341, 7257, 701, 13, 663, 1355, 300, 51056], 'temperature': 0.0, 'avg_logprob': -0.08412773468915154, 'compression_ratio': 1.793103448275862, 'no_speech_prob': 0.007263512350618839}, {'id': 513, 'seek': 349176, 'start': 3505.6000000000004, 'end': 3512.1600000000003, 'text': ' whenever you have a subtree, sorry, whenever you have a node with left subtree and right subtree', 'tokens': [51056, 5699, 291, 362, 257, 7257, 701, 11, 2597, 11, 5699, 291, 362, 257, 9984, 365, 1411, 7257, 701, 293, 558, 7257, 701, 51384], 'temperature': 0.0, 'avg_logprob': -0.08412773468915154, 'compression_ratio': 1.793103448275862, 'no_speech_prob': 0.007263512350618839}, {'id': 514, 'seek': 349176, 'start': 3512.1600000000003, 'end': 3517.76, 'text': ' having different register requirement, you must first compute the one with the', 'tokens': [51384, 1419, 819, 7280, 11695, 11, 291, 1633, 700, 14722, 264, 472, 365, 264, 51664], 'temperature': 0.0, 'avg_logprob': -0.08412773468915154, 'compression_ratio': 1.793103448275862, 'no_speech_prob': 0.007263512350618839}, {'id': 515, 'seek': 351776, 'start': 3518.5600000000004, 'end': 3524.96, 'text': ' higher requirement. First satisfy them and then generate code for that. Then after that,', 'tokens': [50404, 2946, 11695, 13, 2386, 19319, 552, 293, 550, 8460, 3089, 337, 300, 13, 1396, 934, 300, 11, 50724], 'temperature': 0.0, 'avg_logprob': -0.1200255597575327, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.01330085750669241}, {'id': 516, 'seek': 351776, 'start': 3524.96, 'end': 3530.32, 'text': ' go ahead and generate code for the other one. And when you do that, what really happens is that you', 'tokens': [50724, 352, 2286, 293, 8460, 3089, 337, 264, 661, 472, 13, 400, 562, 291, 360, 300, 11, 437, 534, 2314, 307, 300, 291, 50992], 'temperature': 0.0, 'avg_logprob': -0.1200255597575327, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.01330085750669241}, {'id': 517, 'seek': 351776, 'start': 3530.32, 'end': 3537.1200000000003, 'text': ' can release all but one register and that should be sufficient for generating code for the other', 'tokens': [50992, 393, 4374, 439, 457, 472, 7280, 293, 300, 820, 312, 11563, 337, 17746, 3089, 337, 264, 661, 51332], 'temperature': 0.0, 'avg_logprob': -0.1200255597575327, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.01330085750669241}, {'id': 518, 'seek': 351776, 'start': 3537.1200000000003, 'end': 3545.28, 'text': ' side. So, even if I say this requires m registers, right, and this requires m minus 3 registers,', 'tokens': [51332, 1252, 13, 407, 11, 754, 498, 286, 584, 341, 7029, 275, 38351, 11, 558, 11, 293, 341, 7029, 275, 3175, 805, 38351, 11, 51740], 'temperature': 0.0, 'avg_logprob': -0.1200255597575327, 'compression_ratio': 1.7767441860465116, 'no_speech_prob': 0.01330085750669241}, {'id': 519, 'seek': 354528, 'start': 3546.1600000000003, 'end': 3554.0, 'text': ' right, I can use all these m registers to calculate this and then I can release m minus 1 registers,', 'tokens': [50408, 558, 11, 286, 393, 764, 439, 613, 275, 38351, 281, 8873, 341, 293, 550, 286, 393, 4374, 275, 3175, 502, 38351, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.14617524687776862, 'compression_ratio': 1.7813953488372094, 'no_speech_prob': 0.0015854210359975696}, {'id': 520, 'seek': 354528, 'start': 3554.8, 'end': 3561.44, 'text': ' right, except for one register which holds the result value and then use those m minus 1 registers.', 'tokens': [50840, 558, 11, 3993, 337, 472, 7280, 597, 9190, 264, 1874, 2158, 293, 550, 764, 729, 275, 3175, 502, 38351, 13, 51172], 'temperature': 0.0, 'avg_logprob': -0.14617524687776862, 'compression_ratio': 1.7813953488372094, 'no_speech_prob': 0.0015854210359975696}, {'id': 521, 'seek': 354528, 'start': 3561.44, 'end': 3567.44, 'text': ' I only require m minus 3 here. Even better that, right. I can compute this without any problem', 'tokens': [51172, 286, 787, 3651, 275, 3175, 805, 510, 13, 2754, 1101, 300, 11, 558, 13, 286, 393, 14722, 341, 1553, 604, 1154, 51472], 'temperature': 0.0, 'avg_logprob': -0.14617524687776862, 'compression_ratio': 1.7813953488372094, 'no_speech_prob': 0.0015854210359975696}, {'id': 522, 'seek': 354528, 'start': 3567.44, 'end': 3572.96, 'text': ' and then I can go ahead and complete, right. That is why in the Sethi-Wulman algorithm,', 'tokens': [51472, 293, 550, 286, 393, 352, 2286, 293, 3566, 11, 558, 13, 663, 307, 983, 294, 264, 25353, 72, 12, 54, 425, 1601, 9284, 11, 51748], 'temperature': 0.0, 'avg_logprob': -0.14617524687776862, 'compression_ratio': 1.7813953488372094, 'no_speech_prob': 0.0015854210359975696}, {'id': 523, 'seek': 357296, 'start': 3572.96, 'end': 3579.52, 'text': ' when you do the labeling, right, if you have different values, different label values for', 'tokens': [50364, 562, 291, 360, 264, 40244, 11, 558, 11, 498, 291, 362, 819, 4190, 11, 819, 7645, 4190, 337, 50692], 'temperature': 0.0, 'avg_logprob': -0.10258670185887536, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0025128780398517847}, {'id': 524, 'seek': 357296, 'start': 3579.52, 'end': 3585.28, 'text': ' the left and right side, right side, then you take the maximum of the two and label it as the', 'tokens': [50692, 264, 1411, 293, 558, 1252, 11, 558, 1252, 11, 550, 291, 747, 264, 6674, 295, 264, 732, 293, 7645, 309, 382, 264, 50980], 'temperature': 0.0, 'avg_logprob': -0.10258670185887536, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0025128780398517847}, {'id': 525, 'seek': 357296, 'start': 3585.28, 'end': 3590.8, 'text': ' root node value. And in those cases, you have to calculate the one which has higher register', 'tokens': [50980, 5593, 9984, 2158, 13, 400, 294, 729, 3331, 11, 291, 362, 281, 8873, 264, 472, 597, 575, 2946, 7280, 51256], 'temperature': 0.0, 'avg_logprob': -0.10258670185887536, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0025128780398517847}, {'id': 526, 'seek': 357296, 'start': 3590.8, 'end': 3598.08, 'text': ' requirement first and then the other. And again, when you calculate the generate code for', 'tokens': [51256, 11695, 700, 293, 550, 264, 661, 13, 400, 797, 11, 562, 291, 8873, 264, 8460, 3089, 337, 51620], 'temperature': 0.0, 'avg_logprob': -0.10258670185887536, 'compression_ratio': 1.8484848484848484, 'no_speech_prob': 0.0025128780398517847}, {'id': 527, 'seek': 359808, 'start': 3598.08, 'end': 3604.4, 'text': ' this subtree first, remember you have to complete this entire subtree before you go here.', 'tokens': [50364, 341, 7257, 701, 700, 11, 1604, 291, 362, 281, 3566, 341, 2302, 7257, 701, 949, 291, 352, 510, 13, 50680], 'temperature': 0.0, 'avg_logprob': -0.10793982054057874, 'compression_ratio': 1.6710526315789473, 'no_speech_prob': 0.03223961964249611}, {'id': 528, 'seek': 359808, 'start': 3604.4, 'end': 3608.7999999999997, 'text': ' Because if you do some part of the subtree and then say, okay, stop, I will go to the other side,', 'tokens': [50680, 1436, 498, 291, 360, 512, 644, 295, 264, 7257, 701, 293, 550, 584, 11, 1392, 11, 1590, 11, 286, 486, 352, 281, 264, 661, 1252, 11, 50900], 'temperature': 0.0, 'avg_logprob': -0.10793982054057874, 'compression_ratio': 1.6710526315789473, 'no_speech_prob': 0.03223961964249611}, {'id': 529, 'seek': 359808, 'start': 3609.44, 'end': 3615.92, 'text': ' then you are gone. Why? Because you have partial results evaluated and those needs to be kept', 'tokens': [50932, 550, 291, 366, 2780, 13, 1545, 30, 1436, 291, 362, 14641, 3542, 25509, 293, 729, 2203, 281, 312, 4305, 51256], 'temperature': 0.0, 'avg_logprob': -0.10793982054057874, 'compression_ratio': 1.6710526315789473, 'no_speech_prob': 0.03223961964249611}, {'id': 530, 'seek': 359808, 'start': 3616.48, 'end': 3622.64, 'text': ' and you cannot release your m minus 1 registers, right. That is the reason why you have to complete', 'tokens': [51284, 293, 291, 2644, 4374, 428, 275, 3175, 502, 38351, 11, 558, 13, 663, 307, 264, 1778, 983, 291, 362, 281, 3566, 51592], 'temperature': 0.0, 'avg_logprob': -0.10793982054057874, 'compression_ratio': 1.6710526315789473, 'no_speech_prob': 0.03223961964249611}, {'id': 531, 'seek': 362264, 'start': 3622.64, 'end': 3629.92, 'text': ' code generation for this before you move to the other side, right. Is that clear? Any questions?', 'tokens': [50364, 3089, 5125, 337, 341, 949, 291, 1286, 281, 264, 661, 1252, 11, 558, 13, 1119, 300, 1850, 30, 2639, 1651, 30, 50728], 'temperature': 0.0, 'avg_logprob': -0.08236543755782277, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.06105855479836464}, {'id': 532, 'seek': 362264, 'start': 3631.2, 'end': 3639.04, 'text': ' Okay. So, let us see how this happens. Okay. So, we have this. So, the code generation algorithm', 'tokens': [50792, 1033, 13, 407, 11, 718, 505, 536, 577, 341, 2314, 13, 1033, 13, 407, 11, 321, 362, 341, 13, 407, 11, 264, 3089, 5125, 9284, 51184], 'temperature': 0.0, 'avg_logprob': -0.08236543755782277, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.06105855479836464}, {'id': 533, 'seek': 362264, 'start': 3639.04, 'end': 3647.12, 'text': ' is that, okay. So, once you have labeled all of these nodes, the minimum number of registers that', 'tokens': [51184, 307, 300, 11, 1392, 13, 407, 11, 1564, 291, 362, 21335, 439, 295, 613, 13891, 11, 264, 7285, 1230, 295, 38351, 300, 51588], 'temperature': 0.0, 'avg_logprob': -0.08236543755782277, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.06105855479836464}, {'id': 534, 'seek': 364712, 'start': 3647.12, 'end': 3655.12, 'text': ' you require to generate code for this is given by the label of the root node, okay. So, if you have', 'tokens': [50364, 291, 3651, 281, 8460, 3089, 337, 341, 307, 2212, 538, 264, 7645, 295, 264, 5593, 9984, 11, 1392, 13, 407, 11, 498, 291, 362, 50764], 'temperature': 0.0, 'avg_logprob': -0.07560440834532393, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.009937155060470104}, {'id': 535, 'seek': 364712, 'start': 3655.12, 'end': 3661.44, 'text': ' that many number of registers, then you can generate code for this without any spill, okay.', 'tokens': [50764, 300, 867, 1230, 295, 38351, 11, 550, 291, 393, 8460, 3089, 337, 341, 1553, 604, 22044, 11, 1392, 13, 51080], 'temperature': 0.0, 'avg_logprob': -0.07560440834532393, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.009937155060470104}, {'id': 536, 'seek': 364712, 'start': 3661.44, 'end': 3666.16, 'text': ' And you can actually generate the optimal code. And to generate the optimal code, what you need', 'tokens': [51080, 400, 291, 393, 767, 8460, 264, 16252, 3089, 13, 400, 281, 8460, 264, 16252, 3089, 11, 437, 291, 643, 51316], 'temperature': 0.0, 'avg_logprob': -0.07560440834532393, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.009937155060470104}, {'id': 537, 'seek': 364712, 'start': 3666.16, 'end': 3671.8399999999997, 'text': ' to do is that you need to start off with the root, okay. There is an algorithm which actually goes', 'tokens': [51316, 281, 360, 307, 300, 291, 643, 281, 722, 766, 365, 264, 5593, 11, 1392, 13, 821, 307, 364, 9284, 597, 767, 1709, 51600], 'temperature': 0.0, 'avg_logprob': -0.07560440834532393, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.009937155060470104}, {'id': 538, 'seek': 367184, 'start': 3671.84, 'end': 3678.0, 'text': ' step by step, which we will also describe little later on, right. And essentially that algorithm,', 'tokens': [50364, 1823, 538, 1823, 11, 597, 321, 486, 611, 6786, 707, 1780, 322, 11, 558, 13, 400, 4476, 300, 9284, 11, 50672], 'temperature': 0.0, 'avg_logprob': -0.11494662783561496, 'compression_ratio': 1.8024193548387097, 'no_speech_prob': 0.014665652066469193}, {'id': 539, 'seek': 367184, 'start': 3678.0, 'end': 3684.08, 'text': ' the way by which it calculates is that it will see whether the left child or the right child,', 'tokens': [50672, 264, 636, 538, 597, 309, 4322, 1024, 307, 300, 309, 486, 536, 1968, 264, 1411, 1440, 420, 264, 558, 1440, 11, 50976], 'temperature': 0.0, 'avg_logprob': -0.11494662783561496, 'compression_ratio': 1.8024193548387097, 'no_speech_prob': 0.014665652066469193}, {'id': 540, 'seek': 367184, 'start': 3684.08, 'end': 3689.2000000000003, 'text': ' which has more register requirement. It will try to generate code for that side first', 'tokens': [50976, 597, 575, 544, 7280, 11695, 13, 467, 486, 853, 281, 8460, 3089, 337, 300, 1252, 700, 51232], 'temperature': 0.0, 'avg_logprob': -0.11494662783561496, 'compression_ratio': 1.8024193548387097, 'no_speech_prob': 0.014665652066469193}, {'id': 541, 'seek': 367184, 'start': 3690.0, 'end': 3694.88, 'text': ' and then go to the other side. And then once it goes to a particular side, it goes', 'tokens': [51272, 293, 550, 352, 281, 264, 661, 1252, 13, 400, 550, 1564, 309, 1709, 281, 257, 1729, 1252, 11, 309, 1709, 51516], 'temperature': 0.0, 'avg_logprob': -0.11494662783561496, 'compression_ratio': 1.8024193548387097, 'no_speech_prob': 0.014665652066469193}, {'id': 542, 'seek': 367184, 'start': 3694.88, 'end': 3700.4, 'text': ' depth first, right. That is really what it does. Again, it applies the same algorithm.', 'tokens': [51516, 7161, 700, 11, 558, 13, 663, 307, 534, 437, 309, 775, 13, 3764, 11, 309, 13165, 264, 912, 9284, 13, 51792], 'temperature': 0.0, 'avg_logprob': -0.11494662783561496, 'compression_ratio': 1.8024193548387097, 'no_speech_prob': 0.014665652066469193}, {'id': 543, 'seek': 370040, 'start': 3700.4, 'end': 3705.52, 'text': ' Between left child and right child, whichever one which has more number of requires,', 'tokens': [50364, 18967, 1411, 1440, 293, 558, 1440, 11, 24123, 472, 597, 575, 544, 1230, 295, 7029, 11, 50620], 'temperature': 0.0, 'avg_logprob': -0.11605732781546456, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.002655541989952326}, {'id': 544, 'seek': 370040, 'start': 3705.52, 'end': 3710.1600000000003, 'text': ' whichever one which requires more number of registers, that is done first, okay.', 'tokens': [50620, 24123, 472, 597, 7029, 544, 1230, 295, 38351, 11, 300, 307, 1096, 700, 11, 1392, 13, 50852], 'temperature': 0.0, 'avg_logprob': -0.11605732781546456, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.002655541989952326}, {'id': 545, 'seek': 370040, 'start': 3710.1600000000003, 'end': 3714.96, 'text': ' So, let us see what happens here. This is the detail of that particular algorithm. We will', 'tokens': [50852, 407, 11, 718, 505, 536, 437, 2314, 510, 13, 639, 307, 264, 2607, 295, 300, 1729, 9284, 13, 492, 486, 51092], 'temperature': 0.0, 'avg_logprob': -0.11605732781546456, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.002655541989952326}, {'id': 546, 'seek': 370040, 'start': 3714.96, 'end': 3726.88, 'text': ' look at it carefully, right, okay. Now, this uses two data structures, one called R stack,', 'tokens': [51092, 574, 412, 309, 7500, 11, 558, 11, 1392, 13, 823, 11, 341, 4960, 732, 1412, 9227, 11, 472, 1219, 497, 8630, 11, 51688], 'temperature': 0.0, 'avg_logprob': -0.11605732781546456, 'compression_ratio': 1.6602870813397128, 'no_speech_prob': 0.002655541989952326}, {'id': 547, 'seek': 372688, 'start': 3726.88, 'end': 3733.76, 'text': ' which is the register stack and the other called T stack, which is the temporary stack, right.', 'tokens': [50364, 597, 307, 264, 7280, 8630, 293, 264, 661, 1219, 314, 8630, 11, 597, 307, 264, 13413, 8630, 11, 558, 13, 50708], 'temperature': 0.0, 'avg_logprob': -0.09753471491288165, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.020850274711847305}, {'id': 548, 'seek': 372688, 'start': 3734.32, 'end': 3740.8, 'text': ' Supposing, let us say you are given R register and you want to generate code for this using R', 'tokens': [50736, 9391, 6110, 11, 718, 505, 584, 291, 366, 2212, 497, 7280, 293, 291, 528, 281, 8460, 3089, 337, 341, 1228, 497, 51060], 'temperature': 0.0, 'avg_logprob': -0.09753471491288165, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.020850274711847305}, {'id': 549, 'seek': 372688, 'start': 3740.8, 'end': 3748.08, 'text': ' registers, right. It may be possible that, I mean, it may be the case that the root of this tree', 'tokens': [51060, 38351, 11, 558, 13, 467, 815, 312, 1944, 300, 11, 286, 914, 11, 309, 815, 312, 264, 1389, 300, 264, 5593, 295, 341, 4230, 51424], 'temperature': 0.0, 'avg_logprob': -0.09753471491288165, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.020850274711847305}, {'id': 550, 'seek': 372688, 'start': 3748.88, 'end': 3753.84, 'text': ' has a label less than R, in which case you should be able to generate less than or equal to R,', 'tokens': [51464, 575, 257, 7645, 1570, 813, 497, 11, 294, 597, 1389, 291, 820, 312, 1075, 281, 8460, 1570, 813, 420, 2681, 281, 497, 11, 51712], 'temperature': 0.0, 'avg_logprob': -0.09753471491288165, 'compression_ratio': 1.7924528301886793, 'no_speech_prob': 0.020850274711847305}, {'id': 551, 'seek': 375384, 'start': 3753.84, 'end': 3759.6000000000004, 'text': ' in which case you should be able to generate code without any spill. Or it may be the case that', 'tokens': [50364, 294, 597, 1389, 291, 820, 312, 1075, 281, 8460, 3089, 1553, 604, 22044, 13, 1610, 309, 815, 312, 264, 1389, 300, 50652], 'temperature': 0.0, 'avg_logprob': -0.09376316070556641, 'compression_ratio': 1.7268518518518519, 'no_speech_prob': 0.004467569757252932}, {'id': 552, 'seek': 375384, 'start': 3759.6000000000004, 'end': 3766.6400000000003, 'text': ' it is greater than R. If it is greater than R, right, then obviously there will be some spills', 'tokens': [50652, 309, 307, 5044, 813, 497, 13, 759, 309, 307, 5044, 813, 497, 11, 558, 11, 550, 2745, 456, 486, 312, 512, 637, 2565, 51004], 'temperature': 0.0, 'avg_logprob': -0.09376316070556641, 'compression_ratio': 1.7268518518518519, 'no_speech_prob': 0.004467569757252932}, {'id': 553, 'seek': 375384, 'start': 3766.6400000000003, 'end': 3772.0, 'text': ' and some temporaries which are needed. So, this T stack is the temporaries that we are going to', 'tokens': [51004, 293, 512, 8219, 4889, 597, 366, 2978, 13, 407, 11, 341, 314, 8630, 307, 264, 8219, 4889, 300, 321, 366, 516, 281, 51272], 'temperature': 0.0, 'avg_logprob': -0.09376316070556641, 'compression_ratio': 1.7268518518518519, 'no_speech_prob': 0.004467569757252932}, {'id': 554, 'seek': 375384, 'start': 3772.0, 'end': 3780.6400000000003, 'text': ' talk about, okay. So, this uses a recursive procedure called gen code, which generates', 'tokens': [51272, 751, 466, 11, 1392, 13, 407, 11, 341, 4960, 257, 20560, 488, 10747, 1219, 1049, 3089, 11, 597, 23815, 51704], 'temperature': 0.0, 'avg_logprob': -0.09376316070556641, 'compression_ratio': 1.7268518518518519, 'no_speech_prob': 0.004467569757252932}, {'id': 555, 'seek': 378064, 'start': 3780.64, 'end': 3789.04, 'text': ' code for node n. And when it generates code for node n and this R stack, which is actually a stack,', 'tokens': [50364, 3089, 337, 9984, 297, 13, 400, 562, 309, 23815, 3089, 337, 9984, 297, 293, 341, 497, 8630, 11, 597, 307, 767, 257, 8630, 11, 50784], 'temperature': 0.0, 'avg_logprob': -0.10051401456197102, 'compression_ratio': 1.5614973262032086, 'no_speech_prob': 0.006384409498423338}, {'id': 556, 'seek': 378064, 'start': 3789.04, 'end': 3795.04, 'text': ' stack means what? Lost in first out data structure, okay. So, you should be able to do push and pop.', 'tokens': [50784, 8630, 1355, 437, 30, 23422, 294, 700, 484, 1412, 3877, 11, 1392, 13, 407, 11, 291, 820, 312, 1075, 281, 360, 2944, 293, 1665, 13, 51084], 'temperature': 0.0, 'avg_logprob': -0.10051401456197102, 'compression_ratio': 1.5614973262032086, 'no_speech_prob': 0.006384409498423338}, {'id': 557, 'seek': 378064, 'start': 3795.7599999999998, 'end': 3804.72, 'text': ' The top of the stack always holds the value computed of the left side. So, look at the last', 'tokens': [51120, 440, 1192, 295, 264, 8630, 1009, 9190, 264, 2158, 40610, 295, 264, 1411, 1252, 13, 407, 11, 574, 412, 264, 1036, 51568], 'temperature': 0.0, 'avg_logprob': -0.10051401456197102, 'compression_ratio': 1.5614973262032086, 'no_speech_prob': 0.006384409498423338}, {'id': 558, 'seek': 380472, 'start': 3804.72, 'end': 3810.9599999999996, 'text': ' statement, right. So, in doing this code generation, we are always ensured that the left', 'tokens': [50364, 5629, 11, 558, 13, 407, 11, 294, 884, 341, 3089, 5125, 11, 321, 366, 1009, 3489, 3831, 300, 264, 1411, 50676], 'temperature': 0.0, 'avg_logprob': -0.10248393597810165, 'compression_ratio': 1.857843137254902, 'no_speech_prob': 0.02072170004248619}, {'id': 559, 'seek': 380472, 'start': 3810.9599999999996, 'end': 3816.0, 'text': ' child is calculated on the top of the stack, on the register on the top of the stack. That is', 'tokens': [50676, 1440, 307, 15598, 322, 264, 1192, 295, 264, 8630, 11, 322, 264, 7280, 322, 264, 1192, 295, 264, 8630, 13, 663, 307, 50928], 'temperature': 0.0, 'avg_logprob': -0.10248393597810165, 'compression_ratio': 1.857843137254902, 'no_speech_prob': 0.02072170004248619}, {'id': 560, 'seek': 380472, 'start': 3816.0, 'end': 3822.48, 'text': ' really what we are trying to ensure, okay. I will go through that code generation in detail and you', 'tokens': [50928, 534, 437, 321, 366, 1382, 281, 5586, 11, 1392, 13, 286, 486, 352, 807, 300, 3089, 5125, 294, 2607, 293, 291, 51252], 'temperature': 0.0, 'avg_logprob': -0.10248393597810165, 'compression_ratio': 1.857843137254902, 'no_speech_prob': 0.02072170004248619}, {'id': 561, 'seek': 380472, 'start': 3822.48, 'end': 3829.9199999999996, 'text': ' will understand what is really happening, okay. And not only the left child holds the left child', 'tokens': [51252, 486, 1223, 437, 307, 534, 2737, 11, 1392, 13, 400, 406, 787, 264, 1411, 1440, 9190, 264, 1411, 1440, 51624], 'temperature': 0.0, 'avg_logprob': -0.10248393597810165, 'compression_ratio': 1.857843137254902, 'no_speech_prob': 0.02072170004248619}, {'id': 562, 'seek': 382992, 'start': 3830.0, 'end': 3835.28, 'text': ' values being held in the top of the R stack, the rest of the R stack remains in the same state', 'tokens': [50368, 4190, 885, 5167, 294, 264, 1192, 295, 264, 497, 8630, 11, 264, 1472, 295, 264, 497, 8630, 7023, 294, 264, 912, 1785, 50632], 'temperature': 0.0, 'avg_logprob': -0.08568821122161055, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.13563272356987}, {'id': 563, 'seek': 382992, 'start': 3835.92, 'end': 3841.36, 'text': ' as the one before the call. That is also very important, okay. It also uses a particular', 'tokens': [50664, 382, 264, 472, 949, 264, 818, 13, 663, 307, 611, 588, 1021, 11, 1392, 13, 467, 611, 4960, 257, 1729, 50936], 'temperature': 0.0, 'avg_logprob': -0.08568821122161055, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.13563272356987}, {'id': 564, 'seek': 382992, 'start': 3841.36, 'end': 3846.08, 'text': ' operation on the stack, which is an unusual operation, which is called the swap operation,', 'tokens': [50936, 6916, 322, 264, 8630, 11, 597, 307, 364, 10901, 6916, 11, 597, 307, 1219, 264, 18135, 6916, 11, 51172], 'temperature': 0.0, 'avg_logprob': -0.08568821122161055, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.13563272356987}, {'id': 565, 'seek': 382992, 'start': 3846.08, 'end': 3850.96, 'text': ' which is typically what is not defined in the stack, right. Stack you only have push and pop,', 'tokens': [51172, 597, 307, 5850, 437, 307, 406, 7642, 294, 264, 8630, 11, 558, 13, 37649, 291, 787, 362, 2944, 293, 1665, 11, 51416], 'temperature': 0.0, 'avg_logprob': -0.08568821122161055, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.13563272356987}, {'id': 566, 'seek': 382992, 'start': 3851.52, 'end': 3858.2400000000002, 'text': ' but swap essentially swaps the top two values of the stack. So, that is an additional operation', 'tokens': [51444, 457, 18135, 4476, 1693, 2382, 264, 1192, 732, 4190, 295, 264, 8630, 13, 407, 11, 300, 307, 364, 4497, 6916, 51780], 'temperature': 0.0, 'avg_logprob': -0.08568821122161055, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.13563272356987}, {'id': 567, 'seek': 385824, 'start': 3858.24, 'end': 3863.4399999999996, 'text': ' which is needed and that is needed to ensure that this previous condition that we talked about.', 'tokens': [50364, 597, 307, 2978, 293, 300, 307, 2978, 281, 5586, 300, 341, 3894, 4188, 300, 321, 2825, 466, 13, 50624], 'temperature': 0.0, 'avg_logprob': -0.08675840922764369, 'compression_ratio': 1.7921568627450981, 'no_speech_prob': 0.003336384892463684}, {'id': 568, 'seek': 385824, 'start': 3863.4399999999996, 'end': 3869.12, 'text': ' We will see what that is, okay. And again this is needed to prove the optimality case,', 'tokens': [50624, 492, 486, 536, 437, 300, 307, 11, 1392, 13, 400, 797, 341, 307, 2978, 281, 7081, 264, 5028, 1860, 1389, 11, 50908], 'temperature': 0.0, 'avg_logprob': -0.08675840922764369, 'compression_ratio': 1.7921568627450981, 'no_speech_prob': 0.003336384892463684}, {'id': 569, 'seek': 385824, 'start': 3869.12, 'end': 3873.3599999999997, 'text': ' that is really what it is. We are not going to go into the proof, but it is needed for that.', 'tokens': [50908, 300, 307, 534, 437, 309, 307, 13, 492, 366, 406, 516, 281, 352, 666, 264, 8177, 11, 457, 309, 307, 2978, 337, 300, 13, 51120], 'temperature': 0.0, 'avg_logprob': -0.08675840922764369, 'compression_ratio': 1.7921568627450981, 'no_speech_prob': 0.003336384892463684}, {'id': 570, 'seek': 385824, 'start': 3873.9199999999996, 'end': 3878.8799999999997, 'text': ' The code generation algorithm proceeds in the following way. It has five cases to consider', 'tokens': [51148, 440, 3089, 5125, 9284, 32280, 294, 264, 3480, 636, 13, 467, 575, 1732, 3331, 281, 1949, 51396], 'temperature': 0.0, 'avg_logprob': -0.08675840922764369, 'compression_ratio': 1.7921568627450981, 'no_speech_prob': 0.003336384892463684}, {'id': 571, 'seek': 385824, 'start': 3879.4399999999996, 'end': 3884.24, 'text': ' and let us look at each one of those cases and then see what is the code generated, right.', 'tokens': [51424, 293, 718, 505, 574, 412, 1184, 472, 295, 729, 3331, 293, 550, 536, 437, 307, 264, 3089, 10833, 11, 558, 13, 51664], 'temperature': 0.0, 'avg_logprob': -0.08675840922764369, 'compression_ratio': 1.7921568627450981, 'no_speech_prob': 0.003336384892463684}, {'id': 572, 'seek': 388424, 'start': 3884.24, 'end': 3891.8399999999997, 'text': ' This is case one. In case one, the node is a leaf node and is the left most child or the left', 'tokens': [50364, 639, 307, 1389, 472, 13, 682, 1389, 472, 11, 264, 9984, 307, 257, 10871, 9984, 293, 307, 264, 1411, 881, 1440, 420, 264, 1411, 50744], 'temperature': 0.0, 'avg_logprob': -0.1161831846140852, 'compression_ratio': 1.8391959798994975, 'no_speech_prob': 0.04421398416161537}, {'id': 573, 'seek': 388424, 'start': 3891.8399999999997, 'end': 3897.04, 'text': ' child, let us say because we have only two children, we only talk about left child, right.', 'tokens': [50744, 1440, 11, 718, 505, 584, 570, 321, 362, 787, 732, 2227, 11, 321, 787, 751, 466, 1411, 1440, 11, 558, 13, 51004], 'temperature': 0.0, 'avg_logprob': -0.1161831846140852, 'compression_ratio': 1.8391959798994975, 'no_speech_prob': 0.04421398416161537}, {'id': 574, 'seek': 388424, 'start': 3897.8399999999997, 'end': 3903.9199999999996, 'text': ' That means that it is a case like this, where there is a root node or there is a parent node', 'tokens': [51044, 663, 1355, 300, 309, 307, 257, 1389, 411, 341, 11, 689, 456, 307, 257, 5593, 9984, 420, 456, 307, 257, 2596, 9984, 51348], 'temperature': 0.0, 'avg_logprob': -0.1161831846140852, 'compression_ratio': 1.8391959798994975, 'no_speech_prob': 0.04421398416161537}, {'id': 575, 'seek': 388424, 'start': 3903.9199999999996, 'end': 3910.72, 'text': ' and then there is possibly a right tree or it could also be a leaf node. We do not know,', 'tokens': [51348, 293, 550, 456, 307, 6264, 257, 558, 4230, 420, 309, 727, 611, 312, 257, 10871, 9984, 13, 492, 360, 406, 458, 11, 51688], 'temperature': 0.0, 'avg_logprob': -0.1161831846140852, 'compression_ratio': 1.8391959798994975, 'no_speech_prob': 0.04421398416161537}, {'id': 576, 'seek': 391072, 'start': 3910.8799999999997, 'end': 3917.2799999999997, 'text': ' but this could potentially be a sub tree, right. That is the case, how do we generate code for this,', 'tokens': [50372, 457, 341, 727, 7263, 312, 257, 1422, 4230, 11, 558, 13, 663, 307, 264, 1389, 11, 577, 360, 321, 8460, 3089, 337, 341, 11, 50692], 'temperature': 0.0, 'avg_logprob': -0.09706368492644968, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.0054669626988470554}, {'id': 577, 'seek': 391072, 'start': 3917.2799999999997, 'end': 3922.9599999999996, 'text': ' right. Let us say that given the R stack in the current form, after generating code for this,', 'tokens': [50692, 558, 13, 961, 505, 584, 300, 2212, 264, 497, 8630, 294, 264, 2190, 1254, 11, 934, 17746, 3089, 337, 341, 11, 50976], 'temperature': 0.0, 'avg_logprob': -0.09706368492644968, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.0054669626988470554}, {'id': 578, 'seek': 391072, 'start': 3922.9599999999996, 'end': 3930.0, 'text': ' we have to ensure that the R stack is in the same form and the top of the stack has the value of the', 'tokens': [50976, 321, 362, 281, 5586, 300, 264, 497, 8630, 307, 294, 264, 912, 1254, 293, 264, 1192, 295, 264, 8630, 575, 264, 2158, 295, 264, 51328], 'temperature': 0.0, 'avg_logprob': -0.09706368492644968, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.0054669626988470554}, {'id': 579, 'seek': 391072, 'start': 3930.0, 'end': 3937.52, 'text': ' left most child, right. So, in this case what we do is that we take the top of the stack,', 'tokens': [51328, 1411, 881, 1440, 11, 558, 13, 407, 11, 294, 341, 1389, 437, 321, 360, 307, 300, 321, 747, 264, 1192, 295, 264, 8630, 11, 51704], 'temperature': 0.0, 'avg_logprob': -0.09706368492644968, 'compression_ratio': 1.8509615384615385, 'no_speech_prob': 0.0054669626988470554}, {'id': 580, 'seek': 393752, 'start': 3937.52, 'end': 3942.96, 'text': ' whatever is that, whatever is the register and we load the value of n into that register.', 'tokens': [50364, 2035, 307, 300, 11, 2035, 307, 264, 7280, 293, 321, 3677, 264, 2158, 295, 297, 666, 300, 7280, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.10240217434462681, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.00662193913012743}, {'id': 581, 'seek': 393752, 'start': 3943.6, 'end': 3949.28, 'text': ' Since this is a left child, remember the left child cannot be a memory operand, it has to be', 'tokens': [50668, 4162, 341, 307, 257, 1411, 1440, 11, 1604, 264, 1411, 1440, 2644, 312, 257, 4675, 2208, 474, 11, 309, 575, 281, 312, 50952], 'temperature': 0.0, 'avg_logprob': -0.10240217434462681, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.00662193913012743}, {'id': 582, 'seek': 393752, 'start': 3949.28, 'end': 3956.16, 'text': ' a register operand. So, I load this n into that register, which register, the top of the stack', 'tokens': [50952, 257, 7280, 2208, 474, 13, 407, 11, 286, 3677, 341, 297, 666, 300, 7280, 11, 597, 7280, 11, 264, 1192, 295, 264, 8630, 51296], 'temperature': 0.0, 'avg_logprob': -0.10240217434462681, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.00662193913012743}, {'id': 583, 'seek': 393752, 'start': 3956.8, 'end': 3962.24, 'text': ' and when I do that, I am automatically guaranteeing that the top of the stack contains the', 'tokens': [51328, 293, 562, 286, 360, 300, 11, 286, 669, 6772, 10815, 278, 300, 264, 1192, 295, 264, 8630, 8306, 264, 51600], 'temperature': 0.0, 'avg_logprob': -0.10240217434462681, 'compression_ratio': 1.9166666666666667, 'no_speech_prob': 0.00662193913012743}, {'id': 584, 'seek': 396224, 'start': 3963.2, 'end': 3971.68, 'text': ' result of the left sub tree, correct, right. So, in case one, we generate the code which is', 'tokens': [50412, 1874, 295, 264, 1411, 1422, 4230, 11, 3006, 11, 558, 13, 407, 11, 294, 1389, 472, 11, 321, 8460, 264, 3089, 597, 307, 50836], 'temperature': 0.0, 'avg_logprob': -0.13758256912231445, 'compression_ratio': 2.0310880829015545, 'no_speech_prob': 0.01792347989976406}, {'id': 585, 'seek': 396224, 'start': 3971.68, 'end': 3979.4399999999996, 'text': ' load n, which is this particular node, right into the top of the stack, right. So, by that what we', 'tokens': [50836, 3677, 297, 11, 597, 307, 341, 1729, 9984, 11, 558, 666, 264, 1192, 295, 264, 8630, 11, 558, 13, 407, 11, 538, 300, 437, 321, 51224], 'temperature': 0.0, 'avg_logprob': -0.13758256912231445, 'compression_ratio': 2.0310880829015545, 'no_speech_prob': 0.01792347989976406}, {'id': 586, 'seek': 396224, 'start': 3979.4399999999996, 'end': 3984.7999999999997, 'text': ' are doing is that we are ensuring that the top of the stack, whichever whatever is the register there,', 'tokens': [51224, 366, 884, 307, 300, 321, 366, 16882, 300, 264, 1192, 295, 264, 8630, 11, 24123, 2035, 307, 264, 7280, 456, 11, 51492], 'temperature': 0.0, 'avg_logprob': -0.13758256912231445, 'compression_ratio': 2.0310880829015545, 'no_speech_prob': 0.01792347989976406}, {'id': 587, 'seek': 396224, 'start': 3984.7999999999997, 'end': 3991.4399999999996, 'text': ' that contains the result of the left sub tree, correct and the rest of the stack is not disturbed.', 'tokens': [51492, 300, 8306, 264, 1874, 295, 264, 1411, 1422, 4230, 11, 3006, 293, 264, 1472, 295, 264, 8630, 307, 406, 30558, 13, 51824], 'temperature': 0.0, 'avg_logprob': -0.13758256912231445, 'compression_ratio': 2.0310880829015545, 'no_speech_prob': 0.01792347989976406}, {'id': 588, 'seek': 399144, 'start': 3991.92, 'end': 4000.48, 'text': ' It is as it is, as it was what it was before, okay. That is good, right. Now, if that is not the case,', 'tokens': [50388, 467, 307, 382, 309, 307, 11, 382, 309, 390, 437, 309, 390, 949, 11, 1392, 13, 663, 307, 665, 11, 558, 13, 823, 11, 498, 300, 307, 406, 264, 1389, 11, 50816], 'temperature': 0.0, 'avg_logprob': -0.14272347740505054, 'compression_ratio': 2.0551724137931036, 'no_speech_prob': 0.0016913432627916336}, {'id': 589, 'seek': 399144, 'start': 4001.44, 'end': 4009.68, 'text': ' right, it could be the right child, okay. If it is the right child, okay. If it is the right child,', 'tokens': [50864, 558, 11, 309, 727, 312, 264, 558, 1440, 11, 1392, 13, 759, 309, 307, 264, 558, 1440, 11, 1392, 13, 759, 309, 307, 264, 558, 1440, 11, 51276], 'temperature': 0.0, 'avg_logprob': -0.14272347740505054, 'compression_ratio': 2.0551724137931036, 'no_speech_prob': 0.0016913432627916336}, {'id': 590, 'seek': 399144, 'start': 4009.68, 'end': 4017.12, 'text': ' its label has to be equal to 0, right. That means it is the right child. If its label is not 0,', 'tokens': [51276, 1080, 7645, 575, 281, 312, 2681, 281, 1958, 11, 558, 13, 663, 1355, 309, 307, 264, 558, 1440, 13, 759, 1080, 7645, 307, 406, 1958, 11, 51648], 'temperature': 0.0, 'avg_logprob': -0.14272347740505054, 'compression_ratio': 2.0551724137931036, 'no_speech_prob': 0.0016913432627916336}, {'id': 591, 'seek': 401712, 'start': 4017.12, 'end': 4022.7999999999997, 'text': ' then it could be an internal node, right. If it is a leaf node only, its value would be 0,', 'tokens': [50364, 550, 309, 727, 312, 364, 6920, 9984, 11, 558, 13, 759, 309, 307, 257, 10871, 9984, 787, 11, 1080, 2158, 576, 312, 1958, 11, 50648], 'temperature': 0.0, 'avg_logprob': -0.07440502271739714, 'compression_ratio': 1.896039603960396, 'no_speech_prob': 0.0026249727234244347}, {'id': 592, 'seek': 401712, 'start': 4023.7599999999998, 'end': 4031.2799999999997, 'text': ' right. So, in this case, what I do is that, so in the first case, the node itself is the leaf node.', 'tokens': [50696, 558, 13, 407, 11, 294, 341, 1389, 11, 437, 286, 360, 307, 300, 11, 370, 294, 264, 700, 1389, 11, 264, 9984, 2564, 307, 264, 10871, 9984, 13, 51072], 'temperature': 0.0, 'avg_logprob': -0.07440502271739714, 'compression_ratio': 1.896039603960396, 'no_speech_prob': 0.0026249727234244347}, {'id': 593, 'seek': 401712, 'start': 4031.2799999999997, 'end': 4036.3199999999997, 'text': ' In the second case that I am talking about, the node is not the leaf node or the right node. If', 'tokens': [51072, 682, 264, 1150, 1389, 300, 286, 669, 1417, 466, 11, 264, 9984, 307, 406, 264, 10871, 9984, 420, 264, 558, 9984, 13, 759, 51324], 'temperature': 0.0, 'avg_logprob': -0.07440502271739714, 'compression_ratio': 1.896039603960396, 'no_speech_prob': 0.0026249727234244347}, {'id': 594, 'seek': 401712, 'start': 4036.3199999999997, 'end': 4041.52, 'text': ' it is the right node, you do not need to generate any code for that, okay, because it could be a', 'tokens': [51324, 309, 307, 264, 558, 9984, 11, 291, 360, 406, 643, 281, 8460, 604, 3089, 337, 300, 11, 1392, 11, 570, 309, 727, 312, 257, 51584], 'temperature': 0.0, 'avg_logprob': -0.07440502271739714, 'compression_ratio': 1.896039603960396, 'no_speech_prob': 0.0026249727234244347}, {'id': 595, 'seek': 404152, 'start': 4041.52, 'end': 4049.52, 'text': ' memory operand. It could be the variable itself, right. So, in this case, the node is this, okay.', 'tokens': [50364, 4675, 2208, 474, 13, 467, 727, 312, 264, 7006, 2564, 11, 558, 13, 407, 11, 294, 341, 1389, 11, 264, 9984, 307, 341, 11, 1392, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.08279541888868952, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.010391244664788246}, {'id': 596, 'seek': 404152, 'start': 4051.12, 'end': 4060.16, 'text': ' N is an internal node. It has a left child and a right child. The right child is a leaf node,', 'tokens': [50844, 426, 307, 364, 6920, 9984, 13, 467, 575, 257, 1411, 1440, 293, 257, 558, 1440, 13, 440, 558, 1440, 307, 257, 10871, 9984, 11, 51296], 'temperature': 0.0, 'avg_logprob': -0.08279541888868952, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.010391244664788246}, {'id': 597, 'seek': 404152, 'start': 4061.2, 'end': 4068.24, 'text': ' okay. The right child has a label n equal to 0, right. So, this is the node for which we want', 'tokens': [51348, 1392, 13, 440, 558, 1440, 575, 257, 7645, 297, 2681, 281, 1958, 11, 558, 13, 407, 11, 341, 307, 264, 9984, 337, 597, 321, 528, 51700], 'temperature': 0.0, 'avg_logprob': -0.08279541888868952, 'compression_ratio': 1.716867469879518, 'no_speech_prob': 0.010391244664788246}, {'id': 598, 'seek': 406824, 'start': 4068.24, 'end': 4073.2799999999997, 'text': ' to generate code in this case, right. Earlier, I was thinking about this. If it is actually', 'tokens': [50364, 281, 8460, 3089, 294, 341, 1389, 11, 558, 13, 24552, 11, 286, 390, 1953, 466, 341, 13, 759, 309, 307, 767, 50616], 'temperature': 0.0, 'avg_logprob': -0.09696313523754631, 'compression_ratio': 1.849740932642487, 'no_speech_prob': 0.0044806296937167645}, {'id': 599, 'seek': 406824, 'start': 4073.2799999999997, 'end': 4080.24, 'text': ' right child, you do not generate any code for that. It is a node whose right child is a leaf node', 'tokens': [50616, 558, 1440, 11, 291, 360, 406, 8460, 604, 3089, 337, 300, 13, 467, 307, 257, 9984, 6104, 558, 1440, 307, 257, 10871, 9984, 50964], 'temperature': 0.0, 'avg_logprob': -0.09696313523754631, 'compression_ratio': 1.849740932642487, 'no_speech_prob': 0.0044806296937167645}, {'id': 600, 'seek': 406824, 'start': 4080.9599999999996, 'end': 4088.56, 'text': ' and the left child can be a sub-tree, right. In which case, what you need to do is that', 'tokens': [51000, 293, 264, 1411, 1440, 393, 312, 257, 1422, 12, 83, 701, 11, 558, 13, 682, 597, 1389, 11, 437, 291, 643, 281, 360, 307, 300, 51380], 'temperature': 0.0, 'avg_logprob': -0.09696313523754631, 'compression_ratio': 1.849740932642487, 'no_speech_prob': 0.0044806296937167645}, {'id': 601, 'seek': 406824, 'start': 4088.56, 'end': 4095.04, 'text': ' recursively, you need to generate code for n 1 and then generate code for this.', 'tokens': [51380, 20560, 3413, 11, 291, 643, 281, 8460, 3089, 337, 297, 502, 293, 550, 8460, 3089, 337, 341, 13, 51704], 'temperature': 0.0, 'avg_logprob': -0.09696313523754631, 'compression_ratio': 1.849740932642487, 'no_speech_prob': 0.0044806296937167645}, {'id': 602, 'seek': 409504, 'start': 4095.68, 'end': 4100.8, 'text': ' This operand can be in the memory and when you generate code for this n 1 sub-tree,', 'tokens': [50396, 639, 2208, 474, 393, 312, 294, 264, 4675, 293, 562, 291, 8460, 3089, 337, 341, 297, 502, 1422, 12, 83, 701, 11, 50652], 'temperature': 0.0, 'avg_logprob': -0.10006395975748698, 'compression_ratio': 1.8983957219251337, 'no_speech_prob': 0.012727233581244946}, {'id': 603, 'seek': 409504, 'start': 4101.36, 'end': 4106.72, 'text': ' that is going to be in the, the result of that is going to be in the top of the stack or the', 'tokens': [50680, 300, 307, 516, 281, 312, 294, 264, 11, 264, 1874, 295, 300, 307, 516, 281, 312, 294, 264, 1192, 295, 264, 8630, 420, 264, 50948], 'temperature': 0.0, 'avg_logprob': -0.10006395975748698, 'compression_ratio': 1.8983957219251337, 'no_speech_prob': 0.012727233581244946}, {'id': 604, 'seek': 409504, 'start': 4106.72, 'end': 4111.68, 'text': ' register which is on the top of the stack. So, the operation here is that operation,', 'tokens': [50948, 7280, 597, 307, 322, 264, 1192, 295, 264, 8630, 13, 407, 11, 264, 6916, 510, 307, 300, 6916, 11, 51196], 'temperature': 0.0, 'avg_logprob': -0.10006395975748698, 'compression_ratio': 1.8983957219251337, 'no_speech_prob': 0.012727233581244946}, {'id': 605, 'seek': 409504, 'start': 4112.56, 'end': 4120.88, 'text': ' top of the stack register n 2, which is label n, correct. Let us go through that again, okay.', 'tokens': [51240, 1192, 295, 264, 8630, 7280, 297, 568, 11, 597, 307, 7645, 297, 11, 3006, 13, 961, 505, 352, 807, 300, 797, 11, 1392, 13, 51656], 'temperature': 0.0, 'avg_logprob': -0.10006395975748698, 'compression_ratio': 1.8983957219251337, 'no_speech_prob': 0.012727233581244946}, {'id': 606, 'seek': 412088, 'start': 4120.88, 'end': 4128.24, 'text': ' So, the situation is it is an internal node. Its right child is a leaf node with label 0,', 'tokens': [50364, 407, 11, 264, 2590, 307, 309, 307, 364, 6920, 9984, 13, 6953, 558, 1440, 307, 257, 10871, 9984, 365, 7645, 1958, 11, 50732], 'temperature': 0.0, 'avg_logprob': -0.0562862022635863, 'compression_ratio': 1.8762886597938144, 'no_speech_prob': 0.0022369944490492344}, {'id': 607, 'seek': 412088, 'start': 4129.2, 'end': 4135.76, 'text': ' correct. So, I need to generate code for the left sub-tree and when I generate the code for', 'tokens': [50780, 3006, 13, 407, 11, 286, 643, 281, 8460, 3089, 337, 264, 1411, 1422, 12, 83, 701, 293, 562, 286, 8460, 264, 3089, 337, 51108], 'temperature': 0.0, 'avg_logprob': -0.0562862022635863, 'compression_ratio': 1.8762886597938144, 'no_speech_prob': 0.0022369944490492344}, {'id': 608, 'seek': 412088, 'start': 4135.76, 'end': 4141.84, 'text': ' the left sub-tree, this generate code routine is going to generate code using the registers', 'tokens': [51108, 264, 1411, 1422, 12, 83, 701, 11, 341, 8460, 3089, 9927, 307, 516, 281, 8460, 3089, 1228, 264, 38351, 51412], 'temperature': 0.0, 'avg_logprob': -0.0562862022635863, 'compression_ratio': 1.8762886597938144, 'no_speech_prob': 0.0022369944490492344}, {'id': 609, 'seek': 412088, 'start': 4141.84, 'end': 4148.8, 'text': ' which is given in the label value, correct. And the result of this sub-tree is going to be', 'tokens': [51412, 597, 307, 2212, 294, 264, 7645, 2158, 11, 3006, 13, 400, 264, 1874, 295, 341, 1422, 12, 83, 701, 307, 516, 281, 312, 51760], 'temperature': 0.0, 'avg_logprob': -0.0562862022635863, 'compression_ratio': 1.8762886597938144, 'no_speech_prob': 0.0022369944490492344}, {'id': 610, 'seek': 414880, 'start': 4148.8, 'end': 4156.24, 'text': ' in the register which is the top of the stack. These are known properties. So, first I generate', 'tokens': [50364, 294, 264, 7280, 597, 307, 264, 1192, 295, 264, 8630, 13, 1981, 366, 2570, 7221, 13, 407, 11, 700, 286, 8460, 50736], 'temperature': 0.0, 'avg_logprob': -0.10094565958590121, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.0004239143745508045}, {'id': 611, 'seek': 414880, 'start': 4156.24, 'end': 4161.68, 'text': ' code for the left sub-tree. The top of the stack contains the result of this sub-tree.', 'tokens': [50736, 3089, 337, 264, 1411, 1422, 12, 83, 701, 13, 440, 1192, 295, 264, 8630, 8306, 264, 1874, 295, 341, 1422, 12, 83, 701, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.10094565958590121, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.0004239143745508045}, {'id': 612, 'seek': 414880, 'start': 4162.400000000001, 'end': 4170.400000000001, 'text': ' So, I perform operation using the register which is the top of the stack and its right operand is', 'tokens': [51044, 407, 11, 286, 2042, 6916, 1228, 264, 7280, 597, 307, 264, 1192, 295, 264, 8630, 293, 1080, 558, 2208, 474, 307, 51444], 'temperature': 0.0, 'avg_logprob': -0.10094565958590121, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.0004239143745508045}, {'id': 613, 'seek': 417040, 'start': 4170.639999999999, 'end': 4178.799999999999, 'text': ' n, okay, which could be a memory operand. We do not care about it, right. So, in this case,', 'tokens': [50376, 297, 11, 1392, 11, 597, 727, 312, 257, 4675, 2208, 474, 13, 492, 360, 406, 1127, 466, 309, 11, 558, 13, 407, 11, 294, 341, 1389, 11, 50784], 'temperature': 0.0, 'avg_logprob': -0.1371631825223882, 'compression_ratio': 1.8366336633663367, 'no_speech_prob': 0.006604945752769709}, {'id': 614, 'seek': 417040, 'start': 4178.799999999999, 'end': 4186.0, 'text': ' this sequence of instruction would generate the optimal code for this case. Not only it will', 'tokens': [50784, 341, 8310, 295, 10951, 576, 8460, 264, 16252, 3089, 337, 341, 1389, 13, 1726, 787, 309, 486, 51144], 'temperature': 0.0, 'avg_logprob': -0.1371631825223882, 'compression_ratio': 1.8366336633663367, 'no_speech_prob': 0.006604945752769709}, {'id': 615, 'seek': 417040, 'start': 4186.0, 'end': 4192.0, 'text': ' generate the optimal code for this case, it will generate the optimal code saying that the top,', 'tokens': [51144, 8460, 264, 16252, 3089, 337, 341, 1389, 11, 309, 486, 8460, 264, 16252, 3089, 1566, 300, 264, 1192, 11, 51444], 'temperature': 0.0, 'avg_logprob': -0.1371631825223882, 'compression_ratio': 1.8366336633663367, 'no_speech_prob': 0.006604945752769709}, {'id': 616, 'seek': 417040, 'start': 4192.0, 'end': 4199.2, 'text': ' the I mean when you do this, this has the result values available in the top of the stack.', 'tokens': [51444, 264, 286, 914, 562, 291, 360, 341, 11, 341, 575, 264, 1874, 4190, 2435, 294, 264, 1192, 295, 264, 8630, 13, 51804], 'temperature': 0.0, 'avg_logprob': -0.1371631825223882, 'compression_ratio': 1.8366336633663367, 'no_speech_prob': 0.006604945752769709}, {'id': 617, 'seek': 419920, 'start': 4199.2, 'end': 4204.48, 'text': ' Similarly, this has the result value available in the top of the stack and nothing else has been', 'tokens': [50364, 13157, 11, 341, 575, 264, 1874, 2158, 2435, 294, 264, 1192, 295, 264, 8630, 293, 1825, 1646, 575, 668, 50628], 'temperature': 0.0, 'avg_logprob': -0.08667991542014755, 'compression_ratio': 1.8659003831417624, 'no_speech_prob': 0.0030300200451165438}, {'id': 618, 'seek': 419920, 'start': 4204.48, 'end': 4209.04, 'text': ' altered, right. The nothing else has been altered. You are not going to see it unfortunately in the', 'tokens': [50628, 28783, 11, 558, 13, 440, 1825, 1646, 575, 668, 28783, 13, 509, 366, 406, 516, 281, 536, 309, 7015, 294, 264, 50856], 'temperature': 0.0, 'avg_logprob': -0.08667991542014755, 'compression_ratio': 1.8659003831417624, 'no_speech_prob': 0.0030300200451165438}, {'id': 619, 'seek': 419920, 'start': 4209.04, 'end': 4213.599999999999, 'text': ' code generation algorithm. You are only going to see it in the proof and we are not going to go', 'tokens': [50856, 3089, 5125, 9284, 13, 509, 366, 787, 516, 281, 536, 309, 294, 264, 8177, 293, 321, 366, 406, 516, 281, 352, 51084], 'temperature': 0.0, 'avg_logprob': -0.08667991542014755, 'compression_ratio': 1.8659003831417624, 'no_speech_prob': 0.0030300200451165438}, {'id': 620, 'seek': 419920, 'start': 4213.599999999999, 'end': 4219.2, 'text': ' into the proof anyway. So, let us not worry about it, right. But it is required for proving the', 'tokens': [51084, 666, 264, 8177, 4033, 13, 407, 11, 718, 505, 406, 3292, 466, 309, 11, 558, 13, 583, 309, 307, 4739, 337, 27221, 264, 51364], 'temperature': 0.0, 'avg_logprob': -0.08667991542014755, 'compression_ratio': 1.8659003831417624, 'no_speech_prob': 0.0030300200451165438}, {'id': 621, 'seek': 419920, 'start': 4219.2, 'end': 4227.28, 'text': ' optimality, okay. Now, the third case is one where the left child and the right child are not leaf', 'tokens': [51364, 5028, 1860, 11, 1392, 13, 823, 11, 264, 2636, 1389, 307, 472, 689, 264, 1411, 1440, 293, 264, 558, 1440, 366, 406, 10871, 51768], 'temperature': 0.0, 'avg_logprob': -0.08667991542014755, 'compression_ratio': 1.8659003831417624, 'no_speech_prob': 0.0030300200451165438}, {'id': 622, 'seek': 422728, 'start': 4227.28, 'end': 4235.599999999999, 'text': ' nodes, right. So, here I have a node n, right, which has a left subtree and a right subtree,', 'tokens': [50364, 13891, 11, 558, 13, 407, 11, 510, 286, 362, 257, 9984, 297, 11, 558, 11, 597, 575, 257, 1411, 7257, 701, 293, 257, 558, 7257, 701, 11, 50780], 'temperature': 0.0, 'avg_logprob': -0.09145114296361019, 'compression_ratio': 2.2, 'no_speech_prob': 0.03616268187761307}, {'id': 623, 'seek': 422728, 'start': 4236.8, 'end': 4243.12, 'text': ' right. And let us assume that the left subtree requires fewer registers than the right subtree.', 'tokens': [50840, 558, 13, 400, 718, 505, 6552, 300, 264, 1411, 7257, 701, 7029, 13366, 38351, 813, 264, 558, 7257, 701, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.09145114296361019, 'compression_ratio': 2.2, 'no_speech_prob': 0.03616268187761307}, {'id': 624, 'seek': 422728, 'start': 4244.88, 'end': 4251.04, 'text': ' And I know that the left subtree also requires fewer than R registers, correct. It requires', 'tokens': [51244, 400, 286, 458, 300, 264, 1411, 7257, 701, 611, 7029, 13366, 813, 497, 38351, 11, 3006, 13, 467, 7029, 51552], 'temperature': 0.0, 'avg_logprob': -0.09145114296361019, 'compression_ratio': 2.2, 'no_speech_prob': 0.03616268187761307}, {'id': 625, 'seek': 422728, 'start': 4251.04, 'end': 4257.2, 'text': ' fewer than R registers. The right child or the right subtree requires more than what the left', 'tokens': [51552, 13366, 813, 497, 38351, 13, 440, 558, 1440, 420, 264, 558, 7257, 701, 7029, 544, 813, 437, 264, 1411, 51860], 'temperature': 0.0, 'avg_logprob': -0.09145114296361019, 'compression_ratio': 2.2, 'no_speech_prob': 0.03616268187761307}, {'id': 626, 'seek': 425720, 'start': 4257.2, 'end': 4262.24, 'text': ' subtree requires. But I do not know whether it is less than or equal to R. It could be greater', 'tokens': [50364, 7257, 701, 7029, 13, 583, 286, 360, 406, 458, 1968, 309, 307, 1570, 813, 420, 2681, 281, 497, 13, 467, 727, 312, 5044, 50616], 'temperature': 0.0, 'avg_logprob': -0.08004725104884097, 'compression_ratio': 1.6506550218340612, 'no_speech_prob': 0.00029425753746181726}, {'id': 627, 'seek': 425720, 'start': 4262.24, 'end': 4270.88, 'text': ' than R also, right. So, in this case what I am going to do, right, remember that the top of the', 'tokens': [50616, 813, 497, 611, 11, 558, 13, 407, 11, 294, 341, 1389, 437, 286, 669, 516, 281, 360, 11, 558, 11, 1604, 300, 264, 1192, 295, 264, 51048], 'temperature': 0.0, 'avg_logprob': -0.08004725104884097, 'compression_ratio': 1.6506550218340612, 'no_speech_prob': 0.00029425753746181726}, {'id': 628, 'seek': 425720, 'start': 4270.88, 'end': 4278.4, 'text': ' stack register should always calculate the left side result, okay. But because this is higher,', 'tokens': [51048, 8630, 7280, 820, 1009, 8873, 264, 1411, 1252, 1874, 11, 1392, 13, 583, 570, 341, 307, 2946, 11, 51424], 'temperature': 0.0, 'avg_logprob': -0.08004725104884097, 'compression_ratio': 1.6506550218340612, 'no_speech_prob': 0.00029425753746181726}, {'id': 629, 'seek': 425720, 'start': 4279.28, 'end': 4285.28, 'text': ' we have to calculate the right subtree first. Whichever one which has greater requirement is', 'tokens': [51468, 321, 362, 281, 8873, 264, 558, 7257, 701, 700, 13, 3013, 1054, 472, 597, 575, 5044, 11695, 307, 51768], 'temperature': 0.0, 'avg_logprob': -0.08004725104884097, 'compression_ratio': 1.6506550218340612, 'no_speech_prob': 0.00029425753746181726}, {'id': 630, 'seek': 428528, 'start': 4285.28, 'end': 4291.599999999999, 'text': ' what we need to calculate first, right. But if I generate code for this and then generate code for', 'tokens': [50364, 437, 321, 643, 281, 8873, 700, 11, 558, 13, 583, 498, 286, 8460, 3089, 337, 341, 293, 550, 8460, 3089, 337, 50680], 'temperature': 0.0, 'avg_logprob': -0.06944373801902488, 'compression_ratio': 1.651685393258427, 'no_speech_prob': 0.0016704523004591465}, {'id': 631, 'seek': 428528, 'start': 4291.599999999999, 'end': 4298.719999999999, 'text': ' this, I may not necessarily keep the registers in the correct way. So, what I do here first is that', 'tokens': [50680, 341, 11, 286, 815, 406, 4725, 1066, 264, 38351, 294, 264, 3006, 636, 13, 407, 11, 437, 286, 360, 510, 700, 307, 300, 51036], 'temperature': 0.0, 'avg_logprob': -0.06944373801902488, 'compression_ratio': 1.651685393258427, 'no_speech_prob': 0.0016704523004591465}, {'id': 632, 'seek': 428528, 'start': 4298.719999999999, 'end': 4305.84, 'text': ' I do a swap of the top two registers, right. So, let us say if R1 has been in the top and R2 is', 'tokens': [51036, 286, 360, 257, 18135, 295, 264, 1192, 732, 38351, 11, 558, 13, 407, 11, 718, 505, 584, 498, 497, 16, 575, 668, 294, 264, 1192, 293, 497, 17, 307, 51392], 'temperature': 0.0, 'avg_logprob': -0.06944373801902488, 'compression_ratio': 1.651685393258427, 'no_speech_prob': 0.0016704523004591465}, {'id': 633, 'seek': 430584, 'start': 4305.84, 'end': 4317.84, 'text': ' the second top, then it changes as R2 and R1. I now use R2 to generate code for this, okay.', 'tokens': [50364, 264, 1150, 1192, 11, 550, 309, 2962, 382, 497, 17, 293, 497, 16, 13, 286, 586, 764, 497, 17, 281, 8460, 3089, 337, 341, 11, 1392, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.08705472946166992, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.02305491641163826}, {'id': 634, 'seek': 430584, 'start': 4318.88, 'end': 4326.16, 'text': ' And then after that I push back my R1 and generate code for this one. That way I will ensure', 'tokens': [51016, 400, 550, 934, 300, 286, 2944, 646, 452, 497, 16, 293, 8460, 3089, 337, 341, 472, 13, 663, 636, 286, 486, 5586, 51380], 'temperature': 0.0, 'avg_logprob': -0.08705472946166992, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.02305491641163826}, {'id': 635, 'seek': 430584, 'start': 4326.16, 'end': 4333.12, 'text': ' that the rest of my stack is maintained as it is and the top of the stack has the, right, result', 'tokens': [51380, 300, 264, 1472, 295, 452, 8630, 307, 17578, 382, 309, 307, 293, 264, 1192, 295, 264, 8630, 575, 264, 11, 558, 11, 1874, 51728], 'temperature': 0.0, 'avg_logprob': -0.08705472946166992, 'compression_ratio': 1.5875706214689265, 'no_speech_prob': 0.02305491641163826}, {'id': 636, 'seek': 433312, 'start': 4333.12, 'end': 4338.5599999999995, 'text': ' of the left subtree. That is the reason why we do this. So, remember here I have done the swap.', 'tokens': [50364, 295, 264, 1411, 7257, 701, 13, 663, 307, 264, 1778, 983, 321, 360, 341, 13, 407, 11, 1604, 510, 286, 362, 1096, 264, 18135, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.07053993782907161, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.009690942242741585}, {'id': 637, 'seek': 433312, 'start': 4339.28, 'end': 4344.8, 'text': ' I generate the code for N2. So, N2 is going to be generated and the result will be in the', 'tokens': [50672, 286, 8460, 264, 3089, 337, 426, 17, 13, 407, 11, 426, 17, 307, 516, 281, 312, 10833, 293, 264, 1874, 486, 312, 294, 264, 50948], 'temperature': 0.0, 'avg_logprob': -0.07053993782907161, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.009690942242741585}, {'id': 638, 'seek': 433312, 'start': 4345.599999999999, 'end': 4353.44, 'text': ' second register which we will call it as R2 for the time being, okay, right. So, after I have', 'tokens': [50988, 1150, 7280, 597, 321, 486, 818, 309, 382, 497, 17, 337, 264, 565, 885, 11, 1392, 11, 558, 13, 407, 11, 934, 286, 362, 51380], 'temperature': 0.0, 'avg_logprob': -0.07053993782907161, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.009690942242741585}, {'id': 639, 'seek': 433312, 'start': 4353.44, 'end': 4360.4, 'text': ' generated code for N2 in R2 register, I pop the stack. When I pop the stack what happens?', 'tokens': [51380, 10833, 3089, 337, 426, 17, 294, 497, 17, 7280, 11, 286, 1665, 264, 8630, 13, 1133, 286, 1665, 264, 8630, 437, 2314, 30, 51728], 'temperature': 0.0, 'avg_logprob': -0.07053993782907161, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.009690942242741585}, {'id': 640, 'seek': 436040, 'start': 4361.28, 'end': 4367.2, 'text': ' R2 is ejected, right. And then I hold it in a temporary location called R,', 'tokens': [50408, 497, 17, 307, 32520, 292, 11, 558, 13, 400, 550, 286, 1797, 309, 294, 257, 13413, 4914, 1219, 497, 11, 50704], 'temperature': 0.0, 'avg_logprob': -0.09842580159505208, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.003499951446428895}, {'id': 641, 'seek': 436040, 'start': 4368.08, 'end': 4372.799999999999, 'text': ' right. I remember this which register was the previous top of the stack register,', 'tokens': [50748, 558, 13, 286, 1604, 341, 597, 7280, 390, 264, 3894, 1192, 295, 264, 8630, 7280, 11, 50984], 'temperature': 0.0, 'avg_logprob': -0.09842580159505208, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.003499951446428895}, {'id': 642, 'seek': 436040, 'start': 4372.799999999999, 'end': 4379.04, 'text': ' happened to be R2, right. Let us remember that for the time being until we finish this code', 'tokens': [50984, 2011, 281, 312, 497, 17, 11, 558, 13, 961, 505, 1604, 300, 337, 264, 565, 885, 1826, 321, 2413, 341, 3089, 51296], 'temperature': 0.0, 'avg_logprob': -0.09842580159505208, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.003499951446428895}, {'id': 643, 'seek': 436040, 'start': 4379.04, 'end': 4386.32, 'text': ' generation, right. Then I generate code for N1, all right. Then see what happens. When I generate', 'tokens': [51296, 5125, 11, 558, 13, 1396, 286, 8460, 3089, 337, 426, 16, 11, 439, 558, 13, 1396, 536, 437, 2314, 13, 1133, 286, 8460, 51660], 'temperature': 0.0, 'avg_logprob': -0.09842580159505208, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.003499951446428895}, {'id': 644, 'seek': 438632, 'start': 4386.32, 'end': 4393.92, 'text': ' code for N1, what was the top of the stack at that point in time? R2 was popped out,', 'tokens': [50364, 3089, 337, 426, 16, 11, 437, 390, 264, 1192, 295, 264, 8630, 412, 300, 935, 294, 565, 30, 497, 17, 390, 21545, 484, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.06561951126371111, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.006839165464043617}, {'id': 645, 'seek': 438632, 'start': 4395.44, 'end': 4403.28, 'text': ' R1, right. Remember R1 was on the top, R2 was next. We swapped it. We generated code with R2.', 'tokens': [50820, 497, 16, 11, 558, 13, 5459, 497, 16, 390, 322, 264, 1192, 11, 497, 17, 390, 958, 13, 492, 50011, 309, 13, 492, 10833, 3089, 365, 497, 17, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.06561951126371111, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.006839165464043617}, {'id': 646, 'seek': 438632, 'start': 4403.28, 'end': 4408.4, 'text': ' We popped R2. So, what is remaining? R1. R1 is on the top of the stack. So,', 'tokens': [51212, 492, 21545, 497, 17, 13, 407, 11, 437, 307, 8877, 30, 497, 16, 13, 497, 16, 307, 322, 264, 1192, 295, 264, 8630, 13, 407, 11, 51468], 'temperature': 0.0, 'avg_logprob': -0.06561951126371111, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.006839165464043617}, {'id': 647, 'seek': 438632, 'start': 4408.4, 'end': 4413.84, 'text': ' you are going to generate code for N1 with R1 on the top of the stack. So, since the', 'tokens': [51468, 291, 366, 516, 281, 8460, 3089, 337, 426, 16, 365, 497, 16, 322, 264, 1192, 295, 264, 8630, 13, 407, 11, 1670, 264, 51740], 'temperature': 0.0, 'avg_logprob': -0.06561951126371111, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.006839165464043617}, {'id': 648, 'seek': 441384, 'start': 4413.84, 'end': 4418.88, 'text': ' generate code procedure, let us assume that, right, inductively is going to generate code', 'tokens': [50364, 8460, 3089, 10747, 11, 718, 505, 6552, 300, 11, 558, 11, 31612, 3413, 307, 516, 281, 8460, 3089, 50616], 'temperature': 0.0, 'avg_logprob': -0.09022157750231155, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.006103641353547573}, {'id': 649, 'seek': 441384, 'start': 4418.88, 'end': 4425.04, 'text': ' for this left subtree correctly, then it will have the result value in R1, right.', 'tokens': [50616, 337, 341, 1411, 7257, 701, 8944, 11, 550, 309, 486, 362, 264, 1874, 2158, 294, 497, 16, 11, 558, 13, 50924], 'temperature': 0.0, 'avg_logprob': -0.09022157750231155, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.006103641353547573}, {'id': 650, 'seek': 441384, 'start': 4425.76, 'end': 4432.8, 'text': ' Then after that, this is what we are going to do, right. This node has operation to be performed.', 'tokens': [50960, 1396, 934, 300, 11, 341, 307, 437, 321, 366, 516, 281, 360, 11, 558, 13, 639, 9984, 575, 6916, 281, 312, 10332, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.09022157750231155, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.006103641353547573}, {'id': 651, 'seek': 441384, 'start': 4432.8, 'end': 4437.84, 'text': ' So, that is the operation to be performed. If it is an add or subtract, you put that operation.', 'tokens': [51312, 407, 11, 300, 307, 264, 6916, 281, 312, 10332, 13, 759, 309, 307, 364, 909, 420, 16390, 11, 291, 829, 300, 6916, 13, 51564], 'temperature': 0.0, 'avg_logprob': -0.09022157750231155, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.006103641353547573}, {'id': 652, 'seek': 443784, 'start': 4438.8, 'end': 4451.28, 'text': ' Then top of R stack, which is R1, correct and R. What is R? R2, right. Remember you evaluated', 'tokens': [50412, 1396, 1192, 295, 497, 8630, 11, 597, 307, 497, 16, 11, 3006, 293, 497, 13, 708, 307, 497, 30, 497, 17, 11, 558, 13, 5459, 291, 25509, 51036], 'temperature': 0.0, 'avg_logprob': -0.1658579341152258, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.03542327508330345}, {'id': 653, 'seek': 443784, 'start': 4451.28, 'end': 4460.64, 'text': ' this subtree in R2, correct. And then you remember that somehow you evaluated this subtree in R1.', 'tokens': [51036, 341, 7257, 701, 294, 497, 17, 11, 3006, 13, 400, 550, 291, 1604, 300, 6063, 291, 25509, 341, 7257, 701, 294, 497, 16, 13, 51504], 'temperature': 0.0, 'avg_logprob': -0.1658579341152258, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.03542327508330345}, {'id': 654, 'seek': 446064, 'start': 4461.280000000001, 'end': 4473.04, 'text': ' Now, you are saying that you are doing op R1 and R2, okay. Now, you push R2 again, push R stack,', 'tokens': [50396, 823, 11, 291, 366, 1566, 300, 291, 366, 884, 999, 497, 16, 293, 497, 17, 11, 1392, 13, 823, 11, 291, 2944, 497, 17, 797, 11, 2944, 497, 8630, 11, 50984], 'temperature': 0.0, 'avg_logprob': -0.11573560210480087, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.01230776496231556}, {'id': 655, 'seek': 446064, 'start': 4473.04, 'end': 4481.6, 'text': ' R2 and then again you swap. So, R2 and R1 will go back in the same order and the top of the stack', 'tokens': [50984, 497, 17, 293, 550, 797, 291, 18135, 13, 407, 11, 497, 17, 293, 497, 16, 486, 352, 646, 294, 264, 912, 1668, 293, 264, 1192, 295, 264, 8630, 51412], 'temperature': 0.0, 'avg_logprob': -0.11573560210480087, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.01230776496231556}, {'id': 656, 'seek': 446064, 'start': 4481.6, 'end': 4489.04, 'text': ' still will contain R1 and that contains the left subtree value or the subtree value, correct.', 'tokens': [51412, 920, 486, 5304, 497, 16, 293, 300, 8306, 264, 1411, 7257, 701, 2158, 420, 264, 7257, 701, 2158, 11, 3006, 13, 51784], 'temperature': 0.0, 'avg_logprob': -0.11573560210480087, 'compression_ratio': 1.7041420118343196, 'no_speech_prob': 0.01230776496231556}, {'id': 657, 'seek': 448904, 'start': 4489.04, 'end': 4494.56, 'text': ' That is really how we go by this. Any questions? Slightly complicated,', 'tokens': [50364, 663, 307, 534, 577, 321, 352, 538, 341, 13, 2639, 1651, 30, 318, 44872, 6179, 11, 50640], 'temperature': 0.0, 'avg_logprob': -0.12803008339621805, 'compression_ratio': 1.5963302752293578, 'no_speech_prob': 0.009229881688952446}, {'id': 658, 'seek': 448904, 'start': 4494.56, 'end': 4500.0, 'text': ' but if you go through this step by step, you can understand how it works, right. Question? Yeah.', 'tokens': [50640, 457, 498, 291, 352, 807, 341, 1823, 538, 1823, 11, 291, 393, 1223, 577, 309, 1985, 11, 558, 13, 14464, 30, 865, 13, 50912], 'temperature': 0.0, 'avg_logprob': -0.12803008339621805, 'compression_ratio': 1.5963302752293578, 'no_speech_prob': 0.009229881688952446}, {'id': 659, 'seek': 448904, 'start': 4506.16, 'end': 4511.92, 'text': ' Okay. So, one condition, again we are not going to go why this condition is required,', 'tokens': [51220, 1033, 13, 407, 11, 472, 4188, 11, 797, 321, 366, 406, 516, 281, 352, 983, 341, 4188, 307, 4739, 11, 51508], 'temperature': 0.0, 'avg_logprob': -0.12803008339621805, 'compression_ratio': 1.5963302752293578, 'no_speech_prob': 0.009229881688952446}, {'id': 660, 'seek': 448904, 'start': 4511.92, 'end': 4517.92, 'text': ' right. That goes into the proof of the optimality. The condition is that whenever you evaluate', 'tokens': [51508, 558, 13, 663, 1709, 666, 264, 8177, 295, 264, 5028, 1860, 13, 440, 4188, 307, 300, 5699, 291, 13059, 51808], 'temperature': 0.0, 'avg_logprob': -0.12803008339621805, 'compression_ratio': 1.5963302752293578, 'no_speech_prob': 0.009229881688952446}, {'id': 661, 'seek': 451792, 'start': 4518.56, 'end': 4524.16, 'text': ' the left side, left subtree, that left subtree result has to be in the top of the stack.', 'tokens': [50396, 264, 1411, 1252, 11, 1411, 7257, 701, 11, 300, 1411, 7257, 701, 1874, 575, 281, 312, 294, 264, 1192, 295, 264, 8630, 13, 50676], 'temperature': 0.0, 'avg_logprob': -0.10377537120472301, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.002315176883712411}, {'id': 662, 'seek': 451792, 'start': 4525.12, 'end': 4530.16, 'text': ' That is the condition. So, in order to do that, you are essentially doing all these juggleries.', 'tokens': [50724, 663, 307, 264, 4188, 13, 407, 11, 294, 1668, 281, 360, 300, 11, 291, 366, 4476, 884, 439, 613, 361, 3562, 1918, 530, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.10377537120472301, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.002315176883712411}, {'id': 663, 'seek': 451792, 'start': 4531.84, 'end': 4537.4400000000005, 'text': ' Otherwise, you are fine. You are generating code for N2, okay. And then you will generate code for', 'tokens': [51060, 10328, 11, 291, 366, 2489, 13, 509, 366, 17746, 3089, 337, 426, 17, 11, 1392, 13, 400, 550, 291, 486, 8460, 3089, 337, 51340], 'temperature': 0.0, 'avg_logprob': -0.10377537120472301, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.002315176883712411}, {'id': 664, 'seek': 451792, 'start': 4537.4400000000005, 'end': 4542.96, 'text': ' N1. Then you will generate this operation. As far as code generation part is concerned,', 'tokens': [51340, 426, 16, 13, 1396, 291, 486, 8460, 341, 6916, 13, 1018, 1400, 382, 3089, 5125, 644, 307, 5922, 11, 51616], 'temperature': 0.0, 'avg_logprob': -0.10377537120472301, 'compression_ratio': 1.7417840375586855, 'no_speech_prob': 0.002315176883712411}, {'id': 665, 'seek': 454296, 'start': 4542.96, 'end': 4548.32, 'text': ' what you are going to see in the generated code, right, you are only going to see this part of the', 'tokens': [50364, 437, 291, 366, 516, 281, 536, 294, 264, 10833, 3089, 11, 558, 11, 291, 366, 787, 516, 281, 536, 341, 644, 295, 264, 50632], 'temperature': 0.0, 'avg_logprob': -0.08952459056725663, 'compression_ratio': 1.9943820224719102, 'no_speech_prob': 0.0044011566787958145}, {'id': 666, 'seek': 454296, 'start': 4548.32, 'end': 4556.72, 'text': ' code, right. See the print statement is what is going to go in the generated code. These are all', 'tokens': [50632, 3089, 11, 558, 13, 3008, 264, 4482, 5629, 307, 437, 307, 516, 281, 352, 294, 264, 10833, 3089, 13, 1981, 366, 439, 51052], 'temperature': 0.0, 'avg_logprob': -0.08952459056725663, 'compression_ratio': 1.9943820224719102, 'no_speech_prob': 0.0044011566787958145}, {'id': 667, 'seek': 454296, 'start': 4557.28, 'end': 4564.88, 'text': ' what we call as bookkeeping activities of the code generator, right.', 'tokens': [51080, 437, 321, 818, 382, 1446, 25769, 5354, 295, 264, 3089, 19265, 11, 558, 13, 51460], 'temperature': 0.0, 'avg_logprob': -0.08952459056725663, 'compression_ratio': 1.9943820224719102, 'no_speech_prob': 0.0044011566787958145}, {'id': 668, 'seek': 454296, 'start': 4564.88, 'end': 4572.8, 'text': ' So, what happens is that you have the left subtree and you have the right subtree and then', 'tokens': [51460, 407, 11, 437, 2314, 307, 300, 291, 362, 264, 1411, 7257, 701, 293, 291, 362, 264, 558, 7257, 701, 293, 550, 51856], 'temperature': 0.0, 'avg_logprob': -0.08952459056725663, 'compression_ratio': 1.9943820224719102, 'no_speech_prob': 0.0044011566787958145}, {'id': 669, 'seek': 457296, 'start': 4572.96, 'end': 4579.2, 'text': ' you are trying to generate code for this, right. And we know that this has a value 5,', 'tokens': [50364, 291, 366, 1382, 281, 8460, 3089, 337, 341, 11, 558, 13, 400, 321, 458, 300, 341, 575, 257, 2158, 1025, 11, 50676], 'temperature': 0.0, 'avg_logprob': -0.057650634922932105, 'compression_ratio': 1.8431372549019607, 'no_speech_prob': 0.00091494683874771}, {'id': 670, 'seek': 457296, 'start': 4579.76, 'end': 4586.32, 'text': ' this has a value 3, right. Then our intuition says that which is basically the depth of the tree', 'tokens': [50704, 341, 575, 257, 2158, 805, 11, 558, 13, 1396, 527, 24002, 1619, 300, 597, 307, 1936, 264, 7161, 295, 264, 4230, 51032], 'temperature': 0.0, 'avg_logprob': -0.057650634922932105, 'compression_ratio': 1.8431372549019607, 'no_speech_prob': 0.00091494683874771}, {'id': 671, 'seek': 457296, 'start': 4586.32, 'end': 4591.28, 'text': ' intuition. It is not just the depth, but it is the label value which could be caused by the depth', 'tokens': [51032, 24002, 13, 467, 307, 406, 445, 264, 7161, 11, 457, 309, 307, 264, 7645, 2158, 597, 727, 312, 7008, 538, 264, 7161, 51280], 'temperature': 0.0, 'avg_logprob': -0.057650634922932105, 'compression_ratio': 1.8431372549019607, 'no_speech_prob': 0.00091494683874771}, {'id': 672, 'seek': 457296, 'start': 4591.28, 'end': 4598.08, 'text': ' also, right. So, we say that we have to generate code for this part first. When I generate code', 'tokens': [51280, 611, 11, 558, 13, 407, 11, 321, 584, 300, 321, 362, 281, 8460, 3089, 337, 341, 644, 700, 13, 1133, 286, 8460, 3089, 51620], 'temperature': 0.0, 'avg_logprob': -0.057650634922932105, 'compression_ratio': 1.8431372549019607, 'no_speech_prob': 0.00091494683874771}, {'id': 673, 'seek': 459808, 'start': 4598.08, 'end': 4606.88, 'text': ' for this part, the result let us say is in some register R2, correct, right. And out of these five', 'tokens': [50364, 337, 341, 644, 11, 264, 1874, 718, 505, 584, 307, 294, 512, 7280, 497, 17, 11, 3006, 11, 558, 13, 400, 484, 295, 613, 1732, 50804], 'temperature': 0.0, 'avg_logprob': -0.10016266662295502, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.01904638484120369}, {'id': 674, 'seek': 459808, 'start': 4606.88, 'end': 4614.16, 'text': ' registers except R2, all other registers are free for me to use, right. Now, I can come back and', 'tokens': [50804, 38351, 3993, 497, 17, 11, 439, 661, 38351, 366, 1737, 337, 385, 281, 764, 11, 558, 13, 823, 11, 286, 393, 808, 646, 293, 51168], 'temperature': 0.0, 'avg_logprob': -0.10016266662295502, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.01904638484120369}, {'id': 675, 'seek': 459808, 'start': 4614.16, 'end': 4621.28, 'text': ' generate code for this, right. And I generate code for this and the result is in R1, right.', 'tokens': [51168, 8460, 3089, 337, 341, 11, 558, 13, 400, 286, 8460, 3089, 337, 341, 293, 264, 1874, 307, 294, 497, 16, 11, 558, 13, 51524], 'temperature': 0.0, 'avg_logprob': -0.10016266662295502, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.01904638484120369}, {'id': 676, 'seek': 459808, 'start': 4621.84, 'end': 4627.84, 'text': ' And then as far as generating code for this node is concerned, it is basically operation R1.', 'tokens': [51552, 400, 550, 382, 1400, 382, 17746, 3089, 337, 341, 9984, 307, 5922, 11, 309, 307, 1936, 6916, 497, 16, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.10016266662295502, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.01904638484120369}, {'id': 677, 'seek': 462808, 'start': 4628.24, 'end': 4634.5599999999995, 'text': ' Comma R2, correct. It is also correct. So, the code that I am going to generate as a part of my', 'tokens': [50372, 3046, 64, 497, 17, 11, 3006, 13, 467, 307, 611, 3006, 13, 407, 11, 264, 3089, 300, 286, 669, 516, 281, 8460, 382, 257, 644, 295, 452, 50688], 'temperature': 0.0, 'avg_logprob': -0.10954280082996075, 'compression_ratio': 1.989795918367347, 'no_speech_prob': 0.009981960989534855}, {'id': 678, 'seek': 462808, 'start': 4634.5599999999995, 'end': 4642.8, 'text': ' code generation is the code which is generated for this, okay. Let us call this code CR, right hand', 'tokens': [50688, 3089, 5125, 307, 264, 3089, 597, 307, 10833, 337, 341, 11, 1392, 13, 961, 505, 818, 341, 3089, 14123, 11, 558, 1011, 51100], 'temperature': 0.0, 'avg_logprob': -0.10954280082996075, 'compression_ratio': 1.989795918367347, 'no_speech_prob': 0.009981960989534855}, {'id': 679, 'seek': 462808, 'start': 4642.8, 'end': 4650.8, 'text': ' side. The code which is generated for this, let us call this code CL and the code which is generated', 'tokens': [51100, 1252, 13, 440, 3089, 597, 307, 10833, 337, 341, 11, 718, 505, 818, 341, 3089, 12855, 293, 264, 3089, 597, 307, 10833, 51500], 'temperature': 0.0, 'avg_logprob': -0.10954280082996075, 'compression_ratio': 1.989795918367347, 'no_speech_prob': 0.009981960989534855}, {'id': 680, 'seek': 462808, 'start': 4650.8, 'end': 4657.28, 'text': ' for this node, correct. In other words, because it is a recursive call and it goes like this,', 'tokens': [51500, 337, 341, 9984, 11, 3006, 13, 682, 661, 2283, 11, 570, 309, 307, 257, 20560, 488, 818, 293, 309, 1709, 411, 341, 11, 51824], 'temperature': 0.0, 'avg_logprob': -0.10954280082996075, 'compression_ratio': 1.989795918367347, 'no_speech_prob': 0.009981960989534855}, {'id': 681, 'seek': 465728, 'start': 4657.28, 'end': 4662.08, 'text': ' the way that it is going to look like in the order. So, what I am going to do is that I am', 'tokens': [50364, 264, 636, 300, 309, 307, 516, 281, 574, 411, 294, 264, 1668, 13, 407, 11, 437, 286, 669, 516, 281, 360, 307, 300, 286, 669, 50604], 'temperature': 0.0, 'avg_logprob': -0.07921116440384476, 'compression_ratio': 2.1965317919075145, 'no_speech_prob': 0.0009769907919690013}, {'id': 682, 'seek': 465728, 'start': 4662.08, 'end': 4668.5599999999995, 'text': ' going to do, let me write it here, okay. First, I am going to generate the code for the right sub', 'tokens': [50604, 516, 281, 360, 11, 718, 385, 2464, 309, 510, 11, 1392, 13, 2386, 11, 286, 669, 516, 281, 8460, 264, 3089, 337, 264, 558, 1422, 50928], 'temperature': 0.0, 'avg_logprob': -0.07921116440384476, 'compression_ratio': 2.1965317919075145, 'no_speech_prob': 0.0009769907919690013}, {'id': 683, 'seek': 465728, 'start': 4668.5599999999995, 'end': 4675.759999999999, 'text': ' tree. So, that is code CR. Then I am going to generate the code for the left sub tree which is', 'tokens': [50928, 4230, 13, 407, 11, 300, 307, 3089, 14123, 13, 1396, 286, 669, 516, 281, 8460, 264, 3089, 337, 264, 1411, 1422, 4230, 597, 307, 51288], 'temperature': 0.0, 'avg_logprob': -0.07921116440384476, 'compression_ratio': 2.1965317919075145, 'no_speech_prob': 0.0009769907919690013}, {'id': 684, 'seek': 465728, 'start': 4675.759999999999, 'end': 4682.96, 'text': ' code CL. Then I am going to generate the code for the node which is code N. This is the order in', 'tokens': [51288, 3089, 12855, 13, 1396, 286, 669, 516, 281, 8460, 264, 3089, 337, 264, 9984, 597, 307, 3089, 426, 13, 639, 307, 264, 1668, 294, 51648], 'temperature': 0.0, 'avg_logprob': -0.07921116440384476, 'compression_ratio': 2.1965317919075145, 'no_speech_prob': 0.0009769907919690013}, {'id': 685, 'seek': 468296, 'start': 4682.96, 'end': 4688.8, 'text': ' which the code is going to appear in the program or in the compiled code, let us say.', 'tokens': [50364, 597, 264, 3089, 307, 516, 281, 4204, 294, 264, 1461, 420, 294, 264, 36548, 3089, 11, 718, 505, 584, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.13101620827951738, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.009429827332496643}, {'id': 686, 'seek': 468296, 'start': 4689.76, 'end': 4695.52, 'text': ' For the program, this is the code that is generated. The rest of the statements that you see,', 'tokens': [50704, 1171, 264, 1461, 11, 341, 307, 264, 3089, 300, 307, 10833, 13, 440, 1472, 295, 264, 12363, 300, 291, 536, 11, 50992], 'temperature': 0.0, 'avg_logprob': -0.13101620827951738, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.009429827332496643}, {'id': 687, 'seek': 468296, 'start': 4695.52, 'end': 4701.92, 'text': ' save this popped stack in some register, etc. are all maintenance code of the code generator,', 'tokens': [50992, 3155, 341, 21545, 8630, 294, 512, 7280, 11, 5183, 13, 366, 439, 11258, 3089, 295, 264, 3089, 19265, 11, 51312], 'temperature': 0.0, 'avg_logprob': -0.13101620827951738, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.009429827332496643}, {'id': 688, 'seek': 468296, 'start': 4702.4800000000005, 'end': 4708.08, 'text': ' okay. The condition that we require is that you have the top of the stack, okay, and the top of', 'tokens': [51340, 1392, 13, 440, 4188, 300, 321, 3651, 307, 300, 291, 362, 264, 1192, 295, 264, 8630, 11, 1392, 11, 293, 264, 1192, 295, 51620], 'temperature': 0.0, 'avg_logprob': -0.13101620827951738, 'compression_ratio': 1.835820895522388, 'no_speech_prob': 0.009429827332496643}, {'id': 689, 'seek': 470808, 'start': 4708.08, 'end': 4715.36, 'text': ' the stack is R1, then R1 must compute the left sub tree, okay. In order for you to do that,', 'tokens': [50364, 264, 8630, 307, 497, 16, 11, 550, 497, 16, 1633, 14722, 264, 1411, 1422, 4230, 11, 1392, 13, 682, 1668, 337, 291, 281, 360, 300, 11, 50728], 'temperature': 0.0, 'avg_logprob': -0.0751525973096306, 'compression_ratio': 1.5921787709497206, 'no_speech_prob': 0.006369558162987232}, {'id': 690, 'seek': 470808, 'start': 4715.36, 'end': 4722.0, 'text': ' originally you had R1 and R2 like this. When you generate code, if you have generated code for this', 'tokens': [50728, 7993, 291, 632, 497, 16, 293, 497, 17, 411, 341, 13, 1133, 291, 8460, 3089, 11, 498, 291, 362, 10833, 3089, 337, 341, 51060], 'temperature': 0.0, 'avg_logprob': -0.0751525973096306, 'compression_ratio': 1.5921787709497206, 'no_speech_prob': 0.006369558162987232}, {'id': 691, 'seek': 470808, 'start': 4722.0, 'end': 4730.16, 'text': ' using R1, correct, then what would have happened is this will have R1 instead of R2, correct.', 'tokens': [51060, 1228, 497, 16, 11, 3006, 11, 550, 437, 576, 362, 2011, 307, 341, 486, 362, 497, 16, 2602, 295, 497, 17, 11, 3006, 13, 51468], 'temperature': 0.0, 'avg_logprob': -0.0751525973096306, 'compression_ratio': 1.5921787709497206, 'no_speech_prob': 0.006369558162987232}, {'id': 692, 'seek': 473016, 'start': 4730.16, 'end': 4739.5199999999995, 'text': ' Then your top of the stack condition would not be satisfied, right. That is the reason why we do', 'tokens': [50364, 1396, 428, 1192, 295, 264, 8630, 4188, 576, 406, 312, 11239, 11, 558, 13, 663, 307, 264, 1778, 983, 321, 360, 50832], 'temperature': 0.0, 'avg_logprob': -0.11832770934471717, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.006154536735266447}, {'id': 693, 'seek': 473016, 'start': 4739.5199999999995, 'end': 4745.44, 'text': ' not do that. That is why what we do is that we swap these two values and then temporarily make', 'tokens': [50832, 406, 360, 300, 13, 663, 307, 983, 437, 321, 360, 307, 300, 321, 18135, 613, 732, 4190, 293, 550, 23750, 652, 51128], 'temperature': 0.0, 'avg_logprob': -0.11832770934471717, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.006154536735266447}, {'id': 694, 'seek': 473016, 'start': 4745.44, 'end': 4752.48, 'text': ' R2 as the top of the stack, generate code for this. The result value will be in R2. Then after that,', 'tokens': [51128, 497, 17, 382, 264, 1192, 295, 264, 8630, 11, 8460, 3089, 337, 341, 13, 440, 1874, 2158, 486, 312, 294, 497, 17, 13, 1396, 934, 300, 11, 51480], 'temperature': 0.0, 'avg_logprob': -0.11832770934471717, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.006154536735266447}, {'id': 695, 'seek': 473016, 'start': 4752.48, 'end': 4759.04, 'text': ' you remember R2 and pop it out. Then R1 becomes the top of the stack, correct. Generate code for', 'tokens': [51480, 291, 1604, 497, 17, 293, 1665, 309, 484, 13, 1396, 497, 16, 3643, 264, 1192, 295, 264, 8630, 11, 3006, 13, 15409, 473, 3089, 337, 51808], 'temperature': 0.0, 'avg_logprob': -0.11832770934471717, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.006154536735266447}, {'id': 696, 'seek': 475904, 'start': 4759.04, 'end': 4766.48, 'text': ' the left side which will actually produce a result in R1. Then after that, push R2, swap again so', 'tokens': [50364, 264, 1411, 1252, 597, 486, 767, 5258, 257, 1874, 294, 497, 16, 13, 1396, 934, 300, 11, 2944, 497, 17, 11, 18135, 797, 370, 50736], 'temperature': 0.0, 'avg_logprob': -0.08461887629952018, 'compression_ratio': 1.7610294117647058, 'no_speech_prob': 0.0052131847478449345}, {'id': 697, 'seek': 475904, 'start': 4766.48, 'end': 4772.32, 'text': ' that you will have R1, R2 in the reverse direction, right. So, all of these juggleries that you do,', 'tokens': [50736, 300, 291, 486, 362, 497, 16, 11, 497, 17, 294, 264, 9943, 3513, 11, 558, 13, 407, 11, 439, 295, 613, 361, 3562, 1918, 530, 300, 291, 360, 11, 51028], 'temperature': 0.0, 'avg_logprob': -0.08461887629952018, 'compression_ratio': 1.7610294117647058, 'no_speech_prob': 0.0052131847478449345}, {'id': 698, 'seek': 475904, 'start': 4772.88, 'end': 4777.6, 'text': ' that is only in your data structure or stack and other things. That has nothing to do with the', 'tokens': [51056, 300, 307, 787, 294, 428, 1412, 3877, 420, 8630, 293, 661, 721, 13, 663, 575, 1825, 281, 360, 365, 264, 51292], 'temperature': 0.0, 'avg_logprob': -0.08461887629952018, 'compression_ratio': 1.7610294117647058, 'no_speech_prob': 0.0052131847478449345}, {'id': 699, 'seek': 475904, 'start': 4777.6, 'end': 4782.8, 'text': ' code that you generate. The code that you generate is only these three parts. Of course,', 'tokens': [51292, 3089, 300, 291, 8460, 13, 440, 3089, 300, 291, 8460, 307, 787, 613, 1045, 3166, 13, 2720, 1164, 11, 51552], 'temperature': 0.0, 'avg_logprob': -0.08461887629952018, 'compression_ratio': 1.7610294117647058, 'no_speech_prob': 0.0052131847478449345}, {'id': 700, 'seek': 475904, 'start': 4782.8, 'end': 4787.92, 'text': ' these are all recursive parts. So, it will further go down into each one of its left sub tree and', 'tokens': [51552, 613, 366, 439, 20560, 488, 3166, 13, 407, 11, 309, 486, 3052, 352, 760, 666, 1184, 472, 295, 1080, 1411, 1422, 4230, 293, 51808], 'temperature': 0.0, 'avg_logprob': -0.08461887629952018, 'compression_ratio': 1.7610294117647058, 'no_speech_prob': 0.0052131847478449345}, {'id': 701, 'seek': 478792, 'start': 4787.92, 'end': 4792.88, 'text': ' right sub tree and so on, correct. So, that is really what happens, okay.', 'tokens': [50364, 558, 1422, 4230, 293, 370, 322, 11, 3006, 13, 407, 11, 300, 307, 534, 437, 2314, 11, 1392, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.07072643174065484, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.011897092685103416}, {'id': 702, 'seek': 478792, 'start': 4792.88, 'end': 4797.92, 'text': ' Let me just take two more minutes and then complete the rest of the discussion, okay,', 'tokens': [50612, 961, 385, 445, 747, 732, 544, 2077, 293, 550, 3566, 264, 1472, 295, 264, 5017, 11, 1392, 11, 50864], 'temperature': 0.0, 'avg_logprob': -0.07072643174065484, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.011897092685103416}, {'id': 703, 'seek': 478792, 'start': 4799.2, 'end': 4805.6, 'text': ' right. This is one case. We have more cases to cover, right. So, this is the fourth case and', 'tokens': [50928, 558, 13, 639, 307, 472, 1389, 13, 492, 362, 544, 3331, 281, 2060, 11, 558, 13, 407, 11, 341, 307, 264, 6409, 1389, 293, 51248], 'temperature': 0.0, 'avg_logprob': -0.07072643174065484, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.011897092685103416}, {'id': 704, 'seek': 478792, 'start': 4805.6, 'end': 4812.8, 'text': ' let us see what happens here, right. Here the right sub tree requires fewer registers and the', 'tokens': [51248, 718, 505, 536, 437, 2314, 510, 11, 558, 13, 1692, 264, 558, 1422, 4230, 7029, 13366, 38351, 293, 264, 51608], 'temperature': 0.0, 'avg_logprob': -0.07072643174065484, 'compression_ratio': 1.6878048780487804, 'no_speech_prob': 0.011897092685103416}, {'id': 705, 'seek': 481280, 'start': 4812.8, 'end': 4818.24, 'text': ' left sub tree requires more registers. Again, we do not know whether it is greater than R or', 'tokens': [50364, 1411, 1422, 4230, 7029, 544, 38351, 13, 3764, 11, 321, 360, 406, 458, 1968, 309, 307, 5044, 813, 497, 420, 50636], 'temperature': 0.0, 'avg_logprob': -0.06508840761686627, 'compression_ratio': 1.931578947368421, 'no_speech_prob': 0.012846400029957294}, {'id': 706, 'seek': 481280, 'start': 4818.24, 'end': 4824.16, 'text': ' less than R, but it is greater than the right sub tree. So, in this case, we have to generate', 'tokens': [50636, 1570, 813, 497, 11, 457, 309, 307, 5044, 813, 264, 558, 1422, 4230, 13, 407, 11, 294, 341, 1389, 11, 321, 362, 281, 8460, 50932], 'temperature': 0.0, 'avg_logprob': -0.06508840761686627, 'compression_ratio': 1.931578947368421, 'no_speech_prob': 0.012846400029957294}, {'id': 707, 'seek': 481280, 'start': 4824.16, 'end': 4829.76, 'text': ' the code for the left sub tree first and then the right sub tree. Because you are going to', 'tokens': [50932, 264, 3089, 337, 264, 1411, 1422, 4230, 700, 293, 550, 264, 558, 1422, 4230, 13, 1436, 291, 366, 516, 281, 51212], 'temperature': 0.0, 'avg_logprob': -0.06508840761686627, 'compression_ratio': 1.931578947368421, 'no_speech_prob': 0.012846400029957294}, {'id': 708, 'seek': 481280, 'start': 4829.76, 'end': 4836.400000000001, 'text': ' generate code for the left sub tree, right, it is actually easy. You generate code for N1', 'tokens': [51212, 8460, 3089, 337, 264, 1411, 1422, 4230, 11, 558, 11, 309, 307, 767, 1858, 13, 509, 8460, 3089, 337, 426, 16, 51544], 'temperature': 0.0, 'avg_logprob': -0.06508840761686627, 'compression_ratio': 1.931578947368421, 'no_speech_prob': 0.012846400029957294}, {'id': 709, 'seek': 483640, 'start': 4836.96, 'end': 4843.92, 'text': ' with the top of the stack, okay. Then you pop the stack, right. That means that R1 comes out', 'tokens': [50392, 365, 264, 1192, 295, 264, 8630, 11, 1392, 13, 1396, 291, 1665, 264, 8630, 11, 558, 13, 663, 1355, 300, 497, 16, 1487, 484, 50740], 'temperature': 0.0, 'avg_logprob': -0.08793116087960724, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.06138727441430092}, {'id': 710, 'seek': 483640, 'start': 4844.719999999999, 'end': 4848.719999999999, 'text': ' and you hold it in a temporary register. Again, this is your bookkeeping code,', 'tokens': [50780, 293, 291, 1797, 309, 294, 257, 13413, 7280, 13, 3764, 11, 341, 307, 428, 1446, 25769, 3089, 11, 50980], 'temperature': 0.0, 'avg_logprob': -0.08793116087960724, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.06138727441430092}, {'id': 711, 'seek': 483640, 'start': 4848.719999999999, 'end': 4854.799999999999, 'text': ' not a part of the generated code. Then you generate code for N2. Now R2 is the top of the stack.', 'tokens': [50980, 406, 257, 644, 295, 264, 10833, 3089, 13, 1396, 291, 8460, 3089, 337, 426, 17, 13, 823, 497, 17, 307, 264, 1192, 295, 264, 8630, 13, 51284], 'temperature': 0.0, 'avg_logprob': -0.08793116087960724, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.06138727441430092}, {'id': 712, 'seek': 483640, 'start': 4854.799999999999, 'end': 4860.719999999999, 'text': ' You generate the result in R2, right. And then now this is the code that you generate for N,', 'tokens': [51284, 509, 8460, 264, 1874, 294, 497, 17, 11, 558, 13, 400, 550, 586, 341, 307, 264, 3089, 300, 291, 8460, 337, 426, 11, 51580], 'temperature': 0.0, 'avg_logprob': -0.08793116087960724, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.06138727441430092}, {'id': 713, 'seek': 486072, 'start': 4860.72, 'end': 4869.2, 'text': ' which is basically operation, right, or top of the stack, okay. So, that is how this code is', 'tokens': [50364, 597, 307, 1936, 6916, 11, 558, 11, 420, 1192, 295, 264, 8630, 11, 1392, 13, 407, 11, 300, 307, 577, 341, 3089, 307, 50788], 'temperature': 0.0, 'avg_logprob': -0.08977774077770757, 'compression_ratio': 1.6820276497695852, 'no_speech_prob': 0.011083994060754776}, {'id': 714, 'seek': 486072, 'start': 4869.2, 'end': 4876.8, 'text': ' generated, right. And then you push R stack back into it so that now R2 is on the top of the stack.', 'tokens': [50788, 10833, 11, 558, 13, 400, 550, 291, 2944, 497, 8630, 646, 666, 309, 370, 300, 586, 497, 17, 307, 322, 264, 1192, 295, 264, 8630, 13, 51168], 'temperature': 0.0, 'avg_logprob': -0.08977774077770757, 'compression_ratio': 1.6820276497695852, 'no_speech_prob': 0.011083994060754776}, {'id': 715, 'seek': 486072, 'start': 4876.8, 'end': 4881.92, 'text': ' Again, all of this is again going to go into the proof of why this is optimal,', 'tokens': [51168, 3764, 11, 439, 295, 341, 307, 797, 516, 281, 352, 666, 264, 8177, 295, 983, 341, 307, 16252, 11, 51424], 'temperature': 0.0, 'avg_logprob': -0.08977774077770757, 'compression_ratio': 1.6820276497695852, 'no_speech_prob': 0.011083994060754776}, {'id': 716, 'seek': 486072, 'start': 4881.92, 'end': 4887.84, 'text': ' okay, which we are not going to see in detail, okay. Let us just quickly go to the last case.', 'tokens': [51424, 1392, 11, 597, 321, 366, 406, 516, 281, 536, 294, 2607, 11, 1392, 13, 961, 505, 445, 2661, 352, 281, 264, 1036, 1389, 13, 51720], 'temperature': 0.0, 'avg_logprob': -0.08977774077770757, 'compression_ratio': 1.6820276497695852, 'no_speech_prob': 0.011083994060754776}, {'id': 717, 'seek': 488784, 'start': 4887.84, 'end': 4892.8, 'text': ' And so far what we have seen is that we have seen the cases where one side is at least less', 'tokens': [50364, 400, 370, 1400, 437, 321, 362, 1612, 307, 300, 321, 362, 1612, 264, 3331, 689, 472, 1252, 307, 412, 1935, 1570, 50612], 'temperature': 0.0, 'avg_logprob': -0.06740868334867517, 'compression_ratio': 1.898989898989899, 'no_speech_prob': 0.011707349680364132}, {'id': 718, 'seek': 488784, 'start': 4892.8, 'end': 4900.0, 'text': ' than R, right. Let us see what happens in the last case where actually both sides can be', 'tokens': [50612, 813, 497, 11, 558, 13, 961, 505, 536, 437, 2314, 294, 264, 1036, 1389, 689, 767, 1293, 4881, 393, 312, 50972], 'temperature': 0.0, 'avg_logprob': -0.06740868334867517, 'compression_ratio': 1.898989898989899, 'no_speech_prob': 0.011707349680364132}, {'id': 719, 'seek': 488784, 'start': 4900.8, 'end': 4906.56, 'text': ' greater than or equal to R. When it is greater than or equal to R, obviously there is going to be', 'tokens': [51012, 5044, 813, 420, 2681, 281, 497, 13, 1133, 309, 307, 5044, 813, 420, 2681, 281, 497, 11, 2745, 456, 307, 516, 281, 312, 51300], 'temperature': 0.0, 'avg_logprob': -0.06740868334867517, 'compression_ratio': 1.898989898989899, 'no_speech_prob': 0.011707349680364132}, {'id': 720, 'seek': 488784, 'start': 4906.56, 'end': 4912.88, 'text': ' some spill that is going to be happening, right. So, in this case what we will do is that we will', 'tokens': [51300, 512, 22044, 300, 307, 516, 281, 312, 2737, 11, 558, 13, 407, 11, 294, 341, 1389, 437, 321, 486, 360, 307, 300, 321, 486, 51616], 'temperature': 0.0, 'avg_logprob': -0.06740868334867517, 'compression_ratio': 1.898989898989899, 'no_speech_prob': 0.011707349680364132}, {'id': 721, 'seek': 491288, 'start': 4912.88, 'end': 4920.4800000000005, 'text': ' first compute the right side first, generate code for that. Then we will pop the top of the stack,', 'tokens': [50364, 700, 14722, 264, 558, 1252, 700, 11, 8460, 3089, 337, 300, 13, 1396, 321, 486, 1665, 264, 1192, 295, 264, 8630, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.08610506390416345, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.00862111710011959}, {'id': 722, 'seek': 491288, 'start': 4921.28, 'end': 4928.400000000001, 'text': ' okay. And then do this following operation where we will actually store that particular register', 'tokens': [50784, 1392, 13, 400, 550, 360, 341, 3480, 6916, 689, 321, 486, 767, 3531, 300, 1729, 7280, 51140], 'temperature': 0.0, 'avg_logprob': -0.08610506390416345, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.00862111710011959}, {'id': 723, 'seek': 491288, 'start': 4928.400000000001, 'end': 4933.12, 'text': ' value in some temporary location. Remember both of them are greater than R. So,', 'tokens': [51140, 2158, 294, 512, 13413, 4914, 13, 5459, 1293, 295, 552, 366, 5044, 813, 497, 13, 407, 11, 51376], 'temperature': 0.0, 'avg_logprob': -0.08610506390416345, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.00862111710011959}, {'id': 724, 'seek': 491288, 'start': 4933.12, 'end': 4938.88, 'text': ' they are going to involve spills. You have at most R registers here. I mean you have R', 'tokens': [51376, 436, 366, 516, 281, 9494, 637, 2565, 13, 509, 362, 412, 881, 497, 38351, 510, 13, 286, 914, 291, 362, 497, 51664], 'temperature': 0.0, 'avg_logprob': -0.08610506390416345, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.00862111710011959}, {'id': 725, 'seek': 493888, 'start': 4938.88, 'end': 4945.36, 'text': ' registers available to you, but this computation itself requires more than R registers. So,', 'tokens': [50364, 38351, 2435, 281, 291, 11, 457, 341, 24903, 2564, 7029, 544, 813, 497, 38351, 13, 407, 11, 50688], 'temperature': 0.0, 'avg_logprob': -0.0953620724056078, 'compression_ratio': 1.8507462686567164, 'no_speech_prob': 0.013460383750498295}, {'id': 726, 'seek': 493888, 'start': 4945.36, 'end': 4952.16, 'text': ' if I reserve one more register for this, for the result value, then this will only have R minus', 'tokens': [50688, 498, 286, 17824, 472, 544, 7280, 337, 341, 11, 337, 264, 1874, 2158, 11, 550, 341, 486, 787, 362, 497, 3175, 51028], 'temperature': 0.0, 'avg_logprob': -0.0953620724056078, 'compression_ratio': 1.8507462686567164, 'no_speech_prob': 0.013460383750498295}, {'id': 727, 'seek': 493888, 'start': 4952.16, 'end': 4957.84, 'text': ' 1 registers available, but it requires more than R registers. So, I will have more spills.', 'tokens': [51028, 502, 38351, 2435, 11, 457, 309, 7029, 544, 813, 497, 38351, 13, 407, 11, 286, 486, 362, 544, 637, 2565, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.0953620724056078, 'compression_ratio': 1.8507462686567164, 'no_speech_prob': 0.013460383750498295}, {'id': 728, 'seek': 493888, 'start': 4957.84, 'end': 4963.28, 'text': ' So, what I am going to do is this. I first compute this value or generate code for this part.', 'tokens': [51312, 407, 11, 437, 286, 669, 516, 281, 360, 307, 341, 13, 286, 700, 14722, 341, 2158, 420, 8460, 3089, 337, 341, 644, 13, 51584], 'temperature': 0.0, 'avg_logprob': -0.0953620724056078, 'compression_ratio': 1.8507462686567164, 'no_speech_prob': 0.013460383750498295}, {'id': 729, 'seek': 496328, 'start': 4963.92, 'end': 4970.48, 'text': ' And then the result I am going to save it in some temporary location T1. That way I can release all', 'tokens': [50396, 400, 550, 264, 1874, 286, 669, 516, 281, 3155, 309, 294, 512, 13413, 4914, 314, 16, 13, 663, 636, 286, 393, 4374, 439, 50724], 'temperature': 0.0, 'avg_logprob': -0.09443959784000477, 'compression_ratio': 1.7302325581395348, 'no_speech_prob': 0.058519814163446426}, {'id': 730, 'seek': 496328, 'start': 4970.48, 'end': 4978.4, 'text': ' the R registers for computing the left side. Use all of those R registers to do the code generation', 'tokens': [50724, 264, 497, 38351, 337, 15866, 264, 1411, 1252, 13, 8278, 439, 295, 729, 497, 38351, 281, 360, 264, 3089, 5125, 51120], 'temperature': 0.0, 'avg_logprob': -0.09443959784000477, 'compression_ratio': 1.7302325581395348, 'no_speech_prob': 0.058519814163446426}, {'id': 731, 'seek': 496328, 'start': 4978.4, 'end': 4986.16, 'text': ' for the left subtree, right. And then see remember right hand side can be in memory,', 'tokens': [51120, 337, 264, 1411, 7257, 701, 11, 558, 13, 400, 550, 536, 1604, 558, 1011, 1252, 393, 312, 294, 4675, 11, 51508], 'temperature': 0.0, 'avg_logprob': -0.09443959784000477, 'compression_ratio': 1.7302325581395348, 'no_speech_prob': 0.058519814163446426}, {'id': 732, 'seek': 496328, 'start': 4986.719999999999, 'end': 4992.32, 'text': ' left hand side has to be in a register. So, computing this first, I can store the value', 'tokens': [51536, 1411, 1011, 1252, 575, 281, 312, 294, 257, 7280, 13, 407, 11, 15866, 341, 700, 11, 286, 393, 3531, 264, 2158, 51816], 'temperature': 0.0, 'avg_logprob': -0.09443959784000477, 'compression_ratio': 1.7302325581395348, 'no_speech_prob': 0.058519814163446426}, {'id': 733, 'seek': 499232, 'start': 4992.32, 'end': 4997.12, 'text': ' into a temporary location and then use the temporary location as a part of', 'tokens': [50364, 666, 257, 13413, 4914, 293, 550, 764, 264, 13413, 4914, 382, 257, 644, 295, 50604], 'temperature': 0.0, 'avg_logprob': -0.0888017037335564, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.0009678782662376761}, {'id': 734, 'seek': 499232, 'start': 4997.92, 'end': 5003.2, 'text': ' operand for this operation, correct. So, that is really what we do. So, after', 'tokens': [50644, 2208, 474, 337, 341, 6916, 11, 3006, 13, 407, 11, 300, 307, 534, 437, 321, 360, 13, 407, 11, 934, 50908], 'temperature': 0.0, 'avg_logprob': -0.0888017037335564, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.0009678782662376761}, {'id': 735, 'seek': 499232, 'start': 5004.24, 'end': 5011.28, 'text': ' you generate code for N1, generate code for N1 will have the value in the top of the stack register,', 'tokens': [50960, 291, 8460, 3089, 337, 426, 16, 11, 8460, 3089, 337, 426, 16, 486, 362, 264, 2158, 294, 264, 1192, 295, 264, 8630, 7280, 11, 51312], 'temperature': 0.0, 'avg_logprob': -0.0888017037335564, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.0009678782662376761}, {'id': 736, 'seek': 499232, 'start': 5012.32, 'end': 5021.599999999999, 'text': ' correct. So, that register along with this temporary on which you will perform the operation.', 'tokens': [51364, 3006, 13, 407, 11, 300, 7280, 2051, 365, 341, 13413, 322, 597, 291, 486, 2042, 264, 6916, 13, 51828], 'temperature': 0.0, 'avg_logprob': -0.0888017037335564, 'compression_ratio': 1.9065934065934067, 'no_speech_prob': 0.0009678782662376761}, {'id': 737, 'seek': 502232, 'start': 5022.32, 'end': 5026.639999999999, 'text': ' Again if you want to see an example, let me see if I get this correct,', 'tokens': [50364, 3764, 498, 291, 528, 281, 536, 364, 1365, 11, 718, 385, 536, 498, 286, 483, 341, 3006, 11, 50580], 'temperature': 0.0, 'avg_logprob': -0.17443135855854422, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0008727191016077995}, {'id': 738, 'seek': 502232, 'start': 5027.759999999999, 'end': 5039.04, 'text': ' okay. So, here is the case where we have, right. Let us say this is 5 and this is 7,', 'tokens': [50636, 1392, 13, 407, 11, 510, 307, 264, 1389, 689, 321, 362, 11, 558, 13, 961, 505, 584, 341, 307, 1025, 293, 341, 307, 1614, 11, 51200], 'temperature': 0.0, 'avg_logprob': -0.17443135855854422, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0008727191016077995}, {'id': 739, 'seek': 502232, 'start': 5040.48, 'end': 5048.24, 'text': ' okay. I am specifically taking the example of the left side having more, requiring more registers', 'tokens': [51272, 1392, 13, 286, 669, 4682, 1940, 264, 1365, 295, 264, 1411, 1252, 1419, 544, 11, 24165, 544, 38351, 51660], 'temperature': 0.0, 'avg_logprob': -0.17443135855854422, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0008727191016077995}, {'id': 740, 'seek': 504824, 'start': 5048.24, 'end': 5055.84, 'text': ' than the right side, okay. And I want to generate code for this, right. Let us assume that in my', 'tokens': [50364, 813, 264, 558, 1252, 11, 1392, 13, 400, 286, 528, 281, 8460, 3089, 337, 341, 11, 558, 13, 961, 505, 6552, 300, 294, 452, 50744], 'temperature': 0.0, 'avg_logprob': -0.08952859878540038, 'compression_ratio': 1.5777777777777777, 'no_speech_prob': 0.0021904136519879103}, {'id': 741, 'seek': 504824, 'start': 5055.84, 'end': 5061.76, 'text': ' architecture I have only 4 registers available. So, both of them are greater than or equal to', 'tokens': [50744, 9482, 286, 362, 787, 1017, 38351, 2435, 13, 407, 11, 1293, 295, 552, 366, 5044, 813, 420, 2681, 281, 51040], 'temperature': 0.0, 'avg_logprob': -0.08952859878540038, 'compression_ratio': 1.5777777777777777, 'no_speech_prob': 0.0021904136519879103}, {'id': 742, 'seek': 504824, 'start': 5062.96, 'end': 5072.16, 'text': ' 4, right. In this case what do I say? I first say generate code for, sorry, generate code for', 'tokens': [51100, 1017, 11, 558, 13, 682, 341, 1389, 437, 360, 286, 584, 30, 286, 700, 584, 8460, 3089, 337, 11, 2597, 11, 8460, 3089, 337, 51560], 'temperature': 0.0, 'avg_logprob': -0.08952859878540038, 'compression_ratio': 1.5777777777777777, 'no_speech_prob': 0.0021904136519879103}, {'id': 743, 'seek': 507216, 'start': 5072.8, 'end': 5081.84, 'text': ' right side, okay. And let us say that I have registers R1, R2, R3, R4 in the top of my stack', 'tokens': [50396, 558, 1252, 11, 1392, 13, 400, 718, 505, 584, 300, 286, 362, 38351, 497, 16, 11, 497, 17, 11, 497, 18, 11, 497, 19, 294, 264, 1192, 295, 452, 8630, 50848], 'temperature': 0.0, 'avg_logprob': -0.06575936832647214, 'compression_ratio': 1.510752688172043, 'no_speech_prob': 0.005000691395252943}, {'id': 744, 'seek': 507216, 'start': 5081.84, 'end': 5089.28, 'text': ' like this, okay. R1 is on the top. So, the result value is going to be on the top of the stack.', 'tokens': [50848, 411, 341, 11, 1392, 13, 497, 16, 307, 322, 264, 1192, 13, 407, 11, 264, 1874, 2158, 307, 516, 281, 312, 322, 264, 1192, 295, 264, 8630, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.06575936832647214, 'compression_ratio': 1.510752688172043, 'no_speech_prob': 0.005000691395252943}, {'id': 745, 'seek': 507216, 'start': 5090.0, 'end': 5098.4, 'text': ' Then I generate code which says store R1 in a temporary location T, correct. Then I can also', 'tokens': [51256, 1396, 286, 8460, 3089, 597, 1619, 3531, 497, 16, 294, 257, 13413, 4914, 314, 11, 3006, 13, 1396, 286, 393, 611, 51676], 'temperature': 0.0, 'avg_logprob': -0.06575936832647214, 'compression_ratio': 1.510752688172043, 'no_speech_prob': 0.005000691395252943}, {'id': 746, 'seek': 509840, 'start': 5098.4, 'end': 5105.92, 'text': ' release R1. Now, using those 4 registers I will generate code for the left-hand side,', 'tokens': [50364, 4374, 497, 16, 13, 823, 11, 1228, 729, 1017, 38351, 286, 486, 8460, 3089, 337, 264, 1411, 12, 5543, 1252, 11, 50740], 'temperature': 0.0, 'avg_logprob': -0.09290057182312011, 'compression_ratio': 1.2919708029197081, 'no_speech_prob': 0.004878254607319832}, {'id': 747, 'seek': 509840, 'start': 5107.759999999999, 'end': 5115.2, 'text': ' right. Again the result will be on the top of the stack. So, I perform whatever is this op,', 'tokens': [50832, 558, 13, 3764, 264, 1874, 486, 312, 322, 264, 1192, 295, 264, 8630, 13, 407, 11, 286, 2042, 2035, 307, 341, 999, 11, 51204], 'temperature': 0.0, 'avg_logprob': -0.09290057182312011, 'compression_ratio': 1.2919708029197081, 'no_speech_prob': 0.004878254607319832}, {'id': 748, 'seek': 511520, 'start': 5116.0, 'end': 5129.28, 'text': ' okay, op top of the stack which is R1, right and T. Why? Because my right operand can be in a', 'tokens': [50404, 1392, 11, 999, 1192, 295, 264, 8630, 597, 307, 497, 16, 11, 558, 293, 314, 13, 1545, 30, 1436, 452, 558, 2208, 474, 393, 312, 294, 257, 51068], 'temperature': 0.0, 'avg_logprob': -0.09220258394877116, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.003444194095209241}, {'id': 749, 'seek': 511520, 'start': 5130.0, 'end': 5136.5599999999995, 'text': ' memory, right. If it says my left operand can be in a memory then I could have done it in either', 'tokens': [51104, 4675, 11, 558, 13, 759, 309, 1619, 452, 1411, 2208, 474, 393, 312, 294, 257, 4675, 550, 286, 727, 362, 1096, 309, 294, 2139, 51432], 'temperature': 0.0, 'avg_logprob': -0.09220258394877116, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.003444194095209241}, {'id': 750, 'seek': 511520, 'start': 5136.5599999999995, 'end': 5142.0, 'text': ' order, right. It only says the right operand can be in the memory, left has to be in a register.', 'tokens': [51432, 1668, 11, 558, 13, 467, 787, 1619, 264, 558, 2208, 474, 393, 312, 294, 264, 4675, 11, 1411, 575, 281, 312, 294, 257, 7280, 13, 51704], 'temperature': 0.0, 'avg_logprob': -0.09220258394877116, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.003444194095209241}, {'id': 751, 'seek': 514200, 'start': 5142.0, 'end': 5148.0, 'text': ' So, it is preferable that I generate code for the left-hand side with the result value in the top', 'tokens': [50364, 407, 11, 309, 307, 4382, 712, 300, 286, 8460, 3089, 337, 264, 1411, 12, 5543, 1252, 365, 264, 1874, 2158, 294, 264, 1192, 50664], 'temperature': 0.0, 'avg_logprob': -0.11756678989955358, 'compression_ratio': 1.7256637168141593, 'no_speech_prob': 0.005744501948356628}, {'id': 752, 'seek': 514200, 'start': 5148.0, 'end': 5154.88, 'text': ' of the stack so that that same register can be used in the operation. Otherwise, what would have', 'tokens': [50664, 295, 264, 8630, 370, 300, 300, 912, 7280, 393, 312, 1143, 294, 264, 6916, 13, 10328, 11, 437, 576, 362, 51008], 'temperature': 0.0, 'avg_logprob': -0.11756678989955358, 'compression_ratio': 1.7256637168141593, 'no_speech_prob': 0.005744501948356628}, {'id': 753, 'seek': 514200, 'start': 5154.88, 'end': 5161.68, 'text': ' happened if this is in memory, if I have calculated this first, sorry, if I have calculated this first,', 'tokens': [51008, 2011, 498, 341, 307, 294, 4675, 11, 498, 286, 362, 15598, 341, 700, 11, 2597, 11, 498, 286, 362, 15598, 341, 700, 11, 51348], 'temperature': 0.0, 'avg_logprob': -0.11756678989955358, 'compression_ratio': 1.7256637168141593, 'no_speech_prob': 0.005744501948356628}, {'id': 754, 'seek': 514200, 'start': 5162.4, 'end': 5171.12, 'text': ' if I have done the following thing, let us see, code CL, correct. And then let us say store', 'tokens': [51384, 498, 286, 362, 1096, 264, 3480, 551, 11, 718, 505, 536, 11, 3089, 12855, 11, 3006, 13, 400, 550, 718, 505, 584, 3531, 51820], 'temperature': 0.0, 'avg_logprob': -0.11756678989955358, 'compression_ratio': 1.7256637168141593, 'no_speech_prob': 0.005744501948356628}, {'id': 755, 'seek': 517200, 'start': 5172.96, 'end': 5181.44, 'text': ' result R1 into some temporary location, let us call it as TL, right. Then let us say code CR,', 'tokens': [50412, 1874, 497, 16, 666, 512, 13413, 4914, 11, 718, 505, 818, 309, 382, 40277, 11, 558, 13, 1396, 718, 505, 584, 3089, 14123, 11, 50836], 'temperature': 0.0, 'avg_logprob': -0.1092522816780286, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.004411872010678053}, {'id': 756, 'seek': 517200, 'start': 5183.68, 'end': 5187.44, 'text': ' right. R will be in a register but that is not useful for me,', 'tokens': [50948, 558, 13, 497, 486, 312, 294, 257, 7280, 457, 300, 307, 406, 4420, 337, 385, 11, 51136], 'temperature': 0.0, 'avg_logprob': -0.1092522816780286, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.004411872010678053}, {'id': 757, 'seek': 517200, 'start': 5188.32, 'end': 5191.44, 'text': ' correct. Then I have to do one more load of this', 'tokens': [51180, 3006, 13, 1396, 286, 362, 281, 360, 472, 544, 3677, 295, 341, 51336], 'temperature': 0.0, 'avg_logprob': -0.1092522816780286, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.004411872010678053}, {'id': 758, 'seek': 517200, 'start': 5193.6, 'end': 5201.04, 'text': ' TL to some register R2 and then I have to do this operation, right.', 'tokens': [51444, 40277, 281, 512, 7280, 497, 17, 293, 550, 286, 362, 281, 360, 341, 6916, 11, 558, 13, 51816], 'temperature': 0.0, 'avg_logprob': -0.1092522816780286, 'compression_ratio': 1.590643274853801, 'no_speech_prob': 0.004411872010678053}, {'id': 759, 'seek': 520200, 'start': 5202.08, 'end': 5209.92, 'text': ' R1, R2 or whatever, correct. So, this generates this extra code which is not really good,', 'tokens': [50368, 497, 16, 11, 497, 17, 420, 2035, 11, 3006, 13, 407, 11, 341, 23815, 341, 2857, 3089, 597, 307, 406, 534, 665, 11, 50760], 'temperature': 0.0, 'avg_logprob': -0.1227334296866639, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.004815731197595596}, {'id': 760, 'seek': 520200, 'start': 5210.48, 'end': 5218.24, 'text': ' is not it? So, that is the reason why you do not do this and you do this. Even though the', 'tokens': [50788, 307, 406, 309, 30, 407, 11, 300, 307, 264, 1778, 983, 291, 360, 406, 360, 341, 293, 291, 360, 341, 13, 2754, 1673, 264, 51176], 'temperature': 0.0, 'avg_logprob': -0.1227334296866639, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.004815731197595596}, {'id': 761, 'seek': 520200, 'start': 5219.12, 'end': 5224.96, 'text': ' right side requires fewer registers than the left side. So, typically in this code generation,', 'tokens': [51220, 558, 1252, 7029, 13366, 38351, 813, 264, 1411, 1252, 13, 407, 11, 5850, 294, 341, 3089, 5125, 11, 51512], 'temperature': 0.0, 'avg_logprob': -0.1227334296866639, 'compression_ratio': 1.611764705882353, 'no_speech_prob': 0.004815731197595596}, {'id': 762, 'seek': 522496, 'start': 5225.68, 'end': 5232.96, 'text': ' right, you follow that algorithm and if the, if one of the sub trees require fewer than', 'tokens': [50400, 558, 11, 291, 1524, 300, 9284, 293, 498, 264, 11, 498, 472, 295, 264, 1422, 5852, 3651, 13366, 813, 50764], 'temperature': 0.0, 'avg_logprob': -0.0926707023527564, 'compression_ratio': 1.8606965174129353, 'no_speech_prob': 0.008383739739656448}, {'id': 763, 'seek': 522496, 'start': 5233.92, 'end': 5239.76, 'text': ' the available number of registers, then you go to the sub tree which has the maximum requirement.', 'tokens': [50812, 264, 2435, 1230, 295, 38351, 11, 550, 291, 352, 281, 264, 1422, 4230, 597, 575, 264, 6674, 11695, 13, 51104], 'temperature': 0.0, 'avg_logprob': -0.0926707023527564, 'compression_ratio': 1.8606965174129353, 'no_speech_prob': 0.008383739739656448}, {'id': 764, 'seek': 522496, 'start': 5239.76, 'end': 5246.72, 'text': ' You finish that computation first, leave the result in the register and then release all but', 'tokens': [51104, 509, 2413, 300, 24903, 700, 11, 1856, 264, 1874, 294, 264, 7280, 293, 550, 4374, 439, 457, 51452], 'temperature': 0.0, 'avg_logprob': -0.0926707023527564, 'compression_ratio': 1.8606965174129353, 'no_speech_prob': 0.008383739739656448}, {'id': 765, 'seek': 522496, 'start': 5246.72, 'end': 5251.28, 'text': ' that register for the computation of the other side. The computation of the other side requires', 'tokens': [51452, 300, 7280, 337, 264, 24903, 295, 264, 661, 1252, 13, 440, 24903, 295, 264, 661, 1252, 7029, 51680], 'temperature': 0.0, 'avg_logprob': -0.0926707023527564, 'compression_ratio': 1.8606965174129353, 'no_speech_prob': 0.008383739739656448}, {'id': 766, 'seek': 525128, 'start': 5251.28, 'end': 5256.4, 'text': ' fewer registers, therefore it could be computed without any spill, right. So,', 'tokens': [50364, 13366, 38351, 11, 4412, 309, 727, 312, 40610, 1553, 604, 22044, 11, 558, 13, 407, 11, 50620], 'temperature': 0.0, 'avg_logprob': -0.1301216489813301, 'compression_ratio': 1.6715686274509804, 'no_speech_prob': 0.01071937009692192}, {'id': 767, 'seek': 525128, 'start': 5256.4, 'end': 5261.44, 'text': ' that is the algorithm that we follow, okay. Let us see, we are about to finish, okay.', 'tokens': [50620, 300, 307, 264, 9284, 300, 321, 1524, 11, 1392, 13, 961, 505, 536, 11, 321, 366, 466, 281, 2413, 11, 1392, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.1301216489813301, 'compression_ratio': 1.6715686274509804, 'no_speech_prob': 0.01071937009692192}, {'id': 768, 'seek': 525128, 'start': 5261.44, 'end': 5266.96, 'text': ' So, this is the last phase, okay. So, if you actually follow that algorithm,', 'tokens': [50872, 407, 11, 341, 307, 264, 1036, 5574, 11, 1392, 13, 407, 11, 498, 291, 767, 1524, 300, 9284, 11, 51148], 'temperature': 0.0, 'avg_logprob': -0.1301216489813301, 'compression_ratio': 1.6715686274509804, 'no_speech_prob': 0.01071937009692192}, {'id': 769, 'seek': 525128, 'start': 5267.759999999999, 'end': 5273.84, 'text': ' right, I have not gone through this step by step, you will actually end up in this evaluation order.', 'tokens': [51188, 558, 11, 286, 362, 406, 2780, 807, 341, 1823, 538, 1823, 11, 291, 486, 767, 917, 493, 294, 341, 13344, 1668, 13, 51492], 'temperature': 0.0, 'avg_logprob': -0.1301216489813301, 'compression_ratio': 1.6715686274509804, 'no_speech_prob': 0.01071937009692192}, {'id': 770, 'seek': 527384, 'start': 5273.84, 'end': 5278.8, 'text': ' You can verify that, right and this evaluation order is the', 'tokens': [50364, 509, 393, 16888, 300, 11, 558, 293, 341, 13344, 1668, 307, 264, 50612], 'temperature': 0.0, 'avg_logprob': -0.1118498089947278, 'compression_ratio': 1.766839378238342, 'no_speech_prob': 0.08907081186771393}, {'id': 771, 'seek': 527384, 'start': 5280.4800000000005, 'end': 5286.8, 'text': ' optimal order. You cannot have any other order which will generate fewer than eight instructions,', 'tokens': [50696, 16252, 1668, 13, 509, 2644, 362, 604, 661, 1668, 597, 486, 8460, 13366, 813, 3180, 9415, 11, 51012], 'temperature': 0.0, 'avg_logprob': -0.1118498089947278, 'compression_ratio': 1.766839378238342, 'no_speech_prob': 0.08907081186771393}, {'id': 772, 'seek': 527384, 'start': 5288.400000000001, 'end': 5293.360000000001, 'text': ' right. In this case, we have assumed two registers. If you have had only one register,', 'tokens': [51092, 558, 13, 682, 341, 1389, 11, 321, 362, 15895, 732, 38351, 13, 759, 291, 362, 632, 787, 472, 7280, 11, 51340], 'temperature': 0.0, 'avg_logprob': -0.1118498089947278, 'compression_ratio': 1.766839378238342, 'no_speech_prob': 0.08907081186771393}, {'id': 773, 'seek': 527384, 'start': 5293.360000000001, 'end': 5298.400000000001, 'text': ' what would have happened, right? If you had only one register, you would have generated code for', 'tokens': [51340, 437, 576, 362, 2011, 11, 558, 30, 759, 291, 632, 787, 472, 7280, 11, 291, 576, 362, 10833, 3089, 337, 51592], 'temperature': 0.0, 'avg_logprob': -0.1118498089947278, 'compression_ratio': 1.766839378238342, 'no_speech_prob': 0.08907081186771393}, {'id': 774, 'seek': 529840, 'start': 5298.4, 'end': 5307.12, 'text': ' this, spilled the value in memory, generated, means moved this into the register, computed this,', 'tokens': [50364, 341, 11, 37833, 264, 2158, 294, 4675, 11, 10833, 11, 1355, 4259, 341, 666, 264, 7280, 11, 40610, 341, 11, 50800], 'temperature': 0.0, 'avg_logprob': -0.13119103691794656, 'compression_ratio': 1.7517241379310344, 'no_speech_prob': 0.01955479569733143}, {'id': 775, 'seek': 529840, 'start': 5307.759999999999, 'end': 5315.12, 'text': ' spilled this in memory, do this, it will be in register, this will be in memory,', 'tokens': [50832, 37833, 341, 294, 4675, 11, 360, 341, 11, 309, 486, 312, 294, 7280, 11, 341, 486, 312, 294, 4675, 11, 51200], 'temperature': 0.0, 'avg_logprob': -0.13119103691794656, 'compression_ratio': 1.7517241379310344, 'no_speech_prob': 0.01955479569733143}, {'id': 776, 'seek': 529840, 'start': 5315.759999999999, 'end': 5321.28, 'text': ' generate code for this, right. Can you all do a homework, try to see whether', 'tokens': [51232, 8460, 3089, 337, 341, 11, 558, 13, 1664, 291, 439, 360, 257, 14578, 11, 853, 281, 536, 1968, 51508], 'temperature': 0.0, 'avg_logprob': -0.13119103691794656, 'compression_ratio': 1.7517241379310344, 'no_speech_prob': 0.01955479569733143}, {'id': 777, 'seek': 532128, 'start': 5321.44, 'end': 5330.639999999999, 'text': ' applying that algorithm works correctly on this or not, right. I will make all my slides available.', 'tokens': [50372, 9275, 300, 9284, 1985, 8944, 322, 341, 420, 406, 11, 558, 13, 286, 486, 652, 439, 452, 9788, 2435, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.12813651684633234, 'compression_ratio': 1.6125, 'no_speech_prob': 0.009544768370687962}, {'id': 778, 'seek': 532128, 'start': 5330.639999999999, 'end': 5335.2, 'text': ' It is also going to be available from the NPTEL webpage, okay. We will make all of those things', 'tokens': [50832, 467, 307, 611, 516, 281, 312, 2435, 490, 264, 38611, 51, 3158, 37852, 11, 1392, 13, 492, 486, 652, 439, 295, 729, 721, 51060], 'temperature': 0.0, 'avg_logprob': -0.12813651684633234, 'compression_ratio': 1.6125, 'no_speech_prob': 0.009544768370687962}, {'id': 779, 'seek': 532128, 'start': 5335.2, 'end': 5340.719999999999, 'text': ' available to you, but you can try to work this example out and then see whether it meets it.', 'tokens': [51060, 2435, 281, 291, 11, 457, 291, 393, 853, 281, 589, 341, 1365, 484, 293, 550, 536, 1968, 309, 13961, 309, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.12813651684633234, 'compression_ratio': 1.6125, 'no_speech_prob': 0.009544768370687962}, {'id': 780, 'seek': 532128, 'start': 5344.4, 'end': 5350.32, 'text': ' So, I am going to stop with this slide. The next step is dynamic programming. How many of you know', 'tokens': [51520, 407, 11, 286, 669, 516, 281, 1590, 365, 341, 4137, 13, 440, 958, 1823, 307, 8546, 9410, 13, 1012, 867, 295, 291, 458, 51816], 'temperature': 0.0, 'avg_logprob': -0.12813651684633234, 'compression_ratio': 1.6125, 'no_speech_prob': 0.009544768370687962}, {'id': 781, 'seek': 535032, 'start': 5350.32, 'end': 5358.4, 'text': ' about dynamic programming? Okay. Those of you who do not know have a quick, right, review of that.', 'tokens': [50364, 466, 8546, 9410, 30, 1033, 13, 3950, 295, 291, 567, 360, 406, 458, 362, 257, 1702, 11, 558, 11, 3131, 295, 300, 13, 50768], 'temperature': 0.0, 'avg_logprob': -0.15498250429747534, 'compression_ratio': 1.5515151515151515, 'no_speech_prob': 0.0013639962999150157}, {'id': 782, 'seek': 535032, 'start': 5358.4, 'end': 5365.44, 'text': ' What is dynamic programming? Not now, but tomorrow, right. So, we will see dynamic', 'tokens': [50768, 708, 307, 8546, 9410, 30, 1726, 586, 11, 457, 4153, 11, 558, 13, 407, 11, 321, 486, 536, 8546, 51120], 'temperature': 0.0, 'avg_logprob': -0.15498250429747534, 'compression_ratio': 1.5515151515151515, 'no_speech_prob': 0.0013639962999150157}, {'id': 783, 'seek': 535032, 'start': 5365.44, 'end': 5369.44, 'text': ' programming tree pattern matching and then move on to register allocation.', 'tokens': [51120, 9410, 4230, 5102, 14324, 293, 550, 1286, 322, 281, 7280, 27599, 13, 51320], 'temperature': 0.0, 'avg_logprob': -0.15498250429747534, 'compression_ratio': 1.5515151515151515, 'no_speech_prob': 0.0013639962999150157}]