[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 10.92, 'text': ' So, let us get started. So, we are going to continue today on code generation first and', 'tokens': [50364, 407, 11, 718, 505, 483, 1409, 13, 407, 11, 321, 366, 516, 281, 2354, 965, 322, 3089, 5125, 700, 293, 50910], 'temperature': 0.0, 'avg_logprob': -0.1547589869726272, 'compression_ratio': 1.7860696517412935, 'no_speech_prob': 0.01878949999809265}, {'id': 1, 'seek': 0, 'start': 10.92, 'end': 16.28, 'text': ' then we will see the dynamic programming approach. Yesterday we talked about the Seti-Wulman', 'tokens': [50910, 550, 321, 486, 536, 264, 8546, 9410, 3109, 13, 19765, 321, 2825, 466, 264, 8928, 72, 12, 54, 425, 1601, 51178], 'temperature': 0.0, 'avg_logprob': -0.1547589869726272, 'compression_ratio': 1.7860696517412935, 'no_speech_prob': 0.01878949999809265}, {'id': 2, 'seek': 0, 'start': 16.28, 'end': 22.080000000000002, 'text': ' approach for doing code generation of trees which consists of two passes namely the labeling', 'tokens': [51178, 3109, 337, 884, 3089, 5125, 295, 5852, 597, 14689, 295, 732, 11335, 20926, 264, 40244, 51468], 'temperature': 0.0, 'avg_logprob': -0.1547589869726272, 'compression_ratio': 1.7860696517412935, 'no_speech_prob': 0.01878949999809265}, {'id': 3, 'seek': 0, 'start': 22.080000000000002, 'end': 27.44, 'text': ' pass and then the code generation pass. So, we will move further and then we will see', 'tokens': [51468, 1320, 293, 550, 264, 3089, 5125, 1320, 13, 407, 11, 321, 486, 1286, 3052, 293, 550, 321, 486, 536, 51736], 'temperature': 0.0, 'avg_logprob': -0.1547589869726272, 'compression_ratio': 1.7860696517412935, 'no_speech_prob': 0.01878949999809265}, {'id': 4, 'seek': 2744, 'start': 27.44, 'end': 32.120000000000005, 'text': ' one more approach for generating optimal code for tree.', 'tokens': [50364, 472, 544, 3109, 337, 17746, 16252, 3089, 337, 4230, 13, 50598], 'temperature': 0.0, 'avg_logprob': -0.20757662785517705, 'compression_ratio': 2.0445859872611467, 'no_speech_prob': 0.19520172476768494}, {'id': 5, 'seek': 2744, 'start': 32.120000000000005, 'end': 39.36, 'text': ' So, in this approach what we are going to do is that if you want to generate code for', 'tokens': [50598, 407, 11, 294, 341, 3109, 437, 321, 366, 516, 281, 360, 307, 300, 498, 291, 528, 281, 8460, 3089, 337, 50960], 'temperature': 0.0, 'avg_logprob': -0.20757662785517705, 'compression_ratio': 2.0445859872611467, 'no_speech_prob': 0.19520172476768494}, {'id': 6, 'seek': 2744, 'start': 39.36, 'end': 46.24, 'text': ' any operation, the cost of generating code for this operation is same as cost of generating', 'tokens': [50960, 604, 6916, 11, 264, 2063, 295, 17746, 3089, 337, 341, 6916, 307, 912, 382, 2063, 295, 17746, 51304], 'temperature': 0.0, 'avg_logprob': -0.20757662785517705, 'compression_ratio': 2.0445859872611467, 'no_speech_prob': 0.19520172476768494}, {'id': 7, 'seek': 2744, 'start': 46.24, 'end': 52.92, 'text': ' code for T 1, cost of generating code for T 2 plus the cost of this instruction itself.', 'tokens': [51304, 3089, 337, 314, 502, 11, 2063, 295, 17746, 3089, 337, 314, 568, 1804, 264, 2063, 295, 341, 10951, 2564, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.20757662785517705, 'compression_ratio': 2.0445859872611467, 'no_speech_prob': 0.19520172476768494}, {'id': 8, 'seek': 5292, 'start': 53.4, 'end': 58.52, 'text': ' Therefore, if you are asking for the minimum cost for generating code for this instruction,', 'tokens': [50388, 7504, 11, 498, 291, 366, 3365, 337, 264, 7285, 2063, 337, 17746, 3089, 337, 341, 10951, 11, 50644], 'temperature': 0.0, 'avg_logprob': -0.21707721140192843, 'compression_ratio': 2.157068062827225, 'no_speech_prob': 0.018733855336904526}, {'id': 9, 'seek': 5292, 'start': 58.52, 'end': 62.96, 'text': ' that should actually be based on the minimum cost for generating code for this instruction', 'tokens': [50644, 300, 820, 767, 312, 2361, 322, 264, 7285, 2063, 337, 17746, 3089, 337, 341, 10951, 50866], 'temperature': 0.0, 'avg_logprob': -0.21707721140192843, 'compression_ratio': 2.157068062827225, 'no_speech_prob': 0.018733855336904526}, {'id': 10, 'seek': 5292, 'start': 62.96, 'end': 67.12, 'text': ' plus the minimum cost for generating code for this instruction and then the cost for', 'tokens': [50866, 1804, 264, 7285, 2063, 337, 17746, 3089, 337, 341, 10951, 293, 550, 264, 2063, 337, 51074], 'temperature': 0.0, 'avg_logprob': -0.21707721140192843, 'compression_ratio': 2.157068062827225, 'no_speech_prob': 0.018733855336904526}, {'id': 11, 'seek': 5292, 'start': 67.12, 'end': 72.16, 'text': ' this. In other words, this has this so called optimal', 'tokens': [51074, 341, 13, 682, 661, 2283, 11, 341, 575, 341, 370, 1219, 16252, 51326], 'temperature': 0.0, 'avg_logprob': -0.21707721140192843, 'compression_ratio': 2.157068062827225, 'no_speech_prob': 0.018733855336904526}, {'id': 12, 'seek': 5292, 'start': 72.16, 'end': 77.72, 'text': ' sub structure property of dynamic programming. In dynamic programming what do you say? The', 'tokens': [51326, 1422, 3877, 4707, 295, 8546, 9410, 13, 682, 8546, 9410, 437, 360, 291, 584, 30, 440, 51604], 'temperature': 0.0, 'avg_logprob': -0.21707721140192843, 'compression_ratio': 2.157068062827225, 'no_speech_prob': 0.018733855336904526}, {'id': 13, 'seek': 7772, 'start': 77.72, 'end': 84.8, 'text': ' problem is divided into sub problems and the sub problems satisfy the optimal sub', 'tokens': [50364, 1154, 307, 6666, 666, 1422, 2740, 293, 264, 1422, 2740, 19319, 264, 16252, 1422, 50718], 'temperature': 0.0, 'avg_logprob': -0.16416054210443606, 'compression_ratio': 2.3155080213903743, 'no_speech_prob': 0.03727056086063385}, {'id': 14, 'seek': 7772, 'start': 84.8, 'end': 91.08, 'text': ' structure property. That optimal sub structure property is essentially satisfied here because', 'tokens': [50718, 3877, 4707, 13, 663, 16252, 1422, 3877, 4707, 307, 4476, 11239, 510, 570, 51032], 'temperature': 0.0, 'avg_logprob': -0.16416054210443606, 'compression_ratio': 2.3155080213903743, 'no_speech_prob': 0.03727056086063385}, {'id': 15, 'seek': 7772, 'start': 91.08, 'end': 96.56, 'text': ' the minimum cost for generating code for this instruction is same as the minimum cost for', 'tokens': [51032, 264, 7285, 2063, 337, 17746, 3089, 337, 341, 10951, 307, 912, 382, 264, 7285, 2063, 337, 51306], 'temperature': 0.0, 'avg_logprob': -0.16416054210443606, 'compression_ratio': 2.3155080213903743, 'no_speech_prob': 0.03727056086063385}, {'id': 16, 'seek': 7772, 'start': 96.56, 'end': 101.4, 'text': ' generating code for this instruction plus the minimum cost for generating code for this', 'tokens': [51306, 17746, 3089, 337, 341, 10951, 1804, 264, 7285, 2063, 337, 17746, 3089, 337, 341, 51548], 'temperature': 0.0, 'avg_logprob': -0.16416054210443606, 'compression_ratio': 2.3155080213903743, 'no_speech_prob': 0.03727056086063385}, {'id': 17, 'seek': 7772, 'start': 101.4, 'end': 107.48, 'text': ' sub tree plus the cost of this. There cannot be any better way than doing this.', 'tokens': [51548, 1422, 4230, 1804, 264, 2063, 295, 341, 13, 821, 2644, 312, 604, 1101, 636, 813, 884, 341, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.16416054210443606, 'compression_ratio': 2.3155080213903743, 'no_speech_prob': 0.03727056086063385}, {'id': 18, 'seek': 10748, 'start': 108.24000000000001, 'end': 113.28, 'text': ' If you take let us say a cost which is not minimum for a sub tree, is there any likelihood', 'tokens': [50402, 759, 291, 747, 718, 505, 584, 257, 2063, 597, 307, 406, 7285, 337, 257, 1422, 4230, 11, 307, 456, 604, 22119, 50654], 'temperature': 0.0, 'avg_logprob': -0.13681478278581485, 'compression_ratio': 1.5560344827586208, 'no_speech_prob': 0.0015372385969385505}, {'id': 19, 'seek': 10748, 'start': 113.28, 'end': 119.88000000000001, 'text': ' that eventually you will end up with minimum cost? No. So, this satisfies this optimal', 'tokens': [50654, 300, 4728, 291, 486, 917, 493, 365, 7285, 2063, 30, 883, 13, 407, 11, 341, 44271, 341, 16252, 50984], 'temperature': 0.0, 'avg_logprob': -0.13681478278581485, 'compression_ratio': 1.5560344827586208, 'no_speech_prob': 0.0015372385969385505}, {'id': 20, 'seek': 10748, 'start': 119.88000000000001, 'end': 126.04, 'text': ' sub structure property and therefore, we could apply this dynamic programming approach and', 'tokens': [50984, 1422, 3877, 4707, 293, 4412, 11, 321, 727, 3079, 341, 8546, 9410, 3109, 293, 51292], 'temperature': 0.0, 'avg_logprob': -0.13681478278581485, 'compression_ratio': 1.5560344827586208, 'no_speech_prob': 0.0015372385969385505}, {'id': 21, 'seek': 10748, 'start': 126.04, 'end': 137.4, 'text': ' then we can get this. T 1 and T 2 can be executed in any arbitrary order and it may not have', 'tokens': [51292, 550, 321, 393, 483, 341, 13, 314, 502, 293, 314, 568, 393, 312, 17577, 294, 604, 23211, 1668, 293, 309, 815, 406, 362, 51860], 'temperature': 0.0, 'avg_logprob': -0.13681478278581485, 'compression_ratio': 1.5560344827586208, 'no_speech_prob': 0.0015372385969385505}, {'id': 22, 'seek': 13740, 'start': 137.56, 'end': 143.20000000000002, 'text': ' enough registers available. So, some if you do not have enough registers available, some', 'tokens': [50372, 1547, 38351, 2435, 13, 407, 11, 512, 498, 291, 360, 406, 362, 1547, 38351, 2435, 11, 512, 50654], 'temperature': 0.0, 'avg_logprob': -0.17578824928828649, 'compression_ratio': 1.831275720164609, 'no_speech_prob': 0.0013211806071922183}, {'id': 23, 'seek': 13740, 'start': 143.20000000000002, 'end': 147.44, 'text': ' results may be stored temporarily in a memory. That is really how it is. We will see how', 'tokens': [50654, 3542, 815, 312, 12187, 23750, 294, 257, 4675, 13, 663, 307, 534, 577, 309, 307, 13, 492, 486, 536, 577, 50866], 'temperature': 0.0, 'avg_logprob': -0.17578824928828649, 'compression_ratio': 1.831275720164609, 'no_speech_prob': 0.0013211806071922183}, {'id': 24, 'seek': 13740, 'start': 147.44, 'end': 154.8, 'text': ' that is going to be done. So, the way that by which we proceed is as follows. For every', 'tokens': [50866, 300, 307, 516, 281, 312, 1096, 13, 407, 11, 264, 636, 300, 538, 597, 321, 8991, 307, 382, 10002, 13, 1171, 633, 51234], 'temperature': 0.0, 'avg_logprob': -0.17578824928828649, 'compression_ratio': 1.831275720164609, 'no_speech_prob': 0.0013211806071922183}, {'id': 25, 'seek': 13740, 'start': 154.8, 'end': 161.72, 'text': ' node we want to compute the cost of generating code for that node and then we want to let', 'tokens': [51234, 9984, 321, 528, 281, 14722, 264, 2063, 295, 17746, 3089, 337, 300, 9984, 293, 550, 321, 528, 281, 718, 51580], 'temperature': 0.0, 'avg_logprob': -0.17578824928828649, 'compression_ratio': 1.831275720164609, 'no_speech_prob': 0.0013211806071922183}, {'id': 26, 'seek': 13740, 'start': 161.72, 'end': 166.28, 'text': ' us say if you have R register, then what you want to do is that you want to find out what', 'tokens': [51580, 505, 584, 498, 291, 362, 497, 7280, 11, 550, 437, 291, 528, 281, 360, 307, 300, 291, 528, 281, 915, 484, 437, 51808], 'temperature': 0.0, 'avg_logprob': -0.17578824928828649, 'compression_ratio': 1.831275720164609, 'no_speech_prob': 0.0013211806071922183}, {'id': 27, 'seek': 16628, 'start': 166.28, 'end': 173.4, 'text': ' is the cost what is the cost of generating code using one register, two registers, etcetera', 'tokens': [50364, 307, 264, 2063, 437, 307, 264, 2063, 295, 17746, 3089, 1228, 472, 7280, 11, 732, 38351, 11, 22066, 50720], 'temperature': 0.0, 'avg_logprob': -0.1807570400008236, 'compression_ratio': 2.189873417721519, 'no_speech_prob': 0.0014744417276233435}, {'id': 28, 'seek': 16628, 'start': 173.4, 'end': 178.4, 'text': ' all the way up to R register. You also want to find out what is the cost of generating', 'tokens': [50720, 439, 264, 636, 493, 281, 497, 7280, 13, 509, 611, 528, 281, 915, 484, 437, 307, 264, 2063, 295, 17746, 50970], 'temperature': 0.0, 'avg_logprob': -0.1807570400008236, 'compression_ratio': 2.189873417721519, 'no_speech_prob': 0.0014744417276233435}, {'id': 29, 'seek': 16628, 'start': 178.4, 'end': 183.76, 'text': ' code for this and storing this result in memory that also you want to find out.', 'tokens': [50970, 3089, 337, 341, 293, 26085, 341, 1874, 294, 4675, 300, 611, 291, 528, 281, 915, 484, 13, 51238], 'temperature': 0.0, 'avg_logprob': -0.1807570400008236, 'compression_ratio': 2.189873417721519, 'no_speech_prob': 0.0014744417276233435}, {'id': 30, 'seek': 16628, 'start': 183.76, 'end': 189.28, 'text': ' So, the cost of generating code and storing it memory is same as the cost of generating', 'tokens': [51238, 407, 11, 264, 2063, 295, 17746, 3089, 293, 26085, 309, 4675, 307, 912, 382, 264, 2063, 295, 17746, 51514], 'temperature': 0.0, 'avg_logprob': -0.1807570400008236, 'compression_ratio': 2.189873417721519, 'no_speech_prob': 0.0014744417276233435}, {'id': 31, 'seek': 18928, 'start': 189.28, 'end': 196.28, 'text': ' code using R registers plus storing it in memory. That is really how we calculate that', 'tokens': [50364, 3089, 1228, 497, 38351, 1804, 26085, 309, 294, 4675, 13, 663, 307, 534, 577, 321, 8873, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.19474394777987866, 'compression_ratio': 1.794871794871795, 'no_speech_prob': 0.04267491400241852}, {'id': 32, 'seek': 18928, 'start': 196.56, 'end': 203.56, 'text': ' cost. So, essentially at every node we are going to have an array of cost. We will store', 'tokens': [50728, 2063, 13, 407, 11, 4476, 412, 633, 9984, 321, 366, 516, 281, 362, 364, 10225, 295, 2063, 13, 492, 486, 3531, 51078], 'temperature': 0.0, 'avg_logprob': -0.19474394777987866, 'compression_ratio': 1.794871794871795, 'no_speech_prob': 0.04267491400241852}, {'id': 33, 'seek': 18928, 'start': 203.8, 'end': 209.8, 'text': ' in array element 0 the cost of doing it in memory and then 1 to R the cost of doing it', 'tokens': [51090, 294, 10225, 4478, 1958, 264, 2063, 295, 884, 309, 294, 4675, 293, 550, 502, 281, 497, 264, 2063, 295, 884, 309, 51390], 'temperature': 0.0, 'avg_logprob': -0.19474394777987866, 'compression_ratio': 1.794871794871795, 'no_speech_prob': 0.04267491400241852}, {'id': 34, 'seek': 18928, 'start': 209.8, 'end': 216.52, 'text': ' using 1, 2, 3 up to R register. So, it is basically an array of R plus 1 elements. That', 'tokens': [51390, 1228, 502, 11, 568, 11, 805, 493, 281, 497, 7280, 13, 407, 11, 309, 307, 1936, 364, 10225, 295, 497, 1804, 502, 4959, 13, 663, 51726], 'temperature': 0.0, 'avg_logprob': -0.19474394777987866, 'compression_ratio': 1.794871794871795, 'no_speech_prob': 0.04267491400241852}, {'id': 35, 'seek': 21652, 'start': 216.52, 'end': 222.36, 'text': ' is really what we are going to do. So, as I mentioned earlier the cost of computing', 'tokens': [50364, 307, 534, 437, 321, 366, 516, 281, 360, 13, 407, 11, 382, 286, 2835, 3071, 264, 2063, 295, 15866, 50656], 'temperature': 0.0, 'avg_logprob': -0.14586615075870435, 'compression_ratio': 1.748917748917749, 'no_speech_prob': 0.003527544206008315}, {'id': 36, 'seek': 21652, 'start': 222.36, 'end': 228.56, 'text': ' it in memory is basically cost of computing it using at most R registers plus the store', 'tokens': [50656, 309, 294, 4675, 307, 1936, 2063, 295, 15866, 309, 1228, 412, 881, 497, 38351, 1804, 264, 3531, 50966], 'temperature': 0.0, 'avg_logprob': -0.14586615075870435, 'compression_ratio': 1.748917748917749, 'no_speech_prob': 0.003527544206008315}, {'id': 37, 'seek': 21652, 'start': 228.56, 'end': 232.08, 'text': ' cost. Again we are going to follow this contiguous', 'tokens': [50966, 2063, 13, 3764, 321, 366, 516, 281, 1524, 341, 660, 30525, 51142], 'temperature': 0.0, 'avg_logprob': -0.14586615075870435, 'compression_ratio': 1.748917748917749, 'no_speech_prob': 0.003527544206008315}, {'id': 38, 'seek': 21652, 'start': 232.08, 'end': 237.28, 'text': ' evaluation, but there is a small twist here. First what we will do is that we have to evaluate', 'tokens': [51142, 13344, 11, 457, 456, 307, 257, 1359, 8203, 510, 13, 2386, 437, 321, 486, 360, 307, 300, 321, 362, 281, 13059, 51402], 'temperature': 0.0, 'avg_logprob': -0.14586615075870435, 'compression_ratio': 1.748917748917749, 'no_speech_prob': 0.003527544206008315}, {'id': 39, 'seek': 21652, 'start': 237.28, 'end': 242.92000000000002, 'text': ' each sub tree completely before you move on to the other sub tree, but within each sub', 'tokens': [51402, 1184, 1422, 4230, 2584, 949, 291, 1286, 322, 281, 264, 661, 1422, 4230, 11, 457, 1951, 1184, 1422, 51684], 'temperature': 0.0, 'avg_logprob': -0.14586615075870435, 'compression_ratio': 1.748917748917749, 'no_speech_prob': 0.003527544206008315}, {'id': 40, 'seek': 24292, 'start': 243.07999999999998, 'end': 249.23999999999998, 'text': ' tree if some node has to be evaluated using memory, remember the memory cost is cost of', 'tokens': [50372, 4230, 498, 512, 9984, 575, 281, 312, 25509, 1228, 4675, 11, 1604, 264, 4675, 2063, 307, 2063, 295, 50680], 'temperature': 0.0, 'avg_logprob': -0.17674362913091132, 'compression_ratio': 1.9248826291079812, 'no_speech_prob': 0.024952242150902748}, {'id': 41, 'seek': 24292, 'start': 249.23999999999998, 'end': 254.6, 'text': ' computing it using R registers plus the store cost. That means that we must have all the', 'tokens': [50680, 15866, 309, 1228, 497, 38351, 1804, 264, 3531, 2063, 13, 663, 1355, 300, 321, 1633, 362, 439, 264, 50948], 'temperature': 0.0, 'avg_logprob': -0.17674362913091132, 'compression_ratio': 1.9248826291079812, 'no_speech_prob': 0.024952242150902748}, {'id': 42, 'seek': 24292, 'start': 254.6, 'end': 260.4, 'text': ' registers available for that. Therefore, in each sub tree what we will do is that we will', 'tokens': [50948, 38351, 2435, 337, 300, 13, 7504, 11, 294, 1184, 1422, 4230, 437, 321, 486, 360, 307, 300, 321, 486, 51238], 'temperature': 0.0, 'avg_logprob': -0.17674362913091132, 'compression_ratio': 1.9248826291079812, 'no_speech_prob': 0.024952242150902748}, {'id': 43, 'seek': 24292, 'start': 260.4, 'end': 267.12, 'text': ' first compute that particular sub tree which requires it to be computed using memory. That', 'tokens': [51238, 700, 14722, 300, 1729, 1422, 4230, 597, 7029, 309, 281, 312, 40610, 1228, 4675, 13, 663, 51574], 'temperature': 0.0, 'avg_logprob': -0.17674362913091132, 'compression_ratio': 1.9248826291079812, 'no_speech_prob': 0.024952242150902748}, {'id': 44, 'seek': 24292, 'start': 267.12, 'end': 269.88, 'text': ' is when you will have all the R registers available.', 'tokens': [51574, 307, 562, 291, 486, 362, 439, 264, 497, 38351, 2435, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.17674362913091132, 'compression_ratio': 1.9248826291079812, 'no_speech_prob': 0.024952242150902748}, {'id': 45, 'seek': 26988, 'start': 270.15999999999997, 'end': 276.6, 'text': ' So, you first compute evaluate the sub trees of T that need to be evaluated into memory', 'tokens': [50378, 407, 11, 291, 700, 14722, 13059, 264, 1422, 5852, 295, 314, 300, 643, 281, 312, 25509, 666, 4675, 50700], 'temperature': 0.0, 'avg_logprob': -0.17216498511178152, 'compression_ratio': 1.7403846153846154, 'no_speech_prob': 0.014874362386763096}, {'id': 46, 'seek': 26988, 'start': 276.6, 'end': 282.28, 'text': ' using all the R registers and then after the computation you put the value into a temporary', 'tokens': [50700, 1228, 439, 264, 497, 38351, 293, 550, 934, 264, 24903, 291, 829, 264, 2158, 666, 257, 13413, 50984], 'temperature': 0.0, 'avg_logprob': -0.17216498511178152, 'compression_ratio': 1.7403846153846154, 'no_speech_prob': 0.014874362386763096}, {'id': 47, 'seek': 26988, 'start': 282.28, 'end': 289.28, 'text': ' location or into memory. Then you can do the rest of the computation for T 1. Similarly,', 'tokens': [50984, 4914, 420, 666, 4675, 13, 1396, 291, 393, 360, 264, 1472, 295, 264, 24903, 337, 314, 502, 13, 13157, 11, 51334], 'temperature': 0.0, 'avg_logprob': -0.17216498511178152, 'compression_ratio': 1.7403846153846154, 'no_speech_prob': 0.014874362386763096}, {'id': 48, 'seek': 26988, 'start': 289.28, 'end': 295.0, 'text': ' after you have finished this you can now go to T 2 and again within T 2 whichever computation', 'tokens': [51334, 934, 291, 362, 4335, 341, 291, 393, 586, 352, 281, 314, 568, 293, 797, 1951, 314, 568, 24123, 24903, 51620], 'temperature': 0.0, 'avg_logprob': -0.17216498511178152, 'compression_ratio': 1.7403846153846154, 'no_speech_prob': 0.014874362386763096}, {'id': 49, 'seek': 29500, 'start': 295.0, 'end': 300.56, 'text': ' which requires to be done within the memory you finish that then do the rest of T 2.', 'tokens': [50364, 597, 7029, 281, 312, 1096, 1951, 264, 4675, 291, 2413, 300, 550, 360, 264, 1472, 295, 314, 568, 13, 50642], 'temperature': 0.0, 'avg_logprob': -0.13601909775331797, 'compression_ratio': 1.7184466019417475, 'no_speech_prob': 0.004181547090411186}, {'id': 50, 'seek': 29500, 'start': 300.56, 'end': 306.04, 'text': ' Then you go to the operation. So, this is the order in which you are going to do the', 'tokens': [50642, 1396, 291, 352, 281, 264, 6916, 13, 407, 11, 341, 307, 264, 1668, 294, 597, 291, 366, 516, 281, 360, 264, 50916], 'temperature': 0.0, 'avg_logprob': -0.13601909775331797, 'compression_ratio': 1.7184466019417475, 'no_speech_prob': 0.004181547090411186}, {'id': 51, 'seek': 29500, 'start': 306.04, 'end': 312.32, 'text': ' code generation. This is basically required again to ensure that you will be able to generate', 'tokens': [50916, 3089, 5125, 13, 639, 307, 1936, 4739, 797, 281, 5586, 300, 291, 486, 312, 1075, 281, 8460, 51230], 'temperature': 0.0, 'avg_logprob': -0.13601909775331797, 'compression_ratio': 1.7184466019417475, 'no_speech_prob': 0.004181547090411186}, {'id': 52, 'seek': 29500, 'start': 312.32, 'end': 318.48, 'text': ' code with the minimum cost. This particular method generates code since it has to traverse', 'tokens': [51230, 3089, 365, 264, 7285, 2063, 13, 639, 1729, 3170, 23815, 3089, 1670, 309, 575, 281, 45674, 51538], 'temperature': 0.0, 'avg_logprob': -0.13601909775331797, 'compression_ratio': 1.7184466019417475, 'no_speech_prob': 0.004181547090411186}, {'id': 53, 'seek': 31848, 'start': 318.52000000000004, 'end': 326.52000000000004, 'text': ' each node exactly once. It has a cost which is proportional to the number of nodes in', 'tokens': [50366, 1184, 9984, 2293, 1564, 13, 467, 575, 257, 2063, 597, 307, 24969, 281, 264, 1230, 295, 13891, 294, 50766], 'temperature': 0.0, 'avg_logprob': -0.29832822305184825, 'compression_ratio': 1.595890410958904, 'no_speech_prob': 0.12891118228435516}, {'id': 54, 'seek': 31848, 'start': 326.52000000000004, 'end': 333.0, 'text': ' the tree. How many of you know about dynamic programming approach? What is the simplest', 'tokens': [50766, 264, 4230, 13, 1012, 867, 295, 291, 458, 466, 8546, 9410, 3109, 30, 708, 307, 264, 22811, 51090], 'temperature': 0.0, 'avg_logprob': -0.29832822305184825, 'compression_ratio': 1.595890410958904, 'no_speech_prob': 0.12891118228435516}, {'id': 55, 'seek': 31848, 'start': 333.0, 'end': 337.64000000000004, 'text': ' example for dynamic programming approach? Simplest example?', 'tokens': [51090, 1365, 337, 8546, 9410, 3109, 30, 3998, 564, 377, 1365, 30, 51322], 'temperature': 0.0, 'avg_logprob': -0.29832822305184825, 'compression_ratio': 1.595890410958904, 'no_speech_prob': 0.12891118228435516}, {'id': 56, 'seek': 33764, 'start': 337.64, 'end': 344.64, 'text': " Dijkstra's algorithm. Fibonacci. Fibonacci is the simplest recursive evaluation of Fibonacci.", 'tokens': [50364, 413, 6940, 19639, 311, 9284, 13, 479, 897, 266, 43870, 13, 479, 897, 266, 43870, 307, 264, 22811, 20560, 488, 13344, 295, 479, 897, 266, 43870, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.29896388641775473, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.040597863495349884}, {'id': 57, 'seek': 33764, 'start': 350.44, 'end': 356.03999999999996, 'text': ' It is a simplest example and what do you do in that thing? Essential idea of dynamic programming', 'tokens': [51004, 467, 307, 257, 22811, 1365, 293, 437, 360, 291, 360, 294, 300, 551, 30, 49736, 1558, 295, 8546, 9410, 51284], 'temperature': 0.0, 'avg_logprob': -0.29896388641775473, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.040597863495349884}, {'id': 58, 'seek': 33764, 'start': 356.03999999999996, 'end': 363.03999999999996, 'text': ' is that you memorize the Fibonacci values of the previous two numbers. Therefore, it', 'tokens': [51284, 307, 300, 291, 27478, 264, 479, 897, 266, 43870, 4190, 295, 264, 3894, 732, 3547, 13, 7504, 11, 309, 51634], 'temperature': 0.0, 'avg_logprob': -0.29896388641775473, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.040597863495349884}, {'id': 59, 'seek': 36304, 'start': 364.04, 'end': 371.04, 'text': ' needs to be computed exactly once for each number. That is why it has a computation cost', 'tokens': [50414, 2203, 281, 312, 40610, 2293, 1564, 337, 1184, 1230, 13, 663, 307, 983, 309, 575, 257, 24903, 2063, 50764], 'temperature': 0.0, 'avg_logprob': -0.2711904699152166, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.00680442014709115}, {'id': 60, 'seek': 36304, 'start': 372.0, 'end': 379.0, 'text': ' which is... Now, let us see how we are going to do this dynamic. Again the dynamic programming', 'tokens': [50812, 597, 307, 485, 823, 11, 718, 505, 536, 577, 321, 366, 516, 281, 360, 341, 8546, 13, 3764, 264, 8546, 9410, 51162], 'temperature': 0.0, 'avg_logprob': -0.2711904699152166, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.00680442014709115}, {'id': 61, 'seek': 36304, 'start': 379.24, 'end': 383.56, 'text': ' approach is going to exactly follow the same thing. If I want to calculate the cost of', 'tokens': [51174, 3109, 307, 516, 281, 2293, 1524, 264, 912, 551, 13, 759, 286, 528, 281, 8873, 264, 2063, 295, 51390], 'temperature': 0.0, 'avg_logprob': -0.2711904699152166, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.00680442014709115}, {'id': 62, 'seek': 36304, 'start': 383.56, 'end': 390.56, 'text': ' this subtree that is going to in turn going to go into the cost of two subtrees there.', 'tokens': [51390, 341, 7257, 701, 300, 307, 516, 281, 294, 1261, 516, 281, 352, 666, 264, 2063, 295, 732, 7257, 4856, 456, 13, 51740], 'temperature': 0.0, 'avg_logprob': -0.2711904699152166, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.00680442014709115}, {'id': 63, 'seek': 39056, 'start': 390.76, 'end': 395.24, 'text': ' Then that in turn is going to require cost of computing subtree there and so on and so', 'tokens': [50374, 1396, 300, 294, 1261, 307, 516, 281, 3651, 2063, 295, 15866, 7257, 701, 456, 293, 370, 322, 293, 370, 50598], 'temperature': 0.0, 'avg_logprob': -0.19878456029999123, 'compression_ratio': 1.6543778801843319, 'no_speech_prob': 0.0029038062784820795}, {'id': 64, 'seek': 39056, 'start': 395.24, 'end': 402.24, 'text': ' forth. At each point in time I actually store the cost of right the minimum cost for generating', 'tokens': [50598, 5220, 13, 1711, 1184, 935, 294, 565, 286, 767, 3531, 264, 2063, 295, 558, 264, 7285, 2063, 337, 17746, 50948], 'temperature': 0.0, 'avg_logprob': -0.19878456029999123, 'compression_ratio': 1.6543778801843319, 'no_speech_prob': 0.0029038062784820795}, {'id': 65, 'seek': 39056, 'start': 402.32, 'end': 409.32, 'text': ' code for that subtree using 1, 2, 3 up to R registers as well as using memory. Then', 'tokens': [50952, 3089, 337, 300, 7257, 701, 1228, 502, 11, 568, 11, 805, 493, 281, 497, 38351, 382, 731, 382, 1228, 4675, 13, 1396, 51302], 'temperature': 0.0, 'avg_logprob': -0.19878456029999123, 'compression_ratio': 1.6543778801843319, 'no_speech_prob': 0.0029038062784820795}, {'id': 66, 'seek': 39056, 'start': 409.44, 'end': 415.6, 'text': ' I keep using this upward. That is how we memorize these values and then keep using it upward', 'tokens': [51308, 286, 1066, 1228, 341, 23452, 13, 663, 307, 577, 321, 27478, 613, 4190, 293, 550, 1066, 1228, 309, 23452, 51616], 'temperature': 0.0, 'avg_logprob': -0.19878456029999123, 'compression_ratio': 1.6543778801843319, 'no_speech_prob': 0.0029038062784820795}, {'id': 67, 'seek': 41560, 'start': 415.68, 'end': 421.04, 'text': ' so that it traverses the tree exactly once to get the cost.', 'tokens': [50368, 370, 300, 309, 23149, 279, 264, 4230, 2293, 1564, 281, 483, 264, 2063, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.17296763828822545, 'compression_ratio': 1.5837320574162679, 'no_speech_prob': 0.00511538702994585}, {'id': 68, 'seek': 41560, 'start': 421.04, 'end': 426.0, 'text': ' Now let us see how that works. Essentially you are going to compute the cost bottom up', 'tokens': [50636, 823, 718, 505, 536, 577, 300, 1985, 13, 23596, 291, 366, 516, 281, 14722, 264, 2063, 2767, 493, 50884], 'temperature': 0.0, 'avg_logprob': -0.17296763828822545, 'compression_ratio': 1.5837320574162679, 'no_speech_prob': 0.00511538702994585}, {'id': 69, 'seek': 41560, 'start': 426.0, 'end': 433.0, 'text': ' manner starting from the leaf nodes. Let us assume that this is an array of n to R plus', 'tokens': [50884, 9060, 2891, 490, 264, 10871, 13891, 13, 961, 505, 6552, 300, 341, 307, 364, 10225, 295, 297, 281, 497, 1804, 51234], 'temperature': 0.0, 'avg_logprob': -0.17296763828822545, 'compression_ratio': 1.5837320574162679, 'no_speech_prob': 0.00511538702994585}, {'id': 70, 'seek': 41560, 'start': 433.20000000000005, 'end': 440.20000000000005, 'text': ' 1. It should have been R plus 1 because there is also 0 for each node where you have R registers', 'tokens': [51244, 502, 13, 467, 820, 362, 668, 497, 1804, 502, 570, 456, 307, 611, 1958, 337, 1184, 9984, 689, 291, 362, 497, 38351, 51594], 'temperature': 0.0, 'avg_logprob': -0.17296763828822545, 'compression_ratio': 1.5837320574162679, 'no_speech_prob': 0.00511538702994585}, {'id': 71, 'seek': 44020, 'start': 440.76, 'end': 447.76, 'text': ' and C n of i is the minimum cost of computing the complete subtree which is routed at node', 'tokens': [50392, 293, 383, 297, 295, 741, 307, 264, 7285, 2063, 295, 15866, 264, 3566, 7257, 701, 597, 307, 4020, 292, 412, 9984, 50742], 'temperature': 0.0, 'avg_logprob': -0.19564899178438408, 'compression_ratio': 1.8711340206185567, 'no_speech_prob': 0.002832867670804262}, {'id': 72, 'seek': 44020, 'start': 448.71999999999997, 'end': 455.71999999999997, 'text': ' n using i registers. When you do this thing you also have to find out once you have found', 'tokens': [50790, 297, 1228, 741, 38351, 13, 1133, 291, 360, 341, 551, 291, 611, 362, 281, 915, 484, 1564, 291, 362, 1352, 51140], 'temperature': 0.0, 'avg_logprob': -0.19564899178438408, 'compression_ratio': 1.8711340206185567, 'no_speech_prob': 0.002832867670804262}, {'id': 73, 'seek': 44020, 'start': 456.84, 'end': 462.24, 'text': ' out which has the minimum cost you also remember what kind of gives you that minimum cost what', 'tokens': [51196, 484, 597, 575, 264, 7285, 2063, 291, 611, 1604, 437, 733, 295, 2709, 291, 300, 7285, 2063, 437, 51466], 'temperature': 0.0, 'avg_logprob': -0.19564899178438408, 'compression_ratio': 1.8711340206185567, 'no_speech_prob': 0.002832867670804262}, {'id': 74, 'seek': 44020, 'start': 462.24, 'end': 466.71999999999997, 'text': ' combination gave you that minimum cost. So that when you generate code you can use that', 'tokens': [51466, 6562, 2729, 291, 300, 7285, 2063, 13, 407, 300, 562, 291, 8460, 3089, 291, 393, 764, 300, 51690], 'temperature': 0.0, 'avg_logprob': -0.19564899178438408, 'compression_ratio': 1.8711340206185567, 'no_speech_prob': 0.002832867670804262}, {'id': 75, 'seek': 46672, 'start': 466.72, 'end': 473.72, 'text': ' combination to generate that code. When I give you an example this will become clear.', 'tokens': [50364, 6562, 281, 8460, 300, 3089, 13, 1133, 286, 976, 291, 364, 1365, 341, 486, 1813, 1850, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.12206166645265976, 'compression_ratio': 1.891304347826087, 'no_speech_prob': 0.0017768165562301874}, {'id': 76, 'seek': 46672, 'start': 473.72, 'end': 478.40000000000003, 'text': ' Now using this cost array you determine the subtree that must be computed into memory.', 'tokens': [50714, 823, 1228, 341, 2063, 10225, 291, 6997, 264, 7257, 701, 300, 1633, 312, 40610, 666, 4675, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.12206166645265976, 'compression_ratio': 1.891304347826087, 'no_speech_prob': 0.0017768165562301874}, {'id': 77, 'seek': 46672, 'start': 478.40000000000003, 'end': 483.8, 'text': ' If any subtree requires to be computed into memory then that subtree has to be then the', 'tokens': [50948, 759, 604, 7257, 701, 7029, 281, 312, 40610, 666, 4675, 550, 300, 7257, 701, 575, 281, 312, 550, 264, 51218], 'temperature': 0.0, 'avg_logprob': -0.12206166645265976, 'compression_ratio': 1.891304347826087, 'no_speech_prob': 0.0017768165562301874}, {'id': 78, 'seek': 46672, 'start': 483.8, 'end': 490.32000000000005, 'text': ' code for that subtree has to be generated first. Then of course the rest of the subtree', 'tokens': [51218, 3089, 337, 300, 7257, 701, 575, 281, 312, 10833, 700, 13, 1396, 295, 1164, 264, 1472, 295, 264, 7257, 701, 51544], 'temperature': 0.0, 'avg_logprob': -0.12206166645265976, 'compression_ratio': 1.891304347826087, 'no_speech_prob': 0.0017768165562301874}, {'id': 79, 'seek': 46672, 'start': 490.32000000000005, 'end': 495.20000000000005, 'text': ' that is the order in which you are going to do. Let us see again we will take the same', 'tokens': [51544, 300, 307, 264, 1668, 294, 597, 291, 366, 516, 281, 360, 13, 961, 505, 536, 797, 321, 486, 747, 264, 912, 51788], 'temperature': 0.0, 'avg_logprob': -0.12206166645265976, 'compression_ratio': 1.891304347826087, 'no_speech_prob': 0.0017768165562301874}, {'id': 80, 'seek': 49520, 'start': 495.2, 'end': 500.96, 'text': ' example and then start computing the cost for each of the nodes. Again computing the', 'tokens': [50364, 1365, 293, 550, 722, 15866, 264, 2063, 337, 1184, 295, 264, 13891, 13, 3764, 15866, 264, 50652], 'temperature': 0.0, 'avg_logprob': -0.19572968318544584, 'compression_ratio': 1.7563451776649746, 'no_speech_prob': 0.006456856150180101}, {'id': 81, 'seek': 49520, 'start': 500.96, 'end': 507.96, 'text': ' cost is going bottom up. Remember in the Shetty-Wulman algorithm when you are doing labeling, labeling', 'tokens': [50652, 2063, 307, 516, 2767, 493, 13, 5459, 294, 264, 1160, 38204, 12, 54, 425, 1601, 9284, 562, 291, 366, 884, 40244, 11, 40244, 51002], 'temperature': 0.0, 'avg_logprob': -0.19572968318544584, 'compression_ratio': 1.7563451776649746, 'no_speech_prob': 0.006456856150180101}, {'id': 82, 'seek': 49520, 'start': 507.96, 'end': 513.08, 'text': ' was bottom up. That is exactly the same thing that you are going to do.', 'tokens': [51002, 390, 2767, 493, 13, 663, 307, 2293, 264, 912, 551, 300, 291, 366, 516, 281, 360, 13, 51258], 'temperature': 0.0, 'avg_logprob': -0.19572968318544584, 'compression_ratio': 1.7563451776649746, 'no_speech_prob': 0.006456856150180101}, {'id': 83, 'seek': 49520, 'start': 513.08, 'end': 519.66, 'text': ' And now let us look at the cost for each one of these leaf nodes to start with. If you', 'tokens': [51258, 400, 586, 718, 505, 574, 412, 264, 2063, 337, 1184, 472, 295, 613, 10871, 13891, 281, 722, 365, 13, 759, 291, 51587], 'temperature': 0.0, 'avg_logprob': -0.19572968318544584, 'compression_ratio': 1.7563451776649746, 'no_speech_prob': 0.006456856150180101}, {'id': 84, 'seek': 51966, 'start': 519.66, 'end': 528.5, 'text': ' know that each leaf node is going to be either a variable which is in memory or a constant.', 'tokens': [50364, 458, 300, 1184, 10871, 9984, 307, 516, 281, 312, 2139, 257, 7006, 597, 307, 294, 4675, 420, 257, 5754, 13, 50806], 'temperature': 0.0, 'avg_logprob': -0.14410293102264404, 'compression_ratio': 1.9135135135135135, 'no_speech_prob': 0.013552442193031311}, {'id': 85, 'seek': 51966, 'start': 528.5, 'end': 533.8, 'text': ' If it is a variable which is in memory then computing it with using memory is actually', 'tokens': [50806, 759, 309, 307, 257, 7006, 597, 307, 294, 4675, 550, 15866, 309, 365, 1228, 4675, 307, 767, 51071], 'temperature': 0.0, 'avg_logprob': -0.14410293102264404, 'compression_ratio': 1.9135135135135135, 'no_speech_prob': 0.013552442193031311}, {'id': 86, 'seek': 51966, 'start': 533.8, 'end': 538.66, 'text': ' no cost because it is already in the memory. If it is a constant it is a constant we can', 'tokens': [51071, 572, 2063, 570, 309, 307, 1217, 294, 264, 4675, 13, 759, 309, 307, 257, 5754, 309, 307, 257, 5754, 321, 393, 51314], 'temperature': 0.0, 'avg_logprob': -0.14410293102264404, 'compression_ratio': 1.9135135135135135, 'no_speech_prob': 0.013552442193031311}, {'id': 87, 'seek': 51966, 'start': 538.66, 'end': 544.6999999999999, 'text': ' actually use it directly in our this one as long as it is a small constant. Now let us', 'tokens': [51314, 767, 764, 309, 3838, 294, 527, 341, 472, 382, 938, 382, 309, 307, 257, 1359, 5754, 13, 823, 718, 505, 51616], 'temperature': 0.0, 'avg_logprob': -0.14410293102264404, 'compression_ratio': 1.9135135135135135, 'no_speech_prob': 0.013552442193031311}, {'id': 88, 'seek': 54470, 'start': 544.7, 'end': 553.5400000000001, 'text': ' look at this. So, this node a is basically a variable to compute this using memory it', 'tokens': [50364, 574, 412, 341, 13, 407, 11, 341, 9984, 257, 307, 1936, 257, 7006, 281, 14722, 341, 1228, 4675, 309, 50806], 'temperature': 0.0, 'avg_logprob': -0.217525675055686, 'compression_ratio': 1.7574257425742574, 'no_speech_prob': 0.0395657904446125}, {'id': 89, 'seek': 54470, 'start': 553.5400000000001, 'end': 560.0200000000001, 'text': ' requires no cost. But to compute it using one register you need a move instruction.', 'tokens': [50806, 7029, 572, 2063, 13, 583, 281, 14722, 309, 1228, 472, 7280, 291, 643, 257, 1286, 10951, 13, 51130], 'temperature': 0.0, 'avg_logprob': -0.217525675055686, 'compression_ratio': 1.7574257425742574, 'no_speech_prob': 0.0395657904446125}, {'id': 90, 'seek': 54470, 'start': 560.0200000000001, 'end': 568.3000000000001, 'text': ' Therefore, that requires a cost of one. Computing it using two registers is same as one register', 'tokens': [51130, 7504, 11, 300, 7029, 257, 2063, 295, 472, 13, 37804, 278, 309, 1228, 732, 38351, 307, 912, 382, 472, 7280, 51544], 'temperature': 0.0, 'avg_logprob': -0.217525675055686, 'compression_ratio': 1.7574257425742574, 'no_speech_prob': 0.0395657904446125}, {'id': 91, 'seek': 54470, 'start': 568.3000000000001, 'end': 573.7, 'text': ' because you do not need the second register. So, you can just not use it at all. So, the', 'tokens': [51544, 570, 291, 360, 406, 643, 264, 1150, 7280, 13, 407, 11, 291, 393, 445, 406, 764, 309, 412, 439, 13, 407, 11, 264, 51814], 'temperature': 0.0, 'avg_logprob': -0.217525675055686, 'compression_ratio': 1.7574257425742574, 'no_speech_prob': 0.0395657904446125}, {'id': 92, 'seek': 57370, 'start': 573.7, 'end': 580.7800000000001, 'text': ' cost of computing any node right any leaf node which is actually in memory is basically', 'tokens': [50364, 2063, 295, 15866, 604, 9984, 558, 604, 10871, 9984, 597, 307, 767, 294, 4675, 307, 1936, 50718], 'temperature': 0.0, 'avg_logprob': -0.21109327402981845, 'compression_ratio': 1.6682242990654206, 'no_speech_prob': 0.007893440313637257}, {'id': 93, 'seek': 57370, 'start': 580.7800000000001, 'end': 587.7800000000001, 'text': ' 0 for memory and for on for the first register and any other register also it will be 1.', 'tokens': [50718, 1958, 337, 4675, 293, 337, 322, 337, 264, 700, 7280, 293, 604, 661, 7280, 611, 309, 486, 312, 502, 13, 51068], 'temperature': 0.0, 'avg_logprob': -0.21109327402981845, 'compression_ratio': 1.6682242990654206, 'no_speech_prob': 0.007893440313637257}, {'id': 94, 'seek': 57370, 'start': 587.7800000000001, 'end': 592.5, 'text': ' So, here we are going to do this example again using two registers. That is why you have', 'tokens': [51068, 407, 11, 510, 321, 366, 516, 281, 360, 341, 1365, 797, 1228, 732, 38351, 13, 663, 307, 983, 291, 362, 51304], 'temperature': 0.0, 'avg_logprob': -0.21109327402981845, 'compression_ratio': 1.6682242990654206, 'no_speech_prob': 0.007893440313637257}, {'id': 95, 'seek': 57370, 'start': 592.5, 'end': 601.7, 'text': ' three elements for each node. So, that explains this 0 1 1 cost for all the leaf nodes. Now', 'tokens': [51304, 1045, 4959, 337, 1184, 9984, 13, 407, 11, 300, 13948, 341, 1958, 502, 502, 2063, 337, 439, 264, 10871, 13891, 13, 823, 51764], 'temperature': 0.0, 'avg_logprob': -0.21109327402981845, 'compression_ratio': 1.6682242990654206, 'no_speech_prob': 0.007893440313637257}, {'id': 96, 'seek': 60170, 'start': 601.7, 'end': 609.86, 'text': ' let us see how do we compute the cost for t 1. Now the cost for computing or generating', 'tokens': [50364, 718, 505, 536, 577, 360, 321, 14722, 264, 2063, 337, 256, 502, 13, 823, 264, 2063, 337, 15866, 420, 17746, 50772], 'temperature': 0.0, 'avg_logprob': -0.15360696925673373, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0032225779723376036}, {'id': 97, 'seek': 60170, 'start': 609.86, 'end': 615.98, 'text': ' code for t 1 using one register we will do that first. Now if you want to compute the', 'tokens': [50772, 3089, 337, 256, 502, 1228, 472, 7280, 321, 486, 360, 300, 700, 13, 823, 498, 291, 528, 281, 14722, 264, 51078], 'temperature': 0.0, 'avg_logprob': -0.15360696925673373, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0032225779723376036}, {'id': 98, 'seek': 60170, 'start': 615.98, 'end': 623.74, 'text': ' code using one register one possibility is that you can give one register for t 1 and', 'tokens': [51078, 3089, 1228, 472, 7280, 472, 7959, 307, 300, 291, 393, 976, 472, 7280, 337, 256, 502, 293, 51466], 'temperature': 0.0, 'avg_logprob': -0.15360696925673373, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0032225779723376036}, {'id': 99, 'seek': 60170, 'start': 623.74, 'end': 630.7800000000001, 'text': ' no register for b. Remember that the right operand can be memory left operand has to', 'tokens': [51466, 572, 7280, 337, 272, 13, 5459, 300, 264, 558, 2208, 474, 393, 312, 4675, 1411, 2208, 474, 575, 281, 51818], 'temperature': 0.0, 'avg_logprob': -0.15360696925673373, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0032225779723376036}, {'id': 100, 'seek': 63078, 'start': 630.78, 'end': 641.02, 'text': ' be a register. That means that using one register the cost of computing a is 1. Using 0 registers', 'tokens': [50364, 312, 257, 7280, 13, 663, 1355, 300, 1228, 472, 7280, 264, 2063, 295, 15866, 257, 307, 502, 13, 11142, 1958, 38351, 50876], 'temperature': 0.0, 'avg_logprob': -0.24000600558608326, 'compression_ratio': 1.7581699346405228, 'no_speech_prob': 0.017088619992136955}, {'id': 101, 'seek': 63078, 'start': 641.02, 'end': 646.78, 'text': ' or using memory which is already there in the memory the cost of computing this is 0', 'tokens': [50876, 420, 1228, 4675, 597, 307, 1217, 456, 294, 264, 4675, 264, 2063, 295, 15866, 341, 307, 1958, 51164], 'temperature': 0.0, 'avg_logprob': -0.24000600558608326, 'compression_ratio': 1.7581699346405228, 'no_speech_prob': 0.017088619992136955}, {'id': 102, 'seek': 63078, 'start': 646.78, 'end': 655.8199999999999, 'text': ' right. Therefore, the cost of computing t 1 is basically 1 plus 0 plus 1. One for this', 'tokens': [51164, 558, 13, 7504, 11, 264, 2063, 295, 15866, 256, 502, 307, 1936, 502, 1804, 1958, 1804, 502, 13, 1485, 337, 341, 51616], 'temperature': 0.0, 'avg_logprob': -0.24000600558608326, 'compression_ratio': 1.7581699346405228, 'no_speech_prob': 0.017088619992136955}, {'id': 103, 'seek': 65582, 'start': 656.6600000000001, 'end': 663.7800000000001, 'text': ' a into memory sorry loading a into register another for b which is already I mean sorry', 'tokens': [50406, 257, 666, 4675, 2597, 15114, 257, 666, 7280, 1071, 337, 272, 597, 307, 1217, 286, 914, 2597, 50762], 'temperature': 0.0, 'avg_logprob': -0.2272770514855018, 'compression_ratio': 1.654320987654321, 'no_speech_prob': 0.13315322995185852}, {'id': 104, 'seek': 65582, 'start': 663.7800000000001, 'end': 669.9000000000001, 'text': ' nothing for b because b is already in memory and one for doing the add operation for t', 'tokens': [50762, 1825, 337, 272, 570, 272, 307, 1217, 294, 4675, 293, 472, 337, 884, 264, 909, 6916, 337, 256, 51068], 'temperature': 0.0, 'avg_logprob': -0.2272770514855018, 'compression_ratio': 1.654320987654321, 'no_speech_prob': 0.13315322995185852}, {'id': 105, 'seek': 65582, 'start': 669.9000000000001, 'end': 679.74, 'text': ' 1. So, that is the cost of evaluating or generating code for t 1 using one register for a and', 'tokens': [51068, 502, 13, 407, 11, 300, 307, 264, 2063, 295, 27479, 420, 17746, 3089, 337, 256, 502, 1228, 472, 7280, 337, 257, 293, 51560], 'temperature': 0.0, 'avg_logprob': -0.2272770514855018, 'compression_ratio': 1.654320987654321, 'no_speech_prob': 0.13315322995185852}, {'id': 106, 'seek': 67974, 'start': 680.22, 'end': 688.9, 'text': ' 0 registers for b. How about using one register for b and 0 register for a not possible because', 'tokens': [50388, 1958, 38351, 337, 272, 13, 1012, 466, 1228, 472, 7280, 337, 272, 293, 1958, 7280, 337, 257, 406, 1944, 570, 50822], 'temperature': 0.0, 'avg_logprob': -0.2672069606496327, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.2977760434150696}, {'id': 107, 'seek': 67974, 'start': 688.9, 'end': 701.9, 'text': ' the left operand has to be in register right. Are there any other possibilities?', 'tokens': [50822, 264, 1411, 2208, 474, 575, 281, 312, 294, 7280, 558, 13, 2014, 456, 604, 661, 12178, 30, 51472], 'temperature': 0.0, 'avg_logprob': -0.2672069606496327, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.2977760434150696}, {'id': 108, 'seek': 67974, 'start': 701.9, 'end': 709.1, 'text': ' a and b 1 a and t 1 you can use the same register remember this is the cost of generating code', 'tokens': [51472, 257, 293, 272, 502, 257, 293, 256, 502, 291, 393, 764, 264, 912, 7280, 1604, 341, 307, 264, 2063, 295, 17746, 3089, 51832], 'temperature': 0.0, 'avg_logprob': -0.2672069606496327, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.2977760434150696}, {'id': 109, 'seek': 70910, 'start': 709.1, 'end': 715.78, 'text': ' not the number of registers correct. So, cost of generating code with one register even', 'tokens': [50364, 406, 264, 1230, 295, 38351, 3006, 13, 407, 11, 2063, 295, 17746, 3089, 365, 472, 7280, 754, 50698], 'temperature': 0.0, 'avg_logprob': -0.17432875485764338, 'compression_ratio': 2.1490384615384617, 'no_speech_prob': 0.003618053160607815}, {'id': 110, 'seek': 70910, 'start': 715.78, 'end': 720.78, 'text': ' this is with one register not with two registers right. I am basically including the number', 'tokens': [50698, 341, 307, 365, 472, 7280, 406, 365, 732, 38351, 558, 13, 286, 669, 1936, 3009, 264, 1230, 50948], 'temperature': 0.0, 'avg_logprob': -0.17432875485764338, 'compression_ratio': 2.1490384615384617, 'no_speech_prob': 0.003618053160607815}, {'id': 111, 'seek': 70910, 'start': 720.78, 'end': 725.78, 'text': ' of instructions cost is here is the number of instruction not the number of registers', 'tokens': [50948, 295, 9415, 2063, 307, 510, 307, 264, 1230, 295, 10951, 406, 264, 1230, 295, 38351, 51198], 'temperature': 0.0, 'avg_logprob': -0.17432875485764338, 'compression_ratio': 2.1490384615384617, 'no_speech_prob': 0.003618053160607815}, {'id': 112, 'seek': 70910, 'start': 725.78, 'end': 733.4200000000001, 'text': ' ok correct. And we have to consider all possible instructions and operand modes or operands', 'tokens': [51198, 3133, 3006, 13, 400, 321, 362, 281, 1949, 439, 1944, 9415, 293, 2208, 474, 14068, 420, 2208, 2967, 51580], 'temperature': 0.0, 'avg_logprob': -0.17432875485764338, 'compression_ratio': 2.1490384615384617, 'no_speech_prob': 0.003618053160607815}, {'id': 113, 'seek': 70910, 'start': 733.4200000000001, 'end': 738.38, 'text': ' for this that is why we consider register operand for this memory operand for this memory', 'tokens': [51580, 337, 341, 300, 307, 983, 321, 1949, 7280, 2208, 474, 337, 341, 4675, 2208, 474, 337, 341, 4675, 51828], 'temperature': 0.0, 'avg_logprob': -0.17432875485764338, 'compression_ratio': 2.1490384615384617, 'no_speech_prob': 0.003618053160607815}, {'id': 114, 'seek': 73838, 'start': 738.74, 'end': 745.22, 'text': ' operand for this register operand for b is not possible ok right. So, this is the cost', 'tokens': [50382, 2208, 474, 337, 341, 7280, 2208, 474, 337, 272, 307, 406, 1944, 3133, 558, 13, 407, 11, 341, 307, 264, 2063, 50706], 'temperature': 0.0, 'avg_logprob': -0.20179698231456045, 'compression_ratio': 1.8112244897959184, 'no_speech_prob': 0.0008402401581406593}, {'id': 115, 'seek': 73838, 'start': 745.22, 'end': 752.14, 'text': ' of computing this element remember this sub tree and this sub tree are the same ok. So,', 'tokens': [50706, 295, 15866, 341, 4478, 1604, 341, 1422, 4230, 293, 341, 1422, 4230, 366, 264, 912, 3133, 13, 407, 11, 51052], 'temperature': 0.0, 'avg_logprob': -0.20179698231456045, 'compression_ratio': 1.8112244897959184, 'no_speech_prob': 0.0008402401581406593}, {'id': 116, 'seek': 73838, 'start': 752.14, 'end': 757.78, 'text': ' whenever you fill the cost for t 1 you can also fill the cost for t 2 appropriately ok.', 'tokens': [51052, 5699, 291, 2836, 264, 2063, 337, 256, 502, 291, 393, 611, 2836, 264, 2063, 337, 256, 568, 23505, 3133, 13, 51334], 'temperature': 0.0, 'avg_logprob': -0.20179698231456045, 'compression_ratio': 1.8112244897959184, 'no_speech_prob': 0.0008402401581406593}, {'id': 117, 'seek': 73838, 'start': 757.78, 'end': 764.78, 'text': ' Now, let us find out what is the cost of doing t 1 using two registers now there are several', 'tokens': [51334, 823, 11, 718, 505, 915, 484, 437, 307, 264, 2063, 295, 884, 256, 502, 1228, 732, 38351, 586, 456, 366, 2940, 51684], 'temperature': 0.0, 'avg_logprob': -0.20179698231456045, 'compression_ratio': 1.8112244897959184, 'no_speech_prob': 0.0008402401581406593}, {'id': 118, 'seek': 76478, 'start': 764.86, 'end': 771.54, 'text': ' possibilities you can compute a in one register and b in one register. And when you do that', 'tokens': [50368, 12178, 291, 393, 14722, 257, 294, 472, 7280, 293, 272, 294, 472, 7280, 13, 400, 562, 291, 360, 300, 50702], 'temperature': 0.0, 'avg_logprob': -0.15658278637621775, 'compression_ratio': 2.254777070063694, 'no_speech_prob': 0.0059769912622869015}, {'id': 119, 'seek': 76478, 'start': 771.54, 'end': 776.4599999999999, 'text': ' the cost of computing a in one register is one cost of computing b in one register is', 'tokens': [50702, 264, 2063, 295, 15866, 257, 294, 472, 7280, 307, 472, 2063, 295, 15866, 272, 294, 472, 7280, 307, 50948], 'temperature': 0.0, 'avg_logprob': -0.15658278637621775, 'compression_ratio': 2.254777070063694, 'no_speech_prob': 0.0059769912622869015}, {'id': 120, 'seek': 76478, 'start': 776.4599999999999, 'end': 783.5799999999999, 'text': ' one and the cost of computing t 1 is one more. So, there is one move instruction for this', 'tokens': [50948, 472, 293, 264, 2063, 295, 15866, 256, 502, 307, 472, 544, 13, 407, 11, 456, 307, 472, 1286, 10951, 337, 341, 51304], 'temperature': 0.0, 'avg_logprob': -0.15658278637621775, 'compression_ratio': 2.254777070063694, 'no_speech_prob': 0.0059769912622869015}, {'id': 121, 'seek': 76478, 'start': 783.5799999999999, 'end': 790.4599999999999, 'text': ' one move instruction for this and possibly an add instruction for this right that cost', 'tokens': [51304, 472, 1286, 10951, 337, 341, 293, 6264, 364, 909, 10951, 337, 341, 558, 300, 2063, 51648], 'temperature': 0.0, 'avg_logprob': -0.15658278637621775, 'compression_ratio': 2.254777070063694, 'no_speech_prob': 0.0059769912622869015}, {'id': 122, 'seek': 79046, 'start': 790.46, 'end': 797.46, 'text': ' is three. Now, if I am given three registers I can give both registers to a and no register', 'tokens': [50364, 307, 1045, 13, 823, 11, 498, 286, 669, 2212, 1045, 38351, 286, 393, 976, 1293, 38351, 281, 257, 293, 572, 7280, 50714], 'temperature': 0.0, 'avg_logprob': -0.17965526580810548, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.03056410886347294}, {'id': 123, 'seek': 79046, 'start': 798.5, 'end': 805.5, 'text': ' to b does not sound like a good idea, but let us see what is the cost of this right', 'tokens': [50766, 281, 272, 775, 406, 1626, 411, 257, 665, 1558, 11, 457, 718, 505, 536, 437, 307, 264, 2063, 295, 341, 558, 51116], 'temperature': 0.0, 'avg_logprob': -0.17965526580810548, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.03056410886347294}, {'id': 124, 'seek': 79046, 'start': 806.1, 'end': 813.1, 'text': ' in this case since b is the right operand ok it can be given zero registers and it can', 'tokens': [51146, 294, 341, 1389, 1670, 272, 307, 264, 558, 2208, 474, 3133, 309, 393, 312, 2212, 4018, 38351, 293, 309, 393, 51496], 'temperature': 0.0, 'avg_logprob': -0.17965526580810548, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.03056410886347294}, {'id': 125, 'seek': 81310, 'start': 813.5, 'end': 820.5, 'text': ' be taken from memory and that actually gives me a lower cost right. Therefore, if I give', 'tokens': [50384, 312, 2726, 490, 4675, 293, 300, 767, 2709, 385, 257, 3126, 2063, 558, 13, 7504, 11, 498, 286, 976, 50734], 'temperature': 0.0, 'avg_logprob': -0.14822797775268554, 'compression_ratio': 1.977900552486188, 'no_speech_prob': 0.0019955465104430914}, {'id': 126, 'seek': 81310, 'start': 821.14, 'end': 826.94, 'text': ' two registers to a two registers to b and then no registers or two registers to a and', 'tokens': [50766, 732, 38351, 281, 257, 732, 38351, 281, 272, 293, 550, 572, 38351, 420, 732, 38351, 281, 257, 293, 51056], 'temperature': 0.0, 'avg_logprob': -0.14822797775268554, 'compression_ratio': 1.977900552486188, 'no_speech_prob': 0.0019955465104430914}, {'id': 127, 'seek': 81310, 'start': 826.94, 'end': 832.58, 'text': ' no register for b then essentially I am computing this using two registers which is same as', 'tokens': [51056, 572, 7280, 337, 272, 550, 4476, 286, 669, 15866, 341, 1228, 732, 38351, 597, 307, 912, 382, 51338], 'temperature': 0.0, 'avg_logprob': -0.14822797775268554, 'compression_ratio': 1.977900552486188, 'no_speech_prob': 0.0019955465104430914}, {'id': 128, 'seek': 81310, 'start': 832.58, 'end': 839.58, 'text': ' computing it using one register plus computing this in memory which is zero and then adding', 'tokens': [51338, 15866, 309, 1228, 472, 7280, 1804, 15866, 341, 294, 4675, 597, 307, 4018, 293, 550, 5127, 51688], 'temperature': 0.0, 'avg_logprob': -0.14822797775268554, 'compression_ratio': 1.977900552486188, 'no_speech_prob': 0.0019955465104430914}, {'id': 129, 'seek': 83958, 'start': 839.58, 'end': 844.86, 'text': ' up these two things along with the cost of t 1. So, that cost will be two now let us', 'tokens': [50364, 493, 613, 732, 721, 2051, 365, 264, 2063, 295, 256, 502, 13, 407, 11, 300, 2063, 486, 312, 732, 586, 718, 505, 50628], 'temperature': 0.0, 'avg_logprob': -0.2503684134710403, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.005505411420017481}, {'id': 130, 'seek': 83958, 'start': 844.86, 'end': 850.4200000000001, 'text': ' look at this interesting possibility which we have not seen before correct remember when', 'tokens': [50628, 574, 412, 341, 1880, 7959, 597, 321, 362, 406, 1612, 949, 3006, 1604, 562, 50906], 'temperature': 0.0, 'avg_logprob': -0.2503684134710403, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.005505411420017481}, {'id': 131, 'seek': 83958, 'start': 850.4200000000001, 'end': 857.4200000000001, 'text': ' we did code generation for trees what did we say if the left sub tree has a particularly', 'tokens': [50906, 321, 630, 3089, 5125, 337, 5852, 437, 630, 321, 584, 498, 264, 1411, 1422, 4230, 575, 257, 4098, 51256], 'temperature': 0.0, 'avg_logprob': -0.2503684134710403, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.005505411420017481}, {'id': 132, 'seek': 83958, 'start': 857.82, 'end': 864.62, 'text': ' the labeling algorithm of a seti woolman what does it say that there are two sub trees ok', 'tokens': [51276, 264, 40244, 9284, 295, 257, 992, 72, 24181, 1601, 437, 775, 309, 584, 300, 456, 366, 732, 1422, 5852, 3133, 51616], 'temperature': 0.0, 'avg_logprob': -0.2503684134710403, 'compression_ratio': 1.6372093023255814, 'no_speech_prob': 0.005505411420017481}, {'id': 133, 'seek': 86462, 'start': 864.86, 'end': 870.98, 'text': ' what is the minimum number of registers required for the node let us say if the left sub tree', 'tokens': [50376, 437, 307, 264, 7285, 1230, 295, 38351, 4739, 337, 264, 9984, 718, 505, 584, 498, 264, 1411, 1422, 4230, 50682], 'temperature': 0.0, 'avg_logprob': -0.14470272064208983, 'compression_ratio': 2.180722891566265, 'no_speech_prob': 0.008877789601683617}, {'id': 134, 'seek': 86462, 'start': 870.98, 'end': 876.78, 'text': ' requires r 1 registers minimum registers the right sub tree requires r 2 minimum registers', 'tokens': [50682, 7029, 367, 502, 38351, 7285, 38351, 264, 558, 1422, 4230, 7029, 367, 568, 7285, 38351, 50972], 'temperature': 0.0, 'avg_logprob': -0.14470272064208983, 'compression_ratio': 2.180722891566265, 'no_speech_prob': 0.008877789601683617}, {'id': 135, 'seek': 86462, 'start': 876.78, 'end': 881.18, 'text': ' what would be the cost of generating I mean what would be the minimum number of registers', 'tokens': [50972, 437, 576, 312, 264, 2063, 295, 17746, 286, 914, 437, 576, 312, 264, 7285, 1230, 295, 38351, 51192], 'temperature': 0.0, 'avg_logprob': -0.14470272064208983, 'compression_ratio': 2.180722891566265, 'no_speech_prob': 0.008877789601683617}, {'id': 136, 'seek': 86462, 'start': 881.18, 'end': 888.18, 'text': ' required for the root correct why did we say that if they are not equal what did we say', 'tokens': [51192, 4739, 337, 264, 5593, 3006, 983, 630, 321, 584, 300, 498, 436, 366, 406, 2681, 437, 630, 321, 584, 51542], 'temperature': 0.0, 'avg_logprob': -0.14470272064208983, 'compression_ratio': 2.180722891566265, 'no_speech_prob': 0.008877789601683617}, {'id': 137, 'seek': 88818, 'start': 888.18, 'end': 895.18, 'text': ' because we can compute the result requiring both the registers first and then keep that', 'tokens': [50364, 570, 321, 393, 14722, 264, 1874, 24165, 1293, 264, 38351, 700, 293, 550, 1066, 300, 50714], 'temperature': 0.0, 'avg_logprob': -0.28408222433961466, 'compression_ratio': 1.765, 'no_speech_prob': 0.02112830989062786}, {'id': 138, 'seek': 88818, 'start': 898.0999999999999, 'end': 903.0999999999999, 'text': ' register and use the other exactly right. So, now remember that I should not simply', 'tokens': [50860, 7280, 293, 764, 264, 661, 2293, 558, 13, 407, 11, 586, 1604, 300, 286, 820, 406, 2935, 51110], 'temperature': 0.0, 'avg_logprob': -0.28408222433961466, 'compression_ratio': 1.765, 'no_speech_prob': 0.02112830989062786}, {'id': 139, 'seek': 88818, 'start': 903.0999999999999, 'end': 910.0999999999999, 'text': ' say that if I give two registers to a after computing a I can only to keep the result', 'tokens': [51110, 584, 300, 498, 286, 976, 732, 38351, 281, 257, 934, 15866, 257, 286, 393, 787, 281, 1066, 264, 1874, 51460], 'temperature': 0.0, 'avg_logprob': -0.28408222433961466, 'compression_ratio': 1.765, 'no_speech_prob': 0.02112830989062786}, {'id': 140, 'seek': 88818, 'start': 910.26, 'end': 917.26, 'text': ' only in one register all other registers can be released for b ok. So, that is this possibility', 'tokens': [51468, 787, 294, 472, 7280, 439, 661, 38351, 393, 312, 4736, 337, 272, 3133, 13, 407, 11, 300, 307, 341, 7959, 51818], 'temperature': 0.0, 'avg_logprob': -0.28408222433961466, 'compression_ratio': 1.765, 'no_speech_prob': 0.02112830989062786}, {'id': 141, 'seek': 91726, 'start': 917.74, 'end': 924.1, 'text': ' I give two registers to a I first compute a correct and then after finished computing', 'tokens': [50388, 286, 976, 732, 38351, 281, 257, 286, 700, 14722, 257, 3006, 293, 550, 934, 4335, 15866, 50706], 'temperature': 0.0, 'avg_logprob': -0.1321896299531188, 'compression_ratio': 1.8041237113402062, 'no_speech_prob': 0.0028829569928348064}, {'id': 142, 'seek': 91726, 'start': 924.1, 'end': 931.1, 'text': ' a I can release all, but one register and that register can be used for b and I can', 'tokens': [50706, 257, 286, 393, 4374, 439, 11, 457, 472, 7280, 293, 300, 7280, 393, 312, 1143, 337, 272, 293, 286, 393, 51056], 'temperature': 0.0, 'avg_logprob': -0.1321896299531188, 'compression_ratio': 1.8041237113402062, 'no_speech_prob': 0.0028829569928348064}, {'id': 143, 'seek': 91726, 'start': 931.1, 'end': 937.14, 'text': ' evaluate the cost. So, I need to consider this possibility also saying computing a using', 'tokens': [51056, 13059, 264, 2063, 13, 407, 11, 286, 643, 281, 1949, 341, 7959, 611, 1566, 15866, 257, 1228, 51358], 'temperature': 0.0, 'avg_logprob': -0.1321896299531188, 'compression_ratio': 1.8041237113402062, 'no_speech_prob': 0.0028829569928348064}, {'id': 144, 'seek': 91726, 'start': 937.14, 'end': 943.14, 'text': ' two registers and computing b using one register do not treat this as three registers right', 'tokens': [51358, 732, 38351, 293, 15866, 272, 1228, 472, 7280, 360, 406, 2387, 341, 382, 1045, 38351, 558, 51658], 'temperature': 0.0, 'avg_logprob': -0.1321896299531188, 'compression_ratio': 1.8041237113402062, 'no_speech_prob': 0.0028829569928348064}, {'id': 145, 'seek': 94314, 'start': 943.34, 'end': 949.3, 'text': ' it is not like three registers right if I have two here and one here then this will', 'tokens': [50374, 309, 307, 406, 411, 1045, 38351, 558, 498, 286, 362, 732, 510, 293, 472, 510, 550, 341, 486, 50672], 'temperature': 0.0, 'avg_logprob': -0.17149275611428655, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.004820036701858044}, {'id': 146, 'seek': 94314, 'start': 949.3, 'end': 955.86, 'text': ' be only two if I have one here and one here this will be two that is true right. So, you', 'tokens': [50672, 312, 787, 732, 498, 286, 362, 472, 510, 293, 472, 510, 341, 486, 312, 732, 300, 307, 2074, 558, 13, 407, 11, 291, 51000], 'temperature': 0.0, 'avg_logprob': -0.17149275611428655, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.004820036701858044}, {'id': 147, 'seek': 94314, 'start': 955.86, 'end': 960.6999999999999, 'text': ' have to remember that possibility and you also have to include that therefore, the cost', 'tokens': [51000, 362, 281, 1604, 300, 7959, 293, 291, 611, 362, 281, 4090, 300, 4412, 11, 264, 2063, 51242], 'temperature': 0.0, 'avg_logprob': -0.17149275611428655, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.004820036701858044}, {'id': 148, 'seek': 94314, 'start': 960.6999999999999, 'end': 967.7, 'text': ' of computing t 1 is the minimum cost of three three or two which is two right.', 'tokens': [51242, 295, 15866, 256, 502, 307, 264, 7285, 2063, 295, 1045, 1045, 420, 732, 597, 307, 732, 558, 13, 51592], 'temperature': 0.0, 'avg_logprob': -0.17149275611428655, 'compression_ratio': 1.8225806451612903, 'no_speech_prob': 0.004820036701858044}, {'id': 149, 'seek': 96770, 'start': 968.7, 'end': 975.7, 'text': ' So, when you do this thing what you really need to do is I will show you right. So, here', 'tokens': [50414, 407, 11, 562, 291, 360, 341, 551, 437, 291, 534, 643, 281, 360, 307, 286, 486, 855, 291, 558, 13, 407, 11, 510, 50764], 'temperature': 0.0, 'avg_logprob': -0.1491978733809953, 'compression_ratio': 1.8655913978494623, 'no_speech_prob': 0.0022142173256725073}, {'id': 150, 'seek': 96770, 'start': 976.0200000000001, 'end': 981.86, 'text': ' what we have calculated is that for t 1 we said that the minimum cost is this one a in', 'tokens': [50780, 437, 321, 362, 15598, 307, 300, 337, 256, 502, 321, 848, 300, 264, 7285, 2063, 307, 341, 472, 257, 294, 51072], 'temperature': 0.0, 'avg_logprob': -0.1491978733809953, 'compression_ratio': 1.8655913978494623, 'no_speech_prob': 0.0022142173256725073}, {'id': 151, 'seek': 96770, 'start': 981.86, 'end': 987.9000000000001, 'text': ' a register and b in memory right. So, what we need to do is that here we need to show', 'tokens': [51072, 257, 7280, 293, 272, 294, 4675, 558, 13, 407, 11, 437, 321, 643, 281, 360, 307, 300, 510, 321, 643, 281, 855, 51374], 'temperature': 0.0, 'avg_logprob': -0.1491978733809953, 'compression_ratio': 1.8655913978494623, 'no_speech_prob': 0.0022142173256725073}, {'id': 152, 'seek': 96770, 'start': 987.9000000000001, 'end': 994.9000000000001, 'text': ' a in register b in memory I am sorry let us do this not here. So, this is for a first', 'tokens': [51374, 257, 294, 7280, 272, 294, 4675, 286, 669, 2597, 718, 505, 360, 341, 406, 510, 13, 407, 11, 341, 307, 337, 257, 700, 51724], 'temperature': 0.0, 'avg_logprob': -0.1491978733809953, 'compression_ratio': 1.8655913978494623, 'no_speech_prob': 0.0022142173256725073}, {'id': 153, 'seek': 99770, 'start': 997.7, 'end': 1004.7, 'text': ' for two registers correct. So, here we will say a in register b in memory ok this information', 'tokens': [50364, 337, 732, 38351, 3006, 13, 407, 11, 510, 321, 486, 584, 257, 294, 7280, 272, 294, 4675, 3133, 341, 1589, 50714], 'temperature': 0.0, 'avg_logprob': -0.1575924508711871, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.0024537253193557262}, {'id': 154, 'seek': 99770, 'start': 1010.1, 'end': 1017.1, 'text': ' is something that we need to save. So, that when you come to t 2 if you choose two registers', 'tokens': [50984, 307, 746, 300, 321, 643, 281, 3155, 13, 407, 11, 300, 562, 291, 808, 281, 256, 568, 498, 291, 2826, 732, 38351, 51334], 'temperature': 0.0, 'avg_logprob': -0.1575924508711871, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.0024537253193557262}, {'id': 155, 'seek': 99770, 'start': 1017.58, 'end': 1024.3, 'text': ' ok it means that you have to use this particular option correct you need to remember that otherwise', 'tokens': [51358, 3133, 309, 1355, 300, 291, 362, 281, 764, 341, 1729, 3614, 3006, 291, 643, 281, 1604, 300, 5911, 51694], 'temperature': 0.0, 'avg_logprob': -0.1575924508711871, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.0024537253193557262}, {'id': 156, 'seek': 102430, 'start': 1024.3, 'end': 1026.94, 'text': ' you would not know how you have arrived at that.', 'tokens': [50364, 291, 576, 406, 458, 577, 291, 362, 6678, 412, 300, 13, 50496], 'temperature': 0.0, 'avg_logprob': -0.1560056586014597, 'compression_ratio': 1.9209302325581394, 'no_speech_prob': 0.001919083297252655}, {'id': 157, 'seek': 102430, 'start': 1026.94, 'end': 1032.3, 'text': ' Similarly, of course for this also you need to remember right here what you say here a', 'tokens': [50496, 13157, 11, 295, 1164, 337, 341, 611, 291, 643, 281, 1604, 558, 510, 437, 291, 584, 510, 257, 50764], 'temperature': 0.0, 'avg_logprob': -0.1560056586014597, 'compression_ratio': 1.9209302325581394, 'no_speech_prob': 0.001919083297252655}, {'id': 158, 'seek': 102430, 'start': 1032.3, 'end': 1039.3, 'text': ' in register b in memory correct. So, you need to remember these things right every time', 'tokens': [50764, 294, 7280, 272, 294, 4675, 3006, 13, 407, 11, 291, 643, 281, 1604, 613, 721, 558, 633, 565, 51114], 'temperature': 0.0, 'avg_logprob': -0.1560056586014597, 'compression_ratio': 1.9209302325581394, 'no_speech_prob': 0.001919083297252655}, {'id': 159, 'seek': 102430, 'start': 1040.82, 'end': 1046.34, 'text': ' you store the minimum cost you say which pattern has cost this minimum cost in this case the', 'tokens': [51190, 291, 3531, 264, 7285, 2063, 291, 584, 597, 5102, 575, 2063, 341, 7285, 2063, 294, 341, 1389, 264, 51466], 'temperature': 0.0, 'avg_logprob': -0.1560056586014597, 'compression_ratio': 1.9209302325581394, 'no_speech_prob': 0.001919083297252655}, {'id': 160, 'seek': 102430, 'start': 1046.34, 'end': 1053.34, 'text': ' pattern which has cost this minimum cost is this one right. Therefore, you save that information', 'tokens': [51466, 5102, 597, 575, 2063, 341, 7285, 2063, 307, 341, 472, 558, 13, 7504, 11, 291, 3155, 300, 1589, 51816], 'temperature': 0.0, 'avg_logprob': -0.1560056586014597, 'compression_ratio': 1.9209302325581394, 'no_speech_prob': 0.001919083297252655}, {'id': 161, 'seek': 105334, 'start': 1053.74, 'end': 1060.74, 'text': ' over here right ok make sense alright. Now, let us move forward and then see how do we', 'tokens': [50384, 670, 510, 558, 3133, 652, 2020, 5845, 13, 823, 11, 718, 505, 1286, 2128, 293, 550, 536, 577, 360, 321, 50734], 'temperature': 0.0, 'avg_logprob': -0.1834502289260643, 'compression_ratio': 1.5783132530120483, 'no_speech_prob': 0.0010790639789775014}, {'id': 162, 'seek': 105334, 'start': 1064.5, 'end': 1068.6999999999998, 'text': ' compute this. So, moment I do ok now the last thing that we need to find out is what is', 'tokens': [50922, 14722, 341, 13, 407, 11, 1623, 286, 360, 3133, 586, 264, 1036, 551, 300, 321, 643, 281, 915, 484, 307, 437, 307, 51132], 'temperature': 0.0, 'avg_logprob': -0.1834502289260643, 'compression_ratio': 1.5783132530120483, 'no_speech_prob': 0.0010790639789775014}, {'id': 163, 'seek': 105334, 'start': 1068.6999999999998, 'end': 1075.6999999999998, 'text': ' the cost of evaluating t 1 in memory which is the third thing that we need to see right', 'tokens': [51132, 264, 2063, 295, 27479, 256, 502, 294, 4675, 597, 307, 264, 2636, 551, 300, 321, 643, 281, 536, 558, 51482], 'temperature': 0.0, 'avg_logprob': -0.1834502289260643, 'compression_ratio': 1.5783132530120483, 'no_speech_prob': 0.0010790639789775014}, {'id': 164, 'seek': 107570, 'start': 1076.54, 'end': 1083.54, 'text': ' evaluating t t 1 in memory is the cost of evaluating t 1 using r registers plus storing', 'tokens': [50406, 27479, 256, 256, 502, 294, 4675, 307, 264, 2063, 295, 27479, 256, 502, 1228, 367, 38351, 1804, 26085, 50756], 'temperature': 0.0, 'avg_logprob': -0.17129019405064957, 'compression_ratio': 1.6578947368421053, 'no_speech_prob': 0.0009686800185590982}, {'id': 165, 'seek': 107570, 'start': 1084.5, 'end': 1091.5, 'text': ' it in memory right. So, that will be 2 plus 1 ok make sense. So, now, you have finished', 'tokens': [50804, 309, 294, 4675, 558, 13, 407, 11, 300, 486, 312, 568, 1804, 502, 3133, 652, 2020, 13, 407, 11, 586, 11, 291, 362, 4335, 51154], 'temperature': 0.0, 'avg_logprob': -0.17129019405064957, 'compression_ratio': 1.6578947368421053, 'no_speech_prob': 0.0009686800185590982}, {'id': 166, 'seek': 107570, 'start': 1092.1000000000001, 'end': 1097.54, 'text': ' this 3 2 2 you also know that this will also be 3 2 2.', 'tokens': [51184, 341, 805, 568, 568, 291, 611, 458, 300, 341, 486, 611, 312, 805, 568, 568, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.17129019405064957, 'compression_ratio': 1.6578947368421053, 'no_speech_prob': 0.0009686800185590982}, {'id': 167, 'seek': 107570, 'start': 1097.54, 'end': 1103.74, 'text': ' Now, let us take one more example and then see how that works let us look at t 3 and', 'tokens': [51456, 823, 11, 718, 505, 747, 472, 544, 1365, 293, 550, 536, 577, 300, 1985, 718, 505, 574, 412, 256, 805, 293, 51766], 'temperature': 0.0, 'avg_logprob': -0.17129019405064957, 'compression_ratio': 1.6578947368421053, 'no_speech_prob': 0.0009686800185590982}, {'id': 168, 'seek': 110374, 'start': 1103.74, 'end': 1109.58, 'text': ' then look at evaluating t 3 with 1 2 or 3 registers. See remember whenever you are evaluating', 'tokens': [50364, 550, 574, 412, 27479, 256, 805, 365, 502, 568, 420, 805, 38351, 13, 3008, 1604, 5699, 291, 366, 27479, 50656], 'temperature': 0.0, 'avg_logprob': -0.10511745315000236, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.0005095240194350481}, {'id': 169, 'seek': 110374, 'start': 1109.58, 'end': 1115.46, 'text': ' the cost of generating code for a particular node you need to consider all possible combinations', 'tokens': [50656, 264, 2063, 295, 17746, 3089, 337, 257, 1729, 9984, 291, 643, 281, 1949, 439, 1944, 21267, 50950], 'temperature': 0.0, 'avg_logprob': -0.10511745315000236, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.0005095240194350481}, {'id': 170, 'seek': 110374, 'start': 1115.46, 'end': 1121.9, 'text': ' ok and you need to consider for all possible registers from 1 to r. I do not think that', 'tokens': [50950, 3133, 293, 291, 643, 281, 1949, 337, 439, 1944, 38351, 490, 502, 281, 367, 13, 286, 360, 406, 519, 300, 51272], 'temperature': 0.0, 'avg_logprob': -0.10511745315000236, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.0005095240194350481}, {'id': 171, 'seek': 110374, 'start': 1121.9, 'end': 1128.9, 'text': ' using r registers is going to be cheaper right than using is likely to be cheaper than using', 'tokens': [51272, 1228, 367, 38351, 307, 516, 281, 312, 12284, 558, 813, 1228, 307, 3700, 281, 312, 12284, 813, 1228, 51622], 'temperature': 0.0, 'avg_logprob': -0.10511745315000236, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.0005095240194350481}, {'id': 172, 'seek': 112890, 'start': 1129.7800000000002, 'end': 1134.5, 'text': ' r minus 1 or r minus 2 registers there is no reason for that. For example, here you', 'tokens': [50408, 367, 3175, 502, 420, 367, 3175, 568, 38351, 456, 307, 572, 1778, 337, 300, 13, 1171, 1365, 11, 510, 291, 50644], 'temperature': 0.0, 'avg_logprob': -0.16858277638753255, 'compression_ratio': 1.7185929648241205, 'no_speech_prob': 0.003022518940269947}, {'id': 173, 'seek': 112890, 'start': 1134.5, 'end': 1141.5, 'text': ' can see right using fewer registers right using only memory is actually expensive in', 'tokens': [50644, 393, 536, 558, 1228, 13366, 38351, 558, 1228, 787, 4675, 307, 767, 5124, 294, 50994], 'temperature': 0.0, 'avg_logprob': -0.16858277638753255, 'compression_ratio': 1.7185929648241205, 'no_speech_prob': 0.003022518940269947}, {'id': 174, 'seek': 112890, 'start': 1143.8600000000001, 'end': 1148.9, 'text': ' some cases it could it could be I mean using sorry the other way around should have said', 'tokens': [51112, 512, 3331, 309, 727, 309, 727, 312, 286, 914, 1228, 2597, 264, 661, 636, 926, 820, 362, 848, 51364], 'temperature': 0.0, 'avg_logprob': -0.16858277638753255, 'compression_ratio': 1.7185929648241205, 'no_speech_prob': 0.003022518940269947}, {'id': 175, 'seek': 112890, 'start': 1148.9, 'end': 1155.42, 'text': ' the following thing using fewer registers may not necessarily be more expensive than', 'tokens': [51364, 264, 3480, 551, 1228, 13366, 38351, 815, 406, 4725, 312, 544, 5124, 813, 51690], 'temperature': 0.0, 'avg_logprob': -0.16858277638753255, 'compression_ratio': 1.7185929648241205, 'no_speech_prob': 0.003022518940269947}, {'id': 176, 'seek': 115542, 'start': 1155.54, 'end': 1158.98, 'text': ' using more registers ok that is really what it is ok.', 'tokens': [50370, 1228, 544, 38351, 3133, 300, 307, 534, 437, 309, 307, 3133, 13, 50542], 'temperature': 0.0, 'avg_logprob': -0.18065307066612638, 'compression_ratio': 1.7532467532467533, 'no_speech_prob': 0.009765973314642906}, {'id': 177, 'seek': 115542, 'start': 1158.98, 'end': 1164.3400000000001, 'text': ' Now, let us look at this particular example shows you that right let us first find out', 'tokens': [50542, 823, 11, 718, 505, 574, 412, 341, 1729, 1365, 3110, 291, 300, 558, 718, 505, 700, 915, 484, 50810], 'temperature': 0.0, 'avg_logprob': -0.18065307066612638, 'compression_ratio': 1.7532467532467533, 'no_speech_prob': 0.009765973314642906}, {'id': 178, 'seek': 115542, 'start': 1164.3400000000001, 'end': 1171.3400000000001, 'text': ' cost of evaluating t 3 with 1 register. If I have 1 register right obviously the left', 'tokens': [50810, 2063, 295, 27479, 256, 805, 365, 502, 7280, 13, 759, 286, 362, 502, 7280, 558, 2745, 264, 1411, 51160], 'temperature': 0.0, 'avg_logprob': -0.18065307066612638, 'compression_ratio': 1.7532467532467533, 'no_speech_prob': 0.009765973314642906}, {'id': 179, 'seek': 115542, 'start': 1172.18, 'end': 1179.18, 'text': ' child has to be in the register the right one has to be memory ok, but then what does', 'tokens': [51202, 1440, 575, 281, 312, 294, 264, 7280, 264, 558, 472, 575, 281, 312, 4675, 3133, 11, 457, 550, 437, 775, 51552], 'temperature': 0.0, 'avg_logprob': -0.18065307066612638, 'compression_ratio': 1.7532467532467533, 'no_speech_prob': 0.009765973314642906}, {'id': 180, 'seek': 115542, 'start': 1179.22, 'end': 1183.7, 'text': ' it mean I could have actually done the following thing I could have computed the right child', 'tokens': [51554, 309, 914, 286, 727, 362, 767, 1096, 264, 3480, 551, 286, 727, 362, 40610, 264, 558, 1440, 51778], 'temperature': 0.0, 'avg_logprob': -0.18065307066612638, 'compression_ratio': 1.7532467532467533, 'no_speech_prob': 0.009765973314642906}, {'id': 181, 'seek': 118370, 'start': 1183.8600000000001, 'end': 1190.54, 'text': ' using memory and put it in sorry right child using 1 register and put it into memory that', 'tokens': [50372, 1228, 4675, 293, 829, 309, 294, 2597, 558, 1440, 1228, 502, 7280, 293, 829, 309, 666, 4675, 300, 50706], 'temperature': 0.0, 'avg_logprob': -0.1374658071077787, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.012096402235329151}, {'id': 182, 'seek': 118370, 'start': 1190.54, 'end': 1195.5, 'text': ' is also possible correct. Given that I have 1 register I could have', 'tokens': [50706, 307, 611, 1944, 3006, 13, 18600, 300, 286, 362, 502, 7280, 286, 727, 362, 50954], 'temperature': 0.0, 'avg_logprob': -0.1374658071077787, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.012096402235329151}, {'id': 183, 'seek': 118370, 'start': 1195.5, 'end': 1201.98, 'text': ' first computed t 2 using that 1 register put the value into memory that means that eventually', 'tokens': [50954, 700, 40610, 256, 568, 1228, 300, 502, 7280, 829, 264, 2158, 666, 4675, 300, 1355, 300, 4728, 51278], 'temperature': 0.0, 'avg_logprob': -0.1374658071077787, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.012096402235329151}, {'id': 184, 'seek': 118370, 'start': 1201.98, 'end': 1208.66, 'text': ' everything is in memory and then use that 1 register for this. So, when you say cost', 'tokens': [51278, 1203, 307, 294, 4675, 293, 550, 764, 300, 502, 7280, 337, 341, 13, 407, 11, 562, 291, 584, 2063, 51612], 'temperature': 0.0, 'avg_logprob': -0.1374658071077787, 'compression_ratio': 1.8064516129032258, 'no_speech_prob': 0.012096402235329151}, {'id': 185, 'seek': 120866, 'start': 1208.66, 'end': 1215.5, 'text': ' of evaluating this ok using 1 register you could have given that 1 register to e and', 'tokens': [50364, 295, 27479, 341, 3133, 1228, 502, 7280, 291, 727, 362, 2212, 300, 502, 7280, 281, 308, 293, 50706], 'temperature': 0.0, 'avg_logprob': -0.1924154557377459, 'compression_ratio': 1.9453551912568305, 'no_speech_prob': 0.003473418764770031}, {'id': 186, 'seek': 120866, 'start': 1215.5, 'end': 1222.5, 'text': ' then you could have calculated t 2 in memory right that means that this cost would be 1', 'tokens': [50706, 550, 291, 727, 362, 15598, 256, 568, 294, 4675, 558, 300, 1355, 300, 341, 2063, 576, 312, 502, 51056], 'temperature': 0.0, 'avg_logprob': -0.1924154557377459, 'compression_ratio': 1.9453551912568305, 'no_speech_prob': 0.003473418764770031}, {'id': 187, 'seek': 120866, 'start': 1222.5400000000002, 'end': 1228.8600000000001, 'text': ' register which is 1 calculating this in memory which is 3 plus cost of this instruction which', 'tokens': [51058, 7280, 597, 307, 502, 28258, 341, 294, 4675, 597, 307, 805, 1804, 2063, 295, 341, 10951, 597, 51374], 'temperature': 0.0, 'avg_logprob': -0.1924154557377459, 'compression_ratio': 1.9453551912568305, 'no_speech_prob': 0.003473418764770031}, {'id': 188, 'seek': 120866, 'start': 1228.8600000000001, 'end': 1235.8600000000001, 'text': ' is 1 which is 5 and that is this cost ok right I mean that actually we will find out that', 'tokens': [51374, 307, 502, 597, 307, 1025, 293, 300, 307, 341, 2063, 3133, 558, 286, 914, 300, 767, 321, 486, 915, 484, 300, 51724], 'temperature': 0.0, 'avg_logprob': -0.1924154557377459, 'compression_ratio': 1.9453551912568305, 'no_speech_prob': 0.003473418764770031}, {'id': 189, 'seek': 123586, 'start': 1236.78, 'end': 1242.6999999999998, 'text': ' is it has to be the minimum are there other possibilities again there are no other possibilities', 'tokens': [50410, 307, 309, 575, 281, 312, 264, 7285, 366, 456, 661, 12178, 797, 456, 366, 572, 661, 12178, 50706], 'temperature': 0.0, 'avg_logprob': -0.16131827757530606, 'compression_ratio': 1.9861751152073732, 'no_speech_prob': 0.0014939793618395925}, {'id': 190, 'seek': 123586, 'start': 1242.6999999999998, 'end': 1247.82, 'text': ' I cannot calculate both of them in memory I cannot calculate this in register and this', 'tokens': [50706, 286, 2644, 8873, 1293, 295, 552, 294, 4675, 286, 2644, 8873, 341, 294, 7280, 293, 341, 50962], 'temperature': 0.0, 'avg_logprob': -0.16131827757530606, 'compression_ratio': 1.9861751152073732, 'no_speech_prob': 0.0014939793618395925}, {'id': 191, 'seek': 123586, 'start': 1247.82, 'end': 1252.3799999999999, 'text': ' in memory that is not possible. So, among the possibilities this is the only other only', 'tokens': [50962, 294, 4675, 300, 307, 406, 1944, 13, 407, 11, 3654, 264, 12178, 341, 307, 264, 787, 661, 787, 51190], 'temperature': 0.0, 'avg_logprob': -0.16131827757530606, 'compression_ratio': 1.9861751152073732, 'no_speech_prob': 0.0014939793618395925}, {'id': 192, 'seek': 123586, 'start': 1252.3799999999999, 'end': 1258.26, 'text': ' possibility among this and that possibility gives me a cost of 5 ok.', 'tokens': [51190, 7959, 3654, 341, 293, 300, 7959, 2709, 385, 257, 2063, 295, 1025, 3133, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.16131827757530606, 'compression_ratio': 1.9861751152073732, 'no_speech_prob': 0.0014939793618395925}, {'id': 193, 'seek': 123586, 'start': 1258.26, 'end': 1264.54, 'text': ' Therefore, this one is 5 and I have to remember that this has to be computed in 1 register', 'tokens': [51484, 7504, 11, 341, 472, 307, 1025, 293, 286, 362, 281, 1604, 300, 341, 575, 281, 312, 40610, 294, 502, 7280, 51798], 'temperature': 0.0, 'avg_logprob': -0.16131827757530606, 'compression_ratio': 1.9861751152073732, 'no_speech_prob': 0.0014939793618395925}, {'id': 194, 'seek': 126454, 'start': 1264.54, 'end': 1271.1399999999999, 'text': ' and this has to be computed in memory that is this cost plus this cost ok. Now, let us', 'tokens': [50364, 293, 341, 575, 281, 312, 40610, 294, 4675, 300, 307, 341, 2063, 1804, 341, 2063, 3133, 13, 823, 11, 718, 505, 50694], 'temperature': 0.0, 'avg_logprob': -0.18215268157249273, 'compression_ratio': 1.6401869158878504, 'no_speech_prob': 0.0023827848490327597}, {'id': 195, 'seek': 126454, 'start': 1271.1399999999999, 'end': 1278.1399999999999, 'text': ' find out cost of evaluating 3 t 3 using 2 registers right again 2 registers there are', 'tokens': [50694, 915, 484, 2063, 295, 27479, 805, 256, 805, 1228, 568, 38351, 558, 797, 568, 38351, 456, 366, 51044], 'temperature': 0.0, 'avg_logprob': -0.18215268157249273, 'compression_ratio': 1.6401869158878504, 'no_speech_prob': 0.0023827848490327597}, {'id': 196, 'seek': 126454, 'start': 1278.62, 'end': 1285.62, 'text': ' several possibilities let us find out which one is going to cost the minimum ok I have', 'tokens': [51068, 2940, 12178, 718, 505, 915, 484, 597, 472, 307, 516, 281, 2063, 264, 7285, 3133, 286, 362, 51418], 'temperature': 0.0, 'avg_logprob': -0.18215268157249273, 'compression_ratio': 1.6401869158878504, 'no_speech_prob': 0.0023827848490327597}, {'id': 197, 'seek': 126454, 'start': 1286.42, 'end': 1291.62, 'text': ' only 1 example done here maybe we can quickly work out the other. So, if I have 2 registers', 'tokens': [51458, 787, 502, 1365, 1096, 510, 1310, 321, 393, 2661, 589, 484, 264, 661, 13, 407, 11, 498, 286, 362, 568, 38351, 51718], 'temperature': 0.0, 'avg_logprob': -0.18215268157249273, 'compression_ratio': 1.6401869158878504, 'no_speech_prob': 0.0023827848490327597}, {'id': 198, 'seek': 129162, 'start': 1291.62, 'end': 1298.62, 'text': ' I could have given 1 register for this and 1 register for that correct now 1 register', 'tokens': [50364, 286, 727, 362, 2212, 502, 7280, 337, 341, 293, 502, 7280, 337, 300, 3006, 586, 502, 7280, 50714], 'temperature': 0.0, 'avg_logprob': -0.19409190402941756, 'compression_ratio': 2.2435897435897436, 'no_speech_prob': 0.005130859557539225}, {'id': 199, 'seek': 129162, 'start': 1298.6599999999999, 'end': 1305.6599999999999, 'text': ' for this and 1 register for that would add up to 1 plus 2 3 plus 1 more which is 4 correct', 'tokens': [50716, 337, 341, 293, 502, 7280, 337, 300, 576, 909, 493, 281, 502, 1804, 568, 805, 1804, 502, 544, 597, 307, 1017, 3006, 51066], 'temperature': 0.0, 'avg_logprob': -0.19409190402941756, 'compression_ratio': 2.2435897435897436, 'no_speech_prob': 0.005130859557539225}, {'id': 200, 'seek': 129162, 'start': 1307.34, 'end': 1313.2199999999998, 'text': ' so, that is 1 possible value I could have given 2 registers for this and 0 registers', 'tokens': [51150, 370, 11, 300, 307, 502, 1944, 2158, 286, 727, 362, 2212, 568, 38351, 337, 341, 293, 1958, 38351, 51444], 'temperature': 0.0, 'avg_logprob': -0.19409190402941756, 'compression_ratio': 2.2435897435897436, 'no_speech_prob': 0.005130859557539225}, {'id': 201, 'seek': 129162, 'start': 1313.2199999999998, 'end': 1319.4199999999998, 'text': ' for that that will add up to 1 plus 3 plus 1 which is 5 which is higher than 4 and there', 'tokens': [51444, 337, 300, 300, 486, 909, 493, 281, 502, 1804, 805, 1804, 502, 597, 307, 1025, 597, 307, 2946, 813, 1017, 293, 456, 51754], 'temperature': 0.0, 'avg_logprob': -0.19409190402941756, 'compression_ratio': 2.2435897435897436, 'no_speech_prob': 0.005130859557539225}, {'id': 202, 'seek': 131942, 'start': 1319.42, 'end': 1325.54, 'text': ' is no point looking at it any other possibility I could have given 2 registers for this and', 'tokens': [50364, 307, 572, 935, 1237, 412, 309, 604, 661, 7959, 286, 727, 362, 2212, 568, 38351, 337, 341, 293, 50670], 'temperature': 0.0, 'avg_logprob': -0.13724818596473107, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.0014970446936786175}, {'id': 203, 'seek': 131942, 'start': 1325.54, 'end': 1332.54, 'text': ' 1 register for that that is also a possibility remember when I put 2 1 right this still has', 'tokens': [50670, 502, 7280, 337, 300, 300, 307, 611, 257, 7959, 1604, 562, 286, 829, 568, 502, 558, 341, 920, 575, 51020], 'temperature': 0.0, 'avg_logprob': -0.13724818596473107, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.0014970446936786175}, {'id': 204, 'seek': 131942, 'start': 1332.74, 'end': 1339.74, 'text': ' 2 right if I put 2 here and 1 here then it is again 1 plus 2 plus 1 4 which is same as', 'tokens': [51030, 568, 558, 498, 286, 829, 568, 510, 293, 502, 510, 550, 309, 307, 797, 502, 1804, 568, 1804, 502, 1017, 597, 307, 912, 382, 51380], 'temperature': 0.0, 'avg_logprob': -0.13724818596473107, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.0014970446936786175}, {'id': 205, 'seek': 131942, 'start': 1341.38, 'end': 1348.38, 'text': ' the minimum cost. So, here when I put this 4 right I could store that 1 register for', 'tokens': [51462, 264, 7285, 2063, 13, 407, 11, 510, 562, 286, 829, 341, 1017, 558, 286, 727, 3531, 300, 502, 7280, 337, 51812], 'temperature': 0.0, 'avg_logprob': -0.13724818596473107, 'compression_ratio': 1.7839195979899498, 'no_speech_prob': 0.0014970446936786175}, {'id': 206, 'seek': 134838, 'start': 1348.8600000000001, 'end': 1354.5400000000002, 'text': ' this 1 register for that typically that is a better option than saying 2 registers for', 'tokens': [50388, 341, 502, 7280, 337, 300, 5850, 300, 307, 257, 1101, 3614, 813, 1566, 568, 38351, 337, 50672], 'temperature': 0.0, 'avg_logprob': -0.15153011643742942, 'compression_ratio': 1.7241379310344827, 'no_speech_prob': 0.0007086178520694375}, {'id': 207, 'seek': 134838, 'start': 1354.5400000000002, 'end': 1360.14, 'text': ' this and 1 register right both of them giving me the same minimum cost. So, I might as well', 'tokens': [50672, 341, 293, 502, 7280, 558, 1293, 295, 552, 2902, 385, 264, 912, 7285, 2063, 13, 407, 11, 286, 1062, 382, 731, 50952], 'temperature': 0.0, 'avg_logprob': -0.15153011643742942, 'compression_ratio': 1.7241379310344827, 'no_speech_prob': 0.0007086178520694375}, {'id': 208, 'seek': 134838, 'start': 1360.14, 'end': 1366.6200000000001, 'text': ' put the first one ok now after having done this thing we have to calculate the cost of', 'tokens': [50952, 829, 264, 700, 472, 3133, 586, 934, 1419, 1096, 341, 551, 321, 362, 281, 8873, 264, 2063, 295, 51276], 'temperature': 0.0, 'avg_logprob': -0.15153011643742942, 'compression_ratio': 1.7241379310344827, 'no_speech_prob': 0.0007086178520694375}, {'id': 209, 'seek': 134838, 'start': 1366.6200000000001, 'end': 1372.6200000000001, 'text': ' evaluating this in memory which is same as the cost of the minimum cost across 1 2 3', 'tokens': [51276, 27479, 341, 294, 4675, 597, 307, 912, 382, 264, 2063, 295, 264, 7285, 2063, 2108, 502, 568, 805, 51576], 'temperature': 0.0, 'avg_logprob': -0.15153011643742942, 'compression_ratio': 1.7241379310344827, 'no_speech_prob': 0.0007086178520694375}, {'id': 210, 'seek': 137262, 'start': 1373.1, 'end': 1380.1, 'text': ' 4 or registers plus 1 correct yeah 3 sorry we are calculating every node yeah that is', 'tokens': [50388, 1017, 420, 38351, 1804, 502, 3006, 1338, 805, 2597, 321, 366, 28258, 633, 9984, 1338, 300, 307, 50738], 'temperature': 0.0, 'avg_logprob': -0.2999258268447149, 'compression_ratio': 1.3828125, 'no_speech_prob': 0.009893313981592655}, {'id': 211, 'seek': 137262, 'start': 1388.86, 'end': 1395.86, 'text': ' because we have 2 registers absolutely right. So, this as you will see that it is dependent', 'tokens': [51176, 570, 321, 362, 568, 38351, 3122, 558, 13, 407, 11, 341, 382, 291, 486, 536, 300, 309, 307, 12334, 51526], 'temperature': 0.0, 'avg_logprob': -0.2999258268447149, 'compression_ratio': 1.3828125, 'no_speech_prob': 0.009893313981592655}, {'id': 212, 'seek': 139586, 'start': 1396.34, 'end': 1402.58, 'text': ' on the number of nodes and the number of registers correct right. So, it is going to be order', 'tokens': [50388, 322, 264, 1230, 295, 13891, 293, 264, 1230, 295, 38351, 3006, 558, 13, 407, 11, 309, 307, 516, 281, 312, 1668, 50700], 'temperature': 0.0, 'avg_logprob': -0.12977584420818172, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0020420567598193884}, {'id': 213, 'seek': 139586, 'start': 1402.58, 'end': 1409.58, 'text': ' n into r ok now let us look at t 4 correct. So, calculating t 4 with 1 register is calculating', 'tokens': [50700, 297, 666, 367, 3133, 586, 718, 505, 574, 412, 256, 1017, 3006, 13, 407, 11, 28258, 256, 1017, 365, 502, 7280, 307, 28258, 51050], 'temperature': 0.0, 'avg_logprob': -0.12977584420818172, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0020420567598193884}, {'id': 214, 'seek': 139586, 'start': 1414.54, 'end': 1421.54, 'text': ' this with 1 register and this in memory right. So, that would be 5 sorry that would be 5', 'tokens': [51298, 341, 365, 502, 7280, 293, 341, 294, 4675, 558, 13, 407, 11, 300, 576, 312, 1025, 2597, 300, 576, 312, 1025, 51648], 'temperature': 0.0, 'avg_logprob': -0.12977584420818172, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0020420567598193884}, {'id': 215, 'seek': 142154, 'start': 1422.42, 'end': 1429.42, 'text': ' plus 2 7 plus 1 8 right if you have 1 register that is the only possibility because you cannot', 'tokens': [50408, 1804, 568, 1614, 1804, 502, 1649, 558, 498, 291, 362, 502, 7280, 300, 307, 264, 787, 7959, 570, 291, 2644, 50758], 'temperature': 0.0, 'avg_logprob': -0.18124611697979828, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002543016569688916}, {'id': 216, 'seek': 142154, 'start': 1432.54, 'end': 1439.02, 'text': ' give the register to the right side. Now, let us look at if you have 2 registers', 'tokens': [50914, 976, 264, 7280, 281, 264, 558, 1252, 13, 823, 11, 718, 505, 574, 412, 498, 291, 362, 568, 38351, 51238], 'temperature': 0.0, 'avg_logprob': -0.18124611697979828, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002543016569688916}, {'id': 217, 'seek': 142154, 'start': 1439.02, 'end': 1446.02, 'text': ' then you could have given 2 registers to this and 1 register to that ok that is 2 plus 5', 'tokens': [51238, 550, 291, 727, 362, 2212, 568, 38351, 281, 341, 293, 502, 7280, 281, 300, 3133, 300, 307, 568, 1804, 1025, 51588], 'temperature': 0.0, 'avg_logprob': -0.18124611697979828, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002543016569688916}, {'id': 218, 'seek': 144602, 'start': 1446.18, 'end': 1453.18, 'text': ' 7 plus 1 8 or you could have given 1 register to this and 1 register to this ok that is', 'tokens': [50372, 1614, 1804, 502, 1649, 420, 291, 727, 362, 2212, 502, 7280, 281, 341, 293, 502, 7280, 281, 341, 3133, 300, 307, 50722], 'temperature': 0.0, 'avg_logprob': -0.16646888290626416, 'compression_ratio': 2.096, 'no_speech_prob': 0.00520269526168704}, {'id': 219, 'seek': 144602, 'start': 1455.78, 'end': 1462.78, 'text': ' also 8 right 2 register sorry 1 register to this 1 register to this that is also 8 ok', 'tokens': [50852, 611, 1649, 558, 568, 7280, 2597, 502, 7280, 281, 341, 502, 7280, 281, 341, 300, 307, 611, 1649, 3133, 51202], 'temperature': 0.0, 'avg_logprob': -0.16646888290626416, 'compression_ratio': 2.096, 'no_speech_prob': 0.00520269526168704}, {'id': 220, 'seek': 144602, 'start': 1463.5, 'end': 1470.5, 'text': ' let us look at how do we get 7 you give 2 registers to this and 1 register to this right', 'tokens': [51238, 718, 505, 574, 412, 577, 360, 321, 483, 1614, 291, 976, 568, 38351, 281, 341, 293, 502, 7280, 281, 341, 558, 51588], 'temperature': 0.0, 'avg_logprob': -0.16646888290626416, 'compression_ratio': 2.096, 'no_speech_prob': 0.00520269526168704}, {'id': 221, 'seek': 147050, 'start': 1471.5, 'end': 1476.94, 'text': ' and when you give 2 registers to this right you can first evaluate this particular sub', 'tokens': [50414, 293, 562, 291, 976, 568, 38351, 281, 341, 558, 291, 393, 700, 13059, 341, 1729, 1422, 50686], 'temperature': 0.0, 'avg_logprob': -0.1708332243419829, 'compression_ratio': 1.7905759162303665, 'no_speech_prob': 0.002427950268611312}, {'id': 222, 'seek': 147050, 'start': 1476.94, 'end': 1483.94, 'text': ' tree and then release all, but 1 register and then use that register to evaluate this', 'tokens': [50686, 4230, 293, 550, 4374, 439, 11, 457, 502, 7280, 293, 550, 764, 300, 7280, 281, 13059, 341, 51036], 'temperature': 0.0, 'avg_logprob': -0.1708332243419829, 'compression_ratio': 1.7905759162303665, 'no_speech_prob': 0.002427950268611312}, {'id': 223, 'seek': 147050, 'start': 1486.02, 'end': 1493.02, 'text': ' ok that can be done is not it and when you do that it is 4 plus 2 6 plus 1 7 that is', 'tokens': [51140, 3133, 300, 393, 312, 1096, 307, 406, 309, 293, 562, 291, 360, 300, 309, 307, 1017, 1804, 568, 1386, 1804, 502, 1614, 300, 307, 51490], 'temperature': 0.0, 'avg_logprob': -0.1708332243419829, 'compression_ratio': 1.7905759162303665, 'no_speech_prob': 0.002427950268611312}, {'id': 224, 'seek': 147050, 'start': 1494.06, 'end': 1499.62, 'text': ' the minimum cost again here you will save all the patterns for 8 what is the pattern', 'tokens': [51542, 264, 7285, 2063, 797, 510, 291, 486, 3155, 439, 264, 8294, 337, 1649, 437, 307, 264, 5102, 51820], 'temperature': 0.0, 'avg_logprob': -0.1708332243419829, 'compression_ratio': 1.7905759162303665, 'no_speech_prob': 0.002427950268611312}, {'id': 225, 'seek': 149962, 'start': 1499.62, 'end': 1506.62, 'text': ' right 1 here 1 here for 7 what is the pattern 2 here and 1 here not 2 here and 1 here right.', 'tokens': [50364, 558, 502, 510, 502, 510, 337, 1614, 437, 307, 264, 5102, 568, 510, 293, 502, 510, 406, 568, 510, 293, 502, 510, 558, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.2624561464464342, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002384743420407176}, {'id': 226, 'seek': 149962, 'start': 1507.5, 'end': 1514.5, 'text': ' So, we have to say for example for this one ok 2 2 2 registers to T 3 1 register to T', 'tokens': [50758, 407, 11, 321, 362, 281, 584, 337, 1365, 337, 341, 472, 3133, 568, 568, 568, 38351, 281, 314, 805, 502, 7280, 281, 314, 51108], 'temperature': 0.0, 'avg_logprob': -0.2624561464464342, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002384743420407176}, {'id': 227, 'seek': 149962, 'start': 1521.8999999999999, 'end': 1528.8999999999999, 'text': ' 1 you have to store things like that right and when you do that thing if you have a 2', 'tokens': [51478, 502, 291, 362, 281, 3531, 721, 411, 300, 558, 293, 562, 291, 360, 300, 551, 498, 291, 362, 257, 568, 51828], 'temperature': 0.0, 'avg_logprob': -0.2624561464464342, 'compression_ratio': 1.7254901960784315, 'no_speech_prob': 0.002384743420407176}, {'id': 228, 'seek': 152962, 'start': 1529.62, 'end': 1535.1, 'text': ' registers if you are going to generate code for this instruction correct what is the assumption', 'tokens': [50364, 38351, 498, 291, 366, 516, 281, 8460, 3089, 337, 341, 10951, 3006, 437, 307, 264, 15302, 50638], 'temperature': 0.0, 'avg_logprob': -0.1508515301872702, 'compression_ratio': 1.9527896995708154, 'no_speech_prob': 0.0005259377649053931}, {'id': 229, 'seek': 152962, 'start': 1535.1, 'end': 1540.9399999999998, 'text': ' or giving 2 registers here 1 register that and the moment you do that in code generation', 'tokens': [50638, 420, 2902, 568, 38351, 510, 502, 7280, 300, 293, 264, 1623, 291, 360, 300, 294, 3089, 5125, 50930], 'temperature': 0.0, 'avg_logprob': -0.1508515301872702, 'compression_ratio': 1.9527896995708154, 'no_speech_prob': 0.0005259377649053931}, {'id': 230, 'seek': 152962, 'start': 1540.9399999999998, 'end': 1546.7399999999998, 'text': ' what do you have to do you have to generate code for this sub tree first before you generate', 'tokens': [50930, 437, 360, 291, 362, 281, 360, 291, 362, 281, 8460, 3089, 337, 341, 1422, 4230, 700, 949, 291, 8460, 51220], 'temperature': 0.0, 'avg_logprob': -0.1508515301872702, 'compression_ratio': 1.9527896995708154, 'no_speech_prob': 0.0005259377649053931}, {'id': 231, 'seek': 152962, 'start': 1546.7399999999998, 'end': 1552.3799999999999, 'text': ' code for that sub tree and just give me 1 minute I will take your question and within', 'tokens': [51220, 3089, 337, 300, 1422, 4230, 293, 445, 976, 385, 502, 3456, 286, 486, 747, 428, 1168, 293, 1951, 51502], 'temperature': 0.0, 'avg_logprob': -0.1508515301872702, 'compression_ratio': 1.9527896995708154, 'no_speech_prob': 0.0005259377649053931}, {'id': 232, 'seek': 152962, 'start': 1552.3799999999999, 'end': 1557.9799999999998, 'text': ' this sub tree if any of the nodes kind of keep a pattern saying that it has to be evaluated', 'tokens': [51502, 341, 1422, 4230, 498, 604, 295, 264, 13891, 733, 295, 1066, 257, 5102, 1566, 300, 309, 575, 281, 312, 25509, 51782], 'temperature': 0.0, 'avg_logprob': -0.1508515301872702, 'compression_ratio': 1.9527896995708154, 'no_speech_prob': 0.0005259377649053931}, {'id': 233, 'seek': 155798, 'start': 1558.18, 'end': 1564.26, 'text': ' in memory then that has to be evaluated first except for leaf nodes because leaf nodes doing', 'tokens': [50374, 294, 4675, 550, 300, 575, 281, 312, 25509, 700, 3993, 337, 10871, 13891, 570, 10871, 13891, 884, 50678], 'temperature': 0.0, 'avg_logprob': -0.17534596125284832, 'compression_ratio': 1.9607843137254901, 'no_speech_prob': 0.010452087968587875}, {'id': 234, 'seek': 155798, 'start': 1564.26, 'end': 1569.78, 'text': ' it in memory is actually nothing right for example here right you are going to do it', 'tokens': [50678, 309, 294, 4675, 307, 767, 1825, 558, 337, 1365, 510, 558, 291, 366, 516, 281, 360, 309, 50954], 'temperature': 0.0, 'avg_logprob': -0.17534596125284832, 'compression_ratio': 1.9607843137254901, 'no_speech_prob': 0.010452087968587875}, {'id': 235, 'seek': 155798, 'start': 1569.78, 'end': 1574.78, 'text': ' in memory, but that is really nothing you do not generate any code for that, but for', 'tokens': [50954, 294, 4675, 11, 457, 300, 307, 534, 1825, 291, 360, 406, 8460, 604, 3089, 337, 300, 11, 457, 337, 51204], 'temperature': 0.0, 'avg_logprob': -0.17534596125284832, 'compression_ratio': 1.9607843137254901, 'no_speech_prob': 0.010452087968587875}, {'id': 236, 'seek': 155798, 'start': 1574.78, 'end': 1580.06, 'text': ' all other internal nodes if something needs to be done in memory then for that code needs', 'tokens': [51204, 439, 661, 6920, 13891, 498, 746, 2203, 281, 312, 1096, 294, 4675, 550, 337, 300, 3089, 2203, 51468], 'temperature': 0.0, 'avg_logprob': -0.17534596125284832, 'compression_ratio': 1.9607843137254901, 'no_speech_prob': 0.010452087968587875}, {'id': 237, 'seek': 155798, 'start': 1580.06, 'end': 1587.06, 'text': ' to be generated yes sir question your question.', 'tokens': [51468, 281, 312, 10833, 2086, 4735, 1168, 428, 1168, 13, 51818], 'temperature': 0.0, 'avg_logprob': -0.17534596125284832, 'compression_ratio': 1.9607843137254901, 'no_speech_prob': 0.010452087968587875}, {'id': 238, 'seek': 158798, 'start': 1587.98, 'end': 1608.42, 'text': ' 2 registers to T 1 right and 1 register to 0 registers okay 2 registers will give you', 'tokens': [50364, 568, 38351, 281, 314, 502, 558, 293, 502, 7280, 281, 1958, 38351, 1392, 568, 38351, 486, 976, 291, 51386], 'temperature': 0.0, 'avg_logprob': -0.26048105413263495, 'compression_ratio': 1.3076923076923077, 'no_speech_prob': 0.016569146886467934}, {'id': 239, 'seek': 160842, 'start': 1608.42, 'end': 1622.78, 'text': ' this and 0 registers will give you what right it is actually not when you give 2 registers', 'tokens': [50364, 341, 293, 1958, 38351, 486, 976, 291, 437, 558, 309, 307, 767, 406, 562, 291, 976, 568, 38351, 51082], 'temperature': 0.0, 'avg_logprob': -0.17416011310014567, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0069624087773263454}, {'id': 240, 'seek': 160842, 'start': 1622.78, 'end': 1627.98, 'text': ' to here you can as well give 1 register, but that 1 register also could be including memory', 'tokens': [51082, 281, 510, 291, 393, 382, 731, 976, 502, 7280, 11, 457, 300, 502, 7280, 611, 727, 312, 3009, 4675, 51342], 'temperature': 0.0, 'avg_logprob': -0.17416011310014567, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0069624087773263454}, {'id': 241, 'seek': 160842, 'start': 1627.98, 'end': 1635.26, 'text': ' cost okay you can consider either 1 register cost or you should consider memory cost whichever', 'tokens': [51342, 2063, 1392, 291, 393, 1949, 2139, 502, 7280, 2063, 420, 291, 820, 1949, 4675, 2063, 24123, 51706], 'temperature': 0.0, 'avg_logprob': -0.17416011310014567, 'compression_ratio': 1.8104575163398693, 'no_speech_prob': 0.0069624087773263454}, {'id': 242, 'seek': 163526, 'start': 1635.26, 'end': 1640.66, 'text': ' is lower right in fact what you will do is that you will actually look at this entire', 'tokens': [50364, 307, 3126, 558, 294, 1186, 437, 291, 486, 360, 307, 300, 291, 486, 767, 574, 412, 341, 2302, 50634], 'temperature': 0.0, 'avg_logprob': -0.1523007598577761, 'compression_ratio': 1.9734513274336283, 'no_speech_prob': 0.03598474711179733}, {'id': 243, 'seek': 163526, 'start': 1640.66, 'end': 1645.62, 'text': ' array and then if you are looking at some k registers you will look at all values k', 'tokens': [50634, 10225, 293, 550, 498, 291, 366, 1237, 412, 512, 350, 38351, 291, 486, 574, 412, 439, 4190, 350, 50882], 'temperature': 0.0, 'avg_logprob': -0.1523007598577761, 'compression_ratio': 1.9734513274336283, 'no_speech_prob': 0.03598474711179733}, {'id': 244, 'seek': 163526, 'start': 1645.62, 'end': 1653.46, 'text': ' minus 1 k minus 2 etcetera up to memory okay whatever is the minimum cost we can take because', 'tokens': [50882, 3175, 502, 350, 3175, 568, 22066, 493, 281, 4675, 1392, 2035, 307, 264, 7285, 2063, 321, 393, 747, 570, 51274], 'temperature': 0.0, 'avg_logprob': -0.1523007598577761, 'compression_ratio': 1.9734513274336283, 'no_speech_prob': 0.03598474711179733}, {'id': 245, 'seek': 163526, 'start': 1653.46, 'end': 1658.66, 'text': ' doing it in this in fact you would have done that already because this minimum cost itself', 'tokens': [51274, 884, 309, 294, 341, 294, 1186, 291, 576, 362, 1096, 300, 1217, 570, 341, 7285, 2063, 2564, 51534], 'temperature': 0.0, 'avg_logprob': -0.1523007598577761, 'compression_ratio': 1.9734513274336283, 'no_speech_prob': 0.03598474711179733}, {'id': 246, 'seek': 163526, 'start': 1658.66, 'end': 1665.02, 'text': ' would have worked out that way okay doing it using that many registers 1 k minus 1 register', 'tokens': [51534, 576, 362, 2732, 484, 300, 636, 1392, 884, 309, 1228, 300, 867, 38351, 502, 350, 3175, 502, 7280, 51852], 'temperature': 0.0, 'avg_logprob': -0.1523007598577761, 'compression_ratio': 1.9734513274336283, 'no_speech_prob': 0.03598474711179733}, {'id': 247, 'seek': 166502, 'start': 1665.78, 'end': 1673.54, 'text': ' right is actually what it is so it is fine okay it would have effectively result in this', 'tokens': [50402, 558, 307, 767, 437, 309, 307, 370, 309, 307, 2489, 1392, 309, 576, 362, 8659, 1874, 294, 341, 50790], 'temperature': 0.0, 'avg_logprob': -0.1504999039665101, 'compression_ratio': 1.6898734177215189, 'no_speech_prob': 0.006073951255530119}, {'id': 248, 'seek': 166502, 'start': 1673.54, 'end': 1679.7, 'text': ' case so in this case if you give 2 registers to T 1 and only 1 register to T 3 you are', 'tokens': [50790, 1389, 370, 294, 341, 1389, 498, 291, 976, 568, 38351, 281, 314, 502, 293, 787, 502, 7280, 281, 314, 805, 291, 366, 51098], 'temperature': 0.0, 'avg_logprob': -0.1504999039665101, 'compression_ratio': 1.6898734177215189, 'no_speech_prob': 0.006073951255530119}, {'id': 249, 'seek': 166502, 'start': 1679.7, 'end': 1688.46, 'text': ' either going to choose this pattern or this pattern okay and unfortunately these 2 patterns', 'tokens': [51098, 2139, 516, 281, 2826, 341, 5102, 420, 341, 5102, 1392, 293, 7015, 613, 568, 8294, 51536], 'temperature': 0.0, 'avg_logprob': -0.1504999039665101, 'compression_ratio': 1.6898734177215189, 'no_speech_prob': 0.006073951255530119}, {'id': 250, 'seek': 168846, 'start': 1688.46, 'end': 1696.26, 'text': ' are going to result in a higher cost whereas what you want is this and if you want that', 'tokens': [50364, 366, 516, 281, 1874, 294, 257, 2946, 2063, 9735, 437, 291, 528, 307, 341, 293, 498, 291, 528, 300, 50754], 'temperature': 0.0, 'avg_logprob': -0.1430622685340143, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.037798020988702774}, {'id': 251, 'seek': 168846, 'start': 1696.26, 'end': 1701.78, 'text': ' you should have given 2 registers to T 3 and 1 register to T 1 and that means that you', 'tokens': [50754, 291, 820, 362, 2212, 568, 38351, 281, 314, 805, 293, 502, 7280, 281, 314, 502, 293, 300, 1355, 300, 291, 51030], 'temperature': 0.0, 'avg_logprob': -0.1430622685340143, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.037798020988702774}, {'id': 252, 'seek': 168846, 'start': 1701.78, 'end': 1711.3, 'text': ' have to evaluate this sub tree first before evaluating that sub right any questions okay', 'tokens': [51030, 362, 281, 13059, 341, 1422, 4230, 700, 949, 27479, 300, 1422, 558, 604, 1651, 1392, 51506], 'temperature': 0.0, 'avg_logprob': -0.1430622685340143, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.037798020988702774}, {'id': 253, 'seek': 171130, 'start': 1711.46, 'end': 1718.86, 'text': ' So let us now so this process is basically computing the cost right for all the nodes', 'tokens': [50372, 407, 718, 505, 586, 370, 341, 1399, 307, 1936, 15866, 264, 2063, 558, 337, 439, 264, 13891, 50742], 'temperature': 0.0, 'avg_logprob': -0.1079844313782531, 'compression_ratio': 1.8624338624338623, 'no_speech_prob': 0.06025625392794609}, {'id': 254, 'seek': 171130, 'start': 1718.86, 'end': 1725.22, 'text': ' now we still have to generate code remember computing the cost is bottom up and generating', 'tokens': [50742, 586, 321, 920, 362, 281, 8460, 3089, 1604, 15866, 264, 2063, 307, 2767, 493, 293, 17746, 51060], 'temperature': 0.0, 'avg_logprob': -0.1079844313782531, 'compression_ratio': 1.8624338624338623, 'no_speech_prob': 0.06025625392794609}, {'id': 255, 'seek': 171130, 'start': 1725.22, 'end': 1732.58, 'text': ' the code is going to be top down so you look at this for every node choose that particular', 'tokens': [51060, 264, 3089, 307, 516, 281, 312, 1192, 760, 370, 291, 574, 412, 341, 337, 633, 9984, 2826, 300, 1729, 51428], 'temperature': 0.0, 'avg_logprob': -0.1079844313782531, 'compression_ratio': 1.8624338624338623, 'no_speech_prob': 0.06025625392794609}, {'id': 256, 'seek': 171130, 'start': 1732.58, 'end': 1738.3799999999999, 'text': ' value which has the minimum cost right and then for that particular minimum cost you', 'tokens': [51428, 2158, 597, 575, 264, 7285, 2063, 558, 293, 550, 337, 300, 1729, 7285, 2063, 291, 51718], 'temperature': 0.0, 'avg_logprob': -0.1079844313782531, 'compression_ratio': 1.8624338624338623, 'no_speech_prob': 0.06025625392794609}, {'id': 257, 'seek': 173838, 'start': 1738.38, 'end': 1744.0600000000002, 'text': ' also know how to generate code for example for this 7 we saw that you have to allocate', 'tokens': [50364, 611, 458, 577, 281, 8460, 3089, 337, 1365, 337, 341, 1614, 321, 1866, 300, 291, 362, 281, 35713, 50648], 'temperature': 0.0, 'avg_logprob': -0.10927071021153377, 'compression_ratio': 2.0046082949308754, 'no_speech_prob': 0.006591225042939186}, {'id': 258, 'seek': 173838, 'start': 1744.0600000000002, 'end': 1751.18, 'text': ' 2 registers to T 3 and 1 register to T 1 and the moment you say 2 registers to T 3 you', 'tokens': [50648, 568, 38351, 281, 314, 805, 293, 502, 7280, 281, 314, 502, 293, 264, 1623, 291, 584, 568, 38351, 281, 314, 805, 291, 51004], 'temperature': 0.0, 'avg_logprob': -0.10927071021153377, 'compression_ratio': 2.0046082949308754, 'no_speech_prob': 0.006591225042939186}, {'id': 259, 'seek': 173838, 'start': 1751.18, 'end': 1757.7, 'text': ' know that you have to evaluate this sub tree first correct therefore the moment you say', 'tokens': [51004, 458, 300, 291, 362, 281, 13059, 341, 1422, 4230, 700, 3006, 4412, 264, 1623, 291, 584, 51330], 'temperature': 0.0, 'avg_logprob': -0.10927071021153377, 'compression_ratio': 2.0046082949308754, 'no_speech_prob': 0.006591225042939186}, {'id': 260, 'seek': 173838, 'start': 1757.7, 'end': 1761.98, 'text': ' that you have to I mean of course the code generated is going to be the other way around', 'tokens': [51330, 300, 291, 362, 281, 286, 914, 295, 1164, 264, 3089, 10833, 307, 516, 281, 312, 264, 661, 636, 926, 51544], 'temperature': 0.0, 'avg_logprob': -0.10927071021153377, 'compression_ratio': 2.0046082949308754, 'no_speech_prob': 0.006591225042939186}, {'id': 261, 'seek': 173838, 'start': 1761.98, 'end': 1767.38, 'text': ' okay you will not generate code like this but here the code that has to be generated', 'tokens': [51544, 1392, 291, 486, 406, 8460, 3089, 411, 341, 457, 510, 264, 3089, 300, 575, 281, 312, 10833, 51814], 'temperature': 0.0, 'avg_logprob': -0.10927071021153377, 'compression_ratio': 2.0046082949308754, 'no_speech_prob': 0.006591225042939186}, {'id': 262, 'seek': 176738, 'start': 1767.38, 'end': 1772.14, 'text': ' is something like this is going to be well let us actually do it the other way around', 'tokens': [50364, 307, 746, 411, 341, 307, 516, 281, 312, 731, 718, 505, 767, 360, 309, 264, 661, 636, 926, 50602], 'temperature': 0.0, 'avg_logprob': -0.11489507763884789, 'compression_ratio': 1.792929292929293, 'no_speech_prob': 0.010235726833343506}, {'id': 263, 'seek': 176738, 'start': 1772.14, 'end': 1777.2600000000002, 'text': ' right then you come down right and then you say that next I have to generate code for', 'tokens': [50602, 558, 550, 291, 808, 760, 558, 293, 550, 291, 584, 300, 958, 286, 362, 281, 8460, 3089, 337, 50858], 'temperature': 0.0, 'avg_logprob': -0.11489507763884789, 'compression_ratio': 1.792929292929293, 'no_speech_prob': 0.010235726833343506}, {'id': 264, 'seek': 176738, 'start': 1777.2600000000002, 'end': 1784.6200000000001, 'text': ' T 3 before generating code for T 1 right now how do we generate code for T 3 again you', 'tokens': [50858, 314, 805, 949, 17746, 3089, 337, 314, 502, 558, 586, 577, 360, 321, 8460, 3089, 337, 314, 805, 797, 291, 51226], 'temperature': 0.0, 'avg_logprob': -0.11489507763884789, 'compression_ratio': 1.792929292929293, 'no_speech_prob': 0.010235726833343506}, {'id': 265, 'seek': 176738, 'start': 1784.6200000000001, 'end': 1793.38, 'text': ' look at it 2 registers okay that is the minimum cost and you have to use right for that whatever', 'tokens': [51226, 574, 412, 309, 568, 38351, 1392, 300, 307, 264, 7285, 2063, 293, 291, 362, 281, 764, 558, 337, 300, 2035, 51664], 'temperature': 0.0, 'avg_logprob': -0.11489507763884789, 'compression_ratio': 1.792929292929293, 'no_speech_prob': 0.010235726833343506}, {'id': 266, 'seek': 179338, 'start': 1793.38, 'end': 1798.5800000000002, 'text': ' is the pattern then you will follow that pattern might be 1 register here and 1 register', 'tokens': [50364, 307, 264, 5102, 550, 291, 486, 1524, 300, 5102, 1062, 312, 502, 7280, 510, 293, 502, 7280, 50624], 'temperature': 0.0, 'avg_logprob': -0.16878980856675369, 'compression_ratio': 2.1407766990291264, 'no_speech_prob': 0.34577736258506775}, {'id': 267, 'seek': 179338, 'start': 1798.5800000000002, 'end': 1805.6200000000001, 'text': ' there right and this 1 register mean move this to blah blah and then do this and then', 'tokens': [50624, 456, 558, 293, 341, 502, 7280, 914, 1286, 341, 281, 12288, 12288, 293, 550, 360, 341, 293, 550, 50976], 'temperature': 0.0, 'avg_logprob': -0.16878980856675369, 'compression_ratio': 2.1407766990291264, 'no_speech_prob': 0.34577736258506775}, {'id': 268, 'seek': 179338, 'start': 1805.6200000000001, 'end': 1810.3400000000001, 'text': ' do this then you come to this side then here you will say that I have to use 1 register', 'tokens': [50976, 360, 341, 550, 291, 808, 281, 341, 1252, 550, 510, 291, 486, 584, 300, 286, 362, 281, 764, 502, 7280, 51212], 'temperature': 0.0, 'avg_logprob': -0.16878980856675369, 'compression_ratio': 2.1407766990291264, 'no_speech_prob': 0.34577736258506775}, {'id': 269, 'seek': 179338, 'start': 1810.3400000000001, 'end': 1815.8200000000002, 'text': ' which will be move a comma into some register and do this again you will try to see whether', 'tokens': [51212, 597, 486, 312, 1286, 257, 22117, 666, 512, 7280, 293, 360, 341, 797, 291, 486, 853, 281, 536, 1968, 51486], 'temperature': 0.0, 'avg_logprob': -0.16878980856675369, 'compression_ratio': 2.1407766990291264, 'no_speech_prob': 0.34577736258506775}, {'id': 270, 'seek': 179338, 'start': 1815.8200000000002, 'end': 1821.94, 'text': ' you can evaluate this in the same way that the left sub tree value is evaluated in the', 'tokens': [51486, 291, 393, 13059, 341, 294, 264, 912, 636, 300, 264, 1411, 1422, 4230, 2158, 307, 25509, 294, 264, 51792], 'temperature': 0.0, 'avg_logprob': -0.16878980856675369, 'compression_ratio': 2.1407766990291264, 'no_speech_prob': 0.34577736258506775}, {'id': 271, 'seek': 182194, 'start': 1822.06, 'end': 1827.78, 'text': ' same register of the destination register right the ordering that in way in which I', 'tokens': [50370, 912, 7280, 295, 264, 12236, 7280, 558, 264, 21739, 300, 294, 636, 294, 597, 286, 50656], 'temperature': 0.0, 'avg_logprob': -0.17042372178058235, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.05528590828180313}, {'id': 272, 'seek': 182194, 'start': 1827.78, 'end': 1832.8600000000001, 'text': ' have given is basically to remember the pattern not to generate the code obviously you have', 'tokens': [50656, 362, 2212, 307, 1936, 281, 1604, 264, 5102, 406, 281, 8460, 264, 3089, 2745, 291, 362, 50910], 'temperature': 0.0, 'avg_logprob': -0.17042372178058235, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.05528590828180313}, {'id': 273, 'seek': 182194, 'start': 1832.8600000000001, 'end': 1837.46, 'text': ' to generate the code from the leaf node to the not bottom up it is top down but it is', 'tokens': [50910, 281, 8460, 264, 3089, 490, 264, 10871, 9984, 281, 264, 406, 2767, 493, 309, 307, 1192, 760, 457, 309, 307, 51140], 'temperature': 0.0, 'avg_logprob': -0.17042372178058235, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.05528590828180313}, {'id': 274, 'seek': 182194, 'start': 1837.46, 'end': 1843.02, 'text': ' a recursive procedure it will go to the leaf node generate code and then go to the parent', 'tokens': [51140, 257, 20560, 488, 10747, 309, 486, 352, 281, 264, 10871, 9984, 8460, 3089, 293, 550, 352, 281, 264, 2596, 51418], 'temperature': 0.0, 'avg_logprob': -0.17042372178058235, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.05528590828180313}, {'id': 275, 'seek': 182194, 'start': 1843.02, 'end': 1848.22, 'text': ' node remember the code generation mechanism that we saw in the labeling and you are trying', 'tokens': [51418, 9984, 1604, 264, 3089, 5125, 7513, 300, 321, 1866, 294, 264, 40244, 293, 291, 366, 1382, 51678], 'temperature': 0.0, 'avg_logprob': -0.17042372178058235, 'compression_ratio': 1.9301310043668123, 'no_speech_prob': 0.05528590828180313}, {'id': 276, 'seek': 184822, 'start': 1848.42, 'end': 1854.6200000000001, 'text': ' to do this swap registers and other things something very similar okay that is really', 'tokens': [50374, 281, 360, 341, 18135, 38351, 293, 661, 721, 746, 588, 2531, 1392, 300, 307, 534, 50684], 'temperature': 0.0, 'avg_logprob': -0.28006722270578577, 'compression_ratio': 1.614213197969543, 'no_speech_prob': 0.04188036173582077}, {'id': 277, 'seek': 184822, 'start': 1854.6200000000001, 'end': 1858.74, 'text': ' what happens here okay so we are not going to go through the code generation process', 'tokens': [50684, 437, 2314, 510, 1392, 370, 321, 366, 406, 516, 281, 352, 807, 264, 3089, 5125, 1399, 50890], 'temperature': 0.0, 'avg_logprob': -0.28006722270578577, 'compression_ratio': 1.614213197969543, 'no_speech_prob': 0.04188036173582077}, {'id': 278, 'seek': 184822, 'start': 1858.74, 'end': 1864.06, 'text': ' in any more details other than looking at this level of detail right all right any questions', 'tokens': [50890, 294, 604, 544, 4365, 661, 813, 1237, 412, 341, 1496, 295, 2607, 558, 439, 558, 604, 1651, 51156], 'temperature': 0.0, 'avg_logprob': -0.28006722270578577, 'compression_ratio': 1.614213197969543, 'no_speech_prob': 0.04188036173582077}, {'id': 279, 'seek': 184822, 'start': 1864.06, 'end': 1875.14, 'text': ' yeah. Two different approaches that is all. Complexity', 'tokens': [51156, 1338, 13, 4453, 819, 11587, 300, 307, 439, 13, 41184, 507, 51710], 'temperature': 0.0, 'avg_logprob': -0.28006722270578577, 'compression_ratio': 1.614213197969543, 'no_speech_prob': 0.04188036173582077}, {'id': 280, 'seek': 187514, 'start': 1875.14, 'end': 1890.38, 'text': ' wise both are going to be more or less the same yes space meaning yes yes yes so whereas', 'tokens': [50364, 10829, 1293, 366, 516, 281, 312, 544, 420, 1570, 264, 912, 2086, 1901, 3620, 2086, 2086, 2086, 370, 9735, 51126], 'temperature': 0.0, 'avg_logprob': -0.3073598598611766, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.18317940831184387}, {'id': 281, 'seek': 187514, 'start': 1890.38, 'end': 1895.5, 'text': ' that is a labeling approach yes okay I am not really sure whether there are any other', 'tokens': [51126, 300, 307, 257, 40244, 3109, 2086, 1392, 286, 669, 406, 534, 988, 1968, 456, 366, 604, 661, 51382], 'temperature': 0.0, 'avg_logprob': -0.3073598598611766, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.18317940831184387}, {'id': 282, 'seek': 187514, 'start': 1895.5, 'end': 1900.5, 'text': ' advantages of dynamic programming I do not recall but yeah they are somewhat similar', 'tokens': [51382, 14906, 295, 8546, 9410, 286, 360, 406, 9901, 457, 1338, 436, 366, 8344, 2531, 51632], 'temperature': 0.0, 'avg_logprob': -0.3073598598611766, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.18317940831184387}, {'id': 283, 'seek': 190050, 'start': 1900.5, 'end': 1909.1, 'text': ' approach yeah so that is also going to be stored in an array along with that so you', 'tokens': [50364, 3109, 1338, 370, 300, 307, 611, 516, 281, 312, 12187, 294, 364, 10225, 2051, 365, 300, 370, 291, 50794], 'temperature': 0.0, 'avg_logprob': -0.19621663093566893, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.08418454974889755}, {'id': 284, 'seek': 190050, 'start': 1909.1, 'end': 1913.66, 'text': ' have the C array which is the cost array and similarly a P array which is let us say the', 'tokens': [50794, 362, 264, 383, 10225, 597, 307, 264, 2063, 10225, 293, 14138, 257, 430, 10225, 597, 307, 718, 505, 584, 264, 51022], 'temperature': 0.0, 'avg_logprob': -0.19621663093566893, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.08418454974889755}, {'id': 285, 'seek': 190050, 'start': 1913.66, 'end': 1921.46, 'text': ' pattern array which will store how to distribute the registers for that particular cost right', 'tokens': [51022, 5102, 10225, 597, 486, 3531, 577, 281, 20594, 264, 38351, 337, 300, 1729, 2063, 558, 51412], 'temperature': 0.0, 'avg_logprob': -0.19621663093566893, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.08418454974889755}, {'id': 286, 'seek': 190050, 'start': 1921.46, 'end': 1926.94, 'text': ' we did not explicitly talk about that but that cost is included which adds to his point', 'tokens': [51412, 321, 630, 406, 20803, 751, 466, 300, 457, 300, 2063, 307, 5556, 597, 10860, 281, 702, 935, 51686], 'temperature': 0.0, 'avg_logprob': -0.19621663093566893, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.08418454974889755}, {'id': 287, 'seek': 192694, 'start': 1927.06, 'end': 1936.06, 'text': ' more storage cost right any other questions right we will see one more mechanism for generating', 'tokens': [50370, 544, 6725, 2063, 558, 604, 661, 1651, 558, 321, 486, 536, 472, 544, 7513, 337, 17746, 50820], 'temperature': 0.0, 'avg_logprob': -0.18985520468817818, 'compression_ratio': 1.6416184971098267, 'no_speech_prob': 0.05460860952734947}, {'id': 288, 'seek': 192694, 'start': 1936.06, 'end': 1947.3400000000001, 'text': ' code right and that is the tree pattern matching approach this also allows you to select appropriate', 'tokens': [50820, 3089, 558, 293, 300, 307, 264, 4230, 5102, 14324, 3109, 341, 611, 4045, 291, 281, 3048, 6854, 51384], 'temperature': 0.0, 'avg_logprob': -0.18985520468817818, 'compression_ratio': 1.6416184971098267, 'no_speech_prob': 0.05460860952734947}, {'id': 289, 'seek': 192694, 'start': 1947.3400000000001, 'end': 1952.46, 'text': ' instructions remember when we talked about this code generation scheme the dynamic code', 'tokens': [51384, 9415, 1604, 562, 321, 2825, 466, 341, 3089, 5125, 12232, 264, 8546, 3089, 51640], 'temperature': 0.0, 'avg_logprob': -0.18985520468817818, 'compression_ratio': 1.6416184971098267, 'no_speech_prob': 0.05460860952734947}, {'id': 290, 'seek': 195246, 'start': 1952.46, 'end': 1958.22, 'text': ' generation scheme and the dynamic programming approach based code generation scheme for each', 'tokens': [50364, 5125, 12232, 293, 264, 8546, 9410, 3109, 2361, 3089, 5125, 12232, 337, 1184, 50652], 'temperature': 0.0, 'avg_logprob': -0.12283994073737158, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.03821384906768799}, {'id': 291, 'seek': 195246, 'start': 1958.22, 'end': 1963.66, 'text': ' node not only you consider these different possibilities of which register to be given', 'tokens': [50652, 9984, 406, 787, 291, 1949, 613, 819, 12178, 295, 597, 7280, 281, 312, 2212, 50924], 'temperature': 0.0, 'avg_logprob': -0.12283994073737158, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.03821384906768799}, {'id': 292, 'seek': 195246, 'start': 1963.66, 'end': 1969.7, 'text': ' to what you can also think in terms of what other instructions can possibly implement this', 'tokens': [50924, 281, 437, 291, 393, 611, 519, 294, 2115, 295, 437, 661, 9415, 393, 6264, 4445, 341, 51226], 'temperature': 0.0, 'avg_logprob': -0.12283994073737158, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.03821384906768799}, {'id': 293, 'seek': 195246, 'start': 1969.7, 'end': 1976.1000000000001, 'text': ' that also needs to be looked at okay of course here we do not have an example which kind of', 'tokens': [51226, 300, 611, 2203, 281, 312, 2956, 412, 1392, 295, 1164, 510, 321, 360, 406, 362, 364, 1365, 597, 733, 295, 51546], 'temperature': 0.0, 'avg_logprob': -0.12283994073737158, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.03821384906768799}, {'id': 294, 'seek': 197610, 'start': 1976.1, 'end': 1984.86, 'text': ' meets that but for example let us say if this is A plus 1 right when I give you a example for tree', 'tokens': [50364, 13961, 300, 457, 337, 1365, 718, 505, 584, 498, 341, 307, 316, 1804, 502, 558, 562, 286, 976, 291, 257, 1365, 337, 4230, 50802], 'temperature': 0.0, 'avg_logprob': -0.12950796491644356, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.08805909007787704}, {'id': 295, 'seek': 197610, 'start': 1984.86, 'end': 1989.3799999999999, 'text': ' pattern matching it will become more obvious but let us say for the time being that this is', 'tokens': [50802, 5102, 14324, 309, 486, 1813, 544, 6322, 457, 718, 505, 584, 337, 264, 565, 885, 300, 341, 307, 51028], 'temperature': 0.0, 'avg_logprob': -0.12950796491644356, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.08805909007787704}, {'id': 296, 'seek': 197610, 'start': 1989.3799999999999, 'end': 1996.5, 'text': ' computing A plus 1 instead of A plus B right then in that case it would have been better to do an', 'tokens': [51028, 15866, 316, 1804, 502, 2602, 295, 316, 1804, 363, 558, 550, 294, 300, 1389, 309, 576, 362, 668, 1101, 281, 360, 364, 51384], 'temperature': 0.0, 'avg_logprob': -0.12950796491644356, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.08805909007787704}, {'id': 297, 'seek': 197610, 'start': 1996.5, 'end': 2004.3, 'text': ' increment operation right and if the architecture allows you to do an increment operation even in', 'tokens': [51384, 26200, 6916, 558, 293, 498, 264, 9482, 4045, 291, 281, 360, 364, 26200, 6916, 754, 294, 51774], 'temperature': 0.0, 'avg_logprob': -0.12950796491644356, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.08805909007787704}, {'id': 298, 'seek': 200430, 'start': 2004.3, 'end': 2011.6599999999999, 'text': ' memory then that is even better because it will actually have a cost of 1 for this entire sub tree', 'tokens': [50364, 4675, 550, 300, 307, 754, 1101, 570, 309, 486, 767, 362, 257, 2063, 295, 502, 337, 341, 2302, 1422, 4230, 50732], 'temperature': 0.0, 'avg_logprob': -0.1129644748776458, 'compression_ratio': 1.7477477477477477, 'no_speech_prob': 0.01983749121427536}, {'id': 299, 'seek': 200430, 'start': 2011.6599999999999, 'end': 2018.58, 'text': ' correct otherwise you have to move it into a register increment 1 but if it allows you to', 'tokens': [50732, 3006, 5911, 291, 362, 281, 1286, 309, 666, 257, 7280, 26200, 502, 457, 498, 309, 4045, 291, 281, 51078], 'temperature': 0.0, 'avg_logprob': -0.1129644748776458, 'compression_ratio': 1.7477477477477477, 'no_speech_prob': 0.01983749121427536}, {'id': 300, 'seek': 200430, 'start': 2018.58, 'end': 2025.1, 'text': ' increment it in memory then you could have actually done this using that so again it depends so you', 'tokens': [51078, 26200, 309, 294, 4675, 550, 291, 727, 362, 767, 1096, 341, 1228, 300, 370, 797, 309, 5946, 370, 291, 51404], 'temperature': 0.0, 'avg_logprob': -0.1129644748776458, 'compression_ratio': 1.7477477477477477, 'no_speech_prob': 0.01983749121427536}, {'id': 301, 'seek': 200430, 'start': 2025.1, 'end': 2031.22, 'text': ' need to consider all possible combinations but it can still be done now let us see how tree pattern', 'tokens': [51404, 643, 281, 1949, 439, 1944, 21267, 457, 309, 393, 920, 312, 1096, 586, 718, 505, 536, 577, 4230, 5102, 51710], 'temperature': 0.0, 'avg_logprob': -0.1129644748776458, 'compression_ratio': 1.7477477477477477, 'no_speech_prob': 0.01983749121427536}, {'id': 302, 'seek': 203122, 'start': 2031.22, 'end': 2036.22, 'text': ' matching essentially does many of these things and allows you to do appropriate instruction', 'tokens': [50364, 14324, 4476, 775, 867, 295, 613, 721, 293, 4045, 291, 281, 360, 6854, 10951, 50614], 'temperature': 0.0, 'avg_logprob': -0.08889288306236268, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.04098372161388397}, {'id': 303, 'seek': 203122, 'start': 2036.22, 'end': 2043.6200000000001, 'text': ' selection as well okay so that is the next thing that you are going to talk about okay so there', 'tokens': [50614, 9450, 382, 731, 1392, 370, 300, 307, 264, 958, 551, 300, 291, 366, 516, 281, 751, 466, 1392, 370, 456, 50984], 'temperature': 0.0, 'avg_logprob': -0.08889288306236268, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.04098372161388397}, {'id': 304, 'seek': 203122, 'start': 2043.6200000000001, 'end': 2048.94, 'text': ' are many different possible ways by which we can select the instruction and choosing the appropriate', 'tokens': [50984, 366, 867, 819, 1944, 2098, 538, 597, 321, 393, 3048, 264, 10951, 293, 10875, 264, 6854, 51250], 'temperature': 0.0, 'avg_logprob': -0.08889288306236268, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.04098372161388397}, {'id': 305, 'seek': 203122, 'start': 2048.94, 'end': 2056.5, 'text': ' one is a complex problem right and you do not want to kind of manually also write many of these', 'tokens': [51250, 472, 307, 257, 3997, 1154, 558, 293, 291, 360, 406, 528, 281, 733, 295, 16945, 611, 2464, 867, 295, 613, 51628], 'temperature': 0.0, 'avg_logprob': -0.08889288306236268, 'compression_ratio': 1.819905213270142, 'no_speech_prob': 0.04098372161388397}, {'id': 306, 'seek': 205650, 'start': 2056.5, 'end': 2063.26, 'text': ' code again different possible addressing modes are there that also complicates the matter and', 'tokens': [50364, 3089, 797, 819, 1944, 14329, 14068, 366, 456, 300, 611, 16060, 1024, 264, 1871, 293, 50702], 'temperature': 0.0, 'avg_logprob': -0.123982455632458, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.061066512018442154}, {'id': 307, 'seek': 205650, 'start': 2063.26, 'end': 2068.9, 'text': ' there are different possible instruction combinations that can also generate code for the same set of', 'tokens': [50702, 456, 366, 819, 1944, 10951, 21267, 300, 393, 611, 8460, 3089, 337, 264, 912, 992, 295, 50984], 'temperature': 0.0, 'avg_logprob': -0.123982455632458, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.061066512018442154}, {'id': 308, 'seek': 205650, 'start': 2068.9, 'end': 2076.7, 'text': ' instruction and lastly we want to see whether this process of right writing the code generator', 'tokens': [50984, 10951, 293, 16386, 321, 528, 281, 536, 1968, 341, 1399, 295, 558, 3579, 264, 3089, 19265, 51374], 'temperature': 0.0, 'avg_logprob': -0.123982455632458, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.061066512018442154}, {'id': 309, 'seek': 205650, 'start': 2076.7, 'end': 2082.78, 'text': ' itself can be automated right for example let us say you wrote a code generator for', 'tokens': [51374, 2564, 393, 312, 18473, 558, 337, 1365, 718, 505, 584, 291, 4114, 257, 3089, 19265, 337, 51678], 'temperature': 0.0, 'avg_logprob': -0.123982455632458, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.061066512018442154}, {'id': 310, 'seek': 208278, 'start': 2082.78, 'end': 2089.38, 'text': ' architecture a but tomorrow you want to write a code generator for architecture b do you have', 'tokens': [50364, 9482, 257, 457, 4153, 291, 528, 281, 2464, 257, 3089, 19265, 337, 9482, 272, 360, 291, 362, 50694], 'temperature': 0.0, 'avg_logprob': -0.15799576044082642, 'compression_ratio': 2.2804878048780486, 'no_speech_prob': 0.04818090796470642}, {'id': 311, 'seek': 208278, 'start': 2089.38, 'end': 2095.6200000000003, 'text': ' to go in and rewrite that entire code generator for architecture b or can architecture a and', 'tokens': [50694, 281, 352, 294, 293, 28132, 300, 2302, 3089, 19265, 337, 9482, 272, 420, 393, 9482, 257, 293, 51006], 'temperature': 0.0, 'avg_logprob': -0.15799576044082642, 'compression_ratio': 2.2804878048780486, 'no_speech_prob': 0.04818090796470642}, {'id': 312, 'seek': 208278, 'start': 2095.6200000000003, 'end': 2101.82, 'text': ' architecture b specified in some way and there is a code generator generator which generates', 'tokens': [51006, 9482, 272, 22206, 294, 512, 636, 293, 456, 307, 257, 3089, 19265, 19265, 597, 23815, 51316], 'temperature': 0.0, 'avg_logprob': -0.15799576044082642, 'compression_ratio': 2.2804878048780486, 'no_speech_prob': 0.04818090796470642}, {'id': 313, 'seek': 208278, 'start': 2101.82, 'end': 2107.82, 'text': ' the code generator for a and the code generator for b can we do that it is possible to do that', 'tokens': [51316, 264, 3089, 19265, 337, 257, 293, 264, 3089, 19265, 337, 272, 393, 321, 360, 300, 309, 307, 1944, 281, 360, 300, 51616], 'temperature': 0.0, 'avg_logprob': -0.15799576044082642, 'compression_ratio': 2.2804878048780486, 'no_speech_prob': 0.04818090796470642}, {'id': 314, 'seek': 210782, 'start': 2107.82, 'end': 2113.82, 'text': ' also and this kind of an approach where you try to do instruction selection using tree pattern', 'tokens': [50364, 611, 293, 341, 733, 295, 364, 3109, 689, 291, 853, 281, 360, 10951, 9450, 1228, 4230, 5102, 50664], 'temperature': 0.0, 'avg_logprob': -0.15227173722308615, 'compression_ratio': 1.8907563025210083, 'no_speech_prob': 0.11211492121219635}, {'id': 315, 'seek': 210782, 'start': 2113.82, 'end': 2119.78, 'text': ' matching enables you to do that in fact we are going to talk briefly talk about two code', 'tokens': [50664, 14324, 17077, 291, 281, 360, 300, 294, 1186, 321, 366, 516, 281, 751, 10515, 751, 466, 732, 3089, 50962], 'temperature': 0.0, 'avg_logprob': -0.15227173722308615, 'compression_ratio': 1.8907563025210083, 'no_speech_prob': 0.11211492121219635}, {'id': 316, 'seek': 210782, 'start': 2119.78, 'end': 2126.06, 'text': ' generator generators which are very popular okay before we go into those details let us first look', 'tokens': [50962, 19265, 38662, 597, 366, 588, 3743, 1392, 949, 321, 352, 666, 729, 4365, 718, 505, 700, 574, 51276], 'temperature': 0.0, 'avg_logprob': -0.15227173722308615, 'compression_ratio': 1.8907563025210083, 'no_speech_prob': 0.11211492121219635}, {'id': 317, 'seek': 210782, 'start': 2126.06, 'end': 2131.38, 'text': ' at how this tree pattern matching based code generation works for this we are going to use', 'tokens': [51276, 412, 577, 341, 4230, 5102, 14324, 2361, 3089, 5125, 1985, 337, 341, 321, 366, 516, 281, 764, 51542], 'temperature': 0.0, 'avg_logprob': -0.15227173722308615, 'compression_ratio': 1.8907563025210083, 'no_speech_prob': 0.11211492121219635}, {'id': 318, 'seek': 210782, 'start': 2131.38, 'end': 2135.34, 'text': ' this intermediate representation which is called the tree intermediate code.', 'tokens': [51542, 341, 19376, 10290, 597, 307, 1219, 264, 4230, 19376, 3089, 13, 51740], 'temperature': 0.0, 'avg_logprob': -0.15227173722308615, 'compression_ratio': 1.8907563025210083, 'no_speech_prob': 0.11211492121219635}, {'id': 319, 'seek': 213534, 'start': 2135.34, 'end': 2140.7400000000002, 'text': ' Tree intermediate code is nothing but a DAG like structure or a tree like structure it is', 'tokens': [50364, 22291, 19376, 3089, 307, 1825, 457, 257, 9578, 38, 411, 3877, 420, 257, 4230, 411, 3877, 309, 307, 50634], 'temperature': 0.0, 'avg_logprob': -0.1450190327384255, 'compression_ratio': 1.978494623655914, 'no_speech_prob': 0.03816226124763489}, {'id': 320, 'seek': 213534, 'start': 2140.7400000000002, 'end': 2146.2200000000003, 'text': ' a tree like structure not a DAG it is a tree like structure okay and let us see an example', 'tokens': [50634, 257, 4230, 411, 3877, 406, 257, 9578, 38, 309, 307, 257, 4230, 411, 3877, 1392, 293, 718, 505, 536, 364, 1365, 50908], 'temperature': 0.0, 'avg_logprob': -0.1450190327384255, 'compression_ratio': 1.978494623655914, 'no_speech_prob': 0.03816226124763489}, {'id': 321, 'seek': 213534, 'start': 2146.2200000000003, 'end': 2152.6200000000003, 'text': ' to understand this so this is the statement intermediate statement that I want to for which', 'tokens': [50908, 281, 1223, 341, 370, 341, 307, 264, 5629, 19376, 5629, 300, 286, 528, 281, 337, 597, 51228], 'temperature': 0.0, 'avg_logprob': -0.1450190327384255, 'compression_ratio': 1.978494623655914, 'no_speech_prob': 0.03816226124763489}, {'id': 322, 'seek': 213534, 'start': 2152.6200000000003, 'end': 2159.7000000000003, 'text': ' I want to generate the code a of i is equal to b plus 1 right and let us try to understand this', 'tokens': [51228, 286, 528, 281, 8460, 264, 3089, 257, 295, 741, 307, 2681, 281, 272, 1804, 502, 558, 293, 718, 505, 853, 281, 1223, 341, 51582], 'temperature': 0.0, 'avg_logprob': -0.1450190327384255, 'compression_ratio': 1.978494623655914, 'no_speech_prob': 0.03816226124763489}, {'id': 323, 'seek': 215970, 'start': 2159.7, 'end': 2165.18, 'text': ' tree representation before we go to anything else and in this particular example let us also', 'tokens': [50364, 4230, 10290, 949, 321, 352, 281, 1340, 1646, 293, 294, 341, 1729, 1365, 718, 505, 611, 50638], 'temperature': 0.0, 'avg_logprob': -0.11634913886465677, 'compression_ratio': 2.026595744680851, 'no_speech_prob': 0.084492526948452}, {'id': 324, 'seek': 215970, 'start': 2165.18, 'end': 2173.74, 'text': ' make sure that we understand what these variables are let us say a and i are local variables what', 'tokens': [50638, 652, 988, 300, 321, 1223, 437, 613, 9102, 366, 718, 505, 584, 257, 293, 741, 366, 2654, 9102, 437, 51066], 'temperature': 0.0, 'avg_logprob': -0.11634913886465677, 'compression_ratio': 2.026595744680851, 'no_speech_prob': 0.084492526948452}, {'id': 325, 'seek': 215970, 'start': 2173.74, 'end': 2178.98, 'text': ' do we mean by local variables where are they stored they are stored in the stack frame and', 'tokens': [51066, 360, 321, 914, 538, 2654, 9102, 689, 366, 436, 12187, 436, 366, 12187, 294, 264, 8630, 3920, 293, 51328], 'temperature': 0.0, 'avg_logprob': -0.11634913886465677, 'compression_ratio': 2.026595744680851, 'no_speech_prob': 0.084492526948452}, {'id': 326, 'seek': 215970, 'start': 2178.98, 'end': 2184.22, 'text': ' when they are stored in the stack frame they are going to be referenced with reference to the stack', 'tokens': [51328, 562, 436, 366, 12187, 294, 264, 8630, 3920, 436, 366, 516, 281, 312, 32734, 365, 6408, 281, 264, 8630, 51590], 'temperature': 0.0, 'avg_logprob': -0.11634913886465677, 'compression_ratio': 2.026595744680851, 'no_speech_prob': 0.084492526948452}, {'id': 327, 'seek': 218422, 'start': 2184.22, 'end': 2191.1, 'text': ' frame address correct that is really what we need to understand and let us say that variable b is', 'tokens': [50364, 3920, 2985, 3006, 300, 307, 534, 437, 321, 643, 281, 1223, 293, 718, 505, 584, 300, 7006, 272, 307, 50708], 'temperature': 0.0, 'avg_logprob': -0.1224365374621223, 'compression_ratio': 1.6685714285714286, 'no_speech_prob': 0.07442662864923477}, {'id': 328, 'seek': 218422, 'start': 2191.1, 'end': 2199.66, 'text': ' global that means it will be in the data segment okay okay now let us remember these things and', 'tokens': [50708, 4338, 300, 1355, 309, 486, 312, 294, 264, 1412, 9469, 1392, 1392, 586, 718, 505, 1604, 613, 721, 293, 51136], 'temperature': 0.0, 'avg_logprob': -0.1224365374621223, 'compression_ratio': 1.6685714285714286, 'no_speech_prob': 0.07442662864923477}, {'id': 329, 'seek': 218422, 'start': 2199.66, 'end': 2209.66, 'text': ' then see how this tree pattern thing works right b plus 1 right 1 is a constant b is in the global', 'tokens': [51136, 550, 536, 577, 341, 4230, 5102, 551, 1985, 558, 272, 1804, 502, 558, 502, 307, 257, 5754, 272, 307, 294, 264, 4338, 51636], 'temperature': 0.0, 'avg_logprob': -0.1224365374621223, 'compression_ratio': 1.6685714285714286, 'no_speech_prob': 0.07442662864923477}, {'id': 330, 'seek': 220966, 'start': 2209.66, 'end': 2216.3399999999997, 'text': ' memory right b sorry b is a global variable therefore it is in the data segment correct and', 'tokens': [50364, 4675, 558, 272, 2597, 272, 307, 257, 4338, 7006, 4412, 309, 307, 294, 264, 1412, 9469, 3006, 293, 50698], 'temperature': 0.0, 'avg_logprob': -0.08635430676596505, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.023857535794377327}, {'id': 331, 'seek': 220966, 'start': 2216.3399999999997, 'end': 2225.7799999999997, 'text': ' if you want to load b either you need to have the address of b and then move it using some', 'tokens': [50698, 498, 291, 528, 281, 3677, 272, 2139, 291, 643, 281, 362, 264, 2985, 295, 272, 293, 550, 1286, 309, 1228, 512, 51170], 'temperature': 0.0, 'avg_logprob': -0.08635430676596505, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.023857535794377327}, {'id': 332, 'seek': 220966, 'start': 2225.7799999999997, 'end': 2231.8199999999997, 'text': ' instruction into a register or you could take the address and then directly use that memory', 'tokens': [51170, 10951, 666, 257, 7280, 420, 291, 727, 747, 264, 2985, 293, 550, 3838, 764, 300, 4675, 51472], 'temperature': 0.0, 'avg_logprob': -0.08635430676596505, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.023857535794377327}, {'id': 333, 'seek': 220966, 'start': 2231.8199999999997, 'end': 2238.8199999999997, 'text': ' location right again you have to think in terms of what addressing modes can be done right if it', 'tokens': [51472, 4914, 558, 797, 291, 362, 281, 519, 294, 2115, 295, 437, 14329, 14068, 393, 312, 1096, 558, 498, 309, 51822], 'temperature': 0.0, 'avg_logprob': -0.08635430676596505, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.023857535794377327}, {'id': 334, 'seek': 223882, 'start': 2238.82, 'end': 2246.1800000000003, 'text': ' is in the data segment then to access b first thing is that you need the address address is', 'tokens': [50364, 307, 294, 264, 1412, 9469, 550, 281, 2105, 272, 700, 551, 307, 300, 291, 643, 264, 2985, 2985, 307, 50732], 'temperature': 0.0, 'avg_logprob': -0.11262238025665283, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.0008680603350512683}, {'id': 335, 'seek': 223882, 'start': 2246.1800000000003, 'end': 2256.02, 'text': ' going to be 32 bits or more correct right okay as opposed to let us look at this i right here', 'tokens': [50732, 516, 281, 312, 8858, 9239, 420, 544, 3006, 558, 1392, 382, 8851, 281, 718, 505, 574, 412, 341, 741, 558, 510, 51224], 'temperature': 0.0, 'avg_logprob': -0.11262238025665283, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.0008680603350512683}, {'id': 336, 'seek': 223882, 'start': 2256.02, 'end': 2266.9, 'text': ' also i need the address of i but this i is a local variable it is in the stack frame so when it is', 'tokens': [51224, 611, 741, 643, 264, 2985, 295, 741, 457, 341, 741, 307, 257, 2654, 7006, 309, 307, 294, 264, 8630, 3920, 370, 562, 309, 307, 51768], 'temperature': 0.0, 'avg_logprob': -0.11262238025665283, 'compression_ratio': 1.7005988023952097, 'no_speech_prob': 0.0008680603350512683}, {'id': 337, 'seek': 226690, 'start': 2266.9, 'end': 2274.6600000000003, 'text': ' in the stack frame this location is going to be relative to that stack pointer location so how', 'tokens': [50364, 294, 264, 8630, 3920, 341, 4914, 307, 516, 281, 312, 4972, 281, 300, 8630, 23918, 4914, 370, 577, 50752], 'temperature': 0.0, 'avg_logprob': -0.12603266512761352, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.002669919515028596}, {'id': 338, 'seek': 226690, 'start': 2274.6600000000003, 'end': 2285.26, 'text': ' do we specify the address now stack pointer plus minus some offset so what is that addressing mode', 'tokens': [50752, 360, 321, 16500, 264, 2985, 586, 8630, 23918, 1804, 3175, 512, 18687, 370, 437, 307, 300, 14329, 4391, 51282], 'temperature': 0.0, 'avg_logprob': -0.12603266512761352, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.002669919515028596}, {'id': 339, 'seek': 226690, 'start': 2285.26, 'end': 2292.78, 'text': ' it is called the displacement addressing mode correct so here i do not need the absolute address', 'tokens': [51282, 309, 307, 1219, 264, 21899, 14329, 4391, 3006, 370, 510, 741, 360, 406, 643, 264, 8236, 2985, 51658], 'temperature': 0.0, 'avg_logprob': -0.12603266512761352, 'compression_ratio': 1.8012422360248448, 'no_speech_prob': 0.002669919515028596}, {'id': 340, 'seek': 229278, 'start': 2292.78, 'end': 2303.6600000000003, 'text': ' of i whereas here i need the absolute address of b if i want to load it correct whether i use the', 'tokens': [50364, 295, 741, 9735, 510, 741, 643, 264, 8236, 2985, 295, 272, 498, 741, 528, 281, 3677, 309, 3006, 1968, 741, 764, 264, 50908], 'temperature': 0.0, 'avg_logprob': -0.10049548867630632, 'compression_ratio': 1.7621951219512195, 'no_speech_prob': 0.0914556011557579}, {'id': 341, 'seek': 229278, 'start': 2303.6600000000003, 'end': 2312.94, 'text': ' memory or i use it i mean or i move the contents to a register for me to access b i need the address', 'tokens': [50908, 4675, 420, 741, 764, 309, 741, 914, 420, 741, 1286, 264, 15768, 281, 257, 7280, 337, 385, 281, 2105, 272, 741, 643, 264, 2985, 51372], 'temperature': 0.0, 'avg_logprob': -0.10049548867630632, 'compression_ratio': 1.7621951219512195, 'no_speech_prob': 0.0914556011557579}, {'id': 342, 'seek': 229278, 'start': 2312.94, 'end': 2318.98, 'text': ' of b and here the address of b can only be specified as an absolute quantity 32 bit number', 'tokens': [51372, 295, 272, 293, 510, 264, 2985, 295, 272, 393, 787, 312, 22206, 382, 364, 8236, 11275, 8858, 857, 1230, 51674], 'temperature': 0.0, 'avg_logprob': -0.10049548867630632, 'compression_ratio': 1.7621951219512195, 'no_speech_prob': 0.0914556011557579}, {'id': 343, 'seek': 231898, 'start': 2318.98, 'end': 2326.78, 'text': ' or higher whereas to specify the address of i it is much simpler it is going to be a small offset', 'tokens': [50364, 420, 2946, 9735, 281, 16500, 264, 2985, 295, 741, 309, 307, 709, 18587, 309, 307, 516, 281, 312, 257, 1359, 18687, 50754], 'temperature': 0.0, 'avg_logprob': -0.12732849950375763, 'compression_ratio': 1.8465116279069766, 'no_speech_prob': 0.05481436476111412}, {'id': 344, 'seek': 231898, 'start': 2326.78, 'end': 2332.78, 'text': ' from the stack pointer so i can use it using a displacement addressing mode and in the displacement', 'tokens': [50754, 490, 264, 8630, 23918, 370, 741, 393, 764, 309, 1228, 257, 21899, 14329, 4391, 293, 294, 264, 21899, 51054], 'temperature': 0.0, 'avg_logprob': -0.12732849950375763, 'compression_ratio': 1.8465116279069766, 'no_speech_prob': 0.05481436476111412}, {'id': 345, 'seek': 231898, 'start': 2332.78, 'end': 2339.3, 'text': ' addressing mode my offset is going to be a small constant 4 8 maybe 32 maybe 48 whatever number it', 'tokens': [51054, 14329, 4391, 452, 18687, 307, 516, 281, 312, 257, 1359, 5754, 1017, 1649, 1310, 8858, 1310, 11174, 2035, 1230, 309, 51380], 'temperature': 0.0, 'avg_logprob': -0.12732849950375763, 'compression_ratio': 1.8465116279069766, 'no_speech_prob': 0.05481436476111412}, {'id': 346, 'seek': 231898, 'start': 2339.3, 'end': 2346.22, 'text': ' is but it is still less than a 12 bit or a 16 bit number and therefore i can actually use that index', 'tokens': [51380, 307, 457, 309, 307, 920, 1570, 813, 257, 2272, 857, 420, 257, 3165, 857, 1230, 293, 4412, 741, 393, 767, 764, 300, 8186, 51726], 'temperature': 0.0, 'avg_logprob': -0.12732849950375763, 'compression_ratio': 1.8465116279069766, 'no_speech_prob': 0.05481436476111412}, {'id': 347, 'seek': 234622, 'start': 2346.22, 'end': 2354.2599999999998, 'text': ' addressing mode correct having said that right so at this point in time of course we are not taking', 'tokens': [50364, 14329, 4391, 3006, 1419, 848, 300, 558, 370, 412, 341, 935, 294, 565, 295, 1164, 321, 366, 406, 1940, 50766], 'temperature': 0.0, 'avg_logprob': -0.15326012044713117, 'compression_ratio': 1.7891566265060241, 'no_speech_prob': 0.033963222056627274}, {'id': 348, 'seek': 234622, 'start': 2354.2599999999998, 'end': 2360.64, 'text': ' the decision we are saying that what is the offset of i right and that offset has to be added to the', 'tokens': [50766, 264, 3537, 321, 366, 1566, 300, 437, 307, 264, 18687, 295, 741, 558, 293, 300, 18687, 575, 281, 312, 3869, 281, 264, 51085], 'temperature': 0.0, 'avg_logprob': -0.15326012044713117, 'compression_ratio': 1.7891566265060241, 'no_speech_prob': 0.033963222056627274}, {'id': 349, 'seek': 234622, 'start': 2360.64, 'end': 2368.3799999999997, 'text': ' stack pointer in order for me to get the address and then i index that address that means that i', 'tokens': [51085, 8630, 23918, 294, 1668, 337, 385, 281, 483, 264, 2985, 293, 550, 741, 8186, 300, 2985, 300, 1355, 300, 741, 51472], 'temperature': 0.0, 'avg_logprob': -0.15326012044713117, 'compression_ratio': 1.7891566265060241, 'no_speech_prob': 0.033963222056627274}, {'id': 350, 'seek': 236838, 'start': 2368.38, 'end': 2377.42, 'text': ' dereference that memory location to get the value and that value would be i correct similarly if', 'tokens': [50364, 15969, 5158, 300, 4675, 4914, 281, 483, 264, 2158, 293, 300, 2158, 576, 312, 741, 3006, 14138, 498, 50816], 'temperature': 0.0, 'avg_logprob': -0.11122437145399011, 'compression_ratio': 1.832535885167464, 'no_speech_prob': 0.14073684811592102}, {'id': 351, 'seek': 236838, 'start': 2377.42, 'end': 2383.5, 'text': ' i want to find out a of i correct and remember this is the left hand side that means that we', 'tokens': [50816, 741, 528, 281, 915, 484, 257, 295, 741, 3006, 293, 1604, 341, 307, 264, 1411, 1011, 1252, 300, 1355, 300, 321, 51120], 'temperature': 0.0, 'avg_logprob': -0.11122437145399011, 'compression_ratio': 1.832535885167464, 'no_speech_prob': 0.14073684811592102}, {'id': 352, 'seek': 236838, 'start': 2383.5, 'end': 2387.98, 'text': ' are interested in the address and we are going to store the value in that location how do i find', 'tokens': [51120, 366, 3102, 294, 264, 2985, 293, 321, 366, 516, 281, 3531, 264, 2158, 294, 300, 4914, 577, 360, 741, 915, 51344], 'temperature': 0.0, 'avg_logprob': -0.11122437145399011, 'compression_ratio': 1.832535885167464, 'no_speech_prob': 0.14073684811592102}, {'id': 353, 'seek': 236838, 'start': 2387.98, 'end': 2395.9, 'text': ' a of i let us assume a is an array of characters to make things simpler right how do i find a of', 'tokens': [51344, 257, 295, 741, 718, 505, 6552, 257, 307, 364, 10225, 295, 4342, 281, 652, 721, 18587, 558, 577, 360, 741, 915, 257, 295, 51740], 'temperature': 0.0, 'avg_logprob': -0.11122437145399011, 'compression_ratio': 1.832535885167464, 'no_speech_prob': 0.14073684811592102}, {'id': 354, 'seek': 239590, 'start': 2396.06, 'end': 2404.94, 'text': ' i i need to have address of a plus add the offset corresponding to i since it is a character each', 'tokens': [50372, 741, 741, 643, 281, 362, 2985, 295, 257, 1804, 909, 264, 18687, 11760, 281, 741, 1670, 309, 307, 257, 2517, 1184, 50816], 'temperature': 0.0, 'avg_logprob': -0.14048964044322138, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.055517684668302536}, {'id': 355, 'seek': 239590, 'start': 2404.94, 'end': 2415.7400000000002, 'text': ' location requires only one if it is a short or an integer what should we have done sorry plus', 'tokens': [50816, 4914, 7029, 787, 472, 498, 309, 307, 257, 2099, 420, 364, 24922, 437, 820, 321, 362, 1096, 2597, 1804, 51356], 'temperature': 0.0, 'avg_logprob': -0.14048964044322138, 'compression_ratio': 1.5039370078740157, 'no_speech_prob': 0.055517684668302536}, {'id': 356, 'seek': 241574, 'start': 2415.74, 'end': 2425.8999999999996, 'text': ' 4 what should be multiplied by 4 i should be multiplied by 4 correct so this value that i', 'tokens': [50364, 1017, 437, 820, 312, 17207, 538, 1017, 741, 820, 312, 17207, 538, 1017, 3006, 370, 341, 2158, 300, 741, 50872], 'temperature': 0.0, 'avg_logprob': -0.1297150072844132, 'compression_ratio': 1.8866666666666667, 'no_speech_prob': 0.10964975506067276}, {'id': 357, 'seek': 241574, 'start': 2425.8999999999996, 'end': 2430.74, 'text': ' have dereference should have been multiplied by 2 or 4 depending on whether it is a short or an', 'tokens': [50872, 362, 15969, 5158, 820, 362, 668, 17207, 538, 568, 420, 1017, 5413, 322, 1968, 309, 307, 257, 2099, 420, 364, 51114], 'temperature': 0.0, 'avg_logprob': -0.1297150072844132, 'compression_ratio': 1.8866666666666667, 'no_speech_prob': 0.10964975506067276}, {'id': 358, 'seek': 241574, 'start': 2430.74, 'end': 2437.74, 'text': ' word and then that value should have been added to the address of a how do i get the address of a', 'tokens': [51114, 1349, 293, 550, 300, 2158, 820, 362, 668, 3869, 281, 264, 2985, 295, 257, 577, 360, 741, 483, 264, 2985, 295, 257, 51464], 'temperature': 0.0, 'avg_logprob': -0.1297150072844132, 'compression_ratio': 1.8866666666666667, 'no_speech_prob': 0.10964975506067276}, {'id': 359, 'seek': 243774, 'start': 2437.74, 'end': 2445.62, 'text': ' a is also a local variable it is also in the stack therefore it is going to be offset from the', 'tokens': [50364, 257, 307, 611, 257, 2654, 7006, 309, 307, 611, 294, 264, 8630, 4412, 309, 307, 516, 281, 312, 18687, 490, 264, 50758], 'temperature': 0.0, 'avg_logprob': -0.07196142304111534, 'compression_ratio': 1.9794520547945205, 'no_speech_prob': 0.040818654000759125}, {'id': 360, 'seek': 243774, 'start': 2445.62, 'end': 2452.3399999999997, 'text': ' stack pointer by a small offset that offset needs to be added to the stack pointer and that gives', 'tokens': [50758, 8630, 23918, 538, 257, 1359, 18687, 300, 18687, 2203, 281, 312, 3869, 281, 264, 8630, 23918, 293, 300, 2709, 51094], 'temperature': 0.0, 'avg_logprob': -0.07196142304111534, 'compression_ratio': 1.9794520547945205, 'no_speech_prob': 0.040818654000759125}, {'id': 361, 'seek': 243774, 'start': 2452.3399999999997, 'end': 2459.8999999999996, 'text': ' me the value of address of a and to that address of a i take this offset value and then i add it', 'tokens': [51094, 385, 264, 2158, 295, 2985, 295, 257, 293, 281, 300, 2985, 295, 257, 741, 747, 341, 18687, 2158, 293, 550, 741, 909, 309, 51472], 'temperature': 0.0, 'avg_logprob': -0.07196142304111534, 'compression_ratio': 1.9794520547945205, 'no_speech_prob': 0.040818654000759125}, {'id': 362, 'seek': 245990, 'start': 2459.9, 'end': 2470.1, 'text': ' i get the address of a of i correct right if i index it or dereference it and get the value then', 'tokens': [50364, 741, 483, 264, 2985, 295, 257, 295, 741, 3006, 558, 498, 741, 8186, 309, 420, 15969, 5158, 309, 293, 483, 264, 2158, 550, 50874], 'temperature': 0.0, 'avg_logprob': -0.1107178773030196, 'compression_ratio': 1.8537735849056605, 'no_speech_prob': 0.061481691896915436}, {'id': 363, 'seek': 245990, 'start': 2470.1, 'end': 2475.9, 'text': ' of course i would have got a of i but in this case what i need to do is that i have to dereference', 'tokens': [50874, 295, 1164, 741, 576, 362, 658, 257, 295, 741, 457, 294, 341, 1389, 437, 741, 643, 281, 360, 307, 300, 741, 362, 281, 15969, 5158, 51164], 'temperature': 0.0, 'avg_logprob': -0.1107178773030196, 'compression_ratio': 1.8537735849056605, 'no_speech_prob': 0.061481691896915436}, {'id': 364, 'seek': 245990, 'start': 2475.9, 'end': 2482.82, 'text': ' and then store so it is not a read it is a write but you are computing the left hand side of this', 'tokens': [51164, 293, 550, 3531, 370, 309, 307, 406, 257, 1401, 309, 307, 257, 2464, 457, 291, 366, 15866, 264, 1411, 1011, 1252, 295, 341, 51510], 'temperature': 0.0, 'avg_logprob': -0.1107178773030196, 'compression_ratio': 1.8537735849056605, 'no_speech_prob': 0.061481691896915436}, {'id': 365, 'seek': 245990, 'start': 2482.82, 'end': 2489.38, 'text': ' expression okay so to that value to that particular location what am i going to write i am going to', 'tokens': [51510, 6114, 1392, 370, 281, 300, 2158, 281, 300, 1729, 4914, 437, 669, 741, 516, 281, 2464, 741, 669, 516, 281, 51838], 'temperature': 0.0, 'avg_logprob': -0.1107178773030196, 'compression_ratio': 1.8537735849056605, 'no_speech_prob': 0.061481691896915436}, {'id': 366, 'seek': 248938, 'start': 2489.38, 'end': 2497.98, 'text': ' write b plus 1 okay so do we understand how this tree pattern thing working no sorry not', 'tokens': [50364, 2464, 272, 1804, 502, 1392, 370, 360, 321, 1223, 577, 341, 4230, 5102, 551, 1364, 572, 2597, 406, 50794], 'temperature': 0.0, 'avg_logprob': -0.25255350385393416, 'compression_ratio': 1.4814814814814814, 'no_speech_prob': 0.01386351976543665}, {'id': 367, 'seek': 248938, 'start': 2497.98, 'end': 2503.82, 'text': ' the tree pattern the tree intermediate code working right any questions', 'tokens': [50794, 264, 4230, 5102, 264, 4230, 19376, 3089, 1364, 558, 604, 1651, 51086], 'temperature': 0.0, 'avg_logprob': -0.25255350385393416, 'compression_ratio': 1.4814814814814814, 'no_speech_prob': 0.01386351976543665}, {'id': 368, 'seek': 250382, 'start': 2503.82, 'end': 2523.5, 'text': ' address of i why do we have this as two different leaf node why not we put this as one leaf node', 'tokens': [50364, 2985, 295, 741, 983, 360, 321, 362, 341, 382, 732, 819, 10871, 9984, 983, 406, 321, 829, 341, 382, 472, 10871, 9984, 51348], 'temperature': 0.0, 'avg_logprob': -0.18686124111743682, 'compression_ratio': 1.56198347107438, 'no_speech_prob': 0.03527257964015007}, {'id': 369, 'seek': 250382, 'start': 2523.5, 'end': 2528.94, 'text': ' okay the first thing that would have happened is that this tree would have become a DAG okay', 'tokens': [51348, 1392, 264, 700, 551, 300, 576, 362, 2011, 307, 300, 341, 4230, 576, 362, 1813, 257, 9578, 38, 1392, 51620], 'temperature': 0.0, 'avg_logprob': -0.18686124111743682, 'compression_ratio': 1.56198347107438, 'no_speech_prob': 0.03527257964015007}, {'id': 370, 'seek': 252894, 'start': 2528.94, 'end': 2534.86, 'text': ' second thing is since it is a leaf node the cost is not that something that you are going', 'tokens': [50364, 1150, 551, 307, 1670, 309, 307, 257, 10871, 9984, 264, 2063, 307, 406, 300, 746, 300, 291, 366, 516, 50660], 'temperature': 0.0, 'avg_logprob': -0.13984723274524397, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.07764238864183426}, {'id': 371, 'seek': 252894, 'start': 2534.86, 'end': 2539.3, 'text': ' to worry about so it is okay to duplicate that you could have put that essentially you could', 'tokens': [50660, 281, 3292, 466, 370, 309, 307, 1392, 281, 23976, 300, 291, 727, 362, 829, 300, 4476, 291, 727, 50882], 'temperature': 0.0, 'avg_logprob': -0.13984723274524397, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.07764238864183426}, {'id': 372, 'seek': 252894, 'start': 2539.3, 'end': 2544.78, 'text': ' have put this pointer over here nothing would have happened except that suddenly the tree has', 'tokens': [50882, 362, 829, 341, 23918, 670, 510, 1825, 576, 362, 2011, 3993, 300, 5800, 264, 4230, 575, 51156], 'temperature': 0.0, 'avg_logprob': -0.13984723274524397, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.07764238864183426}, {'id': 373, 'seek': 252894, 'start': 2544.78, 'end': 2550.66, 'text': ' become a DAG and you are stuck with it okay we will see what happens when you have a DAG because', 'tokens': [51156, 1813, 257, 9578, 38, 293, 291, 366, 5541, 365, 309, 1392, 321, 486, 536, 437, 2314, 562, 291, 362, 257, 9578, 38, 570, 51450], 'temperature': 0.0, 'avg_logprob': -0.13984723274524397, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.07764238864183426}, {'id': 374, 'seek': 252894, 'start': 2550.66, 'end': 2557.38, 'text': ' in practice right when you generate either the tree intermediate code or when you generate the', 'tokens': [51450, 294, 3124, 558, 562, 291, 8460, 2139, 264, 4230, 19376, 3089, 420, 562, 291, 8460, 264, 51786], 'temperature': 0.0, 'avg_logprob': -0.13984723274524397, 'compression_ratio': 1.9259259259259258, 'no_speech_prob': 0.07764238864183426}, {'id': 375, 'seek': 255738, 'start': 2557.38, 'end': 2565.06, 'text': ' you know dependence graph they are going to be a graph rather than a tree okay and in those', 'tokens': [50364, 291, 458, 31704, 4295, 436, 366, 516, 281, 312, 257, 4295, 2831, 813, 257, 4230, 1392, 293, 294, 729, 50748], 'temperature': 0.0, 'avg_logprob': -0.13188393910725912, 'compression_ratio': 1.7476635514018692, 'no_speech_prob': 0.0021417024545371532}, {'id': 376, 'seek': 255738, 'start': 2565.06, 'end': 2571.26, 'text': ' cases this optimal algorithm is not going to work because they are no longer tree right we', 'tokens': [50748, 3331, 341, 16252, 9284, 307, 406, 516, 281, 589, 570, 436, 366, 572, 2854, 4230, 558, 321, 51058], 'temperature': 0.0, 'avg_logprob': -0.13188393910725912, 'compression_ratio': 1.7476635514018692, 'no_speech_prob': 0.0021417024545371532}, {'id': 377, 'seek': 255738, 'start': 2571.26, 'end': 2576.94, 'text': ' will see what to do with that but for the time being we will just duplicate this thing because', 'tokens': [51058, 486, 536, 437, 281, 360, 365, 300, 457, 337, 264, 565, 885, 321, 486, 445, 23976, 341, 551, 570, 51342], 'temperature': 0.0, 'avg_logprob': -0.13188393910725912, 'compression_ratio': 1.7476635514018692, 'no_speech_prob': 0.0021417024545371532}, {'id': 378, 'seek': 255738, 'start': 2576.94, 'end': 2586.26, 'text': ' it is not really different so only a leaf node okay any questions we move forward okay now given', 'tokens': [51342, 309, 307, 406, 534, 819, 370, 787, 257, 10871, 9984, 1392, 604, 1651, 321, 1286, 2128, 1392, 586, 2212, 51808], 'temperature': 0.0, 'avg_logprob': -0.13188393910725912, 'compression_ratio': 1.7476635514018692, 'no_speech_prob': 0.0021417024545371532}, {'id': 379, 'seek': 258626, 'start': 2586.26, 'end': 2591.6200000000003, 'text': ' this let us see how the tree pattern matching is going to use this tree intermediate code for', 'tokens': [50364, 341, 718, 505, 536, 577, 264, 4230, 5102, 14324, 307, 516, 281, 764, 341, 4230, 19376, 3089, 337, 50632], 'temperature': 0.0, 'avg_logprob': -0.09029904631681221, 'compression_ratio': 1.9402985074626866, 'no_speech_prob': 0.00195180659648031}, {'id': 380, 'seek': 258626, 'start': 2591.6200000000003, 'end': 2600.1800000000003, 'text': ' generating code for this okay so the tree pattern matching starts off with a set of patterns which', 'tokens': [50632, 17746, 3089, 337, 341, 1392, 370, 264, 4230, 5102, 14324, 3719, 766, 365, 257, 992, 295, 8294, 597, 51060], 'temperature': 0.0, 'avg_logprob': -0.09029904631681221, 'compression_ratio': 1.9402985074626866, 'no_speech_prob': 0.00195180659648031}, {'id': 381, 'seek': 258626, 'start': 2600.1800000000003, 'end': 2606.0600000000004, 'text': ' are defined and for each pattern it gives you what is the code to be generated and what is the cost', 'tokens': [51060, 366, 7642, 293, 337, 1184, 5102, 309, 2709, 291, 437, 307, 264, 3089, 281, 312, 10833, 293, 437, 307, 264, 2063, 51354], 'temperature': 0.0, 'avg_logprob': -0.09029904631681221, 'compression_ratio': 1.9402985074626866, 'no_speech_prob': 0.00195180659648031}, {'id': 382, 'seek': 258626, 'start': 2606.0600000000004, 'end': 2612.6600000000003, 'text': ' for that particular pattern right for example if I have a pattern which says a constant has to be', 'tokens': [51354, 337, 300, 1729, 5102, 558, 337, 1365, 498, 286, 362, 257, 5102, 597, 1619, 257, 5754, 575, 281, 312, 51684], 'temperature': 0.0, 'avg_logprob': -0.09029904631681221, 'compression_ratio': 1.9402985074626866, 'no_speech_prob': 0.00195180659648031}, {'id': 383, 'seek': 261266, 'start': 2612.66, 'end': 2620.3399999999997, 'text': ' moved to a register right that pattern would cause the code generated to be like move constant', 'tokens': [50364, 4259, 281, 257, 7280, 558, 300, 5102, 576, 3082, 264, 3089, 10833, 281, 312, 411, 1286, 5754, 50748], 'temperature': 0.0, 'avg_logprob': -0.15190816648078687, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.021863482892513275}, {'id': 384, 'seek': 261266, 'start': 2620.3399999999997, 'end': 2627.7, 'text': ' to register I similarly if I have a pattern like a memory location has to be moved to a register', 'tokens': [50748, 281, 7280, 286, 14138, 498, 286, 362, 257, 5102, 411, 257, 4675, 4914, 575, 281, 312, 4259, 281, 257, 7280, 51116], 'temperature': 0.0, 'avg_logprob': -0.15190816648078687, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.021863482892513275}, {'id': 385, 'seek': 261266, 'start': 2627.7, 'end': 2636.3799999999997, 'text': ' then that is load A to RI if I have a pattern which says that memory location needs to be stored', 'tokens': [51116, 550, 300, 307, 3677, 316, 281, 30474, 498, 286, 362, 257, 5102, 597, 1619, 300, 4675, 4914, 2203, 281, 312, 12187, 51550], 'temperature': 0.0, 'avg_logprob': -0.15190816648078687, 'compression_ratio': 1.8461538461538463, 'no_speech_prob': 0.021863482892513275}, {'id': 386, 'seek': 263638, 'start': 2636.38, 'end': 2644.1, 'text': ' with the value of a register I right then that would look like that would generate a code store', 'tokens': [50364, 365, 264, 2158, 295, 257, 7280, 286, 558, 550, 300, 576, 574, 411, 300, 576, 8460, 257, 3089, 3531, 50750], 'temperature': 0.0, 'avg_logprob': -0.16174527274237738, 'compression_ratio': 1.443609022556391, 'no_speech_prob': 0.04512321203947067}, {'id': 387, 'seek': 263638, 'start': 2644.1, 'end': 2657.62, 'text': ' of RI in memory location A right let us look at more patterns here actually I have okay that has', 'tokens': [50750, 295, 30474, 294, 4675, 4914, 316, 558, 718, 505, 574, 412, 544, 8294, 510, 767, 286, 362, 1392, 300, 575, 51426], 'temperature': 0.0, 'avg_logprob': -0.16174527274237738, 'compression_ratio': 1.443609022556391, 'no_speech_prob': 0.04512321203947067}, {'id': 388, 'seek': 265762, 'start': 2657.62, 'end': 2668.62, 'text': ' to be a store right okay we will come back to this little later I will try to find out what is', 'tokens': [50364, 281, 312, 257, 3531, 558, 1392, 321, 486, 808, 646, 281, 341, 707, 1780, 286, 486, 853, 281, 915, 484, 437, 307, 50914], 'temperature': 0.0, 'avg_logprob': -0.1505812508719308, 'compression_ratio': 1.8933333333333333, 'no_speech_prob': 0.15992240607738495}, {'id': 389, 'seek': 265762, 'start': 2668.62, 'end': 2674.46, 'text': ' the mistake in this was thinking it is a store but then you do not have if it is a store then', 'tokens': [50914, 264, 6146, 294, 341, 390, 1953, 309, 307, 257, 3531, 457, 550, 291, 360, 406, 362, 498, 309, 307, 257, 3531, 550, 51206], 'temperature': 0.0, 'avg_logprob': -0.1505812508719308, 'compression_ratio': 1.8933333333333333, 'no_speech_prob': 0.15992240607738495}, {'id': 390, 'seek': 265762, 'start': 2674.46, 'end': 2682.46, 'text': ' this should not have been there okay this should not have been there okay so maybe without this', 'tokens': [51206, 341, 820, 406, 362, 668, 456, 1392, 341, 820, 406, 362, 668, 456, 1392, 370, 1310, 1553, 341, 51606], 'temperature': 0.0, 'avg_logprob': -0.1505812508719308, 'compression_ratio': 1.8933333333333333, 'no_speech_prob': 0.15992240607738495}, {'id': 391, 'seek': 268246, 'start': 2682.46, 'end': 2690.66, 'text': ' you can actually think of this if you have this pattern right register J use the value of register', 'tokens': [50364, 291, 393, 767, 519, 295, 341, 498, 291, 362, 341, 5102, 558, 7280, 508, 764, 264, 2158, 295, 7280, 50774], 'temperature': 0.0, 'avg_logprob': -0.11527738286488091, 'compression_ratio': 1.7826086956521738, 'no_speech_prob': 0.012812630273401737}, {'id': 392, 'seek': 268246, 'start': 2690.66, 'end': 2704.26, 'text': ' J to index I will use this pointer here so for example right you have the value of registers', 'tokens': [50774, 508, 281, 8186, 286, 486, 764, 341, 23918, 510, 370, 337, 1365, 558, 291, 362, 264, 2158, 295, 38351, 51454], 'temperature': 0.0, 'avg_logprob': -0.11527738286488091, 'compression_ratio': 1.7826086956521738, 'no_speech_prob': 0.012812630273401737}, {'id': 393, 'seek': 268246, 'start': 2704.26, 'end': 2710.46, 'text': ' J which is used to index that means that you are dereferencing and in that location you want to', 'tokens': [51454, 508, 597, 307, 1143, 281, 8186, 300, 1355, 300, 291, 366, 15969, 612, 13644, 293, 294, 300, 4914, 291, 528, 281, 51764], 'temperature': 0.0, 'avg_logprob': -0.11527738286488091, 'compression_ratio': 1.7826086956521738, 'no_speech_prob': 0.012812630273401737}, {'id': 394, 'seek': 271046, 'start': 2710.62, 'end': 2720.66, 'text': ' register I so that is basically store RI into indirect location or J now this is a simple thing', 'tokens': [50372, 7280, 286, 370, 300, 307, 1936, 3531, 30474, 666, 19523, 4914, 420, 508, 586, 341, 307, 257, 2199, 551, 50874], 'temperature': 0.0, 'avg_logprob': -0.20522910829574342, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.03505653887987137}, {'id': 395, 'seek': 271046, 'start': 2720.66, 'end': 2726.38, 'text': ' where you are basically adding two registers okay and when you do this the result goes to register', 'tokens': [50874, 689, 291, 366, 1936, 5127, 732, 38351, 1392, 293, 562, 291, 360, 341, 264, 1874, 1709, 281, 7280, 51160], 'temperature': 0.0, 'avg_logprob': -0.20522910829574342, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.03505653887987137}, {'id': 396, 'seek': 271046, 'start': 2726.38, 'end': 2731.38, 'text': ' okay so this essentially says the value goes to register that memory that is really what it says', 'tokens': [51160, 1392, 370, 341, 4476, 1619, 264, 2158, 1709, 281, 7280, 300, 4675, 300, 307, 534, 437, 309, 1619, 51410], 'temperature': 0.0, 'avg_logprob': -0.20522910829574342, 'compression_ratio': 1.7852760736196318, 'no_speech_prob': 0.03505653887987137}, {'id': 397, 'seek': 273138, 'start': 2731.38, 'end': 2745.58, 'text': ' okay yeah okay so yeah now there are more things here so for example if you have a register and', 'tokens': [50364, 1392, 1338, 1392, 370, 1338, 586, 456, 366, 544, 721, 510, 370, 337, 1365, 498, 291, 362, 257, 7280, 293, 51074], 'temperature': 0.0, 'avg_logprob': -0.14185601122239055, 'compression_ratio': 1.64, 'no_speech_prob': 0.003938380628824234}, {'id': 398, 'seek': 273138, 'start': 2745.58, 'end': 2753.78, 'text': ' you want to add a constant one to it then you can say that add hash one to RI or you could have', 'tokens': [51074, 291, 528, 281, 909, 257, 5754, 472, 281, 309, 550, 291, 393, 584, 300, 909, 22019, 472, 281, 30474, 420, 291, 727, 362, 51484], 'temperature': 0.0, 'avg_logprob': -0.14185601122239055, 'compression_ratio': 1.64, 'no_speech_prob': 0.003938380628824234}, {'id': 399, 'seek': 273138, 'start': 2753.78, 'end': 2760.54, 'text': ' actually replaced it by increment instruction if such a thing exists right and here if you want', 'tokens': [51484, 767, 10772, 309, 538, 26200, 10951, 498, 1270, 257, 551, 8198, 558, 293, 510, 498, 291, 528, 51822], 'temperature': 0.0, 'avg_logprob': -0.14185601122239055, 'compression_ratio': 1.64, 'no_speech_prob': 0.003938380628824234}, {'id': 400, 'seek': 276054, 'start': 2760.54, 'end': 2768.14, 'text': ' to do constant plus register then it is also increment and so on okay so like this for all', 'tokens': [50364, 281, 360, 5754, 1804, 7280, 550, 309, 307, 611, 26200, 293, 370, 322, 1392, 370, 411, 341, 337, 439, 50744], 'temperature': 0.0, 'avg_logprob': -0.09211564660072327, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.0019861378241330385}, {'id': 401, 'seek': 276054, 'start': 2768.14, 'end': 2775.42, 'text': ' the instructions and possible combinations you generate the patterns okay and all of these', 'tokens': [50744, 264, 9415, 293, 1944, 21267, 291, 8460, 264, 8294, 1392, 293, 439, 295, 613, 51108], 'temperature': 0.0, 'avg_logprob': -0.09211564660072327, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.0019861378241330385}, {'id': 402, 'seek': 276054, 'start': 2775.42, 'end': 2780.98, 'text': ' patterns can be expressed as grammars okay that is very important because later on you will use', 'tokens': [51108, 8294, 393, 312, 12675, 382, 17570, 685, 1392, 300, 307, 588, 1021, 570, 1780, 322, 291, 486, 764, 51386], 'temperature': 0.0, 'avg_logprob': -0.09211564660072327, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.0019861378241330385}, {'id': 403, 'seek': 276054, 'start': 2780.98, 'end': 2788.34, 'text': ' these grammars and then write these code generators okay now let us look at how these patterns are', 'tokens': [51386, 613, 17570, 685, 293, 550, 2464, 613, 3089, 38662, 1392, 586, 718, 505, 574, 412, 577, 613, 8294, 366, 51754], 'temperature': 0.0, 'avg_logprob': -0.09211564660072327, 'compression_ratio': 1.8522167487684729, 'no_speech_prob': 0.0019861378241330385}, {'id': 404, 'seek': 278834, 'start': 2788.34, 'end': 2796.7400000000002, 'text': ' going to be used in order for us to evaluate this expression okay now let us first start off with', 'tokens': [50364, 516, 281, 312, 1143, 294, 1668, 337, 505, 281, 13059, 341, 6114, 1392, 586, 718, 505, 700, 722, 766, 365, 50784], 'temperature': 0.0, 'avg_logprob': -0.14746457476948582, 'compression_ratio': 1.5655737704918034, 'no_speech_prob': 0.013615204952657223}, {'id': 405, 'seek': 278834, 'start': 2796.7400000000002, 'end': 2809.3, 'text': ' this address here right now that address here okay remember that this is a offset value which', 'tokens': [50784, 341, 2985, 510, 558, 586, 300, 2985, 510, 1392, 1604, 300, 341, 307, 257, 18687, 2158, 597, 51412], 'temperature': 0.0, 'avg_logprob': -0.14746457476948582, 'compression_ratio': 1.5655737704918034, 'no_speech_prob': 0.013615204952657223}, {'id': 406, 'seek': 280930, 'start': 2809.3, 'end': 2819.0600000000004, 'text': ' has to be added to the stack pointer okay right so what I can do is that I can move this small', 'tokens': [50364, 575, 281, 312, 3869, 281, 264, 8630, 23918, 1392, 558, 370, 437, 286, 393, 360, 307, 300, 286, 393, 1286, 341, 1359, 50852], 'temperature': 0.0, 'avg_logprob': -0.104764783886117, 'compression_ratio': 1.9025974025974026, 'no_speech_prob': 0.06351421028375626}, {'id': 407, 'seek': 280930, 'start': 2819.0600000000004, 'end': 2826.9, 'text': ' offset into a register remember the left hand side has always has to be a register right so I can move', 'tokens': [50852, 18687, 666, 257, 7280, 1604, 264, 1411, 1011, 1252, 575, 1009, 575, 281, 312, 257, 7280, 558, 370, 286, 393, 1286, 51244], 'temperature': 0.0, 'avg_logprob': -0.104764783886117, 'compression_ratio': 1.9025974025974026, 'no_speech_prob': 0.06351421028375626}, {'id': 408, 'seek': 280930, 'start': 2826.9, 'end': 2832.78, 'text': ' this into a register so the pattern that I find here is that there is a pattern which is saying', 'tokens': [51244, 341, 666, 257, 7280, 370, 264, 5102, 300, 286, 915, 510, 307, 300, 456, 307, 257, 5102, 597, 307, 1566, 51538], 'temperature': 0.0, 'avg_logprob': -0.104764783886117, 'compression_ratio': 1.9025974025974026, 'no_speech_prob': 0.06351421028375626}, {'id': 409, 'seek': 283278, 'start': 2832.78, 'end': 2840.5400000000004, 'text': ' constant A to register if I apply that pattern right that matches with this okay and therefore', 'tokens': [50364, 5754, 316, 281, 7280, 498, 286, 3079, 300, 5102, 558, 300, 10676, 365, 341, 1392, 293, 4412, 50752], 'temperature': 0.0, 'avg_logprob': -0.14558042585849762, 'compression_ratio': 1.6514285714285715, 'no_speech_prob': 0.07140673696994781}, {'id': 410, 'seek': 283278, 'start': 2840.5400000000004, 'end': 2849.92, 'text': ' I can say that the corresponding instruction for this is right load hash A remember hash A is the', 'tokens': [50752, 286, 393, 584, 300, 264, 11760, 10951, 337, 341, 307, 558, 3677, 22019, 316, 1604, 22019, 316, 307, 264, 51221], 'temperature': 0.0, 'avg_logprob': -0.14558042585849762, 'compression_ratio': 1.6514285714285715, 'no_speech_prob': 0.07140673696994781}, {'id': 411, 'seek': 283278, 'start': 2849.92, 'end': 2857.98, 'text': ' offset that we are talking about has to be moved into a register or not right this is already in', 'tokens': [51221, 18687, 300, 321, 366, 1417, 466, 575, 281, 312, 4259, 666, 257, 7280, 420, 406, 558, 341, 307, 1217, 294, 51624], 'temperature': 0.0, 'avg_logprob': -0.14558042585849762, 'compression_ratio': 1.6514285714285715, 'no_speech_prob': 0.07140673696994781}, {'id': 412, 'seek': 285798, 'start': 2857.98, 'end': 2863.3, 'text': ' register so I do not need to this is stack pointer register stack pointer so this is already a', 'tokens': [50364, 7280, 370, 286, 360, 406, 643, 281, 341, 307, 8630, 23918, 7280, 8630, 23918, 370, 341, 307, 1217, 257, 50630], 'temperature': 0.0, 'avg_logprob': -0.17424437440471885, 'compression_ratio': 2.043010752688172, 'no_speech_prob': 0.12231498211622238}, {'id': 413, 'seek': 285798, 'start': 2863.3, 'end': 2869.98, 'text': ' register now if I look at it this pattern is something like register 0 plus register stack', 'tokens': [50630, 7280, 586, 498, 286, 574, 412, 309, 341, 5102, 307, 746, 411, 7280, 1958, 1804, 7280, 8630, 50964], 'temperature': 0.0, 'avg_logprob': -0.17424437440471885, 'compression_ratio': 2.043010752688172, 'no_speech_prob': 0.12231498211622238}, {'id': 414, 'seek': 285798, 'start': 2869.98, 'end': 2878.26, 'text': ' pointer right so register register and that going to a register the corresponding pattern is add', 'tokens': [50964, 23918, 558, 370, 7280, 7280, 293, 300, 516, 281, 257, 7280, 264, 11760, 5102, 307, 909, 51378], 'temperature': 0.0, 'avg_logprob': -0.17424437440471885, 'compression_ratio': 2.043010752688172, 'no_speech_prob': 0.12231498211622238}, {'id': 415, 'seek': 285798, 'start': 2878.26, 'end': 2887.58, 'text': ' or not comma stack point right now the next step you are now replacing this by a register because', 'tokens': [51378, 420, 406, 22117, 8630, 935, 558, 586, 264, 958, 1823, 291, 366, 586, 19139, 341, 538, 257, 7280, 570, 51844], 'temperature': 0.0, 'avg_logprob': -0.17424437440471885, 'compression_ratio': 2.043010752688172, 'no_speech_prob': 0.12231498211622238}, {'id': 416, 'seek': 288758, 'start': 2887.58, 'end': 2893.38, 'text': ' that is how the code has been generated that value is available in or not now what about the', 'tokens': [50364, 300, 307, 577, 264, 3089, 575, 668, 10833, 300, 2158, 307, 2435, 294, 420, 406, 586, 437, 466, 264, 50654], 'temperature': 0.0, 'avg_logprob': -0.1108245924115181, 'compression_ratio': 1.7425149700598803, 'no_speech_prob': 0.00043465488124638796}, {'id': 417, 'seek': 288758, 'start': 2893.38, 'end': 2901.8199999999997, 'text': ' code for this entire sub tree now right there are two possibilities here one possibility is to look', 'tokens': [50654, 3089, 337, 341, 2302, 1422, 4230, 586, 558, 456, 366, 732, 12178, 510, 472, 7959, 307, 281, 574, 51076], 'temperature': 0.0, 'avg_logprob': -0.1108245924115181, 'compression_ratio': 1.7425149700598803, 'no_speech_prob': 0.00043465488124638796}, {'id': 418, 'seek': 288758, 'start': 2901.8199999999997, 'end': 2908.7, 'text': ' at this sub tree first and that sub tree can be matched with this pattern which says that register', 'tokens': [51076, 412, 341, 1422, 4230, 700, 293, 300, 1422, 4230, 393, 312, 21447, 365, 341, 5102, 597, 1619, 300, 7280, 51420], 'temperature': 0.0, 'avg_logprob': -0.1108245924115181, 'compression_ratio': 1.7425149700598803, 'no_speech_prob': 0.00043465488124638796}, {'id': 419, 'seek': 290870, 'start': 2908.7, 'end': 2918.98, 'text': ' I okay register I is equal to index of constant plus register J right so you can just see what', 'tokens': [50364, 286, 1392, 7280, 286, 307, 2681, 281, 8186, 295, 5754, 1804, 7280, 508, 558, 370, 291, 393, 445, 536, 437, 50878], 'temperature': 0.0, 'avg_logprob': -0.10765746145537405, 'compression_ratio': 1.8609271523178808, 'no_speech_prob': 0.05097968503832817}, {'id': 420, 'seek': 290870, 'start': 2918.98, 'end': 2925.66, 'text': ' that is okay let us look at this this address I is going to be a small constant that has to be', 'tokens': [50878, 300, 307, 1392, 718, 505, 574, 412, 341, 341, 2985, 286, 307, 516, 281, 312, 257, 1359, 5754, 300, 575, 281, 312, 51212], 'temperature': 0.0, 'avg_logprob': -0.10765746145537405, 'compression_ratio': 1.8609271523178808, 'no_speech_prob': 0.05097968503832817}, {'id': 421, 'seek': 290870, 'start': 2925.66, 'end': 2932.3799999999997, 'text': ' added to a register stack pointer so that is essentially constant plus register J right and', 'tokens': [51212, 3869, 281, 257, 7280, 8630, 23918, 370, 300, 307, 4476, 5754, 1804, 7280, 508, 558, 293, 51548], 'temperature': 0.0, 'avg_logprob': -0.10765746145537405, 'compression_ratio': 1.8609271523178808, 'no_speech_prob': 0.05097968503832817}, {'id': 422, 'seek': 293238, 'start': 2932.7000000000003, 'end': 2941.54, 'text': ' then that has to be indexed and that value going to a register okay so if I look at this particular', 'tokens': [50380, 550, 300, 575, 281, 312, 8186, 292, 293, 300, 2158, 516, 281, 257, 7280, 1392, 370, 498, 286, 574, 412, 341, 1729, 50822], 'temperature': 0.0, 'avg_logprob': -0.1335689157679461, 'compression_ratio': 1.7544910179640718, 'no_speech_prob': 0.01662307232618332}, {'id': 423, 'seek': 293238, 'start': 2941.54, 'end': 2948.9, 'text': ' sub tree then that sub tree can be matched by this pattern matcher to this pattern and you can', 'tokens': [50822, 1422, 4230, 550, 300, 1422, 4230, 393, 312, 21447, 538, 341, 5102, 2995, 260, 281, 341, 5102, 293, 291, 393, 51190], 'temperature': 0.0, 'avg_logprob': -0.1335689157679461, 'compression_ratio': 1.7544910179640718, 'no_speech_prob': 0.01662307232618332}, {'id': 424, 'seek': 293238, 'start': 2948.9, 'end': 2955.54, 'text': ' generate code for this okay and there is a cost that is involved for that whereas you can actually', 'tokens': [51190, 8460, 3089, 337, 341, 1392, 293, 456, 307, 257, 2063, 300, 307, 3288, 337, 300, 9735, 291, 393, 767, 51522], 'temperature': 0.0, 'avg_logprob': -0.1335689157679461, 'compression_ratio': 1.7544910179640718, 'no_speech_prob': 0.01662307232618332}, {'id': 425, 'seek': 295554, 'start': 2955.7, 'end': 2962.98, 'text': ' look at this entire sub tree okay and you can match it with this pattern right again look at', 'tokens': [50372, 574, 412, 341, 2302, 1422, 4230, 1392, 293, 291, 393, 2995, 309, 365, 341, 5102, 558, 797, 574, 412, 50736], 'temperature': 0.0, 'avg_logprob': -0.09717998360142563, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.009526287205517292}, {'id': 426, 'seek': 295554, 'start': 2962.98, 'end': 2974.18, 'text': ' this part is very similar to this part okay but then this register I plus indexing of this right', 'tokens': [50736, 341, 644, 307, 588, 2531, 281, 341, 644, 1392, 457, 550, 341, 7280, 286, 1804, 8186, 278, 295, 341, 558, 51296], 'temperature': 0.0, 'avg_logprob': -0.09717998360142563, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.009526287205517292}, {'id': 427, 'seek': 295554, 'start': 2974.18, 'end': 2982.7, 'text': ' and going to a register is possible right why because my left operand is a register which is', 'tokens': [51296, 293, 516, 281, 257, 7280, 307, 1944, 558, 983, 570, 452, 1411, 2208, 474, 307, 257, 7280, 597, 307, 51722], 'temperature': 0.0, 'avg_logprob': -0.09717998360142563, 'compression_ratio': 1.7300613496932515, 'no_speech_prob': 0.009526287205517292}, {'id': 428, 'seek': 298270, 'start': 2982.7, 'end': 2989.58, 'text': ' this value and my right operand is a memory location that memory location is actually', 'tokens': [50364, 341, 2158, 293, 452, 558, 2208, 474, 307, 257, 4675, 4914, 300, 4675, 4914, 307, 767, 50708], 'temperature': 0.0, 'avg_logprob': -0.10891974982568774, 'compression_ratio': 1.630952380952381, 'no_speech_prob': 0.0020812680013477802}, {'id': 429, 'seek': 298270, 'start': 2989.58, 'end': 3001.02, 'text': ' expressed in the displacement addressing mode correct so small I small offset SP I mean small', 'tokens': [50708, 12675, 294, 264, 21899, 14329, 4391, 3006, 370, 1359, 286, 1359, 18687, 8420, 286, 914, 1359, 51280], 'temperature': 0.0, 'avg_logprob': -0.10891974982568774, 'compression_ratio': 1.630952380952381, 'no_speech_prob': 0.0020812680013477802}, {'id': 430, 'seek': 298270, 'start': 3001.02, 'end': 3006.54, 'text': ' offset essentially tells you how far away is I from the stack pointer and then when I add this', 'tokens': [51280, 18687, 4476, 5112, 291, 577, 1400, 1314, 307, 286, 490, 264, 8630, 23918, 293, 550, 562, 286, 909, 341, 51556], 'temperature': 0.0, 'avg_logprob': -0.10891974982568774, 'compression_ratio': 1.630952380952381, 'no_speech_prob': 0.0020812680013477802}, {'id': 431, 'seek': 300654, 'start': 3006.54, 'end': 3014.7, 'text': ' to the stack pointer correct I get the address of I I dereference it I get the value of I okay', 'tokens': [50364, 281, 264, 8630, 23918, 3006, 286, 483, 264, 2985, 295, 286, 286, 15969, 5158, 309, 286, 483, 264, 2158, 295, 286, 1392, 50772], 'temperature': 0.0, 'avg_logprob': -0.11319416622782863, 'compression_ratio': 1.9398907103825136, 'no_speech_prob': 0.017614874988794327}, {'id': 432, 'seek': 300654, 'start': 3014.7, 'end': 3020.42, 'text': ' so if I look at this entire tree it can be matched using this pattern in other words', 'tokens': [50772, 370, 498, 286, 574, 412, 341, 2302, 4230, 309, 393, 312, 21447, 1228, 341, 5102, 294, 661, 2283, 51058], 'temperature': 0.0, 'avg_logprob': -0.11319416622782863, 'compression_ratio': 1.9398907103825136, 'no_speech_prob': 0.017614874988794327}, {'id': 433, 'seek': 300654, 'start': 3020.42, 'end': 3026.62, 'text': ' what I have is that I have this pattern in my pattern matching table and the pattern', 'tokens': [51058, 437, 286, 362, 307, 300, 286, 362, 341, 5102, 294, 452, 5102, 14324, 3199, 293, 264, 5102, 51368], 'temperature': 0.0, 'avg_logprob': -0.11319416622782863, 'compression_ratio': 1.9398907103825136, 'no_speech_prob': 0.017614874988794327}, {'id': 434, 'seek': 300654, 'start': 3026.62, 'end': 3031.9, 'text': ' matcher essentially look at the tree and then tries to find out how to find a pattern that', 'tokens': [51368, 2995, 260, 4476, 574, 412, 264, 4230, 293, 550, 9898, 281, 915, 484, 577, 281, 915, 257, 5102, 300, 51632], 'temperature': 0.0, 'avg_logprob': -0.11319416622782863, 'compression_ratio': 1.9398907103825136, 'no_speech_prob': 0.017614874988794327}, {'id': 435, 'seek': 303190, 'start': 3031.9, 'end': 3037.58, 'text': ' fits with the various patterns that are described in that and then it tries to choose the maximum', 'tokens': [50364, 9001, 365, 264, 3683, 8294, 300, 366, 7619, 294, 300, 293, 550, 309, 9898, 281, 2826, 264, 6674, 50648], 'temperature': 0.0, 'avg_logprob': -0.12794394609404774, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.037175241857767105}, {'id': 436, 'seek': 303190, 'start': 3037.58, 'end': 3042.62, 'text': ' pattern or the pattern which gives you minimum cost typically maximum pattern gives you the', 'tokens': [50648, 5102, 420, 264, 5102, 597, 2709, 291, 7285, 2063, 5850, 6674, 5102, 2709, 291, 264, 50900], 'temperature': 0.0, 'avg_logprob': -0.12794394609404774, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.037175241857767105}, {'id': 437, 'seek': 303190, 'start': 3042.62, 'end': 3050.1800000000003, 'text': ' minimum cost so if I can do that then the code for this entire thing is actually now this P okay', 'tokens': [50900, 7285, 2063, 370, 498, 286, 393, 360, 300, 550, 264, 3089, 337, 341, 2302, 551, 307, 767, 586, 341, 430, 1392, 51278], 'temperature': 0.0, 'avg_logprob': -0.12794394609404774, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.037175241857767105}, {'id': 438, 'seek': 303190, 'start': 3050.1800000000003, 'end': 3057.42, 'text': ' so that essentially means that this whole sub tree can now be replaced by a register which is', 'tokens': [51278, 370, 300, 4476, 1355, 300, 341, 1379, 1422, 4230, 393, 586, 312, 10772, 538, 257, 7280, 597, 307, 51640], 'temperature': 0.0, 'avg_logprob': -0.12794394609404774, 'compression_ratio': 1.8446601941747574, 'no_speech_prob': 0.037175241857767105}, {'id': 439, 'seek': 305742, 'start': 3057.42, 'end': 3065.5, 'text': ' in R naught right so let us do that now what we have is that we have this sub tree for which we', 'tokens': [50364, 294, 497, 13138, 558, 370, 718, 505, 360, 300, 586, 437, 321, 362, 307, 300, 321, 362, 341, 1422, 4230, 337, 597, 321, 50768], 'temperature': 0.0, 'avg_logprob': -0.11254007715574453, 'compression_ratio': 1.7365269461077844, 'no_speech_prob': 0.04244580119848251}, {'id': 440, 'seek': 305742, 'start': 3065.5, 'end': 3071.66, 'text': ' need to generate code now again look at this this is memory and this is a global location therefore', 'tokens': [50768, 643, 281, 8460, 3089, 586, 797, 574, 412, 341, 341, 307, 4675, 293, 341, 307, 257, 4338, 4914, 4412, 51076], 'temperature': 0.0, 'avg_logprob': -0.11254007715574453, 'compression_ratio': 1.7365269461077844, 'no_speech_prob': 0.04244580119848251}, {'id': 441, 'seek': 305742, 'start': 3071.66, 'end': 3080.14, 'text': ' first thing is that we need to move the address of B into a register right and then we have to', 'tokens': [51076, 700, 551, 307, 300, 321, 643, 281, 1286, 264, 2985, 295, 363, 666, 257, 7280, 558, 293, 550, 321, 362, 281, 51500], 'temperature': 0.0, 'avg_logprob': -0.11254007715574453, 'compression_ratio': 1.7365269461077844, 'no_speech_prob': 0.04244580119848251}, {'id': 442, 'seek': 308014, 'start': 3080.14, 'end': 3087.22, 'text': ' increment that register right this has to be value B because you have to increment B', 'tokens': [50364, 26200, 300, 7280, 558, 341, 575, 281, 312, 2158, 363, 570, 291, 362, 281, 26200, 363, 50718], 'temperature': 0.0, 'avg_logprob': -0.14477679003839908, 'compression_ratio': 1.8159203980099503, 'no_speech_prob': 0.04799675941467285}, {'id': 443, 'seek': 308014, 'start': 3087.22, 'end': 3092.98, 'text': ' not supposed to increment the address of B okay so again look at this what do we have we have', 'tokens': [50718, 406, 3442, 281, 26200, 264, 2985, 295, 363, 1392, 370, 797, 574, 412, 341, 437, 360, 321, 362, 321, 362, 51006], 'temperature': 0.0, 'avg_logprob': -0.14477679003839908, 'compression_ratio': 1.8159203980099503, 'no_speech_prob': 0.04799675941467285}, {'id': 444, 'seek': 308014, 'start': 3092.98, 'end': 3097.94, 'text': ' mem of B right and in order for me to find out mem of B what I need to do is that I have to', 'tokens': [51006, 1334, 295, 363, 558, 293, 294, 1668, 337, 385, 281, 915, 484, 1334, 295, 363, 437, 286, 643, 281, 360, 307, 300, 286, 362, 281, 51254], 'temperature': 0.0, 'avg_logprob': -0.14477679003839908, 'compression_ratio': 1.8159203980099503, 'no_speech_prob': 0.04799675941467285}, {'id': 445, 'seek': 308014, 'start': 3097.94, 'end': 3107.98, 'text': ' load the value of B into a register I do that using this instruction load B comma R1 right and', 'tokens': [51254, 3677, 264, 2158, 295, 363, 666, 257, 7280, 286, 360, 300, 1228, 341, 10951, 3677, 363, 22117, 497, 16, 558, 293, 51756], 'temperature': 0.0, 'avg_logprob': -0.14477679003839908, 'compression_ratio': 1.8159203980099503, 'no_speech_prob': 0.04799675941467285}, {'id': 446, 'seek': 310798, 'start': 3108.3, 'end': 3115.98, 'text': ' then of course I have register plus 1 I can generate the increment instruction now that', 'tokens': [50380, 550, 295, 1164, 286, 362, 7280, 1804, 502, 286, 393, 8460, 264, 26200, 10951, 586, 300, 50764], 'temperature': 0.0, 'avg_logprob': -0.12475804813572618, 'compression_ratio': 1.6748466257668713, 'no_speech_prob': 0.0026891788002103567}, {'id': 447, 'seek': 310798, 'start': 3115.98, 'end': 3122.7, 'text': ' will replace this by a register this already is a register with an index right now what we can do', 'tokens': [50764, 486, 7406, 341, 538, 257, 7280, 341, 1217, 307, 257, 7280, 365, 364, 8186, 558, 586, 437, 321, 393, 360, 51100], 'temperature': 0.0, 'avg_logprob': -0.12475804813572618, 'compression_ratio': 1.6748466257668713, 'no_speech_prob': 0.0026891788002103567}, {'id': 448, 'seek': 310798, 'start': 3122.7, 'end': 3129.02, 'text': ' is that this is equivalent to doing a store instruction that is store this value in the', 'tokens': [51100, 307, 300, 341, 307, 10344, 281, 884, 257, 3531, 10951, 300, 307, 3531, 341, 2158, 294, 264, 51416], 'temperature': 0.0, 'avg_logprob': -0.12475804813572618, 'compression_ratio': 1.6748466257668713, 'no_speech_prob': 0.0026891788002103567}, {'id': 449, 'seek': 312902, 'start': 3129.02, 'end': 3137.06, 'text': ' location pointed by this register so that completes the code generation for this right', 'tokens': [50364, 4914, 10932, 538, 341, 7280, 370, 300, 36362, 264, 3089, 5125, 337, 341, 558, 50766], 'temperature': 0.0, 'avg_logprob': -0.13063877056806517, 'compression_ratio': 1.855, 'no_speech_prob': 0.25529712438583374}, {'id': 450, 'seek': 312902, 'start': 3137.06, 'end': 3144.2599999999998, 'text': ' so essentially what you have here in the tree pattern matching based code generator is that', 'tokens': [50766, 370, 4476, 437, 291, 362, 510, 294, 264, 4230, 5102, 14324, 2361, 3089, 19265, 307, 300, 51126], 'temperature': 0.0, 'avg_logprob': -0.13063877056806517, 'compression_ratio': 1.855, 'no_speech_prob': 0.25529712438583374}, {'id': 451, 'seek': 312902, 'start': 3144.2599999999998, 'end': 3152.22, 'text': ' the I mean the code generator has a set of patterns right and for each one of those patterns you also', 'tokens': [51126, 264, 286, 914, 264, 3089, 19265, 575, 257, 992, 295, 8294, 558, 293, 337, 1184, 472, 295, 729, 8294, 291, 611, 51524], 'temperature': 0.0, 'avg_logprob': -0.13063877056806517, 'compression_ratio': 1.855, 'no_speech_prob': 0.25529712438583374}, {'id': 452, 'seek': 312902, 'start': 3152.22, 'end': 3158.3, 'text': ' have this information about what is the code to be generated and how much cost it requires', 'tokens': [51524, 362, 341, 1589, 466, 437, 307, 264, 3089, 281, 312, 10833, 293, 577, 709, 2063, 309, 7029, 51828], 'temperature': 0.0, 'avg_logprob': -0.13063877056806517, 'compression_ratio': 1.855, 'no_speech_prob': 0.25529712438583374}, {'id': 453, 'seek': 315830, 'start': 3158.3, 'end': 3163.6600000000003, 'text': ' then the tree pattern matcher essentially walks through the tree and then tries to reduce each', 'tokens': [50364, 550, 264, 4230, 5102, 2995, 260, 4476, 12896, 807, 264, 4230, 293, 550, 9898, 281, 5407, 1184, 50632], 'temperature': 0.0, 'avg_logprob': -0.13098736036391484, 'compression_ratio': 1.9484536082474226, 'no_speech_prob': 0.0012371586635708809}, {'id': 454, 'seek': 315830, 'start': 3163.6600000000003, 'end': 3171.6600000000003, 'text': ' part of the tree or sub tree right to a pattern and then for that pattern what is the cost like', 'tokens': [50632, 644, 295, 264, 4230, 420, 1422, 4230, 558, 281, 257, 5102, 293, 550, 337, 300, 5102, 437, 307, 264, 2063, 411, 51032], 'temperature': 0.0, 'avg_logprob': -0.13098736036391484, 'compression_ratio': 1.9484536082474226, 'no_speech_prob': 0.0012371586635708809}, {'id': 455, 'seek': 315830, 'start': 3171.6600000000003, 'end': 3177.78, 'text': ' that it tries to cover or complete this entire tree that is really how the tree pattern matching', 'tokens': [51032, 300, 309, 9898, 281, 2060, 420, 3566, 341, 2302, 4230, 300, 307, 534, 577, 264, 4230, 5102, 14324, 51338], 'temperature': 0.0, 'avg_logprob': -0.13098736036391484, 'compression_ratio': 1.9484536082474226, 'no_speech_prob': 0.0012371586635708809}, {'id': 456, 'seek': 315830, 'start': 3177.78, 'end': 3183.86, 'text': ' based algorithms work we are not going to go into the details of how to write that pattern', 'tokens': [51338, 2361, 14642, 589, 321, 366, 406, 516, 281, 352, 666, 264, 4365, 295, 577, 281, 2464, 300, 5102, 51642], 'temperature': 0.0, 'avg_logprob': -0.13098736036391484, 'compression_ratio': 1.9484536082474226, 'no_speech_prob': 0.0012371586635708809}, {'id': 457, 'seek': 318386, 'start': 3183.86, 'end': 3189.34, 'text': ' matcher and how to specify the patterns and things just to give you an idea of what several', 'tokens': [50364, 2995, 260, 293, 577, 281, 16500, 264, 8294, 293, 721, 445, 281, 976, 291, 364, 1558, 295, 437, 2940, 50638], 'temperature': 0.0, 'avg_logprob': -0.17303256046624832, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.0766037330031395}, {'id': 458, 'seek': 318386, 'start': 3189.34, 'end': 3195.6200000000003, 'text': ' of the code generators are based on pattern matching code generators okay that is the point', 'tokens': [50638, 295, 264, 3089, 38662, 366, 2361, 322, 5102, 14324, 3089, 38662, 1392, 300, 307, 264, 935, 50952], 'temperature': 0.0, 'avg_logprob': -0.17303256046624832, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.0766037330031395}, {'id': 459, 'seek': 318386, 'start': 3195.6200000000003, 'end': 3204.1800000000003, 'text': ' that we need to any more questions okay now let us move forward okay as I mentioned earlier this', 'tokens': [50952, 300, 321, 643, 281, 604, 544, 1651, 1392, 586, 718, 505, 1286, 2128, 1392, 382, 286, 2835, 3071, 341, 51380], 'temperature': 0.0, 'avg_logprob': -0.17303256046624832, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.0766037330031395}, {'id': 460, 'seek': 318386, 'start': 3204.1800000000003, 'end': 3212.54, 'text': ' is something that yeah okay oh sorry this is slightly different topic so now let us address', 'tokens': [51380, 307, 746, 300, 1338, 1392, 1954, 2597, 341, 307, 4748, 819, 4829, 370, 586, 718, 505, 2985, 51798], 'temperature': 0.0, 'avg_logprob': -0.17303256046624832, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.0766037330031395}, {'id': 461, 'seek': 321254, 'start': 3212.54, 'end': 3220.7799999999997, 'text': ' this question of what happens if my basic block results in a DAG rather than a tree if it is a', 'tokens': [50364, 341, 1168, 295, 437, 2314, 498, 452, 3875, 3461, 3542, 294, 257, 9578, 38, 2831, 813, 257, 4230, 498, 309, 307, 257, 50776], 'temperature': 0.0, 'avg_logprob': -0.1627155049641927, 'compression_ratio': 1.6022099447513811, 'no_speech_prob': 0.008175411261618137}, {'id': 462, 'seek': 321254, 'start': 3220.7799999999997, 'end': 3231.34, 'text': ' tree we have good solutions available but if it is a DAG what do we do right okay so for this optimal', 'tokens': [50776, 4230, 321, 362, 665, 6547, 2435, 457, 498, 309, 307, 257, 9578, 38, 437, 360, 321, 360, 558, 1392, 370, 337, 341, 16252, 51304], 'temperature': 0.0, 'avg_logprob': -0.1627155049641927, 'compression_ratio': 1.6022099447513811, 'no_speech_prob': 0.008175411261618137}, {'id': 463, 'seek': 321254, 'start': 3231.34, 'end': 3237.14, 'text': ' code generation is NP-Hard we may not be able to generate optimal code so we have to use some', 'tokens': [51304, 3089, 5125, 307, 38611, 12, 39, 515, 321, 815, 406, 312, 1075, 281, 8460, 16252, 3089, 370, 321, 362, 281, 764, 512, 51594], 'temperature': 0.0, 'avg_logprob': -0.1627155049641927, 'compression_ratio': 1.6022099447513811, 'no_speech_prob': 0.008175411261618137}, {'id': 464, 'seek': 323714, 'start': 3237.14, 'end': 3245.98, 'text': ' heuristic to how we have to use some heuristic to generate efficient code right so one possible', 'tokens': [50364, 415, 374, 3142, 281, 577, 321, 362, 281, 764, 512, 415, 374, 3142, 281, 8460, 7148, 3089, 558, 370, 472, 1944, 50806], 'temperature': 0.0, 'avg_logprob': -0.12356420516967774, 'compression_ratio': 1.4881889763779528, 'no_speech_prob': 0.07026692479848862}, {'id': 465, 'seek': 323714, 'start': 3245.98, 'end': 3253.5, 'text': ' way is to look at your DAG and then split some of these nodes so that your DAG becomes a tree', 'tokens': [50806, 636, 307, 281, 574, 412, 428, 9578, 38, 293, 550, 7472, 512, 295, 613, 13891, 370, 300, 428, 9578, 38, 3643, 257, 4230, 51182], 'temperature': 0.0, 'avg_logprob': -0.12356420516967774, 'compression_ratio': 1.4881889763779528, 'no_speech_prob': 0.07026692479848862}, {'id': 466, 'seek': 325350, 'start': 3253.5, 'end': 3260.22, 'text': ' right let me give you an example here right supposing let us say that we have', 'tokens': [50364, 558, 718, 385, 976, 291, 364, 1365, 510, 558, 1003, 6110, 718, 505, 584, 300, 321, 362, 50700], 'temperature': 0.0, 'avg_logprob': -0.2634693781534831, 'compression_ratio': 1.1323529411764706, 'no_speech_prob': 0.014491790905594826}, {'id': 467, 'seek': 326022, 'start': 3260.22, 'end': 3288.74, 'text': ' something like this right it is a tree except that this particular node is shared right now', 'tokens': [50364, 746, 411, 341, 558, 309, 307, 257, 4230, 3993, 300, 341, 1729, 9984, 307, 5507, 558, 586, 51790], 'temperature': 0.0, 'avg_logprob': -0.2184950283595494, 'compression_ratio': 1.1973684210526316, 'no_speech_prob': 0.027977505698800087}, {'id': 468, 'seek': 328874, 'start': 3288.74, 'end': 3297.74, 'text': ' one way to make this a DAG is to replicate this node so if I replicate that node then it becomes', 'tokens': [50364, 472, 636, 281, 652, 341, 257, 9578, 38, 307, 281, 25356, 341, 9984, 370, 498, 286, 25356, 300, 9984, 550, 309, 3643, 50814], 'temperature': 0.0, 'avg_logprob': -0.10100458629095732, 'compression_ratio': 1.8653846153846154, 'no_speech_prob': 0.0015477361157536507}, {'id': 469, 'seek': 328874, 'start': 3297.74, 'end': 3307.4199999999996, 'text': ' something like this with this removed correct then it becomes a tree right then I can generate code', 'tokens': [50814, 746, 411, 341, 365, 341, 7261, 3006, 550, 309, 3643, 257, 4230, 558, 550, 286, 393, 8460, 3089, 51298], 'temperature': 0.0, 'avg_logprob': -0.10100458629095732, 'compression_ratio': 1.8653846153846154, 'no_speech_prob': 0.0015477361157536507}, {'id': 470, 'seek': 328874, 'start': 3307.4199999999996, 'end': 3313.66, 'text': ' for this tree but when I replicate what happens is that I will generate code for this part and', 'tokens': [51298, 337, 341, 4230, 457, 562, 286, 25356, 437, 2314, 307, 300, 286, 486, 8460, 3089, 337, 341, 644, 293, 51610], 'temperature': 0.0, 'avg_logprob': -0.10100458629095732, 'compression_ratio': 1.8653846153846154, 'no_speech_prob': 0.0015477361157536507}, {'id': 471, 'seek': 331366, 'start': 3314.46, 'end': 3321.62, 'text': ' I will again generate code for this part which is redundant and it will increase the cost of my', 'tokens': [50404, 286, 486, 797, 8460, 3089, 337, 341, 644, 597, 307, 40997, 293, 309, 486, 3488, 264, 2063, 295, 452, 50762], 'temperature': 0.0, 'avg_logprob': -0.1306895911693573, 'compression_ratio': 1.8, 'no_speech_prob': 0.014912592247128487}, {'id': 472, 'seek': 331366, 'start': 3321.62, 'end': 3331.54, 'text': ' right code generator okay another way of doing this is not so much replicate but generate code', 'tokens': [50762, 558, 3089, 19265, 1392, 1071, 636, 295, 884, 341, 307, 406, 370, 709, 25356, 457, 8460, 3089, 51258], 'temperature': 0.0, 'avg_logprob': -0.1306895911693573, 'compression_ratio': 1.8, 'no_speech_prob': 0.014912592247128487}, {'id': 473, 'seek': 331366, 'start': 3331.54, 'end': 3338.2599999999998, 'text': ' for one part do not do this right generate code for this part store it into a memory location and', 'tokens': [51258, 337, 472, 644, 360, 406, 360, 341, 558, 8460, 3089, 337, 341, 644, 3531, 309, 666, 257, 4675, 4914, 293, 51594], 'temperature': 0.0, 'avg_logprob': -0.1306895911693573, 'compression_ratio': 1.8, 'no_speech_prob': 0.014912592247128487}, {'id': 474, 'seek': 333826, 'start': 3338.26, 'end': 3344.7400000000002, 'text': ' use that memory location in the other one so that is the other way of doing it so instead of', 'tokens': [50364, 764, 300, 4675, 4914, 294, 264, 661, 472, 370, 300, 307, 264, 661, 636, 295, 884, 309, 370, 2602, 295, 50688], 'temperature': 0.0, 'avg_logprob': -0.13190602147301964, 'compression_ratio': 2.0106382978723403, 'no_speech_prob': 0.051711201667785645}, {'id': 475, 'seek': 333826, 'start': 3344.7400000000002, 'end': 3350.98, 'text': ' repeating the computation twice you kind of do the computation once and then store it in memory', 'tokens': [50688, 18617, 264, 24903, 6091, 291, 733, 295, 360, 264, 24903, 1564, 293, 550, 3531, 309, 294, 4675, 51000], 'temperature': 0.0, 'avg_logprob': -0.13190602147301964, 'compression_ratio': 2.0106382978723403, 'no_speech_prob': 0.051711201667785645}, {'id': 476, 'seek': 333826, 'start': 3350.98, 'end': 3356.98, 'text': ' and in the other side you essentially use it okay that is the second part compute the shard', 'tokens': [51000, 293, 294, 264, 661, 1252, 291, 4476, 764, 309, 1392, 300, 307, 264, 1150, 644, 14722, 264, 402, 515, 51300], 'temperature': 0.0, 'avg_logprob': -0.13190602147301964, 'compression_ratio': 2.0106382978723403, 'no_speech_prob': 0.051711201667785645}, {'id': 477, 'seek': 333826, 'start': 3356.98, 'end': 3363.9, 'text': ' tree once and then save it in memory and reuse okay this in general works for a class of machines', 'tokens': [51300, 4230, 1564, 293, 550, 3155, 309, 294, 4675, 293, 26225, 1392, 341, 294, 2674, 1985, 337, 257, 1508, 295, 8379, 51646], 'temperature': 0.0, 'avg_logprob': -0.13190602147301964, 'compression_ratio': 2.0106382978723403, 'no_speech_prob': 0.051711201667785645}, {'id': 478, 'seek': 336390, 'start': 3363.9, 'end': 3369.7000000000003, 'text': ' but again you have to remember that this may not necessarily result in the optimal code again', 'tokens': [50364, 457, 797, 291, 362, 281, 1604, 300, 341, 815, 406, 4725, 1874, 294, 264, 16252, 3089, 797, 50654], 'temperature': 0.0, 'avg_logprob': -0.12231237460405399, 'compression_ratio': 1.9893617021276595, 'no_speech_prob': 0.01275152899324894}, {'id': 479, 'seek': 336390, 'start': 3369.7000000000003, 'end': 3378.38, 'text': ' right okay now the next point is about code generator generators as I mentioned earlier', 'tokens': [50654, 558, 1392, 586, 264, 958, 935, 307, 466, 3089, 19265, 38662, 382, 286, 2835, 3071, 51088], 'temperature': 0.0, 'avg_logprob': -0.12231237460405399, 'compression_ratio': 1.9893617021276595, 'no_speech_prob': 0.01275152899324894}, {'id': 480, 'seek': 336390, 'start': 3378.38, 'end': 3384.42, 'text': ' writing code generator is fine but if you have to write code generator for machine A then code', 'tokens': [51088, 3579, 3089, 19265, 307, 2489, 457, 498, 291, 362, 281, 2464, 3089, 19265, 337, 3479, 316, 550, 3089, 51390], 'temperature': 0.0, 'avg_logprob': -0.12231237460405399, 'compression_ratio': 1.9893617021276595, 'no_speech_prob': 0.01275152899324894}, {'id': 481, 'seek': 336390, 'start': 3384.42, 'end': 3389.34, 'text': ' generator for machine B then code generator for machine C you do not want to repeat this exercise', 'tokens': [51390, 19265, 337, 3479, 363, 550, 3089, 19265, 337, 3479, 383, 291, 360, 406, 528, 281, 7149, 341, 5380, 51636], 'temperature': 0.0, 'avg_logprob': -0.12231237460405399, 'compression_ratio': 1.9893617021276595, 'no_speech_prob': 0.01275152899324894}, {'id': 482, 'seek': 338934, 'start': 3389.5, 'end': 3397.82, 'text': ' again and again so can we actually automate this code generators itself right so for that typically', 'tokens': [50372, 797, 293, 797, 370, 393, 321, 767, 31605, 341, 3089, 38662, 2564, 558, 370, 337, 300, 5850, 50788], 'temperature': 0.0, 'avg_logprob': -0.12056583553165584, 'compression_ratio': 1.845771144278607, 'no_speech_prob': 0.013770738616585732}, {'id': 483, 'seek': 338934, 'start': 3397.82, 'end': 3402.38, 'text': ' you use this tree pattern matching based approach and dynamic programming approach you kind of', 'tokens': [50788, 291, 764, 341, 4230, 5102, 14324, 2361, 3109, 293, 8546, 9410, 3109, 291, 733, 295, 51016], 'temperature': 0.0, 'avg_logprob': -0.12056583553165584, 'compression_ratio': 1.845771144278607, 'no_speech_prob': 0.013770738616585732}, {'id': 484, 'seek': 338934, 'start': 3402.38, 'end': 3406.42, 'text': ' combine these two things using tree pattern matching you kind of find out what is the', 'tokens': [51016, 10432, 613, 732, 721, 1228, 4230, 5102, 14324, 291, 733, 295, 915, 484, 437, 307, 264, 51218], 'temperature': 0.0, 'avg_logprob': -0.12056583553165584, 'compression_ratio': 1.845771144278607, 'no_speech_prob': 0.013770738616585732}, {'id': 485, 'seek': 338934, 'start': 3406.42, 'end': 3411.7000000000003, 'text': ' minimum cost for each sub tree and then using that you kind of apply it in the next higher', 'tokens': [51218, 7285, 2063, 337, 1184, 1422, 4230, 293, 550, 1228, 300, 291, 733, 295, 3079, 309, 294, 264, 958, 2946, 51482], 'temperature': 0.0, 'avg_logprob': -0.12056583553165584, 'compression_ratio': 1.845771144278607, 'no_speech_prob': 0.013770738616585732}, {'id': 486, 'seek': 341170, 'start': 3411.7, 'end': 3418.9399999999996, 'text': ' level okay so essentially it accepts three patterns associated cost and the semantic', 'tokens': [50364, 1496, 1392, 370, 4476, 309, 33538, 1045, 8294, 6615, 2063, 293, 264, 47982, 50726], 'temperature': 0.0, 'avg_logprob': -0.11959990275274847, 'compression_ratio': 2.045045045045045, 'no_speech_prob': 0.02223324403166771}, {'id': 487, 'seek': 341170, 'start': 3418.9399999999996, 'end': 3423.9399999999996, 'text': ' action which is essentially the code generation and then using some kind of a grammar you', 'tokens': [50726, 3069, 597, 307, 4476, 264, 3089, 5125, 293, 550, 1228, 512, 733, 295, 257, 22317, 291, 50976], 'temperature': 0.0, 'avg_logprob': -0.11959990275274847, 'compression_ratio': 2.045045045045045, 'no_speech_prob': 0.02223324403166771}, {'id': 488, 'seek': 341170, 'start': 3423.9399999999996, 'end': 3430.74, 'text': ' express these patterns and then you kind of write you write the code for a tree matcher', 'tokens': [50976, 5109, 613, 8294, 293, 550, 291, 733, 295, 2464, 291, 2464, 264, 3089, 337, 257, 4230, 2995, 260, 51316], 'temperature': 0.0, 'avg_logprob': -0.11959990275274847, 'compression_ratio': 2.045045045045045, 'no_speech_prob': 0.02223324403166771}, {'id': 489, 'seek': 341170, 'start': 3430.74, 'end': 3436.02, 'text': ' which kind of goes through the graph which kind of goes through the tree and then identifies what', 'tokens': [51316, 597, 733, 295, 1709, 807, 264, 4295, 597, 733, 295, 1709, 807, 264, 4230, 293, 550, 34597, 437, 51580], 'temperature': 0.0, 'avg_logprob': -0.11959990275274847, 'compression_ratio': 2.045045045045045, 'no_speech_prob': 0.02223324403166771}, {'id': 490, 'seek': 341170, 'start': 3436.02, 'end': 3440.8399999999997, 'text': ' can be matched but you also have to cover this entire tree and you have to find the one which', 'tokens': [51580, 393, 312, 21447, 457, 291, 611, 362, 281, 2060, 341, 2302, 4230, 293, 291, 362, 281, 915, 264, 472, 597, 51821], 'temperature': 0.0, 'avg_logprob': -0.11959990275274847, 'compression_ratio': 2.045045045045045, 'no_speech_prob': 0.02223324403166771}, {'id': 491, 'seek': 344084, 'start': 3440.84, 'end': 3446.84, 'text': ' covers it using the minimum cost okay so the first pass is the bottom up pass which finds a', 'tokens': [50364, 10538, 309, 1228, 264, 7285, 2063, 1392, 370, 264, 700, 1320, 307, 264, 2767, 493, 1320, 597, 10704, 257, 50664], 'temperature': 0.0, 'avg_logprob': -0.189881960550944, 'compression_ratio': 1.8226600985221675, 'no_speech_prob': 0.0014269561506807804}, {'id': 492, 'seek': 344084, 'start': 3446.84, 'end': 3451.76, 'text': ' set of patterns that cover the tree with the minimum cost and the second pass execute a', 'tokens': [50664, 992, 295, 8294, 300, 2060, 264, 4230, 365, 264, 7285, 2063, 293, 264, 1150, 1320, 14483, 257, 50910], 'temperature': 0.0, 'avg_logprob': -0.189881960550944, 'compression_ratio': 1.8226600985221675, 'no_speech_prob': 0.0014269561506807804}, {'id': 493, 'seek': 344084, 'start': 3451.76, 'end': 3458.48, 'text': ' semantic action which is basically generating the code and that is typically the top down part okay', 'tokens': [50910, 47982, 3069, 597, 307, 1936, 17746, 264, 3089, 293, 300, 307, 5850, 264, 1192, 760, 644, 1392, 51246], 'temperature': 0.0, 'avg_logprob': -0.189881960550944, 'compression_ratio': 1.8226600985221675, 'no_speech_prob': 0.0014269561506807804}, {'id': 494, 'seek': 344084, 'start': 3458.48, 'end': 3468.7200000000003, 'text': ' so there are a few code generator generators Twig, Iberg and Berg and Iberg okay these are', 'tokens': [51246, 370, 456, 366, 257, 1326, 3089, 19265, 38662, 2574, 328, 11, 286, 6873, 293, 27511, 293, 286, 6873, 1392, 613, 366, 51758], 'temperature': 0.0, 'avg_logprob': -0.189881960550944, 'compression_ratio': 1.8226600985221675, 'no_speech_prob': 0.0014269561506807804}, {'id': 495, 'seek': 346872, 'start': 3468.72, 'end': 3472.9599999999996, 'text': ' kind of popular code generator generators unfortunately we are not going to go into', 'tokens': [50364, 733, 295, 3743, 3089, 19265, 38662, 7015, 321, 366, 406, 516, 281, 352, 666, 50576], 'temperature': 0.0, 'avg_logprob': -0.13550404401925895, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.013181026093661785}, {'id': 496, 'seek': 346872, 'start': 3472.9599999999996, 'end': 3480.2799999999997, 'text': ' the details of this in this lecture okay so you may want to look up what these things are so essentially', 'tokens': [50576, 264, 4365, 295, 341, 294, 341, 7991, 1392, 370, 291, 815, 528, 281, 574, 493, 437, 613, 721, 366, 370, 4476, 50942], 'temperature': 0.0, 'avg_logprob': -0.13550404401925895, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.013181026093661785}, {'id': 497, 'seek': 346872, 'start': 3480.2799999999997, 'end': 3486.48, 'text': ' the entire process of writing a code generator itself can be automated and if you have a code', 'tokens': [50942, 264, 2302, 1399, 295, 3579, 257, 3089, 19265, 2564, 393, 312, 18473, 293, 498, 291, 362, 257, 3089, 51252], 'temperature': 0.0, 'avg_logprob': -0.13550404401925895, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.013181026093661785}, {'id': 498, 'seek': 346872, 'start': 3486.48, 'end': 3491.0, 'text': ' generator generator that will actually do similar to what you have seen in lexical analysis and', 'tokens': [51252, 19265, 19265, 300, 486, 767, 360, 2531, 281, 437, 291, 362, 1612, 294, 476, 87, 804, 5215, 293, 51478], 'temperature': 0.0, 'avg_logprob': -0.13550404401925895, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.013181026093661785}, {'id': 499, 'seek': 346872, 'start': 3491.0, 'end': 3497.2, 'text': ' right lex and yak so you know you no longer write these lexical analyzers right there are', 'tokens': [51478, 558, 476, 87, 293, 18603, 370, 291, 458, 291, 572, 2854, 2464, 613, 476, 87, 804, 6459, 41698, 558, 456, 366, 51788], 'temperature': 0.0, 'avg_logprob': -0.13550404401925895, 'compression_ratio': 1.9180327868852458, 'no_speech_prob': 0.013181026093661785}, {'id': 500, 'seek': 349720, 'start': 3497.2, 'end': 3503.64, 'text': ' programs which can generate these things okay now let us look at the last part after having', 'tokens': [50364, 4268, 597, 393, 8460, 613, 721, 1392, 586, 718, 505, 574, 412, 264, 1036, 644, 934, 1419, 50686], 'temperature': 0.0, 'avg_logprob': -0.12285573482513427, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.005181065760552883}, {'id': 501, 'seek': 349720, 'start': 3503.64, 'end': 3509.3199999999997, 'text': ' done these things you end up with the so-called machine code now is it guaranteed that this', 'tokens': [50686, 1096, 613, 721, 291, 917, 493, 365, 264, 370, 12, 11880, 3479, 3089, 586, 307, 309, 18031, 300, 341, 50970], 'temperature': 0.0, 'avg_logprob': -0.12285573482513427, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.005181065760552883}, {'id': 502, 'seek': 349720, 'start': 3509.3199999999997, 'end': 3516.24, 'text': ' machine code is supposed to be very good or will it also have some opportunities for optimization', 'tokens': [50970, 3479, 3089, 307, 3442, 281, 312, 588, 665, 420, 486, 309, 611, 362, 512, 4786, 337, 19618, 51316], 'temperature': 0.0, 'avg_logprob': -0.12285573482513427, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.005181065760552883}, {'id': 503, 'seek': 349720, 'start': 3516.24, 'end': 3523.7599999999998, 'text': ' okay let us look at it and then that kind of optimization opportunities can be addressed with', 'tokens': [51316, 1392, 718, 505, 574, 412, 309, 293, 550, 300, 733, 295, 19618, 4786, 393, 312, 13847, 365, 51692], 'temperature': 0.0, 'avg_logprob': -0.12285573482513427, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.005181065760552883}, {'id': 504, 'seek': 352376, 'start': 3523.76, 'end': 3529.76, 'text': ' what is called the peephole optimizer peephole essentially means a small window so what you', 'tokens': [50364, 437, 307, 1219, 264, 520, 595, 14094, 5028, 6545, 520, 595, 14094, 4476, 1355, 257, 1359, 4910, 370, 437, 291, 50664], 'temperature': 0.0, 'avg_logprob': -0.10847576040970652, 'compression_ratio': 1.9343434343434343, 'no_speech_prob': 0.018482407554984093}, {'id': 505, 'seek': 352376, 'start': 3529.76, 'end': 3536.44, 'text': ' do is that in this generated machine code you look at small windows of instructions and within', 'tokens': [50664, 360, 307, 300, 294, 341, 10833, 3479, 3089, 291, 574, 412, 1359, 9309, 295, 9415, 293, 1951, 50998], 'temperature': 0.0, 'avg_logprob': -0.10847576040970652, 'compression_ratio': 1.9343434343434343, 'no_speech_prob': 0.018482407554984093}, {'id': 506, 'seek': 352376, 'start': 3536.44, 'end': 3542.92, 'text': ' that small windows of instructions if you identify certain patterns for doing optimization you apply', 'tokens': [50998, 300, 1359, 9309, 295, 9415, 498, 291, 5876, 1629, 8294, 337, 884, 19618, 291, 3079, 51322], 'temperature': 0.0, 'avg_logprob': -0.10847576040970652, 'compression_ratio': 1.9343434343434343, 'no_speech_prob': 0.018482407554984093}, {'id': 507, 'seek': 352376, 'start': 3542.92, 'end': 3551.2400000000002, 'text': ' those optimizations right so these optimizations are effectively local optimization because you', 'tokens': [51322, 729, 5028, 14455, 558, 370, 613, 5028, 14455, 366, 8659, 2654, 19618, 570, 291, 51738], 'temperature': 0.0, 'avg_logprob': -0.10847576040970652, 'compression_ratio': 1.9343434343434343, 'no_speech_prob': 0.018482407554984093}, {'id': 508, 'seek': 355124, 'start': 3551.24, 'end': 3556.9199999999996, 'text': ' are looking at a small window of instructions okay and this is typically carried out on the', 'tokens': [50364, 366, 1237, 412, 257, 1359, 4910, 295, 9415, 1392, 293, 341, 307, 5850, 9094, 484, 322, 264, 50648], 'temperature': 0.0, 'avg_logprob': -0.09131011396351427, 'compression_ratio': 1.9156626506024097, 'no_speech_prob': 0.009654968976974487}, {'id': 509, 'seek': 355124, 'start': 3556.9199999999996, 'end': 3563.9199999999996, 'text': ' machine code but sometimes one could also apply this on the intermediate code okay as I mentioned', 'tokens': [50648, 3479, 3089, 457, 2171, 472, 727, 611, 3079, 341, 322, 264, 19376, 3089, 1392, 382, 286, 2835, 50998], 'temperature': 0.0, 'avg_logprob': -0.09131011396351427, 'compression_ratio': 1.9156626506024097, 'no_speech_prob': 0.009654968976974487}, {'id': 510, 'seek': 355124, 'start': 3563.9199999999996, 'end': 3569.24, 'text': ' earlier it is going to look at a small window but it is a sliding window of code which is what is', 'tokens': [50998, 3071, 309, 307, 516, 281, 574, 412, 257, 1359, 4910, 457, 309, 307, 257, 21169, 4910, 295, 3089, 597, 307, 437, 307, 51264], 'temperature': 0.0, 'avg_logprob': -0.09131011396351427, 'compression_ratio': 1.9156626506024097, 'no_speech_prob': 0.009654968976974487}, {'id': 511, 'seek': 355124, 'start': 3569.24, 'end': 3576.2, 'text': ' called the peephole and then it tries to apply these optimizations okay each improvement can', 'tokens': [51264, 1219, 264, 520, 595, 14094, 293, 550, 309, 9898, 281, 3079, 613, 5028, 14455, 1392, 1184, 10444, 393, 51612], 'temperature': 0.0, 'avg_logprob': -0.09131011396351427, 'compression_ratio': 1.9156626506024097, 'no_speech_prob': 0.009654968976974487}, {'id': 512, 'seek': 355124, 'start': 3576.2, 'end': 3580.8799999999997, 'text': ' itself internally to additional improvement so you have to kind of repeatedly apply these things', 'tokens': [51612, 2564, 19501, 281, 4497, 10444, 370, 291, 362, 281, 733, 295, 18227, 3079, 613, 721, 51846], 'temperature': 0.0, 'avg_logprob': -0.09131011396351427, 'compression_ratio': 1.9156626506024097, 'no_speech_prob': 0.009654968976974487}, {'id': 513, 'seek': 358088, 'start': 3580.88, 'end': 3587.6800000000003, 'text': ' like in many of the other optimizations okay now these are some of the optimizations that', 'tokens': [50364, 411, 294, 867, 295, 264, 661, 5028, 14455, 1392, 586, 613, 366, 512, 295, 264, 5028, 14455, 300, 50704], 'temperature': 0.0, 'avg_logprob': -0.11071454154120551, 'compression_ratio': 1.8383838383838385, 'no_speech_prob': 0.00037927209632471204}, {'id': 514, 'seek': 358088, 'start': 3587.6800000000003, 'end': 3594.56, 'text': ' are possible using peephole optimization okay for example eliminating redundant instructions', 'tokens': [50704, 366, 1944, 1228, 520, 595, 14094, 19618, 1392, 337, 1365, 31203, 40997, 9415, 51048], 'temperature': 0.0, 'avg_logprob': -0.11071454154120551, 'compression_ratio': 1.8383838383838385, 'no_speech_prob': 0.00037927209632471204}, {'id': 515, 'seek': 358088, 'start': 3594.56, 'end': 3601.28, 'text': ' eliminating unreachable code eliminating jump over jumps algebraic simplifications', 'tokens': [51048, 31203, 517, 16226, 712, 3089, 31203, 3012, 670, 16704, 21989, 299, 6883, 7833, 51384], 'temperature': 0.0, 'avg_logprob': -0.11071454154120551, 'compression_ratio': 1.8383838383838385, 'no_speech_prob': 0.00037927209632471204}, {'id': 516, 'seek': 358088, 'start': 3601.28, 'end': 3608.44, 'text': ' strength reduction and certain machine idioms okay we will see examples of some of these things in', 'tokens': [51384, 3800, 11004, 293, 1629, 3479, 18014, 4785, 1392, 321, 486, 536, 5110, 295, 512, 295, 613, 721, 294, 51742], 'temperature': 0.0, 'avg_logprob': -0.11071454154120551, 'compression_ratio': 1.8383838383838385, 'no_speech_prob': 0.00037927209632471204}, {'id': 517, 'seek': 360844, 'start': 3608.44, 'end': 3615.16, 'text': ' order for us to understand so for example let us say that the code generated has a load instruction', 'tokens': [50364, 1668, 337, 505, 281, 1223, 370, 337, 1365, 718, 505, 584, 300, 264, 3089, 10833, 575, 257, 3677, 10951, 50700], 'temperature': 0.0, 'avg_logprob': -0.12461428922765395, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.01920405961573124}, {'id': 518, 'seek': 360844, 'start': 3615.16, 'end': 3621.12, 'text': ' and then subsequently a store instruction and between this load and store instruction let us', 'tokens': [50700, 293, 550, 26514, 257, 3531, 10951, 293, 1296, 341, 3677, 293, 3531, 10951, 718, 505, 50998], 'temperature': 0.0, 'avg_logprob': -0.12461428922765395, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.01920405961573124}, {'id': 519, 'seek': 360844, 'start': 3621.12, 'end': 3627.76, 'text': ' assume that X was not sorry that R1 was not modified right that means that I am loading a', 'tokens': [50998, 6552, 300, 1783, 390, 406, 2597, 300, 497, 16, 390, 406, 15873, 558, 300, 1355, 300, 286, 669, 15114, 257, 51330], 'temperature': 0.0, 'avg_logprob': -0.12461428922765395, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.01920405961573124}, {'id': 520, 'seek': 360844, 'start': 3627.76, 'end': 3635.44, 'text': ' value from memory into R1 I am using it multiple times and then again I am storing it into memory', 'tokens': [51330, 2158, 490, 4675, 666, 497, 16, 286, 669, 1228, 309, 3866, 1413, 293, 550, 797, 286, 669, 26085, 309, 666, 4675, 51714], 'temperature': 0.0, 'avg_logprob': -0.12461428922765395, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.01920405961573124}, {'id': 521, 'seek': 363544, 'start': 3635.44, 'end': 3646.36, 'text': ' obviously this is a redundant instruction it can be eliminated right now let us look at this piece', 'tokens': [50364, 2745, 341, 307, 257, 40997, 10951, 309, 393, 312, 20308, 558, 586, 718, 505, 574, 412, 341, 2522, 50910], 'temperature': 0.0, 'avg_logprob': -0.10789730237877887, 'compression_ratio': 1.5403225806451613, 'no_speech_prob': 0.01605450175702572}, {'id': 522, 'seek': 363544, 'start': 3646.36, 'end': 3657.88, 'text': ' of code right I have condition equal to 1 if condition equal to 1 go to L1 do this right now', 'tokens': [50910, 295, 3089, 558, 286, 362, 4188, 2681, 281, 502, 498, 4188, 2681, 281, 502, 352, 281, 441, 16, 360, 341, 558, 586, 51486], 'temperature': 0.0, 'avg_logprob': -0.10789730237877887, 'compression_ratio': 1.5403225806451613, 'no_speech_prob': 0.01605450175702572}, {'id': 523, 'seek': 365788, 'start': 3657.88, 'end': 3667.2000000000003, 'text': ' will this code be ever executed in this situation no right because condition is 1 and then you are', 'tokens': [50364, 486, 341, 3089, 312, 1562, 17577, 294, 341, 2590, 572, 558, 570, 4188, 307, 502, 293, 550, 291, 366, 50830], 'temperature': 0.0, 'avg_logprob': -0.11904383377290108, 'compression_ratio': 1.6761363636363635, 'no_speech_prob': 0.016845578327775}, {'id': 524, 'seek': 365788, 'start': 3667.2000000000003, 'end': 3674.44, 'text': ' going to go to L1 so if you do constant propagation then this becomes 1 equal to 1 which is always', 'tokens': [50830, 516, 281, 352, 281, 441, 16, 370, 498, 291, 360, 5754, 38377, 550, 341, 3643, 502, 2681, 281, 502, 597, 307, 1009, 51192], 'temperature': 0.0, 'avg_logprob': -0.11904383377290108, 'compression_ratio': 1.6761363636363635, 'no_speech_prob': 0.016845578327775}, {'id': 525, 'seek': 365788, 'start': 3674.44, 'end': 3680.4, 'text': ' true that means that you are going to go here so this is an unreachable code it can be eliminated', 'tokens': [51192, 2074, 300, 1355, 300, 291, 366, 516, 281, 352, 510, 370, 341, 307, 364, 517, 16226, 712, 3089, 309, 393, 312, 20308, 51490], 'temperature': 0.0, 'avg_logprob': -0.11904383377290108, 'compression_ratio': 1.6761363636363635, 'no_speech_prob': 0.016845578327775}, {'id': 526, 'seek': 368040, 'start': 3680.4, 'end': 3688.1600000000003, 'text': ' and if this code happens to be just following this then all of this can be eliminated right', 'tokens': [50364, 293, 498, 341, 3089, 2314, 281, 312, 445, 3480, 341, 550, 439, 295, 341, 393, 312, 20308, 558, 50752], 'temperature': 0.0, 'avg_logprob': -0.11231375329288436, 'compression_ratio': 1.9010416666666667, 'no_speech_prob': 0.07784239947795868}, {'id': 527, 'seek': 368040, 'start': 3688.1600000000003, 'end': 3693.48, 'text': ' this condition can be eliminated this add can be eliminated but if there are I mean whatever', 'tokens': [50752, 341, 4188, 393, 312, 20308, 341, 909, 393, 312, 20308, 457, 498, 456, 366, 286, 914, 2035, 51018], 'temperature': 0.0, 'avg_logprob': -0.11231375329288436, 'compression_ratio': 1.9010416666666667, 'no_speech_prob': 0.07784239947795868}, {'id': 528, 'seek': 368040, 'start': 3693.48, 'end': 3697.96, 'text': ' instructions that are here you can actually eliminate all of them as well because they are', 'tokens': [51018, 9415, 300, 366, 510, 291, 393, 767, 13819, 439, 295, 552, 382, 731, 570, 436, 366, 51242], 'temperature': 0.0, 'avg_logprob': -0.11231375329288436, 'compression_ratio': 1.9010416666666667, 'no_speech_prob': 0.07784239947795868}, {'id': 529, 'seek': 368040, 'start': 3697.96, 'end': 3704.64, 'text': ' all dead code right so let me just since it is always going to jump from here to here any', 'tokens': [51242, 439, 3116, 3089, 558, 370, 718, 385, 445, 1670, 309, 307, 1009, 516, 281, 3012, 490, 510, 281, 510, 604, 51576], 'temperature': 0.0, 'avg_logprob': -0.11231375329288436, 'compression_ratio': 1.9010416666666667, 'no_speech_prob': 0.07784239947795868}, {'id': 530, 'seek': 370464, 'start': 3704.64, 'end': 3711.16, 'text': ' instruction that you see here right like the add or any additional instruction that you hear', 'tokens': [50364, 10951, 300, 291, 536, 510, 558, 411, 264, 909, 420, 604, 4497, 10951, 300, 291, 1568, 50690], 'temperature': 0.0, 'avg_logprob': -0.10745664743276742, 'compression_ratio': 1.921875, 'no_speech_prob': 0.036490194499492645}, {'id': 531, 'seek': 370464, 'start': 3711.16, 'end': 3716.7999999999997, 'text': ' they are all redundant and means they are all dead code so they are never going to be reached', 'tokens': [50690, 436, 366, 439, 40997, 293, 1355, 436, 366, 439, 3116, 3089, 370, 436, 366, 1128, 516, 281, 312, 6488, 50972], 'temperature': 0.0, 'avg_logprob': -0.10745664743276742, 'compression_ratio': 1.921875, 'no_speech_prob': 0.036490194499492645}, {'id': 532, 'seek': 370464, 'start': 3716.7999999999997, 'end': 3723.52, 'text': ' and you can eliminate them and the moment you eliminate this your L1 is directly below this', 'tokens': [50972, 293, 291, 393, 13819, 552, 293, 264, 1623, 291, 13819, 341, 428, 441, 16, 307, 3838, 2507, 341, 51308], 'temperature': 0.0, 'avg_logprob': -0.10745664743276742, 'compression_ratio': 1.921875, 'no_speech_prob': 0.036490194499492645}, {'id': 533, 'seek': 370464, 'start': 3723.52, 'end': 3733.0, 'text': ' one correct therefore this condition is also redundant and can be eliminated right so that', 'tokens': [51308, 472, 3006, 4412, 341, 4188, 307, 611, 40997, 293, 393, 312, 20308, 558, 370, 300, 51782], 'temperature': 0.0, 'avg_logprob': -0.10745664743276742, 'compression_ratio': 1.921875, 'no_speech_prob': 0.036490194499492645}, {'id': 534, 'seek': 373300, 'start': 3733.0, 'end': 3740.28, 'text': ' is why you apply these people optimization repeatedly right jump over jumps yeah sorry question', 'tokens': [50364, 307, 983, 291, 3079, 613, 561, 19618, 18227, 558, 3012, 670, 16704, 1338, 2597, 1168, 50728], 'temperature': 0.0, 'avg_logprob': -0.17351401479620682, 'compression_ratio': 1.7202380952380953, 'no_speech_prob': 0.011934250593185425}, {'id': 535, 'seek': 373300, 'start': 3740.28, 'end': 3751.36, 'text': ' in the intermediate code possibly it would have been done in the intermediate code but there are', 'tokens': [50728, 294, 264, 19376, 3089, 6264, 309, 576, 362, 668, 1096, 294, 264, 19376, 3089, 457, 456, 366, 51282], 'temperature': 0.0, 'avg_logprob': -0.17351401479620682, 'compression_ratio': 1.7202380952380953, 'no_speech_prob': 0.011934250593185425}, {'id': 536, 'seek': 373300, 'start': 3751.36, 'end': 3756.84, 'text': ' certain things that you do during code generation that would have caused some of these things to', 'tokens': [51282, 1629, 721, 300, 291, 360, 1830, 3089, 5125, 300, 576, 362, 7008, 512, 295, 613, 721, 281, 51556], 'temperature': 0.0, 'avg_logprob': -0.17351401479620682, 'compression_ratio': 1.7202380952380953, 'no_speech_prob': 0.011934250593185425}, {'id': 537, 'seek': 375684, 'start': 3756.84, 'end': 3765.6800000000003, 'text': ' happen also it is to answer your question you try to do some of these optimizations in the', 'tokens': [50364, 1051, 611, 309, 307, 281, 1867, 428, 1168, 291, 853, 281, 360, 512, 295, 613, 5028, 14455, 294, 264, 50806], 'temperature': 0.0, 'avg_logprob': -0.09352055976265355, 'compression_ratio': 1.9170984455958548, 'no_speech_prob': 0.03538595139980316}, {'id': 538, 'seek': 375684, 'start': 3765.6800000000003, 'end': 3771.1200000000003, 'text': ' intermediate code and then you take the optimized intermediate code and generate the machine code', 'tokens': [50806, 19376, 3089, 293, 550, 291, 747, 264, 26941, 19376, 3089, 293, 8460, 264, 3479, 3089, 51078], 'temperature': 0.0, 'avg_logprob': -0.09352055976265355, 'compression_ratio': 1.9170984455958548, 'no_speech_prob': 0.03538595139980316}, {'id': 539, 'seek': 375684, 'start': 3771.1200000000003, 'end': 3777.48, 'text': ' but in the process of generating the machine code right again these opportunities would', 'tokens': [51078, 457, 294, 264, 1399, 295, 17746, 264, 3479, 3089, 558, 797, 613, 4786, 576, 51396], 'temperature': 0.0, 'avg_logprob': -0.09352055976265355, 'compression_ratio': 1.9170984455958548, 'no_speech_prob': 0.03538595139980316}, {'id': 540, 'seek': 375684, 'start': 3777.48, 'end': 3782.0, 'text': ' possibly arise because of the way in which you are generating machine code see I can give you', 'tokens': [51396, 6264, 20288, 570, 295, 264, 636, 294, 597, 291, 366, 17746, 3479, 3089, 536, 286, 393, 976, 291, 51622], 'temperature': 0.0, 'avg_logprob': -0.09352055976265355, 'compression_ratio': 1.9170984455958548, 'no_speech_prob': 0.03538595139980316}, {'id': 541, 'seek': 378200, 'start': 3782.0, 'end': 3788.64, 'text': ' an example for this just saying that this let us say that we are trying to compute something', 'tokens': [50364, 364, 1365, 337, 341, 445, 1566, 300, 341, 718, 505, 584, 300, 321, 366, 1382, 281, 14722, 746, 50696], 'temperature': 0.0, 'avg_logprob': -0.15358221871512276, 'compression_ratio': 1.8176100628930818, 'no_speech_prob': 0.06626274436712265}, {'id': 542, 'seek': 378200, 'start': 3788.64, 'end': 3797.88, 'text': " right I mean so I will give you an example of this for example let us say that X is I mean let's say", 'tokens': [50696, 558, 286, 914, 370, 286, 486, 976, 291, 364, 1365, 295, 341, 337, 1365, 718, 505, 584, 300, 1783, 307, 286, 914, 718, 311, 584, 51158], 'temperature': 0.0, 'avg_logprob': -0.15358221871512276, 'compression_ratio': 1.8176100628930818, 'no_speech_prob': 0.06626274436712265}, {'id': 543, 'seek': 378200, 'start': 3797.88, 'end': 3805.28, 'text': ' that we have a variable which we were spilling loading and then again spilling and then loading', 'tokens': [51158, 300, 321, 362, 257, 7006, 597, 321, 645, 637, 7345, 15114, 293, 550, 797, 637, 7345, 293, 550, 15114, 51528], 'temperature': 0.0, 'avg_logprob': -0.15358221871512276, 'compression_ratio': 1.8176100628930818, 'no_speech_prob': 0.06626274436712265}, {'id': 544, 'seek': 380528, 'start': 3806.1600000000003, 'end': 3813.1200000000003, 'text': ' if you are doing that right it may be the case that I have been loading and again I am trying', 'tokens': [50408, 498, 291, 366, 884, 300, 558, 309, 815, 312, 264, 1389, 300, 286, 362, 668, 15114, 293, 797, 286, 669, 1382, 50756], 'temperature': 0.0, 'avg_logprob': -0.12742155673457126, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.06541136652231216}, {'id': 545, 'seek': 380528, 'start': 3813.1200000000003, 'end': 3817.96, 'text': ' to spill in between there were no modifications that were done there are no modifications that', 'tokens': [50756, 281, 22044, 294, 1296, 456, 645, 572, 26881, 300, 645, 1096, 456, 366, 572, 26881, 300, 50998], 'temperature': 0.0, 'avg_logprob': -0.12742155673457126, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.06541136652231216}, {'id': 546, 'seek': 380528, 'start': 3817.96, 'end': 3822.92, 'text': ' were done then there is no reason to store it so this can be eliminated so there are these', 'tokens': [50998, 645, 1096, 550, 456, 307, 572, 1778, 281, 3531, 309, 370, 341, 393, 312, 20308, 370, 456, 366, 613, 51246], 'temperature': 0.0, 'avg_logprob': -0.12742155673457126, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.06541136652231216}, {'id': 547, 'seek': 380528, 'start': 3822.92, 'end': 3828.4, 'text': ' opportunities that do arise and typically a simple peephole optimizer pass which repeatedly', 'tokens': [51246, 4786, 300, 360, 20288, 293, 5850, 257, 2199, 520, 595, 14094, 5028, 6545, 1320, 597, 18227, 51520], 'temperature': 0.0, 'avg_logprob': -0.12742155673457126, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.06541136652231216}, {'id': 548, 'seek': 380528, 'start': 3828.4, 'end': 3833.1600000000003, 'text': ' goes through this code kind of cleans up this so here is another example where you have what', 'tokens': [51520, 1709, 807, 341, 3089, 733, 295, 16912, 493, 341, 370, 510, 307, 1071, 1365, 689, 291, 362, 437, 51758], 'temperature': 0.0, 'avg_logprob': -0.12742155673457126, 'compression_ratio': 1.9094650205761317, 'no_speech_prob': 0.06541136652231216}, {'id': 549, 'seek': 383316, 'start': 3833.16, 'end': 3842.04, 'text': ' is called a jump over jump okay so here you have a less than b go to L1 and then in L1 you say go', 'tokens': [50364, 307, 1219, 257, 3012, 670, 3012, 1392, 370, 510, 291, 362, 257, 1570, 813, 272, 352, 281, 441, 16, 293, 550, 294, 441, 16, 291, 584, 352, 50808], 'temperature': 0.0, 'avg_logprob': -0.14388700973155888, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014788353815674782}, {'id': 550, 'seek': 383316, 'start': 3842.04, 'end': 3846.92, 'text': ' to L2 right if you look at these two things together you could have replaced this and then', 'tokens': [50808, 281, 441, 17, 558, 498, 291, 574, 412, 613, 732, 721, 1214, 291, 727, 362, 10772, 341, 293, 550, 51052], 'temperature': 0.0, 'avg_logprob': -0.14388700973155888, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014788353815674782}, {'id': 551, 'seek': 383316, 'start': 3846.92, 'end': 3852.96, 'text': ' said go to L2 strength reduction essentially says that instead of using some more expensive', 'tokens': [51052, 848, 352, 281, 441, 17, 3800, 11004, 4476, 1619, 300, 2602, 295, 1228, 512, 544, 5124, 51354], 'temperature': 0.0, 'avg_logprob': -0.14388700973155888, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014788353815674782}, {'id': 552, 'seek': 383316, 'start': 3852.96, 'end': 3857.92, 'text': ' operations you could have used right other operations again you could ask this question', 'tokens': [51354, 7705, 291, 727, 362, 1143, 558, 661, 7705, 797, 291, 727, 1029, 341, 1168, 51602], 'temperature': 0.0, 'avg_logprob': -0.14388700973155888, 'compression_ratio': 1.7692307692307692, 'no_speech_prob': 0.014788353815674782}, {'id': 553, 'seek': 385792, 'start': 3857.92, 'end': 3862.6800000000003, 'text': " wouldn't instruction selection have taken this care taken care of yes it could have", 'tokens': [50364, 2759, 380, 10951, 9450, 362, 2726, 341, 1127, 2726, 1127, 295, 2086, 309, 727, 362, 50602], 'temperature': 0.0, 'avg_logprob': -0.16342737319621634, 'compression_ratio': 1.8553191489361702, 'no_speech_prob': 0.13746696710586548}, {'id': 554, 'seek': 385792, 'start': 3862.6800000000003, 'end': 3868.04, 'text': " taken care of this but then if that didn't consider it for whatever reason it is then", 'tokens': [50602, 2726, 1127, 295, 341, 457, 550, 498, 300, 994, 380, 1949, 309, 337, 2035, 1778, 309, 307, 550, 50870], 'temperature': 0.0, 'avg_logprob': -0.16342737319621634, 'compression_ratio': 1.8553191489361702, 'no_speech_prob': 0.13746696710586548}, {'id': 555, 'seek': 385792, 'start': 3868.04, 'end': 3873.2000000000003, 'text': ' these opportunities do arise see for example when you are generating code right maybe this', 'tokens': [50870, 613, 4786, 360, 20288, 536, 337, 1365, 562, 291, 366, 17746, 3089, 558, 1310, 341, 51128], 'temperature': 0.0, 'avg_logprob': -0.16342737319621634, 'compression_ratio': 1.8553191489361702, 'no_speech_prob': 0.13746696710586548}, {'id': 556, 'seek': 385792, 'start': 3873.2000000000003, 'end': 3880.52, 'text': ' 8 was not a constant right and then maybe you did some constant propagation like what', 'tokens': [51128, 1649, 390, 406, 257, 5754, 558, 293, 550, 1310, 291, 630, 512, 5754, 38377, 411, 437, 51494], 'temperature': 0.0, 'avg_logprob': -0.16342737319621634, 'compression_ratio': 1.8553191489361702, 'no_speech_prob': 0.13746696710586548}, {'id': 557, 'seek': 385792, 'start': 3880.52, 'end': 3886.0, 'text': ' you did over here and then that resulted in this value being 8 now you have an additional', 'tokens': [51494, 291, 630, 670, 510, 293, 550, 300, 18753, 294, 341, 2158, 885, 1649, 586, 291, 362, 364, 4497, 51768], 'temperature': 0.0, 'avg_logprob': -0.16342737319621634, 'compression_ratio': 1.8553191489361702, 'no_speech_prob': 0.13746696710586548}, {'id': 558, 'seek': 388600, 'start': 3886.0, 'end': 3891.48, 'text': ' opportunity of doing this so whenever you have this multiplication you can replace multiplication', 'tokens': [50364, 2650, 295, 884, 341, 370, 5699, 291, 362, 341, 27290, 291, 393, 7406, 27290, 50638], 'temperature': 0.0, 'avg_logprob': -0.1447589913594354, 'compression_ratio': 1.848605577689243, 'no_speech_prob': 0.03284037113189697}, {'id': 559, 'seek': 388600, 'start': 3891.48, 'end': 3899.12, 'text': ' of a number which is 2 power 8 2 power k then you can replace it by a shift operation similarly', 'tokens': [50638, 295, 257, 1230, 597, 307, 568, 1347, 1649, 568, 1347, 350, 550, 291, 393, 7406, 309, 538, 257, 5513, 6916, 14138, 51020], 'temperature': 0.0, 'avg_logprob': -0.1447589913594354, 'compression_ratio': 1.848605577689243, 'no_speech_prob': 0.03284037113189697}, {'id': 560, 'seek': 388600, 'start': 3899.12, 'end': 3905.16, 'text': ' power operation can be I mean the power will not happen in the machine code level but yeah', 'tokens': [51020, 1347, 6916, 393, 312, 286, 914, 264, 1347, 486, 406, 1051, 294, 264, 3479, 3089, 1496, 457, 1338, 51322], 'temperature': 0.0, 'avg_logprob': -0.1447589913594354, 'compression_ratio': 1.848605577689243, 'no_speech_prob': 0.03284037113189697}, {'id': 561, 'seek': 388600, 'start': 3905.16, 'end': 3910.64, 'text': ' similar things like what you have seen in strength reduction right again machine idioms', 'tokens': [51322, 2531, 721, 411, 437, 291, 362, 1612, 294, 3800, 11004, 558, 797, 3479, 18014, 4785, 51596], 'temperature': 0.0, 'avg_logprob': -0.1447589913594354, 'compression_ratio': 1.848605577689243, 'no_speech_prob': 0.03284037113189697}, {'id': 562, 'seek': 388600, 'start': 3910.64, 'end': 3915.8, 'text': ' where you can actually replace certain things for example here we are loading x to r naught', 'tokens': [51596, 689, 291, 393, 767, 7406, 1629, 721, 337, 1365, 510, 321, 366, 15114, 2031, 281, 367, 13138, 51854], 'temperature': 0.0, 'avg_logprob': -0.1447589913594354, 'compression_ratio': 1.848605577689243, 'no_speech_prob': 0.03284037113189697}, {'id': 563, 'seek': 391580, 'start': 3916.6000000000004, 'end': 3924.28, 'text': ' incrementing r naught by 1 and storing the value correct so we could have replaced this', 'tokens': [50404, 26200, 278, 367, 13138, 538, 502, 293, 26085, 264, 2158, 3006, 370, 321, 727, 362, 10772, 341, 50788], 'temperature': 0.0, 'avg_logprob': -0.14578167379718937, 'compression_ratio': 1.7427184466019416, 'no_speech_prob': 0.0036975431721657515}, {'id': 564, 'seek': 391580, 'start': 3924.28, 'end': 3930.76, 'text': ' by a increment instruction if the machine supports an increment so these are opportunities', 'tokens': [50788, 538, 257, 26200, 10951, 498, 264, 3479, 9346, 364, 26200, 370, 613, 366, 4786, 51112], 'temperature': 0.0, 'avg_logprob': -0.14578167379718937, 'compression_ratio': 1.7427184466019416, 'no_speech_prob': 0.0036975431721657515}, {'id': 565, 'seek': 391580, 'start': 3930.76, 'end': 3938.6000000000004, 'text': ' that you get in code generation and you can actually exploit them right and you can eliminate', 'tokens': [51112, 300, 291, 483, 294, 3089, 5125, 293, 291, 393, 767, 25924, 552, 558, 293, 291, 393, 13819, 51504], 'temperature': 0.0, 'avg_logprob': -0.14578167379718937, 'compression_ratio': 1.7427184466019416, 'no_speech_prob': 0.0036975431721657515}, {'id': 566, 'seek': 391580, 'start': 3938.6000000000004, 'end': 3945.04, 'text': ' some redundant code or optimize your code so this optimization is the last phase after', 'tokens': [51504, 512, 40997, 3089, 420, 19719, 428, 3089, 370, 341, 19618, 307, 264, 1036, 5574, 934, 51826], 'temperature': 0.0, 'avg_logprob': -0.14578167379718937, 'compression_ratio': 1.7427184466019416, 'no_speech_prob': 0.0036975431721657515}, {'id': 567, 'seek': 394504, 'start': 3945.04, 'end': 3951.52, 'text': ' I mean last in the sense of after code generation you do one more pass of peephole optimization', 'tokens': [50364, 286, 914, 1036, 294, 264, 2020, 295, 934, 3089, 5125, 291, 360, 472, 544, 1320, 295, 520, 595, 14094, 19618, 50688], 'temperature': 0.0, 'avg_logprob': -0.17628910358135516, 'compression_ratio': 1.6193181818181819, 'no_speech_prob': 0.0042465487495064735}, {'id': 568, 'seek': 394504, 'start': 3951.52, 'end': 3957.32, 'text': ' and eliminate some of these redundant codes right that is something that you do okay that', 'tokens': [50688, 293, 13819, 512, 295, 613, 40997, 14211, 558, 300, 307, 746, 300, 291, 360, 1392, 300, 50978], 'temperature': 0.0, 'avg_logprob': -0.17628910358135516, 'compression_ratio': 1.6193181818181819, 'no_speech_prob': 0.0042465487495064735}, {'id': 569, 'seek': 394504, 'start': 3957.32, 'end': 3964.56, 'text': ' kind of completes our discussion on code generators so do you have any more questions on this', 'tokens': [50978, 733, 295, 36362, 527, 5017, 322, 3089, 38662, 370, 360, 291, 362, 604, 544, 1651, 322, 341, 51340], 'temperature': 0.0, 'avg_logprob': -0.17628910358135516, 'compression_ratio': 1.6193181818181819, 'no_speech_prob': 0.0042465487495064735}, {'id': 570, 'seek': 394504, 'start': 3964.56, 'end': 3965.56, 'text': ' yeah.', 'tokens': [51340, 1338, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.17628910358135516, 'compression_ratio': 1.6193181818181819, 'no_speech_prob': 0.0042465487495064735}, {'id': 571, 'seek': 396556, 'start': 3965.56, 'end': 3993.24, 'text': ' They will have separate code generators for each one of them okay so why do not we actually', 'tokens': [50364, 814, 486, 362, 4994, 3089, 38662, 337, 1184, 472, 295, 552, 1392, 370, 983, 360, 406, 321, 767, 51748], 'temperature': 0.0, 'avg_logprob': -0.2588634057478471, 'compression_ratio': 1.1518987341772151, 'no_speech_prob': 0.25361505150794983}, {'id': 572, 'seek': 399324, 'start': 3993.9199999999996, 'end': 3999.4799999999996, 'text': ' defer this question for some time right and we will come back and answer this but important', 'tokens': [50398, 25704, 341, 1168, 337, 512, 565, 558, 293, 321, 486, 808, 646, 293, 1867, 341, 457, 1021, 50676], 'temperature': 0.0, 'avg_logprob': -0.1327040072568913, 'compression_ratio': 1.9310344827586208, 'no_speech_prob': 0.27654752135276794}, {'id': 573, 'seek': 399324, 'start': 3999.4799999999996, 'end': 4005.3199999999997, 'text': ' thing to know is that when you say something as a compiler right it includes some code', 'tokens': [50676, 551, 281, 458, 307, 300, 562, 291, 584, 746, 382, 257, 31958, 558, 309, 5974, 512, 3089, 50968], 'temperature': 0.0, 'avg_logprob': -0.1327040072568913, 'compression_ratio': 1.9310344827586208, 'no_speech_prob': 0.27654752135276794}, {'id': 574, 'seek': 399324, 'start': 4005.3199999999997, 'end': 4010.3599999999997, 'text': ' generator how that code generator is generated is a different issue either it could have', 'tokens': [50968, 19265, 577, 300, 3089, 19265, 307, 10833, 307, 257, 819, 2734, 2139, 309, 727, 362, 51220], 'temperature': 0.0, 'avg_logprob': -0.1327040072568913, 'compression_ratio': 1.9310344827586208, 'no_speech_prob': 0.27654752135276794}, {'id': 575, 'seek': 399324, 'start': 4010.3599999999997, 'end': 4016.9199999999996, 'text': ' been written by some set of people or it could have been generated by a generator but then', 'tokens': [51220, 668, 3720, 538, 512, 992, 295, 561, 420, 309, 727, 362, 668, 10833, 538, 257, 19265, 457, 550, 51548], 'temperature': 0.0, 'avg_logprob': -0.1327040072568913, 'compression_ratio': 1.9310344827586208, 'no_speech_prob': 0.27654752135276794}, {'id': 576, 'seek': 399324, 'start': 4016.9199999999996, 'end': 4021.16, 'text': ' that module has to be a part of the compiler that is something that we need to understand', 'tokens': [51548, 300, 10088, 575, 281, 312, 257, 644, 295, 264, 31958, 300, 307, 746, 300, 321, 643, 281, 1223, 51760], 'temperature': 0.0, 'avg_logprob': -0.1327040072568913, 'compression_ratio': 1.9310344827586208, 'no_speech_prob': 0.27654752135276794}, {'id': 577, 'seek': 402116, 'start': 4021.2799999999997, 'end': 4029.0, 'text': ' Now this retarget ability to multiple target machines right you would have seen why that', 'tokens': [50370, 823, 341, 1533, 289, 847, 3485, 281, 3866, 3779, 8379, 558, 291, 576, 362, 1612, 983, 300, 50756], 'temperature': 0.0, 'avg_logprob': -0.19933246265758167, 'compression_ratio': 1.8581560283687943, 'no_speech_prob': 0.21072019636631012}, {'id': 578, 'seek': 402116, 'start': 4029.0, 'end': 4039.56, 'text': ' happens right why that happens meaning like so you have these different languages so this', 'tokens': [50756, 2314, 558, 983, 300, 2314, 3620, 411, 370, 291, 362, 613, 819, 8650, 370, 341, 51284], 'temperature': 0.0, 'avg_logprob': -0.19933246265758167, 'compression_ratio': 1.8581560283687943, 'no_speech_prob': 0.21072019636631012}, {'id': 579, 'seek': 402116, 'start': 4039.56, 'end': 4045.3599999999997, 'text': ' is language one language two and language n right and then you have these different', 'tokens': [51284, 307, 2856, 472, 2856, 732, 293, 2856, 297, 558, 293, 550, 291, 362, 613, 819, 51574], 'temperature': 0.0, 'avg_logprob': -0.19933246265758167, 'compression_ratio': 1.8581560283687943, 'no_speech_prob': 0.21072019636631012}, {'id': 580, 'seek': 404536, 'start': 4045.36, 'end': 4054.6800000000003, 'text': ' machines machine one machine two and machine three right so the conventional approach is', 'tokens': [50364, 8379, 3479, 472, 3479, 732, 293, 3479, 1045, 558, 370, 264, 16011, 3109, 307, 50830], 'temperature': 0.0, 'avg_logprob': -0.18051533863462252, 'compression_ratio': 1.736842105263158, 'no_speech_prob': 0.013408097438514233}, {'id': 581, 'seek': 404536, 'start': 4054.6800000000003, 'end': 4060.6, 'text': ' to kind of write from each language to the respective machine so that will be m cross', 'tokens': [50830, 281, 733, 295, 2464, 490, 1184, 2856, 281, 264, 23649, 3479, 370, 300, 486, 312, 275, 3278, 51126], 'temperature': 0.0, 'avg_logprob': -0.18051533863462252, 'compression_ratio': 1.736842105263158, 'no_speech_prob': 0.013408097438514233}, {'id': 582, 'seek': 404536, 'start': 4060.6, 'end': 4067.4, 'text': ' m you do not do that you never do that thing right so it goes into some intermediate form', 'tokens': [51126, 275, 291, 360, 406, 360, 300, 291, 1128, 360, 300, 551, 558, 370, 309, 1709, 666, 512, 19376, 1254, 51466], 'temperature': 0.0, 'avg_logprob': -0.18051533863462252, 'compression_ratio': 1.736842105263158, 'no_speech_prob': 0.013408097438514233}, {'id': 583, 'seek': 406740, 'start': 4067.4, 'end': 4077.4, 'text': ' right and then from there are separate code generators for this is the standard approach', 'tokens': [50364, 558, 293, 550, 490, 456, 366, 4994, 3089, 38662, 337, 341, 307, 264, 3832, 3109, 50864], 'temperature': 0.0, 'avg_logprob': -0.18651475133122625, 'compression_ratio': 1.8860103626943006, 'no_speech_prob': 0.006490161642432213}, {'id': 584, 'seek': 406740, 'start': 4077.4, 'end': 4083.1600000000003, 'text': ' that is followed now this code generator here will simply put code generator but it involves', 'tokens': [50864, 300, 307, 6263, 586, 341, 3089, 19265, 510, 486, 2935, 829, 3089, 19265, 457, 309, 11626, 51152], 'temperature': 0.0, 'avg_logprob': -0.18651475133122625, 'compression_ratio': 1.8860103626943006, 'no_speech_prob': 0.006490161642432213}, {'id': 585, 'seek': 406740, 'start': 4083.1600000000003, 'end': 4087.6, 'text': ' code generator plus a number of other cases as well right this code generator which is', 'tokens': [51152, 3089, 19265, 1804, 257, 1230, 295, 661, 3331, 382, 731, 558, 341, 3089, 19265, 597, 307, 51374], 'temperature': 0.0, 'avg_logprob': -0.18651475133122625, 'compression_ratio': 1.8860103626943006, 'no_speech_prob': 0.006490161642432213}, {'id': 586, 'seek': 406740, 'start': 4087.6, 'end': 4094.8, 'text': ' specific for machine one correct your question is it generated by a generator or is it manually', 'tokens': [51374, 2685, 337, 3479, 472, 3006, 428, 1168, 307, 309, 10833, 538, 257, 19265, 420, 307, 309, 16945, 51734], 'temperature': 0.0, 'avg_logprob': -0.18651475133122625, 'compression_ratio': 1.8860103626943006, 'no_speech_prob': 0.006490161642432213}, {'id': 587, 'seek': 409480, 'start': 4094.8, 'end': 4104.360000000001, 'text': ' written you definitely have to have a CG for each okay the question is whether the CG is', 'tokens': [50364, 3720, 291, 2138, 362, 281, 362, 257, 38007, 337, 1184, 1392, 264, 1168, 307, 1968, 264, 38007, 307, 50842], 'temperature': 0.0, 'avg_logprob': -0.13327780636874112, 'compression_ratio': 2.0274725274725274, 'no_speech_prob': 0.005856423173099756}, {'id': 588, 'seek': 409480, 'start': 4104.360000000001, 'end': 4110.52, 'text': ' manually generated or is generated by a code generator right so code generators if you have', 'tokens': [50842, 16945, 10833, 420, 307, 10833, 538, 257, 3089, 19265, 558, 370, 3089, 38662, 498, 291, 362, 51150], 'temperature': 0.0, 'avg_logprob': -0.13327780636874112, 'compression_ratio': 2.0274725274725274, 'no_speech_prob': 0.005856423173099756}, {'id': 589, 'seek': 409480, 'start': 4110.52, 'end': 4116.12, 'text': ' a code generator which can generate effective code yes you have a single code generator and', 'tokens': [51150, 257, 3089, 19265, 597, 393, 8460, 4942, 3089, 2086, 291, 362, 257, 2167, 3089, 19265, 293, 51430], 'temperature': 0.0, 'avg_logprob': -0.13327780636874112, 'compression_ratio': 2.0274725274725274, 'no_speech_prob': 0.005856423173099756}, {'id': 590, 'seek': 409480, 'start': 4116.12, 'end': 4122.8, 'text': ' then specify these for each one of those machines and then the code generator would generate the', 'tokens': [51430, 550, 16500, 613, 337, 1184, 472, 295, 729, 8379, 293, 550, 264, 3089, 19265, 576, 8460, 264, 51764], 'temperature': 0.0, 'avg_logprob': -0.13327780636874112, 'compression_ratio': 2.0274725274725274, 'no_speech_prob': 0.005856423173099756}, {'id': 591, 'seek': 412280, 'start': 4122.8, 'end': 4129.4800000000005, 'text': ' CG for each one of them right obviously that that that is the purpose of code generator generator', 'tokens': [50364, 38007, 337, 1184, 472, 295, 552, 558, 2745, 300, 300, 300, 307, 264, 4334, 295, 3089, 19265, 19265, 50698], 'temperature': 0.0, 'avg_logprob': -0.24407492550936613, 'compression_ratio': 1.4968152866242037, 'no_speech_prob': 0.0682339146733284}, {'id': 592, 'seek': 412280, 'start': 4129.4800000000005, 'end': 4140.320000000001, 'text': ' right okay I am not very sure about the way in which things are done in GCC I will suddenly', 'tokens': [50698, 558, 1392, 286, 669, 406, 588, 988, 466, 264, 636, 294, 597, 721, 366, 1096, 294, 460, 11717, 286, 486, 5800, 51240], 'temperature': 0.0, 'avg_logprob': -0.24407492550936613, 'compression_ratio': 1.4968152866242037, 'no_speech_prob': 0.0682339146733284}, {'id': 593, 'seek': 412280, 'start': 4140.320000000001, 'end': 4144.360000000001, 'text': ' flash some slide in the next discussion okay.', 'tokens': [51240, 7319, 512, 4137, 294, 264, 958, 5017, 1392, 13, 51442], 'temperature': 0.0, 'avg_logprob': -0.24407492550936613, 'compression_ratio': 1.4968152866242037, 'no_speech_prob': 0.0682339146733284}]