[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 9.44, 'text': ' The next topic which we are going to dive into is the object files.', 'tokens': [50364, 440, 958, 4829, 597, 321, 366, 516, 281, 9192, 666, 307, 264, 2657, 7098, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.1470830651778209, 'compression_ratio': 1.7932960893854748, 'no_speech_prob': 0.08027585595846176}, {'id': 1, 'seek': 0, 'start': 9.44, 'end': 14.1, 'text': ' So remember the compilation steps which we saw earlier.', 'tokens': [50836, 407, 1604, 264, 40261, 4439, 597, 321, 1866, 3071, 13, 51069], 'temperature': 0.0, 'avg_logprob': -0.1470830651778209, 'compression_ratio': 1.7932960893854748, 'no_speech_prob': 0.08027585595846176}, {'id': 2, 'seek': 0, 'start': 14.1, 'end': 21.48, 'text': ' So the compiler produced the textual assembly file, which was fed to the assembler to produce', 'tokens': [51069, 407, 264, 31958, 7126, 264, 2487, 901, 12103, 3991, 11, 597, 390, 4636, 281, 264, 8438, 1918, 281, 5258, 51438], 'temperature': 0.0, 'avg_logprob': -0.1470830651778209, 'compression_ratio': 1.7932960893854748, 'no_speech_prob': 0.08027585595846176}, {'id': 3, 'seek': 0, 'start': 21.48, 'end': 22.78, 'text': ' the object file.', 'tokens': [51438, 264, 2657, 3991, 13, 51503], 'temperature': 0.0, 'avg_logprob': -0.1470830651778209, 'compression_ratio': 1.7932960893854748, 'no_speech_prob': 0.08027585595846176}, {'id': 4, 'seek': 0, 'start': 22.78, 'end': 27.72, 'text': ' So we will first look at what is object file and what all it contains and then we will', 'tokens': [51503, 407, 321, 486, 700, 574, 412, 437, 307, 2657, 3991, 293, 437, 439, 309, 8306, 293, 550, 321, 486, 51750], 'temperature': 0.0, 'avg_logprob': -0.1470830651778209, 'compression_ratio': 1.7932960893854748, 'no_speech_prob': 0.08027585595846176}, {'id': 5, 'seek': 2772, 'start': 27.72, 'end': 33.04, 'text': ' go into details of assembler and linker on how they operate with these files.', 'tokens': [50364, 352, 666, 4365, 295, 8438, 1918, 293, 2113, 260, 322, 577, 436, 9651, 365, 613, 7098, 13, 50630], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 6, 'seek': 2772, 'start': 33.04, 'end': 39.76, 'text': ' So object file is essentially a file which has the machine code which is produced by', 'tokens': [50630, 407, 2657, 3991, 307, 4476, 257, 3991, 597, 575, 264, 3479, 3089, 597, 307, 7126, 538, 50966], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 7, 'seek': 2772, 'start': 39.76, 'end': 44.2, 'text': ' the assembler and whatever is the related data for it.', 'tokens': [50966, 264, 8438, 1918, 293, 2035, 307, 264, 4077, 1412, 337, 309, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 8, 'seek': 2772, 'start': 44.2, 'end': 50.120000000000005, 'text': ' Now in most common cases the object file itself will be stored as a binary file.', 'tokens': [51188, 823, 294, 881, 2689, 3331, 264, 2657, 3991, 2564, 486, 312, 12187, 382, 257, 17434, 3991, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 9, 'seek': 2772, 'start': 50.120000000000005, 'end': 52.92, 'text': ' It will not be a text file.', 'tokens': [51484, 467, 486, 406, 312, 257, 2487, 3991, 13, 51624], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 10, 'seek': 2772, 'start': 52.92, 'end': 56.06, 'text': ' But there is no rule that object file has to be a binary file.', 'tokens': [51624, 583, 456, 307, 572, 4978, 300, 2657, 3991, 575, 281, 312, 257, 17434, 3991, 13, 51781], 'temperature': 0.0, 'avg_logprob': -0.12860194119540128, 'compression_ratio': 1.792626728110599, 'no_speech_prob': 0.5540965795516968}, {'id': 11, 'seek': 5606, 'start': 56.620000000000005, 'end': 62.82, 'text': ' In most common cases it is done that way because it allows linker to efficiently process that', 'tokens': [50392, 682, 881, 2689, 3331, 309, 307, 1096, 300, 636, 570, 309, 4045, 2113, 260, 281, 19621, 1399, 300, 50702], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 12, 'seek': 5606, 'start': 62.82, 'end': 63.82, 'text': ' input.', 'tokens': [50702, 4846, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 13, 'seek': 5606, 'start': 63.82, 'end': 68.98, 'text': ' If you had an object file which was textual then linker needed to deal with lot of strings', 'tokens': [50752, 759, 291, 632, 364, 2657, 3991, 597, 390, 2487, 901, 550, 2113, 260, 2978, 281, 2028, 365, 688, 295, 13985, 51010], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 14, 'seek': 5606, 'start': 68.98, 'end': 71.86, 'text': ' and ASCII which slows it down.', 'tokens': [51010, 293, 7469, 34, 9503, 597, 35789, 309, 760, 13, 51154], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 15, 'seek': 5606, 'start': 71.86, 'end': 77.26, 'text': ' So in most common cases you will find that the object files are in actually binary form.', 'tokens': [51154, 407, 294, 881, 2689, 3331, 291, 486, 915, 300, 264, 2657, 7098, 366, 294, 767, 17434, 1254, 13, 51424], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 16, 'seek': 5606, 'start': 77.26, 'end': 78.68, 'text': ' And what is in the object file?', 'tokens': [51424, 400, 437, 307, 294, 264, 2657, 3991, 30, 51495], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 17, 'seek': 5606, 'start': 78.68, 'end': 84.88, 'text': ' So we need some way to hold the instructions which were generated by the assembler.', 'tokens': [51495, 407, 321, 643, 512, 636, 281, 1797, 264, 9415, 597, 645, 10833, 538, 264, 8438, 1918, 13, 51805], 'temperature': 0.0, 'avg_logprob': -0.1380876964992947, 'compression_ratio': 1.721774193548387, 'no_speech_prob': 0.2332458347082138}, {'id': 18, 'seek': 8488, 'start': 84.88, 'end': 89.39999999999999, 'text': ' So MOV instruction in its binary encoding form.', 'tokens': [50364, 407, 19290, 53, 10951, 294, 1080, 17434, 43430, 1254, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 19, 'seek': 8488, 'start': 89.39999999999999, 'end': 95.19999999999999, 'text': ' We need some way to say that there is a variable called GBL which was initialized to value', 'tokens': [50590, 492, 643, 512, 636, 281, 584, 300, 456, 307, 257, 7006, 1219, 460, 17624, 597, 390, 5883, 1602, 281, 2158, 50880], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 20, 'seek': 8488, 'start': 95.19999999999999, 'end': 97.84, 'text': ' 5, 6, 7 whatever.', 'tokens': [50880, 1025, 11, 1386, 11, 1614, 2035, 13, 51012], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 21, 'seek': 8488, 'start': 97.84, 'end': 102.44, 'text': ' So this is the core information which we need to store in the object file.', 'tokens': [51012, 407, 341, 307, 264, 4965, 1589, 597, 321, 643, 281, 3531, 294, 264, 2657, 3991, 13, 51242], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 22, 'seek': 8488, 'start': 102.44, 'end': 106.88, 'text': ' Whatever is the data of your program and whatever are the set of instructions which it is supposed', 'tokens': [51242, 8541, 307, 264, 1412, 295, 428, 1461, 293, 2035, 366, 264, 992, 295, 9415, 597, 309, 307, 3442, 51464], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 23, 'seek': 8488, 'start': 106.88, 'end': 108.64, 'text': ' to run.', 'tokens': [51464, 281, 1190, 13, 51552], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 24, 'seek': 8488, 'start': 108.64, 'end': 113.52, 'text': ' But object file needs to have some more details for linker to operate correctly.', 'tokens': [51552, 583, 2657, 3991, 2203, 281, 362, 512, 544, 4365, 337, 2113, 260, 281, 9651, 8944, 13, 51796], 'temperature': 0.0, 'avg_logprob': -0.17439575915066702, 'compression_ratio': 1.6561264822134387, 'no_speech_prob': 0.009409334510564804}, {'id': 25, 'seek': 11352, 'start': 113.52, 'end': 118.75999999999999, 'text': ' For example object file needs to have information in terms of what all is defined in this object', 'tokens': [50364, 1171, 1365, 2657, 3991, 2203, 281, 362, 1589, 294, 2115, 295, 437, 439, 307, 7642, 294, 341, 2657, 50626], 'temperature': 0.0, 'avg_logprob': -0.1305544926570012, 'compression_ratio': 2.0833333333333335, 'no_speech_prob': 0.01204841397702694}, {'id': 26, 'seek': 11352, 'start': 118.75999999999999, 'end': 123.56, 'text': ' file and what all is referenced in this object file but not defined.', 'tokens': [50626, 3991, 293, 437, 439, 307, 32734, 294, 341, 2657, 3991, 457, 406, 7642, 13, 50866], 'temperature': 0.0, 'avg_logprob': -0.1305544926570012, 'compression_ratio': 2.0833333333333335, 'no_speech_prob': 0.01204841397702694}, {'id': 27, 'seek': 11352, 'start': 123.56, 'end': 130.44, 'text': ' For example remember we had int GBL in one file and extern int GBL in other file.', 'tokens': [50866, 1171, 1365, 1604, 321, 632, 560, 460, 17624, 294, 472, 3991, 293, 30360, 560, 460, 17624, 294, 661, 3991, 13, 51210], 'temperature': 0.0, 'avg_logprob': -0.1305544926570012, 'compression_ratio': 2.0833333333333335, 'no_speech_prob': 0.01204841397702694}, {'id': 28, 'seek': 11352, 'start': 130.44, 'end': 135.48, 'text': ' So somehow we need to record the information in the object file that GBL is referenced', 'tokens': [51210, 407, 6063, 321, 643, 281, 2136, 264, 1589, 294, 264, 2657, 3991, 300, 460, 17624, 307, 32734, 51462], 'temperature': 0.0, 'avg_logprob': -0.1305544926570012, 'compression_ratio': 2.0833333333333335, 'no_speech_prob': 0.01204841397702694}, {'id': 29, 'seek': 11352, 'start': 135.48, 'end': 138.22, 'text': ' in this file but it is not defined here.', 'tokens': [51462, 294, 341, 3991, 457, 309, 307, 406, 7642, 510, 13, 51599], 'temperature': 0.0, 'avg_logprob': -0.1305544926570012, 'compression_ratio': 2.0833333333333335, 'no_speech_prob': 0.01204841397702694}, {'id': 30, 'seek': 13822, 'start': 138.22, 'end': 144.18, 'text': ' And in the other files, in the other object file we need to say GBL is defined here and', 'tokens': [50364, 400, 294, 264, 661, 7098, 11, 294, 264, 661, 2657, 3991, 321, 643, 281, 584, 460, 17624, 307, 7642, 510, 293, 50662], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 31, 'seek': 13822, 'start': 144.18, 'end': 149.38, 'text': ' that will be used by linker to actually merge the inputs together.', 'tokens': [50662, 300, 486, 312, 1143, 538, 2113, 260, 281, 767, 22183, 264, 15743, 1214, 13, 50922], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 32, 'seek': 13822, 'start': 149.38, 'end': 154.66, 'text': ' So there are three forms of an object file.', 'tokens': [50922, 407, 456, 366, 1045, 6422, 295, 364, 2657, 3991, 13, 51186], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 33, 'seek': 13822, 'start': 154.66, 'end': 157.7, 'text': ' The first one is called as relocatable object file.', 'tokens': [51186, 440, 700, 472, 307, 1219, 382, 26981, 31415, 2657, 3991, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 34, 'seek': 13822, 'start': 157.7, 'end': 162.42, 'text': ' So someone had question at very beginning of the session on what is a relocatable object', 'tokens': [51338, 407, 1580, 632, 1168, 412, 588, 2863, 295, 264, 5481, 322, 437, 307, 257, 26981, 31415, 2657, 51574], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 35, 'seek': 13822, 'start': 162.42, 'end': 163.7, 'text': ' file.', 'tokens': [51574, 3991, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.13790877481524863, 'compression_ratio': 1.6911764705882353, 'no_speech_prob': 0.060068387538194656}, {'id': 36, 'seek': 16370, 'start': 163.7, 'end': 168.82, 'text': ' So relocatable object file is the one which is actually produced by the assembler or compiler', 'tokens': [50364, 407, 26981, 31415, 2657, 3991, 307, 264, 472, 597, 307, 767, 7126, 538, 264, 8438, 1918, 420, 31958, 50620], 'temperature': 0.0, 'avg_logprob': -0.12331961476525595, 'compression_ratio': 1.784688995215311, 'no_speech_prob': 0.11274886876344681}, {'id': 37, 'seek': 16370, 'start': 168.82, 'end': 170.85999999999999, 'text': ' for that matter.', 'tokens': [50620, 337, 300, 1871, 13, 50722], 'temperature': 0.0, 'avg_logprob': -0.12331961476525595, 'compression_ratio': 1.784688995215311, 'no_speech_prob': 0.11274886876344681}, {'id': 38, 'seek': 16370, 'start': 170.85999999999999, 'end': 176.85999999999999, 'text': ' It represents that it is not the final thing which can be loaded into the memory.', 'tokens': [50722, 467, 8855, 300, 309, 307, 406, 264, 2572, 551, 597, 393, 312, 13210, 666, 264, 4675, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.12331961476525595, 'compression_ratio': 1.784688995215311, 'no_speech_prob': 0.11274886876344681}, {'id': 39, 'seek': 16370, 'start': 176.85999999999999, 'end': 184.0, 'text': ' So it is an object file which may have references which are not defined in that object file.', 'tokens': [51022, 407, 309, 307, 364, 2657, 3991, 597, 815, 362, 15400, 597, 366, 406, 7642, 294, 300, 2657, 3991, 13, 51379], 'temperature': 0.0, 'avg_logprob': -0.12331961476525595, 'compression_ratio': 1.784688995215311, 'no_speech_prob': 0.11274886876344681}, {'id': 40, 'seek': 16370, 'start': 184.0, 'end': 189.1, 'text': ' So for example when you compile something and if it has a external reference which will', 'tokens': [51379, 407, 337, 1365, 562, 291, 31413, 746, 293, 498, 309, 575, 257, 8320, 6408, 597, 486, 51634], 'temperature': 0.0, 'avg_logprob': -0.12331961476525595, 'compression_ratio': 1.784688995215311, 'no_speech_prob': 0.11274886876344681}, {'id': 41, 'seek': 18910, 'start': 190.1, 'end': 195.57999999999998, 'text': ' by another object file then this file cannot be run directly because we have to first resolve', 'tokens': [50414, 538, 1071, 2657, 3991, 550, 341, 3991, 2644, 312, 1190, 3838, 570, 321, 362, 281, 700, 14151, 50688], 'temperature': 0.0, 'avg_logprob': -0.16179699121519578, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.13288594782352448}, {'id': 42, 'seek': 18910, 'start': 195.57999999999998, 'end': 197.06, 'text': ' that dependency.', 'tokens': [50688, 300, 33621, 13, 50762], 'temperature': 0.0, 'avg_logprob': -0.16179699121519578, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.13288594782352448}, {'id': 43, 'seek': 18910, 'start': 197.06, 'end': 202.57999999999998, 'text': ' So dependencies are not resolved and that is typically an relocatable object file.', 'tokens': [50762, 407, 36606, 366, 406, 20772, 293, 300, 307, 5850, 364, 26981, 31415, 2657, 3991, 13, 51038], 'temperature': 0.0, 'avg_logprob': -0.16179699121519578, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.13288594782352448}, {'id': 44, 'seek': 18910, 'start': 202.57999999999998, 'end': 209.29999999999998, 'text': ' It is called relocatable because it gets relocated first before it can be loaded into the memory', 'tokens': [51038, 467, 307, 1219, 26981, 31415, 570, 309, 2170, 26981, 770, 700, 949, 309, 393, 312, 13210, 666, 264, 4675, 51374], 'temperature': 0.0, 'avg_logprob': -0.16179699121519578, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.13288594782352448}, {'id': 45, 'seek': 18910, 'start': 209.29999999999998, 'end': 217.22, 'text': ' and we will get into details of what exactly relocatable means as we learn the linker part.', 'tokens': [51374, 293, 321, 486, 483, 666, 4365, 295, 437, 2293, 26981, 31415, 1355, 382, 321, 1466, 264, 2113, 260, 644, 13, 51770], 'temperature': 0.0, 'avg_logprob': -0.16179699121519578, 'compression_ratio': 1.7850467289719627, 'no_speech_prob': 0.13288594782352448}, {'id': 46, 'seek': 21722, 'start': 217.22, 'end': 219.58, 'text': ' Then there is a executable object file.', 'tokens': [50364, 1396, 456, 307, 257, 7568, 712, 2657, 3991, 13, 50482], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 47, 'seek': 21722, 'start': 219.58, 'end': 224.66, 'text': ' So executable object file is the one which has all the dependencies sorted out and is', 'tokens': [50482, 407, 7568, 712, 2657, 3991, 307, 264, 472, 597, 575, 439, 264, 36606, 25462, 484, 293, 307, 50736], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 48, 'seek': 21722, 'start': 224.66, 'end': 227.54, 'text': ' something which is now ready to run.', 'tokens': [50736, 746, 597, 307, 586, 1919, 281, 1190, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 49, 'seek': 21722, 'start': 227.54, 'end': 233.3, 'text': ' So when you produce a.out in your program it is actually an executable file.', 'tokens': [50880, 407, 562, 291, 5258, 257, 13, 346, 294, 428, 1461, 309, 307, 767, 364, 7568, 712, 3991, 13, 51168], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 50, 'seek': 21722, 'start': 233.3, 'end': 238.02, 'text': ' When you produce .o file it is a relocatable object file.', 'tokens': [51168, 1133, 291, 5258, 2411, 78, 3991, 309, 307, 257, 26981, 31415, 2657, 3991, 13, 51404], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 51, 'seek': 21722, 'start': 238.02, 'end': 242.76, 'text': ' Then there is something called a shared object file which is essentially you might have seen', 'tokens': [51404, 1396, 456, 307, 746, 1219, 257, 5507, 2657, 3991, 597, 307, 4476, 291, 1062, 362, 1612, 51641], 'temperature': 0.0, 'avg_logprob': -0.11909395456314087, 'compression_ratio': 1.95, 'no_speech_prob': 0.048839058727025986}, {'id': 52, 'seek': 24276, 'start': 242.76, 'end': 250.0, 'text': ' these files on your Linux or Windows machine which have .dll extension, something .dll', 'tokens': [50364, 613, 7098, 322, 428, 18734, 420, 8591, 3479, 597, 362, 2411, 67, 285, 10320, 11, 746, 2411, 67, 285, 50726], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 53, 'seek': 24276, 'start': 250.0, 'end': 251.76, 'text': ' or something .so.', 'tokens': [50726, 420, 746, 2411, 539, 13, 50814], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 54, 'seek': 24276, 'start': 251.76, 'end': 257.9, 'text': ' So these will be the shared object files and we will get into details of why they are needed.', 'tokens': [50814, 407, 613, 486, 312, 264, 5507, 2657, 7098, 293, 321, 486, 483, 666, 4365, 295, 983, 436, 366, 2978, 13, 51121], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 55, 'seek': 24276, 'start': 257.9, 'end': 262.76, 'text': ' So let us say I told you that it is in the binary form.', 'tokens': [51121, 407, 718, 505, 584, 286, 1907, 291, 300, 309, 307, 294, 264, 17434, 1254, 13, 51364], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 56, 'seek': 24276, 'start': 262.76, 'end': 265.36, 'text': ' So what format it actually follows.', 'tokens': [51364, 407, 437, 7877, 309, 767, 10002, 13, 51494], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 57, 'seek': 24276, 'start': 265.36, 'end': 268.2, 'text': ' So again this is a platform specific things.', 'tokens': [51494, 407, 797, 341, 307, 257, 3663, 2685, 721, 13, 51636], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 58, 'seek': 24276, 'start': 268.2, 'end': 271.96, 'text': ' Different platforms will have different object files.', 'tokens': [51636, 20825, 9473, 486, 362, 819, 2657, 7098, 13, 51824], 'temperature': 0.0, 'avg_logprob': -0.181368452129942, 'compression_ratio': 1.706140350877193, 'no_speech_prob': 0.14404863119125366}, {'id': 59, 'seek': 27196, 'start': 271.96, 'end': 277.15999999999997, 'text': ' There is something called as .cof, a binary file format called .cof which stands for common', 'tokens': [50364, 821, 307, 746, 1219, 382, 2411, 1291, 69, 11, 257, 17434, 3991, 7877, 1219, 2411, 1291, 69, 597, 7382, 337, 2689, 50624], 'temperature': 0.0, 'avg_logprob': -0.1869844745945286, 'compression_ratio': 1.706896551724138, 'no_speech_prob': 0.010650369338691235}, {'id': 60, 'seek': 27196, 'start': 277.15999999999997, 'end': 279.64, 'text': ' object file format.', 'tokens': [50624, 2657, 3991, 7877, 13, 50748], 'temperature': 0.0, 'avg_logprob': -0.1869844745945286, 'compression_ratio': 1.706896551724138, 'no_speech_prob': 0.010650369338691235}, {'id': 61, 'seek': 27196, 'start': 279.64, 'end': 284.84, 'text': ' This was actually introduced in the first Unix implementations.', 'tokens': [50748, 639, 390, 767, 7268, 294, 264, 700, 1156, 970, 4445, 763, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.1869844745945286, 'compression_ratio': 1.706896551724138, 'no_speech_prob': 0.010650369338691235}, {'id': 62, 'seek': 27196, 'start': 284.84, 'end': 289.96, 'text': ' Then there is something called as .pe which is portable executable.', 'tokens': [51008, 1396, 456, 307, 746, 1219, 382, 2411, 494, 597, 307, 21800, 7568, 712, 13, 51264], 'temperature': 0.0, 'avg_logprob': -0.1869844745945286, 'compression_ratio': 1.706896551724138, 'no_speech_prob': 0.010650369338691235}, {'id': 63, 'seek': 27196, 'start': 289.96, 'end': 294.32, 'text': ' This is the format which is actually used on Windows.', 'tokens': [51264, 639, 307, 264, 7877, 597, 307, 767, 1143, 322, 8591, 13, 51482], 'temperature': 0.0, 'avg_logprob': -0.1869844745945286, 'compression_ratio': 1.706896551724138, 'no_speech_prob': 0.010650369338691235}, {'id': 64, 'seek': 29432, 'start': 294.32, 'end': 301.32, 'text': ' So the .exe which is produced on Windows files, Windows platforms is actually in .pe', 'tokens': [50364, 407, 264, 2411, 3121, 68, 597, 307, 7126, 322, 8591, 7098, 11, 8591, 9473, 307, 767, 294, 2411, 494, 50714], 'temperature': 0.0, 'avg_logprob': -0.1417972214367925, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.027576403692364693}, {'id': 65, 'seek': 29432, 'start': 301.32, 'end': 304.84, 'text': ' format and it is a derivative of .cof.', 'tokens': [50714, 7877, 293, 309, 307, 257, 13760, 295, 2411, 1291, 69, 13, 50890], 'temperature': 0.0, 'avg_logprob': -0.1417972214367925, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.027576403692364693}, {'id': 66, 'seek': 29432, 'start': 304.84, 'end': 310.8, 'text': ' So .cof format defines something and then .exe format is very similar to that.', 'tokens': [50890, 407, 2411, 1291, 69, 7877, 23122, 746, 293, 550, 2411, 3121, 68, 7877, 307, 588, 2531, 281, 300, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.1417972214367925, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.027576403692364693}, {'id': 67, 'seek': 29432, 'start': 310.8, 'end': 315.34, 'text': ' Then there is something called as .elf which is what we will actually study in this class.', 'tokens': [51188, 1396, 456, 307, 746, 1219, 382, 2411, 1967, 597, 307, 437, 321, 486, 767, 2979, 294, 341, 1508, 13, 51415], 'temperature': 0.0, 'avg_logprob': -0.1417972214367925, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.027576403692364693}, {'id': 68, 'seek': 29432, 'start': 315.34, 'end': 322.88, 'text': ' So .elf is actually a binary format which is used on Linux and related operating system.', 'tokens': [51415, 407, 2411, 1967, 307, 767, 257, 17434, 7877, 597, 307, 1143, 322, 18734, 293, 4077, 7447, 1185, 13, 51792], 'temperature': 0.0, 'avg_logprob': -0.1417972214367925, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.027576403692364693}, {'id': 69, 'seek': 32288, 'start': 322.88, 'end': 328.6, 'text': ' So anything which is a derivative of Unix like Solaris other things use .elf.', 'tokens': [50364, 407, 1340, 597, 307, 257, 13760, 295, 1156, 970, 411, 22385, 271, 661, 721, 764, 2411, 1967, 13, 50650], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 70, 'seek': 32288, 'start': 328.6, 'end': 331.52, 'text': ' .elf is also used by lot of other things.', 'tokens': [50650, 2411, 1967, 307, 611, 1143, 538, 688, 295, 661, 721, 13, 50796], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 71, 'seek': 32288, 'start': 331.52, 'end': 337.52, 'text': ' For example, CUDA from NVIDIA uses .elf format for storing the binaries.', 'tokens': [50796, 1171, 1365, 11, 29777, 7509, 490, 426, 3958, 6914, 4960, 2411, 1967, 7877, 337, 26085, 264, 5171, 4889, 13, 51096], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 72, 'seek': 32288, 'start': 337.52, 'end': 342.4, 'text': ' PlayStation 3, PlayStation 4 binaries are stored in the .elf format.', 'tokens': [51096, 20599, 805, 11, 20599, 1017, 5171, 4889, 366, 12187, 294, 264, 2411, 1967, 7877, 13, 51340], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 73, 'seek': 32288, 'start': 342.4, 'end': 347.44, 'text': ' So it is kind of very widely used and that is why we will focus mostly on .elf in this', 'tokens': [51340, 407, 309, 307, 733, 295, 588, 13371, 1143, 293, 300, 307, 983, 321, 486, 1879, 5240, 322, 2411, 1967, 294, 341, 51592], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 74, 'seek': 32288, 'start': 347.44, 'end': 348.44, 'text': ' class.', 'tokens': [51592, 1508, 13, 51642], 'temperature': 0.0, 'avg_logprob': -0.2303153419494629, 'compression_ratio': 1.5848214285714286, 'no_speech_prob': 0.02674214355647564}, {'id': 75, 'seek': 34844, 'start': 348.44, 'end': 353.24, 'text': ' Whatever concepts we are teaching on what goes into the object file, the same things', 'tokens': [50364, 8541, 10392, 321, 366, 4571, 322, 437, 1709, 666, 264, 2657, 3991, 11, 264, 912, 721, 50604], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 76, 'seek': 34844, 'start': 353.24, 'end': 358.4, 'text': ' will need to be stored in .cof as well as .pe just that the format in which they are', 'tokens': [50604, 486, 643, 281, 312, 12187, 294, 2411, 1291, 69, 382, 731, 382, 2411, 494, 445, 300, 264, 7877, 294, 597, 436, 366, 50862], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 77, 'seek': 34844, 'start': 358.4, 'end': 361.04, 'text': ' stored will be different.', 'tokens': [50862, 12187, 486, 312, 819, 13, 50994], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 78, 'seek': 34844, 'start': 361.04, 'end': 366.56, 'text': ' And then there is Maco which is essentially used on the Mac platform.', 'tokens': [50994, 400, 550, 456, 307, 5707, 78, 597, 307, 4476, 1143, 322, 264, 5707, 3663, 13, 51270], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 79, 'seek': 34844, 'start': 366.56, 'end': 372.42, 'text': ' So given a file, how do you determine which file I am dealing with?', 'tokens': [51270, 407, 2212, 257, 3991, 11, 577, 360, 291, 6997, 597, 3991, 286, 669, 6260, 365, 30, 51563], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 80, 'seek': 34844, 'start': 372.42, 'end': 375.36, 'text': ' So there is a Unix command called file.', 'tokens': [51563, 407, 456, 307, 257, 1156, 970, 5622, 1219, 3991, 13, 51710], 'temperature': 0.0, 'avg_logprob': -0.16300087558979892, 'compression_ratio': 1.6147186147186148, 'no_speech_prob': 0.39203697443008423}, {'id': 81, 'seek': 37536, 'start': 375.36, 'end': 383.24, 'text': ' So if you do file on something, it tells you actually what type of file it is.', 'tokens': [50364, 407, 498, 291, 360, 3991, 322, 746, 11, 309, 5112, 291, 767, 437, 2010, 295, 3991, 309, 307, 13, 50758], 'temperature': 0.0, 'avg_logprob': -0.21724461752270896, 'compression_ratio': 1.4202898550724639, 'no_speech_prob': 0.23341676592826843}, {'id': 82, 'seek': 37536, 'start': 383.24, 'end': 392.64, 'text': ' To show this as a demo, so let us say I had this program.', 'tokens': [50758, 1407, 855, 341, 382, 257, 10723, 11, 370, 718, 505, 584, 286, 632, 341, 1461, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.21724461752270896, 'compression_ratio': 1.4202898550724639, 'no_speech_prob': 0.23341676592826843}, {'id': 83, 'seek': 37536, 'start': 392.64, 'end': 399.68, 'text': ' So when I do gcc-c sample.c, I have produced sample.o file.', 'tokens': [51228, 407, 562, 286, 360, 290, 1914, 12, 66, 6889, 13, 66, 11, 286, 362, 7126, 6889, 13, 78, 3991, 13, 51580], 'temperature': 0.0, 'avg_logprob': -0.21724461752270896, 'compression_ratio': 1.4202898550724639, 'no_speech_prob': 0.23341676592826843}, {'id': 84, 'seek': 39968, 'start': 399.76, 'end': 411.08, 'text': ' And if I do file on sample.o, it says it is a .elf file which is 64 bit and it is relocatable,', 'tokens': [50368, 400, 498, 286, 360, 3991, 322, 6889, 13, 78, 11, 309, 1619, 309, 307, 257, 2411, 1967, 3991, 597, 307, 12145, 857, 293, 309, 307, 26981, 31415, 11, 50934], 'temperature': 0.0, 'avg_logprob': -0.17081238502679869, 'compression_ratio': 1.6787878787878787, 'no_speech_prob': 0.12582892179489136}, {'id': 85, 'seek': 39968, 'start': 411.08, 'end': 413.0, 'text': ' which is what we had seen earlier.', 'tokens': [50934, 597, 307, 437, 321, 632, 1612, 3071, 13, 51030], 'temperature': 0.0, 'avg_logprob': -0.17081238502679869, 'compression_ratio': 1.6787878787878787, 'no_speech_prob': 0.12582892179489136}, {'id': 86, 'seek': 39968, 'start': 413.0, 'end': 420.88, 'text': ' Now if I do say dash m32 which tells gcc to compile for 32 bit and if I do file again,', 'tokens': [51030, 823, 498, 286, 360, 584, 8240, 275, 11440, 597, 5112, 290, 1914, 281, 31413, 337, 8858, 857, 293, 498, 286, 360, 3991, 797, 11, 51424], 'temperature': 0.0, 'avg_logprob': -0.17081238502679869, 'compression_ratio': 1.6787878787878787, 'no_speech_prob': 0.12582892179489136}, {'id': 87, 'seek': 39968, 'start': 420.88, 'end': 426.04, 'text': ' you will see now it is .elf which is 32 bit and relocatable.', 'tokens': [51424, 291, 486, 536, 586, 309, 307, 2411, 1967, 597, 307, 8858, 857, 293, 26981, 31415, 13, 51682], 'temperature': 0.0, 'avg_logprob': -0.17081238502679869, 'compression_ratio': 1.6787878787878787, 'no_speech_prob': 0.12582892179489136}, {'id': 88, 'seek': 42604, 'start': 426.04, 'end': 431.12, 'text': ' So there is some information in the object file which is helping file command determine', 'tokens': [50364, 407, 456, 307, 512, 1589, 294, 264, 2657, 3991, 597, 307, 4315, 3991, 5622, 6997, 50618], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 89, 'seek': 42604, 'start': 431.12, 'end': 433.8, 'text': ' what type of file it is.', 'tokens': [50618, 437, 2010, 295, 3991, 309, 307, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 90, 'seek': 42604, 'start': 433.8, 'end': 436.96000000000004, 'text': ' Now let us look at gcc-sample.c.', 'tokens': [50752, 823, 718, 505, 574, 412, 290, 1914, 12, 19988, 781, 13, 66, 13, 50910], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 91, 'seek': 42604, 'start': 436.96000000000004, 'end': 442.68, 'text': ' I produce an executable file and I do file a.out.', 'tokens': [50910, 286, 5258, 364, 7568, 712, 3991, 293, 286, 360, 3991, 257, 13, 346, 13, 51196], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 92, 'seek': 42604, 'start': 442.68, 'end': 449.24, 'text': ' I see it is a .elf file, but it is an executable.', 'tokens': [51196, 286, 536, 309, 307, 257, 2411, 1967, 3991, 11, 457, 309, 307, 364, 7568, 712, 13, 51524], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 93, 'seek': 42604, 'start': 449.24, 'end': 452.04, 'text': ' It is not relocatable.', 'tokens': [51524, 467, 307, 406, 26981, 31415, 13, 51664], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 94, 'seek': 42604, 'start': 452.04, 'end': 454.90000000000003, 'text': ' And then there is a bunch of other information.', 'tokens': [51664, 400, 550, 456, 307, 257, 3840, 295, 661, 1589, 13, 51807], 'temperature': 0.0, 'avg_logprob': -0.13318627151017337, 'compression_ratio': 1.6544502617801047, 'no_speech_prob': 0.005217251367866993}, {'id': 95, 'seek': 45490, 'start': 454.9, 'end': 460.29999999999995, 'text': ' The file command helps you determine what type of file it is.', 'tokens': [50364, 440, 3991, 5622, 3665, 291, 6997, 437, 2010, 295, 3991, 309, 307, 13, 50634], 'temperature': 0.0, 'avg_logprob': -0.14540163263097985, 'compression_ratio': 1.6850828729281768, 'no_speech_prob': 0.004751615226268768}, {'id': 96, 'seek': 45490, 'start': 460.29999999999995, 'end': 468.62, 'text': ' Now there are various tools which you can use on Linux to examine the contents of the', 'tokens': [50634, 823, 456, 366, 3683, 3873, 597, 291, 393, 764, 322, 18734, 281, 17496, 264, 15768, 295, 264, 51050], 'temperature': 0.0, 'avg_logprob': -0.14540163263097985, 'compression_ratio': 1.6850828729281768, 'no_speech_prob': 0.004751615226268768}, {'id': 97, 'seek': 45490, 'start': 468.62, 'end': 471.34, 'text': ' object files.', 'tokens': [51050, 2657, 7098, 13, 51186], 'temperature': 0.0, 'avg_logprob': -0.14540163263097985, 'compression_ratio': 1.6850828729281768, 'no_speech_prob': 0.004751615226268768}, {'id': 98, 'seek': 45490, 'start': 471.34, 'end': 476.7, 'text': ' There is a command called objdump which we will heavily use in this class.', 'tokens': [51186, 821, 307, 257, 5622, 1219, 1111, 37109, 1420, 597, 321, 486, 10950, 764, 294, 341, 1508, 13, 51454], 'temperature': 0.0, 'avg_logprob': -0.14540163263097985, 'compression_ratio': 1.6850828729281768, 'no_speech_prob': 0.004751615226268768}, {'id': 99, 'seek': 45490, 'start': 476.7, 'end': 483.21999999999997, 'text': ' So objdump is essentially will dump the content of the object files.', 'tokens': [51454, 407, 1111, 37109, 1420, 307, 4476, 486, 11430, 264, 2701, 295, 264, 2657, 7098, 13, 51780], 'temperature': 0.0, 'avg_logprob': -0.14540163263097985, 'compression_ratio': 1.6850828729281768, 'no_speech_prob': 0.004751615226268768}, {'id': 100, 'seek': 48322, 'start': 483.22, 'end': 486.14000000000004, 'text': ' And objdump works on any type of object file.', 'tokens': [50364, 400, 1111, 37109, 1420, 1985, 322, 604, 2010, 295, 2657, 3991, 13, 50510], 'temperature': 0.0, 'avg_logprob': -0.23210912208034568, 'compression_ratio': 1.4171779141104295, 'no_speech_prob': 0.14393094182014465}, {'id': 101, 'seek': 48322, 'start': 486.14000000000004, 'end': 489.18, 'text': ' It is not sensitive to a particular format.', 'tokens': [50510, 467, 307, 406, 9477, 281, 257, 1729, 7877, 13, 50662], 'temperature': 0.0, 'avg_logprob': -0.23210912208034568, 'compression_ratio': 1.4171779141104295, 'no_speech_prob': 0.14393094182014465}, {'id': 102, 'seek': 48322, 'start': 489.18, 'end': 493.34000000000003, 'text': ' For example, I can use objdump on a.exe.', 'tokens': [50662, 1171, 1365, 11, 286, 393, 764, 1111, 37109, 1420, 322, 257, 13, 3121, 68, 13, 50870], 'temperature': 0.0, 'avg_logprob': -0.23210912208034568, 'compression_ratio': 1.4171779141104295, 'no_speech_prob': 0.14393094182014465}, {'id': 103, 'seek': 48322, 'start': 493.34000000000003, 'end': 500.66, 'text': ' Just to show you, so I have windows also on my, so my machine is actually windows.', 'tokens': [50870, 1449, 281, 855, 291, 11, 370, 286, 362, 9309, 611, 322, 452, 11, 370, 452, 3479, 307, 767, 9309, 13, 51236], 'temperature': 0.0, 'avg_logprob': -0.23210912208034568, 'compression_ratio': 1.4171779141104295, 'no_speech_prob': 0.14393094182014465}, {'id': 104, 'seek': 48322, 'start': 500.66, 'end': 505.22, 'text': ' So I will create.', 'tokens': [51236, 407, 286, 486, 1884, 13, 51464], 'temperature': 0.0, 'avg_logprob': -0.23210912208034568, 'compression_ratio': 1.4171779141104295, 'no_speech_prob': 0.14393094182014465}, {'id': 105, 'seek': 50522, 'start': 506.22, 'end': 525.38, 'text': ' So let us say I have, so say I create some program.', 'tokens': [50414, 407, 718, 505, 584, 286, 362, 11, 370, 584, 286, 1884, 512, 1461, 13, 51372], 'temperature': 0.0, 'avg_logprob': -0.28521527184380424, 'compression_ratio': 1.2857142857142858, 'no_speech_prob': 0.020627520978450775}, {'id': 106, 'seek': 50522, 'start': 525.38, 'end': 531.62, 'text': ' I am using gcc even on windows because I have sigwin installed, but it could be a Microsoft', 'tokens': [51372, 286, 669, 1228, 290, 1914, 754, 322, 9309, 570, 286, 362, 4556, 9136, 8899, 11, 457, 309, 727, 312, 257, 8116, 51684], 'temperature': 0.0, 'avg_logprob': -0.28521527184380424, 'compression_ratio': 1.2857142857142858, 'no_speech_prob': 0.020627520978450775}, {'id': 107, 'seek': 50522, 'start': 531.62, 'end': 532.7, 'text': ' compiler.', 'tokens': [51684, 31958, 13, 51738], 'temperature': 0.0, 'avg_logprob': -0.28521527184380424, 'compression_ratio': 1.2857142857142858, 'no_speech_prob': 0.020627520978450775}, {'id': 108, 'seek': 53270, 'start': 532.7, 'end': 539.1400000000001, 'text': ' Now if I do a.exe, you can see actually file command was able to detect it is a pe file.', 'tokens': [50364, 823, 498, 286, 360, 257, 13, 3121, 68, 11, 291, 393, 536, 767, 3991, 5622, 390, 1075, 281, 5531, 309, 307, 257, 520, 3991, 13, 50686], 'temperature': 0.0, 'avg_logprob': -0.1839107962215648, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.004002659115940332}, {'id': 109, 'seek': 53270, 'start': 539.1400000000001, 'end': 543.5400000000001, 'text': ' It did not say it is a .elf file because this was on windows.', 'tokens': [50686, 467, 630, 406, 584, 309, 307, 257, 2411, 1967, 3991, 570, 341, 390, 322, 9309, 13, 50906], 'temperature': 0.0, 'avg_logprob': -0.1839107962215648, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.004002659115940332}, {'id': 110, 'seek': 53270, 'start': 543.5400000000001, 'end': 551.3000000000001, 'text': ' And objdump is actually capable of dumping this, something about it.', 'tokens': [50906, 400, 1111, 37109, 1420, 307, 767, 8189, 295, 42224, 341, 11, 746, 466, 309, 13, 51294], 'temperature': 0.0, 'avg_logprob': -0.1839107962215648, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.004002659115940332}, {'id': 111, 'seek': 53270, 'start': 551.3000000000001, 'end': 552.82, 'text': ' We will see more details.', 'tokens': [51294, 492, 486, 536, 544, 4365, 13, 51370], 'temperature': 0.0, 'avg_logprob': -0.1839107962215648, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.004002659115940332}, {'id': 112, 'seek': 53270, 'start': 552.82, 'end': 558.76, 'text': ' And similarly objdump can dump even for this.', 'tokens': [51370, 400, 14138, 1111, 37109, 1420, 393, 11430, 754, 337, 341, 13, 51667], 'temperature': 0.0, 'avg_logprob': -0.1839107962215648, 'compression_ratio': 1.5815217391304348, 'no_speech_prob': 0.004002659115940332}, {'id': 113, 'seek': 55876, 'start': 558.76, 'end': 567.72, 'text': ' So objdump is a tool which can be used to dump contents of any object file.', 'tokens': [50364, 407, 1111, 37109, 1420, 307, 257, 2290, 597, 393, 312, 1143, 281, 11430, 15768, 295, 604, 2657, 3991, 13, 50812], 'temperature': 0.0, 'avg_logprob': -0.16035102326192974, 'compression_ratio': 1.7204301075268817, 'no_speech_prob': 0.010982303880155087}, {'id': 114, 'seek': 55876, 'start': 567.72, 'end': 578.64, 'text': ' Nm is a command which can be used to dump various symbols from the object files.', 'tokens': [50812, 426, 76, 307, 257, 5622, 597, 393, 312, 1143, 281, 11430, 3683, 16944, 490, 264, 2657, 7098, 13, 51358], 'temperature': 0.0, 'avg_logprob': -0.16035102326192974, 'compression_ratio': 1.7204301075268817, 'no_speech_prob': 0.010982303880155087}, {'id': 115, 'seek': 55876, 'start': 578.64, 'end': 583.18, 'text': ' Then there is something called as readelf which is essentially specific to elf.', 'tokens': [51358, 1396, 456, 307, 746, 1219, 382, 1401, 1967, 597, 307, 4476, 2685, 281, 35565, 13, 51585], 'temperature': 0.0, 'avg_logprob': -0.16035102326192974, 'compression_ratio': 1.7204301075268817, 'no_speech_prob': 0.010982303880155087}, {'id': 116, 'seek': 55876, 'start': 583.18, 'end': 588.4, 'text': ' If you know that object file is elf, then you can use readelf to read various parts', 'tokens': [51585, 759, 291, 458, 300, 2657, 3991, 307, 35565, 11, 550, 291, 393, 764, 1401, 1967, 281, 1401, 3683, 3166, 51846], 'temperature': 0.0, 'avg_logprob': -0.16035102326192974, 'compression_ratio': 1.7204301075268817, 'no_speech_prob': 0.010982303880155087}, {'id': 117, 'seek': 58840, 'start': 588.4, 'end': 590.12, 'text': ' of the elf file.', 'tokens': [50364, 295, 264, 35565, 3991, 13, 50450], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 118, 'seek': 58840, 'start': 590.12, 'end': 594.24, 'text': ' Similarly there is something called as dumpbin which is on Microsoft windows which can be', 'tokens': [50450, 13157, 456, 307, 746, 1219, 382, 11430, 13496, 597, 307, 322, 8116, 9309, 597, 393, 312, 50656], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 119, 'seek': 58840, 'start': 594.24, 'end': 597.8, 'text': ' used to dump various contents of the pe file.', 'tokens': [50656, 1143, 281, 11430, 3683, 15768, 295, 264, 520, 3991, 13, 50834], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 120, 'seek': 58840, 'start': 597.8, 'end': 602.16, 'text': ' In this class we will mostly use objdump and readelf.', 'tokens': [50834, 682, 341, 1508, 321, 486, 5240, 764, 1111, 37109, 1420, 293, 1401, 1967, 13, 51052], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 121, 'seek': 58840, 'start': 602.16, 'end': 607.14, 'text': ' But I just wanted to list these so that you are aware that there are various tools.', 'tokens': [51052, 583, 286, 445, 1415, 281, 1329, 613, 370, 300, 291, 366, 3650, 300, 456, 366, 3683, 3873, 13, 51301], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 122, 'seek': 58840, 'start': 607.14, 'end': 609.28, 'text': ' Now let us look at elf.', 'tokens': [51301, 823, 718, 505, 574, 412, 35565, 13, 51408], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 123, 'seek': 58840, 'start': 609.28, 'end': 615.66, 'text': ' So elf is actually a format which can be used for all the three types of object files.', 'tokens': [51408, 407, 35565, 307, 767, 257, 7877, 597, 393, 312, 1143, 337, 439, 264, 1045, 3467, 295, 2657, 7098, 13, 51727], 'temperature': 0.0, 'avg_logprob': -0.12164174034481957, 'compression_ratio': 1.684873949579832, 'no_speech_prob': 0.011325494386255741}, {'id': 124, 'seek': 61566, 'start': 615.66, 'end': 622.14, 'text': ' So elf can be used to represent a relocatable file and typically has extension dot o.', 'tokens': [50364, 407, 35565, 393, 312, 1143, 281, 2906, 257, 26981, 31415, 3991, 293, 5850, 575, 10320, 5893, 277, 13, 50688], 'temperature': 0.0, 'avg_logprob': -0.15315807949412952, 'compression_ratio': 2.0, 'no_speech_prob': 0.09802082180976868}, {'id': 125, 'seek': 61566, 'start': 622.14, 'end': 627.98, 'text': ' Elf can be used to represent an executable file which typically has extension dot out.', 'tokens': [50688, 2699, 69, 393, 312, 1143, 281, 2906, 364, 7568, 712, 3991, 597, 5850, 575, 10320, 5893, 484, 13, 50980], 'temperature': 0.0, 'avg_logprob': -0.15315807949412952, 'compression_ratio': 2.0, 'no_speech_prob': 0.09802082180976868}, {'id': 126, 'seek': 61566, 'start': 627.98, 'end': 635.28, 'text': ' And elf can also be used to represent shared object file which typically has dot so extension.', 'tokens': [50980, 400, 35565, 393, 611, 312, 1143, 281, 2906, 5507, 2657, 3991, 597, 5850, 575, 5893, 370, 10320, 13, 51345], 'temperature': 0.0, 'avg_logprob': -0.15315807949412952, 'compression_ratio': 2.0, 'no_speech_prob': 0.09802082180976868}, {'id': 127, 'seek': 61566, 'start': 635.28, 'end': 641.04, 'text': ' Now if you look at the elf structure itself, this is how elf organizes information in', 'tokens': [51345, 823, 498, 291, 574, 412, 264, 35565, 3877, 2564, 11, 341, 307, 577, 35565, 4645, 279, 1589, 294, 51633], 'temperature': 0.0, 'avg_logprob': -0.15315807949412952, 'compression_ratio': 2.0, 'no_speech_prob': 0.09802082180976868}, {'id': 128, 'seek': 61566, 'start': 641.04, 'end': 643.02, 'text': ' the object file.', 'tokens': [51633, 264, 2657, 3991, 13, 51732], 'temperature': 0.0, 'avg_logprob': -0.15315807949412952, 'compression_ratio': 2.0, 'no_speech_prob': 0.09802082180976868}, {'id': 129, 'seek': 64302, 'start': 643.02, 'end': 650.16, 'text': ' So the content of the object file can be thought of as set of instructions which were produced', 'tokens': [50364, 407, 264, 2701, 295, 264, 2657, 3991, 393, 312, 1194, 295, 382, 992, 295, 9415, 597, 645, 7126, 50721], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 130, 'seek': 64302, 'start': 650.16, 'end': 656.54, 'text': ' by the assembler, set of various data elements which were present in the object file.', 'tokens': [50721, 538, 264, 8438, 1918, 11, 992, 295, 3683, 1412, 4959, 597, 645, 1974, 294, 264, 2657, 3991, 13, 51040], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 131, 'seek': 64302, 'start': 656.54, 'end': 660.76, 'text': ' All of this is organized into sections.', 'tokens': [51040, 1057, 295, 341, 307, 9983, 666, 10863, 13, 51251], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 132, 'seek': 64302, 'start': 660.76, 'end': 666.0, 'text': ' So there are sections, one section representing one type of data.', 'tokens': [51251, 407, 456, 366, 10863, 11, 472, 3541, 13460, 472, 2010, 295, 1412, 13, 51513], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 133, 'seek': 64302, 'start': 666.0, 'end': 670.78, 'text': ' So there will be a text section which will have whose content will be the binary encoding', 'tokens': [51513, 407, 456, 486, 312, 257, 2487, 3541, 597, 486, 362, 6104, 2701, 486, 312, 264, 17434, 43430, 51752], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 134, 'seek': 64302, 'start': 670.78, 'end': 672.78, 'text': ' of the instructions.', 'tokens': [51752, 295, 264, 9415, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.13543771660846213, 'compression_ratio': 1.8904761904761904, 'no_speech_prob': 0.018541483208537102}, {'id': 135, 'seek': 67278, 'start': 672.78, 'end': 678.56, 'text': ' There will be data section whose content will be whatever global variables etc you have', 'tokens': [50364, 821, 486, 312, 1412, 3541, 6104, 2701, 486, 312, 2035, 4338, 9102, 5183, 291, 362, 50653], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 136, 'seek': 67278, 'start': 678.56, 'end': 680.8199999999999, 'text': ' declared in your program.', 'tokens': [50653, 15489, 294, 428, 1461, 13, 50766], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 137, 'seek': 67278, 'start': 680.8199999999999, 'end': 686.38, 'text': ' Now what elf does is elf has something called as elf header at the start.', 'tokens': [50766, 823, 437, 35565, 775, 307, 35565, 575, 746, 1219, 382, 35565, 23117, 412, 264, 722, 13, 51044], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 138, 'seek': 67278, 'start': 686.38, 'end': 693.5, 'text': ' Elf header describes various information on where to locate other parts of the elf file.', 'tokens': [51044, 2699, 69, 23117, 15626, 3683, 1589, 322, 689, 281, 22370, 661, 3166, 295, 264, 35565, 3991, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 139, 'seek': 67278, 'start': 693.5, 'end': 696.78, 'text': ' There is something called as a section header.', 'tokens': [51400, 821, 307, 746, 1219, 382, 257, 3541, 23117, 13, 51564], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 140, 'seek': 67278, 'start': 696.78, 'end': 701.92, 'text': ' So section header will describe the information about various sections.', 'tokens': [51564, 407, 3541, 23117, 486, 6786, 264, 1589, 466, 3683, 10863, 13, 51821], 'temperature': 0.0, 'avg_logprob': -0.18287145680394665, 'compression_ratio': 1.8544600938967135, 'no_speech_prob': 0.002471411367878318}, {'id': 141, 'seek': 70192, 'start': 701.92, 'end': 706.2199999999999, 'text': ' So section headers will have information about where is the text section present, where is', 'tokens': [50364, 407, 3541, 45101, 486, 362, 1589, 466, 689, 307, 264, 2487, 3541, 1974, 11, 689, 307, 50579], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 142, 'seek': 70192, 'start': 706.2199999999999, 'end': 708.5999999999999, 'text': ' the data section present and so on.', 'tokens': [50579, 264, 1412, 3541, 1974, 293, 370, 322, 13, 50698], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 143, 'seek': 70192, 'start': 708.5999999999999, 'end': 711.8199999999999, 'text': ' And section headers will essentially point to the contents.', 'tokens': [50698, 400, 3541, 45101, 486, 4476, 935, 281, 264, 15768, 13, 50859], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 144, 'seek': 70192, 'start': 711.8199999999999, 'end': 715.56, 'text': ' There is also something called as program headers which we will get to when we actually', 'tokens': [50859, 821, 307, 611, 746, 1219, 382, 1461, 45101, 597, 321, 486, 483, 281, 562, 321, 767, 51046], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 145, 'seek': 70192, 'start': 715.56, 'end': 718.9799999999999, 'text': ' look at how programs are executed.', 'tokens': [51046, 574, 412, 577, 4268, 366, 17577, 13, 51217], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 146, 'seek': 70192, 'start': 718.9799999999999, 'end': 722.56, 'text': ' So if you look at elf, this is how it looks.', 'tokens': [51217, 407, 498, 291, 574, 412, 35565, 11, 341, 307, 577, 309, 1542, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 147, 'seek': 70192, 'start': 722.56, 'end': 725.98, 'text': ' So elf starts with an elf header.', 'tokens': [51396, 407, 35565, 3719, 365, 364, 35565, 23117, 13, 51567], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 148, 'seek': 70192, 'start': 725.98, 'end': 728.5999999999999, 'text': ' Then there is an optional program header.', 'tokens': [51567, 1396, 456, 307, 364, 17312, 1461, 23117, 13, 51698], 'temperature': 0.0, 'avg_logprob': -0.12855814053462103, 'compression_ratio': 1.9111111111111112, 'no_speech_prob': 0.0014544997829943895}, {'id': 149, 'seek': 72860, 'start': 728.6, 'end': 733.78, 'text': ' Then there are various sections in which the data is actually organized.', 'tokens': [50364, 1396, 456, 366, 3683, 10863, 294, 597, 264, 1412, 307, 767, 9983, 13, 50623], 'temperature': 0.0, 'avg_logprob': -0.10203451063574814, 'compression_ratio': 2.0785340314136125, 'no_speech_prob': 0.12241615355014801}, {'id': 150, 'seek': 72860, 'start': 733.78, 'end': 736.8000000000001, 'text': ' And then there is something called as a section header table.', 'tokens': [50623, 400, 550, 456, 307, 746, 1219, 382, 257, 3541, 23117, 3199, 13, 50774], 'temperature': 0.0, 'avg_logprob': -0.10203451063574814, 'compression_ratio': 2.0785340314136125, 'no_speech_prob': 0.12241615355014801}, {'id': 151, 'seek': 72860, 'start': 736.8000000000001, 'end': 743.86, 'text': ' So section elf header actually has information on where to locate the section header table.', 'tokens': [50774, 407, 3541, 35565, 23117, 767, 575, 1589, 322, 689, 281, 22370, 264, 3541, 23117, 3199, 13, 51127], 'temperature': 0.0, 'avg_logprob': -0.10203451063574814, 'compression_ratio': 2.0785340314136125, 'no_speech_prob': 0.12241615355014801}, {'id': 152, 'seek': 72860, 'start': 743.86, 'end': 750.64, 'text': ' So elf header will tell information about where is the section header table present.', 'tokens': [51127, 407, 35565, 23117, 486, 980, 1589, 466, 689, 307, 264, 3541, 23117, 3199, 1974, 13, 51466], 'temperature': 0.0, 'avg_logprob': -0.10203451063574814, 'compression_ratio': 2.0785340314136125, 'no_speech_prob': 0.12241615355014801}, {'id': 153, 'seek': 72860, 'start': 750.64, 'end': 757.2, 'text': ' Section header table will have pointers to various sections from which you can locate', 'tokens': [51466, 21804, 23117, 3199, 486, 362, 44548, 281, 3683, 10863, 490, 597, 291, 393, 22370, 51794], 'temperature': 0.0, 'avg_logprob': -0.10203451063574814, 'compression_ratio': 2.0785340314136125, 'no_speech_prob': 0.12241615355014801}, {'id': 154, 'seek': 75720, 'start': 757.24, 'end': 759.34, 'text': ' the sections.', 'tokens': [50366, 264, 10863, 13, 50471], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 155, 'seek': 75720, 'start': 759.34, 'end': 761.9200000000001, 'text': ' And this is what linker sees.', 'tokens': [50471, 400, 341, 307, 437, 2113, 260, 8194, 13, 50600], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 156, 'seek': 75720, 'start': 761.9200000000001, 'end': 767.88, 'text': ' So the linking view is what is in the relocatable elf.', 'tokens': [50600, 407, 264, 25775, 1910, 307, 437, 307, 294, 264, 26981, 31415, 35565, 13, 50898], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 157, 'seek': 75720, 'start': 767.88, 'end': 772.72, 'text': ' Relocatable elf will have information in this format where you will have information organized', 'tokens': [50898, 8738, 905, 31415, 35565, 486, 362, 1589, 294, 341, 7877, 689, 291, 486, 362, 1589, 9983, 51140], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 158, 'seek': 75720, 'start': 772.72, 'end': 777.1600000000001, 'text': ' into sections and there will be a section header table.', 'tokens': [51140, 666, 10863, 293, 456, 486, 312, 257, 3541, 23117, 3199, 13, 51362], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 159, 'seek': 75720, 'start': 777.1600000000001, 'end': 784.44, 'text': ' When elf is produced as an executable file, it has something called as segments which', 'tokens': [51362, 1133, 35565, 307, 7126, 382, 364, 7568, 712, 3991, 11, 309, 575, 746, 1219, 382, 19904, 597, 51726], 'temperature': 0.0, 'avg_logprob': -0.14569903583061405, 'compression_ratio': 1.7447916666666667, 'no_speech_prob': 0.03842173516750336}, {'id': 160, 'seek': 78444, 'start': 784.44, 'end': 789.46, 'text': ' you can think of as something formed out of collection of sections.', 'tokens': [50364, 291, 393, 519, 295, 382, 746, 8693, 484, 295, 5765, 295, 10863, 13, 50615], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 161, 'seek': 78444, 'start': 789.46, 'end': 792.5600000000001, 'text': ' So segments are collection of sections.', 'tokens': [50615, 407, 19904, 366, 5765, 295, 10863, 13, 50770], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 162, 'seek': 78444, 'start': 792.5600000000001, 'end': 797.24, 'text': ' And then there is a program header table which has information about where the different', 'tokens': [50770, 400, 550, 456, 307, 257, 1461, 23117, 3199, 597, 575, 1589, 466, 689, 264, 819, 51004], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 163, 'seek': 78444, 'start': 797.24, 'end': 801.4000000000001, 'text': ' segments are.', 'tokens': [51004, 19904, 366, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 164, 'seek': 78444, 'start': 801.4000000000001, 'end': 803.8800000000001, 'text': ' Is it clear?', 'tokens': [51212, 1119, 309, 1850, 30, 51336], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 165, 'seek': 78444, 'start': 803.8800000000001, 'end': 808.7800000000001, 'text': ' So just to summarize, the elf will have elf header which will have pointer to section', 'tokens': [51336, 407, 445, 281, 20858, 11, 264, 35565, 486, 362, 35565, 23117, 597, 486, 362, 23918, 281, 3541, 51581], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 166, 'seek': 78444, 'start': 808.7800000000001, 'end': 810.24, 'text': ' header table.', 'tokens': [51581, 23117, 3199, 13, 51654], 'temperature': 0.0, 'avg_logprob': -0.12850186763665614, 'compression_ratio': 1.7365591397849462, 'no_speech_prob': 0.012811264023184776}, {'id': 167, 'seek': 81024, 'start': 810.24, 'end': 814.72, 'text': ' And section header table will have information about various sections, where to find them', 'tokens': [50364, 400, 3541, 23117, 3199, 486, 362, 1589, 466, 3683, 10863, 11, 689, 281, 915, 552, 50588], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 168, 'seek': 81024, 'start': 814.72, 'end': 816.48, 'text': ' and so on.', 'tokens': [50588, 293, 370, 322, 13, 50676], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 169, 'seek': 81024, 'start': 816.48, 'end': 821.96, 'text': ' Now if you look at the elf header itself, elf header always starts at byte 0 of the', 'tokens': [50676, 823, 498, 291, 574, 412, 264, 35565, 23117, 2564, 11, 35565, 23117, 1009, 3719, 412, 40846, 1958, 295, 264, 50950], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 170, 'seek': 81024, 'start': 821.96, 'end': 822.96, 'text': ' file.', 'tokens': [50950, 3991, 13, 51000], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 171, 'seek': 81024, 'start': 822.96, 'end': 829.08, 'text': ' So if I have the elf file, the byte 0 will actually always be start of the elf header.', 'tokens': [51000, 407, 498, 286, 362, 264, 35565, 3991, 11, 264, 40846, 1958, 486, 767, 1009, 312, 722, 295, 264, 35565, 23117, 13, 51306], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 172, 'seek': 81024, 'start': 829.08, 'end': 831.96, 'text': ' So elf header is always at the deterministic position.', 'tokens': [51306, 407, 35565, 23117, 307, 1009, 412, 264, 15957, 3142, 2535, 13, 51450], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 173, 'seek': 81024, 'start': 831.96, 'end': 837.2, 'text': ' Rest of the things in the elf could be at any place, but the elf header always has to', 'tokens': [51450, 13094, 295, 264, 721, 294, 264, 35565, 727, 312, 412, 604, 1081, 11, 457, 264, 35565, 23117, 1009, 575, 281, 51712], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 174, 'seek': 81024, 'start': 837.2, 'end': 840.08, 'text': ' be at 0th position.', 'tokens': [51712, 312, 412, 1958, 392, 2535, 13, 51856], 'temperature': 0.0, 'avg_logprob': -0.13473692433587436, 'compression_ratio': 1.9043478260869566, 'no_speech_prob': 0.05179775133728981}, {'id': 175, 'seek': 84008, 'start': 840.08, 'end': 848.5600000000001, 'text': ' And it has information about what type of machine the elf is produced for, what type', 'tokens': [50364, 400, 309, 575, 1589, 466, 437, 2010, 295, 3479, 264, 35565, 307, 7126, 337, 11, 437, 2010, 50788], 'temperature': 0.0, 'avg_logprob': -0.14389635534847484, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0031719841063022614}, {'id': 176, 'seek': 84008, 'start': 848.5600000000001, 'end': 854.9200000000001, 'text': ' of ABI it is following, where is the section header table and so on.', 'tokens': [50788, 295, 316, 11291, 309, 307, 3480, 11, 689, 307, 264, 3541, 23117, 3199, 293, 370, 322, 13, 51106], 'temperature': 0.0, 'avg_logprob': -0.14389635534847484, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0031719841063022614}, {'id': 177, 'seek': 84008, 'start': 854.9200000000001, 'end': 856.6, 'text': ' So you can actually do this.', 'tokens': [51106, 407, 291, 393, 767, 360, 341, 13, 51190], 'temperature': 0.0, 'avg_logprob': -0.14389635534847484, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0031719841063022614}, {'id': 178, 'seek': 84008, 'start': 856.6, 'end': 869.62, 'text': ' So if I compile any program, so I have compiled a program with dash c.', 'tokens': [51190, 407, 498, 286, 31413, 604, 1461, 11, 370, 286, 362, 36548, 257, 1461, 365, 8240, 269, 13, 51841], 'temperature': 0.0, 'avg_logprob': -0.14389635534847484, 'compression_ratio': 1.5149700598802396, 'no_speech_prob': 0.0031719841063022614}, {'id': 179, 'seek': 86962, 'start': 869.74, 'end': 877.9, 'text': ' If I do readelf dash h sample.o, readelf is the command which is used to read the elf', 'tokens': [50370, 759, 286, 360, 1401, 1967, 8240, 276, 6889, 13, 78, 11, 1401, 1967, 307, 264, 5622, 597, 307, 1143, 281, 1401, 264, 35565, 50778], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 180, 'seek': 86962, 'start': 877.9, 'end': 878.9, 'text': ' file.', 'tokens': [50778, 3991, 13, 50828], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 181, 'seek': 86962, 'start': 878.9, 'end': 884.48, 'text': ' Dash h is telling headers, display me the header from sample.o.', 'tokens': [50828, 23453, 276, 307, 3585, 45101, 11, 4674, 385, 264, 23117, 490, 6889, 13, 78, 13, 51107], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 182, 'seek': 86962, 'start': 884.48, 'end': 888.02, 'text': ' You will see an output like this.', 'tokens': [51107, 509, 486, 536, 364, 5598, 411, 341, 13, 51284], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 183, 'seek': 86962, 'start': 888.02, 'end': 892.94, 'text': ' Now to demystify this output, let us look at some interesting aspect.', 'tokens': [51284, 823, 281, 1371, 38593, 2505, 341, 5598, 11, 718, 505, 574, 412, 512, 1880, 4171, 13, 51530], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 184, 'seek': 86962, 'start': 892.94, 'end': 897.86, 'text': ' So it is saying that the class of this file is elf32.', 'tokens': [51530, 407, 309, 307, 1566, 300, 264, 1508, 295, 341, 3991, 307, 35565, 11440, 13, 51776], 'temperature': 0.0, 'avg_logprob': -0.1703740513843039, 'compression_ratio': 1.5888324873096447, 'no_speech_prob': 0.07800626754760742}, {'id': 185, 'seek': 89786, 'start': 897.86, 'end': 902.54, 'text': ' It is saying version of this file is 1.', 'tokens': [50364, 467, 307, 1566, 3037, 295, 341, 3991, 307, 502, 13, 50598], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 186, 'seek': 89786, 'start': 902.54, 'end': 905.42, 'text': ' There is something called as os slash ABI.', 'tokens': [50598, 821, 307, 746, 1219, 382, 3003, 17330, 316, 11291, 13, 50742], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 187, 'seek': 89786, 'start': 905.42, 'end': 909.58, 'text': ' It is saying it is a Unix system 5 binary.', 'tokens': [50742, 467, 307, 1566, 309, 307, 257, 1156, 970, 1185, 1025, 17434, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 188, 'seek': 89786, 'start': 909.58, 'end': 911.42, 'text': ' The ABI version is 0.', 'tokens': [50950, 440, 316, 11291, 3037, 307, 1958, 13, 51042], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 189, 'seek': 89786, 'start': 911.42, 'end': 912.98, 'text': ' Type is rel.', 'tokens': [51042, 15576, 307, 1039, 13, 51120], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 190, 'seek': 89786, 'start': 912.98, 'end': 917.0600000000001, 'text': ' rel is essentially indicating it is a relocatable file.', 'tokens': [51120, 1039, 307, 4476, 25604, 309, 307, 257, 26981, 31415, 3991, 13, 51324], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 191, 'seek': 89786, 'start': 917.0600000000001, 'end': 924.46, 'text': ' And the machine for which this file is present is intel 80386.', 'tokens': [51324, 400, 264, 3479, 337, 597, 341, 3991, 307, 1974, 307, 24777, 4688, 12625, 21, 13, 51694], 'temperature': 0.0, 'avg_logprob': -0.2789772033691406, 'compression_ratio': 1.5942857142857143, 'no_speech_prob': 0.01167586725205183}, {'id': 192, 'seek': 92446, 'start': 924.46, 'end': 931.86, 'text': ' All of this information is present in header because this can help eliminate mismatching', 'tokens': [50364, 1057, 295, 341, 1589, 307, 1974, 294, 23117, 570, 341, 393, 854, 13819, 23220, 29569, 50734], 'temperature': 0.0, 'avg_logprob': -0.18500426458933997, 'compression_ratio': 1.5029940119760479, 'no_speech_prob': 0.02365930750966072}, {'id': 193, 'seek': 92446, 'start': 931.86, 'end': 932.86, 'text': ' elves.', 'tokens': [50734, 43087, 13, 50784], 'temperature': 0.0, 'avg_logprob': -0.18500426458933997, 'compression_ratio': 1.5029940119760479, 'no_speech_prob': 0.02365930750966072}, {'id': 194, 'seek': 92446, 'start': 932.86, 'end': 941.58, 'text': ' For example, let us say I give linker one file which was produced for windows and one', 'tokens': [50784, 1171, 1365, 11, 718, 505, 584, 286, 976, 2113, 260, 472, 3991, 597, 390, 7126, 337, 9309, 293, 472, 51220], 'temperature': 0.0, 'avg_logprob': -0.18500426458933997, 'compression_ratio': 1.5029940119760479, 'no_speech_prob': 0.02365930750966072}, {'id': 195, 'seek': 92446, 'start': 941.58, 'end': 945.02, 'text': ' elf file which was produced for Linux.', 'tokens': [51220, 35565, 3991, 597, 390, 7126, 337, 18734, 13, 51392], 'temperature': 0.0, 'avg_logprob': -0.18500426458933997, 'compression_ratio': 1.5029940119760479, 'no_speech_prob': 0.02365930750966072}, {'id': 196, 'seek': 92446, 'start': 945.02, 'end': 949.4200000000001, 'text': ' Can linker link them together?', 'tokens': [51392, 1664, 2113, 260, 2113, 552, 1214, 30, 51612], 'temperature': 0.0, 'avg_logprob': -0.18500426458933997, 'compression_ratio': 1.5029940119760479, 'no_speech_prob': 0.02365930750966072}, {'id': 197, 'seek': 94942, 'start': 949.42, 'end': 954.8199999999999, 'text': ' It cannot link them together for one reason because windows and Linux might be following', 'tokens': [50364, 467, 2644, 2113, 552, 1214, 337, 472, 1778, 570, 9309, 293, 18734, 1062, 312, 3480, 50634], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 198, 'seek': 94942, 'start': 954.8199999999999, 'end': 955.8199999999999, 'text': ' different ABI.', 'tokens': [50634, 819, 316, 11291, 13, 50684], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 199, 'seek': 94942, 'start': 955.8199999999999, 'end': 961.5, 'text': ' If they were following same ABI, linker in theory could link them together.', 'tokens': [50684, 759, 436, 645, 3480, 912, 316, 11291, 11, 2113, 260, 294, 5261, 727, 2113, 552, 1214, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 200, 'seek': 94942, 'start': 961.5, 'end': 966.42, 'text': ' Similarly, can you link x86 code with ARM code?', 'tokens': [50968, 13157, 11, 393, 291, 2113, 2031, 22193, 3089, 365, 45209, 3089, 30, 51214], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 201, 'seek': 94942, 'start': 966.42, 'end': 970.06, 'text': ' No because these are going to be different processors.', 'tokens': [51214, 883, 570, 613, 366, 516, 281, 312, 819, 27751, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 202, 'seek': 94942, 'start': 970.06, 'end': 975.3, 'text': ' The same binary bits might be interpreted differently by different processor.', 'tokens': [51396, 440, 912, 17434, 9239, 1062, 312, 26749, 7614, 538, 819, 15321, 13, 51658], 'temperature': 0.0, 'avg_logprob': -0.17233023189363025, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.061808064579963684}, {'id': 203, 'seek': 97530, 'start': 976.14, 'end': 983.5799999999999, 'text': ' If add means 5 to x86, add 5 might mean LD to ARM processor.', 'tokens': [50406, 759, 909, 1355, 1025, 281, 2031, 22193, 11, 909, 1025, 1062, 914, 33936, 281, 45209, 15321, 13, 50778], 'temperature': 0.0, 'avg_logprob': -0.2021050051034215, 'compression_ratio': 1.5135135135135136, 'no_speech_prob': 0.17311163246631622}, {'id': 204, 'seek': 97530, 'start': 983.5799999999999, 'end': 985.8199999999999, 'text': ' You cannot mix and match things.', 'tokens': [50778, 509, 2644, 2890, 293, 2995, 721, 13, 50890], 'temperature': 0.0, 'avg_logprob': -0.2021050051034215, 'compression_ratio': 1.5135135135135136, 'no_speech_prob': 0.17311163246631622}, {'id': 205, 'seek': 97530, 'start': 985.8199999999999, 'end': 989.62, 'text': ' That is why some of these information is present directly in header.', 'tokens': [50890, 663, 307, 983, 512, 295, 613, 1589, 307, 1974, 3838, 294, 23117, 13, 51080], 'temperature': 0.0, 'avg_logprob': -0.2021050051034215, 'compression_ratio': 1.5135135135135136, 'no_speech_prob': 0.17311163246631622}, {'id': 206, 'seek': 97530, 'start': 989.62, 'end': 999.42, 'text': ' Linker can ensure that whatever files are being fed to the linker have consistent information.', 'tokens': [51080, 8466, 260, 393, 5586, 300, 2035, 7098, 366, 885, 4636, 281, 264, 2113, 260, 362, 8398, 1589, 13, 51570], 'temperature': 0.0, 'avg_logprob': -0.2021050051034215, 'compression_ratio': 1.5135135135135136, 'no_speech_prob': 0.17311163246631622}, {'id': 207, 'seek': 97530, 'start': 999.42, 'end': 1003.9, 'text': ' And then there is something called as magic which you are seeing at the start.', 'tokens': [51570, 400, 550, 456, 307, 746, 1219, 382, 5585, 597, 291, 366, 2577, 412, 264, 722, 13, 51794], 'temperature': 0.0, 'avg_logprob': -0.2021050051034215, 'compression_ratio': 1.5135135135135136, 'no_speech_prob': 0.17311163246631622}, {'id': 208, 'seek': 100390, 'start': 1003.9, 'end': 1013.8199999999999, 'text': ' The first 4 bytes of the file will be these 7f, 40f5, 4c, 46.', 'tokens': [50364, 440, 700, 1017, 36088, 295, 264, 3991, 486, 312, 613, 1614, 69, 11, 3356, 69, 20, 11, 1017, 66, 11, 17835, 13, 50860], 'temperature': 0.0, 'avg_logprob': -0.16864497419716656, 'compression_ratio': 1.3591549295774648, 'no_speech_prob': 0.13827046751976013}, {'id': 209, 'seek': 100390, 'start': 1013.8199999999999, 'end': 1020.42, 'text': ' If you leave the 7f part out, this is actually ASCII value of elf.', 'tokens': [50860, 759, 291, 1856, 264, 1614, 69, 644, 484, 11, 341, 307, 767, 7469, 34, 9503, 2158, 295, 806, 69, 13, 51190], 'temperature': 0.0, 'avg_logprob': -0.16864497419716656, 'compression_ratio': 1.3591549295774648, 'no_speech_prob': 0.13827046751976013}, {'id': 210, 'seek': 100390, 'start': 1020.42, 'end': 1030.1, 'text': ' So 45 in hex is actually capital E, 4c is capital L and 46 is f.', 'tokens': [51190, 407, 6905, 294, 23291, 307, 767, 4238, 462, 11, 1017, 66, 307, 4238, 441, 293, 17835, 307, 283, 13, 51674], 'temperature': 0.0, 'avg_logprob': -0.16864497419716656, 'compression_ratio': 1.3591549295774648, 'no_speech_prob': 0.13827046751976013}, {'id': 211, 'seek': 103010, 'start': 1030.1, 'end': 1037.34, 'text': ' So elf, to identify a file as elf, you can simply read first 4 bytes of the file and', 'tokens': [50364, 407, 806, 69, 11, 281, 5876, 257, 3991, 382, 806, 69, 11, 291, 393, 2935, 1401, 700, 1017, 36088, 295, 264, 3991, 293, 50726], 'temperature': 0.0, 'avg_logprob': -0.13311800392725134, 'compression_ratio': 1.6580310880829014, 'no_speech_prob': 0.0038831885904073715}, {'id': 212, 'seek': 103010, 'start': 1037.34, 'end': 1044.78, 'text': ' see whether they are 7f, elf and that tells you that it is an elf file.', 'tokens': [50726, 536, 1968, 436, 366, 1614, 69, 11, 806, 69, 293, 300, 5112, 291, 300, 309, 307, 364, 806, 69, 3991, 13, 51098], 'temperature': 0.0, 'avg_logprob': -0.13311800392725134, 'compression_ratio': 1.6580310880829014, 'no_speech_prob': 0.0038831885904073715}, {'id': 213, 'seek': 103010, 'start': 1044.78, 'end': 1049.1, 'text': ' And then remaining is the structure of the header.', 'tokens': [51098, 400, 550, 8877, 307, 264, 3877, 295, 264, 23117, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.13311800392725134, 'compression_ratio': 1.6580310880829014, 'no_speech_prob': 0.0038831885904073715}, {'id': 214, 'seek': 103010, 'start': 1049.1, 'end': 1052.8999999999999, 'text': ' If you look at the actual structure, this is how it looks.', 'tokens': [51314, 759, 291, 574, 412, 264, 3539, 3877, 11, 341, 307, 577, 309, 1542, 13, 51504], 'temperature': 0.0, 'avg_logprob': -0.13311800392725134, 'compression_ratio': 1.6580310880829014, 'no_speech_prob': 0.0038831885904073715}, {'id': 215, 'seek': 103010, 'start': 1052.8999999999999, 'end': 1058.26, 'text': ' So the first 4 bytes are magic which are telling elf.', 'tokens': [51504, 407, 264, 700, 1017, 36088, 366, 5585, 597, 366, 3585, 806, 69, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.13311800392725134, 'compression_ratio': 1.6580310880829014, 'no_speech_prob': 0.0038831885904073715}, {'id': 216, 'seek': 105826, 'start': 1058.26, 'end': 1064.42, 'text': ' Then there is object file class, data encoding version, ABI version, what is the type of', 'tokens': [50364, 1396, 456, 307, 2657, 3991, 1508, 11, 1412, 43430, 3037, 11, 316, 11291, 3037, 11, 437, 307, 264, 2010, 295, 50672], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 217, 'seek': 105826, 'start': 1064.42, 'end': 1069.42, 'text': ' file, what is a machine, version and bunch of other things.', 'tokens': [50672, 3991, 11, 437, 307, 257, 3479, 11, 3037, 293, 3840, 295, 661, 721, 13, 50922], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 218, 'seek': 105826, 'start': 1069.42, 'end': 1075.82, 'text': ' The interesting thing is this shof which is essentially offset in the file where the section', 'tokens': [50922, 440, 1880, 551, 307, 341, 402, 2670, 597, 307, 4476, 18687, 294, 264, 3991, 689, 264, 3541, 51242], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 219, 'seek': 105826, 'start': 1075.82, 'end': 1077.78, 'text': ' header table begins.', 'tokens': [51242, 23117, 3199, 7338, 13, 51340], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 220, 'seek': 105826, 'start': 1077.78, 'end': 1084.82, 'text': ' So if this offset value is say 1000, that means if you read byte 1000, that is where', 'tokens': [51340, 407, 498, 341, 18687, 2158, 307, 584, 9714, 11, 300, 1355, 498, 291, 1401, 40846, 9714, 11, 300, 307, 689, 51692], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 221, 'seek': 105826, 'start': 1084.82, 'end': 1087.54, 'text': ' the section header starts.', 'tokens': [51692, 264, 3541, 23117, 3719, 13, 51828], 'temperature': 0.0, 'avg_logprob': -0.1813892405083839, 'compression_ratio': 1.7314814814814814, 'no_speech_prob': 0.06941556930541992}, {'id': 222, 'seek': 108754, 'start': 1087.54, 'end': 1089.3, 'text': ' Does that make sense?', 'tokens': [50364, 4402, 300, 652, 2020, 30, 50452], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 223, 'seek': 108754, 'start': 1089.3, 'end': 1092.5, 'text': ' So you have an assignment to do now.', 'tokens': [50452, 407, 291, 362, 364, 15187, 281, 360, 586, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 224, 'seek': 108754, 'start': 1092.5, 'end': 1096.02, 'text': ' This is actually coding assignment, you have to program things.', 'tokens': [50612, 639, 307, 767, 17720, 15187, 11, 291, 362, 281, 1461, 721, 13, 50788], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 225, 'seek': 108754, 'start': 1096.02, 'end': 1104.58, 'text': ' Where you have to write a C program or C++ program which will take an elf file as an', 'tokens': [50788, 2305, 291, 362, 281, 2464, 257, 383, 1461, 420, 383, 25472, 1461, 597, 486, 747, 364, 806, 69, 3991, 382, 364, 51216], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 226, 'seek': 108754, 'start': 1104.58, 'end': 1110.7, 'text': ' input, a relocatable elf file as an input from command line argument or you can hard', 'tokens': [51216, 4846, 11, 257, 26981, 31415, 806, 69, 3991, 382, 364, 4846, 490, 5622, 1622, 6770, 420, 291, 393, 1152, 51522], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 227, 'seek': 108754, 'start': 1110.7, 'end': 1117.12, 'text': ' code it, it does not matter how you take that file as the input and read the elf header', 'tokens': [51522, 3089, 309, 11, 309, 775, 406, 1871, 577, 291, 747, 300, 3991, 382, 264, 4846, 293, 1401, 264, 806, 69, 23117, 51843], 'temperature': 0.0, 'avg_logprob': -0.15777003411019203, 'compression_ratio': 1.7194570135746607, 'no_speech_prob': 0.002182096242904663}, {'id': 228, 'seek': 111712, 'start': 1117.32, 'end': 1118.8, 'text': ' from that file.', 'tokens': [50374, 490, 300, 3991, 13, 50448], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 229, 'seek': 111712, 'start': 1118.8, 'end': 1124.76, 'text': ' And the structure of the elf header itself is documented at this location.', 'tokens': [50448, 400, 264, 3877, 295, 264, 806, 69, 23117, 2564, 307, 23007, 412, 341, 4914, 13, 50746], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 230, 'seek': 111712, 'start': 1124.76, 'end': 1126.6999999999998, 'text': ' Is the assignment clear?', 'tokens': [50746, 1119, 264, 15187, 1850, 30, 50843], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 231, 'seek': 111712, 'start': 1126.6999999999998, 'end': 1133.56, 'text': ' So you have to open that file for reading and you have to read size of the elf header', 'tokens': [50843, 407, 291, 362, 281, 1269, 300, 3991, 337, 3760, 293, 291, 362, 281, 1401, 2744, 295, 264, 806, 69, 23117, 51186], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 232, 'seek': 111712, 'start': 1133.56, 'end': 1141.08, 'text': ' data from the start of the file and interpret that data according to the structure given', 'tokens': [51186, 1412, 490, 264, 722, 295, 264, 3991, 293, 7302, 300, 1412, 4650, 281, 264, 3877, 2212, 51562], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 233, 'seek': 111712, 'start': 1141.08, 'end': 1146.3999999999999, 'text': ' here and print out these 4 fields.', 'tokens': [51562, 510, 293, 4482, 484, 613, 1017, 7909, 13, 51828], 'temperature': 0.0, 'avg_logprob': -0.13584161386257265, 'compression_ratio': 1.7473118279569892, 'no_speech_prob': 0.003271466586738825}, {'id': 234, 'seek': 114640, 'start': 1146.4, 'end': 1150.8400000000001, 'text': ' I will keep this structure on the slide so you can see.', 'tokens': [50364, 286, 486, 1066, 341, 3877, 322, 264, 4137, 370, 291, 393, 536, 13, 50586], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 235, 'seek': 114640, 'start': 1150.8400000000001, 'end': 1154.8400000000001, 'text': ' But it is in user include elf.h.', 'tokens': [50586, 583, 309, 307, 294, 4195, 4090, 806, 69, 13, 71, 13, 50786], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 236, 'seek': 114640, 'start': 1154.8400000000001, 'end': 1160.44, 'text': ' So the question is to be able to read, so your program should read a file which will', 'tokens': [50786, 407, 264, 1168, 307, 281, 312, 1075, 281, 1401, 11, 370, 428, 1461, 820, 1401, 257, 3991, 597, 486, 51066], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 237, 'seek': 114640, 'start': 1160.44, 'end': 1165.88, 'text': ' be actually a relocatable elf which you might have produced using compiler.', 'tokens': [51066, 312, 767, 257, 26981, 31415, 806, 69, 597, 291, 1062, 362, 7126, 1228, 31958, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 238, 'seek': 114640, 'start': 1165.88, 'end': 1169.6000000000001, 'text': ' Read the content of the elf header.', 'tokens': [51338, 17604, 264, 2701, 295, 264, 806, 69, 23117, 13, 51524], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 239, 'seek': 114640, 'start': 1169.6000000000001, 'end': 1173.0400000000002, 'text': ' Remember header is always at the start of the elf file.', 'tokens': [51524, 5459, 23117, 307, 1009, 412, 264, 722, 295, 264, 806, 69, 3991, 13, 51696], 'temperature': 0.0, 'avg_logprob': -0.15127909437138984, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.0012637373292818666}, {'id': 240, 'seek': 117304, 'start': 1173.04, 'end': 1182.32, 'text': ' So if you read this much structure in the file you will have read the elf header.', 'tokens': [50364, 407, 498, 291, 1401, 341, 709, 3877, 294, 264, 3991, 291, 486, 362, 1401, 264, 806, 69, 23117, 13, 50828], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 241, 'seek': 117304, 'start': 1182.32, 'end': 1184.32, 'text': ' Is the assignment clear?', 'tokens': [50828, 1119, 264, 15187, 1850, 30, 50928], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 242, 'seek': 117304, 'start': 1184.32, 'end': 1187.44, 'text': ' Are we good with it?', 'tokens': [50928, 2014, 321, 665, 365, 309, 30, 51084], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 243, 'seek': 117304, 'start': 1187.44, 'end': 1190.04, 'text': ' Can we move on?', 'tokens': [51084, 1664, 321, 1286, 322, 30, 51214], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 244, 'seek': 117304, 'start': 1190.04, 'end': 1199.04, 'text': ' So now let us look at various aspects of program and how they map to various things in the', 'tokens': [51214, 407, 586, 718, 505, 574, 412, 3683, 7270, 295, 1461, 293, 577, 436, 4471, 281, 3683, 721, 294, 264, 51664], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 245, 'seek': 117304, 'start': 1199.04, 'end': 1200.3999999999999, 'text': ' elf.', 'tokens': [51664, 806, 69, 13, 51732], 'temperature': 0.0, 'avg_logprob': -0.17691872825085278, 'compression_ratio': 1.4662576687116564, 'no_speech_prob': 0.01743335835635662}, {'id': 246, 'seek': 120040, 'start': 1200.4, 'end': 1202.76, 'text': ' So let us say I have this program.', 'tokens': [50364, 407, 718, 505, 584, 286, 362, 341, 1461, 13, 50482], 'temperature': 0.0, 'avg_logprob': -0.17040718926323783, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.3835681676864624}, {'id': 247, 'seek': 120040, 'start': 1202.76, 'end': 1211.0800000000002, 'text': ' I have bunch of variables which are defined here and then I have main function and I am', 'tokens': [50482, 286, 362, 3840, 295, 9102, 597, 366, 7642, 510, 293, 550, 286, 362, 2135, 2445, 293, 286, 669, 50898], 'temperature': 0.0, 'avg_logprob': -0.17040718926323783, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.3835681676864624}, {'id': 248, 'seek': 120040, 'start': 1211.0800000000002, 'end': 1218.6000000000001, 'text': ' doing some stack allocation and then calling a function printf.', 'tokens': [50898, 884, 512, 8630, 27599, 293, 550, 5141, 257, 2445, 4482, 69, 13, 51274], 'temperature': 0.0, 'avg_logprob': -0.17040718926323783, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.3835681676864624}, {'id': 249, 'seek': 120040, 'start': 1218.6000000000001, 'end': 1224.22, 'text': ' Now whatever is the content of the function is going to be instructions.', 'tokens': [51274, 823, 2035, 307, 264, 2701, 295, 264, 2445, 307, 516, 281, 312, 9415, 13, 51555], 'temperature': 0.0, 'avg_logprob': -0.17040718926323783, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.3835681676864624}, {'id': 250, 'seek': 122422, 'start': 1224.22, 'end': 1230.98, 'text': ' So that will go into a section called as text section because that is where code goes.', 'tokens': [50364, 407, 300, 486, 352, 666, 257, 3541, 1219, 382, 2487, 3541, 570, 300, 307, 689, 3089, 1709, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.1458313978171047, 'compression_ratio': 1.993939393939394, 'no_speech_prob': 0.3917044401168823}, {'id': 251, 'seek': 122422, 'start': 1230.98, 'end': 1235.66, 'text': ' Then there is something called data section which is where all the initialized variables', 'tokens': [50702, 1396, 456, 307, 746, 1219, 1412, 3541, 597, 307, 689, 439, 264, 5883, 1602, 9102, 50936], 'temperature': 0.0, 'avg_logprob': -0.1458313978171047, 'compression_ratio': 1.993939393939394, 'no_speech_prob': 0.3917044401168823}, {'id': 252, 'seek': 122422, 'start': 1235.66, 'end': 1239.3, 'text': ' go.', 'tokens': [50936, 352, 13, 51118], 'temperature': 0.0, 'avg_logprob': -0.1458313978171047, 'compression_ratio': 1.993939393939394, 'no_speech_prob': 0.3917044401168823}, {'id': 253, 'seek': 122422, 'start': 1239.3, 'end': 1246.9, 'text': ' Then there is something called as bss where uninitialized variables are stored.', 'tokens': [51118, 1396, 456, 307, 746, 1219, 382, 272, 3810, 689, 43456, 270, 831, 1602, 9102, 366, 12187, 13, 51498], 'temperature': 0.0, 'avg_logprob': -0.1458313978171047, 'compression_ratio': 1.993939393939394, 'no_speech_prob': 0.3917044401168823}, {'id': 254, 'seek': 122422, 'start': 1246.9, 'end': 1253.8600000000001, 'text': ' Any idea why uninitialized versus initialized there is a distinction?', 'tokens': [51498, 2639, 1558, 983, 43456, 270, 831, 1602, 5717, 5883, 1602, 456, 307, 257, 16844, 30, 51846], 'temperature': 0.0, 'avg_logprob': -0.1458313978171047, 'compression_ratio': 1.993939393939394, 'no_speech_prob': 0.3917044401168823}, {'id': 255, 'seek': 125386, 'start': 1253.86, 'end': 1266.6599999999999, 'text': ' Why cannot we have all of them stored in data section?', 'tokens': [50364, 1545, 2644, 321, 362, 439, 295, 552, 12187, 294, 1412, 3541, 30, 51004], 'temperature': 0.0, 'avg_logprob': -0.2042487786740673, 'compression_ratio': 1.3515625, 'no_speech_prob': 0.00780792161822319}, {'id': 256, 'seek': 125386, 'start': 1266.6599999999999, 'end': 1272.4199999999998, 'text': ' So essentially all the uninitialized, so if there is a global variable which is uninitialized', 'tokens': [51004, 407, 4476, 439, 264, 43456, 270, 831, 1602, 11, 370, 498, 456, 307, 257, 4338, 7006, 597, 307, 43456, 270, 831, 1602, 51292], 'temperature': 0.0, 'avg_logprob': -0.2042487786740673, 'compression_ratio': 1.3515625, 'no_speech_prob': 0.00780792161822319}, {'id': 257, 'seek': 125386, 'start': 1272.4199999999998, 'end': 1275.6999999999998, 'text': ' by default it will be 0.', 'tokens': [51292, 538, 7576, 309, 486, 312, 1958, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.2042487786740673, 'compression_ratio': 1.3515625, 'no_speech_prob': 0.00780792161822319}, {'id': 258, 'seek': 127570, 'start': 1275.7, 'end': 1283.98, 'text': ' Now you have bunch of 0s and do you really want to store them in the file?', 'tokens': [50364, 823, 291, 362, 3840, 295, 1958, 82, 293, 360, 291, 534, 528, 281, 3531, 552, 294, 264, 3991, 30, 50778], 'temperature': 0.0, 'avg_logprob': -0.1311166050669911, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.069465771317482}, {'id': 259, 'seek': 127570, 'start': 1283.98, 'end': 1290.14, 'text': ' Because see this value you will actually have to store in the object file saying that somewhere', 'tokens': [50778, 1436, 536, 341, 2158, 291, 486, 767, 362, 281, 3531, 294, 264, 2657, 3991, 1566, 300, 4079, 51086], 'temperature': 0.0, 'avg_logprob': -0.1311166050669911, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.069465771317482}, {'id': 260, 'seek': 127570, 'start': 1290.14, 'end': 1295.94, 'text': ' there is 2 in the data section, somewhere there is 10, 11, 12 in the data section.', 'tokens': [51086, 456, 307, 568, 294, 264, 1412, 3541, 11, 4079, 456, 307, 1266, 11, 2975, 11, 2272, 294, 264, 1412, 3541, 13, 51376], 'temperature': 0.0, 'avg_logprob': -0.1311166050669911, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.069465771317482}, {'id': 261, 'seek': 127570, 'start': 1295.94, 'end': 1302.14, 'text': ' But for uninitialized variables you just need to have the information that we need these', 'tokens': [51376, 583, 337, 43456, 270, 831, 1602, 9102, 291, 445, 643, 281, 362, 264, 1589, 300, 321, 643, 613, 51686], 'temperature': 0.0, 'avg_logprob': -0.1311166050669911, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.069465771317482}, {'id': 262, 'seek': 127570, 'start': 1302.14, 'end': 1303.46, 'text': ' many 0s.', 'tokens': [51686, 867, 1958, 82, 13, 51752], 'temperature': 0.0, 'avg_logprob': -0.1311166050669911, 'compression_ratio': 1.7121951219512195, 'no_speech_prob': 0.069465771317482}, {'id': 263, 'seek': 130346, 'start': 1303.46, 'end': 1306.6200000000001, 'text': ' So I need 4 0s or I need 100 0s.', 'tokens': [50364, 407, 286, 643, 1017, 1958, 82, 420, 286, 643, 2319, 1958, 82, 13, 50522], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 264, 'seek': 130346, 'start': 1306.6200000000001, 'end': 1312.5, 'text': ' So imagine if I had an array of 100 elements which was uninitialized do I really want to', 'tokens': [50522, 407, 3811, 498, 286, 632, 364, 10225, 295, 2319, 4959, 597, 390, 43456, 270, 831, 1602, 360, 286, 534, 528, 281, 50816], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 265, 'seek': 130346, 'start': 1312.5, 'end': 1314.98, 'text': ' store 100 0s?', 'tokens': [50816, 3531, 2319, 1958, 82, 30, 50940], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 266, 'seek': 130346, 'start': 1314.98, 'end': 1316.8600000000001, 'text': ' It is just a waste of space.', 'tokens': [50940, 467, 307, 445, 257, 5964, 295, 1901, 13, 51034], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 267, 'seek': 130346, 'start': 1316.8600000000001, 'end': 1324.1000000000001, 'text': ' So bss actually stands for block started by symbol but you can better remember it as better', 'tokens': [51034, 407, 272, 3810, 767, 7382, 337, 3461, 1409, 538, 5986, 457, 291, 393, 1101, 1604, 309, 382, 1101, 51396], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 268, 'seek': 130346, 'start': 1324.1000000000001, 'end': 1330.22, 'text': ' safe space because it is saving space in the object file.', 'tokens': [51396, 3273, 1901, 570, 309, 307, 6816, 1901, 294, 264, 2657, 3991, 13, 51702], 'temperature': 0.0, 'avg_logprob': -0.20359879797631567, 'compression_ratio': 1.5544554455445545, 'no_speech_prob': 0.045992542058229446}, {'id': 269, 'seek': 133022, 'start': 1330.22, 'end': 1339.1000000000001, 'text': ' It is saving space without having to store 0s and it obviously does not occupy space', 'tokens': [50364, 467, 307, 6816, 1901, 1553, 1419, 281, 3531, 1958, 82, 293, 309, 2745, 775, 406, 30645, 1901, 50808], 'temperature': 0.0, 'avg_logprob': -0.13579838275909423, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.20673803985118866}, {'id': 270, 'seek': 133022, 'start': 1339.1000000000001, 'end': 1341.1000000000001, 'text': ' in the object file.', 'tokens': [50808, 294, 264, 2657, 3991, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.13579838275909423, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.20673803985118866}, {'id': 271, 'seek': 133022, 'start': 1341.1000000000001, 'end': 1346.02, 'text': ' And then there is something called as ro data which is read only data.', 'tokens': [50908, 400, 550, 456, 307, 746, 1219, 382, 744, 1412, 597, 307, 1401, 787, 1412, 13, 51154], 'temperature': 0.0, 'avg_logprob': -0.13579838275909423, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.20673803985118866}, {'id': 272, 'seek': 133022, 'start': 1346.02, 'end': 1353.74, 'text': ' Now the string which is this actually goes on to read only data section.', 'tokens': [51154, 823, 264, 6798, 597, 307, 341, 767, 1709, 322, 281, 1401, 787, 1412, 3541, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.13579838275909423, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.20673803985118866}, {'id': 273, 'seek': 133022, 'start': 1353.74, 'end': 1359.74, 'text': ' So any strings which you are using will actually go into read only data sections.', 'tokens': [51540, 407, 604, 13985, 597, 291, 366, 1228, 486, 767, 352, 666, 1401, 787, 1412, 10863, 13, 51840], 'temperature': 0.0, 'avg_logprob': -0.13579838275909423, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.20673803985118866}, {'id': 274, 'seek': 135974, 'start': 1359.74, 'end': 1365.5, 'text': ' So for example, I do not know how many of you are aware but let us say I have code something', 'tokens': [50364, 407, 337, 1365, 11, 286, 360, 406, 458, 577, 867, 295, 291, 366, 3650, 457, 718, 505, 584, 286, 362, 3089, 746, 50652], 'temperature': 0.0, 'avg_logprob': -0.16763687133789062, 'compression_ratio': 1.4685314685314685, 'no_speech_prob': 0.04075222834944725}, {'id': 275, 'seek': 135974, 'start': 1365.5, 'end': 1380.9, 'text': ' like this const char or rather char star ptr is equal to hello world.', 'tokens': [50652, 411, 341, 1817, 1290, 420, 2831, 1290, 3543, 280, 6903, 307, 2681, 281, 7751, 1002, 13, 51422], 'temperature': 0.0, 'avg_logprob': -0.16763687133789062, 'compression_ratio': 1.4685314685314685, 'no_speech_prob': 0.04075222834944725}, {'id': 276, 'seek': 135974, 'start': 1380.9, 'end': 1386.5, 'text': ' Can I do star ptr is equal to g?', 'tokens': [51422, 1664, 286, 360, 3543, 280, 6903, 307, 2681, 281, 290, 30, 51702], 'temperature': 0.0, 'avg_logprob': -0.16763687133789062, 'compression_ratio': 1.4685314685314685, 'no_speech_prob': 0.04075222834944725}, {'id': 277, 'seek': 135974, 'start': 1386.5, 'end': 1388.6200000000001, 'text': ' Can I do this?', 'tokens': [51702, 1664, 286, 360, 341, 30, 51808], 'temperature': 0.0, 'avg_logprob': -0.16763687133789062, 'compression_ratio': 1.4685314685314685, 'no_speech_prob': 0.04075222834944725}, {'id': 278, 'seek': 138862, 'start': 1388.62, 'end': 1389.62, 'text': ' Why?', 'tokens': [50364, 1545, 30, 50414], 'temperature': 0.0, 'avg_logprob': -0.3078711249611594, 'compression_ratio': 1.4416666666666667, 'no_speech_prob': 0.043232910335063934}, {'id': 279, 'seek': 138862, 'start': 1389.62, 'end': 1404.62, 'text': ' Now you understand what makes it non accessible for writing because this string will actually', 'tokens': [50414, 823, 291, 1223, 437, 1669, 309, 2107, 9515, 337, 3579, 570, 341, 6798, 486, 767, 51164], 'temperature': 0.0, 'avg_logprob': -0.3078711249611594, 'compression_ratio': 1.4416666666666667, 'no_speech_prob': 0.043232910335063934}, {'id': 280, 'seek': 138862, 'start': 1404.62, 'end': 1406.8999999999999, 'text': ' go into ro data.', 'tokens': [51164, 352, 666, 744, 1412, 13, 51278], 'temperature': 0.0, 'avg_logprob': -0.3078711249611594, 'compression_ratio': 1.4416666666666667, 'no_speech_prob': 0.043232910335063934}, {'id': 281, 'seek': 138862, 'start': 1406.8999999999999, 'end': 1415.86, 'text': ' Unlike this string hello will actually not be in ro data.', 'tokens': [51278, 17657, 341, 6798, 7751, 486, 767, 406, 312, 294, 744, 1412, 13, 51726], 'temperature': 0.0, 'avg_logprob': -0.3078711249611594, 'compression_ratio': 1.4416666666666667, 'no_speech_prob': 0.043232910335063934}, {'id': 282, 'seek': 141586, 'start': 1416.82, 'end': 1419.4199999999998, 'text': ' data section.', 'tokens': [50412, 1412, 3541, 13, 50542], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 283, 'seek': 141586, 'start': 1419.4199999999998, 'end': 1426.62, 'text': ' So that is why a pointer to a literal string is not same as array containing that string', 'tokens': [50542, 407, 300, 307, 983, 257, 23918, 281, 257, 20411, 6798, 307, 406, 912, 382, 10225, 19273, 300, 6798, 50902], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 284, 'seek': 141586, 'start': 1426.62, 'end': 1430.9199999999998, 'text': ' because this will actually put it in data section.', 'tokens': [50902, 570, 341, 486, 767, 829, 309, 294, 1412, 3541, 13, 51117], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 285, 'seek': 141586, 'start': 1430.9199999999998, 'end': 1434.1, 'text': ' This will actually put it in read only data sections.', 'tokens': [51117, 639, 486, 767, 829, 309, 294, 1401, 787, 1412, 10863, 13, 51276], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 286, 'seek': 141586, 'start': 1434.1, 'end': 1440.62, 'text': ' That is why you cannot modify this.', 'tokens': [51276, 663, 307, 983, 291, 2644, 16927, 341, 13, 51602], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 287, 'seek': 141586, 'start': 1440.62, 'end': 1442.9399999999998, 'text': ' What about variable x?', 'tokens': [51602, 708, 466, 7006, 2031, 30, 51718], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 288, 'seek': 141586, 'start': 1442.9399999999998, 'end': 1445.62, 'text': ' Where does it go?', 'tokens': [51718, 2305, 775, 309, 352, 30, 51852], 'temperature': 0.0, 'avg_logprob': -0.20631406181736997, 'compression_ratio': 1.7423312883435582, 'no_speech_prob': 0.6711154580116272}, {'id': 289, 'seek': 144562, 'start': 1445.62, 'end': 1461.3, 'text': ' Variable x which is here.', 'tokens': [50364, 32511, 712, 2031, 597, 307, 510, 13, 51148], 'temperature': 0.0, 'avg_logprob': -0.3264503695748069, 'compression_ratio': 1.4787234042553192, 'no_speech_prob': 0.049677882343530655}, {'id': 290, 'seek': 144562, 'start': 1461.3, 'end': 1466.54, 'text': ' How many of you think it needs to be in data section?', 'tokens': [51148, 1012, 867, 295, 291, 519, 309, 2203, 281, 312, 294, 1412, 3541, 30, 51410], 'temperature': 0.0, 'avg_logprob': -0.3264503695748069, 'compression_ratio': 1.4787234042553192, 'no_speech_prob': 0.049677882343530655}, {'id': 291, 'seek': 144562, 'start': 1466.54, 'end': 1470.5, 'text': ' How many of you think it needs to be somewhere else?', 'tokens': [51410, 1012, 867, 295, 291, 519, 309, 2203, 281, 312, 4079, 1646, 30, 51608], 'temperature': 0.0, 'avg_logprob': -0.3264503695748069, 'compression_ratio': 1.4787234042553192, 'no_speech_prob': 0.049677882343530655}, {'id': 292, 'seek': 144562, 'start': 1470.5, 'end': 1472.5, 'text': ' Where?', 'tokens': [51608, 2305, 30, 51708], 'temperature': 0.0, 'avg_logprob': -0.3264503695748069, 'compression_ratio': 1.4787234042553192, 'no_speech_prob': 0.049677882343530655}, {'id': 293, 'seek': 147250, 'start': 1472.5, 'end': 1476.54, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50566], 'temperature': 0.0, 'avg_logprob': -0.20160068027556888, 'compression_ratio': 1.4720496894409938, 'no_speech_prob': 0.005214529577642679}, {'id': 294, 'seek': 147250, 'start': 1476.54, 'end': 1479.66, 'text': ' So x is actually a local variable.', 'tokens': [50566, 407, 2031, 307, 767, 257, 2654, 7006, 13, 50722], 'temperature': 0.0, 'avg_logprob': -0.20160068027556888, 'compression_ratio': 1.4720496894409938, 'no_speech_prob': 0.005214529577642679}, {'id': 295, 'seek': 147250, 'start': 1479.66, 'end': 1487.18, 'text': ' It will be on stack and stack is not stored as part of data section.', 'tokens': [50722, 467, 486, 312, 322, 8630, 293, 8630, 307, 406, 12187, 382, 644, 295, 1412, 3541, 13, 51098], 'temperature': 0.0, 'avg_logprob': -0.20160068027556888, 'compression_ratio': 1.4720496894409938, 'no_speech_prob': 0.005214529577642679}, {'id': 296, 'seek': 147250, 'start': 1487.18, 'end': 1497.26, 'text': ' Stack is separate which somehow so there is no information about x in the object file.', 'tokens': [51098, 37649, 307, 4994, 597, 6063, 370, 456, 307, 572, 1589, 466, 2031, 294, 264, 2657, 3991, 13, 51602], 'temperature': 0.0, 'avg_logprob': -0.20160068027556888, 'compression_ratio': 1.4720496894409938, 'no_speech_prob': 0.005214529577642679}, {'id': 297, 'seek': 147250, 'start': 1497.26, 'end': 1498.98, 'text': ' There are couple of reasons for that.', 'tokens': [51602, 821, 366, 1916, 295, 4112, 337, 300, 13, 51688], 'temperature': 0.0, 'avg_logprob': -0.20160068027556888, 'compression_ratio': 1.4720496894409938, 'no_speech_prob': 0.005214529577642679}, {'id': 298, 'seek': 149898, 'start': 1499.46, 'end': 1505.22, 'text': ' What had happened is all the references to x would have been changed to either esp plus', 'tokens': [50388, 708, 632, 2011, 307, 439, 264, 15400, 281, 2031, 576, 362, 668, 3105, 281, 2139, 7089, 1804, 50676], 'temperature': 0.0, 'avg_logprob': -0.15989717652526084, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0757095143198967}, {'id': 299, 'seek': 149898, 'start': 1505.22, 'end': 1508.5, 'text': ' something or ebp minus something or something.', 'tokens': [50676, 746, 420, 308, 65, 79, 3175, 746, 420, 746, 13, 50840], 'temperature': 0.0, 'avg_logprob': -0.15989717652526084, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0757095143198967}, {'id': 300, 'seek': 149898, 'start': 1508.5, 'end': 1514.7, 'text': ' So there is no entity x which needs to live in the object file.', 'tokens': [50840, 407, 456, 307, 572, 13977, 2031, 597, 2203, 281, 1621, 294, 264, 2657, 3991, 13, 51150], 'temperature': 0.0, 'avg_logprob': -0.15989717652526084, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0757095143198967}, {'id': 301, 'seek': 149898, 'start': 1514.7, 'end': 1521.8600000000001, 'text': ' Linker has nothing to do with x because x cannot be referenced from outside.', 'tokens': [51150, 8466, 260, 575, 1825, 281, 360, 365, 2031, 570, 2031, 2644, 312, 32734, 490, 2380, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.15989717652526084, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0757095143198967}, {'id': 302, 'seek': 149898, 'start': 1521.8600000000001, 'end': 1527.06, 'text': ' So linker has no job with it.', 'tokens': [51508, 407, 2113, 260, 575, 572, 1691, 365, 309, 13, 51768], 'temperature': 0.0, 'avg_logprob': -0.15989717652526084, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0757095143198967}, {'id': 303, 'seek': 152706, 'start': 1527.06, 'end': 1530.1799999999998, 'text': ' Now let us look at content of the text section.', 'tokens': [50364, 823, 718, 505, 574, 412, 2701, 295, 264, 2487, 3541, 13, 50520], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 304, 'seek': 152706, 'start': 1530.1799999999998, 'end': 1534.1799999999998, 'text': ' So just like we saw there is elf header.', 'tokens': [50520, 407, 445, 411, 321, 1866, 456, 307, 35565, 23117, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 305, 'seek': 152706, 'start': 1534.1799999999998, 'end': 1539.1799999999998, 'text': ' Elf header will have a pointer to section header table and there will be a section called', 'tokens': [50720, 2699, 69, 23117, 486, 362, 257, 23918, 281, 3541, 23117, 3199, 293, 456, 486, 312, 257, 3541, 1219, 50970], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 306, 'seek': 152706, 'start': 1539.1799999999998, 'end': 1540.46, 'text': ' as text section.', 'tokens': [50970, 382, 2487, 3541, 13, 51034], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 307, 'seek': 152706, 'start': 1540.46, 'end': 1543.6599999999999, 'text': ' So how do you examine content of the text section?', 'tokens': [51034, 407, 577, 360, 291, 17496, 2701, 295, 264, 2487, 3541, 30, 51194], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 308, 'seek': 152706, 'start': 1543.6599999999999, 'end': 1553.26, 'text': ' So I will simply compile my program and use command objdump dash d sample dot o.', 'tokens': [51194, 407, 286, 486, 2935, 31413, 452, 1461, 293, 764, 5622, 1111, 37109, 1420, 8240, 274, 6889, 5893, 277, 13, 51674], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 309, 'seek': 152706, 'start': 1553.26, 'end': 1556.0, 'text': ' This is the content.', 'tokens': [51674, 639, 307, 264, 2701, 13, 51811], 'temperature': 0.0, 'avg_logprob': -0.18827976064479096, 'compression_ratio': 1.7313432835820894, 'no_speech_prob': 0.028403501957654953}, {'id': 310, 'seek': 155600, 'start': 1556.0, 'end': 1562.86, 'text': ' Now if you look at it, this what you are seeing here is the binary encoding corresponding', 'tokens': [50364, 823, 498, 291, 574, 412, 309, 11, 341, 437, 291, 366, 2577, 510, 307, 264, 17434, 43430, 11760, 50707], 'temperature': 0.0, 'avg_logprob': -0.14150950349407432, 'compression_ratio': 1.6628571428571428, 'no_speech_prob': 0.0012839222326874733}, {'id': 311, 'seek': 155600, 'start': 1562.86, 'end': 1564.5, 'text': ' to this instruction.', 'tokens': [50707, 281, 341, 10951, 13, 50789], 'temperature': 0.0, 'avg_logprob': -0.14150950349407432, 'compression_ratio': 1.6628571428571428, 'no_speech_prob': 0.0012839222326874733}, {'id': 312, 'seek': 155600, 'start': 1564.5, 'end': 1573.68, 'text': ' So when 55 is being read by the x86 hardware, it assumes it is an instruction push ebp.', 'tokens': [50789, 407, 562, 12330, 307, 885, 1401, 538, 264, 2031, 22193, 8837, 11, 309, 37808, 309, 307, 364, 10951, 2944, 308, 65, 79, 13, 51248], 'temperature': 0.0, 'avg_logprob': -0.14150950349407432, 'compression_ratio': 1.6628571428571428, 'no_speech_prob': 0.0012839222326874733}, {'id': 313, 'seek': 155600, 'start': 1573.68, 'end': 1580.2, 'text': ' So push ebp is translated by assembler into 55.', 'tokens': [51248, 407, 2944, 308, 65, 79, 307, 16805, 538, 8438, 1918, 666, 12330, 13, 51574], 'temperature': 0.0, 'avg_logprob': -0.14150950349407432, 'compression_ratio': 1.6628571428571428, 'no_speech_prob': 0.0012839222326874733}, {'id': 314, 'seek': 155600, 'start': 1580.2, 'end': 1585.84, 'text': ' Push ecx is translated by assembler into 51.', 'tokens': [51574, 18229, 11437, 87, 307, 16805, 538, 8438, 1918, 666, 18485, 13, 51856], 'temperature': 0.0, 'avg_logprob': -0.14150950349407432, 'compression_ratio': 1.6628571428571428, 'no_speech_prob': 0.0012839222326874733}, {'id': 315, 'seek': 158584, 'start': 1585.84, 'end': 1591.52, 'text': ' Proof this is translated by assemblers to something like this.', 'tokens': [50364, 1705, 2670, 341, 307, 16805, 538, 8438, 11977, 281, 746, 411, 341, 13, 50648], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 316, 'seek': 158584, 'start': 1591.52, 'end': 1593.12, 'text': ' Is it clear?', 'tokens': [50648, 1119, 309, 1850, 30, 50728], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 317, 'seek': 158584, 'start': 1593.12, 'end': 1598.6799999999998, 'text': ' So what assembler, this was the textual program which you must have written.', 'tokens': [50728, 407, 437, 8438, 1918, 11, 341, 390, 264, 2487, 901, 1461, 597, 291, 1633, 362, 3720, 13, 51006], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 318, 'seek': 158584, 'start': 1598.6799999999998, 'end': 1602.84, 'text': ' And assembler translated it into these binary encodings.', 'tokens': [51006, 400, 8438, 1918, 16805, 309, 666, 613, 17434, 2058, 378, 1109, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 319, 'seek': 158584, 'start': 1602.84, 'end': 1610.06, 'text': ' And what objdump dash d did is disassembled it so that it is doing a reverse mapping of', 'tokens': [51214, 400, 437, 1111, 37109, 1420, 8240, 274, 630, 307, 717, 29386, 1493, 309, 370, 300, 309, 307, 884, 257, 9943, 18350, 295, 51575], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 320, 'seek': 158584, 'start': 1610.06, 'end': 1614.52, 'text': ' binary number to the actual text.', 'tokens': [51575, 17434, 1230, 281, 264, 3539, 2487, 13, 51798], 'temperature': 0.0, 'avg_logprob': -0.18705012289325842, 'compression_ratio': 1.6146341463414635, 'no_speech_prob': 0.0060925050638616085}, {'id': 321, 'seek': 161452, 'start': 1614.52, 'end': 1617.12, 'text': ' Is it clear?', 'tokens': [50364, 1119, 309, 1850, 30, 50494], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 322, 'seek': 161452, 'start': 1617.12, 'end': 1618.12, 'text': ' Yes.', 'tokens': [50494, 1079, 13, 50544], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 323, 'seek': 161452, 'start': 1618.12, 'end': 1619.12, 'text': ' I am supposed to do this.', 'tokens': [50544, 286, 669, 3442, 281, 360, 341, 13, 50594], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 324, 'seek': 161452, 'start': 1619.12, 'end': 1622.12, 'text': ' We have got gdb and we have got disassembly.', 'tokens': [50594, 492, 362, 658, 290, 67, 65, 293, 321, 362, 658, 717, 29386, 356, 13, 50744], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 325, 'seek': 161452, 'start': 1622.12, 'end': 1623.12, 'text': ' Correct.', 'tokens': [50744, 12753, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 326, 'seek': 161452, 'start': 1623.12, 'end': 1631.6399999999999, 'text': ' So that disassembly is essentially that we have to source and get so this is it.', 'tokens': [50794, 407, 300, 717, 29386, 356, 307, 4476, 300, 321, 362, 281, 4009, 293, 483, 370, 341, 307, 309, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 327, 'seek': 161452, 'start': 1631.6399999999999, 'end': 1637.56, 'text': ' You are talking about source or looking at assembly instructions.', 'tokens': [51220, 509, 366, 1417, 466, 4009, 420, 1237, 412, 12103, 9415, 13, 51516], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 328, 'seek': 161452, 'start': 1637.56, 'end': 1639.96, 'text': ' So during gdb you can see both things.', 'tokens': [51516, 407, 1830, 290, 67, 65, 291, 393, 536, 1293, 721, 13, 51636], 'temperature': 0.0, 'avg_logprob': -0.42223852330988104, 'compression_ratio': 1.6171428571428572, 'no_speech_prob': 0.07779702544212341}, {'id': 329, 'seek': 163996, 'start': 1639.96, 'end': 1645.68, 'text': ' You can see the actual c source or you can see the x86 assembly.', 'tokens': [50364, 509, 393, 536, 264, 3539, 269, 4009, 420, 291, 393, 536, 264, 2031, 22193, 12103, 13, 50650], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 330, 'seek': 163996, 'start': 1645.68, 'end': 1655.52, 'text': ' So which one are you talking about?', 'tokens': [50650, 407, 597, 472, 366, 291, 1417, 466, 30, 51142], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 331, 'seek': 163996, 'start': 1655.52, 'end': 1656.96, 'text': ' It is exactly same.', 'tokens': [51142, 467, 307, 2293, 912, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 332, 'seek': 163996, 'start': 1656.96, 'end': 1660.32, 'text': ' So both of these just to give internal details.', 'tokens': [51214, 407, 1293, 295, 613, 445, 281, 976, 6920, 4365, 13, 51382], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 333, 'seek': 163996, 'start': 1660.32, 'end': 1664.14, 'text': ' So there is something called as bfd library.', 'tokens': [51382, 407, 456, 307, 746, 1219, 382, 272, 69, 67, 6405, 13, 51573], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 334, 'seek': 163996, 'start': 1664.14, 'end': 1668.0, 'text': ' Binary file descriptor library which exists on Linux.', 'tokens': [51573, 363, 4066, 3991, 31280, 284, 6405, 597, 8198, 322, 18734, 13, 51766], 'temperature': 0.0, 'avg_logprob': -0.2241943613688151, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.20662084221839905}, {'id': 335, 'seek': 166800, 'start': 1668.0, 'end': 1673.6, 'text': ' Which is essentially used by all the clients like kuda gdb, objdump and other things to', 'tokens': [50364, 3013, 307, 4476, 1143, 538, 439, 264, 6982, 411, 350, 11152, 290, 67, 65, 11, 1111, 37109, 1420, 293, 661, 721, 281, 50644], 'temperature': 0.0, 'avg_logprob': -0.17128124237060546, 'compression_ratio': 1.519047619047619, 'no_speech_prob': 0.5368516445159912}, {'id': 336, 'seek': 166800, 'start': 1673.6, 'end': 1675.32, 'text': ' actually read stuff.', 'tokens': [50644, 767, 1401, 1507, 13, 50730], 'temperature': 0.0, 'avg_logprob': -0.17128124237060546, 'compression_ratio': 1.519047619047619, 'no_speech_prob': 0.5368516445159912}, {'id': 337, 'seek': 166800, 'start': 1675.32, 'end': 1690.4, 'text': ' So all of them end up executing same piece of library code to be able to achieve this.', 'tokens': [50730, 407, 439, 295, 552, 917, 493, 32368, 912, 2522, 295, 6405, 3089, 281, 312, 1075, 281, 4584, 341, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.17128124237060546, 'compression_ratio': 1.519047619047619, 'no_speech_prob': 0.5368516445159912}, {'id': 338, 'seek': 166800, 'start': 1690.4, 'end': 1694.8, 'text': ' I do not know their specific implementation but there is nothing sacred about this.', 'tokens': [51484, 286, 360, 406, 458, 641, 2685, 11420, 457, 456, 307, 1825, 15757, 466, 341, 13, 51704], 'temperature': 0.0, 'avg_logprob': -0.17128124237060546, 'compression_ratio': 1.519047619047619, 'no_speech_prob': 0.5368516445159912}, {'id': 339, 'seek': 166800, 'start': 1694.8, 'end': 1697.5, 'text': ' x86 publishes the encoding information.', 'tokens': [51704, 2031, 22193, 11374, 279, 264, 43430, 1589, 13, 51839], 'temperature': 0.0, 'avg_logprob': -0.17128124237060546, 'compression_ratio': 1.519047619047619, 'no_speech_prob': 0.5368516445159912}, {'id': 340, 'seek': 169750, 'start': 1697.5, 'end': 1706.24, 'text': ' So anyone can write a disassembler on their own.', 'tokens': [50364, 407, 2878, 393, 2464, 257, 717, 29386, 1918, 322, 641, 1065, 13, 50801], 'temperature': 0.0, 'avg_logprob': -0.11960486804737765, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.012402808293700218}, {'id': 341, 'seek': 169750, 'start': 1706.24, 'end': 1709.26, 'text': ' Now let us look at the data section.', 'tokens': [50801, 823, 718, 505, 574, 412, 264, 1412, 3541, 13, 50952], 'temperature': 0.0, 'avg_logprob': -0.11960486804737765, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.012402808293700218}, {'id': 342, 'seek': 169750, 'start': 1709.26, 'end': 1714.12, 'text': ' Now in data section we said init where an arr needs to be there.', 'tokens': [50952, 823, 294, 1412, 3541, 321, 848, 3157, 689, 364, 5539, 2203, 281, 312, 456, 13, 51195], 'temperature': 0.0, 'avg_logprob': -0.11960486804737765, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.012402808293700218}, {'id': 343, 'seek': 169750, 'start': 1714.12, 'end': 1720.88, 'text': ' That means somehow I should be able to see 2, 10, 11, 12 somewhere in the data section.', 'tokens': [51195, 663, 1355, 6063, 286, 820, 312, 1075, 281, 536, 568, 11, 1266, 11, 2975, 11, 2272, 4079, 294, 264, 1412, 3541, 13, 51533], 'temperature': 0.0, 'avg_logprob': -0.11960486804737765, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.012402808293700218}, {'id': 344, 'seek': 172088, 'start': 1720.88, 'end': 1728.3600000000001, 'text': ' So if I do objdump dash dash section dot data I can actually see that.', 'tokens': [50364, 407, 498, 286, 360, 1111, 37109, 1420, 8240, 8240, 3541, 5893, 1412, 286, 393, 767, 536, 300, 13, 50738], 'temperature': 0.0, 'avg_logprob': -0.16691486537456512, 'compression_ratio': 1.4928571428571429, 'no_speech_prob': 0.16188360750675201}, {'id': 345, 'seek': 172088, 'start': 1728.3600000000001, 'end': 1739.0200000000002, 'text': ' So I see that there is 2, there is a which is 10, 11, 12.', 'tokens': [50738, 407, 286, 536, 300, 456, 307, 568, 11, 456, 307, 257, 597, 307, 1266, 11, 2975, 11, 2272, 13, 51271], 'temperature': 0.0, 'avg_logprob': -0.16691486537456512, 'compression_ratio': 1.4928571428571429, 'no_speech_prob': 0.16188360750675201}, {'id': 346, 'seek': 172088, 'start': 1739.0200000000002, 'end': 1746.48, 'text': ' So I can see somehow if I examine the object file I am able to see this content.', 'tokens': [51271, 407, 286, 393, 536, 6063, 498, 286, 17496, 264, 2657, 3991, 286, 669, 1075, 281, 536, 341, 2701, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.16691486537456512, 'compression_ratio': 1.4928571428571429, 'no_speech_prob': 0.16188360750675201}, {'id': 347, 'seek': 174648, 'start': 1746.48, 'end': 1760.16, 'text': ' Can anyone tell me why it is 0 to 0000 and not 000002?', 'tokens': [50364, 1664, 2878, 980, 385, 983, 309, 307, 1958, 281, 7143, 628, 293, 406, 7143, 1360, 17, 30, 51048], 'temperature': 0.0, 'avg_logprob': -0.37263165201459614, 'compression_ratio': 1.0136986301369864, 'no_speech_prob': 0.8918973803520203}, {'id': 348, 'seek': 174648, 'start': 1760.16, 'end': 1772.72, 'text': ' What is Indianness?', 'tokens': [51048, 708, 307, 6427, 1287, 30, 51676], 'temperature': 0.0, 'avg_logprob': -0.37263165201459614, 'compression_ratio': 1.0136986301369864, 'no_speech_prob': 0.8918973803520203}, {'id': 349, 'seek': 177272, 'start': 1773.72, 'end': 1777.3600000000001, 'text': ' So this has to do with the Indianness and Indianness information is also present as', 'tokens': [50414, 407, 341, 575, 281, 360, 365, 264, 6427, 1287, 293, 6427, 1287, 1589, 307, 611, 1974, 382, 50596], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 350, 'seek': 177272, 'start': 1777.3600000000001, 'end': 1779.8, 'text': ' part of the elf header.', 'tokens': [50596, 644, 295, 264, 35565, 23117, 13, 50718], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 351, 'seek': 177272, 'start': 1779.8, 'end': 1784.48, 'text': ' So if you read the other bytes of the magic they are actually representing that type of', 'tokens': [50718, 407, 498, 291, 1401, 264, 661, 36088, 295, 264, 5585, 436, 366, 767, 13460, 300, 2010, 295, 50952], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 352, 'seek': 177272, 'start': 1784.48, 'end': 1785.48, 'text': ' information.', 'tokens': [50952, 1589, 13, 51002], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 353, 'seek': 177272, 'start': 1785.48, 'end': 1788.0, 'text': ' What is the Indianness in which the file is?', 'tokens': [51002, 708, 307, 264, 6427, 1287, 294, 597, 264, 3991, 307, 30, 51128], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 354, 'seek': 177272, 'start': 1788.0, 'end': 1800.08, 'text': " So for example if you look at the header it does say it is 2's complement littleindie.", 'tokens': [51128, 407, 337, 1365, 498, 291, 574, 412, 264, 23117, 309, 775, 584, 309, 307, 568, 311, 17103, 707, 471, 414, 13, 51732], 'temperature': 0.0, 'avg_logprob': -0.18794954906810413, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.7171891331672668}, {'id': 355, 'seek': 180008, 'start': 1800.08, 'end': 1805.1399999999999, 'text': ' So you have to be able to read all these fields to be able to interpret the section', 'tokens': [50364, 407, 291, 362, 281, 312, 1075, 281, 1401, 439, 613, 7909, 281, 312, 1075, 281, 7302, 264, 3541, 50617], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 356, 'seek': 180008, 'start': 1805.1399999999999, 'end': 1806.62, 'text': ' content correctly.', 'tokens': [50617, 2701, 8944, 13, 50691], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 357, 'seek': 180008, 'start': 1806.62, 'end': 1810.32, 'text': " If you didn't know whether it was littleindie or bigindie you don't know how to interpret", 'tokens': [50691, 759, 291, 994, 380, 458, 1968, 309, 390, 707, 471, 414, 420, 955, 471, 414, 291, 500, 380, 458, 577, 281, 7302, 50876], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 358, 'seek': 180008, 'start': 1810.32, 'end': 1815.86, 'text': ' contents of the data section.', 'tokens': [50876, 15768, 295, 264, 1412, 3541, 13, 51153], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 359, 'seek': 180008, 'start': 1815.86, 'end': 1824.58, 'text': ' Now just like data we should be able to somehow see this output as %d in RO data and we do', 'tokens': [51153, 823, 445, 411, 1412, 321, 820, 312, 1075, 281, 6063, 536, 341, 5598, 382, 14189, 67, 294, 9025, 1412, 293, 321, 360, 51589], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 360, 'seek': 180008, 'start': 1824.58, 'end': 1825.58, 'text': ' see that.', 'tokens': [51589, 536, 300, 13, 51639], 'temperature': 0.0, 'avg_logprob': -0.17532156814228406, 'compression_ratio': 1.708994708994709, 'no_speech_prob': 0.10869870334863663}, {'id': 361, 'seek': 182558, 'start': 1825.78, 'end': 1841.3799999999999, 'text': ' So this is actually ASCII corresponding to this.', 'tokens': [50374, 407, 341, 307, 767, 7469, 34, 9503, 11760, 281, 341, 13, 51154], 'temperature': 0.0, 'avg_logprob': -0.2466942893134223, 'compression_ratio': 1.3909774436090225, 'no_speech_prob': 0.6198158860206604}, {'id': 362, 'seek': 182558, 'start': 1841.3799999999999, 'end': 1845.78, 'text': ' What strings command essentially does is it looks at all these sections and tries to interpret', 'tokens': [51154, 708, 13985, 5622, 4476, 775, 307, 309, 1542, 412, 439, 613, 10863, 293, 9898, 281, 7302, 51374], 'temperature': 0.0, 'avg_logprob': -0.2466942893134223, 'compression_ratio': 1.3909774436090225, 'no_speech_prob': 0.6198158860206604}, {'id': 363, 'seek': 182558, 'start': 1845.78, 'end': 1849.52, 'text': ' whatever forms ASCII string and dumpster.', 'tokens': [51374, 2035, 6422, 7469, 34, 9503, 6798, 293, 11430, 3120, 13, 51561], 'temperature': 0.0, 'avg_logprob': -0.2466942893134223, 'compression_ratio': 1.3909774436090225, 'no_speech_prob': 0.6198158860206604}, {'id': 364, 'seek': 184952, 'start': 1849.52, 'end': 1865.84, 'text': ' So just to show an example, so this is the code which we had.', 'tokens': [50364, 407, 445, 281, 855, 364, 1365, 11, 370, 341, 307, 264, 3089, 597, 321, 632, 13, 51180], 'temperature': 0.0, 'avg_logprob': -0.23042118549346924, 'compression_ratio': 0.9682539682539683, 'no_speech_prob': 0.5096126198768616}, {'id': 365, 'seek': 186584, 'start': 1865.84, 'end': 1889.58, 'text': ' So if I do redelve...', 'tokens': [50364, 407, 498, 286, 360, 2182, 338, 303, 485, 51551], 'temperature': 0.0, 'avg_logprob': -0.41157134373982746, 'compression_ratio': 1.077922077922078, 'no_speech_prob': 0.04951305314898491}, {'id': 366, 'seek': 186584, 'start': 1889.58, 'end': 1894.54, 'text': ' So we can see the %d string here which was used in this code.', 'tokens': [51551, 407, 321, 393, 536, 264, 14189, 67, 6798, 510, 597, 390, 1143, 294, 341, 3089, 13, 51799], 'temperature': 0.0, 'avg_logprob': -0.41157134373982746, 'compression_ratio': 1.077922077922078, 'no_speech_prob': 0.04951305314898491}, {'id': 367, 'seek': 189454, 'start': 1894.54, 'end': 1899.02, 'text': ' So essentially I can do strings command which essentially lists the various strings which', 'tokens': [50364, 407, 4476, 286, 393, 360, 13985, 5622, 597, 4476, 14511, 264, 3683, 13985, 597, 50588], 'temperature': 0.0, 'avg_logprob': -0.20714965765027032, 'compression_ratio': 1.554945054945055, 'no_speech_prob': 0.22228068113327026}, {'id': 368, 'seek': 189454, 'start': 1899.02, 'end': 1901.34, 'text': ' are present in the object file.', 'tokens': [50588, 366, 1974, 294, 264, 2657, 3991, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.20714965765027032, 'compression_ratio': 1.554945054945055, 'no_speech_prob': 0.22228068113327026}, {'id': 369, 'seek': 189454, 'start': 1901.34, 'end': 1908.6599999999999, 'text': ' We could see there is a string called main, printf, bunch of other things but this string', 'tokens': [50704, 492, 727, 536, 456, 307, 257, 6798, 1219, 2135, 11, 4482, 69, 11, 3840, 295, 661, 721, 457, 341, 6798, 51070], 'temperature': 0.0, 'avg_logprob': -0.20714965765027032, 'compression_ratio': 1.554945054945055, 'no_speech_prob': 0.22228068113327026}, {'id': 370, 'seek': 189454, 'start': 1908.6599999999999, 'end': 1915.56, 'text': " didn't appear there.", 'tokens': [51070, 994, 380, 4204, 456, 13, 51415], 'temperature': 0.0, 'avg_logprob': -0.20714965765027032, 'compression_ratio': 1.554945054945055, 'no_speech_prob': 0.22228068113327026}, {'id': 371, 'seek': 189454, 'start': 1915.56, 'end': 1918.42, 'text': " Now let's look at the section header table itself.", 'tokens': [51415, 823, 718, 311, 574, 412, 264, 3541, 23117, 3199, 2564, 13, 51558], 'temperature': 0.0, 'avg_logprob': -0.20714965765027032, 'compression_ratio': 1.554945054945055, 'no_speech_prob': 0.22228068113327026}, {'id': 372, 'seek': 191842, 'start': 1918.42, 'end': 1925.18, 'text': ' So remember the sh of field in the elf header had a pointer to section header.', 'tokens': [50364, 407, 1604, 264, 402, 295, 2519, 294, 264, 35565, 23117, 632, 257, 23918, 281, 3541, 23117, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 373, 'seek': 191842, 'start': 1925.18, 'end': 1933.22, 'text': ' That means if I read that value and if I read starting from that byte a structure of this', 'tokens': [50702, 663, 1355, 498, 286, 1401, 300, 2158, 293, 498, 286, 1401, 2891, 490, 300, 40846, 257, 3877, 295, 341, 51104], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 374, 'seek': 191842, 'start': 1933.22, 'end': 1936.8200000000002, 'text': ' size I will get the elf section header.', 'tokens': [51104, 2744, 286, 486, 483, 264, 35565, 3541, 23117, 13, 51284], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 375, 'seek': 191842, 'start': 1936.8200000000002, 'end': 1938.98, 'text': ' Does that make sense?', 'tokens': [51284, 4402, 300, 652, 2020, 30, 51392], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 376, 'seek': 191842, 'start': 1938.98, 'end': 1941.3000000000002, 'text': ' No?', 'tokens': [51392, 883, 30, 51508], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 377, 'seek': 191842, 'start': 1941.3000000000002, 'end': 1946.0600000000002, 'text': " What's the doubt?", 'tokens': [51508, 708, 311, 264, 6385, 30, 51746], 'temperature': 0.0, 'avg_logprob': -0.2241826527555224, 'compression_ratio': 1.5365853658536586, 'no_speech_prob': 0.0825967863202095}, {'id': 378, 'seek': 194606, 'start': 1946.06, 'end': 1955.4199999999998, 'text': " So let's look at the read.", 'tokens': [50364, 407, 718, 311, 574, 412, 264, 1401, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.12019340745333967, 'compression_ratio': 1.467153284671533, 'no_speech_prob': 0.04070919752120972}, {'id': 379, 'seek': 194606, 'start': 1955.4199999999998, 'end': 1962.54, 'text': ' So here we get start of the section header which says 976.', 'tokens': [50832, 407, 510, 321, 483, 722, 295, 264, 3541, 23117, 597, 1619, 23399, 21, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.12019340745333967, 'compression_ratio': 1.467153284671533, 'no_speech_prob': 0.04070919752120972}, {'id': 380, 'seek': 194606, 'start': 1962.54, 'end': 1971.54, 'text': ' What this is saying is if I read from start of the file after 976 byte I will expect section', 'tokens': [51188, 708, 341, 307, 1566, 307, 498, 286, 1401, 490, 722, 295, 264, 3991, 934, 23399, 21, 40846, 286, 486, 2066, 3541, 51638], 'temperature': 0.0, 'avg_logprob': -0.12019340745333967, 'compression_ratio': 1.467153284671533, 'no_speech_prob': 0.04070919752120972}, {'id': 381, 'seek': 194606, 'start': 1971.54, 'end': 1973.74, 'text': ' headers to be present.', 'tokens': [51638, 45101, 281, 312, 1974, 13, 51748], 'temperature': 0.0, 'avg_logprob': -0.12019340745333967, 'compression_ratio': 1.467153284671533, 'no_speech_prob': 0.04070919752120972}, {'id': 382, 'seek': 197374, 'start': 1973.74, 'end': 1982.98, 'text': ' So if I somehow move forward by file pointer to 976 and read a structure of this type I', 'tokens': [50364, 407, 498, 286, 6063, 1286, 2128, 538, 3991, 23918, 281, 23399, 21, 293, 1401, 257, 3877, 295, 341, 2010, 286, 50826], 'temperature': 0.0, 'avg_logprob': -0.15818538363017734, 'compression_ratio': 1.6257668711656441, 'no_speech_prob': 0.06539920717477798}, {'id': 383, 'seek': 197374, 'start': 1982.98, 'end': 1986.94, 'text': ' will get the section header table.', 'tokens': [50826, 486, 483, 264, 3541, 23117, 3199, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.15818538363017734, 'compression_ratio': 1.6257668711656441, 'no_speech_prob': 0.06539920717477798}, {'id': 384, 'seek': 197374, 'start': 1986.94, 'end': 1994.74, 'text': ' Now section header table itself has information in chunks of records.', 'tokens': [51024, 823, 3541, 23117, 3199, 2564, 575, 1589, 294, 24004, 295, 7724, 13, 51414], 'temperature': 0.0, 'avg_logprob': -0.15818538363017734, 'compression_ratio': 1.6257668711656441, 'no_speech_prob': 0.06539920717477798}, {'id': 385, 'seek': 197374, 'start': 1994.74, 'end': 2000.94, 'text': ' So each of the section has a section header which describes the section.', 'tokens': [51414, 407, 1184, 295, 264, 3541, 575, 257, 3541, 23117, 597, 15626, 264, 3541, 13, 51724], 'temperature': 0.0, 'avg_logprob': -0.15818538363017734, 'compression_ratio': 1.6257668711656441, 'no_speech_prob': 0.06539920717477798}, {'id': 386, 'seek': 200094, 'start': 2000.94, 'end': 2002.9, 'text': ' Each section will have a name.', 'tokens': [50364, 6947, 3541, 486, 362, 257, 1315, 13, 50462], 'temperature': 0.0, 'avg_logprob': -0.16109739542007445, 'compression_ratio': 1.7919075144508672, 'no_speech_prob': 0.348278284072876}, {'id': 387, 'seek': 200094, 'start': 2002.9, 'end': 2007.9, 'text': ' Name could be .data, .text, .rodata and so on.', 'tokens': [50462, 13866, 727, 312, 2411, 67, 3274, 11, 2411, 25111, 11, 2411, 11452, 3274, 293, 370, 322, 13, 50712], 'temperature': 0.0, 'avg_logprob': -0.16109739542007445, 'compression_ratio': 1.7919075144508672, 'no_speech_prob': 0.348278284072876}, {'id': 388, 'seek': 200094, 'start': 2007.9, 'end': 2013.78, 'text': ' Then there is a type of section which is saying what type of information this section has.', 'tokens': [50712, 1396, 456, 307, 257, 2010, 295, 3541, 597, 307, 1566, 437, 2010, 295, 1589, 341, 3541, 575, 13, 51006], 'temperature': 0.0, 'avg_logprob': -0.16109739542007445, 'compression_ratio': 1.7919075144508672, 'no_speech_prob': 0.348278284072876}, {'id': 389, 'seek': 200094, 'start': 2013.78, 'end': 2020.22, 'text': ' Then there are various flags of the sections and then there is offset where the content', 'tokens': [51006, 1396, 456, 366, 3683, 23265, 295, 264, 10863, 293, 550, 456, 307, 18687, 689, 264, 2701, 51328], 'temperature': 0.0, 'avg_logprob': -0.16109739542007445, 'compression_ratio': 1.7919075144508672, 'no_speech_prob': 0.348278284072876}, {'id': 390, 'seek': 200094, 'start': 2020.22, 'end': 2025.74, 'text': ' of that section lives and bunch of other information.', 'tokens': [51328, 295, 300, 3541, 2909, 293, 3840, 295, 661, 1589, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.16109739542007445, 'compression_ratio': 1.7919075144508672, 'no_speech_prob': 0.348278284072876}, {'id': 391, 'seek': 202574, 'start': 2025.74, 'end': 2032.16, 'text': ' So for example if you look at this file we get these section headers.', 'tokens': [50364, 407, 337, 1365, 498, 291, 574, 412, 341, 3991, 321, 483, 613, 3541, 45101, 13, 50685], 'temperature': 0.0, 'avg_logprob': -0.1333942124337861, 'compression_ratio': 1.5408805031446542, 'no_speech_prob': 0.06364364176988602}, {'id': 392, 'seek': 202574, 'start': 2032.16, 'end': 2039.3, 'text': ' So what I was saying is if the elf header had a pointer saying 976 from 976 I will get', 'tokens': [50685, 407, 437, 286, 390, 1566, 307, 498, 264, 35565, 23117, 632, 257, 23918, 1566, 23399, 21, 490, 23399, 21, 286, 486, 483, 51042], 'temperature': 0.0, 'avg_logprob': -0.1333942124337861, 'compression_ratio': 1.5408805031446542, 'no_speech_prob': 0.06364364176988602}, {'id': 393, 'seek': 202574, 'start': 2039.3, 'end': 2041.94, 'text': ' this data.', 'tokens': [51042, 341, 1412, 13, 51174], 'temperature': 0.0, 'avg_logprob': -0.1333942124337861, 'compression_ratio': 1.5408805031446542, 'no_speech_prob': 0.06364364176988602}, {'id': 394, 'seek': 202574, 'start': 2041.94, 'end': 2049.06, 'text': ' And each of the entry in this section header table is of this structure form.', 'tokens': [51174, 400, 1184, 295, 264, 8729, 294, 341, 3541, 23117, 3199, 307, 295, 341, 3877, 1254, 13, 51530], 'temperature': 0.0, 'avg_logprob': -0.1333942124337861, 'compression_ratio': 1.5408805031446542, 'no_speech_prob': 0.06364364176988602}, {'id': 395, 'seek': 204906, 'start': 2049.06, 'end': 2056.94, 'text': ' Now what we can see here is essentially there is a section name which is .text, .rodata,', 'tokens': [50364, 823, 437, 321, 393, 536, 510, 307, 4476, 456, 307, 257, 3541, 1315, 597, 307, 2411, 25111, 11, 2411, 11452, 3274, 11, 50758], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 396, 'seek': 204906, 'start': 2056.94, 'end': 2057.94, 'text': ' etc.', 'tokens': [50758, 5183, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 397, 'seek': 204906, 'start': 2057.94, 'end': 2061.98, 'text': ' Each section has a flag.', 'tokens': [50808, 6947, 3541, 575, 257, 7166, 13, 51010], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 398, 'seek': 204906, 'start': 2061.98, 'end': 2066.86, 'text': ' So flag is essentially saying what type of function section it is.', 'tokens': [51010, 407, 7166, 307, 4476, 1566, 437, 2010, 295, 2445, 3541, 309, 307, 13, 51254], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 399, 'seek': 204906, 'start': 2066.86, 'end': 2071.82, 'text': ' So A here is saying it is an allocatable section.', 'tokens': [51254, 407, 316, 510, 307, 1566, 309, 307, 364, 12660, 31415, 3541, 13, 51502], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 400, 'seek': 204906, 'start': 2071.82, 'end': 2077.02, 'text': ' Allocatable section essentially implies that it is a section which will occupy memory when', 'tokens': [51502, 1057, 905, 31415, 3541, 4476, 18779, 300, 309, 307, 257, 3541, 597, 486, 30645, 4675, 562, 51762], 'temperature': 0.0, 'avg_logprob': -0.1855512731215533, 'compression_ratio': 1.8735632183908046, 'no_speech_prob': 0.07357777655124664}, {'id': 401, 'seek': 207702, 'start': 2077.02, 'end': 2078.02, 'text': ' running.', 'tokens': [50364, 2614, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 402, 'seek': 207702, 'start': 2078.02, 'end': 2084.38, 'text': ' As it is the content of the section will be loaded into the memory and it will occupy', 'tokens': [50414, 1018, 309, 307, 264, 2701, 295, 264, 3541, 486, 312, 13210, 666, 264, 4675, 293, 309, 486, 30645, 50732], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 403, 'seek': 207702, 'start': 2084.38, 'end': 2088.14, 'text': ' space during the execution.', 'tokens': [50732, 1901, 1830, 264, 15058, 13, 50920], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 404, 'seek': 207702, 'start': 2088.14, 'end': 2093.74, 'text': ' X here is indicating the content of this section is executable.', 'tokens': [50920, 1783, 510, 307, 25604, 264, 2701, 295, 341, 3541, 307, 7568, 712, 13, 51200], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 405, 'seek': 207702, 'start': 2093.74, 'end': 2098.24, 'text': ' That means this section holds instructions which need to be executed.', 'tokens': [51200, 663, 1355, 341, 3541, 9190, 9415, 597, 643, 281, 312, 17577, 13, 51425], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 406, 'seek': 207702, 'start': 2098.24, 'end': 2103.98, 'text': ' So if you look at .rodata, .rodata does not have X flag.', 'tokens': [51425, 407, 498, 291, 574, 412, 2411, 11452, 3274, 11, 2411, 11452, 3274, 775, 406, 362, 1783, 7166, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.16091792176409467, 'compression_ratio': 1.656084656084656, 'no_speech_prob': 0.10947567969560623}, {'id': 407, 'seek': 210398, 'start': 2103.98, 'end': 2110.62, 'text': ' So you cannot put instructions into .rodata section and start executing it because it', 'tokens': [50364, 407, 291, 2644, 829, 9415, 666, 2411, 11452, 3274, 3541, 293, 722, 32368, 309, 570, 309, 50696], 'temperature': 0.0, 'avg_logprob': -0.16602201461791993, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.005903455428779125}, {'id': 408, 'seek': 210398, 'start': 2110.62, 'end': 2115.98, 'text': ' will not be executable.', 'tokens': [50696, 486, 406, 312, 7568, 712, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.16602201461791993, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.005903455428779125}, {'id': 409, 'seek': 210398, 'start': 2115.98, 'end': 2121.66, 'text': ' Similarly you can see that every section has size.', 'tokens': [50964, 13157, 291, 393, 536, 300, 633, 3541, 575, 2744, 13, 51248], 'temperature': 0.0, 'avg_logprob': -0.16602201461791993, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.005903455428779125}, {'id': 410, 'seek': 210398, 'start': 2121.66, 'end': 2127.06, 'text': ' If you look at data section it has size 10 which is in actually hexadecimal that means', 'tokens': [51248, 759, 291, 574, 412, 1412, 3541, 309, 575, 2744, 1266, 597, 307, 294, 767, 23291, 762, 66, 10650, 300, 1355, 51518], 'temperature': 0.0, 'avg_logprob': -0.16602201461791993, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.005903455428779125}, {'id': 411, 'seek': 210398, 'start': 2127.06, 'end': 2129.3, 'text': ' it has size of 16.', 'tokens': [51518, 309, 575, 2744, 295, 3165, 13, 51630], 'temperature': 0.0, 'avg_logprob': -0.16602201461791993, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.005903455428779125}, {'id': 412, 'seek': 212930, 'start': 2129.3, 'end': 2139.2200000000003, 'text': ' Now if you look at Y16 so this is 12 bytes and this is 4 bytes.', 'tokens': [50364, 823, 498, 291, 574, 412, 398, 6866, 370, 341, 307, 2272, 36088, 293, 341, 307, 1017, 36088, 13, 50860], 'temperature': 0.0, 'avg_logprob': -0.16745207044813368, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.08980964869260788}, {'id': 413, 'seek': 212930, 'start': 2139.2200000000003, 'end': 2147.42, 'text': ' Similarly RO data has size which is actually string length of this which is E.', 'tokens': [50860, 13157, 9025, 1412, 575, 2744, 597, 307, 767, 6798, 4641, 295, 341, 597, 307, 462, 13, 51270], 'temperature': 0.0, 'avg_logprob': -0.16745207044813368, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.08980964869260788}, {'id': 414, 'seek': 212930, 'start': 2147.42, 'end': 2150.6200000000003, 'text': ' Each of the section has offset.', 'tokens': [51270, 6947, 295, 264, 3541, 575, 18687, 13, 51430], 'temperature': 0.0, 'avg_logprob': -0.16745207044813368, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.08980964869260788}, {'id': 415, 'seek': 212930, 'start': 2150.6200000000003, 'end': 2154.94, 'text': ' This offset is telling where the data of this section lives.', 'tokens': [51430, 639, 18687, 307, 3585, 689, 264, 1412, 295, 341, 3541, 2909, 13, 51646], 'temperature': 0.0, 'avg_logprob': -0.16745207044813368, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.08980964869260788}, {'id': 416, 'seek': 215494, 'start': 2154.94, 'end': 2160.44, 'text': ' So at offset 78 the content of .data section is present.', 'tokens': [50364, 407, 412, 18687, 26369, 264, 2701, 295, 2411, 67, 3274, 3541, 307, 1974, 13, 50639], 'temperature': 0.0, 'avg_logprob': -0.11276090976803801, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.11573205143213272}, {'id': 417, 'seek': 215494, 'start': 2160.44, 'end': 2169.62, 'text': ' So within the file if I read at offset 78 I will get content of the .data section.', 'tokens': [50639, 407, 1951, 264, 3991, 498, 286, 1401, 412, 18687, 26369, 286, 486, 483, 2701, 295, 264, 2411, 67, 3274, 3541, 13, 51098], 'temperature': 0.0, 'avg_logprob': -0.11276090976803801, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.11573205143213272}, {'id': 418, 'seek': 215494, 'start': 2169.62, 'end': 2174.94, 'text': ' Now to try out this actually happens I can actually do a command called od.', 'tokens': [51098, 823, 281, 853, 484, 341, 767, 2314, 286, 393, 767, 360, 257, 5622, 1219, 3611, 13, 51364], 'temperature': 0.0, 'avg_logprob': -0.11276090976803801, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.11573205143213272}, {'id': 419, 'seek': 215494, 'start': 2174.94, 'end': 2177.98, 'text': ' So od is just a binary reader of some sort.', 'tokens': [51364, 407, 3611, 307, 445, 257, 17434, 15149, 295, 512, 1333, 13, 51516], 'temperature': 0.0, 'avg_logprob': -0.11276090976803801, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.11573205143213272}, {'id': 420, 'seek': 215494, 'start': 2177.98, 'end': 2181.0, 'text': ' It is not trying to interpret it as L for anything.', 'tokens': [51516, 467, 307, 406, 1382, 281, 7302, 309, 382, 441, 337, 1340, 13, 51667], 'temperature': 0.0, 'avg_logprob': -0.11276090976803801, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.11573205143213272}, {'id': 421, 'seek': 218100, 'start': 2181.0, 'end': 2188.28, 'text': ' What I am simply doing is to od I am saying read 16 bytes of data because 16 was the size', 'tokens': [50364, 708, 286, 669, 2935, 884, 307, 281, 3611, 286, 669, 1566, 1401, 3165, 36088, 295, 1412, 570, 3165, 390, 264, 2744, 50728], 'temperature': 0.0, 'avg_logprob': -0.19845521109444755, 'compression_ratio': 1.4226190476190477, 'no_speech_prob': 0.1643405258655548}, {'id': 422, 'seek': 218100, 'start': 2188.28, 'end': 2192.9, 'text': ' and the start offset is 0x78.', 'tokens': [50728, 293, 264, 722, 18687, 307, 1958, 87, 30693, 13, 50959], 'temperature': 0.0, 'avg_logprob': -0.19845521109444755, 'compression_ratio': 1.4226190476190477, 'no_speech_prob': 0.1643405258655548}, {'id': 423, 'seek': 218100, 'start': 2192.9, 'end': 2197.18, 'text': ' And if I look at that content it is actually content of the data section which we have', 'tokens': [50959, 400, 498, 286, 574, 412, 300, 2701, 309, 307, 767, 2701, 295, 264, 1412, 3541, 597, 321, 362, 51173], 'temperature': 0.0, 'avg_logprob': -0.19845521109444755, 'compression_ratio': 1.4226190476190477, 'no_speech_prob': 0.1643405258655548}, {'id': 424, 'seek': 218100, 'start': 2197.18, 'end': 2203.28, 'text': ' seen 2ABC.', 'tokens': [51173, 1612, 568, 32, 7869, 13, 51478], 'temperature': 0.0, 'avg_logprob': -0.19845521109444755, 'compression_ratio': 1.4226190476190477, 'no_speech_prob': 0.1643405258655548}, {'id': 425, 'seek': 218100, 'start': 2203.28, 'end': 2204.48, 'text': ' Does that make sense?', 'tokens': [51478, 4402, 300, 652, 2020, 30, 51538], 'temperature': 0.0, 'avg_logprob': -0.19845521109444755, 'compression_ratio': 1.4226190476190477, 'no_speech_prob': 0.1643405258655548}, {'id': 426, 'seek': 220448, 'start': 2205.12, 'end': 2212.08, 'text': ' So remember this every section had a file offset which told where the content of that', 'tokens': [50396, 407, 1604, 341, 633, 3541, 632, 257, 3991, 18687, 597, 1907, 689, 264, 2701, 295, 300, 50744], 'temperature': 0.0, 'avg_logprob': -0.15486056368115922, 'compression_ratio': 1.6557377049180328, 'no_speech_prob': 0.10358957201242447}, {'id': 427, 'seek': 220448, 'start': 2212.08, 'end': 2214.44, 'text': ' section began.', 'tokens': [50744, 3541, 4283, 13, 50862], 'temperature': 0.0, 'avg_logprob': -0.15486056368115922, 'compression_ratio': 1.6557377049180328, 'no_speech_prob': 0.10358957201242447}, {'id': 428, 'seek': 220448, 'start': 2214.44, 'end': 2222.16, 'text': ' And if I read that offset into the file then I actually see the content which was present', 'tokens': [50862, 400, 498, 286, 1401, 300, 18687, 666, 264, 3991, 550, 286, 767, 536, 264, 2701, 597, 390, 1974, 51248], 'temperature': 0.0, 'avg_logprob': -0.15486056368115922, 'compression_ratio': 1.6557377049180328, 'no_speech_prob': 0.10358957201242447}, {'id': 429, 'seek': 220448, 'start': 2222.16, 'end': 2224.7400000000002, 'text': ' in the data section.', 'tokens': [51248, 294, 264, 1412, 3541, 13, 51377], 'temperature': 0.0, 'avg_logprob': -0.15486056368115922, 'compression_ratio': 1.6557377049180328, 'no_speech_prob': 0.10358957201242447}, {'id': 430, 'seek': 220448, 'start': 2224.7400000000002, 'end': 2231.72, 'text': ' Similarly I can now simply execute this command where I say read starting from offset 88 in', 'tokens': [51377, 13157, 286, 393, 586, 2935, 14483, 341, 5622, 689, 286, 584, 1401, 2891, 490, 18687, 24587, 294, 51726], 'temperature': 0.0, 'avg_logprob': -0.15486056368115922, 'compression_ratio': 1.6557377049180328, 'no_speech_prob': 0.10358957201242447}, {'id': 431, 'seek': 223172, 'start': 2231.72, 'end': 2237.9199999999996, 'text': ' the file then I will get this string which is output is percent D.', 'tokens': [50364, 264, 3991, 550, 286, 486, 483, 341, 6798, 597, 307, 5598, 307, 3043, 413, 13, 50674], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 432, 'seek': 223172, 'start': 2237.9199999999996, 'end': 2242.3999999999996, 'text': ' So remember this so far what we have seen is from ELF header we somehow can come to', 'tokens': [50674, 407, 1604, 341, 370, 1400, 437, 321, 362, 1612, 307, 490, 14426, 37, 23117, 321, 6063, 393, 808, 281, 50898], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 433, 'seek': 223172, 'start': 2242.3999999999996, 'end': 2244.12, 'text': ' the ELF section header.', 'tokens': [50898, 264, 14426, 37, 3541, 23117, 13, 50984], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 434, 'seek': 223172, 'start': 2244.12, 'end': 2251.3199999999997, 'text': ' ELF section header has offsets pointers to where the actual content is living and I can', 'tokens': [50984, 14426, 37, 3541, 23117, 575, 39457, 1385, 44548, 281, 689, 264, 3539, 2701, 307, 2647, 293, 286, 393, 51344], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 435, 'seek': 223172, 'start': 2251.3199999999997, 'end': 2256.12, 'text': ' read those contents to see the actual data within the section.', 'tokens': [51344, 1401, 729, 15768, 281, 536, 264, 3539, 1412, 1951, 264, 3541, 13, 51584], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 436, 'seek': 223172, 'start': 2256.12, 'end': 2257.12, 'text': ' Is it clear?', 'tokens': [51584, 1119, 309, 1850, 30, 51634], 'temperature': 0.0, 'avg_logprob': -0.22564734535655756, 'compression_ratio': 1.6568627450980393, 'no_speech_prob': 0.1720123440027237}, {'id': 437, 'seek': 226172, 'start': 2262.3999999999996, 'end': 2271.48, 'text': ' So this command is od dash x n is telling the number of bytes to read which is 16 then', 'tokens': [50398, 407, 341, 5622, 307, 3611, 8240, 2031, 297, 307, 3585, 264, 1230, 295, 36088, 281, 1401, 597, 307, 3165, 550, 50852], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 438, 'seek': 226172, 'start': 2271.48, 'end': 2278.12, 'text': ' it has some different syntax so I was using traditional command and then sample.o and', 'tokens': [50852, 309, 575, 512, 819, 28431, 370, 286, 390, 1228, 5164, 5622, 293, 550, 6889, 13, 78, 293, 51184], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 439, 'seek': 226172, 'start': 2278.12, 'end': 2279.12, 'text': ' the offset.', 'tokens': [51184, 264, 18687, 13, 51234], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 440, 'seek': 226172, 'start': 2279.12, 'end': 2286.68, 'text': ' So what this command is trying to do is from sample.o starting offset 78 read 16 bytes', 'tokens': [51234, 407, 437, 341, 5622, 307, 1382, 281, 360, 307, 490, 6889, 13, 78, 2891, 18687, 26369, 1401, 3165, 36088, 51612], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 441, 'seek': 226172, 'start': 2286.68, 'end': 2288.72, 'text': ' and dump it.', 'tokens': [51612, 293, 11430, 309, 13, 51714], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 442, 'seek': 226172, 'start': 2288.72, 'end': 2289.72, 'text': ' Ok.', 'tokens': [51714, 3477, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 443, 'seek': 226172, 'start': 2289.72, 'end': 2290.72, 'text': ' Yes.', 'tokens': [51764, 1079, 13, 51814], 'temperature': 0.0, 'avg_logprob': -0.21847184882106552, 'compression_ratio': 1.575268817204301, 'no_speech_prob': 0.06175689771771431}, {'id': 444, 'seek': 229072, 'start': 2290.72, 'end': 2291.72, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.2158315794808524, 'compression_ratio': 1.5333333333333334, 'no_speech_prob': 0.0018513952381908894}, {'id': 445, 'seek': 229072, 'start': 2291.72, 'end': 2303.04, 'text': ' So any hex dump or hex editor should be able to show you the same thing.', 'tokens': [50414, 407, 604, 23291, 11430, 420, 23291, 9839, 820, 312, 1075, 281, 855, 291, 264, 912, 551, 13, 50980], 'temperature': 0.0, 'avg_logprob': -0.2158315794808524, 'compression_ratio': 1.5333333333333334, 'no_speech_prob': 0.0018513952381908894}, {'id': 446, 'seek': 229072, 'start': 2303.04, 'end': 2308.08, 'text': ' Now one of the things is we have seen that each section has a name.', 'tokens': [50980, 823, 472, 295, 264, 721, 307, 321, 362, 1612, 300, 1184, 3541, 575, 257, 1315, 13, 51232], 'temperature': 0.0, 'avg_logprob': -0.2158315794808524, 'compression_ratio': 1.5333333333333334, 'no_speech_prob': 0.0018513952381908894}, {'id': 447, 'seek': 229072, 'start': 2308.08, 'end': 2314.0, 'text': ' But if you look at the structure which I showed you earlier name is actually a word it is', 'tokens': [51232, 583, 498, 291, 574, 412, 264, 3877, 597, 286, 4712, 291, 3071, 1315, 307, 767, 257, 1349, 309, 307, 51528], 'temperature': 0.0, 'avg_logprob': -0.2158315794808524, 'compression_ratio': 1.5333333333333334, 'no_speech_prob': 0.0018513952381908894}, {'id': 448, 'seek': 229072, 'start': 2314.0, 'end': 2317.52, 'text': ' not a string.', 'tokens': [51528, 406, 257, 6798, 13, 51704], 'temperature': 0.0, 'avg_logprob': -0.2158315794808524, 'compression_ratio': 1.5333333333333334, 'no_speech_prob': 0.0018513952381908894}, {'id': 449, 'seek': 231752, 'start': 2317.52, 'end': 2322.68, 'text': ' So it is not really storing string in the section header table itself it is holding', 'tokens': [50364, 407, 309, 307, 406, 534, 26085, 6798, 294, 264, 3541, 23117, 3199, 2564, 309, 307, 5061, 50622], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 450, 'seek': 231752, 'start': 2322.68, 'end': 2324.44, 'text': ' a word.', 'tokens': [50622, 257, 1349, 13, 50710], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 451, 'seek': 231752, 'start': 2324.44, 'end': 2330.68, 'text': ' Now this word itself is an offset into another section.', 'tokens': [50710, 823, 341, 1349, 2564, 307, 364, 18687, 666, 1071, 3541, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 452, 'seek': 231752, 'start': 2330.68, 'end': 2335.92, 'text': ' So strings are not really stored in the section header table.', 'tokens': [51022, 407, 13985, 366, 406, 534, 12187, 294, 264, 3541, 23117, 3199, 13, 51284], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 453, 'seek': 231752, 'start': 2335.92, 'end': 2341.08, 'text': ' What is stored is offset of the string and the strings themselves are stored in some', 'tokens': [51284, 708, 307, 12187, 307, 18687, 295, 264, 6798, 293, 264, 13985, 2969, 366, 12187, 294, 512, 51542], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 454, 'seek': 231752, 'start': 2341.08, 'end': 2343.52, 'text': ' different section.', 'tokens': [51542, 819, 3541, 13, 51664], 'temperature': 0.0, 'avg_logprob': -0.12153387705485026, 'compression_ratio': 1.9685534591194969, 'no_speech_prob': 0.011681005358695984}, {'id': 455, 'seek': 234352, 'start': 2343.52, 'end': 2350.92, 'text': ' So there is a section called sh str tab which actually holds all the section header strings', 'tokens': [50364, 407, 456, 307, 257, 3541, 1219, 402, 1056, 4421, 597, 767, 9190, 439, 264, 3541, 23117, 13985, 50734], 'temperature': 0.0, 'avg_logprob': -0.13940937488110033, 'compression_ratio': 1.8630952380952381, 'no_speech_prob': 0.034068088978528976}, {'id': 456, 'seek': 234352, 'start': 2350.92, 'end': 2356.46, 'text': ' and then there is a section called as str tab which holds all the other strings.', 'tokens': [50734, 293, 550, 456, 307, 257, 3541, 1219, 382, 1056, 4421, 597, 9190, 439, 264, 661, 13985, 13, 51011], 'temperature': 0.0, 'avg_logprob': -0.13940937488110033, 'compression_ratio': 1.8630952380952381, 'no_speech_prob': 0.034068088978528976}, {'id': 457, 'seek': 234352, 'start': 2356.46, 'end': 2363.0, 'text': ' And if I dump the content of that I will actually see all these strings.', 'tokens': [51011, 400, 498, 286, 11430, 264, 2701, 295, 300, 286, 486, 767, 536, 439, 613, 13985, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.13940937488110033, 'compression_ratio': 1.8630952380952381, 'no_speech_prob': 0.034068088978528976}, {'id': 458, 'seek': 234352, 'start': 2363.0, 'end': 2371.12, 'text': ' So to show an example so let us say so we had this elf header file.', 'tokens': [51338, 407, 281, 855, 364, 1365, 370, 718, 505, 584, 370, 321, 632, 341, 35565, 23117, 3991, 13, 51744], 'temperature': 0.0, 'avg_logprob': -0.13940937488110033, 'compression_ratio': 1.8630952380952381, 'no_speech_prob': 0.034068088978528976}, {'id': 459, 'seek': 237112, 'start': 2371.12, 'end': 2374.56, 'text': ' So we know that section header starts at this offset.', 'tokens': [50364, 407, 321, 458, 300, 3541, 23117, 3719, 412, 341, 18687, 13, 50536], 'temperature': 0.0, 'avg_logprob': -0.1440317269527551, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.04736097902059555}, {'id': 460, 'seek': 237112, 'start': 2374.56, 'end': 2382.0, 'text': ' If I actually look at the sections so it has these sections.', 'tokens': [50536, 759, 286, 767, 574, 412, 264, 10863, 370, 309, 575, 613, 10863, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.1440317269527551, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.04736097902059555}, {'id': 461, 'seek': 237112, 'start': 2382.0, 'end': 2385.64, 'text': ' So there is text, trail, data something something.', 'tokens': [50908, 407, 456, 307, 2487, 11, 9924, 11, 1412, 746, 746, 13, 51090], 'temperature': 0.0, 'avg_logprob': -0.1440317269527551, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.04736097902059555}, {'id': 462, 'seek': 237112, 'start': 2385.64, 'end': 2390.92, 'text': ' These names themselves are not really stored in the section header and offset of this is', 'tokens': [51090, 1981, 5288, 2969, 366, 406, 534, 12187, 294, 264, 3541, 23117, 293, 18687, 295, 341, 307, 51354], 'temperature': 0.0, 'avg_logprob': -0.1440317269527551, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.04736097902059555}, {'id': 463, 'seek': 237112, 'start': 2390.92, 'end': 2391.92, 'text': ' actually stored.', 'tokens': [51354, 767, 12187, 13, 51404], 'temperature': 0.0, 'avg_logprob': -0.1440317269527551, 'compression_ratio': 1.7044025157232705, 'no_speech_prob': 0.04736097902059555}, {'id': 464, 'seek': 239192, 'start': 2391.92, 'end': 2405.92, 'text': ' So if I read.', 'tokens': [50364, 407, 498, 286, 1401, 13, 51064], 'temperature': 0.0, 'avg_logprob': -0.19324953079223633, 'compression_ratio': 1.5508474576271187, 'no_speech_prob': 0.022714868187904358}, {'id': 465, 'seek': 239192, 'start': 2405.92, 'end': 2413.0, 'text': ' So what is the content here is essentially content of the section sh str tab.', 'tokens': [51064, 407, 437, 307, 264, 2701, 510, 307, 4476, 2701, 295, 264, 3541, 402, 1056, 4421, 13, 51418], 'temperature': 0.0, 'avg_logprob': -0.19324953079223633, 'compression_ratio': 1.5508474576271187, 'no_speech_prob': 0.022714868187904358}, {'id': 466, 'seek': 239192, 'start': 2413.0, 'end': 2421.16, 'text': ' And sh str tab has at offset 1 a string called sim tab then at offset 9 a string called str', 'tokens': [51418, 400, 402, 1056, 4421, 575, 412, 18687, 502, 257, 6798, 1219, 1034, 4421, 550, 412, 18687, 1722, 257, 6798, 1219, 1056, 51826], 'temperature': 0.0, 'avg_logprob': -0.19324953079223633, 'compression_ratio': 1.5508474576271187, 'no_speech_prob': 0.022714868187904358}, {'id': 467, 'seek': 242116, 'start': 2421.16, 'end': 2422.16, 'text': ' tab.', 'tokens': [50364, 4421, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 468, 'seek': 242116, 'start': 2422.16, 'end': 2429.7599999999998, 'text': ' And what is section header storing is 1, 9, 11, 1b and so on.', 'tokens': [50414, 400, 437, 307, 3541, 23117, 26085, 307, 502, 11, 1722, 11, 2975, 11, 502, 65, 293, 370, 322, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 469, 'seek': 242116, 'start': 2429.7599999999998, 'end': 2432.16, 'text': ' Is it clear?', 'tokens': [50794, 1119, 309, 1850, 30, 50914], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 470, 'seek': 242116, 'start': 2432.16, 'end': 2441.48, 'text': ' So you need these string names for linker to work.', 'tokens': [50914, 407, 291, 643, 613, 6798, 5288, 337, 2113, 260, 281, 589, 13, 51380], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 471, 'seek': 242116, 'start': 2441.48, 'end': 2446.7599999999998, 'text': ' For example linker needs to know that this is a section name this type and it will do', 'tokens': [51380, 1171, 1365, 2113, 260, 2203, 281, 458, 300, 341, 307, 257, 3541, 1315, 341, 2010, 293, 309, 486, 360, 51644], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 472, 'seek': 242116, 'start': 2446.7599999999998, 'end': 2449.6, 'text': ' something with it.', 'tokens': [51644, 746, 365, 309, 13, 51786], 'temperature': 0.0, 'avg_logprob': -0.22724017581424197, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.4292089343070984}, {'id': 473, 'seek': 244960, 'start': 2449.6, 'end': 2456.16, 'text': ' So take 5 minutes write some sample program and try following commands.', 'tokens': [50364, 407, 747, 1025, 2077, 2464, 512, 6889, 1461, 293, 853, 3480, 16901, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.3256751298904419, 'compression_ratio': 1.4273504273504274, 'no_speech_prob': 0.11256425827741623}, {'id': 474, 'seek': 244960, 'start': 2456.16, 'end': 2458.2799999999997, 'text': ' So you should try following commands.', 'tokens': [50692, 407, 291, 820, 853, 3480, 16901, 13, 50798], 'temperature': 0.0, 'avg_logprob': -0.3256751298904419, 'compression_ratio': 1.4273504273504274, 'no_speech_prob': 0.11256425827741623}, {'id': 475, 'seek': 244960, 'start': 2458.2799999999997, 'end': 2464.54, 'text': ' One is readelf-h sample.o.', 'tokens': [50798, 1485, 307, 1401, 1967, 12, 71, 6889, 13, 78, 13, 51111], 'temperature': 0.0, 'avg_logprob': -0.3256751298904419, 'compression_ratio': 1.4273504273504274, 'no_speech_prob': 0.11256425827741623}, {'id': 476, 'seek': 244960, 'start': 2464.54, 'end': 2467.12, 'text': ' So you can see the elf header.', 'tokens': [51111, 407, 291, 393, 536, 264, 35565, 23117, 13, 51240], 'temperature': 0.0, 'avg_logprob': -0.3256751298904419, 'compression_ratio': 1.4273504273504274, 'no_speech_prob': 0.11256425827741623}, {'id': 477, 'seek': 246712, 'start': 2467.12, 'end': 2482.3599999999997, 'text': ' So this is section headers.', 'tokens': [50364, 407, 341, 307, 3541, 45101, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.5664084434509278, 'compression_ratio': 0.8181818181818182, 'no_speech_prob': 0.3062386214733124}, {'id': 478, 'seek': 248236, 'start': 2482.36, 'end': 2496.96, 'text': ' Then you should see then you should try this command od-n some', 'tokens': [50364, 1396, 291, 820, 536, 550, 291, 820, 853, 341, 5622, 3611, 12, 77, 512, 51094], 'temperature': 0.0, 'avg_logprob': -0.36725354194641113, 'compression_ratio': 1.1470588235294117, 'no_speech_prob': 0.10332710295915604}, {'id': 479, 'seek': 248236, 'start': 2496.96, 'end': 2501.48, 'text': ' size dash dash.', 'tokens': [51094, 2744, 8240, 8240, 13, 51320], 'temperature': 0.0, 'avg_logprob': -0.36725354194641113, 'compression_ratio': 1.1470588235294117, 'no_speech_prob': 0.10332710295915604}, {'id': 480, 'seek': 250148, 'start': 2501.48, 'end': 2513.12, 'text': ' sample sample dot o and offset of data section.', 'tokens': [50364, 6889, 6889, 5893, 277, 293, 18687, 295, 1412, 3541, 13, 50946], 'temperature': 0.0, 'avg_logprob': -0.19443031636680044, 'compression_ratio': 1.403225806451613, 'no_speech_prob': 0.04878119379281998}, {'id': 481, 'seek': 250148, 'start': 2513.12, 'end': 2524.2, 'text': ' So write some sample program where you can actually observe these things.', 'tokens': [50946, 407, 2464, 512, 6889, 1461, 689, 291, 393, 767, 11441, 613, 721, 13, 51500], 'temperature': 0.0, 'avg_logprob': -0.19443031636680044, 'compression_ratio': 1.403225806451613, 'no_speech_prob': 0.04878119379281998}, {'id': 482, 'seek': 250148, 'start': 2524.2, 'end': 2530.2, 'text': ' But how to actually associate that with the symbols.', 'tokens': [51500, 583, 577, 281, 767, 14644, 300, 365, 264, 16944, 13, 51800], 'temperature': 0.0, 'avg_logprob': -0.19443031636680044, 'compression_ratio': 1.403225806451613, 'no_speech_prob': 0.04878119379281998}, {'id': 483, 'seek': 253020, 'start': 2530.2, 'end': 2536.4399999999996, 'text': ' So for example I saw in this program 1, 2 and 5.', 'tokens': [50364, 407, 337, 1365, 286, 1866, 294, 341, 1461, 502, 11, 568, 293, 1025, 13, 50676], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 484, 'seek': 253020, 'start': 2536.4399999999996, 'end': 2543.3999999999996, 'text': ' But how do I know 1, 2 is actually content of a symbol called arr and 5 is content of', 'tokens': [50676, 583, 577, 360, 286, 458, 502, 11, 568, 307, 767, 2701, 295, 257, 5986, 1219, 5539, 293, 1025, 307, 2701, 295, 51024], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 485, 'seek': 253020, 'start': 2543.3999999999996, 'end': 2544.68, 'text': ' a variable called x.', 'tokens': [51024, 257, 7006, 1219, 2031, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 486, 'seek': 253020, 'start': 2544.68, 'end': 2551.7599999999998, 'text': ' Or even in earlier case when I had global variables I need some way to say that this', 'tokens': [51088, 1610, 754, 294, 3071, 1389, 562, 286, 632, 4338, 9102, 286, 643, 512, 636, 281, 584, 300, 341, 51442], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 487, 'seek': 253020, 'start': 2551.7599999999998, 'end': 2554.54, 'text': ' data belongs to this symbol.', 'tokens': [51442, 1412, 12953, 281, 341, 5986, 13, 51581], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 488, 'seek': 253020, 'start': 2554.54, 'end': 2559.96, 'text': " I can't simply have data without having a reference to those data points.", 'tokens': [51581, 286, 393, 380, 2935, 362, 1412, 1553, 1419, 257, 6408, 281, 729, 1412, 2793, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.1778045162077873, 'compression_ratio': 1.5662100456621004, 'no_speech_prob': 0.2564052641391754}, {'id': 489, 'seek': 255996, 'start': 2559.96, 'end': 2567.7200000000003, 'text': " So that's where elf also has symbols.", 'tokens': [50364, 407, 300, 311, 689, 35565, 611, 575, 16944, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.13479849815368652, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.002395156305283308}, {'id': 490, 'seek': 255996, 'start': 2567.7200000000003, 'end': 2575.88, 'text': ' So elf actually has a symbol table which contains various symbols which are defined in the program.', 'tokens': [50752, 407, 35565, 767, 575, 257, 5986, 3199, 597, 8306, 3683, 16944, 597, 366, 7642, 294, 264, 1461, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.13479849815368652, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.002395156305283308}, {'id': 491, 'seek': 255996, 'start': 2575.88, 'end': 2585.32, 'text': ' And symbol is actually representing a location within the section where it is defined.', 'tokens': [51160, 400, 5986, 307, 767, 13460, 257, 4914, 1951, 264, 3541, 689, 309, 307, 7642, 13, 51632], 'temperature': 0.0, 'avg_logprob': -0.13479849815368652, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.002395156305283308}, {'id': 492, 'seek': 258532, 'start': 2586.32, 'end': 2592.7200000000003, 'text': ' A thing to note is elf does not hold all the variables which you had defined in your program.', 'tokens': [50414, 316, 551, 281, 3637, 307, 35565, 775, 406, 1797, 439, 264, 9102, 597, 291, 632, 7642, 294, 428, 1461, 13, 50734], 'temperature': 0.0, 'avg_logprob': -0.1294037152643073, 'compression_ratio': 1.7455621301775148, 'no_speech_prob': 0.05661708116531372}, {'id': 493, 'seek': 258532, 'start': 2592.7200000000003, 'end': 2599.4, 'text': ' It only holds variables which are relevant for linker.', 'tokens': [50734, 467, 787, 9190, 9102, 597, 366, 7340, 337, 2113, 260, 13, 51068], 'temperature': 0.0, 'avg_logprob': -0.1294037152643073, 'compression_ratio': 1.7455621301775148, 'no_speech_prob': 0.05661708116531372}, {'id': 494, 'seek': 258532, 'start': 2599.4, 'end': 2604.92, 'text': ' So it holds all the symbols which are global.', 'tokens': [51068, 407, 309, 9190, 439, 264, 16944, 597, 366, 4338, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.1294037152643073, 'compression_ratio': 1.7455621301775148, 'no_speech_prob': 0.05661708116531372}, {'id': 495, 'seek': 258532, 'start': 2604.92, 'end': 2610.52, 'text': ' So any module scope variable which you declare as a global variable will be in the elf symbol', 'tokens': [51344, 407, 604, 10088, 11923, 7006, 597, 291, 19710, 382, 257, 4338, 7006, 486, 312, 294, 264, 35565, 5986, 51624], 'temperature': 0.0, 'avg_logprob': -0.1294037152643073, 'compression_ratio': 1.7455621301775148, 'no_speech_prob': 0.05661708116531372}, {'id': 496, 'seek': 258532, 'start': 2610.52, 'end': 2613.5800000000004, 'text': ' table.', 'tokens': [51624, 3199, 13, 51777], 'temperature': 0.0, 'avg_logprob': -0.1294037152643073, 'compression_ratio': 1.7455621301775148, 'no_speech_prob': 0.05661708116531372}, {'id': 497, 'seek': 261358, 'start': 2613.58, 'end': 2621.98, 'text': ' So any non-static function like main, foo, printf, whatever all of them will be part', 'tokens': [50364, 407, 604, 2107, 12, 34632, 2445, 411, 2135, 11, 726, 78, 11, 4482, 69, 11, 2035, 439, 295, 552, 486, 312, 644, 50784], 'temperature': 0.0, 'avg_logprob': -0.14273738861083984, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.005541651044040918}, {'id': 498, 'seek': 261358, 'start': 2621.98, 'end': 2623.96, 'text': ' of the elf symbol table.', 'tokens': [50784, 295, 264, 35565, 5986, 3199, 13, 50883], 'temperature': 0.0, 'avg_logprob': -0.14273738861083984, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.005541651044040918}, {'id': 499, 'seek': 261358, 'start': 2623.96, 'end': 2631.7, 'text': ' Any module scope variables which you define will be part of the symbol table.', 'tokens': [50883, 2639, 10088, 11923, 9102, 597, 291, 6964, 486, 312, 644, 295, 264, 5986, 3199, 13, 51270], 'temperature': 0.0, 'avg_logprob': -0.14273738861083984, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.005541651044040918}, {'id': 500, 'seek': 261358, 'start': 2631.7, 'end': 2635.92, 'text': ' Then it will also have all the external symbols.', 'tokens': [51270, 1396, 309, 486, 611, 362, 439, 264, 8320, 16944, 13, 51481], 'temperature': 0.0, 'avg_logprob': -0.14273738861083984, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.005541651044040918}, {'id': 501, 'seek': 261358, 'start': 2635.92, 'end': 2642.1, 'text': ' External will mean any symbol which is simply used but not defined.', 'tokens': [51481, 48277, 486, 914, 604, 5986, 597, 307, 2935, 1143, 457, 406, 7642, 13, 51790], 'temperature': 0.0, 'avg_logprob': -0.14273738861083984, 'compression_ratio': 1.6521739130434783, 'no_speech_prob': 0.005541651044040918}, {'id': 502, 'seek': 264210, 'start': 2642.1, 'end': 2648.2999999999997, 'text': ' For example, printf or any variable if you say external in c then c will be an external', 'tokens': [50364, 1171, 1365, 11, 4482, 69, 420, 604, 7006, 498, 291, 584, 8320, 294, 269, 550, 269, 486, 312, 364, 8320, 50674], 'temperature': 0.0, 'avg_logprob': -0.228467067082723, 'compression_ratio': 1.695906432748538, 'no_speech_prob': 0.04202830791473389}, {'id': 503, 'seek': 264210, 'start': 2648.2999999999997, 'end': 2651.2999999999997, 'text': ' symbol.', 'tokens': [50674, 5986, 13, 50824], 'temperature': 0.0, 'avg_logprob': -0.228467067082723, 'compression_ratio': 1.695906432748538, 'no_speech_prob': 0.04202830791473389}, {'id': 504, 'seek': 264210, 'start': 2651.2999999999997, 'end': 2658.94, 'text': ' And it will hold any static variables which were defined in the local scope.', 'tokens': [50824, 400, 309, 486, 1797, 604, 13437, 9102, 597, 645, 7642, 294, 264, 2654, 11923, 13, 51206], 'temperature': 0.0, 'avg_logprob': -0.228467067082723, 'compression_ratio': 1.695906432748538, 'no_speech_prob': 0.04202830791473389}, {'id': 505, 'seek': 264210, 'start': 2658.94, 'end': 2661.1, 'text': ' So it holds three symbols.', 'tokens': [51206, 407, 309, 9190, 1045, 16944, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.228467067082723, 'compression_ratio': 1.695906432748538, 'no_speech_prob': 0.04202830791473389}, {'id': 506, 'seek': 264210, 'start': 2661.1, 'end': 2670.66, 'text': ' All the functions, all the variables which were declared and module scope, all the symbols', 'tokens': [51314, 1057, 264, 6828, 11, 439, 264, 9102, 597, 645, 15489, 293, 10088, 11923, 11, 439, 264, 16944, 51792], 'temperature': 0.0, 'avg_logprob': -0.228467067082723, 'compression_ratio': 1.695906432748538, 'no_speech_prob': 0.04202830791473389}, {'id': 507, 'seek': 267066, 'start': 2670.66, 'end': 2677.3399999999997, 'text': ' of the external things it could be a function or data and it could be a local symbol in', 'tokens': [50364, 295, 264, 8320, 721, 309, 727, 312, 257, 2445, 420, 1412, 293, 309, 727, 312, 257, 2654, 5986, 294, 50698], 'temperature': 0.0, 'avg_logprob': -0.14188330882304423, 'compression_ratio': 1.6282722513089005, 'no_speech_prob': 0.03305895999073982}, {'id': 508, 'seek': 267066, 'start': 2677.3399999999997, 'end': 2684.68, 'text': ' which case it will be a static variable.', 'tokens': [50698, 597, 1389, 309, 486, 312, 257, 13437, 7006, 13, 51065], 'temperature': 0.0, 'avg_logprob': -0.14188330882304423, 'compression_ratio': 1.6282722513089005, 'no_speech_prob': 0.03305895999073982}, {'id': 509, 'seek': 267066, 'start': 2684.68, 'end': 2692.66, 'text': ' So an elf symbol table itself holds the information in this format where every symbol has a name.', 'tokens': [51065, 407, 364, 35565, 5986, 3199, 2564, 9190, 264, 1589, 294, 341, 7877, 689, 633, 5986, 575, 257, 1315, 13, 51464], 'temperature': 0.0, 'avg_logprob': -0.14188330882304423, 'compression_ratio': 1.6282722513089005, 'no_speech_prob': 0.03305895999073982}, {'id': 510, 'seek': 267066, 'start': 2692.66, 'end': 2697.98, 'text': ' Again name is not really stored as string but it is again a pointer into a different', 'tokens': [51464, 3764, 1315, 307, 406, 534, 12187, 382, 6798, 457, 309, 307, 797, 257, 23918, 666, 257, 819, 51730], 'temperature': 0.0, 'avg_logprob': -0.14188330882304423, 'compression_ratio': 1.6282722513089005, 'no_speech_prob': 0.03305895999073982}, {'id': 511, 'seek': 269798, 'start': 2698.58, 'end': 2701.06, 'text': ' called str tab.', 'tokens': [50394, 1219, 1056, 4421, 13, 50518], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 512, 'seek': 269798, 'start': 2701.06, 'end': 2705.1, 'text': ' It has value which we will get to a later.', 'tokens': [50518, 467, 575, 2158, 597, 321, 486, 483, 281, 257, 1780, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 513, 'seek': 269798, 'start': 2705.1, 'end': 2706.54, 'text': ' It has size.', 'tokens': [50720, 467, 575, 2744, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 514, 'seek': 269798, 'start': 2706.54, 'end': 2712.34, 'text': ' So size is essentially whatever is the size of symbol 4 bytes, 8 bytes, 20 bytes and then', 'tokens': [50792, 407, 2744, 307, 4476, 2035, 307, 264, 2744, 295, 5986, 1017, 36088, 11, 1649, 36088, 11, 945, 36088, 293, 550, 51082], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 515, 'seek': 269798, 'start': 2712.34, 'end': 2715.7, 'text': ' it has type and some other things.', 'tokens': [51082, 309, 575, 2010, 293, 512, 661, 721, 13, 51250], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 516, 'seek': 269798, 'start': 2715.7, 'end': 2723.48, 'text': ' So if I look at this program I can dump this symbol table using redelf dash s.', 'tokens': [51250, 407, 498, 286, 574, 412, 341, 1461, 286, 393, 11430, 341, 5986, 3199, 1228, 2182, 1967, 8240, 262, 13, 51639], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 517, 'seek': 269798, 'start': 2723.48, 'end': 2725.48, 'text': ' Note s is small here.', 'tokens': [51639, 11633, 262, 307, 1359, 510, 13, 51739], 'temperature': 0.0, 'avg_logprob': -0.2510396350513805, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.6069876551628113}, {'id': 518, 'seek': 272548, 'start': 2725.48, 'end': 2737.18, 'text': ' For section headers we were using capital S and this is how the symbol table looks.', 'tokens': [50364, 1171, 3541, 45101, 321, 645, 1228, 4238, 318, 293, 341, 307, 577, 264, 5986, 3199, 1542, 13, 50949], 'temperature': 0.0, 'avg_logprob': -0.15271399451083825, 'compression_ratio': 1.471698113207547, 'no_speech_prob': 0.00679263798519969}, {'id': 519, 'seek': 272548, 'start': 2737.18, 'end': 2743.92, 'text': ' Now first thing you have to realize is for every symbol there is a type.', 'tokens': [50949, 823, 700, 551, 291, 362, 281, 4325, 307, 337, 633, 5986, 456, 307, 257, 2010, 13, 51286], 'temperature': 0.0, 'avg_logprob': -0.15271399451083825, 'compression_ratio': 1.471698113207547, 'no_speech_prob': 0.00679263798519969}, {'id': 520, 'seek': 272548, 'start': 2743.92, 'end': 2747.14, 'text': ' Type is indicating what type of symbol it is.', 'tokens': [51286, 15576, 307, 25604, 437, 2010, 295, 5986, 309, 307, 13, 51447], 'temperature': 0.0, 'avg_logprob': -0.15271399451083825, 'compression_ratio': 1.471698113207547, 'no_speech_prob': 0.00679263798519969}, {'id': 521, 'seek': 272548, 'start': 2747.14, 'end': 2751.7, 'text': ' So main has a type called funk.', 'tokens': [51447, 407, 2135, 575, 257, 2010, 1219, 26476, 13, 51675], 'temperature': 0.0, 'avg_logprob': -0.15271399451083825, 'compression_ratio': 1.471698113207547, 'no_speech_prob': 0.00679263798519969}, {'id': 522, 'seek': 275170, 'start': 2751.7, 'end': 2755.8799999999997, 'text': ' So it is saying main is some function symbol.', 'tokens': [50364, 407, 309, 307, 1566, 2135, 307, 512, 2445, 5986, 13, 50573], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 523, 'seek': 275170, 'start': 2755.8799999999997, 'end': 2760.08, 'text': ' Arr is some sort of object symbol.', 'tokens': [50573, 1587, 81, 307, 512, 1333, 295, 2657, 5986, 13, 50783], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 524, 'seek': 275170, 'start': 2760.08, 'end': 2767.9399999999996, 'text': ' So any variable is called as object in elf and any function is called funk.', 'tokens': [50783, 407, 604, 7006, 307, 1219, 382, 2657, 294, 35565, 293, 604, 2445, 307, 1219, 26476, 13, 51176], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 525, 'seek': 275170, 'start': 2767.9399999999996, 'end': 2770.58, 'text': ' So every symbol has a type.', 'tokens': [51176, 407, 633, 5986, 575, 257, 2010, 13, 51308], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 526, 'seek': 275170, 'start': 2770.58, 'end': 2771.98, 'text': ' Every symbol has a size.', 'tokens': [51308, 2048, 5986, 575, 257, 2744, 13, 51378], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 527, 'seek': 275170, 'start': 2771.98, 'end': 2777.04, 'text': ' So for example in it where you can see it has size of 4.', 'tokens': [51378, 407, 337, 1365, 294, 309, 689, 291, 393, 536, 309, 575, 2744, 295, 1017, 13, 51631], 'temperature': 0.0, 'avg_logprob': -0.23582939048866172, 'compression_ratio': 1.6729559748427674, 'no_speech_prob': 0.06538965553045273}, {'id': 528, 'seek': 277704, 'start': 2777.7599999999998, 'end': 2784.44, 'text': ' Arr has size of 12 and in it where has size of 4.', 'tokens': [50400, 1587, 81, 575, 2744, 295, 2272, 293, 294, 309, 689, 575, 2744, 295, 1017, 13, 50734], 'temperature': 0.0, 'avg_logprob': -0.17569049199422201, 'compression_ratio': 1.5314685314685315, 'no_speech_prob': 0.029288247227668762}, {'id': 529, 'seek': 277704, 'start': 2784.44, 'end': 2789.96, 'text': ' So size is size in bytes of that symbol.', 'tokens': [50734, 407, 2744, 307, 2744, 294, 36088, 295, 300, 5986, 13, 51010], 'temperature': 0.0, 'avg_logprob': -0.17569049199422201, 'compression_ratio': 1.5314685314685315, 'no_speech_prob': 0.029288247227668762}, {'id': 530, 'seek': 277704, 'start': 2789.96, 'end': 2793.68, 'text': ' Then there is something called as value.', 'tokens': [51010, 1396, 456, 307, 746, 1219, 382, 2158, 13, 51196], 'temperature': 0.0, 'avg_logprob': -0.17569049199422201, 'compression_ratio': 1.5314685314685315, 'no_speech_prob': 0.029288247227668762}, {'id': 531, 'seek': 277704, 'start': 2793.68, 'end': 2802.38, 'text': ' Now value is unlike the term value it is not really representing content of the symbol.', 'tokens': [51196, 823, 2158, 307, 8343, 264, 1433, 2158, 309, 307, 406, 534, 13460, 2701, 295, 264, 5986, 13, 51631], 'temperature': 0.0, 'avg_logprob': -0.17569049199422201, 'compression_ratio': 1.5314685314685315, 'no_speech_prob': 0.029288247227668762}, {'id': 532, 'seek': 280238, 'start': 2802.38, 'end': 2813.1, 'text': ' So if you look at var 1 it says 10 which is 0x10 but it is not really the value of var', 'tokens': [50364, 407, 498, 291, 574, 412, 1374, 502, 309, 1619, 1266, 597, 307, 1958, 87, 3279, 457, 309, 307, 406, 534, 264, 2158, 295, 1374, 50900], 'temperature': 0.0, 'avg_logprob': -0.21363511681556702, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.008308781310915947}, {'id': 533, 'seek': 280238, 'start': 2813.1, 'end': 2814.1, 'text': ' 1.', 'tokens': [50900, 502, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.21363511681556702, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.008308781310915947}, {'id': 534, 'seek': 280238, 'start': 2814.1, 'end': 2821.6800000000003, 'text': ' It is really the offset within the data section of var.', 'tokens': [50950, 467, 307, 534, 264, 18687, 1951, 264, 1412, 3541, 295, 1374, 13, 51329], 'temperature': 0.0, 'avg_logprob': -0.21363511681556702, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.008308781310915947}, {'id': 535, 'seek': 280238, 'start': 2821.6800000000003, 'end': 2828.0, 'text': ' So value is essentially representing offset within the section.', 'tokens': [51329, 407, 2158, 307, 4476, 13460, 18687, 1951, 264, 3541, 13, 51645], 'temperature': 0.0, 'avg_logprob': -0.21363511681556702, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.008308781310915947}, {'id': 536, 'seek': 280238, 'start': 2828.0, 'end': 2829.62, 'text': ' Is that clear?', 'tokens': [51645, 1119, 300, 1850, 30, 51726], 'temperature': 0.0, 'avg_logprob': -0.21363511681556702, 'compression_ratio': 1.5886524822695036, 'no_speech_prob': 0.008308781310915947}, {'id': 537, 'seek': 282962, 'start': 2829.62, 'end': 2836.74, 'text': ' So if you look at it that way so what this is saying is in it where is at offset 0 in', 'tokens': [50364, 407, 498, 291, 574, 412, 309, 300, 636, 370, 437, 341, 307, 1566, 307, 294, 309, 689, 307, 412, 18687, 1958, 294, 50720], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 538, 'seek': 282962, 'start': 2836.74, 'end': 2839.0, 'text': ' the data section.', 'tokens': [50720, 264, 1412, 3541, 13, 50833], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 539, 'seek': 282962, 'start': 2839.0, 'end': 2846.54, 'text': ' So if you now print data section of this the first thing which you should see at 0 byte', 'tokens': [50833, 407, 498, 291, 586, 4482, 1412, 3541, 295, 341, 264, 700, 551, 597, 291, 820, 536, 412, 1958, 40846, 51210], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 540, 'seek': 282962, 'start': 2846.54, 'end': 2848.98, 'text': ' is actually content of in it where.', 'tokens': [51210, 307, 767, 2701, 295, 294, 309, 689, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 541, 'seek': 282962, 'start': 2848.98, 'end': 2852.22, 'text': ' That means you will see 2 first.', 'tokens': [51332, 663, 1355, 291, 486, 536, 568, 700, 13, 51494], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 542, 'seek': 282962, 'start': 2852.22, 'end': 2855.2999999999997, 'text': ' Then it says Arr is at offset 4.', 'tokens': [51494, 1396, 309, 1619, 1587, 81, 307, 412, 18687, 1017, 13, 51648], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 543, 'seek': 282962, 'start': 2855.2999999999997, 'end': 2856.2999999999997, 'text': ' Why 4?', 'tokens': [51648, 1545, 1017, 30, 51698], 'temperature': 0.0, 'avg_logprob': -0.16027910444471571, 'compression_ratio': 1.6853932584269662, 'no_speech_prob': 0.013600335456430912}, {'id': 544, 'seek': 285630, 'start': 2856.42, 'end': 2862.1000000000004, 'text': ' In it where is 4 bytes so Arr must start at 4 bytes after that.', 'tokens': [50370, 682, 309, 689, 307, 1017, 36088, 370, 1587, 81, 1633, 722, 412, 1017, 36088, 934, 300, 13, 50654], 'temperature': 0.0, 'avg_logprob': -0.14552847962630422, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.10918015986680984}, {'id': 545, 'seek': 285630, 'start': 2862.1000000000004, 'end': 2873.1000000000004, 'text': ' Then it says there is var 1 because this is occupying 12 bytes so this must start at 16', 'tokens': [50654, 1396, 309, 1619, 456, 307, 1374, 502, 570, 341, 307, 8073, 1840, 2272, 36088, 370, 341, 1633, 722, 412, 3165, 51204], 'temperature': 0.0, 'avg_logprob': -0.14552847962630422, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.10918015986680984}, {'id': 546, 'seek': 285630, 'start': 2873.1000000000004, 'end': 2877.9, 'text': ' and there is something y which is starting 4 bytes after that.', 'tokens': [51204, 293, 456, 307, 746, 288, 597, 307, 2891, 1017, 36088, 934, 300, 13, 51444], 'temperature': 0.0, 'avg_logprob': -0.14552847962630422, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.10918015986680984}, {'id': 547, 'seek': 285630, 'start': 2877.9, 'end': 2883.7000000000003, 'text': ' So the content of data section according to this symbol table is organized such that first', 'tokens': [51444, 407, 264, 2701, 295, 1412, 3541, 4650, 281, 341, 5986, 3199, 307, 9983, 1270, 300, 700, 51734], 'temperature': 0.0, 'avg_logprob': -0.14552847962630422, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.10918015986680984}, {'id': 548, 'seek': 288370, 'start': 2883.7, 'end': 2888.8999999999996, 'text': ' the value of in it where is stored then the value of Arr 3 is stored then the value of', 'tokens': [50364, 264, 2158, 295, 294, 309, 689, 307, 12187, 550, 264, 2158, 295, 1587, 81, 805, 307, 12187, 550, 264, 2158, 295, 50624], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 549, 'seek': 288370, 'start': 2888.8999999999996, 'end': 2892.2599999999998, 'text': ' var 1 is stored and then the value of y is stored.', 'tokens': [50624, 1374, 502, 307, 12187, 293, 550, 264, 2158, 295, 288, 307, 12187, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 550, 'seek': 288370, 'start': 2892.2599999999998, 'end': 2897.74, 'text': ' So if you actually dump the content for this program you should see content in that order', 'tokens': [50792, 407, 498, 291, 767, 11430, 264, 2701, 337, 341, 1461, 291, 820, 536, 2701, 294, 300, 1668, 51066], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 551, 'seek': 288370, 'start': 2897.74, 'end': 2900.0, 'text': ' in the data section.', 'tokens': [51066, 294, 264, 1412, 3541, 13, 51179], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 552, 'seek': 288370, 'start': 2900.0, 'end': 2901.0, 'text': ' Is it clear?', 'tokens': [51179, 1119, 309, 1850, 30, 51229], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 553, 'seek': 288370, 'start': 2901.0, 'end': 2905.2999999999997, 'text': ' How to interpret this field?', 'tokens': [51229, 1012, 281, 7302, 341, 2519, 30, 51444], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 554, 'seek': 288370, 'start': 2905.2999999999997, 'end': 2909.7, 'text': ' Now every variable also has a section.', 'tokens': [51444, 823, 633, 7006, 611, 575, 257, 3541, 13, 51664], 'temperature': 0.0, 'avg_logprob': -0.1699647479587131, 'compression_ratio': 1.8176795580110496, 'no_speech_prob': 0.0330500490963459}, {'id': 555, 'seek': 290970, 'start': 2909.7, 'end': 2916.98, 'text': ' So if you look at this ndx field it is called a section index.', 'tokens': [50364, 407, 498, 291, 574, 412, 341, 220, 273, 87, 2519, 309, 307, 1219, 257, 3541, 8186, 13, 50728], 'temperature': 0.0, 'avg_logprob': -0.12816927307530454, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.039583269506692886}, {'id': 556, 'seek': 290970, 'start': 2916.98, 'end': 2920.58, 'text': ' This is actually an index into the section table.', 'tokens': [50728, 639, 307, 767, 364, 8186, 666, 264, 3541, 3199, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.12816927307530454, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.039583269506692886}, {'id': 557, 'seek': 290970, 'start': 2920.58, 'end': 2925.58, 'text': ' So what this is saying is in it where has section index of 3.', 'tokens': [50908, 407, 437, 341, 307, 1566, 307, 294, 309, 689, 575, 3541, 8186, 295, 805, 13, 51158], 'temperature': 0.0, 'avg_logprob': -0.12816927307530454, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.039583269506692886}, {'id': 558, 'seek': 290970, 'start': 2925.58, 'end': 2931.62, 'text': ' What that means is if you look at the section header it is the section header 3 actually', 'tokens': [51158, 708, 300, 1355, 307, 498, 291, 574, 412, 264, 3541, 23117, 309, 307, 264, 3541, 23117, 805, 767, 51460], 'temperature': 0.0, 'avg_logprob': -0.12816927307530454, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.039583269506692886}, {'id': 559, 'seek': 290970, 'start': 2931.62, 'end': 2934.2999999999997, 'text': ' holds dot data.', 'tokens': [51460, 9190, 5893, 1412, 13, 51594], 'temperature': 0.0, 'avg_logprob': -0.12816927307530454, 'compression_ratio': 1.8116883116883118, 'no_speech_prob': 0.039583269506692886}, {'id': 560, 'seek': 293430, 'start': 2934.3, 'end': 2940.6600000000003, 'text': ' So what this is saying is in it where is a symbol which is defined in dot data section', 'tokens': [50364, 407, 437, 341, 307, 1566, 307, 294, 309, 689, 307, 257, 5986, 597, 307, 7642, 294, 5893, 1412, 3541, 50682], 'temperature': 0.0, 'avg_logprob': -0.16044868528842926, 'compression_ratio': 1.7226277372262773, 'no_speech_prob': 0.09498269855976105}, {'id': 561, 'seek': 293430, 'start': 2940.6600000000003, 'end': 2943.6600000000003, 'text': ' at offset 0.', 'tokens': [50682, 412, 18687, 1958, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.16044868528842926, 'compression_ratio': 1.7226277372262773, 'no_speech_prob': 0.09498269855976105}, {'id': 562, 'seek': 293430, 'start': 2943.6600000000003, 'end': 2954.26, 'text': ' Arr is a symbol which is defined in dot data section at offset 4.', 'tokens': [50832, 1587, 81, 307, 257, 5986, 597, 307, 7642, 294, 5893, 1412, 3541, 412, 18687, 1017, 13, 51362], 'temperature': 0.0, 'avg_logprob': -0.16044868528842926, 'compression_ratio': 1.7226277372262773, 'no_speech_prob': 0.09498269855976105}, {'id': 563, 'seek': 293430, 'start': 2954.26, 'end': 2958.1400000000003, 'text': ' Is that clear how we are trying to relate all the fields together now?', 'tokens': [51362, 1119, 300, 1850, 577, 321, 366, 1382, 281, 10961, 439, 264, 7909, 1214, 586, 30, 51556], 'temperature': 0.0, 'avg_logprob': -0.16044868528842926, 'compression_ratio': 1.7226277372262773, 'no_speech_prob': 0.09498269855976105}, {'id': 564, 'seek': 295814, 'start': 2958.14, 'end': 2964.58, 'text': ' So for every symbol you had some data which belonged in dot data section but how do you', 'tokens': [50364, 407, 337, 633, 5986, 291, 632, 512, 1412, 597, 28611, 294, 5893, 1412, 3541, 457, 577, 360, 291, 50686], 'temperature': 0.0, 'avg_logprob': -0.13138102277924743, 'compression_ratio': 1.6822916666666667, 'no_speech_prob': 0.0361386239528656}, {'id': 565, 'seek': 295814, 'start': 2964.58, 'end': 2973.7799999999997, 'text': ' know symbol and dot data section are associated by this ndx field.', 'tokens': [50686, 458, 5986, 293, 5893, 1412, 3541, 366, 6615, 538, 341, 220, 273, 87, 2519, 13, 51146], 'temperature': 0.0, 'avg_logprob': -0.13138102277924743, 'compression_ratio': 1.6822916666666667, 'no_speech_prob': 0.0361386239528656}, {'id': 566, 'seek': 295814, 'start': 2973.7799999999997, 'end': 2980.46, 'text': ' Now if you look at this something called as printf it actually has u and d.', 'tokens': [51146, 823, 498, 291, 574, 412, 341, 746, 1219, 382, 4482, 69, 309, 767, 575, 344, 293, 274, 13, 51480], 'temperature': 0.0, 'avg_logprob': -0.13138102277924743, 'compression_ratio': 1.6822916666666667, 'no_speech_prob': 0.0361386239528656}, {'id': 567, 'seek': 295814, 'start': 2980.46, 'end': 2987.02, 'text': ' This is telling that printf is actually not defined in this file because there is no section', 'tokens': [51480, 639, 307, 3585, 300, 4482, 69, 307, 767, 406, 7642, 294, 341, 3991, 570, 456, 307, 572, 3541, 51808], 'temperature': 0.0, 'avg_logprob': -0.13138102277924743, 'compression_ratio': 1.6822916666666667, 'no_speech_prob': 0.0361386239528656}, {'id': 568, 'seek': 298702, 'start': 2987.3, 'end': 2990.66, 'text': ' which holds the content of printf.', 'tokens': [50378, 597, 9190, 264, 2701, 295, 4482, 69, 13, 50546], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 569, 'seek': 298702, 'start': 2990.66, 'end': 2997.9, 'text': ' If you look at main, main actually has one which means it belongs into dot text section.', 'tokens': [50546, 759, 291, 574, 412, 2135, 11, 2135, 767, 575, 472, 597, 1355, 309, 12953, 666, 5893, 2487, 3541, 13, 50908], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 570, 'seek': 298702, 'start': 2997.9, 'end': 3001.18, 'text': ' So main is defined in dot text section.', 'tokens': [50908, 407, 2135, 307, 7642, 294, 5893, 2487, 3541, 13, 51072], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 571, 'seek': 298702, 'start': 3001.18, 'end': 3006.74, 'text': ' Printf there is nothing to define because we do not know what is the text section for', 'tokens': [51072, 34439, 69, 456, 307, 1825, 281, 6964, 570, 321, 360, 406, 458, 437, 307, 264, 2487, 3541, 337, 51350], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 572, 'seek': 298702, 'start': 3006.74, 'end': 3009.58, 'text': ' printf because it will come from somewhere else.', 'tokens': [51350, 4482, 69, 570, 309, 486, 808, 490, 4079, 1646, 13, 51492], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 573, 'seek': 298702, 'start': 3009.58, 'end': 3012.82, 'text': ' That is why it is marked as u and d.', 'tokens': [51492, 663, 307, 983, 309, 307, 12658, 382, 344, 293, 274, 13, 51654], 'temperature': 0.0, 'avg_logprob': -0.1596319220039282, 'compression_ratio': 1.675, 'no_speech_prob': 0.03014913573861122}, {'id': 574, 'seek': 301282, 'start': 3012.82, 'end': 3018.26, 'text': ' This uninit where is uninitialized and it goes into something called as com which we', 'tokens': [50364, 639, 517, 259, 270, 689, 307, 43456, 270, 831, 1602, 293, 309, 1709, 666, 746, 1219, 382, 395, 597, 321, 50636], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 575, 'seek': 301282, 'start': 3018.26, 'end': 3023.06, 'text': ' will see later.', 'tokens': [50636, 486, 536, 1780, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 576, 'seek': 301282, 'start': 3023.06, 'end': 3024.5800000000004, 'text': ' Is it clear?', 'tokens': [50876, 1119, 309, 1850, 30, 50952], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 577, 'seek': 301282, 'start': 3024.5800000000004, 'end': 3032.82, 'text': ' So now what you should do is write this program and examine what is the value of a symbol', 'tokens': [50952, 407, 586, 437, 291, 820, 360, 307, 2464, 341, 1461, 293, 17496, 437, 307, 264, 2158, 295, 257, 5986, 51364], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 578, 'seek': 301282, 'start': 3032.82, 'end': 3038.1400000000003, 'text': ' and whether you see the dot section content according to those values.', 'tokens': [51364, 293, 1968, 291, 536, 264, 5893, 3541, 2701, 4650, 281, 729, 4190, 13, 51630], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 579, 'seek': 301282, 'start': 3038.1400000000003, 'end': 3041.38, 'text': ' So declare 4-5 variables with different values.', 'tokens': [51630, 407, 19710, 1017, 12, 20, 9102, 365, 819, 4190, 13, 51792], 'temperature': 0.0, 'avg_logprob': -0.16792418843223936, 'compression_ratio': 1.5480769230769231, 'no_speech_prob': 0.022964168339967728}, {'id': 580, 'seek': 304138, 'start': 3041.38, 'end': 3047.94, 'text': ' So you can actually see and you can simply do this command.', 'tokens': [50364, 407, 291, 393, 767, 536, 293, 291, 393, 2935, 360, 341, 5622, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.18872249126434326, 'compression_ratio': 1.411764705882353, 'no_speech_prob': 0.171965092420578}, {'id': 581, 'seek': 304138, 'start': 3047.94, 'end': 3068.2200000000003, 'text': ' So what you can do is obj dump dash dash section equal to dot data and sample dot o.', 'tokens': [50692, 407, 437, 291, 393, 360, 307, 1111, 73, 11430, 8240, 8240, 3541, 2681, 281, 5893, 1412, 293, 6889, 5893, 277, 13, 51706], 'temperature': 0.0, 'avg_logprob': -0.18872249126434326, 'compression_ratio': 1.411764705882353, 'no_speech_prob': 0.171965092420578}, {'id': 582, 'seek': 306822, 'start': 3068.22, 'end': 3076.9399999999996, 'text': " So let's say I have file 1 dot c where I declare something as static int myvar is equal to", 'tokens': [50364, 407, 718, 311, 584, 286, 362, 3991, 502, 5893, 269, 689, 286, 19710, 746, 382, 13437, 560, 452, 8517, 307, 2681, 281, 50800], 'temperature': 0.0, 'avg_logprob': -0.26294541826435164, 'compression_ratio': 1.3888888888888888, 'no_speech_prob': 0.11711317300796509}, {'id': 583, 'seek': 306822, 'start': 3076.9399999999996, 'end': 3092.06, 'text': ' 5 and then I do int main byte and say I do printf percent d slash n myvar and then I', 'tokens': [50800, 1025, 293, 550, 286, 360, 560, 2135, 40846, 293, 584, 286, 360, 4482, 69, 3043, 274, 17330, 297, 452, 8517, 293, 550, 286, 51556], 'temperature': 0.0, 'avg_logprob': -0.26294541826435164, 'compression_ratio': 1.3888888888888888, 'no_speech_prob': 0.11711317300796509}, {'id': 584, 'seek': 309206, 'start': 3092.06, 'end': 3109.2599999999998, 'text': ' call a function foo and I return 0 and here I define external void foo.', 'tokens': [50364, 818, 257, 2445, 726, 78, 293, 286, 2736, 1958, 293, 510, 286, 6964, 8320, 22009, 726, 78, 13, 51224], 'temperature': 0.0, 'avg_logprob': -0.45186601985584607, 'compression_ratio': 1.0142857142857142, 'no_speech_prob': 0.96152263879776}, {'id': 585, 'seek': 310926, 'start': 3110.26, 'end': 3131.86, 'text': ' So just to show you the code.', 'tokens': [50414, 407, 445, 281, 855, 291, 264, 3089, 13, 51494], 'temperature': 0.0, 'avg_logprob': -0.26687375960811494, 'compression_ratio': 1.2808988764044944, 'no_speech_prob': 0.2817043364048004}, {'id': 586, 'seek': 310926, 'start': 3131.86, 'end': 3136.94, 'text': ' So this code says that there is something called as foo which is external then there', 'tokens': [51494, 407, 341, 3089, 1619, 300, 456, 307, 746, 1219, 382, 726, 78, 597, 307, 8320, 550, 456, 51748], 'temperature': 0.0, 'avg_logprob': -0.26687375960811494, 'compression_ratio': 1.2808988764044944, 'no_speech_prob': 0.2817043364048004}, {'id': 587, 'seek': 313694, 'start': 3136.94, 'end': 3145.7000000000003, 'text': ' is something called as myvar which is static and then uses myvar prints myvar and then', 'tokens': [50364, 307, 746, 1219, 382, 452, 8517, 597, 307, 13437, 293, 550, 4960, 452, 8517, 22305, 452, 8517, 293, 550, 50802], 'temperature': 0.0, 'avg_logprob': -0.22259661886427137, 'compression_ratio': 1.5410958904109588, 'no_speech_prob': 0.677802324295044}, {'id': 588, 'seek': 313694, 'start': 3145.7000000000003, 'end': 3146.7000000000003, 'text': ' calls foo.', 'tokens': [50802, 5498, 726, 78, 13, 50852], 'temperature': 0.0, 'avg_logprob': -0.22259661886427137, 'compression_ratio': 1.5410958904109588, 'no_speech_prob': 0.677802324295044}, {'id': 589, 'seek': 313694, 'start': 3146.7000000000003, 'end': 3152.62, 'text': ' File 2 says myvar is external and then defines foo.', 'tokens': [50852, 26196, 568, 1619, 452, 8517, 307, 8320, 293, 550, 23122, 726, 78, 13, 51148], 'temperature': 0.0, 'avg_logprob': -0.22259661886427137, 'compression_ratio': 1.5410958904109588, 'no_speech_prob': 0.677802324295044}, {'id': 590, 'seek': 313694, 'start': 3152.62, 'end': 3154.86, 'text': " Now let's try compiling this.", 'tokens': [51148, 823, 718, 311, 853, 715, 4883, 341, 13, 51260], 'temperature': 0.0, 'avg_logprob': -0.22259661886427137, 'compression_ratio': 1.5410958904109588, 'no_speech_prob': 0.677802324295044}, {'id': 591, 'seek': 313694, 'start': 3154.86, 'end': 3165.3, 'text': ' So I do gcc file 1 dot c dash o file 1 dot o.', 'tokens': [51260, 407, 286, 360, 290, 1914, 3991, 502, 5893, 269, 8240, 277, 3991, 502, 5893, 277, 13, 51782], 'temperature': 0.0, 'avg_logprob': -0.22259661886427137, 'compression_ratio': 1.5410958904109588, 'no_speech_prob': 0.677802324295044}, {'id': 592, 'seek': 316530, 'start': 3165.6600000000003, 'end': 3174.02, 'text': ' Similarly I do file 2 dot o and then I try to link these two programs.', 'tokens': [50382, 13157, 286, 360, 3991, 568, 5893, 277, 293, 550, 286, 853, 281, 2113, 613, 732, 4268, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.1141491090097735, 'compression_ratio': 1.389261744966443, 'no_speech_prob': 0.027524305507540703}, {'id': 593, 'seek': 316530, 'start': 3174.02, 'end': 3182.86, 'text': ' What will happen?', 'tokens': [50800, 708, 486, 1051, 30, 51242], 'temperature': 0.0, 'avg_logprob': -0.1141491090097735, 'compression_ratio': 1.389261744966443, 'no_speech_prob': 0.027524305507540703}, {'id': 594, 'seek': 316530, 'start': 3182.86, 'end': 3184.86, 'text': ' It will generate an error.', 'tokens': [51242, 467, 486, 8460, 364, 6713, 13, 51342], 'temperature': 0.0, 'avg_logprob': -0.1141491090097735, 'compression_ratio': 1.389261744966443, 'no_speech_prob': 0.027524305507540703}, {'id': 595, 'seek': 316530, 'start': 3184.86, 'end': 3192.7000000000003, 'text': ' So it says that there is something called as myvar which is undefined.', 'tokens': [51342, 407, 309, 1619, 300, 456, 307, 746, 1219, 382, 452, 8517, 597, 307, 674, 5666, 2001, 13, 51734], 'temperature': 0.0, 'avg_logprob': -0.1141491090097735, 'compression_ratio': 1.389261744966443, 'no_speech_prob': 0.027524305507540703}, {'id': 596, 'seek': 316530, 'start': 3192.7000000000003, 'end': 3194.3, 'text': ' Why did it say that?', 'tokens': [51734, 1545, 630, 309, 584, 300, 30, 51814], 'temperature': 0.0, 'avg_logprob': -0.1141491090097735, 'compression_ratio': 1.389261744966443, 'no_speech_prob': 0.027524305507540703}, {'id': 597, 'seek': 319430, 'start': 3194.3, 'end': 3199.94, 'text': ' I had myvar which was defined.', 'tokens': [50364, 286, 632, 452, 8517, 597, 390, 7642, 13, 50646], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 598, 'seek': 319430, 'start': 3199.94, 'end': 3209.6200000000003, 'text': " It was because static because if you look at redel's output file 1 dot o it said myvar", 'tokens': [50646, 467, 390, 570, 13437, 570, 498, 291, 574, 412, 2182, 338, 311, 5598, 3991, 502, 5893, 277, 309, 848, 452, 8517, 51130], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 599, 'seek': 319430, 'start': 3209.6200000000003, 'end': 3211.82, 'text': ' is local.', 'tokens': [51130, 307, 2654, 13, 51240], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 600, 'seek': 319430, 'start': 3211.82, 'end': 3217.98, 'text': ' So linker is not trying to say the myvar which is in file 2 dot o is same as myvar in file', 'tokens': [51240, 407, 2113, 260, 307, 406, 1382, 281, 584, 264, 452, 8517, 597, 307, 294, 3991, 568, 5893, 277, 307, 912, 382, 452, 8517, 294, 3991, 51548], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 601, 'seek': 319430, 'start': 3217.98, 'end': 3219.02, 'text': ' 1 dot o.', 'tokens': [51548, 502, 5893, 277, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 602, 'seek': 319430, 'start': 3219.02, 'end': 3223.9, 'text': " It says these are some different things and it ultimately didn't find any reference to", 'tokens': [51600, 467, 1619, 613, 366, 512, 819, 721, 293, 309, 6284, 994, 380, 915, 604, 6408, 281, 51844], 'temperature': 0.0, 'avg_logprob': -0.1372380623450646, 'compression_ratio': 1.643979057591623, 'no_speech_prob': 0.004752961453050375}, {'id': 603, 'seek': 322390, 'start': 3223.9, 'end': 3227.38, 'text': ' myvar which was supposed to be global.', 'tokens': [50364, 452, 8517, 597, 390, 3442, 281, 312, 4338, 13, 50538], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 604, 'seek': 322390, 'start': 3227.38, 'end': 3230.7000000000003, 'text': " So that's why linker said something is undefined here.", 'tokens': [50538, 407, 300, 311, 983, 2113, 260, 848, 746, 307, 674, 5666, 2001, 510, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 605, 'seek': 322390, 'start': 3230.7000000000003, 'end': 3239.78, 'text': ' Whereas if I simply change this to normal variable and I compile my file again.', 'tokens': [50704, 13813, 498, 286, 2935, 1319, 341, 281, 2710, 7006, 293, 286, 31413, 452, 3991, 797, 13, 51158], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 606, 'seek': 322390, 'start': 3239.78, 'end': 3241.7200000000003, 'text': ' Now look at what happens.', 'tokens': [51158, 823, 574, 412, 437, 2314, 13, 51255], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 607, 'seek': 322390, 'start': 3241.7200000000003, 'end': 3250.26, 'text': ' Now myvar is actually global and I do gcc file 1 dot o file 2 dot o and the program', 'tokens': [51255, 823, 452, 8517, 307, 767, 4338, 293, 286, 360, 290, 1914, 3991, 502, 5893, 277, 3991, 568, 5893, 277, 293, 264, 1461, 51682], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 608, 'seek': 322390, 'start': 3250.26, 'end': 3252.1, 'text': ' links.', 'tokens': [51682, 6123, 13, 51774], 'temperature': 0.0, 'avg_logprob': -0.1531620829938406, 'compression_ratio': 1.5025906735751295, 'no_speech_prob': 0.0015481635928153992}, {'id': 609, 'seek': 325210, 'start': 3252.1, 'end': 3258.38, 'text': ' So linker is using the information of local versus global to determine what can be external', 'tokens': [50364, 407, 2113, 260, 307, 1228, 264, 1589, 295, 2654, 5717, 4338, 281, 6997, 437, 393, 312, 8320, 50678], 'temperature': 0.0, 'avg_logprob': -0.16316661834716797, 'compression_ratio': 1.423529411764706, 'no_speech_prob': 0.05646857991814613}, {'id': 610, 'seek': 325210, 'start': 3258.38, 'end': 3262.66, 'text': ' in other things and what is specific to this file only.', 'tokens': [50678, 294, 661, 721, 293, 437, 307, 2685, 281, 341, 3991, 787, 13, 50892], 'temperature': 0.0, 'avg_logprob': -0.16316661834716797, 'compression_ratio': 1.423529411764706, 'no_speech_prob': 0.05646857991814613}, {'id': 611, 'seek': 325210, 'start': 3262.66, 'end': 3265.18, 'text': ' Is that clear?', 'tokens': [50892, 1119, 300, 1850, 30, 51018], 'temperature': 0.0, 'avg_logprob': -0.16316661834716797, 'compression_ratio': 1.423529411764706, 'no_speech_prob': 0.05646857991814613}, {'id': 612, 'seek': 325210, 'start': 3265.18, 'end': 3272.8199999999997, 'text': ' Now one strange thing is why for some reason has this name y1940.', 'tokens': [51018, 823, 472, 5861, 551, 307, 983, 337, 512, 1778, 575, 341, 1315, 288, 3405, 5254, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.16316661834716797, 'compression_ratio': 1.423529411764706, 'no_speech_prob': 0.05646857991814613}, {'id': 613, 'seek': 325210, 'start': 3272.8199999999997, 'end': 3277.2999999999997, 'text': ' Any idea why?', 'tokens': [51400, 2639, 1558, 983, 30, 51624], 'temperature': 0.0, 'avg_logprob': -0.16316661834716797, 'compression_ratio': 1.423529411764706, 'no_speech_prob': 0.05646857991814613}, {'id': 614, 'seek': 327730, 'start': 3278.1400000000003, 'end': 3291.5, 'text': ' So if I declare a static variable which was y here in main its name came as y dot 1940.', 'tokens': [50406, 407, 498, 286, 19710, 257, 13437, 7006, 597, 390, 288, 510, 294, 2135, 1080, 1315, 1361, 382, 288, 5893, 24158, 13, 51074], 'temperature': 0.0, 'avg_logprob': -0.28706842787722325, 'compression_ratio': 1.2764227642276422, 'no_speech_prob': 0.543707549571991}, {'id': 615, 'seek': 327730, 'start': 3291.5, 'end': 3293.1400000000003, 'text': ' But why is that needed?', 'tokens': [51074, 583, 983, 307, 300, 2978, 30, 51156], 'temperature': 0.0, 'avg_logprob': -0.28706842787722325, 'compression_ratio': 1.2764227642276422, 'no_speech_prob': 0.543707549571991}, {'id': 616, 'seek': 327730, 'start': 3293.1400000000003, 'end': 3301.98, 'text': " Like var 1 didn't have var 1 was also static.", 'tokens': [51156, 1743, 1374, 502, 994, 380, 362, 1374, 502, 390, 611, 13437, 13, 51598], 'temperature': 0.0, 'avg_logprob': -0.28706842787722325, 'compression_ratio': 1.2764227642276422, 'no_speech_prob': 0.543707549571991}, {'id': 617, 'seek': 330198, 'start': 3302.54, 'end': 3304.42, 'text': ' Why does it need that?', 'tokens': [50392, 1545, 775, 309, 643, 300, 30, 50486], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 618, 'seek': 330198, 'start': 3304.42, 'end': 3305.42, 'text': ' Correct.', 'tokens': [50486, 12753, 13, 50536], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 619, 'seek': 330198, 'start': 3305.42, 'end': 3310.54, 'text': ' So there are couple of reasons.', 'tokens': [50536, 407, 456, 366, 1916, 295, 4112, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 620, 'seek': 330198, 'start': 3310.54, 'end': 3318.06, 'text': " One is I couldn't have a function called foo which also can say static int y.", 'tokens': [50792, 1485, 307, 286, 2809, 380, 362, 257, 2445, 1219, 726, 78, 597, 611, 393, 584, 13437, 560, 288, 13, 51168], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 621, 'seek': 330198, 'start': 3318.06, 'end': 3322.46, 'text': ' So I have two y variables which are actually different.', 'tokens': [51168, 407, 286, 362, 732, 288, 9102, 597, 366, 767, 819, 13, 51388], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 622, 'seek': 330198, 'start': 3322.46, 'end': 3327.1, 'text': ' So I need some way to distinguish y in foo versus y in main.', 'tokens': [51388, 407, 286, 643, 512, 636, 281, 20206, 288, 294, 726, 78, 5717, 288, 294, 2135, 13, 51620], 'temperature': 0.0, 'avg_logprob': -0.23776334126790363, 'compression_ratio': 1.4659090909090908, 'no_speech_prob': 0.024280857294797897}, {'id': 623, 'seek': 332710, 'start': 3327.1, 'end': 3333.22, 'text': " That's why I need to change the name to something random and in this case it chooses", 'tokens': [50364, 663, 311, 983, 286, 643, 281, 1319, 264, 1315, 281, 746, 4974, 293, 294, 341, 1389, 309, 25963, 50670], 'temperature': 0.0, 'avg_logprob': -0.207214916453642, 'compression_ratio': 1.4277456647398843, 'no_speech_prob': 0.00426139310002327}, {'id': 624, 'seek': 332710, 'start': 3333.22, 'end': 3336.8199999999997, 'text': ' 1940.', 'tokens': [50670, 24158, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.207214916453642, 'compression_ratio': 1.4277456647398843, 'no_speech_prob': 0.00426139310002327}, {'id': 625, 'seek': 332710, 'start': 3336.8199999999997, 'end': 3341.42, 'text': ' Now to summarize the elf structure, this is how it looks.', 'tokens': [50850, 823, 281, 20858, 264, 35565, 3877, 11, 341, 307, 577, 309, 1542, 13, 51080], 'temperature': 0.0, 'avg_logprob': -0.207214916453642, 'compression_ratio': 1.4277456647398843, 'no_speech_prob': 0.00426139310002327}, {'id': 626, 'seek': 332710, 'start': 3341.42, 'end': 3345.98, 'text': ' So we had elf header which was at the start of the file.', 'tokens': [51080, 407, 321, 632, 35565, 23117, 597, 390, 412, 264, 722, 295, 264, 3991, 13, 51308], 'temperature': 0.0, 'avg_logprob': -0.207214916453642, 'compression_ratio': 1.4277456647398843, 'no_speech_prob': 0.00426139310002327}, {'id': 627, 'seek': 332710, 'start': 3345.98, 'end': 3350.8399999999997, 'text': ' It had a pointer to section header table.', 'tokens': [51308, 467, 632, 257, 23918, 281, 3541, 23117, 3199, 13, 51551], 'temperature': 0.0, 'avg_logprob': -0.207214916453642, 'compression_ratio': 1.4277456647398843, 'no_speech_prob': 0.00426139310002327}, {'id': 628, 'seek': 335084, 'start': 3350.84, 'end': 3356.28, 'text': ' Section header table consists of individual section entries.', 'tokens': [50364, 21804, 23117, 3199, 14689, 295, 2609, 3541, 23041, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.17878022627397017, 'compression_ratio': 1.6308724832214765, 'no_speech_prob': 0.033030055463314056}, {'id': 629, 'seek': 335084, 'start': 3356.28, 'end': 3361.84, 'text': ' Each section header table has a field called offset.', 'tokens': [50636, 6947, 3541, 23117, 3199, 575, 257, 2519, 1219, 18687, 13, 50914], 'temperature': 0.0, 'avg_logprob': -0.17878022627397017, 'compression_ratio': 1.6308724832214765, 'no_speech_prob': 0.033030055463314056}, {'id': 630, 'seek': 335084, 'start': 3361.84, 'end': 3368.08, 'text': ' Offset actually points to the content of the section and each section has a size which', 'tokens': [50914, 6318, 3854, 767, 2793, 281, 264, 2701, 295, 264, 3541, 293, 1184, 3541, 575, 257, 2744, 597, 51226], 'temperature': 0.0, 'avg_logprob': -0.17878022627397017, 'compression_ratio': 1.6308724832214765, 'no_speech_prob': 0.033030055463314056}, {'id': 631, 'seek': 335084, 'start': 3368.08, 'end': 3373.6400000000003, 'text': ' tells how much data lives in that section.', 'tokens': [51226, 5112, 577, 709, 1412, 2909, 294, 300, 3541, 13, 51504], 'temperature': 0.0, 'avg_logprob': -0.17878022627397017, 'compression_ratio': 1.6308724832214765, 'no_speech_prob': 0.033030055463314056}, {'id': 632, 'seek': 337364, 'start': 3373.8399999999997, 'end': 3382.7999999999997, 'text': ' Name of the section itself comes as an index into another section called sh str tab.', 'tokens': [50374, 13866, 295, 264, 3541, 2564, 1487, 382, 364, 8186, 666, 1071, 3541, 1219, 402, 1056, 4421, 13, 50822], 'temperature': 0.0, 'avg_logprob': -0.24069228172302246, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.21696873009204865}, {'id': 633, 'seek': 337364, 'start': 3382.7999999999997, 'end': 3390.48, 'text': ' Then there is elf symbol whose name again comes from another section called str tab.', 'tokens': [50822, 1396, 456, 307, 35565, 5986, 6104, 1315, 797, 1487, 490, 1071, 3541, 1219, 1056, 4421, 13, 51206], 'temperature': 0.0, 'avg_logprob': -0.24069228172302246, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.21696873009204865}, {'id': 634, 'seek': 337364, 'start': 3390.48, 'end': 3399.8399999999997, 'text': ' shn index field of the elf symbol table points to the section in which it is defined.', 'tokens': [51206, 402, 77, 8186, 2519, 295, 264, 35565, 5986, 3199, 2793, 281, 264, 3541, 294, 597, 309, 307, 7642, 13, 51674], 'temperature': 0.0, 'avg_logprob': -0.24069228172302246, 'compression_ratio': 1.7586206896551724, 'no_speech_prob': 0.21696873009204865}, {'id': 635, 'seek': 339984, 'start': 3399.84, 'end': 3404.48, 'text': ' So every symbol is defined in some section.', 'tokens': [50364, 407, 633, 5986, 307, 7642, 294, 512, 3541, 13, 50596], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 636, 'seek': 339984, 'start': 3404.48, 'end': 3410.96, 'text': ' Value of the symbol table is representing offset within the section where the data of', 'tokens': [50596, 39352, 295, 264, 5986, 3199, 307, 13460, 18687, 1951, 264, 3541, 689, 264, 1412, 295, 50920], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 637, 'seek': 339984, 'start': 3410.96, 'end': 3418.88, 'text': ' that symbol belongs and size is representing the size of that variable.', 'tokens': [50920, 300, 5986, 12953, 293, 2744, 307, 13460, 264, 2744, 295, 300, 7006, 13, 51316], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 638, 'seek': 339984, 'start': 3418.88, 'end': 3420.04, 'text': ' Is this clear?', 'tokens': [51316, 1119, 341, 1850, 30, 51374], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 639, 'seek': 339984, 'start': 3420.04, 'end': 3425.84, 'text': ' Because if you understand this metadata, you should be able to traverse elf file and read', 'tokens': [51374, 1436, 498, 291, 1223, 341, 26603, 11, 291, 820, 312, 1075, 281, 45674, 35565, 3991, 293, 1401, 51664], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 640, 'seek': 339984, 'start': 3425.84, 'end': 3429.2000000000003, 'text': ' elf file using a program.', 'tokens': [51664, 35565, 3991, 1228, 257, 1461, 13, 51832], 'temperature': 0.0, 'avg_logprob': -0.15830371318719325, 'compression_ratio': 1.6683417085427135, 'no_speech_prob': 0.008846011012792587}, {'id': 641, 'seek': 342920, 'start': 3429.2, 'end': 3432.12, 'text': " You don't need a tool like read elf.", 'tokens': [50364, 509, 500, 380, 643, 257, 2290, 411, 1401, 35565, 13, 50510], 'temperature': 0.0, 'avg_logprob': -0.11534993442488306, 'compression_ratio': 1.7783505154639174, 'no_speech_prob': 0.006585369817912579}, {'id': 642, 'seek': 342920, 'start': 3432.12, 'end': 3440.04, 'text': ' So just to reiterate, elf header will give you offset to the section header table.', 'tokens': [50510, 407, 445, 281, 33528, 11, 35565, 23117, 486, 976, 291, 18687, 281, 264, 3541, 23117, 3199, 13, 50906], 'temperature': 0.0, 'avg_logprob': -0.11534993442488306, 'compression_ratio': 1.7783505154639174, 'no_speech_prob': 0.006585369817912579}, {'id': 643, 'seek': 342920, 'start': 3440.04, 'end': 3444.3199999999997, 'text': ' Section header table will have the offset which is where the content of the section', 'tokens': [50906, 21804, 23117, 3199, 486, 362, 264, 18687, 597, 307, 689, 264, 2701, 295, 264, 3541, 51120], 'temperature': 0.0, 'avg_logprob': -0.11534993442488306, 'compression_ratio': 1.7783505154639174, 'no_speech_prob': 0.006585369817912579}, {'id': 644, 'seek': 342920, 'start': 3444.3199999999997, 'end': 3450.04, 'text': ' begins and the name itself comes from sh str tab.', 'tokens': [51120, 7338, 293, 264, 1315, 2564, 1487, 490, 402, 1056, 4421, 13, 51406], 'temperature': 0.0, 'avg_logprob': -0.11534993442488306, 'compression_ratio': 1.7783505154639174, 'no_speech_prob': 0.006585369817912579}, {'id': 645, 'seek': 342920, 'start': 3450.04, 'end': 3457.3599999999997, 'text': ' Symbol is nothing but offset within the section where data of that particular symbol starts', 'tokens': [51406, 3902, 5612, 307, 1825, 457, 18687, 1951, 264, 3541, 689, 1412, 295, 300, 1729, 5986, 3719, 51772], 'temperature': 0.0, 'avg_logprob': -0.11534993442488306, 'compression_ratio': 1.7783505154639174, 'no_speech_prob': 0.006585369817912579}, {'id': 646, 'seek': 345736, 'start': 3457.6, 'end': 3462.28, 'text': ' and the size essentially gives how much is the size within that section associated with', 'tokens': [50376, 293, 264, 2744, 4476, 2709, 577, 709, 307, 264, 2744, 1951, 300, 3541, 6615, 365, 50610], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 647, 'seek': 345736, 'start': 3462.28, 'end': 3464.1600000000003, 'text': ' that symbol.', 'tokens': [50610, 300, 5986, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 648, 'seek': 345736, 'start': 3464.1600000000003, 'end': 3469.28, 'text': ' Is that clear?', 'tokens': [50704, 1119, 300, 1850, 30, 50960], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 649, 'seek': 345736, 'start': 3469.28, 'end': 3472.08, 'text': ' Now quiz.', 'tokens': [50960, 823, 15450, 13, 51100], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 650, 'seek': 345736, 'start': 3472.08, 'end': 3477.28, 'text': ' So I have this code where I define a function called foo as extern.', 'tokens': [51100, 407, 286, 362, 341, 3089, 689, 286, 6964, 257, 2445, 1219, 726, 78, 382, 30360, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 651, 'seek': 345736, 'start': 3477.28, 'end': 3484.6, 'text': ' I define a variable called int var 1 and I call foo and then in the other file I say', 'tokens': [51360, 286, 6964, 257, 7006, 1219, 560, 1374, 502, 293, 286, 818, 726, 78, 293, 550, 294, 264, 661, 3991, 286, 584, 51726], 'temperature': 0.0, 'avg_logprob': -0.17677810317591616, 'compression_ratio': 1.5885714285714285, 'no_speech_prob': 0.033060625195503235}, {'id': 652, 'seek': 348460, 'start': 3484.8399999999997, 'end': 3491.36, 'text': ' extern float var and I do var is equal to 5.0.', 'tokens': [50376, 30360, 15706, 1374, 293, 286, 360, 1374, 307, 2681, 281, 1025, 13, 15, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.22295701119207567, 'compression_ratio': 1.0888888888888888, 'no_speech_prob': 0.8734299540519714}, {'id': 653, 'seek': 348460, 'start': 3491.36, 'end': 3514.52, 'text': ' What will happen in this code when I link together?', 'tokens': [50702, 708, 486, 1051, 294, 341, 3089, 562, 286, 2113, 1214, 30, 51860], 'temperature': 0.0, 'avg_logprob': -0.22295701119207567, 'compression_ratio': 1.0888888888888888, 'no_speech_prob': 0.8734299540519714}, {'id': 654, 'seek': 351452, 'start': 3514.52, 'end': 3517.28, 'text': ' One person thinks it will give an error.', 'tokens': [50364, 1485, 954, 7309, 309, 486, 976, 364, 6713, 13, 50502], 'temperature': 0.0, 'avg_logprob': -0.2678194216319493, 'compression_ratio': 1.40625, 'no_speech_prob': 0.44480687379837036}, {'id': 655, 'seek': 351452, 'start': 3517.28, 'end': 3521.68, 'text': ' How many of you think it is an error?', 'tokens': [50502, 1012, 867, 295, 291, 519, 309, 307, 364, 6713, 30, 50722], 'temperature': 0.0, 'avg_logprob': -0.2678194216319493, 'compression_ratio': 1.40625, 'no_speech_prob': 0.44480687379837036}, {'id': 656, 'seek': 351452, 'start': 3521.68, 'end': 3522.68, 'text': ' Quite a few people.', 'tokens': [50722, 20464, 257, 1326, 561, 13, 50772], 'temperature': 0.0, 'avg_logprob': -0.2678194216319493, 'compression_ratio': 1.40625, 'no_speech_prob': 0.44480687379837036}, {'id': 657, 'seek': 351452, 'start': 3522.68, 'end': 3534.08, 'text': ' What do others think?', 'tokens': [50772, 708, 360, 2357, 519, 30, 51342], 'temperature': 0.0, 'avg_logprob': -0.2678194216319493, 'compression_ratio': 1.40625, 'no_speech_prob': 0.44480687379837036}, {'id': 658, 'seek': 351452, 'start': 3534.08, 'end': 3540.68, 'text': ' What do you mean by type will be default for both the elfs?', 'tokens': [51342, 708, 360, 291, 914, 538, 2010, 486, 312, 7576, 337, 1293, 264, 806, 16883, 30, 51672], 'temperature': 0.0, 'avg_logprob': -0.2678194216319493, 'compression_ratio': 1.40625, 'no_speech_prob': 0.44480687379837036}, {'id': 659, 'seek': 354068, 'start': 3540.68, 'end': 3545.68, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50614], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 660, 'seek': 354068, 'start': 3545.68, 'end': 3552.7999999999997, 'text': ' So one thing you have to realize is see linker is dealing with object files.', 'tokens': [50614, 407, 472, 551, 291, 362, 281, 4325, 307, 536, 2113, 260, 307, 6260, 365, 2657, 7098, 13, 50970], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 661, 'seek': 354068, 'start': 3552.7999999999997, 'end': 3556.3999999999996, 'text': ' Linker is not looking at main.c and foo.c.', 'tokens': [50970, 8466, 260, 307, 406, 1237, 412, 2135, 13, 66, 293, 726, 78, 13, 66, 13, 51150], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 662, 'seek': 354068, 'start': 3556.3999999999996, 'end': 3561.44, 'text': ' So linker is dealing with the information which is present in the object file.', 'tokens': [51150, 407, 2113, 260, 307, 6260, 365, 264, 1589, 597, 307, 1974, 294, 264, 2657, 3991, 13, 51402], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 663, 'seek': 354068, 'start': 3561.44, 'end': 3563.04, 'text': ' Does that make sense?', 'tokens': [51402, 4402, 300, 652, 2020, 30, 51482], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 664, 'seek': 354068, 'start': 3563.04, 'end': 3566.2799999999997, 'text': ' Now let us look at this code.', 'tokens': [51482, 823, 718, 505, 574, 412, 341, 3089, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.1656039473298308, 'compression_ratio': 1.579268292682927, 'no_speech_prob': 0.008180331438779831}, {'id': 665, 'seek': 356628, 'start': 3566.28, 'end': 3568.92, 'text': ' Let us say I write this code in file 1.c.', 'tokens': [50364, 961, 505, 584, 286, 2464, 341, 3089, 294, 3991, 502, 13, 66, 13, 50496], 'temperature': 0.0, 'avg_logprob': -0.4067376641666188, 'compression_ratio': 0.8367346938775511, 'no_speech_prob': 0.9052484631538391}, {'id': 666, 'seek': 356892, 'start': 3568.92, 'end': 3591.56, 'text': ' Gcc dash c dash m32 file 1 dot.', 'tokens': [50364, 460, 1914, 8240, 269, 8240, 275, 11440, 3991, 502, 5893, 13, 51496], 'temperature': 0.0, 'avg_logprob': -0.6322564442952474, 'compression_ratio': 0.9393939393939394, 'no_speech_prob': 0.711843729019165}, {'id': 667, 'seek': 359156, 'start': 3591.7799999999997, 'end': 3608.44, 'text': ' Now let me read the symbol table.', 'tokens': [50375, 823, 718, 385, 1401, 264, 5986, 3199, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.3032693386077881, 'compression_ratio': 1.2380952380952381, 'no_speech_prob': 0.053215477615594864}, {'id': 668, 'seek': 359156, 'start': 3608.44, 'end': 3614.0, 'text': ' So it says that var is of some variable of size 4 bytes.', 'tokens': [51208, 407, 309, 1619, 300, 1374, 307, 295, 512, 7006, 295, 2744, 1017, 36088, 13, 51486], 'temperature': 0.0, 'avg_logprob': -0.3032693386077881, 'compression_ratio': 1.2380952380952381, 'no_speech_prob': 0.053215477615594864}, {'id': 669, 'seek': 359156, 'start': 3614.0, 'end': 3619.08, 'text': ' Does it say it is var which is integer?', 'tokens': [51486, 4402, 309, 584, 309, 307, 1374, 597, 307, 24922, 30, 51740], 'temperature': 0.0, 'avg_logprob': -0.3032693386077881, 'compression_ratio': 1.2380952380952381, 'no_speech_prob': 0.053215477615594864}, {'id': 670, 'seek': 361908, 'start': 3619.08, 'end': 3623.6, 'text': ' Does it say that?', 'tokens': [50364, 4402, 309, 584, 300, 30, 50590], 'temperature': 0.0, 'avg_logprob': -0.2655540583085041, 'compression_ratio': 1.264957264957265, 'no_speech_prob': 0.12532265484333038}, {'id': 671, 'seek': 361908, 'start': 3623.6, 'end': 3632.92, 'text': ' So does linker know that main.c is defining var to be integer?', 'tokens': [50590, 407, 775, 2113, 260, 458, 300, 2135, 13, 66, 307, 17827, 1374, 281, 312, 24922, 30, 51056], 'temperature': 0.0, 'avg_logprob': -0.2655540583085041, 'compression_ratio': 1.264957264957265, 'no_speech_prob': 0.12532265484333038}, {'id': 672, 'seek': 361908, 'start': 3632.92, 'end': 3633.92, 'text': ' No.', 'tokens': [51056, 883, 13, 51106], 'temperature': 0.0, 'avg_logprob': -0.2655540583085041, 'compression_ratio': 1.264957264957265, 'no_speech_prob': 0.12532265484333038}, {'id': 673, 'seek': 361908, 'start': 3633.92, 'end': 3643.68, 'text': ' Similarly, when it compiles foo does it know that var is float?', 'tokens': [51106, 13157, 11, 562, 309, 715, 4680, 726, 78, 775, 309, 458, 300, 1374, 307, 15706, 30, 51594], 'temperature': 0.0, 'avg_logprob': -0.2655540583085041, 'compression_ratio': 1.264957264957265, 'no_speech_prob': 0.12532265484333038}, {'id': 674, 'seek': 364368, 'start': 3643.68, 'end': 3654.2, 'text': ' So linker has no idea that there is var which is integer here and float here and to be able', 'tokens': [50364, 407, 2113, 260, 575, 572, 1558, 300, 456, 307, 1374, 597, 307, 24922, 510, 293, 15706, 510, 293, 281, 312, 1075, 50890], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 675, 'seek': 364368, 'start': 3654.2, 'end': 3655.2, 'text': ' to issue the error.', 'tokens': [50890, 281, 2734, 264, 6713, 13, 50940], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 676, 'seek': 364368, 'start': 3655.2, 'end': 3661.96, 'text': ' There is no way linker can issue that error.', 'tokens': [50940, 821, 307, 572, 636, 2113, 260, 393, 2734, 300, 6713, 13, 51278], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 677, 'seek': 364368, 'start': 3661.96, 'end': 3663.2799999999997, 'text': ' It is not even runtime error.', 'tokens': [51278, 467, 307, 406, 754, 34474, 6713, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 678, 'seek': 364368, 'start': 3663.2799999999997, 'end': 3670.08, 'text': ' For example, if you run this code var will actually hold whatever is the IEEE 5.0 32', 'tokens': [51344, 1171, 1365, 11, 498, 291, 1190, 341, 3089, 1374, 486, 767, 1797, 2035, 307, 264, 286, 7258, 36, 1025, 13, 15, 8858, 51684], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 679, 'seek': 364368, 'start': 3670.08, 'end': 3671.56, 'text': ' bit encoding.', 'tokens': [51684, 857, 43430, 13, 51758], 'temperature': 0.0, 'avg_logprob': -0.19126898983874954, 'compression_ratio': 1.5573770491803278, 'no_speech_prob': 0.11741500347852707}, {'id': 680, 'seek': 367156, 'start': 3671.56, 'end': 3673.52, 'text': ' So it is a logical error.', 'tokens': [50364, 407, 309, 307, 257, 14978, 6713, 13, 50462], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 681, 'seek': 367156, 'start': 3673.52, 'end': 3676.08, 'text': ' There is no crash or anything which will happen.', 'tokens': [50462, 821, 307, 572, 8252, 420, 1340, 597, 486, 1051, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 682, 'seek': 367156, 'start': 3676.08, 'end': 3681.16, 'text': ' 32 bits.', 'tokens': [50590, 8858, 9239, 13, 50844], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 683, 'seek': 367156, 'start': 3681.16, 'end': 3685.32, 'text': ' So var is simply saying print the 32 bit content.', 'tokens': [50844, 407, 1374, 307, 2935, 1566, 4482, 264, 8858, 857, 2701, 13, 51052], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 684, 'seek': 367156, 'start': 3685.32, 'end': 3686.56, 'text': ' Whatever that is.', 'tokens': [51052, 8541, 300, 307, 13, 51114], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 685, 'seek': 367156, 'start': 3686.56, 'end': 3692.68, 'text': ' And 5.0 has some representation in 32 bits in the floating point numbering system.', 'tokens': [51114, 400, 1025, 13, 15, 575, 512, 10290, 294, 8858, 9239, 294, 264, 12607, 935, 1230, 278, 1185, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 686, 'seek': 367156, 'start': 3692.68, 'end': 3699.7999999999997, 'text': ' It will simply print that number.', 'tokens': [51420, 467, 486, 2935, 4482, 300, 1230, 13, 51776], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 687, 'seek': 367156, 'start': 3699.7999999999997, 'end': 3700.7999999999997, 'text': ' Coming to that.', 'tokens': [51776, 12473, 281, 300, 13, 51826], 'temperature': 0.0, 'avg_logprob': -0.2813046850809237, 'compression_ratio': 1.5519125683060109, 'no_speech_prob': 0.5185031294822693}, {'id': 688, 'seek': 370080, 'start': 3700.8, 'end': 3705.32, 'text': ' Next question.', 'tokens': [50364, 3087, 1168, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 689, 'seek': 370080, 'start': 3705.32, 'end': 3709.36, 'text': ' So now I have int x which has size 4.', 'tokens': [50590, 407, 586, 286, 362, 560, 2031, 597, 575, 2744, 1017, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 690, 'seek': 370080, 'start': 3709.36, 'end': 3712.4, 'text': ' Here I define it to be double.', 'tokens': [50792, 1692, 286, 6964, 309, 281, 312, 3834, 13, 50944], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 691, 'seek': 370080, 'start': 3712.4, 'end': 3718.52, 'text': ' No, but can it issue error in this case?', 'tokens': [50944, 883, 11, 457, 393, 309, 2734, 6713, 294, 341, 1389, 30, 51250], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 692, 'seek': 370080, 'start': 3718.52, 'end': 3723.0800000000004, 'text': ' Does it have information to issue error?', 'tokens': [51250, 4402, 309, 362, 1589, 281, 2734, 6713, 30, 51478], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 693, 'seek': 370080, 'start': 3723.0800000000004, 'end': 3725.6600000000003, 'text': ' Size information is there.', 'tokens': [51478, 35818, 1589, 307, 456, 13, 51607], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 694, 'seek': 370080, 'start': 3725.6600000000003, 'end': 3728.6800000000003, 'text': ' So here it knows x is 4 bytes.', 'tokens': [51607, 407, 510, 309, 3255, 2031, 307, 1017, 36088, 13, 51758], 'temperature': 0.0, 'avg_logprob': -0.2382144659337863, 'compression_ratio': 1.457516339869281, 'no_speech_prob': 0.03018229268491268}, {'id': 695, 'seek': 372868, 'start': 3728.68, 'end': 3732.18, 'text': ' Here it knows it is x bytes, 8 bytes.', 'tokens': [50364, 1692, 309, 3255, 309, 307, 2031, 36088, 11, 1649, 36088, 13, 50539], 'temperature': 0.0, 'avg_logprob': -0.2903394265608354, 'compression_ratio': 1.2258064516129032, 'no_speech_prob': 0.04882682487368584}, {'id': 696, 'seek': 372868, 'start': 3732.18, 'end': 3733.96, 'text': ' So let us try that.', 'tokens': [50539, 407, 718, 505, 853, 300, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.2903394265608354, 'compression_ratio': 1.2258064516129032, 'no_speech_prob': 0.04882682487368584}, {'id': 697, 'seek': 372868, 'start': 3733.96, 'end': 3735.24, 'text': ' Let us try this.', 'tokens': [50628, 961, 505, 853, 341, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.2903394265608354, 'compression_ratio': 1.2258064516129032, 'no_speech_prob': 0.04882682487368584}, {'id': 698, 'seek': 372868, 'start': 3735.24, 'end': 3746.3199999999997, 'text': ' So I have int var 1 and let me print y.', 'tokens': [50692, 407, 286, 362, 560, 1374, 502, 293, 718, 385, 4482, 288, 13, 51246], 'temperature': 0.0, 'avg_logprob': -0.2903394265608354, 'compression_ratio': 1.2258064516129032, 'no_speech_prob': 0.04882682487368584}, {'id': 699, 'seek': 374632, 'start': 3746.32, 'end': 3762.7400000000002, 'text': ' Now here I define this to be x turned double of var.', 'tokens': [50364, 823, 510, 286, 6964, 341, 281, 312, 2031, 3574, 3834, 295, 1374, 13, 51185], 'temperature': 0.0, 'avg_logprob': -0.2044984203273967, 'compression_ratio': 1.4850746268656716, 'no_speech_prob': 0.016650713980197906}, {'id': 700, 'seek': 374632, 'start': 3762.7400000000002, 'end': 3765.6800000000003, 'text': ' Now var is equal to 5.0.', 'tokens': [51185, 823, 1374, 307, 2681, 281, 1025, 13, 15, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.2044984203273967, 'compression_ratio': 1.4850746268656716, 'no_speech_prob': 0.016650713980197906}, {'id': 701, 'seek': 374632, 'start': 3765.6800000000003, 'end': 3769.28, 'text': ' Now in this case we expect linker to give error.', 'tokens': [51332, 823, 294, 341, 1389, 321, 2066, 2113, 260, 281, 976, 6713, 13, 51512], 'temperature': 0.0, 'avg_logprob': -0.2044984203273967, 'compression_ratio': 1.4850746268656716, 'no_speech_prob': 0.016650713980197906}, {'id': 702, 'seek': 374632, 'start': 3769.28, 'end': 3773.1200000000003, 'text': ' Because it is defined to be double here and defined to be integer there.', 'tokens': [51512, 1436, 309, 307, 7642, 281, 312, 3834, 510, 293, 7642, 281, 312, 24922, 456, 13, 51704], 'temperature': 0.0, 'avg_logprob': -0.2044984203273967, 'compression_ratio': 1.4850746268656716, 'no_speech_prob': 0.016650713980197906}, {'id': 703, 'seek': 377312, 'start': 3773.12, 'end': 3777.24, 'text': ' There is size mismatch.', 'tokens': [50364, 821, 307, 2744, 23220, 852, 13, 50570], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 704, 'seek': 377312, 'start': 3777.24, 'end': 3783.92, 'text': ' File 1.c, file 2.c.', 'tokens': [50570, 26196, 502, 13, 66, 11, 3991, 568, 13, 66, 13, 50904], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 705, 'seek': 377312, 'start': 3783.92, 'end': 3785.5, 'text': " It didn't.", 'tokens': [50904, 467, 994, 380, 13, 50983], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 706, 'seek': 377312, 'start': 3785.5, 'end': 3788.74, 'text': " So linker didn't issue error for this case either.", 'tokens': [50983, 407, 2113, 260, 994, 380, 2734, 6713, 337, 341, 1389, 2139, 13, 51145], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 707, 'seek': 377312, 'start': 3788.74, 'end': 3792.14, 'text': ' And if we print, it printed something.', 'tokens': [51145, 400, 498, 321, 4482, 11, 309, 13567, 746, 13, 51315], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 708, 'seek': 377312, 'start': 3792.14, 'end': 3798.44, 'text': ' So what actually happened is y was also overwritten.', 'tokens': [51315, 407, 437, 767, 2011, 307, 288, 390, 611, 670, 26859, 13, 51630], 'temperature': 0.0, 'avg_logprob': -0.24638288671320135, 'compression_ratio': 1.3133333333333332, 'no_speech_prob': 0.575357973575592}, {'id': 709, 'seek': 379844, 'start': 3798.44, 'end': 3806.16, 'text': ' Because this statement wrote 8 bytes of data which ended up writing 4 bytes here and 4', 'tokens': [50364, 1436, 341, 5629, 4114, 1649, 36088, 295, 1412, 597, 4590, 493, 3579, 1017, 36088, 510, 293, 1017, 50750], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 710, 'seek': 379844, 'start': 3806.16, 'end': 3807.48, 'text': ' bytes here.', 'tokens': [50750, 36088, 510, 13, 50816], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 711, 'seek': 379844, 'start': 3807.48, 'end': 3810.4, 'text': ' So y was also overwritten.', 'tokens': [50816, 407, 288, 390, 611, 670, 26859, 13, 50962], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 712, 'seek': 379844, 'start': 3810.4, 'end': 3815.88, 'text': " So not only linker didn't catch the error, it also overwrote something which it was not", 'tokens': [50962, 407, 406, 787, 2113, 260, 994, 380, 3745, 264, 6713, 11, 309, 611, 670, 7449, 1370, 746, 597, 309, 390, 406, 51236], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 713, 'seek': 379844, 'start': 3815.88, 'end': 3817.96, 'text': ' intended to.', 'tokens': [51236, 10226, 281, 13, 51340], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 714, 'seek': 379844, 'start': 3817.96, 'end': 3824.68, 'text': " Now can you tell me why linker didn't catch it?", 'tokens': [51340, 823, 393, 291, 980, 385, 983, 2113, 260, 994, 380, 3745, 309, 30, 51676], 'temperature': 0.0, 'avg_logprob': -0.14877923329671225, 'compression_ratio': 1.5930232558139534, 'no_speech_prob': 0.2221159189939499}, {'id': 715, 'seek': 382468, 'start': 3824.68, 'end': 3828.8399999999997, 'text': ' Linker had the size information.', 'tokens': [50364, 8466, 260, 632, 264, 2744, 1589, 13, 50572], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 716, 'seek': 382468, 'start': 3828.8399999999997, 'end': 3834.56, 'text': ' No, so let us look at it.', 'tokens': [50572, 883, 11, 370, 718, 505, 574, 412, 309, 13, 50858], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 717, 'seek': 382468, 'start': 3834.56, 'end': 3839.3599999999997, 'text': ' So best way to answer these questions is examine object files.', 'tokens': [50858, 407, 1151, 636, 281, 1867, 613, 1651, 307, 17496, 2657, 7098, 13, 51098], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 718, 'seek': 382468, 'start': 3839.3599999999997, 'end': 3840.8799999999997, 'text': ' So let us look at it.', 'tokens': [51098, 407, 718, 505, 574, 412, 309, 13, 51174], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 719, 'seek': 382468, 'start': 3840.8799999999997, 'end': 3848.24, 'text': " So I will do GC's.", 'tokens': [51174, 407, 286, 486, 360, 29435, 311, 13, 51542], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 720, 'seek': 382468, 'start': 3848.24, 'end': 3852.8399999999997, 'text': ' So let us look at the symbol table of file 1.o.', 'tokens': [51542, 407, 718, 505, 574, 412, 264, 5986, 3199, 295, 3991, 502, 13, 78, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.28980936322893414, 'compression_ratio': 1.5107913669064748, 'no_speech_prob': 0.6642765402793884}, {'id': 721, 'seek': 385284, 'start': 3852.84, 'end': 3860.1000000000004, 'text': ' So it says var is a 4 byte variable and y is a 4 byte variable.', 'tokens': [50364, 407, 309, 1619, 1374, 307, 257, 1017, 40846, 7006, 293, 288, 307, 257, 1017, 40846, 7006, 13, 50727], 'temperature': 0.0, 'avg_logprob': -0.21217330932617187, 'compression_ratio': 1.4224137931034482, 'no_speech_prob': 0.1439213901758194}, {'id': 722, 'seek': 385284, 'start': 3860.1000000000004, 'end': 3865.6800000000003, 'text': ' So it has the information that both are 4 4 bytes each.', 'tokens': [50727, 407, 309, 575, 264, 1589, 300, 1293, 366, 1017, 1017, 36088, 1184, 13, 51006], 'temperature': 0.0, 'avg_logprob': -0.21217330932617187, 'compression_ratio': 1.4224137931034482, 'no_speech_prob': 0.1439213901758194}, {'id': 723, 'seek': 385284, 'start': 3865.6800000000003, 'end': 3871.2400000000002, 'text': ' Now let us look at the same thing for file 2.', 'tokens': [51006, 823, 718, 505, 574, 412, 264, 912, 551, 337, 3991, 568, 13, 51284], 'temperature': 0.0, 'avg_logprob': -0.21217330932617187, 'compression_ratio': 1.4224137931034482, 'no_speech_prob': 0.1439213901758194}, {'id': 724, 'seek': 387124, 'start': 3871.24, 'end': 3884.3199999999997, 'text': ' So file 2 says var has size 0.', 'tokens': [50364, 407, 3991, 568, 1619, 1374, 575, 2744, 1958, 13, 51018], 'temperature': 0.0, 'avg_logprob': -0.1731645007466161, 'compression_ratio': 1.2190476190476192, 'no_speech_prob': 0.05333678424358368}, {'id': 725, 'seek': 387124, 'start': 3884.3199999999997, 'end': 3889.56, 'text': " It didn't say it has size 8.", 'tokens': [51018, 467, 994, 380, 584, 309, 575, 2744, 1649, 13, 51280], 'temperature': 0.0, 'avg_logprob': -0.1731645007466161, 'compression_ratio': 1.2190476190476192, 'no_speech_prob': 0.05333678424358368}, {'id': 726, 'seek': 387124, 'start': 3889.56, 'end': 3897.2, 'text': ' And then linker says that whatever is 0 could be 4 or 8 or whatever.', 'tokens': [51280, 400, 550, 2113, 260, 1619, 300, 2035, 307, 1958, 727, 312, 1017, 420, 1649, 420, 2035, 13, 51662], 'temperature': 0.0, 'avg_logprob': -0.1731645007466161, 'compression_ratio': 1.2190476190476192, 'no_speech_prob': 0.05333678424358368}, {'id': 727, 'seek': 389720, 'start': 3897.2, 'end': 3907.56, 'text': " So the assembler produced elf actually didn't hold the information that var is 8 byte value", 'tokens': [50364, 407, 264, 8438, 1918, 7126, 35565, 767, 994, 380, 1797, 264, 1589, 300, 1374, 307, 1649, 40846, 2158, 50882], 'temperature': 0.0, 'avg_logprob': -0.15754972185407365, 'compression_ratio': 1.4675324675324675, 'no_speech_prob': 0.038441870361566544}, {'id': 728, 'seek': 389720, 'start': 3907.56, 'end': 3910.08, 'text': ' in this program.', 'tokens': [50882, 294, 341, 1461, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.15754972185407365, 'compression_ratio': 1.4675324675324675, 'no_speech_prob': 0.038441870361566544}, {'id': 729, 'seek': 389720, 'start': 3910.08, 'end': 3914.48, 'text': ' Although it was extern double.', 'tokens': [51008, 5780, 309, 390, 30360, 3834, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.15754972185407365, 'compression_ratio': 1.4675324675324675, 'no_speech_prob': 0.038441870361566544}, {'id': 730, 'seek': 389720, 'start': 3914.48, 'end': 3920.2799999999997, 'text': " Now it's an exercise for you to figure out why assembler didn't store this information", 'tokens': [51228, 823, 309, 311, 364, 5380, 337, 291, 281, 2573, 484, 983, 8438, 1918, 994, 380, 3531, 341, 1589, 51518], 'temperature': 0.0, 'avg_logprob': -0.15754972185407365, 'compression_ratio': 1.4675324675324675, 'no_speech_prob': 0.038441870361566544}, {'id': 731, 'seek': 392028, 'start': 3920.28, 'end': 3928.28, 'text': ' even when it had that information.', 'tokens': [50364, 754, 562, 309, 632, 300, 1589, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.18888689041137696, 'compression_ratio': 1.463235294117647, 'no_speech_prob': 0.051796041429042816}, {'id': 732, 'seek': 392028, 'start': 3928.28, 'end': 3933.1600000000003, 'text': ' Now an interesting thing I will show something more interesting.', 'tokens': [50764, 823, 364, 1880, 551, 286, 486, 855, 746, 544, 1880, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.18888689041137696, 'compression_ratio': 1.463235294117647, 'no_speech_prob': 0.051796041429042816}, {'id': 733, 'seek': 392028, 'start': 3933.1600000000003, 'end': 3937.5600000000004, 'text': ' So here I simply said var is actually a variable.', 'tokens': [51008, 407, 510, 286, 2935, 848, 1374, 307, 767, 257, 7006, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.18888689041137696, 'compression_ratio': 1.463235294117647, 'no_speech_prob': 0.051796041429042816}, {'id': 734, 'seek': 392028, 'start': 3937.5600000000004, 'end': 3941.76, 'text': ' I could be more evil and say something like this.', 'tokens': [51228, 286, 727, 312, 544, 6724, 293, 584, 746, 411, 341, 13, 51438], 'temperature': 0.0, 'avg_logprob': -0.18888689041137696, 'compression_ratio': 1.463235294117647, 'no_speech_prob': 0.051796041429042816}, {'id': 735, 'seek': 394176, 'start': 3941.76, 'end': 3949.28, 'text': ' So var is a function which is of type void.', 'tokens': [50364, 407, 1374, 307, 257, 2445, 597, 307, 295, 2010, 22009, 13, 50740], 'temperature': 0.0, 'avg_logprob': -0.23830043352567232, 'compression_ratio': 1.3305785123966942, 'no_speech_prob': 0.29400038719177246}, {'id': 736, 'seek': 394176, 'start': 3949.28, 'end': 3957.28, 'text': ' And I will call that function.', 'tokens': [50740, 400, 286, 486, 818, 300, 2445, 13, 51140], 'temperature': 0.0, 'avg_logprob': -0.23830043352567232, 'compression_ratio': 1.3305785123966942, 'no_speech_prob': 0.29400038719177246}, {'id': 737, 'seek': 394176, 'start': 3957.28, 'end': 3961.98, 'text': ' Now let us look at it.', 'tokens': [51140, 823, 718, 505, 574, 412, 309, 13, 51375], 'temperature': 0.0, 'avg_logprob': -0.23830043352567232, 'compression_ratio': 1.3305785123966942, 'no_speech_prob': 0.29400038719177246}, {'id': 738, 'seek': 394176, 'start': 3961.98, 'end': 3968.6800000000003, 'text': ' So I will now link file 1.o which defined var to be a variable.', 'tokens': [51375, 407, 286, 486, 586, 2113, 3991, 502, 13, 78, 597, 7642, 1374, 281, 312, 257, 7006, 13, 51710], 'temperature': 0.0, 'avg_logprob': -0.23830043352567232, 'compression_ratio': 1.3305785123966942, 'no_speech_prob': 0.29400038719177246}, {'id': 739, 'seek': 396868, 'start': 3968.68, 'end': 3978.96, 'text': ' And file 2.o which defined variable to be a function.', 'tokens': [50364, 400, 3991, 568, 13, 78, 597, 7642, 7006, 281, 312, 257, 2445, 13, 50878], 'temperature': 0.0, 'avg_logprob': -0.20026016235351562, 'compression_ratio': 1.4303797468354431, 'no_speech_prob': 0.09238056093454361}, {'id': 740, 'seek': 396868, 'start': 3978.96, 'end': 3981.8799999999997, 'text': ' Linker still happily linked things together.', 'tokens': [50878, 8466, 260, 920, 19909, 9408, 721, 1214, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.20026016235351562, 'compression_ratio': 1.4303797468354431, 'no_speech_prob': 0.09238056093454361}, {'id': 741, 'seek': 396868, 'start': 3981.8799999999997, 'end': 3986.48, 'text': " So linker says var variable var function I don't care.", 'tokens': [51024, 407, 2113, 260, 1619, 1374, 7006, 1374, 2445, 286, 500, 380, 1127, 13, 51254], 'temperature': 0.0, 'avg_logprob': -0.20026016235351562, 'compression_ratio': 1.4303797468354431, 'no_speech_prob': 0.09238056093454361}, {'id': 742, 'seek': 396868, 'start': 3986.48, 'end': 3988.5, 'text': ' I will just link them.', 'tokens': [51254, 286, 486, 445, 2113, 552, 13, 51355], 'temperature': 0.0, 'avg_logprob': -0.20026016235351562, 'compression_ratio': 1.4303797468354431, 'no_speech_prob': 0.09238056093454361}, {'id': 743, 'seek': 396868, 'start': 3988.5, 'end': 3992.08, 'text': ' And then when I execute I get segmentation fault.', 'tokens': [51355, 400, 550, 562, 286, 14483, 286, 483, 9469, 399, 7441, 13, 51534], 'temperature': 0.0, 'avg_logprob': -0.20026016235351562, 'compression_ratio': 1.4303797468354431, 'no_speech_prob': 0.09238056093454361}, {'id': 744, 'seek': 399208, 'start': 3992.92, 'end': 4003.52, 'text': ' Segmentation fault is because when I start executing this I will jump into the data segment.', 'tokens': [50406, 1100, 10433, 399, 7441, 307, 570, 562, 286, 722, 32368, 341, 286, 486, 3012, 666, 264, 1412, 9469, 13, 50936], 'temperature': 0.0, 'avg_logprob': -0.2817201199738876, 'compression_ratio': 1.0952380952380953, 'no_speech_prob': 0.5456774234771729}, {'id': 745, 'seek': 400352, 'start': 4003.52, 'end': 4020.52, 'text': ' And if you look at the data segment.', 'tokens': [50364, 400, 498, 291, 574, 412, 264, 1412, 9469, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.24499304294586183, 'compression_ratio': 1.3711340206185567, 'no_speech_prob': 0.0025462941266596317}, {'id': 746, 'seek': 400352, 'start': 4020.52, 'end': 4024.78, 'text': " If you look at the data segment it doesn't have execute permission.", 'tokens': [51214, 759, 291, 574, 412, 264, 1412, 9469, 309, 1177, 380, 362, 14483, 11226, 13, 51427], 'temperature': 0.0, 'avg_logprob': -0.24499304294586183, 'compression_ratio': 1.3711340206185567, 'no_speech_prob': 0.0025462941266596317}, {'id': 747, 'seek': 400352, 'start': 4024.78, 'end': 4029.84, 'text': " That's why it's set faulted.", 'tokens': [51427, 663, 311, 983, 309, 311, 992, 7441, 292, 13, 51680], 'temperature': 0.0, 'avg_logprob': -0.24499304294586183, 'compression_ratio': 1.3711340206185567, 'no_speech_prob': 0.0025462941266596317}, {'id': 748, 'seek': 402984, 'start': 4029.84, 'end': 4034.8, 'text': ' So linker is really lazy in figuring out what matches with what.', 'tokens': [50364, 407, 2113, 260, 307, 534, 14847, 294, 15213, 484, 437, 10676, 365, 437, 13, 50612], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}, {'id': 749, 'seek': 402984, 'start': 4034.8, 'end': 4036.6800000000003, 'text': ' It simply looks name.', 'tokens': [50612, 467, 2935, 1542, 1315, 13, 50706], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}, {'id': 750, 'seek': 402984, 'start': 4036.6800000000003, 'end': 4038.56, 'text': ' Okay var var.', 'tokens': [50706, 1033, 1374, 1374, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}, {'id': 751, 'seek': 402984, 'start': 4038.56, 'end': 4041.86, 'text': ' Does not do any other things.', 'tokens': [50800, 4402, 406, 360, 604, 661, 721, 13, 50965], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}, {'id': 752, 'seek': 402984, 'start': 4041.86, 'end': 4046.32, 'text': " And it's your exercise to figure out why for the functions it couldn't do it.", 'tokens': [50965, 400, 309, 311, 428, 5380, 281, 2573, 484, 983, 337, 264, 6828, 309, 2809, 380, 360, 309, 13, 51188], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}, {'id': 753, 'seek': 402984, 'start': 4046.32, 'end': 4050.56, 'text': ' And why for the external variable it stored the size as 0.', 'tokens': [51188, 400, 983, 337, 264, 8320, 7006, 309, 12187, 264, 2744, 382, 1958, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.26477496688430374, 'compression_ratio': 1.467032967032967, 'no_speech_prob': 0.45122018456459045}]