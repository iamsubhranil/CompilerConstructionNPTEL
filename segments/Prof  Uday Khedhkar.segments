[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 7.72, 'text': ' Good morning to all of you.', 'tokens': [50364, 2205, 2446, 281, 439, 295, 291, 13, 50750], 'temperature': 0.0, 'avg_logprob': -0.15043286579411205, 'compression_ratio': 1.6443298969072164, 'no_speech_prob': 0.03948894515633583}, {'id': 1, 'seek': 0, 'start': 7.72, 'end': 10.200000000000001, 'text': ' So this is an optimization of virtual function calls.', 'tokens': [50750, 407, 341, 307, 364, 19618, 295, 6374, 2445, 5498, 13, 50874], 'temperature': 0.0, 'avg_logprob': -0.15043286579411205, 'compression_ratio': 1.6443298969072164, 'no_speech_prob': 0.03948894515633583}, {'id': 2, 'seek': 0, 'start': 10.200000000000001, 'end': 14.72, 'text': ' So I am really not going to explain how the optimization is done, but what I am trying', 'tokens': [50874, 407, 286, 669, 534, 406, 516, 281, 2903, 577, 264, 19618, 307, 1096, 11, 457, 437, 286, 669, 1382, 51100], 'temperature': 0.0, 'avg_logprob': -0.15043286579411205, 'compression_ratio': 1.6443298969072164, 'no_speech_prob': 0.03948894515633583}, {'id': 3, 'seek': 0, 'start': 14.72, 'end': 18.32, 'text': ' to do is I am trying to explain what are the issues here.', 'tokens': [51100, 281, 360, 307, 286, 669, 1382, 281, 2903, 437, 366, 264, 2663, 510, 13, 51280], 'temperature': 0.0, 'avg_logprob': -0.15043286579411205, 'compression_ratio': 1.6443298969072164, 'no_speech_prob': 0.03948894515633583}, {'id': 4, 'seek': 0, 'start': 18.32, 'end': 27.32, 'text': ' So we will begin by looking at C++ inheritance, how the data is stored and in particular how', 'tokens': [51280, 407, 321, 486, 1841, 538, 1237, 412, 383, 25472, 32122, 11, 577, 264, 1412, 307, 12187, 293, 294, 1729, 577, 51730], 'temperature': 0.0, 'avg_logprob': -0.15043286579411205, 'compression_ratio': 1.6443298969072164, 'no_speech_prob': 0.03948894515633583}, {'id': 5, 'seek': 2732, 'start': 27.32, 'end': 33.4, 'text': ' does a compiler deal with virtual functions, how does a compiler handle virtual functions', 'tokens': [50364, 775, 257, 31958, 2028, 365, 6374, 6828, 11, 577, 775, 257, 31958, 4813, 6374, 6828, 50668], 'temperature': 0.0, 'avg_logprob': -0.1667631222651555, 'compression_ratio': 1.765, 'no_speech_prob': 0.08030687272548676}, {'id': 6, 'seek': 2732, 'start': 33.4, 'end': 40.2, 'text': ' and then we will just look at what optimizations can be done although it is beyond the scope', 'tokens': [50668, 293, 550, 321, 486, 445, 574, 412, 437, 5028, 14455, 393, 312, 1096, 4878, 309, 307, 4399, 264, 11923, 51008], 'temperature': 0.0, 'avg_logprob': -0.1667631222651555, 'compression_ratio': 1.765, 'no_speech_prob': 0.08030687272548676}, {'id': 7, 'seek': 2732, 'start': 40.2, 'end': 48.480000000000004, 'text': ' of this lecture to get into the details of how these optimizations are done.', 'tokens': [51008, 295, 341, 7991, 281, 483, 666, 264, 4365, 295, 577, 613, 5028, 14455, 366, 1096, 13, 51422], 'temperature': 0.0, 'avg_logprob': -0.1667631222651555, 'compression_ratio': 1.765, 'no_speech_prob': 0.08030687272548676}, {'id': 8, 'seek': 2732, 'start': 48.480000000000004, 'end': 53.36, 'text': ' So we are going to look at internal representation of a class, we will talk about translating', 'tokens': [51422, 407, 321, 366, 516, 281, 574, 412, 6920, 10290, 295, 257, 1508, 11, 321, 486, 751, 466, 35030, 51666], 'temperature': 0.0, 'avg_logprob': -0.1667631222651555, 'compression_ratio': 1.765, 'no_speech_prob': 0.08030687272548676}, {'id': 9, 'seek': 5336, 'start': 53.36, 'end': 60.44, 'text': ' virtual function calls and we will talk about what the proposed optimization is.', 'tokens': [50364, 6374, 2445, 5498, 293, 321, 486, 751, 466, 437, 264, 10348, 19618, 307, 13, 50718], 'temperature': 0.0, 'avg_logprob': -0.1756392306968814, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.3272970914840698}, {'id': 10, 'seek': 5336, 'start': 60.44, 'end': 68.44, 'text': ' So here is a certain class, it has some members, public members int y and z and there is a', 'tokens': [50718, 407, 510, 307, 257, 1629, 1508, 11, 309, 575, 512, 2679, 11, 1908, 2679, 560, 288, 293, 710, 293, 456, 307, 257, 51118], 'temperature': 0.0, 'avg_logprob': -0.1756392306968814, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.3272970914840698}, {'id': 11, 'seek': 5336, 'start': 68.44, 'end': 76.03999999999999, 'text': ' private data member x and it has a private function f2 which essentially increments its', 'tokens': [51118, 4551, 1412, 4006, 2031, 293, 309, 575, 257, 4551, 2445, 283, 17, 597, 4476, 1946, 1117, 1080, 51498], 'temperature': 0.0, 'avg_logprob': -0.1756392306968814, 'compression_ratio': 1.5987654320987654, 'no_speech_prob': 0.3272970914840698}, {'id': 12, 'seek': 7604, 'start': 76.24000000000001, 'end': 84.44000000000001, 'text': ' argument and f1 calls f2 with its argument and multiplies it by 2.', 'tokens': [50374, 6770, 293, 283, 16, 5498, 283, 17, 365, 1080, 6770, 293, 12788, 530, 309, 538, 568, 13, 50784], 'temperature': 0.0, 'avg_logprob': -0.13240521128584698, 'compression_ratio': 1.7461139896373057, 'no_speech_prob': 0.04739253968000412}, {'id': 13, 'seek': 7604, 'start': 84.44000000000001, 'end': 91.0, 'text': ' So I am just trying to show what exactly happens internally, what does a compiler do with this', 'tokens': [50784, 407, 286, 669, 445, 1382, 281, 855, 437, 2293, 2314, 19501, 11, 437, 775, 257, 31958, 360, 365, 341, 51112], 'temperature': 0.0, 'avg_logprob': -0.13240521128584698, 'compression_ratio': 1.7461139896373057, 'no_speech_prob': 0.04739253968000412}, {'id': 14, 'seek': 7604, 'start': 91.0, 'end': 98.44000000000001, 'text': ' kind of a code with something being private, something being public, something being data,', 'tokens': [51112, 733, 295, 257, 3089, 365, 746, 885, 4551, 11, 746, 885, 1908, 11, 746, 885, 1412, 11, 51484], 'temperature': 0.0, 'avg_logprob': -0.13240521128584698, 'compression_ratio': 1.7461139896373057, 'no_speech_prob': 0.04739253968000412}, {'id': 15, 'seek': 7604, 'start': 98.44000000000001, 'end': 99.84, 'text': ' something being function.', 'tokens': [51484, 746, 885, 2445, 13, 51554], 'temperature': 0.0, 'avg_logprob': -0.13240521128584698, 'compression_ratio': 1.7461139896373057, 'no_speech_prob': 0.04739253968000412}, {'id': 16, 'seek': 7604, 'start': 99.84, 'end': 103.34, 'text': ' So we want to look at exactly what happens under the hood.', 'tokens': [51554, 407, 321, 528, 281, 574, 412, 2293, 437, 2314, 833, 264, 13376, 13, 51729], 'temperature': 0.0, 'avg_logprob': -0.13240521128584698, 'compression_ratio': 1.7461139896373057, 'no_speech_prob': 0.04739253968000412}, {'id': 17, 'seek': 10334, 'start': 103.34, 'end': 109.46000000000001, 'text': ' So we have data memory and code memory, we saw the organization yesterday, there is a', 'tokens': [50364, 407, 321, 362, 1412, 4675, 293, 3089, 4675, 11, 321, 1866, 264, 4475, 5186, 11, 456, 307, 257, 50670], 'temperature': 0.0, 'avg_logprob': -0.15672786584061182, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.020318176597356796}, {'id': 18, 'seek': 10334, 'start': 109.46000000000001, 'end': 113.94, 'text': ' code memory, there is a data memory and data memory, we have static stack and heap.', 'tokens': [50670, 3089, 4675, 11, 456, 307, 257, 1412, 4675, 293, 1412, 4675, 11, 321, 362, 13437, 8630, 293, 33591, 13, 50894], 'temperature': 0.0, 'avg_logprob': -0.15672786584061182, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.020318176597356796}, {'id': 19, 'seek': 10334, 'start': 113.94, 'end': 118.9, 'text': ' So here we are not making that distinction but we are basically looking at the data and', 'tokens': [50894, 407, 510, 321, 366, 406, 1455, 300, 16844, 457, 321, 366, 1936, 1237, 412, 264, 1412, 293, 51142], 'temperature': 0.0, 'avg_logprob': -0.15672786584061182, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.020318176597356796}, {'id': 20, 'seek': 10334, 'start': 118.9, 'end': 120.22, 'text': ' code memory.', 'tokens': [51142, 3089, 4675, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.15672786584061182, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.020318176597356796}, {'id': 21, 'seek': 10334, 'start': 120.22, 'end': 131.5, 'text': ' So we have two variables declared, small a of the class a and b again of the class a', 'tokens': [51208, 407, 321, 362, 732, 9102, 15489, 11, 1359, 257, 295, 264, 1508, 257, 293, 272, 797, 295, 264, 1508, 257, 51772], 'temperature': 0.0, 'avg_logprob': -0.15672786584061182, 'compression_ratio': 1.9189189189189189, 'no_speech_prob': 0.020318176597356796}, {'id': 22, 'seek': 13150, 'start': 132.34, 'end': 138.9, 'text': ' The important point is in the code memory we will have this function a of f1 and in', 'tokens': [50406, 440, 1021, 935, 307, 294, 264, 3089, 4675, 321, 486, 362, 341, 2445, 257, 295, 283, 16, 293, 294, 50734], 'temperature': 0.0, 'avg_logprob': -0.15452917961225118, 'compression_ratio': 2.1134751773049647, 'no_speech_prob': 0.048567138612270355}, {'id': 23, 'seek': 13150, 'start': 138.9, 'end': 142.58, 'text': ' the data memory we will have object a and object b.', 'tokens': [50734, 264, 1412, 4675, 321, 486, 362, 2657, 257, 293, 2657, 272, 13, 50918], 'temperature': 0.0, 'avg_logprob': -0.15452917961225118, 'compression_ratio': 2.1134751773049647, 'no_speech_prob': 0.048567138612270355}, {'id': 24, 'seek': 13150, 'start': 142.58, 'end': 150.2, 'text': ' So the data members and the function members get distributed in the memory, the function', 'tokens': [50918, 407, 264, 1412, 2679, 293, 264, 2445, 2679, 483, 12631, 294, 264, 4675, 11, 264, 2445, 51299], 'temperature': 0.0, 'avg_logprob': -0.15452917961225118, 'compression_ratio': 2.1134751773049647, 'no_speech_prob': 0.048567138612270355}, {'id': 25, 'seek': 13150, 'start': 150.2, 'end': 155.72, 'text': ' members go in the code memory and the data members go in the data memory.', 'tokens': [51299, 2679, 352, 294, 264, 3089, 4675, 293, 264, 1412, 2679, 352, 294, 264, 1412, 4675, 13, 51575], 'temperature': 0.0, 'avg_logprob': -0.15452917961225118, 'compression_ratio': 2.1134751773049647, 'no_speech_prob': 0.048567138612270355}, {'id': 26, 'seek': 15572, 'start': 155.72, 'end': 161.88, 'text': ' So in the data memory we have x, y, z, note that in the data memory there is no tag of', 'tokens': [50364, 407, 294, 264, 1412, 4675, 321, 362, 2031, 11, 288, 11, 710, 11, 3637, 300, 294, 264, 1412, 4675, 456, 307, 572, 6162, 295, 50672], 'temperature': 0.0, 'avg_logprob': -0.1371109034564044, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.03253091871738434}, {'id': 27, 'seek': 15572, 'start': 161.88, 'end': 165.8, 'text': ' which one is private and which one is public.', 'tokens': [50672, 597, 472, 307, 4551, 293, 597, 472, 307, 1908, 13, 50868], 'temperature': 0.0, 'avg_logprob': -0.1371109034564044, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.03253091871738434}, {'id': 28, 'seek': 15572, 'start': 165.8, 'end': 172.92, 'text': ' All this is a matter of scope resolution during parsing and type checking.', 'tokens': [50868, 1057, 341, 307, 257, 1871, 295, 11923, 8669, 1830, 21156, 278, 293, 2010, 8568, 13, 51224], 'temperature': 0.0, 'avg_logprob': -0.1371109034564044, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.03253091871738434}, {'id': 29, 'seek': 15572, 'start': 172.92, 'end': 178.76, 'text': ' So when this code is translated there is no notion of private or public.', 'tokens': [51224, 407, 562, 341, 3089, 307, 16805, 456, 307, 572, 10710, 295, 4551, 420, 1908, 13, 51516], 'temperature': 0.0, 'avg_logprob': -0.1371109034564044, 'compression_ratio': 1.6568047337278107, 'no_speech_prob': 0.03253091871738434}, {'id': 30, 'seek': 17876, 'start': 178.76, 'end': 184.95999999999998, 'text': ' So we have x, y, z for object a, x, y, z for object b, both of them are for the same', 'tokens': [50364, 407, 321, 362, 2031, 11, 288, 11, 710, 337, 2657, 257, 11, 2031, 11, 288, 11, 710, 337, 2657, 272, 11, 1293, 295, 552, 366, 337, 264, 912, 50674], 'temperature': 0.0, 'avg_logprob': -0.10487886377283044, 'compression_ratio': 1.9264705882352942, 'no_speech_prob': 0.020319700241088867}, {'id': 31, 'seek': 17876, 'start': 184.95999999999998, 'end': 193.92, 'text': ' class and we have this function, we have this function f1, we have this function f2.', 'tokens': [50674, 1508, 293, 321, 362, 341, 2445, 11, 321, 362, 341, 2445, 283, 16, 11, 321, 362, 341, 2445, 283, 17, 13, 51122], 'temperature': 0.0, 'avg_logprob': -0.10487886377283044, 'compression_ratio': 1.9264705882352942, 'no_speech_prob': 0.020319700241088867}, {'id': 32, 'seek': 17876, 'start': 193.92, 'end': 202.2, 'text': ' So every function with n parameters is translated to a function with n plus 1 parameters and', 'tokens': [51122, 407, 633, 2445, 365, 297, 9834, 307, 16805, 281, 257, 2445, 365, 297, 1804, 502, 9834, 293, 51536], 'temperature': 0.0, 'avg_logprob': -0.10487886377283044, 'compression_ratio': 1.9264705882352942, 'no_speech_prob': 0.020319700241088867}, {'id': 33, 'seek': 20220, 'start': 202.23999999999998, 'end': 209.23999999999998, 'text': ' the first parameter always happens to be what we call as this pointer which is a pointer', 'tokens': [50366, 264, 700, 13075, 1009, 2314, 281, 312, 437, 321, 818, 382, 341, 23918, 597, 307, 257, 23918, 50716], 'temperature': 0.0, 'avg_logprob': -0.1807569869577068, 'compression_ratio': 1.612565445026178, 'no_speech_prob': 0.01449545193463564}, {'id': 34, 'seek': 20220, 'start': 210.67999999999998, 'end': 217.67999999999998, 'text': ' to the receiver object, the object on which the certain function is being called.', 'tokens': [50788, 281, 264, 20086, 2657, 11, 264, 2657, 322, 597, 264, 1629, 2445, 307, 885, 1219, 13, 51138], 'temperature': 0.0, 'avg_logprob': -0.1807569869577068, 'compression_ratio': 1.612565445026178, 'no_speech_prob': 0.01449545193463564}, {'id': 35, 'seek': 20220, 'start': 219.51999999999998, 'end': 223.39999999999998, 'text': ' So effectively this is nothing but a C program.', 'tokens': [51230, 407, 8659, 341, 307, 1825, 457, 257, 383, 1461, 13, 51424], 'temperature': 0.0, 'avg_logprob': -0.1807569869577068, 'compression_ratio': 1.612565445026178, 'no_speech_prob': 0.01449545193463564}, {'id': 36, 'seek': 20220, 'start': 223.39999999999998, 'end': 230.39999999999998, 'text': ' So C++ is at an intuitive level is translated into a C program and that is exactly how it', 'tokens': [51424, 407, 383, 25472, 307, 412, 364, 21769, 1496, 307, 16805, 666, 257, 383, 1461, 293, 300, 307, 2293, 577, 309, 51774], 'temperature': 0.0, 'avg_logprob': -0.1807569869577068, 'compression_ratio': 1.612565445026178, 'no_speech_prob': 0.01449545193463564}, {'id': 37, 'seek': 23040, 'start': 231.28, 'end': 237.92000000000002, 'text': ' used to be earlier, now it is not so but at an abstract level you can see a C++ program', 'tokens': [50408, 1143, 281, 312, 3071, 11, 586, 309, 307, 406, 370, 457, 412, 364, 12649, 1496, 291, 393, 536, 257, 383, 25472, 1461, 50740], 'temperature': 0.0, 'avg_logprob': -0.17305685834186832, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0012832770589739084}, {'id': 38, 'seek': 23040, 'start': 237.92000000000002, 'end': 242.52, 'text': ' as a C program with a clever use of pointers.', 'tokens': [50740, 382, 257, 383, 1461, 365, 257, 13494, 764, 295, 44548, 13, 50970], 'temperature': 0.0, 'avg_logprob': -0.17305685834186832, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0012832770589739084}, {'id': 39, 'seek': 23040, 'start': 242.52, 'end': 249.52, 'text': ' So we have this which is the object, pointer to the object.', 'tokens': [50970, 407, 321, 362, 341, 597, 307, 264, 2657, 11, 23918, 281, 264, 2657, 13, 51320], 'temperature': 0.0, 'avg_logprob': -0.17305685834186832, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0012832770589739084}, {'id': 40, 'seek': 23040, 'start': 249.96, 'end': 256.96000000000004, 'text': ' So when this function says x is equal to something is going to translate it as this arrow x equal', 'tokens': [51342, 407, 562, 341, 2445, 1619, 2031, 307, 2681, 281, 746, 307, 516, 281, 13799, 309, 382, 341, 11610, 2031, 2681, 51692], 'temperature': 0.0, 'avg_logprob': -0.17305685834186832, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0012832770589739084}, {'id': 41, 'seek': 23040, 'start': 256.96000000000004, 'end': 258.64, 'text': ' to something.', 'tokens': [51692, 281, 746, 13, 51776], 'temperature': 0.0, 'avg_logprob': -0.17305685834186832, 'compression_ratio': 1.6397849462365592, 'no_speech_prob': 0.0012832770589739084}, {'id': 42, 'seek': 25864, 'start': 258.64, 'end': 263.88, 'text': ' So effectively this function it says return i that is a parameter so it is not an object.', 'tokens': [50364, 407, 8659, 341, 2445, 309, 1619, 2736, 741, 300, 307, 257, 13075, 370, 309, 307, 406, 364, 2657, 13, 50626], 'temperature': 0.0, 'avg_logprob': -0.2500470638275146, 'compression_ratio': 1.6914285714285715, 'no_speech_prob': 0.0006665785331279039}, {'id': 43, 'seek': 25864, 'start': 263.88, 'end': 268.88, 'text': ' So effectively this function ignores this argument.', 'tokens': [50626, 407, 8659, 341, 2445, 5335, 2706, 341, 6770, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.2500470638275146, 'compression_ratio': 1.6914285714285715, 'no_speech_prob': 0.0006665785331279039}, {'id': 44, 'seek': 25864, 'start': 268.88, 'end': 271.88, 'text': ' So this is the whole point.', 'tokens': [50876, 407, 341, 307, 264, 1379, 935, 13, 51026], 'temperature': 0.0, 'avg_logprob': -0.2500470638275146, 'compression_ratio': 1.6914285714285715, 'no_speech_prob': 0.0006665785331279039}, {'id': 45, 'seek': 25864, 'start': 271.88, 'end': 276.64, 'text': ' Now let us see how execution happens.', 'tokens': [51026, 823, 718, 505, 536, 577, 15058, 2314, 13, 51264], 'temperature': 0.0, 'avg_logprob': -0.2500470638275146, 'compression_ratio': 1.6914285714285715, 'no_speech_prob': 0.0006665785331279039}, {'id': 46, 'seek': 25864, 'start': 276.64, 'end': 283.64, 'text': ' So we say let us say we call a of f1 is equal to 5, what will be the output of what will', 'tokens': [51264, 407, 321, 584, 718, 505, 584, 321, 818, 257, 295, 283, 16, 307, 2681, 281, 1025, 11, 437, 486, 312, 264, 5598, 295, 437, 486, 51614], 'temperature': 0.0, 'avg_logprob': -0.2500470638275146, 'compression_ratio': 1.6914285714285715, 'no_speech_prob': 0.0006665785331279039}, {'id': 47, 'seek': 28364, 'start': 283.91999999999996, 'end': 290.91999999999996, 'text': ' happen because of this call a dot f1 5, spend a few minutes and tell me what would happen.', 'tokens': [50378, 1051, 570, 295, 341, 818, 257, 5893, 283, 16, 1025, 11, 3496, 257, 1326, 2077, 293, 980, 385, 437, 576, 1051, 13, 50728], 'temperature': 0.0, 'avg_logprob': -0.2054764747619629, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.0008550165803171694}, {'id': 48, 'seek': 28364, 'start': 293.24, 'end': 300.24, 'text': ' f1 will get called with 5, so it is going to call f2 with 5, f2 is going to return 6.', 'tokens': [50844, 283, 16, 486, 483, 1219, 365, 1025, 11, 370, 309, 307, 516, 281, 818, 283, 17, 365, 1025, 11, 283, 17, 307, 516, 281, 2736, 1386, 13, 51194], 'temperature': 0.0, 'avg_logprob': -0.2054764747619629, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.0008550165803171694}, {'id': 49, 'seek': 28364, 'start': 303.36, 'end': 310.36, 'text': ' So this will multiply 6 by 2, result will be 12, so we will have x equal to 12, the', 'tokens': [51350, 407, 341, 486, 12972, 1386, 538, 568, 11, 1874, 486, 312, 2272, 11, 370, 321, 486, 362, 2031, 2681, 281, 2272, 11, 264, 51700], 'temperature': 0.0, 'avg_logprob': -0.2054764747619629, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.0008550165803171694}, {'id': 50, 'seek': 31036, 'start': 310.84000000000003, 'end': 313.84000000000003, 'text': ' question is which x will be a is private.', 'tokens': [50388, 1168, 307, 597, 2031, 486, 312, 257, 307, 4551, 13, 50538], 'temperature': 0.0, 'avg_logprob': -0.15875114791694728, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0008536556852050126}, {'id': 51, 'seek': 31036, 'start': 313.84000000000003, 'end': 316.7, 'text': ' So we should have 12 written here.', 'tokens': [50538, 407, 321, 820, 362, 2272, 3720, 510, 13, 50681], 'temperature': 0.0, 'avg_logprob': -0.15875114791694728, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0008536556852050126}, {'id': 52, 'seek': 31036, 'start': 316.7, 'end': 323.14, 'text': ' So the way it gets translated is that this f1 5 this call gets translated like this.', 'tokens': [50681, 407, 264, 636, 309, 2170, 16805, 307, 300, 341, 283, 16, 1025, 341, 818, 2170, 16805, 411, 341, 13, 51003], 'temperature': 0.0, 'avg_logprob': -0.15875114791694728, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0008536556852050126}, {'id': 53, 'seek': 31036, 'start': 323.14, 'end': 329.32, 'text': ' The address of object a is passed and because the address of object a is passed it says', 'tokens': [51003, 440, 2985, 295, 2657, 257, 307, 4678, 293, 570, 264, 2985, 295, 2657, 257, 307, 4678, 309, 1619, 51312], 'temperature': 0.0, 'avg_logprob': -0.15875114791694728, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0008536556852050126}, {'id': 54, 'seek': 31036, 'start': 329.32, 'end': 336.32, 'text': ' a arrow x is equal to and note that this is translated as a colon colon f2 this.', 'tokens': [51312, 257, 11610, 2031, 307, 2681, 281, 293, 3637, 300, 341, 307, 16805, 382, 257, 8255, 8255, 283, 17, 341, 13, 51662], 'temperature': 0.0, 'avg_logprob': -0.15875114791694728, 'compression_ratio': 1.7647058823529411, 'no_speech_prob': 0.0008536556852050126}, {'id': 55, 'seek': 33632, 'start': 337.32, 'end': 344.32, 'text': ' So we get so we know that we are doing something for object a and therefore we will end up', 'tokens': [50414, 407, 321, 483, 370, 321, 458, 300, 321, 366, 884, 746, 337, 2657, 257, 293, 4412, 321, 486, 917, 493, 50764], 'temperature': 0.0, 'avg_logprob': -0.2796847884719436, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.0008288573008030653}, {'id': 56, 'seek': 33632, 'start': 344.32, 'end': 349.32, 'text': ' this x corresponds to this x and we will end up writing 12 in that x.', 'tokens': [50764, 341, 2031, 23249, 281, 341, 2031, 293, 321, 486, 917, 493, 3579, 2272, 294, 300, 2031, 13, 51014], 'temperature': 0.0, 'avg_logprob': -0.2796847884719436, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.0008288573008030653}, {'id': 57, 'seek': 33632, 'start': 349.32, 'end': 353.32, 'text': ' Is the overall arrangement clear?', 'tokens': [51014, 1119, 264, 4787, 17620, 1850, 30, 51214], 'temperature': 0.0, 'avg_logprob': -0.2796847884719436, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.0008288573008030653}, {'id': 58, 'seek': 33632, 'start': 353.32, 'end': 360.32, 'text': ' Next one easy easy what will happen with b dot f1 with 10, we will write 22 where in', 'tokens': [51214, 3087, 472, 1858, 1858, 437, 486, 1051, 365, 272, 5893, 283, 16, 365, 1266, 11, 321, 486, 2464, 5853, 689, 294, 51564], 'temperature': 0.0, 'avg_logprob': -0.2796847884719436, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.0008288573008030653}, {'id': 59, 'seek': 36032, 'start': 360.32, 'end': 367.32, 'text': ' this x. So we will once again have in this call for the next call address of b is passed', 'tokens': [50364, 341, 2031, 13, 407, 321, 486, 1564, 797, 362, 294, 341, 818, 337, 264, 958, 818, 2985, 295, 272, 307, 4678, 50714], 'temperature': 0.0, 'avg_logprob': -0.17369928494305678, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.0015933547401800752}, {'id': 60, 'seek': 36032, 'start': 373.68, 'end': 379.71999999999997, 'text': ' and then it becomes b arrow x and therefore we will end up right that is the arrangement', 'tokens': [51032, 293, 550, 309, 3643, 272, 11610, 2031, 293, 4412, 321, 486, 917, 493, 558, 300, 307, 264, 17620, 51334], 'temperature': 0.0, 'avg_logprob': -0.17369928494305678, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.0015933547401800752}, {'id': 61, 'seek': 36032, 'start': 379.71999999999997, 'end': 382.65999999999997, 'text': ' of c plus plus.', 'tokens': [51334, 295, 269, 1804, 1804, 13, 51481], 'temperature': 0.0, 'avg_logprob': -0.17369928494305678, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.0015933547401800752}, {'id': 62, 'seek': 36032, 'start': 382.65999999999997, 'end': 389.12, 'text': ' Now what we want to see is what happens when there is inheritance and in particular what', 'tokens': [51481, 823, 437, 321, 528, 281, 536, 307, 437, 2314, 562, 456, 307, 32122, 293, 294, 1729, 437, 51804], 'temperature': 0.0, 'avg_logprob': -0.17369928494305678, 'compression_ratio': 1.6491228070175439, 'no_speech_prob': 0.0015933547401800752}, {'id': 63, 'seek': 38912, 'start': 389.12, 'end': 396.12, 'text': ' happens when there is there are virtual functions in an inheritance hierarchy.', 'tokens': [50364, 2314, 562, 456, 307, 456, 366, 6374, 6828, 294, 364, 32122, 22333, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.22601446612127896, 'compression_ratio': 1.518987341772152, 'no_speech_prob': 0.0021145353093743324}, {'id': 64, 'seek': 38912, 'start': 399.52, 'end': 403.6, 'text': ' So this was the easy stuff warming up exercise.', 'tokens': [50884, 407, 341, 390, 264, 1858, 1507, 17983, 493, 5380, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.22601446612127896, 'compression_ratio': 1.518987341772152, 'no_speech_prob': 0.0021145353093743324}, {'id': 65, 'seek': 38912, 'start': 403.6, 'end': 407.8, 'text': ' So now let us say I am just trying to show how inheritance happens.', 'tokens': [51088, 407, 586, 718, 505, 584, 286, 669, 445, 1382, 281, 855, 577, 32122, 2314, 13, 51298], 'temperature': 0.0, 'avg_logprob': -0.22601446612127896, 'compression_ratio': 1.518987341772152, 'no_speech_prob': 0.0021145353093743324}, {'id': 66, 'seek': 38912, 'start': 407.8, 'end': 412.98, 'text': ' So we have three classes white blue and pink.', 'tokens': [51298, 407, 321, 362, 1045, 5359, 2418, 3344, 293, 7022, 13, 51557], 'temperature': 0.0, 'avg_logprob': -0.22601446612127896, 'compression_ratio': 1.518987341772152, 'no_speech_prob': 0.0021145353093743324}, {'id': 67, 'seek': 41298, 'start': 412.98, 'end': 419.98, 'text': ' This is the base class, class white has just w1 with and this is the object w for white,', 'tokens': [50364, 639, 307, 264, 3096, 1508, 11, 1508, 2418, 575, 445, 261, 16, 365, 293, 341, 307, 264, 2657, 261, 337, 2418, 11, 50714], 'temperature': 0.0, 'avg_logprob': -0.15722960233688354, 'compression_ratio': 1.7011494252873562, 'no_speech_prob': 0.06947959214448929}, {'id': 68, 'seek': 41298, 'start': 420.70000000000005, 'end': 422.82, 'text': ' b for blue and p for pink.', 'tokens': [50750, 272, 337, 3344, 293, 280, 337, 7022, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.15722960233688354, 'compression_ratio': 1.7011494252873562, 'no_speech_prob': 0.06947959214448929}, {'id': 69, 'seek': 41298, 'start': 422.82, 'end': 429.82, 'text': ' So this is the object for w1 and now this class blue says public white which means that', 'tokens': [50856, 407, 341, 307, 264, 2657, 337, 261, 16, 293, 586, 341, 1508, 3344, 1619, 1908, 2418, 597, 1355, 300, 51206], 'temperature': 0.0, 'avg_logprob': -0.15722960233688354, 'compression_ratio': 1.7011494252873562, 'no_speech_prob': 0.06947959214448929}, {'id': 70, 'seek': 41298, 'start': 430.26, 'end': 436.5, 'text': ' is going to inherit everything from white and additionally going to include these b1', 'tokens': [51228, 307, 516, 281, 21389, 1203, 490, 2418, 293, 43181, 516, 281, 4090, 613, 272, 16, 51540], 'temperature': 0.0, 'avg_logprob': -0.15722960233688354, 'compression_ratio': 1.7011494252873562, 'no_speech_prob': 0.06947959214448929}, {'id': 71, 'seek': 41298, 'start': 436.5, 'end': 437.22, 'text': ' and b2.', 'tokens': [51540, 293, 272, 17, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.15722960233688354, 'compression_ratio': 1.7011494252873562, 'no_speech_prob': 0.06947959214448929}, {'id': 72, 'seek': 43722, 'start': 437.22, 'end': 444.22, 'text': ' So b this small b would be it would have something called w1 which is this field and b1 and b2', 'tokens': [50364, 407, 272, 341, 1359, 272, 576, 312, 309, 576, 362, 746, 1219, 261, 16, 597, 307, 341, 2519, 293, 272, 16, 293, 272, 17, 50714], 'temperature': 0.0, 'avg_logprob': -0.18698644114064647, 'compression_ratio': 1.8051282051282052, 'no_speech_prob': 0.012421613559126854}, {'id': 73, 'seek': 43722, 'start': 444.22, 'end': 450.24, 'text': ' which is this field right and then we have class pink which derives from class blue.', 'tokens': [50714, 597, 307, 341, 2519, 558, 293, 550, 321, 362, 1508, 7022, 597, 1163, 1539, 490, 1508, 3344, 13, 51015], 'temperature': 0.0, 'avg_logprob': -0.18698644114064647, 'compression_ratio': 1.8051282051282052, 'no_speech_prob': 0.012421613559126854}, {'id': 74, 'seek': 43722, 'start': 450.24, 'end': 456.70000000000005, 'text': ' So it will have everything that class blue has but additionally it will have p1 and p2', 'tokens': [51015, 407, 309, 486, 362, 1203, 300, 1508, 3344, 575, 457, 43181, 309, 486, 362, 280, 16, 293, 280, 17, 51338], 'temperature': 0.0, 'avg_logprob': -0.18698644114064647, 'compression_ratio': 1.8051282051282052, 'no_speech_prob': 0.012421613559126854}, {'id': 75, 'seek': 43722, 'start': 456.70000000000005, 'end': 459.04, 'text': ' the two pink members right.', 'tokens': [51338, 264, 732, 7022, 2679, 558, 13, 51455], 'temperature': 0.0, 'avg_logprob': -0.18698644114064647, 'compression_ratio': 1.8051282051282052, 'no_speech_prob': 0.012421613559126854}, {'id': 76, 'seek': 43722, 'start': 459.04, 'end': 465.54, 'text': ' So this is how the inheritance of data takes place clear.', 'tokens': [51455, 407, 341, 307, 577, 264, 32122, 295, 1412, 2516, 1081, 1850, 13, 51780], 'temperature': 0.0, 'avg_logprob': -0.18698644114064647, 'compression_ratio': 1.8051282051282052, 'no_speech_prob': 0.012421613559126854}, {'id': 77, 'seek': 46554, 'start': 465.54, 'end': 471.38, 'text': ' Every derived class would have everything that comes from the base class and the size', 'tokens': [50364, 2048, 18949, 1508, 576, 362, 1203, 300, 1487, 490, 264, 3096, 1508, 293, 264, 2744, 50656], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 78, 'seek': 46554, 'start': 471.38, 'end': 476.5, 'text': ' of the derived class will keep growing as we derive more and more we will have more', 'tokens': [50656, 295, 264, 18949, 1508, 486, 1066, 4194, 382, 321, 28446, 544, 293, 544, 321, 486, 362, 544, 50912], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 79, 'seek': 46554, 'start': 476.5, 'end': 479.68, 'text': ' things coming in right.', 'tokens': [50912, 721, 1348, 294, 558, 13, 51071], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 80, 'seek': 46554, 'start': 479.68, 'end': 481.14000000000004, 'text': ' So this is the inheritance of data.', 'tokens': [51071, 407, 341, 307, 264, 32122, 295, 1412, 13, 51144], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 81, 'seek': 46554, 'start': 481.14000000000004, 'end': 484.1, 'text': ' Now we want to look at inheritance of functions.', 'tokens': [51144, 823, 321, 528, 281, 574, 412, 32122, 295, 6828, 13, 51292], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 82, 'seek': 46554, 'start': 484.1, 'end': 486.82000000000005, 'text': ' What happens in case of inheritance of functions?', 'tokens': [51292, 708, 2314, 294, 1389, 295, 32122, 295, 6828, 30, 51428], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 83, 'seek': 46554, 'start': 486.82000000000005, 'end': 491.88, 'text': ' So non-virtual functions are inherited much like data members.', 'tokens': [51428, 407, 2107, 12, 85, 2498, 901, 6828, 366, 27091, 709, 411, 1412, 2679, 13, 51681], 'temperature': 0.0, 'avg_logprob': -0.14444952822746115, 'compression_ratio': 1.8018433179723503, 'no_speech_prob': 0.02516886033117771}, {'id': 84, 'seek': 49188, 'start': 491.88, 'end': 498.88, 'text': ' So there is no difference between non-virtual functions and data members except that because', 'tokens': [50364, 407, 456, 307, 572, 2649, 1296, 2107, 12, 85, 2498, 901, 6828, 293, 1412, 2679, 3993, 300, 570, 50714], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 85, 'seek': 49188, 'start': 499.15999999999997, 'end': 505.68, 'text': ' it is the same function that is inherited there is one copy of the code across the entire', 'tokens': [50728, 309, 307, 264, 912, 2445, 300, 307, 27091, 456, 307, 472, 5055, 295, 264, 3089, 2108, 264, 2302, 51054], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 86, 'seek': 49188, 'start': 505.68, 'end': 506.92, 'text': ' hierarchy.', 'tokens': [51054, 22333, 13, 51116], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 87, 'seek': 49188, 'start': 506.92, 'end': 511.02, 'text': " You don't keep separate copies of and of course these functions go in the function", 'tokens': [51116, 509, 500, 380, 1066, 4994, 14341, 295, 293, 295, 1164, 613, 6828, 352, 294, 264, 2445, 51321], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 88, 'seek': 49188, 'start': 511.02, 'end': 513.96, 'text': " memory they don't go in the data memory right.", 'tokens': [51321, 4675, 436, 500, 380, 352, 294, 264, 1412, 4675, 558, 13, 51468], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 89, 'seek': 49188, 'start': 513.96, 'end': 516.48, 'text': ' Can you all visualize it?', 'tokens': [51468, 1664, 291, 439, 23273, 309, 30, 51594], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 90, 'seek': 49188, 'start': 516.48, 'end': 518.56, 'text': ' Data is of course different.', 'tokens': [51594, 11888, 307, 295, 1164, 819, 13, 51698], 'temperature': 0.0, 'avg_logprob': -0.2289585400653142, 'compression_ratio': 1.7104072398190044, 'no_speech_prob': 0.025154095143079758}, {'id': 91, 'seek': 51856, 'start': 518.56, 'end': 522.1999999999999, 'text': ' So we have to create separate space for this data.', 'tokens': [50364, 407, 321, 362, 281, 1884, 4994, 1901, 337, 341, 1412, 13, 50546], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 92, 'seek': 51856, 'start': 522.1999999999999, 'end': 527.1999999999999, 'text': ' This b1 is different from this b1 and this w1 is different from this w1 which in turn', 'tokens': [50546, 639, 272, 16, 307, 819, 490, 341, 272, 16, 293, 341, 261, 16, 307, 819, 490, 341, 261, 16, 597, 294, 1261, 50796], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 93, 'seek': 51856, 'start': 527.1999999999999, 'end': 534.1999999999999, 'text': " is different from w1 but that doesn't happen for inherited function members in particular", 'tokens': [50796, 307, 819, 490, 261, 16, 457, 300, 1177, 380, 1051, 337, 27091, 2445, 2679, 294, 1729, 51146], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 94, 'seek': 51856, 'start': 534.4, 'end': 537.0799999999999, 'text': ' non-virtual function members right.', 'tokens': [51156, 2107, 12, 85, 2498, 901, 2445, 2679, 558, 13, 51290], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 95, 'seek': 51856, 'start': 537.0799999999999, 'end': 540.0799999999999, 'text': ' So inheritance of data is easy.', 'tokens': [51290, 407, 32122, 295, 1412, 307, 1858, 13, 51440], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 96, 'seek': 51856, 'start': 540.0799999999999, 'end': 543.52, 'text': ' Inheritance of non-virtual function members is easy.', 'tokens': [51440, 682, 511, 270, 719, 295, 2107, 12, 85, 2498, 901, 2445, 2679, 307, 1858, 13, 51612], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 97, 'seek': 51856, 'start': 543.52, 'end': 548.0, 'text': ' Inheritance of virtual functions is where some interesting things happen and which is', 'tokens': [51612, 682, 511, 270, 719, 295, 6374, 6828, 307, 689, 512, 1880, 721, 1051, 293, 597, 307, 51836], 'temperature': 0.0, 'avg_logprob': -0.10541401590619769, 'compression_ratio': 2.0917874396135265, 'no_speech_prob': 0.014707554131746292}, {'id': 98, 'seek': 54800, 'start': 548.0, 'end': 549.56, 'text': ' what we want to understand.', 'tokens': [50364, 437, 321, 528, 281, 1223, 13, 50442], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 99, 'seek': 54800, 'start': 549.56, 'end': 555.12, 'text': ' How does the compiler set up the things in order to make sure that the right function', 'tokens': [50442, 1012, 775, 264, 31958, 992, 493, 264, 721, 294, 1668, 281, 652, 988, 300, 264, 558, 2445, 50720], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 100, 'seek': 54800, 'start': 555.12, 'end': 556.28, 'text': ' is being called?', 'tokens': [50720, 307, 885, 1219, 30, 50778], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 101, 'seek': 54800, 'start': 556.28, 'end': 565.28, 'text': ' That is the problem that we want to look at in the next half an hour or so.', 'tokens': [50778, 663, 307, 264, 1154, 300, 321, 528, 281, 574, 412, 294, 264, 958, 1922, 364, 1773, 420, 370, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 102, 'seek': 54800, 'start': 565.28, 'end': 566.28, 'text': ' What is a virtual function?', 'tokens': [51228, 708, 307, 257, 6374, 2445, 30, 51278], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 103, 'seek': 54800, 'start': 566.28, 'end': 568.28, 'text': ' Maybe I should have asked you.', 'tokens': [51278, 2704, 286, 820, 362, 2351, 291, 13, 51378], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 104, 'seek': 54800, 'start': 568.28, 'end': 574.52, 'text': ' How many of you have not used C++ before?', 'tokens': [51378, 1012, 867, 295, 291, 362, 406, 1143, 383, 25472, 949, 30, 51690], 'temperature': 0.0, 'avg_logprob': -0.1865087775296943, 'compression_ratio': 1.5427135678391959, 'no_speech_prob': 0.005217331927269697}, {'id': 105, 'seek': 57452, 'start': 574.52, 'end': 578.3199999999999, 'text': ' So everyone has used.', 'tokens': [50364, 407, 1518, 575, 1143, 13, 50554], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 106, 'seek': 57452, 'start': 578.3199999999999, 'end': 579.84, 'text': ' Would anyone like to answer that question?', 'tokens': [50554, 6068, 2878, 411, 281, 1867, 300, 1168, 30, 50630], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 107, 'seek': 57452, 'start': 579.84, 'end': 581.3199999999999, 'text': ' What is a virtual function?', 'tokens': [50630, 708, 307, 257, 6374, 2445, 30, 50704], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 108, 'seek': 57452, 'start': 581.3199999999999, 'end': 587.3199999999999, 'text': ' Yes, yes and a standard example there is which I think I can take.', 'tokens': [50704, 1079, 11, 2086, 293, 257, 3832, 1365, 456, 307, 597, 286, 519, 286, 393, 747, 13, 51004], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 109, 'seek': 57452, 'start': 587.3199999999999, 'end': 591.92, 'text': ' Every C++ book would have the standard example.', 'tokens': [51004, 2048, 383, 25472, 1446, 576, 362, 264, 3832, 1365, 13, 51234], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 110, 'seek': 57452, 'start': 591.92, 'end': 598.92, 'text': ' We first create a class called shape which among other things has this function called', 'tokens': [51234, 492, 700, 1884, 257, 1508, 1219, 3909, 597, 3654, 661, 721, 575, 341, 2445, 1219, 51584], 'temperature': 0.0, 'avg_logprob': -0.31828522037815404, 'compression_ratio': 1.5473684210526315, 'no_speech_prob': 0.021923623979091644}, {'id': 111, 'seek': 59892, 'start': 598.92, 'end': 599.92, 'text': ' draw.', 'tokens': [50364, 2642, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.39761555989583336, 'compression_ratio': 1.2956521739130435, 'no_speech_prob': 0.00733963493257761}, {'id': 112, 'seek': 59892, 'start': 599.92, 'end': 600.92, 'text': ' Now what does a draw do?', 'tokens': [50414, 823, 437, 775, 257, 2642, 360, 30, 50464], 'temperature': 0.0, 'avg_logprob': -0.39761555989583336, 'compression_ratio': 1.2956521739130435, 'no_speech_prob': 0.00733963493257761}, {'id': 113, 'seek': 59892, 'start': 600.92, 'end': 601.92, 'text': ' It depends on what the shape is.', 'tokens': [50464, 467, 5946, 322, 437, 264, 3909, 307, 13, 50514], 'temperature': 0.0, 'avg_logprob': -0.39761555989583336, 'compression_ratio': 1.2956521739130435, 'no_speech_prob': 0.00733963493257761}, {'id': 114, 'seek': 59892, 'start': 601.92, 'end': 608.92, 'text': ' You cannot draw an arbitrary shape and then when we say class square public, I do not', 'tokens': [50514, 509, 2644, 2642, 364, 23211, 3909, 293, 550, 562, 321, 584, 1508, 3732, 1908, 11, 286, 360, 406, 50864], 'temperature': 0.0, 'avg_logprob': -0.39761555989583336, 'compression_ratio': 1.2956521739130435, 'no_speech_prob': 0.00733963493257761}, {'id': 115, 'seek': 60892, 'start': 608.92, 'end': 634.4, 'text': ' remember the syntax, yes, public shape when it derives when a square derives from shape', 'tokens': [50364, 1604, 264, 28431, 11, 2086, 11, 1908, 3909, 562, 309, 1163, 1539, 562, 257, 3732, 1163, 1539, 490, 3909, 51638], 'temperature': 0.0, 'avg_logprob': -0.2912523208125945, 'compression_ratio': 1.2717391304347827, 'no_speech_prob': 0.02515982650220394}, {'id': 116, 'seek': 60892, 'start': 634.4, 'end': 637.24, 'text': ' it draws something like this.', 'tokens': [51638, 309, 20045, 746, 411, 341, 13, 51780], 'temperature': 0.0, 'avg_logprob': -0.2912523208125945, 'compression_ratio': 1.2717391304347827, 'no_speech_prob': 0.02515982650220394}, {'id': 117, 'seek': 63724, 'start': 638.24, 'end': 650.2, 'text': ' In a similar manner when we have a circle, circle derives from shape it will draw something', 'tokens': [50414, 682, 257, 2531, 9060, 562, 321, 362, 257, 6329, 11, 6329, 1163, 1539, 490, 3909, 309, 486, 2642, 746, 51012], 'temperature': 0.0, 'avg_logprob': -0.16951619362344547, 'compression_ratio': 1.3941605839416058, 'no_speech_prob': 0.3092120587825775}, {'id': 118, 'seek': 63724, 'start': 650.2, 'end': 651.2, 'text': ' like this.', 'tokens': [51012, 411, 341, 13, 51062], 'temperature': 0.0, 'avg_logprob': -0.16951619362344547, 'compression_ratio': 1.3941605839416058, 'no_speech_prob': 0.3092120587825775}, {'id': 119, 'seek': 63724, 'start': 651.2, 'end': 661.6800000000001, 'text': ' So, the whole idea is that we want a certain functionality which is common to the class,', 'tokens': [51062, 407, 11, 264, 1379, 1558, 307, 300, 321, 528, 257, 1629, 14980, 597, 307, 2689, 281, 264, 1508, 11, 51586], 'temperature': 0.0, 'avg_logprob': -0.16951619362344547, 'compression_ratio': 1.3941605839416058, 'no_speech_prob': 0.3092120587825775}, {'id': 120, 'seek': 66168, 'start': 662.68, 'end': 670.4, 'text': ' hierarchy, but that functionality has to be distinguished based on the particular instance', 'tokens': [50414, 22333, 11, 457, 300, 14980, 575, 281, 312, 21702, 2361, 322, 264, 1729, 5197, 50800], 'temperature': 0.0, 'avg_logprob': -0.17789121866226196, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.06133514270186424}, {'id': 121, 'seek': 66168, 'start': 670.4, 'end': 671.4, 'text': ' in the hierarchy.', 'tokens': [50800, 294, 264, 22333, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.17789121866226196, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.06133514270186424}, {'id': 122, 'seek': 66168, 'start': 671.4, 'end': 677.7199999999999, 'text': ' So, I want to be able to say that every shape has a draw function, every shape has an area,', 'tokens': [50850, 407, 11, 286, 528, 281, 312, 1075, 281, 584, 300, 633, 3909, 575, 257, 2642, 2445, 11, 633, 3909, 575, 364, 1859, 11, 51166], 'temperature': 0.0, 'avg_logprob': -0.17789121866226196, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.06133514270186424}, {'id': 123, 'seek': 66168, 'start': 677.7199999999999, 'end': 685.76, 'text': ' every shape has a certain perimeter, but what it is depends on the particular instance of', 'tokens': [51166, 633, 3909, 575, 257, 1629, 32404, 11, 457, 437, 309, 307, 5946, 322, 264, 1729, 5197, 295, 51568], 'temperature': 0.0, 'avg_logprob': -0.17789121866226196, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.06133514270186424}, {'id': 124, 'seek': 66168, 'start': 685.76, 'end': 690.12, 'text': ' the class and therefore, we use virtual functions.', 'tokens': [51568, 264, 1508, 293, 4412, 11, 321, 764, 6374, 6828, 13, 51786], 'temperature': 0.0, 'avg_logprob': -0.17789121866226196, 'compression_ratio': 1.8333333333333333, 'no_speech_prob': 0.06133514270186424}, {'id': 125, 'seek': 69012, 'start': 690.5600000000001, 'end': 694.72, 'text': ' Because a draw here does not mean anything or area here does not mean anything until', 'tokens': [50386, 1436, 257, 2642, 510, 775, 406, 914, 1340, 420, 1859, 510, 775, 406, 914, 1340, 1826, 50594], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 126, 'seek': 69012, 'start': 694.72, 'end': 699.72, 'text': ' you tell me what the shape is, I cannot tell you how to draw it, I cannot tell you what', 'tokens': [50594, 291, 980, 385, 437, 264, 3909, 307, 11, 286, 2644, 980, 291, 577, 281, 2642, 309, 11, 286, 2644, 980, 291, 437, 50844], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 127, 'seek': 69012, 'start': 699.72, 'end': 700.72, 'text': ' the area is.', 'tokens': [50844, 264, 1859, 307, 13, 50894], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 128, 'seek': 69012, 'start': 700.72, 'end': 706.96, 'text': ' So, it is so the idea is to say that there is a function draw, but and often what happens', 'tokens': [50894, 407, 11, 309, 307, 370, 264, 1558, 307, 281, 584, 300, 456, 307, 257, 2445, 2642, 11, 457, 293, 2049, 437, 2314, 51206], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 129, 'seek': 69012, 'start': 706.96, 'end': 716.04, 'text': ' is we say draw equal to 0 which is a pure virtual function which means that this is', 'tokens': [51206, 307, 321, 584, 2642, 2681, 281, 1958, 597, 307, 257, 6075, 6374, 2445, 597, 1355, 300, 341, 307, 51660], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 130, 'seek': 69012, 'start': 716.04, 'end': 717.04, 'text': ' an abstract class.', 'tokens': [51660, 364, 12649, 1508, 13, 51710], 'temperature': 0.0, 'avg_logprob': -0.17753202438354493, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.15571004152297974}, {'id': 131, 'seek': 71704, 'start': 717.16, 'end': 723.7199999999999, 'text': ' There cannot be an object corresponding to this and every derived class must necessarily', 'tokens': [50370, 821, 2644, 312, 364, 2657, 11760, 281, 341, 293, 633, 18949, 1508, 1633, 4725, 50698], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 132, 'seek': 71704, 'start': 723.7199999999999, 'end': 725.24, 'text': ' give this function.', 'tokens': [50698, 976, 341, 2445, 13, 50774], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 133, 'seek': 71704, 'start': 725.24, 'end': 731.56, 'text': ' This is a functionality which is common to the classes that are derived, but at an abstract', 'tokens': [50774, 639, 307, 257, 14980, 597, 307, 2689, 281, 264, 5359, 300, 366, 18949, 11, 457, 412, 364, 12649, 51090], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 134, 'seek': 71704, 'start': 731.56, 'end': 736.28, 'text': ' level we cannot really execute that functionality.', 'tokens': [51090, 1496, 321, 2644, 534, 14483, 300, 14980, 13, 51326], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 135, 'seek': 71704, 'start': 736.28, 'end': 738.0799999999999, 'text': ' We do not know how to execute that functionality.', 'tokens': [51326, 492, 360, 406, 458, 577, 281, 14483, 300, 14980, 13, 51416], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 136, 'seek': 71704, 'start': 738.0799999999999, 'end': 744.5999999999999, 'text': ' So, when you put equal to 0 it means pure virtual function and if this draw has not', 'tokens': [51416, 407, 11, 562, 291, 829, 2681, 281, 1958, 309, 1355, 6075, 6374, 2445, 293, 498, 341, 2642, 575, 406, 51742], 'temperature': 0.0, 'avg_logprob': -0.1697146645907698, 'compression_ratio': 1.742081447963801, 'no_speech_prob': 0.06181958690285683}, {'id': 137, 'seek': 74460, 'start': 744.64, 'end': 749.52, 'text': ' been defined in a derived class the compiler will give an error.', 'tokens': [50366, 668, 7642, 294, 257, 18949, 1508, 264, 31958, 486, 976, 364, 6713, 13, 50610], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 138, 'seek': 74460, 'start': 749.52, 'end': 753.72, 'text': ' If you do not put a pure virtual function the compiler will not give you an error.', 'tokens': [50610, 759, 291, 360, 406, 829, 257, 6075, 6374, 2445, 264, 31958, 486, 406, 976, 291, 364, 6713, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 139, 'seek': 74460, 'start': 753.72, 'end': 756.32, 'text': ' So, that is a virtual function.', 'tokens': [50820, 407, 11, 300, 307, 257, 6374, 2445, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 140, 'seek': 74460, 'start': 756.32, 'end': 760.08, 'text': ' Virtual function is a function which is virtual.', 'tokens': [50950, 23887, 2445, 307, 257, 2445, 597, 307, 6374, 13, 51138], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 141, 'seek': 74460, 'start': 760.08, 'end': 761.96, 'text': ' Now in what sense is it virtual?', 'tokens': [51138, 823, 294, 437, 2020, 307, 309, 6374, 30, 51232], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 142, 'seek': 74460, 'start': 761.96, 'end': 770.12, 'text': ' It is a function, but whose functionality is defined by the classes down in the hierarchy.', 'tokens': [51232, 467, 307, 257, 2445, 11, 457, 6104, 14980, 307, 7642, 538, 264, 5359, 760, 294, 264, 22333, 13, 51640], 'temperature': 0.0, 'avg_logprob': -0.22971127249977805, 'compression_ratio': 1.8429319371727748, 'no_speech_prob': 0.019107479602098465}, {'id': 143, 'seek': 77012, 'start': 770.12, 'end': 776.08, 'text': ' Any other question about virtual functions or inheritance or C plus plus in general related', 'tokens': [50364, 2639, 661, 1168, 466, 6374, 6828, 420, 32122, 420, 383, 1804, 1804, 294, 2674, 4077, 50662], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 144, 'seek': 77012, 'start': 776.08, 'end': 777.6, 'text': ' to this before I proceed?', 'tokens': [50662, 281, 341, 949, 286, 8991, 30, 50738], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 145, 'seek': 77012, 'start': 777.6, 'end': 779.72, 'text': ' It is important that you stop me.', 'tokens': [50738, 467, 307, 1021, 300, 291, 1590, 385, 13, 50844], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 146, 'seek': 77012, 'start': 779.72, 'end': 786.72, 'text': ' It is possible that I might be assuming some things and that assumption may not be true.', 'tokens': [50844, 467, 307, 1944, 300, 286, 1062, 312, 11926, 512, 721, 293, 300, 15302, 815, 406, 312, 2074, 13, 51194], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 147, 'seek': 77012, 'start': 786.72, 'end': 792.12, 'text': ' So, please feel free to stop me at any point of time when you have a question.', 'tokens': [51194, 407, 11, 1767, 841, 1737, 281, 1590, 385, 412, 604, 935, 295, 565, 562, 291, 362, 257, 1168, 13, 51464], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 148, 'seek': 77012, 'start': 792.12, 'end': 793.12, 'text': ' Can we proceed now?', 'tokens': [51464, 1664, 321, 8991, 586, 30, 51514], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 149, 'seek': 77012, 'start': 793.12, 'end': 794.12, 'text': ' Is it ok?', 'tokens': [51514, 1119, 309, 3133, 30, 51564], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 150, 'seek': 77012, 'start': 794.12, 'end': 795.12, 'text': ' Ok.', 'tokens': [51564, 3477, 13, 51614], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 151, 'seek': 77012, 'start': 795.12, 'end': 797.88, 'text': ' So, that is a virtual function.', 'tokens': [51614, 407, 11, 300, 307, 257, 6374, 2445, 13, 51752], 'temperature': 0.0, 'avg_logprob': -0.22013838631766183, 'compression_ratio': 1.6452991452991452, 'no_speech_prob': 0.04204518720507622}, {'id': 152, 'seek': 79788, 'start': 797.88, 'end': 803.32, 'text': ' Now let us look at the difference between virtual and non-virtual function.', 'tokens': [50364, 823, 718, 505, 574, 412, 264, 2649, 1296, 6374, 293, 2107, 12, 85, 2498, 901, 2445, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 153, 'seek': 79788, 'start': 803.32, 'end': 809.9399999999999, 'text': ' If draw had been a non-virtual function it means that this class itself will tell me', 'tokens': [50636, 759, 2642, 632, 668, 257, 2107, 12, 85, 2498, 901, 2445, 309, 1355, 300, 341, 1508, 2564, 486, 980, 385, 50967], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 154, 'seek': 79788, 'start': 809.9399999999999, 'end': 811.72, 'text': ' how it has to be executed.', 'tokens': [50967, 577, 309, 575, 281, 312, 17577, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 155, 'seek': 79788, 'start': 811.72, 'end': 815.6, 'text': ' The rest of the classes will simply get it.', 'tokens': [51056, 440, 1472, 295, 264, 5359, 486, 2935, 483, 309, 13, 51250], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 156, 'seek': 79788, 'start': 815.6, 'end': 824.32, 'text': ' What happens within draw if it was a non-virtual function does not depend on the object, does', 'tokens': [51250, 708, 2314, 1951, 2642, 498, 309, 390, 257, 2107, 12, 85, 2498, 901, 2445, 775, 406, 5672, 322, 264, 2657, 11, 775, 51686], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 157, 'seek': 79788, 'start': 824.32, 'end': 827.44, 'text': ' not depend on the class of the object.', 'tokens': [51686, 406, 5672, 322, 264, 1508, 295, 264, 2657, 13, 51842], 'temperature': 0.0, 'avg_logprob': -0.15105572132149128, 'compression_ratio': 1.82, 'no_speech_prob': 0.010316022671759129}, {'id': 158, 'seek': 82744, 'start': 827.44, 'end': 831.2, 'text': ' It simply depends on the class in which it has been declared.', 'tokens': [50364, 467, 2935, 5946, 322, 264, 1508, 294, 597, 309, 575, 668, 15489, 13, 50552], 'temperature': 0.0, 'avg_logprob': -0.23010351851179794, 'compression_ratio': 1.8614457831325302, 'no_speech_prob': 0.002284746151417494}, {'id': 159, 'seek': 82744, 'start': 831.2, 'end': 840.44, 'text': ' Whereas for a virtual function because a pointer to a base class could hold an object every', 'tokens': [50552, 13813, 337, 257, 6374, 2445, 570, 257, 23918, 281, 257, 3096, 1508, 727, 1797, 364, 2657, 633, 51014], 'temperature': 0.0, 'avg_logprob': -0.23010351851179794, 'compression_ratio': 1.8614457831325302, 'no_speech_prob': 0.002284746151417494}, {'id': 160, 'seek': 82744, 'start': 840.44, 'end': 845.0400000000001, 'text': ' shape every square is a shape every circle is a shape.', 'tokens': [51014, 3909, 633, 3732, 307, 257, 3909, 633, 6329, 307, 257, 3909, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.23010351851179794, 'compression_ratio': 1.8614457831325302, 'no_speech_prob': 0.002284746151417494}, {'id': 161, 'seek': 82744, 'start': 845.0400000000001, 'end': 849.9200000000001, 'text': ' Therefore a pointer to shape can point to a circle therefore pointer to shape can point', 'tokens': [51244, 7504, 257, 23918, 281, 3909, 393, 935, 281, 257, 6329, 4412, 23918, 281, 3909, 393, 935, 51488], 'temperature': 0.0, 'avg_logprob': -0.23010351851179794, 'compression_ratio': 1.8614457831325302, 'no_speech_prob': 0.002284746151417494}, {'id': 162, 'seek': 82744, 'start': 849.9200000000001, 'end': 852.36, 'text': ' to a square.', 'tokens': [51488, 281, 257, 3732, 13, 51610], 'temperature': 0.0, 'avg_logprob': -0.23010351851179794, 'compression_ratio': 1.8614457831325302, 'no_speech_prob': 0.002284746151417494}, {'id': 163, 'seek': 85236, 'start': 852.36, 'end': 861.48, 'text': ' And therefore virtual functions take a different avatar depending upon the particular object', 'tokens': [50364, 400, 4412, 6374, 6828, 747, 257, 819, 36205, 5413, 3564, 264, 1729, 2657, 50820], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 164, 'seek': 85236, 'start': 861.48, 'end': 865.4, 'text': ' that the pointer points to and this is a runtime decision.', 'tokens': [50820, 300, 264, 23918, 2793, 281, 293, 341, 307, 257, 34474, 3537, 13, 51016], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 165, 'seek': 85236, 'start': 865.4, 'end': 872.04, 'text': ' So you might say x arrow draw if x points to a circle you will end up drawing this if', 'tokens': [51016, 407, 291, 1062, 584, 2031, 11610, 2642, 498, 2031, 2793, 281, 257, 6329, 291, 486, 917, 493, 6316, 341, 498, 51348], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 166, 'seek': 85236, 'start': 872.04, 'end': 875.24, 'text': ' x points to a square you will end up drawing this.', 'tokens': [51348, 2031, 2793, 281, 257, 3732, 291, 486, 917, 493, 6316, 341, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 167, 'seek': 85236, 'start': 875.24, 'end': 876.76, 'text': ' This looks like a runtime activity.', 'tokens': [51508, 639, 1542, 411, 257, 34474, 5191, 13, 51584], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 168, 'seek': 85236, 'start': 876.76, 'end': 879.72, 'text': ' It is a runtime decision.', 'tokens': [51584, 467, 307, 257, 34474, 3537, 13, 51732], 'temperature': 0.0, 'avg_logprob': -0.254705270131429, 'compression_ratio': 1.8134715025906736, 'no_speech_prob': 0.06731031835079193}, {'id': 169, 'seek': 87972, 'start': 879.72, 'end': 882.44, 'text': ' That compiler can do something.', 'tokens': [50364, 663, 31958, 393, 360, 746, 13, 50500], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 170, 'seek': 87972, 'start': 882.44, 'end': 887.72, 'text': ' So we talk about yesterday we talked about advancing binding compilation and optimization', 'tokens': [50500, 407, 321, 751, 466, 5186, 321, 2825, 466, 27267, 17359, 40261, 293, 19618, 50764], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 171, 'seek': 87972, 'start': 887.72, 'end': 891.12, 'text': ' is all about advancing bindings.', 'tokens': [50764, 307, 439, 466, 27267, 14786, 1109, 13, 50934], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 172, 'seek': 87972, 'start': 891.12, 'end': 895.72, 'text': ' I mentioned yesterday that I belong to that school of thought which says do not put off', 'tokens': [50934, 286, 2835, 5186, 300, 286, 5784, 281, 300, 1395, 295, 1194, 597, 1619, 360, 406, 829, 766, 51164], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 173, 'seek': 87972, 'start': 895.72, 'end': 901.0600000000001, 'text': ' until runtime what you can do with compile time that exactly is advancing binding.', 'tokens': [51164, 1826, 34474, 437, 291, 393, 360, 365, 31413, 565, 300, 2293, 307, 27267, 17359, 13, 51431], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 174, 'seek': 87972, 'start': 901.0600000000001, 'end': 907.76, 'text': ' So one option is to leave this decision completely to runtime and the other option is to leave', 'tokens': [51431, 407, 472, 3614, 307, 281, 1856, 341, 3537, 2584, 281, 34474, 293, 264, 661, 3614, 307, 281, 1856, 51766], 'temperature': 0.0, 'avg_logprob': -0.21173383924696182, 'compression_ratio': 1.9004524886877827, 'no_speech_prob': 0.4678674340248108}, {'id': 175, 'seek': 90776, 'start': 907.8, 'end': 914.64, 'text': ' the minimal decision to runtime and do as much possible at compile time at static time.', 'tokens': [50366, 264, 13206, 3537, 281, 34474, 293, 360, 382, 709, 1944, 412, 31413, 565, 412, 13437, 565, 13, 50708], 'temperature': 0.0, 'avg_logprob': -0.160770651223003, 'compression_ratio': 1.6984126984126984, 'no_speech_prob': 0.2170291692018509}, {'id': 176, 'seek': 90776, 'start': 914.64, 'end': 921.36, 'text': ' And as I said yesterday these are the things that make interesting ideas require interesting', 'tokens': [50708, 400, 382, 286, 848, 5186, 613, 366, 264, 721, 300, 652, 1880, 3487, 3651, 1880, 51044], 'temperature': 0.0, 'avg_logprob': -0.160770651223003, 'compression_ratio': 1.6984126984126984, 'no_speech_prob': 0.2170291692018509}, {'id': 177, 'seek': 90776, 'start': 921.36, 'end': 931.64, 'text': ' ideas and this session is aimed at showing yet another beautiful idea of runtime behavior', 'tokens': [51044, 3487, 293, 341, 5481, 307, 20540, 412, 4099, 1939, 1071, 2238, 1558, 295, 34474, 5223, 51558], 'temperature': 0.0, 'avg_logprob': -0.160770651223003, 'compression_ratio': 1.6984126984126984, 'no_speech_prob': 0.2170291692018509}, {'id': 178, 'seek': 90776, 'start': 931.64, 'end': 934.88, 'text': ' for that a lot of work being done at compile time.', 'tokens': [51558, 337, 300, 257, 688, 295, 589, 885, 1096, 412, 31413, 565, 13, 51720], 'temperature': 0.0, 'avg_logprob': -0.160770651223003, 'compression_ratio': 1.6984126984126984, 'no_speech_prob': 0.2170291692018509}, {'id': 179, 'seek': 93488, 'start': 935.0, 'end': 938.0, 'text': ' So when you see the signature all business is external.', 'tokens': [50370, 407, 562, 291, 536, 264, 13397, 439, 1606, 307, 8320, 13, 50520], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 180, 'seek': 93488, 'start': 938.0, 'end': 940.0, 'text': ' You know compile is the angle of everything.', 'tokens': [50520, 509, 458, 31413, 307, 264, 5802, 295, 1203, 13, 50620], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 181, 'seek': 93488, 'start': 940.0, 'end': 942.0, 'text': ' Scope etc is all external.', 'tokens': [50620, 2747, 1114, 5183, 307, 439, 8320, 13, 50720], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 182, 'seek': 93488, 'start': 942.0, 'end': 945.72, 'text': ' When you look at the intermediate code or when you look at the machine code there is', 'tokens': [50720, 1133, 291, 574, 412, 264, 19376, 3089, 420, 562, 291, 574, 412, 264, 3479, 3089, 456, 307, 50906], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 183, 'seek': 93488, 'start': 945.72, 'end': 946.72, 'text': ' no scope.', 'tokens': [50906, 572, 11923, 13, 50956], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 184, 'seek': 93488, 'start': 946.72, 'end': 947.72, 'text': ' Where is the scope?', 'tokens': [50956, 2305, 307, 264, 11923, 30, 51006], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 185, 'seek': 93488, 'start': 947.72, 'end': 950.52, 'text': ' You might have a compound statement or local declaration.', 'tokens': [51006, 509, 1062, 362, 257, 14154, 5629, 420, 2654, 27606, 13, 51146], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 186, 'seek': 93488, 'start': 950.52, 'end': 952.48, 'text': ' Show me that in the generated code?', 'tokens': [51146, 6895, 385, 300, 294, 264, 10833, 3089, 30, 51244], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 187, 'seek': 93488, 'start': 952.48, 'end': 953.48, 'text': ' No.', 'tokens': [51244, 883, 13, 51294], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 188, 'seek': 93488, 'start': 953.48, 'end': 956.96, 'text': ' So all these things are for checking.', 'tokens': [51294, 407, 439, 613, 721, 366, 337, 8568, 13, 51468], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 189, 'seek': 93488, 'start': 956.96, 'end': 961.16, 'text': ' You know validating the input not for generating code and putting some restrictions on the', 'tokens': [51468, 509, 458, 7363, 990, 264, 4846, 406, 337, 17746, 3089, 293, 3372, 512, 14191, 322, 264, 51678], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 190, 'seek': 93488, 'start': 961.16, 'end': 962.16, 'text': ' code.', 'tokens': [51678, 3089, 13, 51728], 'temperature': 0.0, 'avg_logprob': -0.34469090738604147, 'compression_ratio': 1.806083650190114, 'no_speech_prob': 0.3904845714569092}, {'id': 191, 'seek': 96216, 'start': 962.16, 'end': 965.3199999999999, 'text': ' So what is generated that information is lost.', 'tokens': [50364, 407, 437, 307, 10833, 300, 1589, 307, 2731, 13, 50522], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 192, 'seek': 96216, 'start': 965.3199999999999, 'end': 966.64, 'text': ' Which is what I want to show you.', 'tokens': [50522, 3013, 307, 437, 286, 528, 281, 855, 291, 13, 50588], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 193, 'seek': 96216, 'start': 966.64, 'end': 970.76, 'text': ' How it happens in the case of virtual functions.', 'tokens': [50588, 1012, 309, 2314, 294, 264, 1389, 295, 6374, 6828, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 194, 'seek': 96216, 'start': 970.76, 'end': 975.36, 'text': ' Any other question?', 'tokens': [50794, 2639, 661, 1168, 30, 51024], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 195, 'seek': 96216, 'start': 975.36, 'end': 978.76, 'text': ' So this is clear how data members are inherited.', 'tokens': [51024, 407, 341, 307, 1850, 577, 1412, 2679, 366, 27091, 13, 51194], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 196, 'seek': 96216, 'start': 978.76, 'end': 979.76, 'text': ' Pretty simple.', 'tokens': [51194, 10693, 2199, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 197, 'seek': 96216, 'start': 979.76, 'end': 981.88, 'text': ' No big deal.', 'tokens': [51244, 883, 955, 2028, 13, 51350], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 198, 'seek': 96216, 'start': 981.88, 'end': 985.16, 'text': ' Non-virtual functions again pretty simple.', 'tokens': [51350, 8774, 12, 85, 2498, 901, 6828, 797, 1238, 2199, 13, 51514], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 199, 'seek': 96216, 'start': 985.16, 'end': 986.24, 'text': ' No big deal.', 'tokens': [51514, 883, 955, 2028, 13, 51568], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 200, 'seek': 96216, 'start': 986.24, 'end': 990.4, 'text': ' So virtual functions create interesting possibilities based on the object to which a pointer points', 'tokens': [51568, 407, 6374, 6828, 1884, 1880, 12178, 2361, 322, 264, 2657, 281, 597, 257, 23918, 2793, 51776], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 201, 'seek': 96216, 'start': 990.4, 'end': 991.4, 'text': ' to.', 'tokens': [51776, 281, 13, 51826], 'temperature': 0.0, 'avg_logprob': -0.25117157055781436, 'compression_ratio': 1.7155555555555555, 'no_speech_prob': 0.02225271426141262}, {'id': 202, 'seek': 99140, 'start': 991.64, 'end': 995.56, 'text': ' A pointer to base class may point to an object of any derived class in the class hierarchy', 'tokens': [50376, 316, 23918, 281, 3096, 1508, 815, 935, 281, 364, 2657, 295, 604, 18949, 1508, 294, 264, 1508, 22333, 50572], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 203, 'seek': 99140, 'start': 995.56, 'end': 999.16, 'text': ' and the virtual function should be picked up for that object.', 'tokens': [50572, 293, 264, 6374, 2445, 820, 312, 6183, 493, 337, 300, 2657, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 204, 'seek': 99140, 'start': 999.16, 'end': 1005.92, 'text': ' And we want to do as much decision at compile time as possible leaving very little to the', 'tokens': [50752, 400, 321, 528, 281, 360, 382, 709, 3537, 412, 31413, 565, 382, 1944, 5012, 588, 707, 281, 264, 51090], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 205, 'seek': 99140, 'start': 1005.92, 'end': 1006.92, 'text': ' run time.', 'tokens': [51090, 1190, 565, 13, 51140], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 206, 'seek': 99140, 'start': 1006.92, 'end': 1008.38, 'text': ' So what is this arrangement?', 'tokens': [51140, 407, 437, 307, 341, 17620, 30, 51213], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 207, 'seek': 99140, 'start': 1008.38, 'end': 1011.92, 'text': ' What is this static plus dynamic arrangement which enables this?', 'tokens': [51213, 708, 307, 341, 13437, 1804, 8546, 17620, 597, 17077, 341, 30, 51390], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 208, 'seek': 99140, 'start': 1011.92, 'end': 1019.3199999999999, 'text': " It can't be pure in general it can't be purely compile time but virtual function optimization", 'tokens': [51390, 467, 393, 380, 312, 6075, 294, 2674, 309, 393, 380, 312, 17491, 31413, 565, 457, 6374, 2445, 19618, 51760], 'temperature': 0.0, 'avg_logprob': -0.19787997825472964, 'compression_ratio': 1.76, 'no_speech_prob': 0.014055931940674782}, {'id': 209, 'seek': 101932, 'start': 1019.32, 'end': 1023.24, 'text': ' means try to do it purely at compile time.', 'tokens': [50364, 1355, 853, 281, 360, 309, 17491, 412, 31413, 565, 13, 50560], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 210, 'seek': 101932, 'start': 1023.24, 'end': 1027.48, 'text': " So let's look at some example of a virtual function and I am going to explain this.", 'tokens': [50560, 407, 718, 311, 574, 412, 512, 1365, 295, 257, 6374, 2445, 293, 286, 669, 516, 281, 2903, 341, 13, 50772], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 211, 'seek': 101932, 'start': 1027.48, 'end': 1035.4, 'text': ' So we have class A, B derives from A and C derives from B. We have this function F. In', 'tokens': [50772, 407, 321, 362, 1508, 316, 11, 363, 1163, 1539, 490, 316, 293, 383, 1163, 1539, 490, 363, 13, 492, 362, 341, 2445, 479, 13, 682, 51168], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 212, 'seek': 101932, 'start': 1035.4, 'end': 1038.72, 'text': ' A we have F without an argument.', 'tokens': [51168, 316, 321, 362, 479, 1553, 364, 6770, 13, 51334], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 213, 'seek': 101932, 'start': 1038.72, 'end': 1041.54, 'text': ' We have F with an argument so there is overloading.', 'tokens': [51334, 492, 362, 479, 365, 364, 6770, 370, 456, 307, 28777, 278, 13, 51475], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 214, 'seek': 101932, 'start': 1041.54, 'end': 1047.52, 'text': ' So depending upon the parameter we call different F and there is a G. All these are virtual', 'tokens': [51475, 407, 5413, 3564, 264, 13075, 321, 818, 819, 479, 293, 456, 307, 257, 460, 13, 1057, 613, 366, 6374, 51774], 'temperature': 0.0, 'avg_logprob': -0.19608094759076555, 'compression_ratio': 1.6810344827586208, 'no_speech_prob': 0.022966580465435982}, {'id': 215, 'seek': 104752, 'start': 1047.52, 'end': 1052.44, 'text': ' functions none of them is a null virtual function and because they are not null virtual functions', 'tokens': [50364, 6828, 6022, 295, 552, 307, 257, 18184, 6374, 2445, 293, 570, 436, 366, 406, 18184, 6374, 6828, 50610], 'temperature': 0.0, 'avg_logprob': -0.23171842238482307, 'compression_ratio': 1.7540106951871657, 'no_speech_prob': 0.05606374889612198}, {'id': 216, 'seek': 104752, 'start': 1052.44, 'end': 1056.24, 'text': ' we should have their bodies and we will look at their bodies.', 'tokens': [50610, 321, 820, 362, 641, 7510, 293, 321, 486, 574, 412, 641, 7510, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.23171842238482307, 'compression_ratio': 1.7540106951871657, 'no_speech_prob': 0.05606374889612198}, {'id': 217, 'seek': 104752, 'start': 1056.24, 'end': 1058.22, 'text': " But let's look at what this does.", 'tokens': [50800, 583, 718, 311, 574, 412, 437, 341, 775, 13, 50899], 'temperature': 0.0, 'avg_logprob': -0.23171842238482307, 'compression_ratio': 1.7540106951871657, 'no_speech_prob': 0.05606374889612198}, {'id': 218, 'seek': 104752, 'start': 1058.22, 'end': 1065.08, 'text': " Class B defines a G and says it's virtual.", 'tokens': [50899, 9471, 363, 23122, 257, 460, 293, 1619, 309, 311, 6374, 13, 51242], 'temperature': 0.0, 'avg_logprob': -0.23171842238482307, 'compression_ratio': 1.7540106951871657, 'no_speech_prob': 0.05606374889612198}, {'id': 219, 'seek': 104752, 'start': 1065.08, 'end': 1074.68, 'text': ' It also defines F. So when B is called with F it should call this F and not this F. Because', 'tokens': [51242, 467, 611, 23122, 479, 13, 407, 562, 363, 307, 1219, 365, 479, 309, 820, 818, 341, 479, 293, 406, 341, 479, 13, 1436, 51722], 'temperature': 0.0, 'avg_logprob': -0.23171842238482307, 'compression_ratio': 1.7540106951871657, 'no_speech_prob': 0.05606374889612198}, {'id': 220, 'seek': 107468, 'start': 1075.0, 'end': 1081.3200000000002, 'text': ' this F is virtual when there is object of class B F we will look at this in more example', 'tokens': [50380, 341, 479, 307, 6374, 562, 456, 307, 2657, 295, 1508, 363, 479, 321, 486, 574, 412, 341, 294, 544, 1365, 50696], 'temperature': 0.0, 'avg_logprob': -0.1910724639892578, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.03844906762242317}, {'id': 221, 'seek': 107468, 'start': 1081.3200000000002, 'end': 1090.18, 'text': ' and C in turns only defines F. So the complex arrangement of virtual and non-virtual functions', 'tokens': [50696, 293, 383, 294, 4523, 787, 23122, 479, 13, 407, 264, 3997, 17620, 295, 6374, 293, 2107, 12, 85, 2498, 901, 6828, 51139], 'temperature': 0.0, 'avg_logprob': -0.1910724639892578, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.03844906762242317}, {'id': 222, 'seek': 107468, 'start': 1090.18, 'end': 1093.16, 'text': ' and we want to see what can a compiler do with it.', 'tokens': [51139, 293, 321, 528, 281, 536, 437, 393, 257, 31958, 360, 365, 309, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.1910724639892578, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.03844906762242317}, {'id': 223, 'seek': 107468, 'start': 1093.16, 'end': 1095.8200000000002, 'text': " So let's first look at their bodies.", 'tokens': [51288, 407, 718, 311, 700, 574, 412, 641, 7510, 13, 51421], 'temperature': 0.0, 'avg_logprob': -0.1910724639892578, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.03844906762242317}, {'id': 224, 'seek': 107468, 'start': 1095.8200000000002, 'end': 1104.3400000000001, 'text': " So this function F because it's in A it simply prints A colon F. This function prints", 'tokens': [51421, 407, 341, 2445, 479, 570, 309, 311, 294, 316, 309, 2935, 22305, 316, 8255, 479, 13, 639, 2445, 22305, 51847], 'temperature': 0.0, 'avg_logprob': -0.1910724639892578, 'compression_ratio': 1.6527777777777777, 'no_speech_prob': 0.03844906762242317}, {'id': 225, 'seek': 110434, 'start': 1104.34, 'end': 1111.4599999999998, 'text': ' A colon F and also prints the string the argument and this function simply says A colon G. So', 'tokens': [50364, 316, 8255, 479, 293, 611, 22305, 264, 6798, 264, 6770, 293, 341, 2445, 2935, 1619, 316, 8255, 460, 13, 407, 50720], 'temperature': 0.0, 'avg_logprob': -0.1708756649132931, 'compression_ratio': 1.9368932038834952, 'no_speech_prob': 0.001454929239116609}, {'id': 226, 'seek': 110434, 'start': 1111.4599999999998, 'end': 1116.06, 'text': ' most of function simply say where they have been invoked from.', 'tokens': [50720, 881, 295, 2445, 2935, 584, 689, 436, 362, 668, 1048, 9511, 490, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.1708756649132931, 'compression_ratio': 1.9368932038834952, 'no_speech_prob': 0.001454929239116609}, {'id': 227, 'seek': 110434, 'start': 1116.06, 'end': 1122.34, 'text': ' This function G says that this function belongs to B colon G. This function F says that this', 'tokens': [50950, 639, 2445, 460, 1619, 300, 341, 2445, 12953, 281, 363, 8255, 460, 13, 639, 2445, 479, 1619, 300, 341, 51264], 'temperature': 0.0, 'avg_logprob': -0.1708756649132931, 'compression_ratio': 1.9368932038834952, 'no_speech_prob': 0.001454929239116609}, {'id': 228, 'seek': 110434, 'start': 1122.34, 'end': 1128.78, 'text': " belongs to B so it's B colon F and this says this is C colon F. So a simple idea behind", 'tokens': [51264, 12953, 281, 363, 370, 309, 311, 363, 8255, 479, 293, 341, 1619, 341, 307, 383, 8255, 479, 13, 407, 257, 2199, 1558, 2261, 51586], 'temperature': 0.0, 'avg_logprob': -0.1708756649132931, 'compression_ratio': 1.9368932038834952, 'no_speech_prob': 0.001454929239116609}, {'id': 229, 'seek': 110434, 'start': 1128.78, 'end': 1132.26, 'text': ' just to identify which function is being called at what time.', 'tokens': [51586, 445, 281, 5876, 597, 2445, 307, 885, 1219, 412, 437, 565, 13, 51760], 'temperature': 0.0, 'avg_logprob': -0.1708756649132931, 'compression_ratio': 1.9368932038834952, 'no_speech_prob': 0.001454929239116609}, {'id': 230, 'seek': 113226, 'start': 1132.82, 'end': 1139.14, 'text': " Is the arrangement of functions clear? Now let's see what happens when we look at execution.", 'tokens': [50392, 1119, 264, 17620, 295, 6828, 1850, 30, 823, 718, 311, 536, 437, 2314, 562, 321, 574, 412, 15058, 13, 50708], 'temperature': 0.0, 'avg_logprob': -0.21406353989692584, 'compression_ratio': 1.5243243243243243, 'no_speech_prob': 0.0038238009437918663}, {'id': 231, 'seek': 113226, 'start': 1139.14, 'end': 1148.22, 'text': " So these are the virtual functions. So let's look at this. We have this A, B, C three objects of", 'tokens': [50708, 407, 613, 366, 264, 6374, 6828, 13, 407, 718, 311, 574, 412, 341, 13, 492, 362, 341, 316, 11, 363, 11, 383, 1045, 6565, 295, 51162], 'temperature': 0.0, 'avg_logprob': -0.21406353989692584, 'compression_ratio': 1.5243243243243243, 'no_speech_prob': 0.0038238009437918663}, {'id': 232, 'seek': 113226, 'start': 1148.22, 'end': 1154.02, 'text': " respective classes A, B, C and now we are doing certain things and we want to imagine what's", 'tokens': [51162, 23649, 5359, 316, 11, 363, 11, 383, 293, 586, 321, 366, 884, 1629, 721, 293, 321, 528, 281, 3811, 437, 311, 51452], 'temperature': 0.0, 'avg_logprob': -0.21406353989692584, 'compression_ratio': 1.5243243243243243, 'no_speech_prob': 0.0038238009437918663}, {'id': 233, 'seek': 115402, 'start': 1154.02, 'end': 1163.46, 'text': ' going to get printed. We want to see some calls. So here we have P points to an object of type A', 'tokens': [50364, 516, 281, 483, 13567, 13, 492, 528, 281, 536, 512, 5498, 13, 407, 510, 321, 362, 430, 2793, 281, 364, 2657, 295, 2010, 316, 50836], 'temperature': 0.0, 'avg_logprob': -0.1853919115933505, 'compression_ratio': 1.4104477611940298, 'no_speech_prob': 0.012429107911884785}, {'id': 234, 'seek': 115402, 'start': 1163.46, 'end': 1174.3799999999999, 'text': ' and then we call P arrow F with this string class A. This P arrow F, this P arrow G. So this', 'tokens': [50836, 293, 550, 321, 818, 430, 11610, 479, 365, 341, 6798, 1508, 316, 13, 639, 430, 11610, 479, 11, 341, 430, 11610, 460, 13, 407, 341, 51382], 'temperature': 0.0, 'avg_logprob': -0.1853919115933505, 'compression_ratio': 1.4104477611940298, 'no_speech_prob': 0.012429107911884785}, {'id': 235, 'seek': 117438, 'start': 1174.38, 'end': 1184.94, 'text': " function is going to print AF dot class A. Let's look at the function body. It says AF dot that", 'tokens': [50364, 2445, 307, 516, 281, 4482, 20389, 5893, 1508, 316, 13, 961, 311, 574, 412, 264, 2445, 1772, 13, 467, 1619, 20389, 5893, 300, 50892], 'temperature': 0.0, 'avg_logprob': -0.1439737815123338, 'compression_ratio': 1.410071942446043, 'no_speech_prob': 0.011327458545565605}, {'id': 236, 'seek': 117438, 'start': 1184.94, 'end': 1198.1000000000001, 'text': ' particular string. So this will print AF class A. Easy? No doubts about that? This F will simply say', 'tokens': [50892, 1729, 6798, 13, 407, 341, 486, 4482, 20389, 1508, 316, 13, 16002, 30, 883, 22618, 466, 300, 30, 639, 479, 486, 2935, 584, 51550], 'temperature': 0.0, 'avg_logprob': -0.1439737815123338, 'compression_ratio': 1.410071942446043, 'no_speech_prob': 0.011327458545565605}, {'id': 237, 'seek': 119810, 'start': 1198.2199999999998, 'end': 1205.4199999999998, 'text': ' this is an F in class A, the one without the argument and this will say this is a G in class', 'tokens': [50370, 341, 307, 364, 479, 294, 1508, 316, 11, 264, 472, 1553, 264, 6770, 293, 341, 486, 584, 341, 307, 257, 460, 294, 1508, 50730], 'temperature': 0.0, 'avg_logprob': -0.11026025587512601, 'compression_ratio': 1.7464788732394365, 'no_speech_prob': 0.023683100938796997}, {'id': 238, 'seek': 119810, 'start': 1205.4199999999998, 'end': 1212.74, 'text': ' A. So this is a pointer to the base class anyway. So we will have everything printed for the base', 'tokens': [50730, 316, 13, 407, 341, 307, 257, 23918, 281, 264, 3096, 1508, 4033, 13, 407, 321, 486, 362, 1203, 13567, 337, 264, 3096, 51096], 'temperature': 0.0, 'avg_logprob': -0.11026025587512601, 'compression_ratio': 1.7464788732394365, 'no_speech_prob': 0.023683100938796997}, {'id': 239, 'seek': 119810, 'start': 1212.74, 'end': 1218.58, 'text': " class. So that's not so much of an interesting thing. Let's make the situation a little more", 'tokens': [51096, 1508, 13, 407, 300, 311, 406, 370, 709, 295, 364, 1880, 551, 13, 961, 311, 652, 264, 2590, 257, 707, 544, 51388], 'temperature': 0.0, 'avg_logprob': -0.11026025587512601, 'compression_ratio': 1.7464788732394365, 'no_speech_prob': 0.023683100938796997}, {'id': 240, 'seek': 119810, 'start': 1218.58, 'end': 1227.26, 'text': ' interesting by having a pointer pointing to address of class B. What do you think should', 'tokens': [51388, 1880, 538, 1419, 257, 23918, 12166, 281, 2985, 295, 1508, 363, 13, 708, 360, 291, 519, 820, 51822], 'temperature': 0.0, 'avg_logprob': -0.11026025587512601, 'compression_ratio': 1.7464788732394365, 'no_speech_prob': 0.023683100938796997}, {'id': 241, 'seek': 122726, 'start': 1227.26, 'end': 1239.54, 'text': ' be printed here now? This should be because there is no string function here. So the string', 'tokens': [50364, 312, 13567, 510, 586, 30, 639, 820, 312, 570, 456, 307, 572, 6798, 2445, 510, 13, 407, 264, 6798, 50978], 'temperature': 0.0, 'avg_logprob': -0.11599981023910198, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.0196757223457098}, {'id': 242, 'seek': 122726, 'start': 1239.54, 'end': 1247.62, 'text': ' function of A dot F should get invoked. What should this print? B dot F. What should this', 'tokens': [50978, 2445, 295, 316, 5893, 479, 820, 483, 1048, 9511, 13, 708, 820, 341, 4482, 30, 363, 5893, 479, 13, 708, 820, 341, 51382], 'temperature': 0.0, 'avg_logprob': -0.11599981023910198, 'compression_ratio': 1.587719298245614, 'no_speech_prob': 0.0196757223457098}, {'id': 243, 'seek': 124762, 'start': 1247.62, 'end': 1257.34, 'text': ' print? B dot G. So it prints the following. A dot F class B because parameter is class B.', 'tokens': [50364, 4482, 30, 363, 5893, 460, 13, 407, 309, 22305, 264, 3480, 13, 316, 5893, 479, 1508, 363, 570, 13075, 307, 1508, 363, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.14363231464308135, 'compression_ratio': 1.376923076923077, 'no_speech_prob': 0.013219020329415798}, {'id': 244, 'seek': 124762, 'start': 1257.34, 'end': 1269.4599999999998, 'text': ' So you are passing the name of class B to a function which is virtual but it has not been', 'tokens': [50850, 407, 291, 366, 8437, 264, 1315, 295, 1508, 363, 281, 257, 2445, 597, 307, 6374, 457, 309, 575, 406, 668, 51456], 'temperature': 0.0, 'avg_logprob': -0.14363231464308135, 'compression_ratio': 1.376923076923077, 'no_speech_prob': 0.013219020329415798}, {'id': 245, 'seek': 126946, 'start': 1269.46, 'end': 1278.06, 'text': ' defined in B and since it has not been defined in B, it is going to pick up the copy from A and', 'tokens': [50364, 7642, 294, 363, 293, 1670, 309, 575, 406, 668, 7642, 294, 363, 11, 309, 307, 516, 281, 1888, 493, 264, 5055, 490, 316, 293, 50794], 'temperature': 0.0, 'avg_logprob': -0.1716171239877676, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.19671879708766937}, {'id': 246, 'seek': 126946, 'start': 1278.06, 'end': 1288.14, 'text': ' therefore it says A dot F with the parameter class B. Now we are calling F which is a virtual', 'tokens': [50794, 4412, 309, 1619, 316, 5893, 479, 365, 264, 13075, 1508, 363, 13, 823, 321, 366, 5141, 479, 597, 307, 257, 6374, 51298], 'temperature': 0.0, 'avg_logprob': -0.1716171239877676, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.19671879708766937}, {'id': 247, 'seek': 126946, 'start': 1288.14, 'end': 1294.42, 'text': ' function which has been defined in B. So it is not going to pick up the value from A. Instead it is', 'tokens': [51298, 2445, 597, 575, 668, 7642, 294, 363, 13, 407, 309, 307, 406, 516, 281, 1888, 493, 264, 2158, 490, 316, 13, 7156, 309, 307, 51612], 'temperature': 0.0, 'avg_logprob': -0.1716171239877676, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.19671879708766937}, {'id': 248, 'seek': 129442, 'start': 1294.42, 'end': 1303.94, 'text': ' going to pick up the function body from B and therefore it will print B dot F. Similarly for', 'tokens': [50364, 516, 281, 1888, 493, 264, 2445, 1772, 490, 363, 293, 4412, 309, 486, 4482, 363, 5893, 479, 13, 13157, 337, 50840], 'temperature': 0.0, 'avg_logprob': -0.1332222706562764, 'compression_ratio': 1.4731182795698925, 'no_speech_prob': 0.045984189957380295}, {'id': 249, 'seek': 129442, 'start': 1303.94, 'end': 1311.46, 'text': " G. So it is going to print B dot G. Easy? No doubts in anybody's mind? All of you with me?", 'tokens': [50840, 460, 13, 407, 309, 307, 516, 281, 4482, 363, 5893, 460, 13, 16002, 30, 883, 22618, 294, 4472, 311, 1575, 30, 1057, 295, 291, 365, 385, 30, 51216], 'temperature': 0.0, 'avg_logprob': -0.1332222706562764, 'compression_ratio': 1.4731182795698925, 'no_speech_prob': 0.045984189957380295}, {'id': 250, 'seek': 129442, 'start': 1311.46, 'end': 1320.8200000000002, 'text': " Wonderful. Let's make the situation even more interesting by picking up a pointer to C. So", 'tokens': [51216, 22768, 13, 961, 311, 652, 264, 2590, 754, 544, 1880, 538, 8867, 493, 257, 23918, 281, 383, 13, 407, 51684], 'temperature': 0.0, 'avg_logprob': -0.1332222706562764, 'compression_ratio': 1.4731182795698925, 'no_speech_prob': 0.045984189957380295}, {'id': 251, 'seek': 132082, 'start': 1320.82, 'end': 1333.1799999999998, 'text': ' when we have a pointer to C, now what will be printed? This will print. This function will', 'tokens': [50364, 562, 321, 362, 257, 23918, 281, 383, 11, 586, 437, 486, 312, 13567, 30, 639, 486, 4482, 13, 639, 2445, 486, 50982], 'temperature': 0.0, 'avg_logprob': -0.15610405739317548, 'compression_ratio': 1.4153846153846155, 'no_speech_prob': 0.10072662681341171}, {'id': 252, 'seek': 132082, 'start': 1333.1799999999998, 'end': 1341.62, 'text': ' have to come only from here because there is no F with string anywhere. What will this print?', 'tokens': [50982, 362, 281, 808, 787, 490, 510, 570, 456, 307, 572, 479, 365, 6798, 4992, 13, 708, 486, 341, 4482, 30, 51404], 'temperature': 0.0, 'avg_logprob': -0.15610405739317548, 'compression_ratio': 1.4153846153846155, 'no_speech_prob': 0.10072662681341171}, {'id': 253, 'seek': 134162, 'start': 1341.62, 'end': 1360.34, 'text': ' P is B equal to and C. P is a pointer of P has been declared a pointer to A but it holds object', 'tokens': [50364, 430, 307, 363, 2681, 281, 293, 383, 13, 430, 307, 257, 23918, 295, 430, 575, 668, 15489, 257, 23918, 281, 316, 457, 309, 9190, 2657, 51300], 'temperature': 0.0, 'avg_logprob': -0.3215664501847892, 'compression_ratio': 1.1585365853658536, 'no_speech_prob': 0.14753790199756622}, {'id': 254, 'seek': 136034, 'start': 1360.34, 'end': 1374.26, 'text': ' of C. What should be printed? Tell me. So this will be AF. What will be this? C dot F and what will be this?', 'tokens': [50364, 295, 383, 13, 708, 820, 312, 13567, 30, 5115, 385, 13, 407, 341, 486, 312, 20389, 13, 708, 486, 312, 341, 30, 383, 5893, 479, 293, 437, 486, 312, 341, 30, 51060], 'temperature': 0.0, 'avg_logprob': -0.25559019361223495, 'compression_ratio': 1.2857142857142858, 'no_speech_prob': 0.6034645438194275}, {'id': 255, 'seek': 137426, 'start': 1374.26, 'end': 1397.3799999999999, 'text': ' Have I managed to divide the class? How many of you think this will be A dot G? No one. How many', 'tokens': [50364, 3560, 286, 6453, 281, 9845, 264, 1508, 30, 1012, 867, 295, 291, 519, 341, 486, 312, 316, 5893, 460, 30, 883, 472, 13, 1012, 867, 51520], 'temperature': 0.0, 'avg_logprob': -0.15836423018883014, 'compression_ratio': 1.1162790697674418, 'no_speech_prob': 0.09468372911214828}, {'id': 256, 'seek': 139738, 'start': 1397.38, 'end': 1406.3000000000002, 'text': ' of you think this will be B dot G? Anyone who thinks it will be C dot G? No because there is', 'tokens': [50364, 295, 291, 519, 341, 486, 312, 363, 5893, 460, 30, 14643, 567, 7309, 309, 486, 312, 383, 5893, 460, 30, 883, 570, 456, 307, 50810], 'temperature': 0.0, 'avg_logprob': -0.14993769122708228, 'compression_ratio': 1.5241935483870968, 'no_speech_prob': 0.21902170777320862}, {'id': 257, 'seek': 139738, 'start': 1406.3000000000002, 'end': 1421.5, 'text': ' no G in C. And this F, how many of you think it will be A dot F? None. B dot F? Why will it be B', 'tokens': [50810, 572, 460, 294, 383, 13, 400, 341, 479, 11, 577, 867, 295, 291, 519, 309, 486, 312, 316, 5893, 479, 30, 14492, 13, 363, 5893, 479, 30, 1545, 486, 309, 312, 363, 51570], 'temperature': 0.0, 'avg_logprob': -0.14993769122708228, 'compression_ratio': 1.5241935483870968, 'no_speech_prob': 0.21902170777320862}, {'id': 258, 'seek': 142150, 'start': 1421.5, 'end': 1447.26, 'text': " dot F? There is an F defined here. Pointer doesn't point to A, pointer points to C. So", 'tokens': [50364, 5893, 479, 30, 821, 307, 364, 479, 7642, 510, 13, 6165, 5106, 1177, 380, 935, 281, 316, 11, 23918, 2793, 281, 383, 13, 407, 51652], 'temperature': 0.0, 'avg_logprob': -0.21290610517774308, 'compression_ratio': 1.1025641025641026, 'no_speech_prob': 0.7840904593467712}, {'id': 259, 'seek': 144726, 'start': 1447.26, 'end': 1462.3799999999999, 'text': " let us see what does my output say? It would have picked up this F. I don't know whether this", 'tokens': [50364, 718, 505, 536, 437, 775, 452, 5598, 584, 30, 467, 576, 362, 6183, 493, 341, 479, 13, 286, 500, 380, 458, 1968, 341, 51120], 'temperature': 0.0, 'avg_logprob': -0.21446538854528358, 'compression_ratio': 1.0689655172413792, 'no_speech_prob': 0.8898427486419678}, {'id': 260, 'seek': 146238, 'start': 1462.38, 'end': 1482.74, 'text': " should have been virtual. I don't remember that. So this will override this function. It will", 'tokens': [50364, 820, 362, 668, 6374, 13, 286, 500, 380, 1604, 300, 13, 407, 341, 486, 42321, 341, 2445, 13, 467, 486, 51382], 'temperature': 0.0, 'avg_logprob': -0.16936684669332303, 'compression_ratio': 1.5798319327731092, 'no_speech_prob': 0.2446426898241043}, {'id': 261, 'seek': 146238, 'start': 1482.74, 'end': 1490.7, 'text': ' override this function. So there is overriding and there is a virtual business. Now let us see', 'tokens': [51382, 42321, 341, 2445, 13, 407, 456, 307, 670, 81, 2819, 293, 456, 307, 257, 6374, 1606, 13, 823, 718, 505, 536, 51780], 'temperature': 0.0, 'avg_logprob': -0.16936684669332303, 'compression_ratio': 1.5798319327731092, 'no_speech_prob': 0.2446426898241043}, {'id': 262, 'seek': 149070, 'start': 1490.7, 'end': 1500.18, 'text': ' how is this complex arrangement implemented? That is the overall idea. Now let us get back to,', 'tokens': [50364, 577, 307, 341, 3997, 17620, 12270, 30, 663, 307, 264, 4787, 1558, 13, 823, 718, 505, 483, 646, 281, 11, 50838], 'temperature': 0.0, 'avg_logprob': -0.23567727032829733, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.11262296885251999}, {'id': 263, 'seek': 149070, 'start': 1500.18, 'end': 1508.54, 'text': ' so if this is the virtual function, if no virtual function, it will always be based on the declaration', 'tokens': [50838, 370, 498, 341, 307, 264, 6374, 2445, 11, 498, 572, 6374, 2445, 11, 309, 486, 1009, 312, 2361, 322, 264, 27606, 51256], 'temperature': 0.0, 'avg_logprob': -0.23567727032829733, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.11262296885251999}, {'id': 264, 'seek': 149070, 'start': 1508.54, 'end': 1516.66, 'text': ' of the pointer. It will always be A dot F. So virtual function resolution is partially static', 'tokens': [51256, 295, 264, 23918, 13, 467, 486, 1009, 312, 316, 5893, 479, 13, 407, 6374, 2445, 8669, 307, 18886, 13437, 51662], 'temperature': 0.0, 'avg_logprob': -0.23567727032829733, 'compression_ratio': 1.6534090909090908, 'no_speech_prob': 0.11262296885251999}, {'id': 265, 'seek': 151666, 'start': 1516.66, 'end': 1522.8200000000002, 'text': ' and partially dynamic activity. At compile time, a compiler creates what it calls a virtual function', 'tokens': [50364, 293, 18886, 8546, 5191, 13, 1711, 31413, 565, 11, 257, 31958, 7829, 437, 309, 5498, 257, 6374, 2445, 50672], 'temperature': 0.0, 'avg_logprob': -0.13917439897483755, 'compression_ratio': 2.00836820083682, 'no_speech_prob': 0.7806322574615479}, {'id': 266, 'seek': 151666, 'start': 1522.8200000000002, 'end': 1528.6200000000001, 'text': ' table. There is a virtual function table for every class in the class hierarchy, a separate', 'tokens': [50672, 3199, 13, 821, 307, 257, 6374, 2445, 3199, 337, 633, 1508, 294, 264, 1508, 22333, 11, 257, 4994, 50962], 'temperature': 0.0, 'avg_logprob': -0.13917439897483755, 'compression_ratio': 2.00836820083682, 'no_speech_prob': 0.7806322574615479}, {'id': 267, 'seek': 151666, 'start': 1528.6200000000001, 'end': 1534.98, 'text': ' virtual function table for every class. And a compiler generates code to pick up the appropriate', 'tokens': [50962, 6374, 2445, 3199, 337, 633, 1508, 13, 400, 257, 31958, 23815, 3089, 281, 1888, 493, 264, 6854, 51280], 'temperature': 0.0, 'avg_logprob': -0.13917439897483755, 'compression_ratio': 2.00836820083682, 'no_speech_prob': 0.7806322574615479}, {'id': 268, 'seek': 151666, 'start': 1534.98, 'end': 1540.78, 'text': ' function by indexing into the virtual table for each class. So it is very efficient. In one table,', 'tokens': [51280, 2445, 538, 8186, 278, 666, 264, 6374, 3199, 337, 1184, 1508, 13, 407, 309, 307, 588, 7148, 13, 682, 472, 3199, 11, 51570], 'temperature': 0.0, 'avg_logprob': -0.13917439897483755, 'compression_ratio': 2.00836820083682, 'no_speech_prob': 0.7806322574615479}, {'id': 269, 'seek': 151666, 'start': 1540.78, 'end': 1545.98, 'text': ' at the second position, you want to put the function, at the third position you want to put', 'tokens': [51570, 412, 264, 1150, 2535, 11, 291, 528, 281, 829, 264, 2445, 11, 412, 264, 2636, 2535, 291, 528, 281, 829, 51830], 'temperature': 0.0, 'avg_logprob': -0.13917439897483755, 'compression_ratio': 2.00836820083682, 'no_speech_prob': 0.7806322574615479}, {'id': 270, 'seek': 154598, 'start': 1545.98, 'end': 1550.22, 'text': ' the function and that function will be called. And we want to see how this arrangement is made.', 'tokens': [50364, 264, 2445, 293, 300, 2445, 486, 312, 1219, 13, 400, 321, 528, 281, 536, 577, 341, 17620, 307, 1027, 13, 50576], 'temperature': 0.0, 'avg_logprob': -0.19933178845573873, 'compression_ratio': 1.6395348837209303, 'no_speech_prob': 0.002888706512749195}, {'id': 271, 'seek': 154598, 'start': 1550.22, 'end': 1563.18, 'text': ' Okay, so again the same code with, so we have naive code looks like this. We have these three', 'tokens': [50576, 1033, 11, 370, 797, 264, 912, 3089, 365, 11, 370, 321, 362, 29052, 3089, 1542, 411, 341, 13, 492, 362, 613, 1045, 51224], 'temperature': 0.0, 'avg_logprob': -0.19933178845573873, 'compression_ratio': 1.6395348837209303, 'no_speech_prob': 0.002888706512749195}, {'id': 272, 'seek': 154598, 'start': 1563.18, 'end': 1570.78, 'text': ' functions. V stands for virtual. We have these functions and so this class has inherited all', 'tokens': [51224, 6828, 13, 691, 7382, 337, 6374, 13, 492, 362, 613, 6828, 293, 370, 341, 1508, 575, 27091, 439, 51604], 'temperature': 0.0, 'avg_logprob': -0.19933178845573873, 'compression_ratio': 1.6395348837209303, 'no_speech_prob': 0.002888706512749195}, {'id': 273, 'seek': 157078, 'start': 1570.78, 'end': 1577.42, 'text': ' these functions and then there are local functions of this and this class has inherited everything', 'tokens': [50364, 613, 6828, 293, 550, 456, 366, 2654, 6828, 295, 341, 293, 341, 1508, 575, 27091, 1203, 50696], 'temperature': 0.0, 'avg_logprob': -0.13986762364705405, 'compression_ratio': 1.7809523809523808, 'no_speech_prob': 0.0284147709608078}, {'id': 274, 'seek': 157078, 'start': 1577.42, 'end': 1583.98, 'text': ' that V has and additionally has F, the same arrangement. And now we want to first look at', 'tokens': [50696, 300, 691, 575, 293, 43181, 575, 479, 11, 264, 912, 17620, 13, 400, 586, 321, 528, 281, 700, 574, 412, 51024], 'temperature': 0.0, 'avg_logprob': -0.13986762364705405, 'compression_ratio': 1.7809523809523808, 'no_speech_prob': 0.0284147709608078}, {'id': 275, 'seek': 157078, 'start': 1583.98, 'end': 1589.62, 'text': ' some examples before we actually look at the arrangement. Okay, so first look at this case.', 'tokens': [51024, 512, 5110, 949, 321, 767, 574, 412, 264, 17620, 13, 1033, 11, 370, 700, 574, 412, 341, 1389, 13, 51306], 'temperature': 0.0, 'avg_logprob': -0.13986762364705405, 'compression_ratio': 1.7809523809523808, 'no_speech_prob': 0.0284147709608078}, {'id': 276, 'seek': 157078, 'start': 1589.62, 'end': 1599.46, 'text': ' P is a pointer to class A, okay, but we do not know what P actually holds. It is a pointer to', 'tokens': [51306, 430, 307, 257, 23918, 281, 1508, 316, 11, 1392, 11, 457, 321, 360, 406, 458, 437, 430, 767, 9190, 13, 467, 307, 257, 23918, 281, 51798], 'temperature': 0.0, 'avg_logprob': -0.13986762364705405, 'compression_ratio': 1.7809523809523808, 'no_speech_prob': 0.0284147709608078}, {'id': 277, 'seek': 159946, 'start': 1599.46, 'end': 1606.38, 'text': ' class A, but it may be holding an object of class B or an object of class C. Anything is possible.', 'tokens': [50364, 1508, 316, 11, 457, 309, 815, 312, 5061, 364, 2657, 295, 1508, 363, 420, 364, 2657, 295, 1508, 383, 13, 11998, 307, 1944, 13, 50710], 'temperature': 0.0, 'avg_logprob': -0.20825068155924478, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.04077555984258652}, {'id': 278, 'seek': 159946, 'start': 1606.38, 'end': 1616.94, 'text': ' So we do not know which class is. Okay, and now we are calling P F. Okay, so at compile time,', 'tokens': [50710, 407, 321, 360, 406, 458, 597, 1508, 307, 13, 1033, 11, 293, 586, 321, 366, 5141, 430, 479, 13, 1033, 11, 370, 412, 31413, 565, 11, 51238], 'temperature': 0.0, 'avg_logprob': -0.20825068155924478, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.04077555984258652}, {'id': 279, 'seek': 159946, 'start': 1616.94, 'end': 1625.38, 'text': ' in general, which object, what is the object whose address is being held in a pointer is a', 'tokens': [51238, 294, 2674, 11, 597, 2657, 11, 437, 307, 264, 2657, 6104, 2985, 307, 885, 5167, 294, 257, 23918, 307, 257, 51660], 'temperature': 0.0, 'avg_logprob': -0.20825068155924478, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.04077555984258652}, {'id': 280, 'seek': 162538, 'start': 1625.38, 'end': 1633.38, 'text': ' runtime activity in general. At compile time, we do not know that. Okay, so we do not know the class', 'tokens': [50364, 34474, 5191, 294, 2674, 13, 1711, 31413, 565, 11, 321, 360, 406, 458, 300, 13, 1033, 11, 370, 321, 360, 406, 458, 264, 1508, 50764], 'temperature': 0.0, 'avg_logprob': -0.1602265594202444, 'compression_ratio': 1.8689320388349515, 'no_speech_prob': 0.06752365082502365}, {'id': 281, 'seek': 162538, 'start': 1633.38, 'end': 1641.98, 'text': ' of the pointy of P. So it may be this F, right. If it happens to be a pointer to class B, it is', 'tokens': [50764, 295, 264, 935, 88, 295, 430, 13, 407, 309, 815, 312, 341, 479, 11, 558, 13, 759, 309, 2314, 281, 312, 257, 23918, 281, 1508, 363, 11, 309, 307, 51194], 'temperature': 0.0, 'avg_logprob': -0.1602265594202444, 'compression_ratio': 1.8689320388349515, 'no_speech_prob': 0.06752365082502365}, {'id': 282, 'seek': 162538, 'start': 1641.98, 'end': 1648.5, 'text': ' going to be one of these two. Okay, if it happens to be a pointer to this class, it is going to be', 'tokens': [51194, 516, 281, 312, 472, 295, 613, 732, 13, 1033, 11, 498, 309, 2314, 281, 312, 257, 23918, 281, 341, 1508, 11, 309, 307, 516, 281, 312, 51520], 'temperature': 0.0, 'avg_logprob': -0.1602265594202444, 'compression_ratio': 1.8689320388349515, 'no_speech_prob': 0.06752365082502365}, {'id': 283, 'seek': 162538, 'start': 1648.5, 'end': 1652.46, 'text': ' one of these and we will rule out which one is based on virtual function, but in general,', 'tokens': [51520, 472, 295, 613, 293, 321, 486, 4978, 484, 597, 472, 307, 2361, 322, 6374, 2445, 11, 457, 294, 2674, 11, 51718], 'temperature': 0.0, 'avg_logprob': -0.1602265594202444, 'compression_ratio': 1.8689320388349515, 'no_speech_prob': 0.06752365082502365}, {'id': 284, 'seek': 165246, 'start': 1652.46, 'end': 1659.54, 'text': ' that is a possibility. So we are looking at what are the decisions that can be taken without any', 'tokens': [50364, 300, 307, 257, 7959, 13, 407, 321, 366, 1237, 412, 437, 366, 264, 5327, 300, 393, 312, 2726, 1553, 604, 50718], 'temperature': 0.0, 'avg_logprob': -0.15724165145664998, 'compression_ratio': 1.6857142857142857, 'no_speech_prob': 0.017977850511670113}, {'id': 285, 'seek': 165246, 'start': 1659.54, 'end': 1668.42, 'text': ' runtime information. Here, without the runtime information, the idea is no decision can be taken.', 'tokens': [50718, 34474, 1589, 13, 1692, 11, 1553, 264, 34474, 1589, 11, 264, 1558, 307, 572, 3537, 393, 312, 2726, 13, 51162], 'temperature': 0.0, 'avg_logprob': -0.15724165145664998, 'compression_ratio': 1.6857142857142857, 'no_speech_prob': 0.017977850511670113}, {'id': 286, 'seek': 165246, 'start': 1668.42, 'end': 1679.18, 'text': ' Let us look at this situation. Now Q is a pointer to class B. Now, if I do not know what this points', 'tokens': [51162, 961, 505, 574, 412, 341, 2590, 13, 823, 1249, 307, 257, 23918, 281, 1508, 363, 13, 823, 11, 498, 286, 360, 406, 458, 437, 341, 2793, 51700], 'temperature': 0.0, 'avg_logprob': -0.15724165145664998, 'compression_ratio': 1.6857142857142857, 'no_speech_prob': 0.017977850511670113}, {'id': 287, 'seek': 167918, 'start': 1679.18, 'end': 1692.3, 'text': ' to. Okay, can Q hold the object, can Q hold the address of an object of class A? No, it is not', 'tokens': [50364, 281, 13, 1033, 11, 393, 1249, 1797, 264, 2657, 11, 393, 1249, 1797, 264, 2985, 295, 364, 2657, 295, 1508, 316, 30, 883, 11, 309, 307, 406, 51020], 'temperature': 0.0, 'avg_logprob': -0.16754686379734474, 'compression_ratio': 1.5706521739130435, 'no_speech_prob': 0.1278151422739029}, {'id': 288, 'seek': 167918, 'start': 1692.3, 'end': 1700.9, 'text': ' allowed. By typing, it is not allowed, right. So therefore, compiler can simply rule this out. No', 'tokens': [51020, 4350, 13, 3146, 18444, 11, 309, 307, 406, 4350, 11, 558, 13, 407, 4412, 11, 31958, 393, 2935, 4978, 341, 484, 13, 883, 51450], 'temperature': 0.0, 'avg_logprob': -0.16754686379734474, 'compression_ratio': 1.5706521739130435, 'no_speech_prob': 0.1278151422739029}, {'id': 289, 'seek': 167918, 'start': 1700.9, 'end': 1707.3, 'text': ' runtime information needed. It cannot be this function. Even if I do not know what the class is.', 'tokens': [51450, 34474, 1589, 2978, 13, 467, 2644, 312, 341, 2445, 13, 2754, 498, 286, 360, 406, 458, 437, 264, 1508, 307, 13, 51770], 'temperature': 0.0, 'avg_logprob': -0.16754686379734474, 'compression_ratio': 1.5706521739130435, 'no_speech_prob': 0.1278151422739029}, {'id': 290, 'seek': 170730, 'start': 1707.3, 'end': 1713.34, 'text': ' If the program is type correct, it can never be this function, right. So I am showing what are', 'tokens': [50364, 759, 264, 1461, 307, 2010, 3006, 11, 309, 393, 1128, 312, 341, 2445, 11, 558, 13, 407, 286, 669, 4099, 437, 366, 50666], 'temperature': 0.0, 'avg_logprob': -0.13879080935641452, 'compression_ratio': 1.77992277992278, 'no_speech_prob': 0.023616109043359756}, {'id': 291, 'seek': 170730, 'start': 1713.34, 'end': 1718.3799999999999, 'text': ' the things that can be easily derived at compile time. What are the things that need runtime', 'tokens': [50666, 264, 721, 300, 393, 312, 3612, 18949, 412, 31413, 565, 13, 708, 366, 264, 721, 300, 643, 34474, 50918], 'temperature': 0.0, 'avg_logprob': -0.13879080935641452, 'compression_ratio': 1.77992277992278, 'no_speech_prob': 0.023616109043359756}, {'id': 292, 'seek': 170730, 'start': 1718.3799999999999, 'end': 1723.94, 'text': ' decision and where things require compile time plus runtime decision, what the arrangement is', 'tokens': [50918, 3537, 293, 689, 721, 3651, 31413, 565, 1804, 34474, 3537, 11, 437, 264, 17620, 307, 51196], 'temperature': 0.0, 'avg_logprob': -0.13879080935641452, 'compression_ratio': 1.77992277992278, 'no_speech_prob': 0.023616109043359756}, {'id': 293, 'seek': 170730, 'start': 1723.94, 'end': 1732.5, 'text': ' made. That is the way in which the story is progressing, right. Now, it could be an object', 'tokens': [51196, 1027, 13, 663, 307, 264, 636, 294, 597, 264, 1657, 307, 36305, 11, 558, 13, 823, 11, 309, 727, 312, 364, 2657, 51624], 'temperature': 0.0, 'avg_logprob': -0.13879080935641452, 'compression_ratio': 1.77992277992278, 'no_speech_prob': 0.023616109043359756}, {'id': 294, 'seek': 170730, 'start': 1732.5, 'end': 1736.46, 'text': ' of B. So then we have to choose between these two and we will see how do we choose that.', 'tokens': [51624, 295, 363, 13, 407, 550, 321, 362, 281, 2826, 1296, 613, 732, 293, 321, 486, 536, 577, 360, 321, 2826, 300, 13, 51822], 'temperature': 0.0, 'avg_logprob': -0.13879080935641452, 'compression_ratio': 1.77992277992278, 'no_speech_prob': 0.023616109043359756}, {'id': 295, 'seek': 173646, 'start': 1736.46, 'end': 1747.26, 'text': ' Or it could be these. Third situation is we have a pointer R which is a pointer to C. Now,', 'tokens': [50364, 1610, 309, 727, 312, 613, 13, 12548, 2590, 307, 321, 362, 257, 23918, 497, 597, 307, 257, 23918, 281, 383, 13, 823, 11, 50904], 'temperature': 0.0, 'avg_logprob': -0.15786248284417229, 'compression_ratio': 1.725609756097561, 'no_speech_prob': 0.012815894559025764}, {'id': 296, 'seek': 173646, 'start': 1747.26, 'end': 1757.14, 'text': ' by the type system, this object can never be an object of class A or an object of class B. So,', 'tokens': [50904, 538, 264, 2010, 1185, 11, 341, 2657, 393, 1128, 312, 364, 2657, 295, 1508, 316, 420, 364, 2657, 295, 1508, 363, 13, 407, 11, 51398], 'temperature': 0.0, 'avg_logprob': -0.15786248284417229, 'compression_ratio': 1.725609756097561, 'no_speech_prob': 0.012815894559025764}, {'id': 297, 'seek': 173646, 'start': 1757.14, 'end': 1763.42, 'text': ' a compiler can rule this out completely. Similarly, a compiler can rule this out also completely.', 'tokens': [51398, 257, 31958, 393, 4978, 341, 484, 2584, 13, 13157, 11, 257, 31958, 393, 4978, 341, 484, 611, 2584, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.15786248284417229, 'compression_ratio': 1.725609756097561, 'no_speech_prob': 0.012815894559025764}, {'id': 298, 'seek': 176342, 'start': 1763.42, 'end': 1771.02, 'text': ' Not possible. The only thing that is possible is here, right. So there are certain things based', 'tokens': [50364, 1726, 1944, 13, 440, 787, 551, 300, 307, 1944, 307, 510, 11, 558, 13, 407, 456, 366, 1629, 721, 2361, 50744], 'temperature': 0.0, 'avg_logprob': -0.13833466204968128, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.03512263670563698}, {'id': 299, 'seek': 176342, 'start': 1771.02, 'end': 1778.78, 'text': ' on the declaration of the pointer, there are certain decisions that are taken, okay. So,', 'tokens': [50744, 322, 264, 27606, 295, 264, 23918, 11, 456, 366, 1629, 5327, 300, 366, 2726, 11, 1392, 13, 407, 11, 51132], 'temperature': 0.0, 'avg_logprob': -0.13833466204968128, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.03512263670563698}, {'id': 300, 'seek': 176342, 'start': 1778.78, 'end': 1786.8200000000002, 'text': ' if we have a pointer to one of the derived classes, certain decisions are taken. What happens when we', 'tokens': [51132, 498, 321, 362, 257, 23918, 281, 472, 295, 264, 18949, 5359, 11, 1629, 5327, 366, 2726, 13, 708, 2314, 562, 321, 51534], 'temperature': 0.0, 'avg_logprob': -0.13833466204968128, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.03512263670563698}, {'id': 301, 'seek': 176342, 'start': 1786.8200000000002, 'end': 1791.42, 'text': ' have a pointer to the base class? We saw all these possibilities. How do we pick up the right', 'tokens': [51534, 362, 257, 23918, 281, 264, 3096, 1508, 30, 492, 1866, 439, 613, 12178, 13, 1012, 360, 321, 1888, 493, 264, 558, 51764], 'temperature': 0.0, 'avg_logprob': -0.13833466204968128, 'compression_ratio': 1.8357487922705313, 'no_speech_prob': 0.03512263670563698}, {'id': 302, 'seek': 179142, 'start': 1791.42, 'end': 1800.26, 'text': ' possibility, right, without knowing what that object is? So, that is the arrangement that we', 'tokens': [50364, 7959, 11, 558, 11, 1553, 5276, 437, 300, 2657, 307, 30, 407, 11, 300, 307, 264, 17620, 300, 321, 50806], 'temperature': 0.0, 'avg_logprob': -0.16292970320757696, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.060027115046978}, {'id': 303, 'seek': 179142, 'start': 1800.26, 'end': 1808.3400000000001, 'text': ' want to see, okay. So, non-virtual function, let me just skip it. I think it is all the same story.', 'tokens': [50806, 528, 281, 536, 11, 1392, 13, 407, 11, 2107, 12, 85, 2498, 901, 2445, 11, 718, 385, 445, 10023, 309, 13, 286, 519, 309, 307, 439, 264, 912, 1657, 13, 51210], 'temperature': 0.0, 'avg_logprob': -0.16292970320757696, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.060027115046978}, {'id': 304, 'seek': 179142, 'start': 1808.3400000000001, 'end': 1814.74, 'text': ' Let me just, so, yeah. So, resolution of virtual function depends on the class of the pointy object.', 'tokens': [51210, 961, 385, 445, 11, 370, 11, 1338, 13, 407, 11, 8669, 295, 6374, 2445, 5946, 322, 264, 1508, 295, 264, 935, 88, 2657, 13, 51530], 'temperature': 0.0, 'avg_logprob': -0.16292970320757696, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.060027115046978}, {'id': 305, 'seek': 179142, 'start': 1814.74, 'end': 1819.46, 'text': ' It needs some dynamic information. Resolution of non-virtual function depends on the class', 'tokens': [51530, 467, 2203, 512, 8546, 1589, 13, 5015, 3386, 295, 2107, 12, 85, 2498, 901, 2445, 5946, 322, 264, 1508, 51766], 'temperature': 0.0, 'avg_logprob': -0.16292970320757696, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.060027115046978}, {'id': 306, 'seek': 181946, 'start': 1819.46, 'end': 1826.1000000000001, 'text': ' of the pointer and compile time information is sufficient. In either case, a pointy cannot', 'tokens': [50364, 295, 264, 23918, 293, 31413, 565, 1589, 307, 11563, 13, 682, 2139, 1389, 11, 257, 935, 88, 2644, 50696], 'temperature': 0.0, 'avg_logprob': -0.15135686115552022, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.051788732409477234}, {'id': 307, 'seek': 181946, 'start': 1826.1000000000001, 'end': 1835.26, 'text': ' belong to a higher class in the hierarchy, okay. So, we are back to the same story and consider a', 'tokens': [50696, 5784, 281, 257, 2946, 1508, 294, 264, 22333, 11, 1392, 13, 407, 11, 321, 366, 646, 281, 264, 912, 1657, 293, 1949, 257, 51154], 'temperature': 0.0, 'avg_logprob': -0.15135686115552022, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.051788732409477234}, {'id': 308, 'seek': 181946, 'start': 1835.26, 'end': 1840.6200000000001, 'text': ' pointer to an object of class A. Now, we are ruling out the possibility that pointer is a', 'tokens': [51154, 23918, 281, 364, 2657, 295, 1508, 316, 13, 823, 11, 321, 366, 21437, 484, 264, 7959, 300, 23918, 307, 257, 51422], 'temperature': 0.0, 'avg_logprob': -0.15135686115552022, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.051788732409477234}, {'id': 309, 'seek': 181946, 'start': 1840.6200000000001, 'end': 1846.3400000000001, 'text': ' pointer to these. Although it could hold an object of this, but by declaration, it is a pointer to', 'tokens': [51422, 23918, 281, 613, 13, 5780, 309, 727, 1797, 364, 2657, 295, 341, 11, 457, 538, 27606, 11, 309, 307, 257, 23918, 281, 51708], 'temperature': 0.0, 'avg_logprob': -0.15135686115552022, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.051788732409477234}, {'id': 310, 'seek': 184634, 'start': 1846.5, 'end': 1853.22, 'text': ' class A, okay. And this pointer could point to an object of class A, B or C. So, that is the', 'tokens': [50372, 1508, 316, 11, 1392, 13, 400, 341, 23918, 727, 935, 281, 364, 2657, 295, 1508, 316, 11, 363, 420, 383, 13, 407, 11, 300, 307, 264, 50708], 'temperature': 0.0, 'avg_logprob': -0.13525712149483818, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.030203750357031822}, {'id': 311, 'seek': 184634, 'start': 1853.22, 'end': 1860.86, 'text': ' situation that we want to look at, okay. So, we have these functions in A, these functions in B', 'tokens': [50708, 2590, 300, 321, 528, 281, 574, 412, 11, 1392, 13, 407, 11, 321, 362, 613, 6828, 294, 316, 11, 613, 6828, 294, 363, 51090], 'temperature': 0.0, 'avg_logprob': -0.13525712149483818, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.030203750357031822}, {'id': 312, 'seek': 184634, 'start': 1860.86, 'end': 1868.4199999999998, 'text': ' and these functions in C, okay. And now, let us see what game we can play with this information,', 'tokens': [51090, 293, 613, 6828, 294, 383, 11, 1392, 13, 400, 586, 11, 718, 505, 536, 437, 1216, 321, 393, 862, 365, 341, 1589, 11, 51468], 'temperature': 0.0, 'avg_logprob': -0.13525712149483818, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.030203750357031822}, {'id': 313, 'seek': 184634, 'start': 1868.4199999999998, 'end': 1875.6599999999999, 'text': ' okay. So, now, we have these and we are trying to see how we can create a virtual function table', 'tokens': [51468, 1392, 13, 407, 11, 586, 11, 321, 362, 613, 293, 321, 366, 1382, 281, 536, 577, 321, 393, 1884, 257, 6374, 2445, 3199, 51830], 'temperature': 0.0, 'avg_logprob': -0.13525712149483818, 'compression_ratio': 1.891089108910891, 'no_speech_prob': 0.030203750357031822}, {'id': 314, 'seek': 187566, 'start': 1875.66, 'end': 1882.98, 'text': ' in order to rule out things that are not possible, okay. So, if we have these functions,', 'tokens': [50364, 294, 1668, 281, 4978, 484, 721, 300, 366, 406, 1944, 11, 1392, 13, 407, 11, 498, 321, 362, 613, 6828, 11, 50730], 'temperature': 0.0, 'avg_logprob': -0.11404930193399646, 'compression_ratio': 1.9333333333333333, 'no_speech_prob': 0.0023190213833004236}, {'id': 315, 'seek': 187566, 'start': 1882.98, 'end': 1891.5400000000002, 'text': ' so now, we say that for each functions there is a single copy. This A dot F, if at all this function', 'tokens': [50730, 370, 586, 11, 321, 584, 300, 337, 1184, 6828, 456, 307, 257, 2167, 5055, 13, 639, 316, 5893, 479, 11, 498, 412, 439, 341, 2445, 51158], 'temperature': 0.0, 'avg_logprob': -0.11404930193399646, 'compression_ratio': 1.9333333333333333, 'no_speech_prob': 0.0023190213833004236}, {'id': 316, 'seek': 187566, 'start': 1891.5400000000002, 'end': 1897.0600000000002, 'text': ' is called, we will refer to this. If at all this function is called, we will refer to this. So,', 'tokens': [51158, 307, 1219, 11, 321, 486, 2864, 281, 341, 13, 759, 412, 439, 341, 2445, 307, 1219, 11, 321, 486, 2864, 281, 341, 13, 407, 11, 51434], 'temperature': 0.0, 'avg_logprob': -0.11404930193399646, 'compression_ratio': 1.9333333333333333, 'no_speech_prob': 0.0023190213833004236}, {'id': 317, 'seek': 187566, 'start': 1897.0600000000002, 'end': 1904.74, 'text': ' we remove the replicated functions. We write only the functions that are not replicated and', 'tokens': [51434, 321, 4159, 264, 46365, 6828, 13, 492, 2464, 787, 264, 6828, 300, 366, 406, 46365, 293, 51818], 'temperature': 0.0, 'avg_logprob': -0.11404930193399646, 'compression_ratio': 1.9333333333333333, 'no_speech_prob': 0.0023190213833004236}, {'id': 318, 'seek': 190474, 'start': 1905.02, 'end': 1910.42, 'text': ' then make an arrangement so that these functions can be appropriately called. The reason why we', 'tokens': [50378, 550, 652, 364, 17620, 370, 300, 613, 6828, 393, 312, 23505, 1219, 13, 440, 1778, 983, 321, 50648], 'temperature': 0.0, 'avg_logprob': -0.13820506714202546, 'compression_ratio': 1.7762557077625571, 'no_speech_prob': 0.002250324934720993}, {'id': 319, 'seek': 190474, 'start': 1910.42, 'end': 1916.14, 'text': ' want to do that is unlike data members, function members are not really replicated. It is the data', 'tokens': [50648, 528, 281, 360, 300, 307, 8343, 1412, 2679, 11, 2445, 2679, 366, 406, 534, 46365, 13, 467, 307, 264, 1412, 50934], 'temperature': 0.0, 'avg_logprob': -0.13820506714202546, 'compression_ratio': 1.7762557077625571, 'no_speech_prob': 0.002250324934720993}, {'id': 320, 'seek': 190474, 'start': 1916.14, 'end': 1922.34, 'text': ' that is replicated. Data has separate space. Function has only one function per class, right.', 'tokens': [50934, 300, 307, 46365, 13, 11888, 575, 4994, 1901, 13, 11166, 882, 575, 787, 472, 2445, 680, 1508, 11, 558, 13, 51244], 'temperature': 0.0, 'avg_logprob': -0.13820506714202546, 'compression_ratio': 1.7762557077625571, 'no_speech_prob': 0.002250324934720993}, {'id': 321, 'seek': 190474, 'start': 1922.34, 'end': 1929.58, 'text': ' So, we have this. So, these are the functions and now, we want to set up the pointers appropriately.', 'tokens': [51244, 407, 11, 321, 362, 341, 13, 407, 11, 613, 366, 264, 6828, 293, 586, 11, 321, 528, 281, 992, 493, 264, 44548, 23505, 13, 51606], 'temperature': 0.0, 'avg_logprob': -0.13820506714202546, 'compression_ratio': 1.7762557077625571, 'no_speech_prob': 0.002250324934720993}, {'id': 322, 'seek': 192958, 'start': 1930.1399999999999, 'end': 1937.34, 'text': ' If we have an object of this class, it can be any. So, this function will call this,', 'tokens': [50392, 759, 321, 362, 364, 2657, 295, 341, 1508, 11, 309, 393, 312, 604, 13, 407, 11, 341, 2445, 486, 818, 341, 11, 50752], 'temperature': 0.0, 'avg_logprob': -0.16216084798177083, 'compression_ratio': 2.2301587301587302, 'no_speech_prob': 0.003818707773461938}, {'id': 323, 'seek': 192958, 'start': 1937.34, 'end': 1945.06, 'text': ' this function will call this, this function will call this, clear. If the object is of class A,', 'tokens': [50752, 341, 2445, 486, 818, 341, 11, 341, 2445, 486, 818, 341, 11, 1850, 13, 759, 264, 2657, 307, 295, 1508, 316, 11, 51138], 'temperature': 0.0, 'avg_logprob': -0.16216084798177083, 'compression_ratio': 2.2301587301587302, 'no_speech_prob': 0.003818707773461938}, {'id': 324, 'seek': 192958, 'start': 1945.06, 'end': 1955.54, 'text': ' right. If the object is of class B, then it could call this function or it could call this function.', 'tokens': [51138, 558, 13, 759, 264, 2657, 307, 295, 1508, 363, 11, 550, 309, 727, 818, 341, 2445, 420, 309, 727, 818, 341, 2445, 13, 51662], 'temperature': 0.0, 'avg_logprob': -0.16216084798177083, 'compression_ratio': 2.2301587301587302, 'no_speech_prob': 0.003818707773461938}, {'id': 325, 'seek': 195554, 'start': 1955.54, 'end': 1963.94, 'text': ' What is the right thing to do? Right thing to do is to call this function, right. So,', 'tokens': [50364, 708, 307, 264, 558, 551, 281, 360, 30, 1779, 551, 281, 360, 307, 281, 818, 341, 2445, 11, 558, 13, 407, 11, 50784], 'temperature': 0.0, 'avg_logprob': -0.17687088461483227, 'compression_ratio': 1.6705882352941177, 'no_speech_prob': 0.0016720312414690852}, {'id': 326, 'seek': 195554, 'start': 1963.94, 'end': 1972.6599999999999, 'text': ' therefore, we remove that function. We say B dot F will always, A dot F is over A colon colon F is', 'tokens': [50784, 4412, 11, 321, 4159, 300, 2445, 13, 492, 584, 363, 5893, 479, 486, 1009, 11, 316, 5893, 479, 307, 670, 316, 8255, 8255, 479, 307, 51220], 'temperature': 0.0, 'avg_logprob': -0.17687088461483227, 'compression_ratio': 1.6705882352941177, 'no_speech_prob': 0.0016720312414690852}, {'id': 327, 'seek': 195554, 'start': 1972.6599999999999, 'end': 1985.26, 'text': ' overridden by B colon colon F, right. Easy. So, now, we set up this pointer, okay. If we call this,', 'tokens': [51220, 670, 81, 6171, 538, 363, 8255, 8255, 479, 11, 558, 13, 16002, 13, 407, 11, 586, 11, 321, 992, 493, 341, 23918, 11, 1392, 13, 759, 321, 818, 341, 11, 51850], 'temperature': 0.0, 'avg_logprob': -0.17687088461483227, 'compression_ratio': 1.6705882352941177, 'no_speech_prob': 0.0016720312414690852}, {'id': 328, 'seek': 198526, 'start': 1985.34, 'end': 1993.18, 'text': ' this is the only function. There is no function F with a parameter, right. There is no function F', 'tokens': [50368, 341, 307, 264, 787, 2445, 13, 821, 307, 572, 2445, 479, 365, 257, 13075, 11, 558, 13, 821, 307, 572, 2445, 479, 50760], 'temperature': 0.0, 'avg_logprob': -0.11561492594276987, 'compression_ratio': 1.9726027397260273, 'no_speech_prob': 9.761146793607622e-05}, {'id': 329, 'seek': 198526, 'start': 1993.18, 'end': 2001.58, 'text': ' with a parameter here. So, we say A colon colon F is inherited. So, for an object of class B,', 'tokens': [50760, 365, 257, 13075, 510, 13, 407, 11, 321, 584, 316, 8255, 8255, 479, 307, 27091, 13, 407, 11, 337, 364, 2657, 295, 1508, 363, 11, 51180], 'temperature': 0.0, 'avg_logprob': -0.11561492594276987, 'compression_ratio': 1.9726027397260273, 'no_speech_prob': 9.761146793607622e-05}, {'id': 330, 'seek': 198526, 'start': 2001.58, 'end': 2007.9, 'text': ' when F is called, it will call this. For an object of class B, F i is called, it will call this.', 'tokens': [51180, 562, 479, 307, 1219, 11, 309, 486, 818, 341, 13, 1171, 364, 2657, 295, 1508, 363, 11, 479, 741, 307, 1219, 11, 309, 486, 818, 341, 13, 51496], 'temperature': 0.0, 'avg_logprob': -0.11561492594276987, 'compression_ratio': 1.9726027397260273, 'no_speech_prob': 9.761146793607622e-05}, {'id': 331, 'seek': 200790, 'start': 2007.9, 'end': 2017.02, 'text': ' Easy to see, right. And when G is called, there are two possibilities, this or this.', 'tokens': [50364, 16002, 281, 536, 11, 558, 13, 400, 562, 460, 307, 1219, 11, 456, 366, 732, 12178, 11, 341, 420, 341, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.11489699045817058, 'compression_ratio': 1.535294117647059, 'no_speech_prob': 0.03205883502960205}, {'id': 332, 'seek': 200790, 'start': 2017.02, 'end': 2024.74, 'text': ' Clearly, we are going to remove this. We say A colon colon G is overridden by B colon colon G.', 'tokens': [50820, 24120, 11, 321, 366, 516, 281, 4159, 341, 13, 492, 584, 316, 8255, 8255, 460, 307, 670, 81, 6171, 538, 363, 8255, 8255, 460, 13, 51206], 'temperature': 0.0, 'avg_logprob': -0.11489699045817058, 'compression_ratio': 1.535294117647059, 'no_speech_prob': 0.03205883502960205}, {'id': 333, 'seek': 200790, 'start': 2024.74, 'end': 2031.18, 'text': ' So, we now have determined. So, what are we doing? We are saying for every class,', 'tokens': [51206, 407, 11, 321, 586, 362, 9540, 13, 407, 11, 437, 366, 321, 884, 30, 492, 366, 1566, 337, 633, 1508, 11, 51528], 'temperature': 0.0, 'avg_logprob': -0.11489699045817058, 'compression_ratio': 1.535294117647059, 'no_speech_prob': 0.03205883502960205}, {'id': 334, 'seek': 203118, 'start': 2031.3400000000001, 'end': 2040.1000000000001, 'text': ' if I call F or if I call F i or if I call G, which function is going to be called? I want to make my', 'tokens': [50372, 498, 286, 818, 479, 420, 498, 286, 818, 479, 741, 420, 498, 286, 818, 460, 11, 597, 2445, 307, 516, 281, 312, 1219, 30, 286, 528, 281, 652, 452, 50810], 'temperature': 0.0, 'avg_logprob': -0.14217029183597887, 'compression_ratio': 1.568, 'no_speech_prob': 0.013635382056236267}, {'id': 335, 'seek': 203118, 'start': 2040.1000000000001, 'end': 2046.94, 'text': ' arrangement. So, what I am trying to do is, what this system is trying to do is that we want to', 'tokens': [50810, 17620, 13, 407, 11, 437, 286, 669, 1382, 281, 360, 307, 11, 437, 341, 1185, 307, 1382, 281, 360, 307, 300, 321, 528, 281, 51152], 'temperature': 0.0, 'avg_logprob': -0.14217029183597887, 'compression_ratio': 1.568, 'no_speech_prob': 0.013635382056236267}, {'id': 336, 'seek': 204694, 'start': 2046.94, 'end': 2064.58, 'text': ' create a table. If we have an object of class A, what is F, what is F i and what is G? If I have', 'tokens': [50364, 1884, 257, 3199, 13, 759, 321, 362, 364, 2657, 295, 1508, 316, 11, 437, 307, 479, 11, 437, 307, 479, 741, 293, 437, 307, 460, 30, 759, 286, 362, 51246], 'temperature': 0.0, 'avg_logprob': -0.11579300418044582, 'compression_ratio': 1.2, 'no_speech_prob': 0.015421233139932156}, {'id': 337, 'seek': 206458, 'start': 2064.58, 'end': 2076.98, 'text': ' an object of class B, what is F, what is F i and what is G? So, we are essentially setting function', 'tokens': [50364, 364, 2657, 295, 1508, 363, 11, 437, 307, 479, 11, 437, 307, 479, 741, 293, 437, 307, 460, 30, 407, 11, 321, 366, 4476, 3287, 2445, 50984], 'temperature': 0.0, 'avg_logprob': -0.11135504737732903, 'compression_ratio': 1.7876106194690264, 'no_speech_prob': 0.006902927532792091}, {'id': 338, 'seek': 206458, 'start': 2076.98, 'end': 2086.06, 'text': ' pointers. If we have an object of class B, what is F, what is F i and what is G? So, we want to set up', 'tokens': [50984, 44548, 13, 759, 321, 362, 364, 2657, 295, 1508, 363, 11, 437, 307, 479, 11, 437, 307, 479, 741, 293, 437, 307, 460, 30, 407, 11, 321, 528, 281, 992, 493, 51438], 'temperature': 0.0, 'avg_logprob': -0.11135504737732903, 'compression_ratio': 1.7876106194690264, 'no_speech_prob': 0.006902927532792091}, {'id': 339, 'seek': 208606, 'start': 2086.2599999999998, 'end': 2094.46, 'text': ' these function pointers. We want to set up an array of function pointers. So, here we have said', 'tokens': [50374, 613, 2445, 44548, 13, 492, 528, 281, 992, 493, 364, 10225, 295, 2445, 44548, 13, 407, 11, 510, 321, 362, 848, 50784], 'temperature': 0.0, 'avg_logprob': -0.17230065209524972, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.06004660204052925}, {'id': 340, 'seek': 208606, 'start': 2094.46, 'end': 2100.74, 'text': ' that this function pointer actually points to that function, whereas for these two function pointers,', 'tokens': [50784, 300, 341, 2445, 23918, 767, 2793, 281, 300, 2445, 11, 9735, 337, 613, 732, 2445, 44548, 11, 51098], 'temperature': 0.0, 'avg_logprob': -0.17230065209524972, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.06004660204052925}, {'id': 341, 'seek': 208606, 'start': 2100.74, 'end': 2108.98, 'text': ' they point to this function, right. Clear? Now, let us come to class C, object of class C.', 'tokens': [51098, 436, 935, 281, 341, 2445, 11, 558, 13, 14993, 30, 823, 11, 718, 505, 808, 281, 1508, 383, 11, 2657, 295, 1508, 383, 13, 51510], 'temperature': 0.0, 'avg_logprob': -0.17230065209524972, 'compression_ratio': 1.7777777777777777, 'no_speech_prob': 0.06004660204052925}, {'id': 342, 'seek': 210898, 'start': 2108.98, 'end': 2119.06, 'text': ' There are three possibilities, this, this or this. Which one will retain? Obviously, the last one,', 'tokens': [50364, 821, 366, 1045, 12178, 11, 341, 11, 341, 420, 341, 13, 3013, 472, 486, 18340, 30, 7580, 11, 264, 1036, 472, 11, 50868], 'temperature': 0.0, 'avg_logprob': -0.14601526381094246, 'compression_ratio': 1.6627906976744187, 'no_speech_prob': 0.03014920838177204}, {'id': 343, 'seek': 210898, 'start': 2119.06, 'end': 2125.82, 'text': ' right. So, the first two are gone. Both A colon colon F and B colon colon F are written overwritten', 'tokens': [50868, 558, 13, 407, 11, 264, 700, 732, 366, 2780, 13, 6767, 316, 8255, 8255, 479, 293, 363, 8255, 8255, 479, 366, 3720, 670, 26859, 51206], 'temperature': 0.0, 'avg_logprob': -0.14601526381094246, 'compression_ratio': 1.6627906976744187, 'no_speech_prob': 0.03014920838177204}, {'id': 344, 'seek': 210898, 'start': 2125.82, 'end': 2133.14, 'text': ' by C colon colon F, right. So, now, in this table, we are setting up pointers here. So,', 'tokens': [51206, 538, 383, 8255, 8255, 479, 11, 558, 13, 407, 11, 586, 11, 294, 341, 3199, 11, 321, 366, 3287, 493, 44548, 510, 13, 407, 11, 51572], 'temperature': 0.0, 'avg_logprob': -0.14601526381094246, 'compression_ratio': 1.6627906976744187, 'no_speech_prob': 0.03014920838177204}, {'id': 345, 'seek': 213314, 'start': 2133.14, 'end': 2143.46, 'text': ' we say this F is C colon colon F, ok. If it is F i, a parameter, a function F with parameter i,', 'tokens': [50364, 321, 584, 341, 479, 307, 383, 8255, 8255, 479, 11, 3133, 13, 759, 309, 307, 479, 741, 11, 257, 13075, 11, 257, 2445, 479, 365, 13075, 741, 11, 50880], 'temperature': 0.0, 'avg_logprob': -0.12392901314629448, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.006690810900181532}, {'id': 346, 'seek': 213314, 'start': 2143.46, 'end': 2154.06, 'text': ' then the only option is this, right. So, we say A colon F i is inherited, right. And then,', 'tokens': [50880, 550, 264, 787, 3614, 307, 341, 11, 558, 13, 407, 11, 321, 584, 316, 8255, 479, 741, 307, 27091, 11, 558, 13, 400, 550, 11, 51410], 'temperature': 0.0, 'avg_logprob': -0.12392901314629448, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.006690810900181532}, {'id': 347, 'seek': 213314, 'start': 2154.06, 'end': 2162.02, 'text': ' when we have G, we have this G, we have this G and we have this G, ok. But, this G has not been', 'tokens': [51410, 562, 321, 362, 460, 11, 321, 362, 341, 460, 11, 321, 362, 341, 460, 293, 321, 362, 341, 460, 11, 3133, 13, 583, 11, 341, 460, 575, 406, 668, 51808], 'temperature': 0.0, 'avg_logprob': -0.12392901314629448, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.006690810900181532}, {'id': 348, 'seek': 216202, 'start': 2162.02, 'end': 2168.86, 'text': ' defined here. So, we are going to pick up this G and therefore, we will say A colon colon G is', 'tokens': [50364, 7642, 510, 13, 407, 11, 321, 366, 516, 281, 1888, 493, 341, 460, 293, 4412, 11, 321, 486, 584, 316, 8255, 8255, 460, 307, 50706], 'temperature': 0.0, 'avg_logprob': -0.10570297743144788, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.0078123086132109165}, {'id': 349, 'seek': 216202, 'start': 2168.86, 'end': 2178.2599999999998, 'text': ' overwritten by B colon colon G, which is inherited in C, right. So, we are talking about all these', 'tokens': [50706, 670, 26859, 538, 363, 8255, 8255, 460, 11, 597, 307, 27091, 294, 383, 11, 558, 13, 407, 11, 321, 366, 1417, 466, 439, 613, 51176], 'temperature': 0.0, 'avg_logprob': -0.10570297743144788, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.0078123086132109165}, {'id': 350, 'seek': 216202, 'start': 2178.2599999999998, 'end': 2187.46, 'text': ' three things. Something is overwritten, something is inherited, ok. So, with this arrangement,', 'tokens': [51176, 1045, 721, 13, 6595, 307, 670, 26859, 11, 746, 307, 27091, 11, 3133, 13, 407, 11, 365, 341, 17620, 11, 51636], 'temperature': 0.0, 'avg_logprob': -0.10570297743144788, 'compression_ratio': 1.6941176470588235, 'no_speech_prob': 0.0078123086132109165}, {'id': 351, 'seek': 218746, 'start': 2187.78, 'end': 2199.18, 'text': ' now, we have exactly one function per class. Is that clear? So, all these decisions can be taken', 'tokens': [50380, 586, 11, 321, 362, 2293, 472, 2445, 680, 1508, 13, 1119, 300, 1850, 30, 407, 11, 439, 613, 5327, 393, 312, 2726, 50950], 'temperature': 0.0, 'avg_logprob': -0.12836544950243453, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.012050689198076725}, {'id': 352, 'seek': 218746, 'start': 2199.18, 'end': 2206.38, 'text': ' at compile time. This is a virtual function table. Now, we have this virtual function table. Now,', 'tokens': [50950, 412, 31413, 565, 13, 639, 307, 257, 6374, 2445, 3199, 13, 823, 11, 321, 362, 341, 6374, 2445, 3199, 13, 823, 11, 51310], 'temperature': 0.0, 'avg_logprob': -0.12836544950243453, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.012050689198076725}, {'id': 353, 'seek': 218746, 'start': 2206.38, 'end': 2212.62, 'text': ' the advantage of this is that in the entire class hierarchy, we make the size of the virtual', 'tokens': [51310, 264, 5002, 295, 341, 307, 300, 294, 264, 2302, 1508, 22333, 11, 321, 652, 264, 2744, 295, 264, 6374, 51622], 'temperature': 0.0, 'avg_logprob': -0.12836544950243453, 'compression_ratio': 1.698224852071006, 'no_speech_prob': 0.012050689198076725}, {'id': 354, 'seek': 221262, 'start': 2212.62, 'end': 2224.38, 'text': ' function table same. And then, we know F is at index 0, F i is at index 1 and G is at index 2,', 'tokens': [50364, 2445, 3199, 912, 13, 400, 550, 11, 321, 458, 479, 307, 412, 8186, 1958, 11, 479, 741, 307, 412, 8186, 502, 293, 460, 307, 412, 8186, 568, 11, 50952], 'temperature': 0.0, 'avg_logprob': -0.132141148602521, 'compression_ratio': 1.6222222222222222, 'no_speech_prob': 0.043316714465618134}, {'id': 355, 'seek': 221262, 'start': 2224.38, 'end': 2234.46, 'text': ' right. All we have to do is based on the object at runtime, we get the address of the right virtual', 'tokens': [50952, 558, 13, 1057, 321, 362, 281, 360, 307, 2361, 322, 264, 2657, 412, 34474, 11, 321, 483, 264, 2985, 295, 264, 558, 6374, 51456], 'temperature': 0.0, 'avg_logprob': -0.132141148602521, 'compression_ratio': 1.6222222222222222, 'no_speech_prob': 0.043316714465618134}, {'id': 356, 'seek': 221262, 'start': 2234.46, 'end': 2240.42, 'text': ' function table. No, no, whether a function is virtual or not, that is declared by the programmer,', 'tokens': [51456, 2445, 3199, 13, 883, 11, 572, 11, 1968, 257, 2445, 307, 6374, 420, 406, 11, 300, 307, 15489, 538, 264, 32116, 11, 51754], 'temperature': 0.0, 'avg_logprob': -0.132141148602521, 'compression_ratio': 1.6222222222222222, 'no_speech_prob': 0.043316714465618134}, {'id': 357, 'seek': 224042, 'start': 2240.42, 'end': 2245.82, 'text': " is the programmer's intent. There is a virtual keyword appearing in the class. Let me try to", 'tokens': [50364, 307, 264, 32116, 311, 8446, 13, 821, 307, 257, 6374, 20428, 19870, 294, 264, 1508, 13, 961, 385, 853, 281, 50634], 'temperature': 0.0, 'avg_logprob': -0.16289766870363795, 'compression_ratio': 1.6293103448275863, 'no_speech_prob': 0.004197427537292242}, {'id': 358, 'seek': 224042, 'start': 2245.82, 'end': 2252.34, 'text': ' understand your question well. Let us go back to that situation. Now, tell me. See, what happens', 'tokens': [50634, 1223, 428, 1168, 731, 13, 961, 505, 352, 646, 281, 300, 2590, 13, 823, 11, 980, 385, 13, 3008, 11, 437, 2314, 50960], 'temperature': 0.0, 'avg_logprob': -0.16289766870363795, 'compression_ratio': 1.6293103448275863, 'no_speech_prob': 0.004197427537292242}, {'id': 359, 'seek': 224042, 'start': 2252.34, 'end': 2260.02, 'text': ' is the following. Because this is non-virtual, if this function has been defined here, ok,', 'tokens': [50960, 307, 264, 3480, 13, 1436, 341, 307, 2107, 12, 85, 2498, 901, 11, 498, 341, 2445, 575, 668, 7642, 510, 11, 3133, 11, 51344], 'temperature': 0.0, 'avg_logprob': -0.16289766870363795, 'compression_ratio': 1.6293103448275863, 'no_speech_prob': 0.004197427537292242}, {'id': 360, 'seek': 224042, 'start': 2260.02, 'end': 2268.14, 'text': ' this function will be picked up. If this function has not, I mean, and the pointer is to this. If', 'tokens': [51344, 341, 2445, 486, 312, 6183, 493, 13, 759, 341, 2445, 575, 406, 11, 286, 914, 11, 293, 264, 23918, 307, 281, 341, 13, 759, 51750], 'temperature': 0.0, 'avg_logprob': -0.16289766870363795, 'compression_ratio': 1.6293103448275863, 'no_speech_prob': 0.004197427537292242}, {'id': 361, 'seek': 226814, 'start': 2268.22, 'end': 2272.7, 'text': ' it is a pointer to the class hierarchy, it is going to pick up the function at the top level,', 'tokens': [50368, 309, 307, 257, 23918, 281, 264, 1508, 22333, 11, 309, 307, 516, 281, 1888, 493, 264, 2445, 412, 264, 1192, 1496, 11, 50592], 'temperature': 0.0, 'avg_logprob': -0.13866480827331543, 'compression_ratio': 1.76036866359447, 'no_speech_prob': 0.009681353345513344}, {'id': 362, 'seek': 226814, 'start': 2272.7, 'end': 2280.7, 'text': ' right. So, that overriding will happen based on the declaration. So, it will not happen. So,', 'tokens': [50592, 558, 13, 407, 11, 300, 670, 81, 2819, 486, 1051, 2361, 322, 264, 27606, 13, 407, 11, 309, 486, 406, 1051, 13, 407, 11, 50992], 'temperature': 0.0, 'avg_logprob': -0.13866480827331543, 'compression_ratio': 1.76036866359447, 'no_speech_prob': 0.009681353345513344}, {'id': 363, 'seek': 226814, 'start': 2280.7, 'end': 2285.02, 'text': ' this I should put a virtual here. I think there is a mistake here. I will just correct that slide.', 'tokens': [50992, 341, 286, 820, 829, 257, 6374, 510, 13, 286, 519, 456, 307, 257, 6146, 510, 13, 286, 486, 445, 3006, 300, 4137, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.13866480827331543, 'compression_ratio': 1.76036866359447, 'no_speech_prob': 0.009681353345513344}, {'id': 364, 'seek': 226814, 'start': 2285.02, 'end': 2291.3399999999997, 'text': ' Because that overriding happens not, it is not a runtime decision. It is a compile time decision', 'tokens': [51208, 1436, 300, 670, 81, 2819, 2314, 406, 11, 309, 307, 406, 257, 34474, 3537, 13, 467, 307, 257, 31413, 565, 3537, 51524], 'temperature': 0.0, 'avg_logprob': -0.13866480827331543, 'compression_ratio': 1.76036866359447, 'no_speech_prob': 0.009681353345513344}, {'id': 365, 'seek': 229134, 'start': 2291.34, 'end': 2299.06, 'text': ' based on the type of the declared type of the pointer, ok. I will check it once. Please note', 'tokens': [50364, 2361, 322, 264, 2010, 295, 264, 15489, 2010, 295, 264, 23918, 11, 3133, 13, 286, 486, 1520, 309, 1564, 13, 2555, 3637, 50750], 'temperature': 0.0, 'avg_logprob': -0.13428640857185284, 'compression_ratio': 1.632034632034632, 'no_speech_prob': 0.07359001040458679}, {'id': 366, 'seek': 229134, 'start': 2299.06, 'end': 2304.7400000000002, 'text': ' it down. I think this is an error here. I will run this program once again. Check it and just', 'tokens': [50750, 309, 760, 13, 286, 519, 341, 307, 364, 6713, 510, 13, 286, 486, 1190, 341, 1461, 1564, 797, 13, 6881, 309, 293, 445, 51034], 'temperature': 0.0, 'avg_logprob': -0.13428640857185284, 'compression_ratio': 1.632034632034632, 'no_speech_prob': 0.07359001040458679}, {'id': 367, 'seek': 229134, 'start': 2304.7400000000002, 'end': 2309.5, 'text': ' want to make sure that I am not making one more mistake. So, let us assume for the time being', 'tokens': [51034, 528, 281, 652, 988, 300, 286, 669, 406, 1455, 472, 544, 6146, 13, 407, 11, 718, 505, 6552, 337, 264, 565, 885, 51272], 'temperature': 0.0, 'avg_logprob': -0.13428640857185284, 'compression_ratio': 1.632034632034632, 'no_speech_prob': 0.07359001040458679}, {'id': 368, 'seek': 229134, 'start': 2309.5, 'end': 2315.46, 'text': ' that there is a possibility of a mistake there. Now, let us see when we have constructed virtual', 'tokens': [51272, 300, 456, 307, 257, 7959, 295, 257, 6146, 456, 13, 823, 11, 718, 505, 536, 562, 321, 362, 17083, 6374, 51570], 'temperature': 0.0, 'avg_logprob': -0.13428640857185284, 'compression_ratio': 1.632034632034632, 'no_speech_prob': 0.07359001040458679}, {'id': 369, 'seek': 231546, 'start': 2315.46, 'end': 2320.66, 'text': ' function table, how do we use it? So, we have created this virtual function table, ok.', 'tokens': [50364, 2445, 3199, 11, 577, 360, 321, 764, 309, 30, 407, 11, 321, 362, 2942, 341, 6374, 2445, 3199, 11, 3133, 13, 50624], 'temperature': 0.0, 'avg_logprob': -0.12187108601609321, 'compression_ratio': 1.71875, 'no_speech_prob': 0.09512069076299667}, {'id': 370, 'seek': 231546, 'start': 2320.66, 'end': 2326.98, 'text': ' Now, at runtime we need 2D references. Basically, we are going to talk about this. At runtime,', 'tokens': [50624, 823, 11, 412, 34474, 321, 643, 568, 35, 15400, 13, 8537, 11, 321, 366, 516, 281, 751, 466, 341, 13, 1711, 34474, 11, 50940], 'temperature': 0.0, 'avg_logprob': -0.12187108601609321, 'compression_ratio': 1.71875, 'no_speech_prob': 0.09512069076299667}, {'id': 371, 'seek': 231546, 'start': 2326.98, 'end': 2336.86, 'text': ' we need 2D references. One is to get the virtual function table, find out what is the virtual', 'tokens': [50940, 321, 643, 568, 35, 15400, 13, 1485, 307, 281, 483, 264, 6374, 2445, 3199, 11, 915, 484, 437, 307, 264, 6374, 51434], 'temperature': 0.0, 'avg_logprob': -0.12187108601609321, 'compression_ratio': 1.71875, 'no_speech_prob': 0.09512069076299667}, {'id': 372, 'seek': 233686, 'start': 2336.86, 'end': 2345.6200000000003, 'text': ' function table and the second is the index in the virtual function table, ok. So, this is,', 'tokens': [50364, 2445, 3199, 293, 264, 1150, 307, 264, 8186, 294, 264, 6374, 2445, 3199, 11, 3133, 13, 407, 11, 341, 307, 11, 50802], 'temperature': 0.0, 'avg_logprob': -0.16884796877941452, 'compression_ratio': 1.8936170212765957, 'no_speech_prob': 0.019085543230175972}, {'id': 373, 'seek': 233686, 'start': 2345.6200000000003, 'end': 2351.6200000000003, 'text': ' let me skip this, ok. So, what is the compile time activity? The compile time activity is to', 'tokens': [50802, 718, 385, 10023, 341, 11, 3133, 13, 407, 11, 437, 307, 264, 31413, 565, 5191, 30, 440, 31413, 565, 5191, 307, 281, 51102], 'temperature': 0.0, 'avg_logprob': -0.16884796877941452, 'compression_ratio': 1.8936170212765957, 'no_speech_prob': 0.019085543230175972}, {'id': 374, 'seek': 233686, 'start': 2351.6200000000003, 'end': 2356.2200000000003, 'text': ' collect all virtual functions across a class hierarchy, ignore non-virtual functions,', 'tokens': [51102, 2500, 439, 6374, 6828, 2108, 257, 1508, 22333, 11, 11200, 2107, 12, 85, 2498, 901, 6828, 11, 51332], 'temperature': 0.0, 'avg_logprob': -0.16884796877941452, 'compression_ratio': 1.8936170212765957, 'no_speech_prob': 0.019085543230175972}, {'id': 375, 'seek': 233686, 'start': 2356.2200000000003, 'end': 2361.38, 'text': ' analyze the class hierarchy to locate the appropriate function with a given permission', 'tokens': [51332, 12477, 264, 1508, 22333, 281, 22370, 264, 6854, 2445, 365, 257, 2212, 11226, 51590], 'temperature': 0.0, 'avg_logprob': -0.16884796877941452, 'compression_ratio': 1.8936170212765957, 'no_speech_prob': 0.019085543230175972}, {'id': 376, 'seek': 236138, 'start': 2361.38, 'end': 2368.7400000000002, 'text': ' of argument types and execution time activity is dereference object pointer to access the virtual', 'tokens': [50364, 295, 6770, 3467, 293, 15058, 565, 5191, 307, 15969, 5158, 2657, 23918, 281, 2105, 264, 6374, 50732], 'temperature': 0.0, 'avg_logprob': -0.14443111419677734, 'compression_ratio': 1.8872549019607843, 'no_speech_prob': 0.14787742495536804}, {'id': 377, 'seek': 236138, 'start': 2368.7400000000002, 'end': 2374.46, 'text': ' function table. So, within the body of the object, there will be a pointer to a virtual function.', 'tokens': [50732, 2445, 3199, 13, 407, 11, 1951, 264, 1772, 295, 264, 2657, 11, 456, 486, 312, 257, 23918, 281, 257, 6374, 2445, 13, 51018], 'temperature': 0.0, 'avg_logprob': -0.14443111419677734, 'compression_ratio': 1.8872549019607843, 'no_speech_prob': 0.14787742495536804}, {'id': 378, 'seek': 236138, 'start': 2374.46, 'end': 2382.7400000000002, 'text': ' So, the way we have x, y, z data members, we will have a hidden field called pointer to virtual', 'tokens': [51018, 407, 11, 264, 636, 321, 362, 2031, 11, 288, 11, 710, 1412, 2679, 11, 321, 486, 362, 257, 7633, 2519, 1219, 23918, 281, 6374, 51432], 'temperature': 0.0, 'avg_logprob': -0.14443111419677734, 'compression_ratio': 1.8872549019607843, 'no_speech_prob': 0.14787742495536804}, {'id': 379, 'seek': 236138, 'start': 2382.7400000000002, 'end': 2388.54, 'text': ' function, right. So, as soon as, because you have the object, you have pointer to the virtual', 'tokens': [51432, 2445, 11, 558, 13, 407, 11, 382, 2321, 382, 11, 570, 291, 362, 264, 2657, 11, 291, 362, 23918, 281, 264, 6374, 51722], 'temperature': 0.0, 'avg_logprob': -0.14443111419677734, 'compression_ratio': 1.8872549019607843, 'no_speech_prob': 0.14787742495536804}, {'id': 380, 'seek': 238854, 'start': 2388.54, 'end': 2395.3, 'text': ' function, you dereference it, you access the right virtual function and then you get the right index,', 'tokens': [50364, 2445, 11, 291, 15969, 5158, 309, 11, 291, 2105, 264, 558, 6374, 2445, 293, 550, 291, 483, 264, 558, 8186, 11, 50702], 'temperature': 0.0, 'avg_logprob': -0.14217175664128484, 'compression_ratio': 1.793939393939394, 'no_speech_prob': 0.14019979536533356}, {'id': 381, 'seek': 238854, 'start': 2395.3, 'end': 2404.94, 'text': ' ok. So, this is how the translated code would look like. For here, we will get this underscore', 'tokens': [50702, 3133, 13, 407, 11, 341, 307, 577, 264, 16805, 3089, 576, 574, 411, 13, 1171, 510, 11, 321, 486, 483, 341, 37556, 51184], 'temperature': 0.0, 'avg_logprob': -0.14217175664128484, 'compression_ratio': 1.793939393939394, 'no_speech_prob': 0.14019979536533356}, {'id': 382, 'seek': 238854, 'start': 2404.94, 'end': 2411.2599999999998, 'text': ' vptr is a pointer to the virtual function table. So, you get the pointer to virtual function table.', 'tokens': [51184, 371, 662, 81, 307, 257, 23918, 281, 264, 6374, 2445, 3199, 13, 407, 11, 291, 483, 264, 23918, 281, 6374, 2445, 3199, 13, 51500], 'temperature': 0.0, 'avg_logprob': -0.14217175664128484, 'compression_ratio': 1.793939393939394, 'no_speech_prob': 0.14019979536533356}, {'id': 383, 'seek': 241126, 'start': 2411.26, 'end': 2419.98, 'text': ' For this function, you take index a, you take index 0, 1, 2, 1, 0, 2, whatever that arrangement', 'tokens': [50364, 1171, 341, 2445, 11, 291, 747, 8186, 257, 11, 291, 747, 8186, 1958, 11, 502, 11, 568, 11, 502, 11, 1958, 11, 568, 11, 2035, 300, 17620, 50800], 'temperature': 0.0, 'avg_logprob': -0.14947888909316645, 'compression_ratio': 1.6432748538011697, 'no_speech_prob': 0.054853405803442}, {'id': 384, 'seek': 241126, 'start': 2419.98, 'end': 2426.46, 'text': ' is, I do not remember. So, these indices are fixed, you pick up the things at the right index and', 'tokens': [50800, 307, 11, 286, 360, 406, 1604, 13, 407, 11, 613, 43840, 366, 6806, 11, 291, 1888, 493, 264, 721, 412, 264, 558, 8186, 293, 51124], 'temperature': 0.0, 'avg_logprob': -0.14947888909316645, 'compression_ratio': 1.6432748538011697, 'no_speech_prob': 0.054853405803442}, {'id': 385, 'seek': 241126, 'start': 2426.46, 'end': 2435.46, 'text': ' then that is going to lead to, so this is a function, a call on a function pointer. So,', 'tokens': [51124, 550, 300, 307, 516, 281, 1477, 281, 11, 370, 341, 307, 257, 2445, 11, 257, 818, 322, 257, 2445, 23918, 13, 407, 11, 51574], 'temperature': 0.0, 'avg_logprob': -0.14947888909316645, 'compression_ratio': 1.6432748538011697, 'no_speech_prob': 0.054853405803442}, {'id': 386, 'seek': 243546, 'start': 2435.46, 'end': 2441.34, 'text': ' this is a pointer to a function and these are the arguments to that function and this', 'tokens': [50364, 341, 307, 257, 23918, 281, 257, 2445, 293, 613, 366, 264, 12869, 281, 300, 2445, 293, 341, 50658], 'temperature': 0.0, 'avg_logprob': -0.17879751862072554, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.004069278948009014}, {'id': 387, 'seek': 243546, 'start': 2441.34, 'end': 2449.34, 'text': ' table essentially contains pointers to the functions, right. This is what happens internally.', 'tokens': [50658, 3199, 4476, 8306, 44548, 281, 264, 6828, 11, 558, 13, 639, 307, 437, 2314, 19501, 13, 51058], 'temperature': 0.0, 'avg_logprob': -0.17879751862072554, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.004069278948009014}, {'id': 388, 'seek': 243546, 'start': 2449.34, 'end': 2459.06, 'text': ' This is the code that compiler generates, ok. Now, you will see that there are some runtime', 'tokens': [51058, 639, 307, 264, 3089, 300, 31958, 23815, 11, 3133, 13, 823, 11, 291, 486, 536, 300, 456, 366, 512, 34474, 51544], 'temperature': 0.0, 'avg_logprob': -0.17879751862072554, 'compression_ratio': 1.6625766871165644, 'no_speech_prob': 0.004069278948009014}, {'id': 389, 'seek': 245906, 'start': 2459.06, 'end': 2467.18, 'text': ' overheads, ok. There are untied, first of all every call has 2 dereferences. More than that,', 'tokens': [50364, 19922, 82, 11, 3133, 13, 821, 366, 1701, 1091, 11, 700, 295, 439, 633, 818, 575, 568, 15969, 612, 2667, 13, 5048, 813, 300, 11, 50770], 'temperature': 0.0, 'avg_logprob': -0.17079931497573853, 'compression_ratio': 1.5783783783783785, 'no_speech_prob': 0.08250095695257187}, {'id': 390, 'seek': 245906, 'start': 2467.18, 'end': 2474.62, 'text': ' I mean Anshuman today talked about the call graph. What will be the call graph here? At this point', 'tokens': [50770, 286, 914, 1107, 2716, 6829, 965, 2825, 466, 264, 818, 4295, 13, 708, 486, 312, 264, 818, 4295, 510, 30, 1711, 341, 935, 51142], 'temperature': 0.0, 'avg_logprob': -0.17079931497573853, 'compression_ratio': 1.5783783783783785, 'no_speech_prob': 0.08250095695257187}, {'id': 391, 'seek': 245906, 'start': 2474.62, 'end': 2483.42, 'text': ' of call or at this point of call, you will say all three functions are possible. So, you have a call', 'tokens': [51142, 295, 818, 420, 412, 341, 935, 295, 818, 11, 291, 486, 584, 439, 1045, 6828, 366, 1944, 13, 407, 11, 291, 362, 257, 818, 51582], 'temperature': 0.0, 'avg_logprob': -0.17079931497573853, 'compression_ratio': 1.5783783783783785, 'no_speech_prob': 0.08250095695257187}, {'id': 392, 'seek': 248342, 'start': 2483.42, 'end': 2494.58, 'text': ' graph that is imprecise. It is highly desirable to eliminate the spurious information from call', 'tokens': [50364, 4295, 300, 307, 704, 13867, 908, 13, 467, 307, 5405, 30533, 281, 13819, 264, 637, 24274, 1589, 490, 818, 50922], 'temperature': 0.0, 'avg_logprob': -0.12188319537950598, 'compression_ratio': 1.4179104477611941, 'no_speech_prob': 0.053302619606256485}, {'id': 393, 'seek': 248342, 'start': 2494.58, 'end': 2507.78, 'text': ' graph. Can we at compile time do some kind of analysis and eliminate the, so if we are calling', 'tokens': [50922, 4295, 13, 1664, 321, 412, 31413, 565, 360, 512, 733, 295, 5215, 293, 13819, 264, 11, 370, 498, 321, 366, 5141, 51582], 'temperature': 0.0, 'avg_logprob': -0.12188319537950598, 'compression_ratio': 1.4179104477611941, 'no_speech_prob': 0.053302619606256485}, {'id': 394, 'seek': 250778, 'start': 2507.94, 'end': 2515.1000000000004, 'text': ' three functions, it is ideally we would like to say, I am not calling A colon colon F, B colon,', 'tokens': [50372, 1045, 6828, 11, 309, 307, 22915, 321, 576, 411, 281, 584, 11, 286, 669, 406, 5141, 316, 8255, 8255, 479, 11, 363, 8255, 11, 50730], 'temperature': 0.0, 'avg_logprob': -0.1882850102015904, 'compression_ratio': 1.8058252427184467, 'no_speech_prob': 0.3057541251182556}, {'id': 395, 'seek': 250778, 'start': 2515.1000000000004, 'end': 2522.5400000000004, 'text': ' I am, these three are not possible. I am calling this particular function. So, there are indirect', 'tokens': [50730, 286, 669, 11, 613, 1045, 366, 406, 1944, 13, 286, 669, 5141, 341, 1729, 2445, 13, 407, 11, 456, 366, 19523, 51102], 'temperature': 0.0, 'avg_logprob': -0.1882850102015904, 'compression_ratio': 1.8058252427184467, 'no_speech_prob': 0.3057541251182556}, {'id': 396, 'seek': 250778, 'start': 2522.5400000000004, 'end': 2529.1400000000003, 'text': ' calls. Those indirect calls can be converted to direct calls. This is a desirable activity.', 'tokens': [51102, 5498, 13, 3950, 19523, 5498, 393, 312, 16424, 281, 2047, 5498, 13, 639, 307, 257, 30533, 5191, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.1882850102015904, 'compression_ratio': 1.8058252427184467, 'no_speech_prob': 0.3057541251182556}, {'id': 397, 'seek': 250778, 'start': 2529.1400000000003, 'end': 2534.98, 'text': ' Sometimes it may not be possible to convert those calls to direct calls. In that case,', 'tokens': [51432, 4803, 309, 815, 406, 312, 1944, 281, 7620, 729, 5498, 281, 2047, 5498, 13, 682, 300, 1389, 11, 51724], 'temperature': 0.0, 'avg_logprob': -0.1882850102015904, 'compression_ratio': 1.8058252427184467, 'no_speech_prob': 0.3057541251182556}, {'id': 398, 'seek': 253498, 'start': 2535.22, 'end': 2540.18, 'text': ' we can say at this call point, instead of these possible 10 functions, I am calling only these', 'tokens': [50376, 321, 393, 584, 412, 341, 818, 935, 11, 2602, 295, 613, 1944, 1266, 6828, 11, 286, 669, 5141, 787, 613, 50624], 'temperature': 0.0, 'avg_logprob': -0.1682207824987009, 'compression_ratio': 1.8612244897959183, 'no_speech_prob': 0.005900758318603039}, {'id': 399, 'seek': 253498, 'start': 2540.18, 'end': 2546.98, 'text': ' two functions, then the interprocedural analysis results can be more precise. So,', 'tokens': [50624, 732, 6828, 11, 550, 264, 728, 4318, 1232, 1807, 5215, 3542, 393, 312, 544, 13600, 13, 407, 11, 50964], 'temperature': 0.0, 'avg_logprob': -0.1682207824987009, 'compression_ratio': 1.8612244897959183, 'no_speech_prob': 0.005900758318603039}, {'id': 400, 'seek': 253498, 'start': 2546.98, 'end': 2551.98, 'text': ' the optimization that I am talking about is the following. Each function call in,', 'tokens': [50964, 264, 19618, 300, 286, 669, 1417, 466, 307, 264, 3480, 13, 6947, 2445, 818, 294, 11, 51214], 'temperature': 0.0, 'avg_logprob': -0.1682207824987009, 'compression_ratio': 1.8612244897959183, 'no_speech_prob': 0.005900758318603039}, {'id': 401, 'seek': 253498, 'start': 2551.98, 'end': 2557.46, 'text': ' so this is the runtime overhead and no function call can be resolved at link time. So, call graph', 'tokens': [51214, 370, 341, 307, 264, 34474, 19922, 293, 572, 2445, 818, 393, 312, 20772, 412, 2113, 565, 13, 407, 11, 818, 4295, 51488], 'temperature': 0.0, 'avg_logprob': -0.1682207824987009, 'compression_ratio': 1.8612244897959183, 'no_speech_prob': 0.005900758318603039}, {'id': 402, 'seek': 253498, 'start': 2557.46, 'end': 2564.9, 'text': ' is not known and hence interprocedural optimizations are prohibited. So, we, the optimization here,', 'tokens': [51488, 307, 406, 2570, 293, 16678, 728, 4318, 1232, 1807, 5028, 14455, 366, 32069, 13, 407, 11, 321, 11, 264, 19618, 510, 11, 51860], 'temperature': 0.0, 'avg_logprob': -0.1682207824987009, 'compression_ratio': 1.8612244897959183, 'no_speech_prob': 0.005900758318603039}, {'id': 403, 'seek': 256490, 'start': 2565.3, 'end': 2572.98, 'text': ' because we know the object, all indirect calls have been replaced by direct calls.', 'tokens': [50384, 570, 321, 458, 264, 2657, 11, 439, 19523, 5498, 362, 668, 10772, 538, 2047, 5498, 13, 50768], 'temperature': 0.0, 'avg_logprob': -0.1401609370582982, 'compression_ratio': 1.6107784431137724, 'no_speech_prob': 0.00030051934299990535}, {'id': 404, 'seek': 256490, 'start': 2574.78, 'end': 2584.2200000000003, 'text': ' Here, this is easy. Here, this is easy and I do not know whether LLVM and GCC does it. Perhaps,', 'tokens': [50858, 1692, 11, 341, 307, 1858, 13, 1692, 11, 341, 307, 1858, 293, 286, 360, 406, 458, 1968, 441, 43, 53, 44, 293, 460, 11717, 775, 309, 13, 10517, 11, 51330], 'temperature': 0.0, 'avg_logprob': -0.1401609370582982, 'compression_ratio': 1.6107784431137724, 'no_speech_prob': 0.00030051934299990535}, {'id': 405, 'seek': 256490, 'start': 2584.2200000000003, 'end': 2590.62, 'text': ' in these simple cases, it may be able to do it. Here, there are no indirect calls and now,', 'tokens': [51330, 294, 613, 2199, 3331, 11, 309, 815, 312, 1075, 281, 360, 309, 13, 1692, 11, 456, 366, 572, 19523, 5498, 293, 586, 11, 51650], 'temperature': 0.0, 'avg_logprob': -0.1401609370582982, 'compression_ratio': 1.6107784431137724, 'no_speech_prob': 0.00030051934299990535}, {'id': 406, 'seek': 259062, 'start': 2590.62, 'end': 2599.02, 'text': ' I know I have a precise call graph. Here, it is very easy because the pointer assignment is', 'tokens': [50364, 286, 458, 286, 362, 257, 13600, 818, 4295, 13, 1692, 11, 309, 307, 588, 1858, 570, 264, 23918, 15187, 307, 50784], 'temperature': 0.0, 'avg_logprob': -0.15420848673040216, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.003482441883534193}, {'id': 407, 'seek': 259062, 'start': 2599.02, 'end': 2605.66, 'text': ' right here within the same function. What happens if the pointer has been set up somewhere else and', 'tokens': [50784, 558, 510, 1951, 264, 912, 2445, 13, 708, 2314, 498, 264, 23918, 575, 668, 992, 493, 4079, 1646, 293, 51116], 'temperature': 0.0, 'avg_logprob': -0.15420848673040216, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.003482441883534193}, {'id': 408, 'seek': 259062, 'start': 2605.66, 'end': 2612.5, 'text': ' you are passing that pointer as an argument? So, you have virtual function call x arrow f and the', 'tokens': [51116, 291, 366, 8437, 300, 23918, 382, 364, 6770, 30, 407, 11, 291, 362, 6374, 2445, 818, 2031, 11610, 283, 293, 264, 51458], 'temperature': 0.0, 'avg_logprob': -0.15420848673040216, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.003482441883534193}, {'id': 409, 'seek': 259062, 'start': 2612.5, 'end': 2618.46, 'text': " pointer has been set up somewhere in some caller's body or some function that has been executed", 'tokens': [51458, 23918, 575, 668, 992, 493, 4079, 294, 512, 48324, 311, 1772, 420, 512, 2445, 300, 575, 668, 17577, 51756], 'temperature': 0.0, 'avg_logprob': -0.15420848673040216, 'compression_ratio': 1.7906976744186047, 'no_speech_prob': 0.003482441883534193}, {'id': 410, 'seek': 261846, 'start': 2618.46, 'end': 2628.06, 'text': ' before. Can you still resolve virtual functions? Can you still do something? That was the topic', 'tokens': [50364, 949, 13, 1664, 291, 920, 14151, 6374, 6828, 30, 1664, 291, 920, 360, 746, 30, 663, 390, 264, 4829, 50844], 'temperature': 0.0, 'avg_logprob': -0.11262490028558775, 'compression_ratio': 1.6008403361344539, 'no_speech_prob': 0.01001063920557499}, {'id': 411, 'seek': 261846, 'start': 2628.06, 'end': 2635.02, 'text': ' of another PhD student in my group. She submitted the thesis just now and she has come up with a', 'tokens': [50844, 295, 1071, 14476, 3107, 294, 452, 1594, 13, 1240, 14405, 264, 22288, 445, 586, 293, 750, 575, 808, 493, 365, 257, 51192], 'temperature': 0.0, 'avg_logprob': -0.11262490028558775, 'compression_ratio': 1.6008403361344539, 'no_speech_prob': 0.01001063920557499}, {'id': 412, 'seek': 261846, 'start': 2635.02, 'end': 2641.26, 'text': ' very nice analysis which is able to do virtual function resolution which is much more precise', 'tokens': [51192, 588, 1481, 5215, 597, 307, 1075, 281, 360, 6374, 2445, 8669, 597, 307, 709, 544, 13600, 51504], 'temperature': 0.0, 'avg_logprob': -0.11262490028558775, 'compression_ratio': 1.6008403361344539, 'no_speech_prob': 0.01001063920557499}, {'id': 413, 'seek': 261846, 'start': 2641.26, 'end': 2647.58, 'text': ' than any of the existing things. Obviously, it takes care of these simplest cases, but it also', 'tokens': [51504, 813, 604, 295, 264, 6741, 721, 13, 7580, 11, 309, 2516, 1127, 295, 613, 22811, 3331, 11, 457, 309, 611, 51820], 'temperature': 0.0, 'avg_logprob': -0.11262490028558775, 'compression_ratio': 1.6008403361344539, 'no_speech_prob': 0.01001063920557499}, {'id': 414, 'seek': 264758, 'start': 2647.58, 'end': 2653.2599999999998, 'text': ' takes care of the more general cases, most of the more general cases and certainly more precise', 'tokens': [50364, 2516, 1127, 295, 264, 544, 2674, 3331, 11, 881, 295, 264, 544, 2674, 3331, 293, 3297, 544, 13600, 50648], 'temperature': 0.0, 'avg_logprob': -0.13098939982327548, 'compression_ratio': 1.7168949771689497, 'no_speech_prob': 0.0018672071164473891}, {'id': 415, 'seek': 264758, 'start': 2653.2599999999998, 'end': 2659.9, 'text': ' than any other approach to virtual function resolution. So, that is a small part of a thesis.', 'tokens': [50648, 813, 604, 661, 3109, 281, 6374, 2445, 8669, 13, 407, 11, 300, 307, 257, 1359, 644, 295, 257, 22288, 13, 50980], 'temperature': 0.0, 'avg_logprob': -0.13098939982327548, 'compression_ratio': 1.7168949771689497, 'no_speech_prob': 0.0018672071164473891}, {'id': 416, 'seek': 264758, 'start': 2659.9, 'end': 2665.62, 'text': ' Then, the thesis goes on to build theory of bi-directional analysis. She does it in demand', 'tokens': [50980, 1396, 11, 264, 22288, 1709, 322, 281, 1322, 5261, 295, 3228, 12, 18267, 41048, 5215, 13, 1240, 775, 309, 294, 4733, 51266], 'temperature': 0.0, 'avg_logprob': -0.13098939982327548, 'compression_ratio': 1.7168949771689497, 'no_speech_prob': 0.0018672071164473891}, {'id': 417, 'seek': 264758, 'start': 2665.62, 'end': 2671.86, 'text': ' driven manner for efficiency. So, lots and lots of things which are at the moment irrelevant to', 'tokens': [51266, 9555, 9060, 337, 10493, 13, 407, 11, 3195, 293, 3195, 295, 721, 597, 366, 412, 264, 1623, 28682, 281, 51578], 'temperature': 0.0, 'avg_logprob': -0.13098939982327548, 'compression_ratio': 1.7168949771689497, 'no_speech_prob': 0.0018672071164473891}, {'id': 418, 'seek': 267186, 'start': 2671.86, 'end': 2678.38, 'text': ' our discussion, but this was optimization. So, optimization that I want to describe was whenever', 'tokens': [50364, 527, 5017, 11, 457, 341, 390, 19618, 13, 407, 11, 19618, 300, 286, 528, 281, 6786, 390, 5699, 50690], 'temperature': 0.0, 'avg_logprob': -0.11489775872999622, 'compression_ratio': 1.7207207207207207, 'no_speech_prob': 0.12243732810020447}, {'id': 419, 'seek': 267186, 'start': 2678.38, 'end': 2685.78, 'text': ' you have a virtual function call, try to do one of these two things. A, try to find out a single', 'tokens': [50690, 291, 362, 257, 6374, 2445, 818, 11, 853, 281, 360, 472, 295, 613, 732, 721, 13, 316, 11, 853, 281, 915, 484, 257, 2167, 51060], 'temperature': 0.0, 'avg_logprob': -0.11489775872999622, 'compression_ratio': 1.7207207207207207, 'no_speech_prob': 0.12243732810020447}, {'id': 420, 'seek': 267186, 'start': 2685.78, 'end': 2692.54, 'text': ' callee and replace the virtual function call by a direct callee if possible which is what has', 'tokens': [51060, 818, 1653, 293, 7406, 264, 6374, 2445, 818, 538, 257, 2047, 818, 1653, 498, 1944, 597, 307, 437, 575, 51398], 'temperature': 0.0, 'avg_logprob': -0.11489775872999622, 'compression_ratio': 1.7207207207207207, 'no_speech_prob': 0.12243732810020447}, {'id': 421, 'seek': 267186, 'start': 2692.54, 'end': 2699.9, 'text': ' happened in all these cases. Thus, if you cannot do that, it is possible that you may not have', 'tokens': [51398, 2011, 294, 439, 613, 3331, 13, 13827, 11, 498, 291, 2644, 360, 300, 11, 309, 307, 1944, 300, 291, 815, 406, 362, 51766], 'temperature': 0.0, 'avg_logprob': -0.11489775872999622, 'compression_ratio': 1.7207207207207207, 'no_speech_prob': 0.12243732810020447}, {'id': 422, 'seek': 269990, 'start': 2699.9, 'end': 2706.02, 'text': ' information about the object or you might have information about two objects from different paths.', 'tokens': [50364, 1589, 466, 264, 2657, 420, 291, 1062, 362, 1589, 466, 732, 6565, 490, 819, 14518, 13, 50670], 'temperature': 0.0, 'avg_logprob': -0.15309392322193494, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.04326297715306282}, {'id': 423, 'seek': 269990, 'start': 2706.02, 'end': 2713.26, 'text': ' A might hold a pointer to, a P might hold the address of a pointer to A along this path,', 'tokens': [50670, 316, 1062, 1797, 257, 23918, 281, 11, 257, 430, 1062, 1797, 264, 2985, 295, 257, 23918, 281, 316, 2051, 341, 3100, 11, 51032], 'temperature': 0.0, 'avg_logprob': -0.15309392322193494, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.04326297715306282}, {'id': 424, 'seek': 269990, 'start': 2713.26, 'end': 2718.44, 'text': ' but address of a pointer to B along this path. Then, you cannot say compile time which path is', 'tokens': [51032, 457, 2985, 295, 257, 23918, 281, 363, 2051, 341, 3100, 13, 1396, 11, 291, 2644, 584, 31413, 565, 597, 3100, 307, 51291], 'temperature': 0.0, 'avg_logprob': -0.15309392322193494, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.04326297715306282}, {'id': 425, 'seek': 269990, 'start': 2718.44, 'end': 2724.1, 'text': ' going to get executed and then you have to say it could be this function or that function which', 'tokens': [51291, 516, 281, 483, 17577, 293, 550, 291, 362, 281, 584, 309, 727, 312, 341, 2445, 420, 300, 2445, 597, 51574], 'temperature': 0.0, 'avg_logprob': -0.15309392322193494, 'compression_ratio': 1.8620689655172413, 'no_speech_prob': 0.04326297715306282}, {'id': 426, 'seek': 272410, 'start': 2724.1, 'end': 2732.22, 'text': ' is also useful because the inter procedural path certainly becomes inter procedural control. The', 'tokens': [50364, 307, 611, 4420, 570, 264, 728, 43951, 3100, 3297, 3643, 728, 43951, 1969, 13, 440, 50770], 'temperature': 0.0, 'avg_logprob': -0.1439170589694729, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.05496285483241081}, {'id': 427, 'seek': 272410, 'start': 2732.22, 'end': 2737.38, 'text': ' call graph for inter procedural analysis certainly becomes more precise and therefore,', 'tokens': [50770, 818, 4295, 337, 728, 43951, 5215, 3297, 3643, 544, 13600, 293, 4412, 11, 51028], 'temperature': 0.0, 'avg_logprob': -0.1439170589694729, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.05496285483241081}, {'id': 428, 'seek': 272410, 'start': 2737.38, 'end': 2747.18, 'text': ' all inter procedural optimizations can benefit. So, this is what we wanted to, I wanted to', 'tokens': [51028, 439, 728, 43951, 5028, 14455, 393, 5121, 13, 407, 11, 341, 307, 437, 321, 1415, 281, 11, 286, 1415, 281, 51518], 'temperature': 0.0, 'avg_logprob': -0.1439170589694729, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.05496285483241081}, {'id': 429, 'seek': 272410, 'start': 2747.18, 'end': 2752.9, 'text': ' describe and I will check that virtual business. Just give me a few minutes. Most of these', 'tokens': [51518, 6786, 293, 286, 486, 1520, 300, 6374, 1606, 13, 1449, 976, 385, 257, 1326, 2077, 13, 4534, 295, 613, 51804], 'temperature': 0.0, 'avg_logprob': -0.1439170589694729, 'compression_ratio': 1.7464114832535884, 'no_speech_prob': 0.05496285483241081}, {'id': 430, 'seek': 275290, 'start': 2752.9, 'end': 2762.14, 'text': ' decisions cannot depend on whether it is two level or three level. I mean, unless in two levels,', 'tokens': [50364, 5327, 2644, 5672, 322, 1968, 309, 307, 732, 1496, 420, 1045, 1496, 13, 286, 914, 11, 5969, 294, 732, 4358, 11, 50826], 'temperature': 0.0, 'avg_logprob': -0.17931211447413964, 'compression_ratio': 1.8717948717948718, 'no_speech_prob': 0.07360488921403885}, {'id': 431, 'seek': 275290, 'start': 2762.14, 'end': 2767.86, 'text': ' it is able to find out in three levels, it is not able to find out, but you are saying the other way', 'tokens': [50826, 309, 307, 1075, 281, 915, 484, 294, 1045, 4358, 11, 309, 307, 406, 1075, 281, 915, 484, 11, 457, 291, 366, 1566, 264, 661, 636, 51112], 'temperature': 0.0, 'avg_logprob': -0.17931211447413964, 'compression_ratio': 1.8717948717948718, 'no_speech_prob': 0.07360488921403885}, {'id': 432, 'seek': 275290, 'start': 2767.86, 'end': 2776.54, 'text': ' round. In three levels, it is able to find out. I will take a look at it. I have to understand', 'tokens': [51112, 3098, 13, 682, 1045, 4358, 11, 309, 307, 1075, 281, 915, 484, 13, 286, 486, 747, 257, 574, 412, 309, 13, 286, 362, 281, 1223, 51546], 'temperature': 0.0, 'avg_logprob': -0.17931211447413964, 'compression_ratio': 1.8717948717948718, 'no_speech_prob': 0.07360488921403885}, {'id': 433, 'seek': 277654, 'start': 2776.66, 'end': 2789.62, 'text': ' any other question. So, the slides for yesterday have been uploaded already on the workshop page', 'tokens': [50370, 604, 661, 1168, 13, 407, 11, 264, 9788, 337, 5186, 362, 668, 17135, 1217, 322, 264, 13541, 3028, 51018], 'temperature': 0.0, 'avg_logprob': -0.21027070454188757, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.14391152560710907}, {'id': 434, 'seek': 277654, 'start': 2789.62, 'end': 2796.2599999999998, 'text': ' and Nimisha will be uploading these slides as well, but let me first correct. Let me just check this.', 'tokens': [51018, 293, 45251, 16546, 486, 312, 27301, 613, 9788, 382, 731, 11, 457, 718, 385, 700, 3006, 13, 961, 385, 445, 1520, 341, 13, 51350], 'temperature': 0.0, 'avg_logprob': -0.21027070454188757, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.14391152560710907}, {'id': 435, 'seek': 277654, 'start': 2796.2599999999998, 'end': 2800.34, 'text': ' You already uploaded? Okay, fine. So, she will upload once again if there is a correction,', 'tokens': [51350, 509, 1217, 17135, 30, 1033, 11, 2489, 13, 407, 11, 750, 486, 6580, 1564, 797, 498, 456, 307, 257, 19984, 11, 51554], 'temperature': 0.0, 'avg_logprob': -0.21027070454188757, 'compression_ratio': 1.529100529100529, 'no_speech_prob': 0.14391152560710907}, {'id': 436, 'seek': 280034, 'start': 2800.34, 'end': 2808.1400000000003, 'text': ' but there is a possibility that I may have to make a correction here. Can destructor be made', 'tokens': [50364, 457, 456, 307, 257, 7959, 300, 286, 815, 362, 281, 652, 257, 19984, 510, 13, 1664, 2677, 14535, 312, 1027, 50754], 'temperature': 0.0, 'avg_logprob': -0.16989873803180197, 'compression_ratio': 1.625, 'no_speech_prob': 0.015361160039901733}, {'id': 437, 'seek': 280034, 'start': 2808.1400000000003, 'end': 2816.02, 'text': ' virtual? I do not know. See, destructor, it is definitely the case that destructor of a derived', 'tokens': [50754, 6374, 30, 286, 360, 406, 458, 13, 3008, 11, 2677, 14535, 11, 309, 307, 2138, 264, 1389, 300, 2677, 14535, 295, 257, 18949, 51148], 'temperature': 0.0, 'avg_logprob': -0.16989873803180197, 'compression_ratio': 1.625, 'no_speech_prob': 0.015361160039901733}, {'id': 438, 'seek': 280034, 'start': 2816.02, 'end': 2822.98, 'text': ' class internally calls destructor of a base class because destructor, because we are also getting', 'tokens': [51148, 1508, 19501, 5498, 2677, 14535, 295, 257, 3096, 1508, 570, 2677, 14535, 11, 570, 321, 366, 611, 1242, 51496], 'temperature': 0.0, 'avg_logprob': -0.16989873803180197, 'compression_ratio': 1.625, 'no_speech_prob': 0.015361160039901733}, {'id': 439, 'seek': 282298, 'start': 2822.98, 'end': 2833.34, 'text': ' the data, the data members of the base class. So, you are saying that then the memory allocated', 'tokens': [50364, 264, 1412, 11, 264, 1412, 2679, 295, 264, 3096, 1508, 13, 407, 11, 291, 366, 1566, 300, 550, 264, 4675, 29772, 50882], 'temperature': 0.0, 'avg_logprob': -0.17517761562181555, 'compression_ratio': 1.6754385964912282, 'no_speech_prob': 0.02026551403105259}, {'id': 440, 'seek': 282298, 'start': 2833.34, 'end': 2843.3, 'text': ' in the base class may not get freed, allocated in the derived class may not get freed possible.', 'tokens': [50882, 294, 264, 3096, 1508, 815, 406, 483, 21796, 11, 29772, 294, 264, 18949, 1508, 815, 406, 483, 21796, 1944, 13, 51380], 'temperature': 0.0, 'avg_logprob': -0.17517761562181555, 'compression_ratio': 1.6754385964912282, 'no_speech_prob': 0.02026551403105259}]