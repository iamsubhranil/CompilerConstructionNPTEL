[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 15.44, 'text': ' Okay, so let us start now the session. So one thing is that last session all of you', 'tokens': [50364, 1033, 11, 370, 718, 505, 722, 586, 264, 5481, 13, 407, 472, 551, 307, 300, 1036, 5481, 439, 295, 291, 51136], 'temperature': 0.0, 'avg_logprob': -0.2871416409810384, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.1414862722158432}, {'id': 1, 'seek': 0, 'start': 15.44, 'end': 20.04, 'text': ' look very sleepy, so look like you are tired of static analysis, right? All of you become', 'tokens': [51136, 574, 588, 24908, 11, 370, 574, 411, 291, 366, 5868, 295, 13437, 5215, 11, 558, 30, 1057, 295, 291, 1813, 51366], 'temperature': 0.0, 'avg_logprob': -0.2871416409810384, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.1414862722158432}, {'id': 2, 'seek': 0, 'start': 20.04, 'end': 27.560000000000002, 'text': ' very static. So I need to get some dynamism in you. So we will get to, we will look at', 'tokens': [51366, 588, 13437, 13, 407, 286, 643, 281, 483, 512, 5999, 1434, 294, 291, 13, 407, 321, 486, 483, 281, 11, 321, 486, 574, 412, 51742], 'temperature': 0.0, 'avg_logprob': -0.2871416409810384, 'compression_ratio': 1.5853658536585367, 'no_speech_prob': 0.1414862722158432}, {'id': 3, 'seek': 2756, 'start': 27.56, 'end': 33.28, 'text': ' something called dynamic analysis. So not much but at least I will give you introduction', 'tokens': [50364, 746, 1219, 8546, 5215, 13, 407, 406, 709, 457, 412, 1935, 286, 486, 976, 291, 9339, 50650], 'temperature': 0.0, 'avg_logprob': -0.17165087430905074, 'compression_ratio': 1.5918367346938775, 'no_speech_prob': 0.12415241450071335}, {'id': 4, 'seek': 2756, 'start': 33.28, 'end': 42.2, 'text': ' what does it mean, what to do with it.', 'tokens': [50650, 437, 775, 309, 914, 11, 437, 281, 360, 365, 309, 13, 51096], 'temperature': 0.0, 'avg_logprob': -0.17165087430905074, 'compression_ratio': 1.5918367346938775, 'no_speech_prob': 0.12415241450071335}, {'id': 5, 'seek': 2756, 'start': 42.2, 'end': 51.56, 'text': ' So the analogy was that remember we said that, so we said that there are two ways of, even', 'tokens': [51096, 407, 264, 21663, 390, 300, 1604, 321, 848, 300, 11, 370, 321, 848, 300, 456, 366, 732, 2098, 295, 11, 754, 51564], 'temperature': 0.0, 'avg_logprob': -0.17165087430905074, 'compression_ratio': 1.5918367346938775, 'no_speech_prob': 0.12415241450071335}, {'id': 6, 'seek': 2756, 'start': 51.56, 'end': 57.28, 'text': ' as a human there are multiple ways of inspecting a program and figuring out what is going on.', 'tokens': [51564, 382, 257, 1952, 456, 366, 3866, 2098, 295, 15018, 278, 257, 1461, 293, 15213, 484, 437, 307, 516, 322, 13, 51850], 'temperature': 0.0, 'avg_logprob': -0.17165087430905074, 'compression_ratio': 1.5918367346938775, 'no_speech_prob': 0.12415241450071335}, {'id': 7, 'seek': 5728, 'start': 58.0, 'end': 65.12, 'text': ' So what were the different ways we said we could really find, maybe let us say find a', 'tokens': [50400, 407, 437, 645, 264, 819, 2098, 321, 848, 321, 727, 534, 915, 11, 1310, 718, 505, 584, 915, 257, 50756], 'temperature': 0.0, 'avg_logprob': -0.1906193067442696, 'compression_ratio': 1.778225806451613, 'no_speech_prob': 0.00853796023875475}, {'id': 8, 'seek': 5728, 'start': 65.12, 'end': 71.92, 'text': ' bug in a program. One is we can actually stare at the code and then say okay what is going', 'tokens': [50756, 7426, 294, 257, 1461, 13, 1485, 307, 321, 393, 767, 22432, 412, 264, 3089, 293, 550, 584, 1392, 437, 307, 516, 51096], 'temperature': 0.0, 'avg_logprob': -0.1906193067442696, 'compression_ratio': 1.778225806451613, 'no_speech_prob': 0.00853796023875475}, {'id': 9, 'seek': 5728, 'start': 71.92, 'end': 76.68, 'text': ' on with it. That was static analysis because you are just looking at the program text and', 'tokens': [51096, 322, 365, 309, 13, 663, 390, 13437, 5215, 570, 291, 366, 445, 1237, 412, 264, 1461, 2487, 293, 51334], 'temperature': 0.0, 'avg_logprob': -0.1906193067442696, 'compression_ratio': 1.778225806451613, 'no_speech_prob': 0.00853796023875475}, {'id': 10, 'seek': 5728, 'start': 76.68, 'end': 80.8, 'text': ' try to figure out what is going on. It was a very similar case with our analysis that', 'tokens': [51334, 853, 281, 2573, 484, 437, 307, 516, 322, 13, 467, 390, 257, 588, 2531, 1389, 365, 527, 5215, 300, 51540], 'temperature': 0.0, 'avg_logprob': -0.1906193067442696, 'compression_ratio': 1.778225806451613, 'no_speech_prob': 0.00853796023875475}, {'id': 11, 'seek': 5728, 'start': 80.8, 'end': 86.16, 'text': ' we were doing till now. We were just analyzing the program text which was maybe compiled', 'tokens': [51540, 321, 645, 884, 4288, 586, 13, 492, 645, 445, 23663, 264, 1461, 2487, 597, 390, 1310, 36548, 51808], 'temperature': 0.0, 'avg_logprob': -0.1906193067442696, 'compression_ratio': 1.778225806451613, 'no_speech_prob': 0.00853796023875475}, {'id': 12, 'seek': 8616, 'start': 86.16, 'end': 89.84, 'text': ' down to bit code or whatever it is and then it was, we analyzed the bit code. But whatever', 'tokens': [50364, 760, 281, 857, 3089, 420, 2035, 309, 307, 293, 550, 309, 390, 11, 321, 28181, 264, 857, 3089, 13, 583, 2035, 50548], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 13, 'seek': 8616, 'start': 89.84, 'end': 95.0, 'text': ' it is, it is the form of the program text, right? We were not doing anything with the,', 'tokens': [50548, 309, 307, 11, 309, 307, 264, 1254, 295, 264, 1461, 2487, 11, 558, 30, 492, 645, 406, 884, 1340, 365, 264, 11, 50806], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 14, 'seek': 8616, 'start': 95.0, 'end': 100.24, 'text': ' we were not trying to understand the executions of the program. So the other way of analyzing', 'tokens': [50806, 321, 645, 406, 1382, 281, 1223, 264, 4454, 3666, 295, 264, 1461, 13, 407, 264, 661, 636, 295, 23663, 51068], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 15, 'seek': 8616, 'start': 100.24, 'end': 106.03999999999999, 'text': ' a program is to simply run the program a lot of inputs, collect what happens on those different', 'tokens': [51068, 257, 1461, 307, 281, 2935, 1190, 264, 1461, 257, 688, 295, 15743, 11, 2500, 437, 2314, 322, 729, 819, 51358], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 16, 'seek': 8616, 'start': 106.03999999999999, 'end': 110.03999999999999, 'text': ' inputs and they say oh looks like the program is doing this, right?', 'tokens': [51358, 15743, 293, 436, 584, 1954, 1542, 411, 264, 1461, 307, 884, 341, 11, 558, 30, 51558], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 17, 'seek': 8616, 'start': 110.03999999999999, 'end': 114.24, 'text': ' Like for example, let us say you want to figure out what a certain program is doing. What', 'tokens': [51558, 1743, 337, 1365, 11, 718, 505, 584, 291, 528, 281, 2573, 484, 437, 257, 1629, 1461, 307, 884, 13, 708, 51768], 'temperature': 0.0, 'avg_logprob': -0.1707613284771259, 'compression_ratio': 1.9090909090909092, 'no_speech_prob': 0.019077586010098457}, {'id': 18, 'seek': 11424, 'start': 114.24, 'end': 119.91999999999999, 'text': ' you can do is you can essentially stare at the text and say oh two integers plus a plus', 'tokens': [50364, 291, 393, 360, 307, 291, 393, 4476, 22432, 412, 264, 2487, 293, 584, 1954, 732, 41674, 1804, 257, 1804, 50648], 'temperature': 0.0, 'avg_logprob': -0.18616030766413763, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.08447156101465225}, {'id': 19, 'seek': 11424, 'start': 119.91999999999999, 'end': 125.11999999999999, 'text': ' b okay it is adding two numbers. The other option is just run the program on different', 'tokens': [50648, 272, 1392, 309, 307, 5127, 732, 3547, 13, 440, 661, 3614, 307, 445, 1190, 264, 1461, 322, 819, 50908], 'temperature': 0.0, 'avg_logprob': -0.18616030766413763, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.08447156101465225}, {'id': 20, 'seek': 11424, 'start': 125.11999999999999, 'end': 131.24, 'text': ' inputs. You give 1 and 2, it gives 3. You give 4 and 5, it gives 9, right? And then', 'tokens': [50908, 15743, 13, 509, 976, 502, 293, 568, 11, 309, 2709, 805, 13, 509, 976, 1017, 293, 1025, 11, 309, 2709, 1722, 11, 558, 30, 400, 550, 51214], 'temperature': 0.0, 'avg_logprob': -0.18616030766413763, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.08447156101465225}, {'id': 21, 'seek': 11424, 'start': 131.24, 'end': 135.16, 'text': ' say oh I tested it on quite some few programs. Every time it gives the addition of two numbers.', 'tokens': [51214, 584, 1954, 286, 8246, 309, 322, 1596, 512, 1326, 4268, 13, 2048, 565, 309, 2709, 264, 4500, 295, 732, 3547, 13, 51410], 'temperature': 0.0, 'avg_logprob': -0.18616030766413763, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.08447156101465225}, {'id': 22, 'seek': 11424, 'start': 135.16, 'end': 141.38, 'text': ' So must be the program which adds two numbers. What is the problem in each of these two cases?', 'tokens': [51410, 407, 1633, 312, 264, 1461, 597, 10860, 732, 3547, 13, 708, 307, 264, 1154, 294, 1184, 295, 613, 732, 3331, 30, 51721], 'temperature': 0.0, 'avg_logprob': -0.18616030766413763, 'compression_ratio': 1.7677165354330708, 'no_speech_prob': 0.08447156101465225}, {'id': 23, 'seek': 14138, 'start': 141.38, 'end': 149.26, 'text': ' So let us say static analysis and dynamic analysis. So what is the pros and the cons', 'tokens': [50364, 407, 718, 505, 584, 13437, 5215, 293, 8546, 5215, 13, 407, 437, 307, 264, 6267, 293, 264, 1014, 50758], 'temperature': 0.0, 'avg_logprob': -0.19879824320475262, 'compression_ratio': 1.43801652892562, 'no_speech_prob': 0.6813163161277771}, {'id': 24, 'seek': 14138, 'start': 149.26, 'end': 167.94, 'text': ' do you think? Static analysis will be? Ensure the correctness. Excellent, excellent. That', 'tokens': [50758, 360, 291, 519, 30, 745, 2399, 5215, 486, 312, 30, 25979, 540, 264, 3006, 1287, 13, 16723, 11, 7103, 13, 663, 51692], 'temperature': 0.0, 'avg_logprob': -0.19879824320475262, 'compression_ratio': 1.43801652892562, 'no_speech_prob': 0.6813163161277771}, {'id': 25, 'seek': 16794, 'start': 167.94, 'end': 172.5, 'text': ' is the main important point, right? For a static analysis we are trying to analyze all', 'tokens': [50364, 307, 264, 2135, 1021, 935, 11, 558, 30, 1171, 257, 13437, 5215, 321, 366, 1382, 281, 12477, 439, 50592], 'temperature': 0.0, 'avg_logprob': -0.19119347965016084, 'compression_ratio': 1.65, 'no_speech_prob': 0.4125571548938751}, {'id': 26, 'seek': 16794, 'start': 172.5, 'end': 179.34, 'text': ' possible executions and then say what might have happened, what might happen, right? However,', 'tokens': [50592, 1944, 4454, 3666, 293, 550, 584, 437, 1062, 362, 2011, 11, 437, 1062, 1051, 11, 558, 30, 2908, 11, 50934], 'temperature': 0.0, 'avg_logprob': -0.19119347965016084, 'compression_ratio': 1.65, 'no_speech_prob': 0.4125571548938751}, {'id': 27, 'seek': 16794, 'start': 179.34, 'end': 185.06, 'text': ' in dynamic analysis we simply run the program on few inputs and that is all I get to see.', 'tokens': [50934, 294, 8546, 5215, 321, 2935, 1190, 264, 1461, 322, 1326, 15743, 293, 300, 307, 439, 286, 483, 281, 536, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.19119347965016084, 'compression_ratio': 1.65, 'no_speech_prob': 0.4125571548938751}, {'id': 28, 'seek': 16794, 'start': 185.06, 'end': 188.42, 'text': ' So let us say even this addition of two numbers maybe if the program was something like this', 'tokens': [51220, 407, 718, 505, 584, 754, 341, 4500, 295, 732, 3547, 1310, 498, 264, 1461, 390, 746, 411, 341, 51388], 'temperature': 0.0, 'avg_logprob': -0.19119347965016084, 'compression_ratio': 1.65, 'no_speech_prob': 0.4125571548938751}, {'id': 29, 'seek': 18842, 'start': 188.42, 'end': 201.38, 'text': ' where it says if a is greater than b then return like a plus b else return a minus b. So let us', 'tokens': [50364, 689, 309, 1619, 498, 257, 307, 5044, 813, 272, 550, 2736, 411, 257, 1804, 272, 1646, 2736, 257, 3175, 272, 13, 407, 718, 505, 51012], 'temperature': 0.0, 'avg_logprob': -0.1585729834959679, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.338379830121994}, {'id': 30, 'seek': 18842, 'start': 201.38, 'end': 208.29999999999998, 'text': ' say all the inputs you sampled with one of them were a greater than b. So you never even handle', 'tokens': [51012, 584, 439, 264, 15743, 291, 3247, 15551, 365, 472, 295, 552, 645, 257, 5044, 813, 272, 13, 407, 291, 1128, 754, 4813, 51358], 'temperature': 0.0, 'avg_logprob': -0.1585729834959679, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.338379830121994}, {'id': 31, 'seek': 18842, 'start': 208.29999999999998, 'end': 211.7, 'text': ' the other side. You never even went to the other side. So you never got an output where you got', 'tokens': [51358, 264, 661, 1252, 13, 509, 1128, 754, 1437, 281, 264, 661, 1252, 13, 407, 291, 1128, 658, 364, 5598, 689, 291, 658, 51528], 'temperature': 0.0, 'avg_logprob': -0.1585729834959679, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.338379830121994}, {'id': 32, 'seek': 18842, 'start': 211.7, 'end': 215.89999999999998, 'text': ' the other result. So you never got to know that the program has a different behavior because you', 'tokens': [51528, 264, 661, 1874, 13, 407, 291, 1128, 658, 281, 458, 300, 264, 1461, 575, 257, 819, 5223, 570, 291, 51738], 'temperature': 0.0, 'avg_logprob': -0.1585729834959679, 'compression_ratio': 1.8823529411764706, 'no_speech_prob': 0.338379830121994}, {'id': 33, 'seek': 21590, 'start': 215.9, 'end': 221.54, 'text': ' never run the program on an input which could have exhibited that other behavior. However,', 'tokens': [50364, 1128, 1190, 264, 1461, 322, 364, 4846, 597, 727, 362, 49446, 300, 661, 5223, 13, 2908, 11, 50646], 'temperature': 0.0, 'avg_logprob': -0.15243730178246132, 'compression_ratio': 1.8326530612244898, 'no_speech_prob': 0.18973147869110107}, {'id': 34, 'seek': 21590, 'start': 221.54, 'end': 226.58, 'text': ' in a static analysis you would have done some sort of like MFP analysis where this would be', 'tokens': [50646, 294, 257, 13437, 5215, 291, 576, 362, 1096, 512, 1333, 295, 411, 376, 45882, 5215, 689, 341, 576, 312, 50898], 'temperature': 0.0, 'avg_logprob': -0.15243730178246132, 'compression_ratio': 1.8326530612244898, 'no_speech_prob': 0.18973147869110107}, {'id': 35, 'seek': 21590, 'start': 226.58, 'end': 230.86, 'text': ' one basic log, this would be one basic log and you will take a join of these two basic logs.', 'tokens': [50898, 472, 3875, 3565, 11, 341, 576, 312, 472, 3875, 3565, 293, 291, 486, 747, 257, 3917, 295, 613, 732, 3875, 20820, 13, 51112], 'temperature': 0.0, 'avg_logprob': -0.15243730178246132, 'compression_ratio': 1.8326530612244898, 'no_speech_prob': 0.18973147869110107}, {'id': 36, 'seek': 21590, 'start': 230.86, 'end': 236.9, 'text': ' So no matter what you would have anyway seen tried to capture the different behaviors. Very', 'tokens': [51112, 407, 572, 1871, 437, 291, 576, 362, 4033, 1612, 3031, 281, 7983, 264, 819, 15501, 13, 4372, 51414], 'temperature': 0.0, 'avg_logprob': -0.15243730178246132, 'compression_ratio': 1.8326530612244898, 'no_speech_prob': 0.18973147869110107}, {'id': 37, 'seek': 21590, 'start': 236.9, 'end': 240.46, 'text': ' good. So if static analysis is so good why should you even have dynamic analysis?', 'tokens': [51414, 665, 13, 407, 498, 13437, 5215, 307, 370, 665, 983, 820, 291, 754, 362, 8546, 5215, 30, 51592], 'temperature': 0.0, 'avg_logprob': -0.15243730178246132, 'compression_ratio': 1.8326530612244898, 'no_speech_prob': 0.18973147869110107}, {'id': 38, 'seek': 24046, 'start': 240.46, 'end': 253.10000000000002, 'text': ' But I still have to do an analysis. So what do we do in that case? You are on the exactly', 'tokens': [50364, 583, 286, 920, 362, 281, 360, 364, 5215, 13, 407, 437, 360, 321, 360, 294, 300, 1389, 30, 509, 366, 322, 264, 2293, 50996], 'temperature': 0.0, 'avg_logprob': -0.2169476572672526, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.0372079536318779}, {'id': 39, 'seek': 24046, 'start': 253.10000000000002, 'end': 259.90000000000003, 'text': ' the right path. No, but I can still take anything and do some sort of static analysis on it.', 'tokens': [50996, 264, 558, 3100, 13, 883, 11, 457, 286, 393, 920, 747, 1340, 293, 360, 512, 1333, 295, 13437, 5215, 322, 309, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.2169476572672526, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.0372079536318779}, {'id': 40, 'seek': 24046, 'start': 259.90000000000003, 'end': 270.38, 'text': ' Debugging I can do static analysis also. I can try to see what are the different like for the', 'tokens': [51336, 27347, 697, 3249, 286, 393, 360, 13437, 5215, 611, 13, 286, 393, 853, 281, 536, 437, 366, 264, 819, 411, 337, 264, 51860], 'temperature': 0.0, 'avg_logprob': -0.2169476572672526, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.0372079536318779}, {'id': 41, 'seek': 27038, 'start': 270.38, 'end': 273.82, 'text': ' buffer overflow example. We were trying to do debugging in static analysis. We were trying', 'tokens': [50364, 21762, 37772, 1365, 13, 492, 645, 1382, 281, 360, 45592, 294, 13437, 5215, 13, 492, 645, 1382, 50536], 'temperature': 0.0, 'avg_logprob': -0.15529735271747297, 'compression_ratio': 1.6545454545454545, 'no_speech_prob': 0.010301193222403526}, {'id': 42, 'seek': 27038, 'start': 273.82, 'end': 278.3, 'text': ' to find out the range sets of the index and whichever if the index can overflow then I', 'tokens': [50536, 281, 915, 484, 264, 3613, 6352, 295, 264, 8186, 293, 24123, 498, 264, 8186, 393, 37772, 550, 286, 50760], 'temperature': 0.0, 'avg_logprob': -0.15529735271747297, 'compression_ratio': 1.6545454545454545, 'no_speech_prob': 0.010301193222403526}, {'id': 43, 'seek': 27038, 'start': 278.3, 'end': 292.9, 'text': ' would say that well looks like there could be a bug. No, but that you can do in static analysis', 'tokens': [50760, 576, 584, 300, 731, 1542, 411, 456, 727, 312, 257, 7426, 13, 883, 11, 457, 300, 291, 393, 360, 294, 13437, 5215, 51490], 'temperature': 0.0, 'avg_logprob': -0.15529735271747297, 'compression_ratio': 1.6545454545454545, 'no_speech_prob': 0.010301193222403526}, {'id': 44, 'seek': 29290, 'start': 292.9, 'end': 301.97999999999996, 'text': ' also. So static analysis will tell you the you can do a pointer analysis as a static analysis', 'tokens': [50364, 611, 13, 407, 13437, 5215, 486, 980, 291, 264, 291, 393, 360, 257, 23918, 5215, 382, 257, 13437, 5215, 50818], 'temperature': 0.0, 'avg_logprob': -0.207447092298051, 'compression_ratio': 1.830188679245283, 'no_speech_prob': 0.42550429701805115}, {'id': 45, 'seek': 29290, 'start': 301.97999999999996, 'end': 310.34, 'text': ' and it will tell you the what are the locations it can point to. What is that bit of uncertainty?', 'tokens': [50818, 293, 309, 486, 980, 291, 264, 437, 366, 264, 9253, 309, 393, 935, 281, 13, 708, 307, 300, 857, 295, 15697, 30, 51236], 'temperature': 0.0, 'avg_logprob': -0.207447092298051, 'compression_ratio': 1.830188679245283, 'no_speech_prob': 0.42550429701805115}, {'id': 46, 'seek': 29290, 'start': 310.34, 'end': 317.38, 'text': ' Why is that there is a certain bit of uncertainty? So what it is summarizing things for all inputs.', 'tokens': [51236, 1545, 307, 300, 456, 307, 257, 1629, 857, 295, 15697, 30, 407, 437, 309, 307, 14611, 3319, 721, 337, 439, 15743, 13, 51588], 'temperature': 0.0, 'avg_logprob': -0.207447092298051, 'compression_ratio': 1.830188679245283, 'no_speech_prob': 0.42550429701805115}, {'id': 47, 'seek': 31738, 'start': 317.38, 'end': 324.82, 'text': ' That is what we want. I want to know the summary overall inputs. That is anyway what I want to', 'tokens': [50364, 663, 307, 437, 321, 528, 13, 286, 528, 281, 458, 264, 12691, 4787, 15743, 13, 663, 307, 4033, 437, 286, 528, 281, 50736], 'temperature': 0.0, 'avg_logprob': -0.16867876052856445, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.1551382690668106}, {'id': 48, 'seek': 31738, 'start': 324.82, 'end': 341.5, 'text': " capture. Those things I can always discount in static analysis also. I can say don't even look", 'tokens': [50736, 7983, 13, 3950, 721, 286, 393, 1009, 11635, 294, 13437, 5215, 611, 13, 286, 393, 584, 500, 380, 754, 574, 51570], 'temperature': 0.0, 'avg_logprob': -0.16867876052856445, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.1551382690668106}, {'id': 49, 'seek': 31738, 'start': 341.5, 'end': 346.42, 'text': " at paths which are going here or coming from here. I can do the discounting. So it's a matter of", 'tokens': [51570, 412, 14518, 597, 366, 516, 510, 420, 1348, 490, 510, 13, 286, 393, 360, 264, 11635, 278, 13, 407, 309, 311, 257, 1871, 295, 51816], 'temperature': 0.0, 'avg_logprob': -0.16867876052856445, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.1551382690668106}, {'id': 50, 'seek': 34642, 'start': 346.42, 'end': 353.62, 'text': ' modeling the program properly, modeling those constructs properly. Just think about what all', 'tokens': [50364, 15983, 264, 1461, 6108, 11, 15983, 729, 7690, 82, 6108, 13, 1449, 519, 466, 437, 439, 50724], 'temperature': 0.0, 'avg_logprob': -0.20536022186279296, 'compression_ratio': 1.375, 'no_speech_prob': 0.28817957639694214}, {'id': 51, 'seek': 34642, 'start': 353.62, 'end': 359.90000000000003, 'text': ' we learned last time. So we are doing an MFP analysis. So what cannot be nice in that setting?', 'tokens': [50724, 321, 3264, 1036, 565, 13, 407, 321, 366, 884, 364, 376, 45882, 5215, 13, 407, 437, 2644, 312, 1481, 294, 300, 3287, 30, 51038], 'temperature': 0.0, 'avg_logprob': -0.20536022186279296, 'compression_ratio': 1.375, 'no_speech_prob': 0.28817957639694214}, {'id': 52, 'seek': 35990, 'start': 359.9, 'end': 381.09999999999997, 'text': ' So we are doing this. We did this data analysis. So what was the property of the MFP analysis?', 'tokens': [50364, 407, 321, 366, 884, 341, 13, 492, 630, 341, 1412, 5215, 13, 407, 437, 390, 264, 4707, 295, 264, 376, 45882, 5215, 30, 51424], 'temperature': 0.0, 'avg_logprob': -0.23258237485532407, 'compression_ratio': 1.1325301204819278, 'no_speech_prob': 0.1006247028708458}, {'id': 53, 'seek': 38110, 'start': 381.1, 'end': 390.14000000000004, 'text': ' So what is the ultimate thing? The ultimate thing is I want the MOP solution no matter I do', 'tokens': [50364, 407, 437, 307, 264, 9705, 551, 30, 440, 9705, 551, 307, 286, 528, 264, 376, 12059, 3827, 572, 1871, 286, 360, 50816], 'temperature': 0.0, 'avg_logprob': -0.19855154321548787, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.15503059327602386}, {'id': 54, 'seek': 38110, 'start': 390.14000000000004, 'end': 394.54, 'text': ' a static analysis or dynamic analysis. In dynamic analysis also if I am able to capture all paths', 'tokens': [50816, 257, 13437, 5215, 420, 8546, 5215, 13, 682, 8546, 5215, 611, 498, 286, 669, 1075, 281, 7983, 439, 14518, 51036], 'temperature': 0.0, 'avg_logprob': -0.19855154321548787, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.15503059327602386}, {'id': 55, 'seek': 38110, 'start': 394.54, 'end': 401.14000000000004, 'text': ' and I can summarize the results across all paths, I will be most happy. That is like awesome life.', 'tokens': [51036, 293, 286, 393, 20858, 264, 3542, 2108, 439, 14518, 11, 286, 486, 312, 881, 2055, 13, 663, 307, 411, 3476, 993, 13, 51366], 'temperature': 0.0, 'avg_logprob': -0.19855154321548787, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.15503059327602386}, {'id': 56, 'seek': 38110, 'start': 402.26000000000005, 'end': 409.18, 'text': ' So problem is your inputs can be, number of inputs can be infinite. It may not even be bounded.', 'tokens': [51422, 407, 1154, 307, 428, 15743, 393, 312, 11, 1230, 295, 15743, 393, 312, 13785, 13, 467, 815, 406, 754, 312, 37498, 13, 51768], 'temperature': 0.0, 'avg_logprob': -0.19855154321548787, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.15503059327602386}, {'id': 57, 'seek': 40918, 'start': 409.3, 'end': 415.74, 'text': ' That is what is happening in dynamic analysis. Some parts are not sampled. Some parts are', 'tokens': [50370, 663, 307, 437, 307, 2737, 294, 8546, 5215, 13, 2188, 3166, 366, 406, 3247, 15551, 13, 2188, 3166, 366, 50692], 'temperature': 0.0, 'avg_logprob': -0.16125704317676778, 'compression_ratio': 1.9371727748691099, 'no_speech_prob': 0.008304649032652378}, {'id': 58, 'seek': 40918, 'start': 415.74, 'end': 420.34000000000003, 'text': ' sampled because that input is seen. Some parts are not sampled because input is not seen. And', 'tokens': [50692, 3247, 15551, 570, 300, 4846, 307, 1612, 13, 2188, 3166, 366, 406, 3247, 15551, 570, 4846, 307, 406, 1612, 13, 400, 50922], 'temperature': 0.0, 'avg_logprob': -0.16125704317676778, 'compression_ratio': 1.9371727748691099, 'no_speech_prob': 0.008304649032652378}, {'id': 59, 'seek': 40918, 'start': 420.34000000000003, 'end': 426.78000000000003, 'text': ' as I do a meet of all paths only on the paths which are sampled. So that is the idea. The idea', 'tokens': [50922, 382, 286, 360, 257, 1677, 295, 439, 14518, 787, 322, 264, 14518, 597, 366, 3247, 15551, 13, 407, 300, 307, 264, 1558, 13, 440, 1558, 51244], 'temperature': 0.0, 'avg_logprob': -0.16125704317676778, 'compression_ratio': 1.9371727748691099, 'no_speech_prob': 0.008304649032652378}, {'id': 60, 'seek': 40918, 'start': 426.78000000000003, 'end': 432.98, 'text': ' is that instead of looking at all executions, I do a few executions and I take a meet over,', 'tokens': [51244, 307, 300, 2602, 295, 1237, 412, 439, 4454, 3666, 11, 286, 360, 257, 1326, 4454, 3666, 293, 286, 747, 257, 1677, 670, 11, 51554], 'temperature': 0.0, 'avg_logprob': -0.16125704317676778, 'compression_ratio': 1.9371727748691099, 'no_speech_prob': 0.008304649032652378}, {'id': 61, 'seek': 43298, 'start': 432.98, 'end': 441.66, 'text': ' meet or join over whatever results I have seen there. So the problem is that there are certain', 'tokens': [50364, 1677, 420, 3917, 670, 2035, 3542, 286, 362, 1612, 456, 13, 407, 264, 1154, 307, 300, 456, 366, 1629, 50798], 'temperature': 0.0, 'avg_logprob': -0.1802900392715245, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.05314796417951584}, {'id': 62, 'seek': 43298, 'start': 441.66, 'end': 446.98, 'text': ' paths which are missed out. I have not seen them in execution of those paths. So it is not really', 'tokens': [50798, 14518, 597, 366, 6721, 484, 13, 286, 362, 406, 1612, 552, 294, 15058, 295, 729, 14518, 13, 407, 309, 307, 406, 534, 51064], 'temperature': 0.0, 'avg_logprob': -0.1802900392715245, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.05314796417951584}, {'id': 63, 'seek': 43298, 'start': 446.98, 'end': 454.02000000000004, 'text': ' the MOP solution. So if I do this meets of join path like this, then let us say I have,', 'tokens': [51064, 264, 376, 12059, 3827, 13, 407, 498, 286, 360, 341, 13961, 295, 3917, 3100, 411, 341, 11, 550, 718, 505, 584, 286, 362, 11, 51416], 'temperature': 0.0, 'avg_logprob': -0.1802900392715245, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.05314796417951584}, {'id': 64, 'seek': 45402, 'start': 454.18, 'end': 469.46, 'text': ' this is my solution dynamic. This is my solution static and this is my solution actual. Can', 'tokens': [50372, 341, 307, 452, 3827, 8546, 13, 639, 307, 452, 3827, 13437, 293, 341, 307, 452, 3827, 3539, 13, 1664, 51136], 'temperature': 0.0, 'avg_logprob': -0.15585716734541225, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.027385033667087555}, {'id': 65, 'seek': 45402, 'start': 469.46, 'end': 482.7, 'text': ' I give, can you give me a relation among them? So what is happening in static analysis? So what', 'tokens': [51136, 286, 976, 11, 393, 291, 976, 385, 257, 9721, 3654, 552, 30, 407, 437, 307, 2737, 294, 13437, 5215, 30, 407, 437, 51798], 'temperature': 0.0, 'avg_logprob': -0.15585716734541225, 'compression_ratio': 1.5454545454545454, 'no_speech_prob': 0.027385033667087555}, {'id': 66, 'seek': 48270, 'start': 482.7, 'end': 487.82, 'text': ' happened with the MOP solution? We end up computing the MOP solution. So the MOP solution', 'tokens': [50364, 2011, 365, 264, 376, 12059, 3827, 30, 492, 917, 493, 15866, 264, 376, 12059, 3827, 13, 407, 264, 376, 12059, 3827, 50620], 'temperature': 0.0, 'avg_logprob': -0.1524290605024858, 'compression_ratio': 1.8791946308724832, 'no_speech_prob': 0.01571333035826683}, {'id': 67, 'seek': 48270, 'start': 487.82, 'end': 500.18, 'text': ' and MOP solution, how are they related? So it is an, so the MOP is over approximated as the MOP', 'tokens': [50620, 293, 376, 12059, 3827, 11, 577, 366, 436, 4077, 30, 407, 309, 307, 364, 11, 370, 264, 376, 12059, 307, 670, 8542, 770, 382, 264, 376, 12059, 51238], 'temperature': 0.0, 'avg_logprob': -0.1524290605024858, 'compression_ratio': 1.8791946308724832, 'no_speech_prob': 0.01571333035826683}, {'id': 68, 'seek': 48270, 'start': 500.18, 'end': 511.98, 'text': ' solution. So essentially then what is it? So S star is over approximated by S static, solution', 'tokens': [51238, 3827, 13, 407, 4476, 550, 437, 307, 309, 30, 407, 318, 3543, 307, 670, 8542, 770, 538, 318, 13437, 11, 3827, 51828], 'temperature': 0.0, 'avg_logprob': -0.1524290605024858, 'compression_ratio': 1.8791946308724832, 'no_speech_prob': 0.01571333035826683}, {'id': 69, 'seek': 51198, 'start': 511.98, 'end': 521.14, 'text': ' static. What happened in case of dynamic analysis? Some paths are missed out. This S static is this', 'tokens': [50364, 13437, 13, 708, 2011, 294, 1389, 295, 8546, 5215, 30, 2188, 14518, 366, 6721, 484, 13, 639, 318, 13437, 307, 341, 50822], 'temperature': 0.0, 'avg_logprob': -0.12871010104815164, 'compression_ratio': 1.7309417040358743, 'no_speech_prob': 0.004060452338308096}, {'id': 70, 'seek': 51198, 'start': 521.14, 'end': 526.46, 'text': ' optimal solution is actually the MOP solution, is the solution I would have liked to have. But', 'tokens': [50822, 16252, 3827, 307, 767, 264, 376, 12059, 3827, 11, 307, 264, 3827, 286, 576, 362, 4501, 281, 362, 13, 583, 51088], 'temperature': 0.0, 'avg_logprob': -0.12871010104815164, 'compression_ratio': 1.7309417040358743, 'no_speech_prob': 0.004060452338308096}, {'id': 71, 'seek': 51198, 'start': 526.46, 'end': 532.46, 'text': ' I did not get all the paths. I just got a few sample paths and I took a meet over those sample', 'tokens': [51088, 286, 630, 406, 483, 439, 264, 14518, 13, 286, 445, 658, 257, 1326, 6889, 14518, 293, 286, 1890, 257, 1677, 670, 729, 6889, 51388], 'temperature': 0.0, 'avg_logprob': -0.12871010104815164, 'compression_ratio': 1.7309417040358743, 'no_speech_prob': 0.004060452338308096}, {'id': 72, 'seek': 51198, 'start': 532.46, 'end': 540.54, 'text': ' paths, meet or join over those sample paths. So then what is the solution then? So it is smaller', 'tokens': [51388, 14518, 11, 1677, 420, 3917, 670, 729, 6889, 14518, 13, 407, 550, 437, 307, 264, 3827, 550, 30, 407, 309, 307, 4356, 51792], 'temperature': 0.0, 'avg_logprob': -0.12871010104815164, 'compression_ratio': 1.7309417040358743, 'no_speech_prob': 0.004060452338308096}, {'id': 73, 'seek': 54054, 'start': 540.54, 'end': 554.9399999999999, 'text': ' than this. So this is exactly the crux of the situation. So I would have liked to reach a star,', 'tokens': [50364, 813, 341, 13, 407, 341, 307, 2293, 264, 5140, 87, 295, 264, 2590, 13, 407, 286, 576, 362, 4501, 281, 2524, 257, 3543, 11, 51084], 'temperature': 0.0, 'avg_logprob': -0.09201006889343262, 'compression_ratio': 1.4761904761904763, 'no_speech_prob': 0.015397380106151104}, {'id': 74, 'seek': 54054, 'start': 554.9399999999999, 'end': 562.78, 'text': ' but either I have to go the static way and reach an over approximation or I have to reach,', 'tokens': [51084, 457, 2139, 286, 362, 281, 352, 264, 13437, 636, 293, 2524, 364, 670, 28023, 420, 286, 362, 281, 2524, 11, 51476], 'temperature': 0.0, 'avg_logprob': -0.09201006889343262, 'compression_ratio': 1.4761904761904763, 'no_speech_prob': 0.015397380106151104}, {'id': 75, 'seek': 56278, 'start': 562.78, 'end': 576.98, 'text': ' go the dynamic way and get an under approximation. So if I was doing, so like if you try to use those', 'tokens': [50364, 352, 264, 8546, 636, 293, 483, 364, 833, 28023, 13, 407, 498, 286, 390, 884, 11, 370, 411, 498, 291, 853, 281, 764, 729, 51074], 'temperature': 0.0, 'avg_logprob': -0.19435748248033122, 'compression_ratio': 1.601123595505618, 'no_speech_prob': 0.03486735001206398}, {'id': 76, 'seek': 56278, 'start': 576.98, 'end': 582.9, 'text': ' results in a compiler that can be dangerous because I can miss out on definitions if I am', 'tokens': [51074, 3542, 294, 257, 31958, 300, 393, 312, 5795, 570, 286, 393, 1713, 484, 322, 21988, 498, 286, 669, 51370], 'temperature': 0.0, 'avg_logprob': -0.19435748248033122, 'compression_ratio': 1.601123595505618, 'no_speech_prob': 0.03486735001206398}, {'id': 77, 'seek': 56278, 'start': 582.9, 'end': 590.42, 'text': ' reaching definition in a dynamic way. So I might think oh this does not reach and I can do an', 'tokens': [51370, 9906, 7123, 294, 257, 8546, 636, 13, 407, 286, 1062, 519, 1954, 341, 775, 406, 2524, 293, 286, 393, 360, 364, 51746], 'temperature': 0.0, 'avg_logprob': -0.19435748248033122, 'compression_ratio': 1.601123595505618, 'no_speech_prob': 0.03486735001206398}, {'id': 78, 'seek': 59042, 'start': 590.42, 'end': 603.5, 'text': ' optimization which can really spoil things. So dynamic analysis generally, I will come to that', 'tokens': [50364, 19618, 597, 393, 534, 18630, 721, 13, 407, 8546, 5215, 5101, 11, 286, 486, 808, 281, 300, 51018], 'temperature': 0.0, 'avg_logprob': -0.19708722637545678, 'compression_ratio': 1.5621621621621622, 'no_speech_prob': 0.12420441210269928}, {'id': 79, 'seek': 59042, 'start': 603.5, 'end': 609.74, 'text': ' okay because I agree this is a compiler school so I should always connect to compilers. But dynamic', 'tokens': [51018, 1392, 570, 286, 3986, 341, 307, 257, 31958, 1395, 370, 286, 820, 1009, 1745, 281, 715, 388, 433, 13, 583, 8546, 51330], 'temperature': 0.0, 'avg_logprob': -0.19708722637545678, 'compression_ratio': 1.5621621621621622, 'no_speech_prob': 0.12420441210269928}, {'id': 80, 'seek': 59042, 'start': 609.74, 'end': 615.2199999999999, 'text': ' analysis has already many other applications other than compilers like for instance in program', 'tokens': [51330, 5215, 575, 1217, 867, 661, 5821, 661, 813, 715, 388, 433, 411, 337, 5197, 294, 1461, 51604], 'temperature': 0.0, 'avg_logprob': -0.19708722637545678, 'compression_ratio': 1.5621621621621622, 'no_speech_prob': 0.12420441210269928}, {'id': 81, 'seek': 61522, 'start': 615.22, 'end': 621.62, 'text': ' debugging like somebody also already said. The good part about that is that if you see a fact', 'tokens': [50364, 45592, 411, 2618, 611, 1217, 848, 13, 440, 665, 644, 466, 300, 307, 300, 498, 291, 536, 257, 1186, 50684], 'temperature': 0.0, 'avg_logprob': -0.17660411747022606, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.49716633558273315}, {'id': 82, 'seek': 61522, 'start': 621.62, 'end': 627.94, 'text': ' in a dynamic analysis that fact is surely there because I saw an execution that is why I included', 'tokens': [50684, 294, 257, 8546, 5215, 300, 1186, 307, 11468, 456, 570, 286, 1866, 364, 15058, 300, 307, 983, 286, 5556, 51000], 'temperature': 0.0, 'avg_logprob': -0.17660411747022606, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.49716633558273315}, {'id': 83, 'seek': 61522, 'start': 627.94, 'end': 633.94, 'text': ' that factor. If I say some dynamic some reaching definition is there in this set I do not know', 'tokens': [51000, 300, 5952, 13, 759, 286, 584, 512, 8546, 512, 9906, 7123, 307, 456, 294, 341, 992, 286, 360, 406, 458, 51300], 'temperature': 0.0, 'avg_logprob': -0.17660411747022606, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.49716633558273315}, {'id': 84, 'seek': 61522, 'start': 633.94, 'end': 637.58, 'text': " what all reaching definition I missed. If I missed anything or not that I don't know,", 'tokens': [51300, 437, 439, 9906, 7123, 286, 6721, 13, 759, 286, 6721, 1340, 420, 406, 300, 286, 500, 380, 458, 11, 51482], 'temperature': 0.0, 'avg_logprob': -0.17660411747022606, 'compression_ratio': 1.7630331753554502, 'no_speech_prob': 0.49716633558273315}, {'id': 85, 'seek': 63758, 'start': 637.58, 'end': 646.0600000000001, 'text': ' but whatever I included surely that is there. But in case of static analysis it can happen', 'tokens': [50364, 457, 2035, 286, 5556, 11468, 300, 307, 456, 13, 583, 294, 1389, 295, 13437, 5215, 309, 393, 1051, 50788], 'temperature': 0.0, 'avg_logprob': -0.23235348065694172, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.06553251296281815}, {'id': 86, 'seek': 63758, 'start': 646.0600000000001, 'end': 652.94, 'text': ' that it came due to some over approximation. Not in the reaching definition case because here', 'tokens': [50788, 300, 309, 1361, 3462, 281, 512, 670, 28023, 13, 1726, 294, 264, 9906, 7123, 1389, 570, 510, 51132], 'temperature': 0.0, 'avg_logprob': -0.23235348065694172, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.06553251296281815}, {'id': 87, 'seek': 63758, 'start': 652.94, 'end': 660.26, 'text': ' the solutions converge to the A star but in other analysis like constant propagation for instance.', 'tokens': [51132, 264, 6547, 41881, 281, 264, 316, 3543, 457, 294, 661, 5215, 411, 5754, 38377, 337, 5197, 13, 51498], 'temperature': 0.0, 'avg_logprob': -0.23235348065694172, 'compression_ratio': 1.5898876404494382, 'no_speech_prob': 0.06553251296281815}, {'id': 88, 'seek': 66026, 'start': 660.26, 'end': 668.3, 'text': ' So constant propagation if I do the dynamic way if it says that somewhere a value 5 is seen you', 'tokens': [50364, 407, 5754, 38377, 498, 286, 360, 264, 8546, 636, 498, 309, 1619, 300, 4079, 257, 2158, 1025, 307, 1612, 291, 50766], 'temperature': 0.0, 'avg_logprob': -0.20004070506376379, 'compression_ratio': 1.755980861244019, 'no_speech_prob': 0.058233536779880524}, {'id': 89, 'seek': 66026, 'start': 668.3, 'end': 675.86, 'text': ' are sure that that value 5 is seen there. It may be that some other value 8 is also possible that', 'tokens': [50766, 366, 988, 300, 300, 2158, 1025, 307, 1612, 456, 13, 467, 815, 312, 300, 512, 661, 2158, 1649, 307, 611, 1944, 300, 51144], 'temperature': 0.0, 'avg_logprob': -0.20004070506376379, 'compression_ratio': 1.755980861244019, 'no_speech_prob': 0.058233536779880524}, {'id': 90, 'seek': 66026, 'start': 675.86, 'end': 680.18, 'text': ' is a different matter but that value 5 must have been there at least through some execution.', 'tokens': [51144, 307, 257, 819, 1871, 457, 300, 2158, 1025, 1633, 362, 668, 456, 412, 1935, 807, 512, 15058, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.20004070506376379, 'compression_ratio': 1.755980861244019, 'no_speech_prob': 0.058233536779880524}, {'id': 91, 'seek': 66026, 'start': 683.06, 'end': 688.98, 'text': ' So essentially one is the curse of over approximation the other is that of under', 'tokens': [51504, 407, 4476, 472, 307, 264, 17139, 295, 670, 28023, 264, 661, 307, 300, 295, 833, 51800], 'temperature': 0.0, 'avg_logprob': -0.20004070506376379, 'compression_ratio': 1.755980861244019, 'no_speech_prob': 0.058233536779880524}, {'id': 92, 'seek': 68898, 'start': 688.98, 'end': 694.5, 'text': ' approximation. So none of them is bad or good it is very difficult to make a pick.', 'tokens': [50364, 28023, 13, 407, 6022, 295, 552, 307, 1578, 420, 665, 309, 307, 588, 2252, 281, 652, 257, 1888, 13, 50640], 'temperature': 0.0, 'avg_logprob': -0.2921683833284198, 'compression_ratio': 1.6745098039215687, 'no_speech_prob': 0.010618811473250389}, {'id': 93, 'seek': 68898, 'start': 694.5, 'end': 700.5, 'text': ' So it is always good to know both and depending on the situation you use whatever you want to use.', 'tokens': [50640, 407, 309, 307, 1009, 665, 281, 458, 1293, 293, 5413, 322, 264, 2590, 291, 764, 2035, 291, 528, 281, 764, 13, 50940], 'temperature': 0.0, 'avg_logprob': -0.2921683833284198, 'compression_ratio': 1.6745098039215687, 'no_speech_prob': 0.010618811473250389}, {'id': 94, 'seek': 68898, 'start': 700.5, 'end': 707.74, 'text': ' Sir in the case of dynamic analysis if you look at it out of the context of the compiler,', 'tokens': [50940, 6144, 294, 264, 1389, 295, 8546, 5215, 498, 291, 574, 412, 309, 484, 295, 264, 4319, 295, 264, 31958, 11, 51302], 'temperature': 0.0, 'avg_logprob': -0.2921683833284198, 'compression_ratio': 1.6745098039215687, 'no_speech_prob': 0.010618811473250389}, {'id': 95, 'seek': 68898, 'start': 707.74, 'end': 713.94, 'text': " so wouldn't it be used for it and through an invariant property or something like that?", 'tokens': [51302, 370, 2759, 380, 309, 312, 1143, 337, 309, 293, 807, 364, 33270, 394, 4707, 420, 746, 411, 300, 30, 51612], 'temperature': 0.0, 'avg_logprob': -0.2921683833284198, 'compression_ratio': 1.6745098039215687, 'no_speech_prob': 0.010618811473250389}, {'id': 96, 'seek': 68898, 'start': 713.94, 'end': 717.34, 'text': ' But an invariant will be has to hold across all program executions.', 'tokens': [51612, 583, 364, 33270, 394, 486, 312, 575, 281, 1797, 2108, 439, 1461, 4454, 3666, 13, 51782], 'temperature': 0.0, 'avg_logprob': -0.2921683833284198, 'compression_ratio': 1.6745098039215687, 'no_speech_prob': 0.010618811473250389}, {'id': 97, 'seek': 71734, 'start': 717.34, 'end': 727.4200000000001, 'text': ' No it is possible and it is done. So one way it is done is program invariant an interesting', 'tokens': [50364, 883, 309, 307, 1944, 293, 309, 307, 1096, 13, 407, 472, 636, 309, 307, 1096, 307, 1461, 33270, 394, 364, 1880, 50868], 'temperature': 0.0, 'avg_logprob': -0.2463546015999534, 'compression_ratio': 1.927461139896373, 'no_speech_prob': 0.008162518963217735}, {'id': 98, 'seek': 71734, 'start': 727.4200000000001, 'end': 732.46, 'text': ' property of program invariant is let me just include the whole class. So there is this notion', 'tokens': [50868, 4707, 295, 1461, 33270, 394, 307, 718, 385, 445, 4090, 264, 1379, 1508, 13, 407, 456, 307, 341, 10710, 51120], 'temperature': 0.0, 'avg_logprob': -0.2463546015999534, 'compression_ratio': 1.927461139896373, 'no_speech_prob': 0.008162518963217735}, {'id': 99, 'seek': 71734, 'start': 732.46, 'end': 737.62, 'text': ' of program invariant. So these are actually the tools that you use to prove the correctness of', 'tokens': [51120, 295, 1461, 33270, 394, 13, 407, 613, 366, 767, 264, 3873, 300, 291, 764, 281, 7081, 264, 3006, 1287, 295, 51378], 'temperature': 0.0, 'avg_logprob': -0.2463546015999534, 'compression_ratio': 1.927461139896373, 'no_speech_prob': 0.008162518963217735}, {'id': 100, 'seek': 71734, 'start': 737.62, 'end': 743.1, 'text': ' programs. So for example a program invariant there simply you can just simply think them of', 'tokens': [51378, 4268, 13, 407, 337, 1365, 257, 1461, 33270, 394, 456, 2935, 291, 393, 445, 2935, 519, 552, 295, 51652], 'temperature': 0.0, 'avg_logprob': -0.2463546015999534, 'compression_ratio': 1.927461139896373, 'no_speech_prob': 0.008162518963217735}, {'id': 101, 'seek': 74310, 'start': 743.1, 'end': 747.14, 'text': ' some predicates. You can just say that the program invariant at a certain point is i is', 'tokens': [50364, 512, 47336, 1024, 13, 509, 393, 445, 584, 300, 264, 1461, 33270, 394, 412, 257, 1629, 935, 307, 741, 307, 50566], 'temperature': 0.0, 'avg_logprob': -0.18129912928531045, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.16842782497406006}, {'id': 102, 'seek': 74310, 'start': 747.14, 'end': 754.9, 'text': ' greater than 0 which means that no matter what path I come to this place the value of i will', 'tokens': [50566, 5044, 813, 1958, 597, 1355, 300, 572, 1871, 437, 3100, 286, 808, 281, 341, 1081, 264, 2158, 295, 741, 486, 50954], 'temperature': 0.0, 'avg_logprob': -0.18129912928531045, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.16842782497406006}, {'id': 103, 'seek': 74310, 'start': 754.9, 'end': 758.74, 'text': ' always be greater than 0. So that is an invariant at the program point. Why is it interesting?', 'tokens': [50954, 1009, 312, 5044, 813, 1958, 13, 407, 300, 307, 364, 33270, 394, 412, 264, 1461, 935, 13, 1545, 307, 309, 1880, 30, 51146], 'temperature': 0.0, 'avg_logprob': -0.18129912928531045, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.16842782497406006}, {'id': 104, 'seek': 74310, 'start': 758.74, 'end': 765.22, 'text': ' Because let us say I am doing a division of I am doing a divided by b. I am computing some x', 'tokens': [51146, 1436, 718, 505, 584, 286, 669, 884, 257, 10044, 295, 286, 669, 884, 257, 6666, 538, 272, 13, 286, 669, 15866, 512, 2031, 51470], 'temperature': 0.0, 'avg_logprob': -0.18129912928531045, 'compression_ratio': 1.7037037037037037, 'no_speech_prob': 0.16842782497406006}, {'id': 105, 'seek': 76522, 'start': 765.22, 'end': 773.86, 'text': ' equals a divided by b and I can prove that at all through all paths I can prove that b is greater', 'tokens': [50364, 6915, 257, 6666, 538, 272, 293, 286, 393, 7081, 300, 412, 439, 807, 439, 14518, 286, 393, 7081, 300, 272, 307, 5044, 50796], 'temperature': 0.0, 'avg_logprob': -0.13554972868699294, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.22757506370544434}, {'id': 106, 'seek': 76522, 'start': 773.86, 'end': 782.78, 'text': ' than 25. Let us say I can find this invariant. Why is it interesting? So I have this statement', 'tokens': [50796, 813, 3552, 13, 961, 505, 584, 286, 393, 915, 341, 33270, 394, 13, 1545, 307, 309, 1880, 30, 407, 286, 362, 341, 5629, 51242], 'temperature': 0.0, 'avg_logprob': -0.13554972868699294, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.22757506370544434}, {'id': 107, 'seek': 76522, 'start': 782.78, 'end': 794.6600000000001, 'text': ' which is x is equal to a divided by b. Why is it interesting? Yes I cannot do a divide by 0 because', 'tokens': [51242, 597, 307, 2031, 307, 2681, 281, 257, 6666, 538, 272, 13, 1545, 307, 309, 1880, 30, 1079, 286, 2644, 360, 257, 9845, 538, 1958, 570, 51836], 'temperature': 0.0, 'avg_logprob': -0.13554972868699294, 'compression_ratio': 1.697674418604651, 'no_speech_prob': 0.22757506370544434}, {'id': 108, 'seek': 79466, 'start': 794.66, 'end': 799.66, 'text': ' I know b is always greater than 25. So I can prove I can give you with guarantee that there', 'tokens': [50364, 286, 458, 272, 307, 1009, 5044, 813, 3552, 13, 407, 286, 393, 7081, 286, 393, 976, 291, 365, 10815, 300, 456, 50614], 'temperature': 0.0, 'avg_logprob': -0.15902760823567708, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.0034778963308781385}, {'id': 109, 'seek': 79466, 'start': 799.66, 'end': 808.74, 'text': ' is no way that this guy can produce a divide by 0 error. Now the problem is that there are', 'tokens': [50614, 307, 572, 636, 300, 341, 2146, 393, 5258, 257, 9845, 538, 1958, 6713, 13, 823, 264, 1154, 307, 300, 456, 366, 51068], 'temperature': 0.0, 'avg_logprob': -0.15902760823567708, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.0034778963308781385}, {'id': 110, 'seek': 79466, 'start': 808.74, 'end': 815.3399999999999, 'text': ' certain invariants I mean most often invariants have to be guessed they cannot be computed like', 'tokens': [51068, 1629, 33270, 1719, 286, 914, 881, 2049, 33270, 1719, 362, 281, 312, 21852, 436, 2644, 312, 40610, 411, 51398], 'temperature': 0.0, 'avg_logprob': -0.15902760823567708, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.0034778963308781385}, {'id': 111, 'seek': 79466, 'start': 815.3399999999999, 'end': 820.9399999999999, 'text': ' especially loop invariants. So they you basically can guess an invariant and you can check if that', 'tokens': [51398, 2318, 6367, 33270, 1719, 13, 407, 436, 291, 1936, 393, 2041, 364, 33270, 394, 293, 291, 393, 1520, 498, 300, 51678], 'temperature': 0.0, 'avg_logprob': -0.15902760823567708, 'compression_ratio': 1.7136363636363636, 'no_speech_prob': 0.0034778963308781385}, {'id': 112, 'seek': 82094, 'start': 820.94, 'end': 827.3800000000001, 'text': ' is invariant or not. But that guessing has to be done like through a clever guy. Some guy has to', 'tokens': [50364, 307, 33270, 394, 420, 406, 13, 583, 300, 17939, 575, 281, 312, 1096, 411, 807, 257, 13494, 2146, 13, 2188, 2146, 575, 281, 50686], 'temperature': 0.0, 'avg_logprob': -0.2016214370727539, 'compression_ratio': 1.7938931297709924, 'no_speech_prob': 0.20566432178020477}, {'id': 113, 'seek': 82094, 'start': 827.3800000000001, 'end': 832.0200000000001, 'text': ' come and scratch his head and look at the code and say oh looks like this is invariant. And then', 'tokens': [50686, 808, 293, 8459, 702, 1378, 293, 574, 412, 264, 3089, 293, 584, 1954, 1542, 411, 341, 307, 33270, 394, 13, 400, 550, 50918], 'temperature': 0.0, 'avg_logprob': -0.2016214370727539, 'compression_ratio': 1.7938931297709924, 'no_speech_prob': 0.20566432178020477}, {'id': 114, 'seek': 82094, 'start': 832.0200000000001, 'end': 835.86, 'text': ' it can be checked it is invariant or not and you can throw it away even if it is not invariant.', 'tokens': [50918, 309, 393, 312, 10033, 309, 307, 33270, 394, 420, 406, 293, 291, 393, 3507, 309, 1314, 754, 498, 309, 307, 406, 33270, 394, 13, 51110], 'temperature': 0.0, 'avg_logprob': -0.2016214370727539, 'compression_ratio': 1.7938931297709924, 'no_speech_prob': 0.20566432178020477}, {'id': 115, 'seek': 82094, 'start': 835.86, 'end': 841.22, 'text': ' I am not getting into details but a dynamic analysis is good way of guessing that invariant.', 'tokens': [51110, 286, 669, 406, 1242, 666, 4365, 457, 257, 8546, 5215, 307, 665, 636, 295, 17939, 300, 33270, 394, 13, 51378], 'temperature': 0.0, 'avg_logprob': -0.2016214370727539, 'compression_ratio': 1.7938931297709924, 'no_speech_prob': 0.20566432178020477}, {'id': 116, 'seek': 82094, 'start': 842.3800000000001, 'end': 846.0200000000001, 'text': ' So if you sample a few program paths all of them you observe that b is greater than 25.', 'tokens': [51436, 407, 498, 291, 6889, 257, 1326, 1461, 14518, 439, 295, 552, 291, 11441, 300, 272, 307, 5044, 813, 3552, 13, 51618], 'temperature': 0.0, 'avg_logprob': -0.2016214370727539, 'compression_ratio': 1.7938931297709924, 'no_speech_prob': 0.20566432178020477}, {'id': 117, 'seek': 84602, 'start': 846.06, 'end': 851.66, 'text': ' Propose that invariant, propose it okay let the invariant b is greater than 25. Then you can', 'tokens': [50366, 21944, 541, 300, 33270, 394, 11, 17421, 309, 1392, 718, 264, 33270, 394, 272, 307, 5044, 813, 3552, 13, 1396, 291, 393, 50646], 'temperature': 0.0, 'avg_logprob': -0.1961920794318704, 'compression_ratio': 1.658008658008658, 'no_speech_prob': 0.05644020065665245}, {'id': 118, 'seek': 84602, 'start': 851.66, 'end': 858.06, 'text': ' anyway formally check you can actually statically check if it is correct or not. So there are many', 'tokens': [50646, 4033, 25983, 1520, 291, 393, 767, 2219, 984, 1520, 498, 309, 307, 3006, 420, 406, 13, 407, 456, 366, 867, 50966], 'temperature': 0.0, 'avg_logprob': -0.1961920794318704, 'compression_ratio': 1.658008658008658, 'no_speech_prob': 0.05644020065665245}, {'id': 119, 'seek': 84602, 'start': 858.06, 'end': 866.18, 'text': ' situations where such analysis becomes really interesting because of that. So the main difference', 'tokens': [50966, 6851, 689, 1270, 5215, 3643, 534, 1880, 570, 295, 300, 13, 407, 264, 2135, 2649, 51372], 'temperature': 0.0, 'avg_logprob': -0.1961920794318704, 'compression_ratio': 1.658008658008658, 'no_speech_prob': 0.05644020065665245}, {'id': 120, 'seek': 84602, 'start': 866.18, 'end': 874.86, 'text': ' again just to summarize is that whenever I get a behavior in static analysis because it is an', 'tokens': [51372, 797, 445, 281, 20858, 307, 300, 5699, 286, 483, 257, 5223, 294, 13437, 5215, 570, 309, 307, 364, 51806], 'temperature': 0.0, 'avg_logprob': -0.1961920794318704, 'compression_ratio': 1.658008658008658, 'no_speech_prob': 0.05644020065665245}, {'id': 121, 'seek': 87486, 'start': 874.86, 'end': 885.1, 'text': ' over approximation I get something called false positives which means that it may say that a', 'tokens': [50364, 670, 28023, 286, 483, 746, 1219, 7908, 35127, 597, 1355, 300, 309, 815, 584, 300, 257, 50876], 'temperature': 0.0, 'avg_logprob': -0.12945155608348358, 'compression_ratio': 1.7605633802816902, 'no_speech_prob': 0.009677456691861153}, {'id': 122, 'seek': 87486, 'start': 885.1, 'end': 889.42, 'text': ' certain faulty behavior is possible though that behavior is not possible because it did an', 'tokens': [50876, 1629, 2050, 5773, 5223, 307, 1944, 1673, 300, 5223, 307, 406, 1944, 570, 309, 630, 364, 51092], 'temperature': 0.0, 'avg_logprob': -0.12945155608348358, 'compression_ratio': 1.7605633802816902, 'no_speech_prob': 0.009677456691861153}, {'id': 123, 'seek': 87486, 'start': 889.42, 'end': 899.26, 'text': ' over approximation. However in case of dynamic analysis I can essentially miss behaviors right', 'tokens': [51092, 670, 28023, 13, 2908, 294, 1389, 295, 8546, 5215, 286, 393, 4476, 1713, 15501, 558, 51584], 'temperature': 0.0, 'avg_logprob': -0.12945155608348358, 'compression_ratio': 1.7605633802816902, 'no_speech_prob': 0.009677456691861153}, {'id': 124, 'seek': 87486, 'start': 899.26, 'end': 904.7, 'text': ' because this guy is only sampling on a few paths and it may not see the faulty behavior which it', 'tokens': [51584, 570, 341, 2146, 307, 787, 21179, 322, 257, 1326, 14518, 293, 309, 815, 406, 536, 264, 2050, 5773, 5223, 597, 309, 51856], 'temperature': 0.0, 'avg_logprob': -0.12945155608348358, 'compression_ratio': 1.7605633802816902, 'no_speech_prob': 0.009677456691861153}, {'id': 125, 'seek': 90470, 'start': 904.7, 'end': 914.0200000000001, 'text': ' would have seen if it had been able to see all paths. Fine okay good so now the question is how', 'tokens': [50364, 576, 362, 1612, 498, 309, 632, 668, 1075, 281, 536, 439, 14518, 13, 12024, 1392, 665, 370, 586, 264, 1168, 307, 577, 50830], 'temperature': 0.0, 'avg_logprob': -0.1422894929584704, 'compression_ratio': 1.7377777777777779, 'no_speech_prob': 0.0006238610367290676}, {'id': 126, 'seek': 90470, 'start': 914.0200000000001, 'end': 920.1800000000001, 'text': ' do we do dynamic analysis? How can we go about doing dynamic analysis? So let us say the dynamic', 'tokens': [50830, 360, 321, 360, 8546, 5215, 30, 1012, 393, 321, 352, 466, 884, 8546, 5215, 30, 407, 718, 505, 584, 264, 8546, 51138], 'temperature': 0.0, 'avg_logprob': -0.1422894929584704, 'compression_ratio': 1.7377777777777779, 'no_speech_prob': 0.0006238610367290676}, {'id': 127, 'seek': 90470, 'start': 920.1800000000001, 'end': 924.5400000000001, 'text': ' analysis I want to do or let me just answer one question there somebody asked me I will forget', 'tokens': [51138, 5215, 286, 528, 281, 360, 420, 718, 385, 445, 1867, 472, 1168, 456, 2618, 2351, 385, 286, 486, 2870, 51356], 'temperature': 0.0, 'avg_logprob': -0.1422894929584704, 'compression_ratio': 1.7377777777777779, 'no_speech_prob': 0.0006238610367290676}, {'id': 128, 'seek': 90470, 'start': 924.5400000000001, 'end': 933.0200000000001, 'text': ' about it. So why do you think it will be interesting for a compiler to do any form of dynamic analysis?', 'tokens': [51356, 466, 309, 13, 407, 983, 360, 291, 519, 309, 486, 312, 1880, 337, 257, 31958, 281, 360, 604, 1254, 295, 8546, 5215, 30, 51780], 'temperature': 0.0, 'avg_logprob': -0.1422894929584704, 'compression_ratio': 1.7377777777777779, 'no_speech_prob': 0.0006238610367290676}, {'id': 129, 'seek': 93302, 'start': 933.02, 'end': 945.42, 'text': ' Because the facts I produce from this I may not be able to use because they may not be safe. So', 'tokens': [50364, 1436, 264, 9130, 286, 5258, 490, 341, 286, 815, 406, 312, 1075, 281, 764, 570, 436, 815, 406, 312, 3273, 13, 407, 50984], 'temperature': 0.0, 'avg_logprob': -0.12844358363621672, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.002389885252341628}, {'id': 130, 'seek': 93302, 'start': 945.42, 'end': 953.6999999999999, 'text': ' if I directly use them in an optimization I can produce wrong results. So what can we do? So why', 'tokens': [50984, 498, 286, 3838, 764, 552, 294, 364, 19618, 286, 393, 5258, 2085, 3542, 13, 407, 437, 393, 321, 360, 30, 407, 983, 51398], 'temperature': 0.0, 'avg_logprob': -0.12844358363621672, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.002389885252341628}, {'id': 131, 'seek': 93302, 'start': 953.6999999999999, 'end': 959.38, 'text': ' can a compiler be interested in some sort of dynamic analysis? So can you give me some interest', 'tokens': [51398, 393, 257, 31958, 312, 3102, 294, 512, 1333, 295, 8546, 5215, 30, 407, 393, 291, 976, 385, 512, 1179, 51682], 'temperature': 0.0, 'avg_logprob': -0.12844358363621672, 'compression_ratio': 1.6271186440677967, 'no_speech_prob': 0.002389885252341628}, {'id': 132, 'seek': 95938, 'start': 959.38, 'end': 964.54, 'text': ' in dynamic analysis? Something that you can do by just executing the program multiple times.', 'tokens': [50364, 294, 8546, 5215, 30, 6595, 300, 291, 393, 360, 538, 445, 32368, 264, 1461, 3866, 1413, 13, 50622], 'temperature': 0.0, 'avg_logprob': -0.32996177673339844, 'compression_ratio': 1.0952380952380953, 'no_speech_prob': 0.7283669114112854}, {'id': 133, 'seek': 96454, 'start': 964.54, 'end': 972.06, 'text': ' Oh my god it is so long I mean slowly much simpler things.', 'tokens': [50364, 876, 452, 3044, 309, 307, 370, 938, 286, 914, 5692, 709, 18587, 721, 13, 50740], 'temperature': 0.0, 'avg_logprob': -0.5471158869126264, 'compression_ratio': 0.9206349206349206, 'no_speech_prob': 0.4833177626132965}, {'id': 134, 'seek': 99454, 'start': 994.54, 'end': 1006.5, 'text': ' No but then I might have missed even for that particular platform I might have missed some', 'tokens': [50364, 883, 457, 550, 286, 1062, 362, 6721, 754, 337, 300, 1729, 3663, 286, 1062, 362, 6721, 512, 50962], 'temperature': 0.0, 'avg_logprob': -0.18828585698054387, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.01963258720934391}, {'id': 135, 'seek': 99454, 'start': 1006.5, 'end': 1012.5, 'text': ' inputs so that I be greater than 25 may not even hold for even for that execution even for that', 'tokens': [50962, 15743, 370, 300, 286, 312, 5044, 813, 3552, 815, 406, 754, 1797, 337, 754, 337, 300, 15058, 754, 337, 300, 51262], 'temperature': 0.0, 'avg_logprob': -0.18828585698054387, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.01963258720934391}, {'id': 136, 'seek': 99454, 'start': 1012.5, 'end': 1023.78, 'text': ' environment. But even those inputs you may not be able to sample the complete all of them right even', 'tokens': [51262, 2823, 13, 583, 754, 729, 15743, 291, 815, 406, 312, 1075, 281, 6889, 264, 3566, 439, 295, 552, 558, 754, 51826], 'temperature': 0.0, 'avg_logprob': -0.18828585698054387, 'compression_ratio': 1.7393939393939395, 'no_speech_prob': 0.01963258720934391}, {'id': 137, 'seek': 102378, 'start': 1023.78, 'end': 1046.82, 'text': ' that set might be very large if not unbounded. So conditional jumps are nothing but what is', 'tokens': [50364, 300, 992, 1062, 312, 588, 2416, 498, 406, 517, 18767, 292, 13, 407, 27708, 16704, 366, 1825, 457, 437, 307, 51516], 'temperature': 0.0, 'avg_logprob': -0.15930418173472086, 'compression_ratio': 1.1097560975609757, 'no_speech_prob': 0.09704316407442093}, {'id': 138, 'seek': 104682, 'start': 1046.82, 'end': 1061.9399999999998, 'text': ' used to implement your if statements they are very common things. No but you have already done', 'tokens': [50364, 1143, 281, 4445, 428, 498, 12363, 436, 366, 588, 2689, 721, 13, 883, 457, 291, 362, 1217, 1096, 51120], 'temperature': 0.0, 'avg_logprob': -0.18135793507099152, 'compression_ratio': 1.79375, 'no_speech_prob': 0.43974512815475464}, {'id': 139, 'seek': 104682, 'start': 1061.9399999999998, 'end': 1066.8999999999999, 'text': ' the analysis and then you have already compiled the code right so the code is already compiled.', 'tokens': [51120, 264, 5215, 293, 550, 291, 362, 1217, 36548, 264, 3089, 558, 370, 264, 3089, 307, 1217, 36548, 13, 51368], 'temperature': 0.0, 'avg_logprob': -0.18135793507099152, 'compression_ratio': 1.79375, 'no_speech_prob': 0.43974512815475464}, {'id': 140, 'seek': 104682, 'start': 1066.8999999999999, 'end': 1073.78, 'text': ' Now even if you see that jump there is not much you can do you have already spoiled whatever had', 'tokens': [51368, 823, 754, 498, 291, 536, 300, 3012, 456, 307, 406, 709, 291, 393, 360, 291, 362, 1217, 32439, 2035, 632, 51712], 'temperature': 0.0, 'avg_logprob': -0.18135793507099152, 'compression_ratio': 1.79375, 'no_speech_prob': 0.43974512815475464}, {'id': 141, 'seek': 107378, 'start': 1073.78, 'end': 1079.8999999999999, 'text': ' to be spoiled right so the dinner is over then you realize that so that is not going to help me now.', 'tokens': [50364, 281, 312, 32439, 558, 370, 264, 6148, 307, 670, 550, 291, 4325, 300, 370, 300, 307, 406, 516, 281, 854, 385, 586, 13, 50670], 'temperature': 0.0, 'avg_logprob': -0.2921579304863425, 'compression_ratio': 1.5683060109289617, 'no_speech_prob': 0.2581138014793396}, {'id': 142, 'seek': 107378, 'start': 1079.8999999999999, 'end': 1095.46, 'text': ' Yeah that is okay. The input from a user is a different channel altogether of course we can', 'tokens': [50670, 865, 300, 307, 1392, 13, 440, 4846, 490, 257, 4195, 307, 257, 819, 2269, 19051, 295, 1164, 321, 393, 51448], 'temperature': 0.0, 'avg_logprob': -0.2921579304863425, 'compression_ratio': 1.5683060109289617, 'no_speech_prob': 0.2581138014793396}, {'id': 143, 'seek': 107378, 'start': 1095.46, 'end': 1099.5, 'text': ' take annotation from user which can help us but here we are saying we just sample from program', 'tokens': [51448, 747, 48654, 490, 4195, 597, 393, 854, 505, 457, 510, 321, 366, 1566, 321, 445, 6889, 490, 1461, 51650], 'temperature': 0.0, 'avg_logprob': -0.2921579304863425, 'compression_ratio': 1.5683060109289617, 'no_speech_prob': 0.2581138014793396}, {'id': 144, 'seek': 109950, 'start': 1099.5, 'end': 1105.18, 'text': ' executions what can we do with that. So one very interesting very important dynamic analysis is', 'tokens': [50364, 4454, 3666, 437, 393, 321, 360, 365, 300, 13, 407, 472, 588, 1880, 588, 1021, 8546, 5215, 307, 50648], 'temperature': 0.0, 'avg_logprob': -0.16499705254277097, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.11467114090919495}, {'id': 145, 'seek': 109950, 'start': 1105.18, 'end': 1114.46, 'text': ' referred to as profiling program profiling rather control flow profiling. So control', 'tokens': [50648, 10839, 281, 382, 1740, 4883, 1461, 1740, 4883, 2831, 1969, 3095, 1740, 4883, 13, 407, 1969, 51112], 'temperature': 0.0, 'avg_logprob': -0.16499705254277097, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.11467114090919495}, {'id': 146, 'seek': 109950, 'start': 1114.46, 'end': 1120.14, 'text': ' flow profiling is actually used to let us say count how many times a program statement is', 'tokens': [51112, 3095, 1740, 4883, 307, 767, 1143, 281, 718, 505, 584, 1207, 577, 867, 1413, 257, 1461, 5629, 307, 51396], 'temperature': 0.0, 'avg_logprob': -0.16499705254277097, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.11467114090919495}, {'id': 147, 'seek': 109950, 'start': 1120.14, 'end': 1128.78, 'text': ' executed right I just count how many times a program statement is executed that is it big', 'tokens': [51396, 17577, 558, 286, 445, 1207, 577, 867, 1413, 257, 1461, 5629, 307, 17577, 300, 307, 309, 955, 51828], 'temperature': 0.0, 'avg_logprob': -0.16499705254277097, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.11467114090919495}, {'id': 148, 'seek': 112878, 'start': 1128.78, 'end': 1135.02, 'text': ' deal why should I be interested in doing that that is maybe similar to what Ujjal wanted to say', 'tokens': [50364, 2028, 983, 820, 286, 312, 3102, 294, 884, 300, 300, 307, 1310, 2531, 281, 437, 624, 73, 22600, 1415, 281, 584, 50676], 'temperature': 0.0, 'avg_logprob': -0.19901800155639648, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.012264269404113293}, {'id': 149, 'seek': 112878, 'start': 1135.02, 'end': 1142.3, 'text': ' probably. So once I know that histogram if I know that how many times a instruction is executed what', 'tokens': [50676, 1391, 13, 407, 1564, 286, 458, 300, 49816, 498, 286, 458, 300, 577, 867, 1413, 257, 10951, 307, 17577, 437, 51040], 'temperature': 0.0, 'avg_logprob': -0.19901800155639648, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.012264269404113293}, {'id': 150, 'seek': 112878, 'start': 1142.3, 'end': 1149.02, 'text': ' can I do with it. No it is executable time does not mean that the state change will be the same', 'tokens': [51040, 393, 286, 360, 365, 309, 13, 883, 309, 307, 7568, 712, 565, 775, 406, 914, 300, 264, 1785, 1319, 486, 312, 264, 912, 51376], 'temperature': 0.0, 'avg_logprob': -0.19901800155639648, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.012264269404113293}, {'id': 151, 'seek': 114902, 'start': 1149.02, 'end': 1159.26, 'text': ' no cache is like if it was making the same transition even if it is the i plus plus like', 'tokens': [50364, 572, 19459, 307, 411, 498, 309, 390, 1455, 264, 912, 6034, 754, 498, 309, 307, 264, 741, 1804, 1804, 411, 50876], 'temperature': 0.0, 'avg_logprob': -0.2187839430205676, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.07579603046178818}, {'id': 152, 'seek': 114902, 'start': 1159.26, 'end': 1165.66, 'text': ' if the value of i is 2 it becomes 3 but if the value of i is 45 it becomes 46 so caching 2 to 3', 'tokens': [50876, 498, 264, 2158, 295, 741, 307, 568, 309, 3643, 805, 457, 498, 264, 2158, 295, 741, 307, 6905, 309, 3643, 17835, 370, 269, 2834, 568, 281, 805, 51196], 'temperature': 0.0, 'avg_logprob': -0.2187839430205676, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.07579603046178818}, {'id': 153, 'seek': 114902, 'start': 1165.66, 'end': 1173.5, 'text': " is not going to help me much. It caches the instruction but instruction caching doesn't", 'tokens': [51196, 307, 406, 516, 281, 854, 385, 709, 13, 467, 269, 13272, 264, 10951, 457, 10951, 269, 2834, 1177, 380, 51588], 'temperature': 0.0, 'avg_logprob': -0.2187839430205676, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.07579603046178818}, {'id': 154, 'seek': 114902, 'start': 1173.5, 'end': 1178.3, 'text': ' work like that right so there is a prefetcher and so you can do some sort of prefetching', 'tokens': [51588, 589, 411, 300, 558, 370, 456, 307, 257, 18417, 302, 6759, 293, 370, 291, 393, 360, 512, 1333, 295, 18417, 7858, 278, 51828], 'temperature': 0.0, 'avg_logprob': -0.2187839430205676, 'compression_ratio': 1.7783251231527093, 'no_speech_prob': 0.07579603046178818}, {'id': 155, 'seek': 117830, 'start': 1178.3799999999999, 'end': 1188.78, 'text': ' additional but that is one way but how will it is a compiler manage memory maybe but more simply I mean', 'tokens': [50368, 4497, 457, 300, 307, 472, 636, 457, 577, 486, 309, 307, 257, 31958, 3067, 4675, 1310, 457, 544, 2935, 286, 914, 50888], 'temperature': 0.0, 'avg_logprob': -0.14286926814488002, 'compression_ratio': 1.8113207547169812, 'no_speech_prob': 0.0031646578572690487}, {'id': 156, 'seek': 117830, 'start': 1194.54, 'end': 1200.1399999999999, 'text': ' that is a good point right I can find out how many times a function is executed if I see a', 'tokens': [51176, 300, 307, 257, 665, 935, 558, 286, 393, 915, 484, 577, 867, 1413, 257, 2445, 307, 17577, 498, 286, 536, 257, 51456], 'temperature': 0.0, 'avg_logprob': -0.14286926814488002, 'compression_ratio': 1.8113207547169812, 'no_speech_prob': 0.0031646578572690487}, {'id': 157, 'seek': 117830, 'start': 1200.1399999999999, 'end': 1205.34, 'text': ' function is executed a lot of times I can inline that function so what is inlining a function', 'tokens': [51456, 2445, 307, 17577, 257, 688, 295, 1413, 286, 393, 294, 1889, 300, 2445, 370, 437, 307, 294, 31079, 257, 2445, 51716], 'temperature': 0.0, 'avg_logprob': -0.14286926814488002, 'compression_ratio': 1.8113207547169812, 'no_speech_prob': 0.0031646578572690487}, {'id': 158, 'seek': 120534, 'start': 1205.4199999999998, 'end': 1208.62, 'text': ' basically copying its whole code inside it what does it save', 'tokens': [50368, 1936, 27976, 1080, 1379, 3089, 1854, 309, 437, 775, 309, 3155, 50528], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 159, 'seek': 120534, 'start': 1210.6999999999998, 'end': 1215.5, 'text': " yeah so it's a lot of code to actually make a function call you have to push the parameter", 'tokens': [50632, 1338, 370, 309, 311, 257, 688, 295, 3089, 281, 767, 652, 257, 2445, 818, 291, 362, 281, 2944, 264, 13075, 50872], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 160, 'seek': 120534, 'start': 1215.5, 'end': 1220.9399999999998, 'text': ' onto the stack push the return address make the jump right even coming back you have to destroy', 'tokens': [50872, 3911, 264, 8630, 2944, 264, 2736, 2985, 652, 264, 3012, 558, 754, 1348, 646, 291, 362, 281, 5293, 51144], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 161, 'seek': 120534, 'start': 1220.9399999999998, 'end': 1224.6999999999998, 'text': ' the frame so there is so much to do right so you can save all that if you inline the code', 'tokens': [51144, 264, 3920, 370, 456, 307, 370, 709, 281, 360, 558, 370, 291, 393, 3155, 439, 300, 498, 291, 294, 1889, 264, 3089, 51332], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 162, 'seek': 120534, 'start': 1225.4199999999998, 'end': 1229.1, 'text': ' but you would not like to do it for the whole program because then the code becomes too much', 'tokens': [51368, 457, 291, 576, 406, 411, 281, 360, 309, 337, 264, 1379, 1461, 570, 550, 264, 3089, 3643, 886, 709, 51552], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 163, 'seek': 120534, 'start': 1229.1, 'end': 1234.3799999999999, 'text': ' and the same function may be used a lot of times and duplication of code a lot of problems so maybe', 'tokens': [51552, 293, 264, 912, 2445, 815, 312, 1143, 257, 688, 295, 1413, 293, 17154, 399, 295, 3089, 257, 688, 295, 2740, 370, 1310, 51816], 'temperature': 0.0, 'avg_logprob': -0.06697572980608259, 'compression_ratio': 1.9343065693430657, 'no_speech_prob': 0.01064966432750225}, {'id': 164, 'seek': 123438, 'start': 1234.38, 'end': 1238.46, 'text': ' for a few functions which you know are small and use a lot often I can do this business', 'tokens': [50364, 337, 257, 1326, 6828, 597, 291, 458, 366, 1359, 293, 764, 257, 688, 2049, 286, 393, 360, 341, 1606, 50568], 'temperature': 0.0, 'avg_logprob': -0.06429932667658879, 'compression_ratio': 1.9095477386934674, 'no_speech_prob': 0.0003678606008179486}, {'id': 165, 'seek': 123438, 'start': 1239.5800000000002, 'end': 1246.5400000000002, 'text': " the other thing is let's say for example I have I know that I have an if-then-else statement and", 'tokens': [50624, 264, 661, 551, 307, 718, 311, 584, 337, 1365, 286, 362, 286, 458, 300, 286, 362, 364, 498, 12, 19096, 12, 44408, 5629, 293, 50972], 'temperature': 0.0, 'avg_logprob': -0.06429932667658879, 'compression_ratio': 1.9095477386934674, 'no_speech_prob': 0.0003678606008179486}, {'id': 166, 'seek': 123438, 'start': 1246.5400000000002, 'end': 1252.22, 'text': ' I know that this statement is executed more often than this statement like sorry the if branch is', 'tokens': [50972, 286, 458, 300, 341, 5629, 307, 17577, 544, 2049, 813, 341, 5629, 411, 2597, 264, 498, 9819, 307, 51256], 'temperature': 0.0, 'avg_logprob': -0.06429932667658879, 'compression_ratio': 1.9095477386934674, 'no_speech_prob': 0.0003678606008179486}, {'id': 167, 'seek': 123438, 'start': 1252.22, 'end': 1258.7, 'text': " the then branch is executed more often than the edge branch let's say you know that so then there", 'tokens': [51256, 264, 550, 9819, 307, 17577, 544, 2049, 813, 264, 4691, 9819, 718, 311, 584, 291, 458, 300, 370, 550, 456, 51580], 'temperature': 0.0, 'avg_logprob': -0.06429932667658879, 'compression_ratio': 1.9095477386934674, 'no_speech_prob': 0.0003678606008179486}, {'id': 168, 'seek': 125870, 'start': 1258.7, 'end': 1265.02, 'text': ' are certain optimizations you can do to sort of speed speed up executions along this path', 'tokens': [50364, 366, 1629, 5028, 14455, 291, 393, 360, 281, 1333, 295, 3073, 3073, 493, 4454, 3666, 2051, 341, 3100, 50680], 'temperature': 0.0, 'avg_logprob': -0.07327158074629934, 'compression_ratio': 2.081447963800905, 'no_speech_prob': 0.006683243438601494}, {'id': 169, 'seek': 125870, 'start': 1266.38, 'end': 1272.22, 'text': ' right try to always do things along this path it might happen that you miss out something here', 'tokens': [50748, 558, 853, 281, 1009, 360, 721, 2051, 341, 3100, 309, 1062, 1051, 300, 291, 1713, 484, 746, 510, 51040], 'temperature': 0.0, 'avg_logprob': -0.07327158074629934, 'compression_ratio': 2.081447963800905, 'no_speech_prob': 0.006683243438601494}, {'id': 170, 'seek': 125870, 'start': 1272.22, 'end': 1276.94, 'text': ' right so maybe the cost of this path increases actually right the other path maybe the cost', 'tokens': [51040, 558, 370, 1310, 264, 2063, 295, 341, 3100, 8637, 767, 558, 264, 661, 3100, 1310, 264, 2063, 51276], 'temperature': 0.0, 'avg_logprob': -0.07327158074629934, 'compression_ratio': 2.081447963800905, 'no_speech_prob': 0.006683243438601494}, {'id': 171, 'seek': 125870, 'start': 1276.94, 'end': 1282.6200000000001, 'text': ' increases which as I said yesterday is not allowed by our traditional optimization our', 'tokens': [51276, 8637, 597, 382, 286, 848, 5186, 307, 406, 4350, 538, 527, 5164, 19618, 527, 51560], 'temperature': 0.0, 'avg_logprob': -0.07327158074629934, 'compression_ratio': 2.081447963800905, 'no_speech_prob': 0.006683243438601494}, {'id': 172, 'seek': 125870, 'start': 1282.6200000000001, 'end': 1287.74, 'text': ' traditional optimization will not allow that if the execution cost of any path increases it will', 'tokens': [51560, 5164, 19618, 486, 406, 2089, 300, 498, 264, 15058, 2063, 295, 604, 3100, 8637, 309, 486, 51816], 'temperature': 0.0, 'avg_logprob': -0.07327158074629934, 'compression_ratio': 2.081447963800905, 'no_speech_prob': 0.006683243438601494}, {'id': 173, 'seek': 128774, 'start': 1287.74, 'end': 1292.86, 'text': ' say I cannot do that optimization right but there are these special optimizations referred', 'tokens': [50364, 584, 286, 2644, 360, 300, 19618, 558, 457, 456, 366, 613, 2121, 5028, 14455, 10839, 50620], 'temperature': 0.0, 'avg_logprob': -0.06872167026295381, 'compression_ratio': 1.868020304568528, 'no_speech_prob': 0.0005259105819277465}, {'id': 174, 'seek': 128774, 'start': 1292.86, 'end': 1298.6200000000001, 'text': " to as pgo's or profile guided optimizations which can do that which are allowed to do that", 'tokens': [50620, 281, 382, 280, 1571, 311, 420, 7964, 19663, 5028, 14455, 597, 393, 360, 300, 597, 366, 4350, 281, 360, 300, 50908], 'temperature': 0.0, 'avg_logprob': -0.06872167026295381, 'compression_ratio': 1.868020304568528, 'no_speech_prob': 0.0005259105819277465}, {'id': 175, 'seek': 128774, 'start': 1298.6200000000001, 'end': 1303.42, 'text': ' which can say that okay if I have a heavily heavily executed path I can push more code there', 'tokens': [50908, 597, 393, 584, 300, 1392, 498, 286, 362, 257, 10950, 10950, 17577, 3100, 286, 393, 2944, 544, 3089, 456, 51148], 'temperature': 0.0, 'avg_logprob': -0.06872167026295381, 'compression_ratio': 1.868020304568528, 'no_speech_prob': 0.0005259105819277465}, {'id': 176, 'seek': 128774, 'start': 1303.42, 'end': 1311.34, 'text': ' I can sorry I can reduce code there or make that path lighter right even if I do not like for', 'tokens': [51148, 286, 393, 2597, 286, 393, 5407, 3089, 456, 420, 652, 300, 3100, 11546, 558, 754, 498, 286, 360, 406, 411, 337, 51544], 'temperature': 0.0, 'avg_logprob': -0.06872167026295381, 'compression_ratio': 1.868020304568528, 'no_speech_prob': 0.0005259105819277465}, {'id': 177, 'seek': 131134, 'start': 1311.34, 'end': 1318.9399999999998, 'text': " example what can you do let's say for example I have this particular program and I know that", 'tokens': [50364, 1365, 437, 393, 291, 360, 718, 311, 584, 337, 1365, 286, 362, 341, 1729, 1461, 293, 286, 458, 300, 50744], 'temperature': 0.0, 'avg_logprob': -0.08519057716642107, 'compression_ratio': 1.6258503401360545, 'no_speech_prob': 0.004744125530123711}, {'id': 178, 'seek': 131134, 'start': 1318.9399999999998, 'end': 1330.22, 'text': " this particular path maybe let's use a blue let's say this blue path is very heavily executed and", 'tokens': [50744, 341, 1729, 3100, 1310, 718, 311, 764, 257, 3344, 718, 311, 584, 341, 3344, 3100, 307, 588, 10950, 17577, 293, 51308], 'temperature': 0.0, 'avg_logprob': -0.08519057716642107, 'compression_ratio': 1.6258503401360545, 'no_speech_prob': 0.004744125530123711}, {'id': 179, 'seek': 131134, 'start': 1331.02, 'end': 1335.74, 'text': ' let me just try to say what statements are there', 'tokens': [51348, 718, 385, 445, 853, 281, 584, 437, 12363, 366, 456, 51584], 'temperature': 0.0, 'avg_logprob': -0.08519057716642107, 'compression_ratio': 1.6258503401360545, 'no_speech_prob': 0.004744125530123711}, {'id': 180, 'seek': 134134, 'start': 1341.82, 'end': 1342.4599999999998, 'text': ' you', 'tokens': [50388, 291, 50420], 'temperature': 1.0, 'avg_logprob': -2.716041374206543, 'compression_ratio': 0.2727272727272727, 'no_speech_prob': 0.25508934259414673}, {'id': 181, 'seek': 134246, 'start': 1342.46, 'end': 1371.46, 'text': ' Let us say x and z are already initialized. Let us say I have this computation.', 'tokens': [50364, 961, 505, 584, 2031, 293, 710, 366, 1217, 5883, 1602, 13, 961, 505, 584, 286, 362, 341, 24903, 13, 51814], 'temperature': 0.0, 'avg_logprob': -0.32013036893761676, 'compression_ratio': 1.0675675675675675, 'no_speech_prob': 0.681645929813385}, {'id': 182, 'seek': 137146, 'start': 1371.46, 'end': 1390.7, 'text': ' Let us say I have this computation. So, what can I do here? Can I do something if I know', 'tokens': [50364, 961, 505, 584, 286, 362, 341, 24903, 13, 407, 11, 437, 393, 286, 360, 510, 30, 1664, 286, 360, 746, 498, 286, 458, 51326], 'temperature': 0.0, 'avg_logprob': -0.18148282722190576, 'compression_ratio': 1.035294117647059, 'no_speech_prob': 0.24442321062088013}, {'id': 183, 'seek': 139070, 'start': 1390.7, 'end': 1404.02, 'text': ' that this blue path is heavily executed? How? Now, I mean, I am specifically giving you', 'tokens': [50364, 300, 341, 3344, 3100, 307, 10950, 17577, 30, 1012, 30, 823, 11, 286, 914, 11, 286, 669, 4682, 2902, 291, 51030], 'temperature': 0.0, 'avg_logprob': -0.4702235460281372, 'compression_ratio': 1.0235294117647058, 'no_speech_prob': 0.8407312035560608}, {'id': 184, 'seek': 140402, 'start': 1404.02, 'end': 1424.54, 'text': ' an example. So, on this example, what can you do? I cannot remove z. Yeah. I can do', 'tokens': [50364, 364, 1365, 13, 407, 11, 322, 341, 1365, 11, 437, 393, 291, 360, 30, 286, 2644, 4159, 710, 13, 865, 13, 286, 393, 360, 51390], 'temperature': 0.0, 'avg_logprob': -0.24948462317971623, 'compression_ratio': 1.3828125, 'no_speech_prob': 0.24487636983394623}, {'id': 185, 'seek': 140402, 'start': 1424.54, 'end': 1432.54, 'text': ' what? No. So, essentially the thing is that this particular maybe this is not a good example.', 'tokens': [51390, 437, 30, 883, 13, 407, 11, 4476, 264, 551, 307, 300, 341, 1729, 1310, 341, 307, 406, 257, 665, 1365, 13, 51790], 'temperature': 0.0, 'avg_logprob': -0.24948462317971623, 'compression_ratio': 1.3828125, 'no_speech_prob': 0.24487636983394623}, {'id': 186, 'seek': 143254, 'start': 1432.54, 'end': 1445.78, 'text': ' I can actually do a traditional optimization here. No, I want a specific answer and I will', 'tokens': [50364, 286, 393, 767, 360, 257, 5164, 19618, 510, 13, 883, 11, 286, 528, 257, 2685, 1867, 293, 286, 486, 51026], 'temperature': 0.0, 'avg_logprob': -0.28167517288871435, 'compression_ratio': 1.0843373493975903, 'no_speech_prob': 0.5644550323486328}, {'id': 187, 'seek': 144578, 'start': 1445.78, 'end': 1469.46, 'text': ' have that answer. I do not want any other answer. Okay. Let us say this. Let us say', 'tokens': [50364, 362, 300, 1867, 13, 286, 360, 406, 528, 604, 661, 1867, 13, 1033, 13, 961, 505, 584, 341, 13, 961, 505, 584, 51548], 'temperature': 0.0, 'avg_logprob': -0.23410701751708984, 'compression_ratio': 1.1857142857142857, 'no_speech_prob': 0.24352583289146423}, {'id': 188, 'seek': 146946, 'start': 1469.46, 'end': 1484.46, 'text': ' this is the example. So, what can I do? Where do I pre-compute it? No, but I still have', 'tokens': [50364, 341, 307, 264, 1365, 13, 407, 11, 437, 393, 286, 360, 30, 2305, 360, 286, 659, 12, 21541, 1169, 309, 30, 883, 11, 457, 286, 920, 362, 51114], 'temperature': 0.0, 'avg_logprob': -0.20671713004991846, 'compression_ratio': 1.634703196347032, 'no_speech_prob': 0.6226667165756226}, {'id': 189, 'seek': 146946, 'start': 1484.46, 'end': 1489.46, 'text': ' to compute it. How does it help me? There is no redundancy, right? A plus B is not computed', 'tokens': [51114, 281, 14722, 309, 13, 1012, 775, 309, 854, 385, 30, 821, 307, 572, 27830, 6717, 11, 558, 30, 316, 1804, 363, 307, 406, 40610, 51364], 'temperature': 0.0, 'avg_logprob': -0.20671713004991846, 'compression_ratio': 1.634703196347032, 'no_speech_prob': 0.6226667165756226}, {'id': 190, 'seek': 146946, 'start': 1489.46, 'end': 1492.46, 'text': ' multiple times. It is still, even if you computed it temporarily, you still have to do that', 'tokens': [51364, 3866, 1413, 13, 467, 307, 920, 11, 754, 498, 291, 40610, 309, 23750, 11, 291, 920, 362, 281, 360, 300, 51514], 'temperature': 0.0, 'avg_logprob': -0.20671713004991846, 'compression_ratio': 1.634703196347032, 'no_speech_prob': 0.6226667165756226}, {'id': 191, 'seek': 146946, 'start': 1492.46, 'end': 1498.46, 'text': ' computation. No, but you do not know. Let us say this is the whole program. Let us say', 'tokens': [51514, 24903, 13, 883, 11, 457, 291, 360, 406, 458, 13, 961, 505, 584, 341, 307, 264, 1379, 1461, 13, 961, 505, 584, 51814], 'temperature': 0.0, 'avg_logprob': -0.20671713004991846, 'compression_ratio': 1.634703196347032, 'no_speech_prob': 0.6226667165756226}, {'id': 192, 'seek': 149846, 'start': 1498.46, 'end': 1520.46, 'text': ' this is the whole program. Okay, I give a more. I will keep on changing it till I get', 'tokens': [50364, 341, 307, 264, 1379, 1461, 13, 1033, 11, 286, 976, 257, 544, 13, 286, 486, 1066, 322, 4473, 309, 4288, 286, 483, 51464], 'temperature': 0.0, 'avg_logprob': -0.34306012667142427, 'compression_ratio': 1.0625, 'no_speech_prob': 0.8110409379005432}, {'id': 193, 'seek': 152046, 'start': 1520.46, 'end': 1539.46, 'text': ' the answer I want. What about this particular case? Yeah, so I can. So, let us think of', 'tokens': [50364, 264, 1867, 286, 528, 13, 708, 466, 341, 1729, 1389, 30, 865, 11, 370, 286, 393, 13, 407, 11, 718, 505, 519, 295, 51314], 'temperature': 0.0, 'avg_logprob': -0.2023934055777157, 'compression_ratio': 1.592814371257485, 'no_speech_prob': 0.5935792922973633}, {'id': 194, 'seek': 152046, 'start': 1539.46, 'end': 1545.6200000000001, 'text': ' constant propagation. So, this will not allow constant propagation. Why not? Because I am', 'tokens': [51314, 5754, 38377, 13, 407, 11, 341, 486, 406, 2089, 5754, 38377, 13, 1545, 406, 30, 1436, 286, 669, 51622], 'temperature': 0.0, 'avg_logprob': -0.2023934055777157, 'compression_ratio': 1.592814371257485, 'no_speech_prob': 0.5935792922973633}, {'id': 195, 'seek': 152046, 'start': 1545.6200000000001, 'end': 1549.78, 'text': ' getting different values of x along different paths. So, I will get a not constant and I', 'tokens': [51622, 1242, 819, 4190, 295, 2031, 2051, 819, 14518, 13, 407, 11, 286, 486, 483, 257, 406, 5754, 293, 286, 51830], 'temperature': 0.0, 'avg_logprob': -0.2023934055777157, 'compression_ratio': 1.592814371257485, 'no_speech_prob': 0.5935792922973633}, {'id': 196, 'seek': 154978, 'start': 1549.78, 'end': 1555.58, 'text': ' will get a non-constant here and I cannot do constant propagation. But now, if you', 'tokens': [50364, 486, 483, 257, 2107, 12, 25279, 394, 510, 293, 286, 2644, 360, 5754, 38377, 13, 583, 586, 11, 498, 291, 50654], 'temperature': 0.0, 'avg_logprob': -0.29497131224601497, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.6007965803146362}, {'id': 197, 'seek': 154978, 'start': 1555.58, 'end': 1563.18, 'text': ' allow me to do constant propagation, modular profile information, then if I know that this', 'tokens': [50654, 2089, 385, 281, 360, 5754, 38377, 11, 31111, 7964, 1589, 11, 550, 498, 286, 458, 300, 341, 51034], 'temperature': 0.0, 'avg_logprob': -0.29497131224601497, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.6007965803146362}, {'id': 198, 'seek': 154978, 'start': 1563.18, 'end': 1571.1399999999999, 'text': ' path is heavily executed, then I can actually could put constant propagate it 5 here.', 'tokens': [51034, 3100, 307, 10950, 17577, 11, 550, 286, 393, 767, 727, 829, 5754, 48256, 309, 1025, 510, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.29497131224601497, 'compression_ratio': 1.628930817610063, 'no_speech_prob': 0.6007965803146362}, {'id': 199, 'seek': 157114, 'start': 1571.14, 'end': 1588.6200000000001, 'text': ' Yeah, it is unsafe. No, but that does not help. Not constant, constant are at analysis', 'tokens': [50364, 865, 11, 309, 307, 35948, 13, 883, 11, 457, 300, 775, 406, 854, 13, 1726, 5754, 11, 5754, 366, 412, 5215, 51238], 'temperature': 0.0, 'avg_logprob': -0.17467576265335083, 'compression_ratio': 1.563953488372093, 'no_speech_prob': 0.07241541147232056}, {'id': 200, 'seek': 157114, 'start': 1588.6200000000001, 'end': 1594.1000000000001, 'text': ' time. At runtime, these entities do not exist. At runtime, these are actual program states', 'tokens': [51238, 565, 13, 1711, 34474, 11, 613, 16667, 360, 406, 2514, 13, 1711, 34474, 11, 613, 366, 3539, 1461, 4368, 51512], 'temperature': 0.0, 'avg_logprob': -0.17467576265335083, 'compression_ratio': 1.563953488372093, 'no_speech_prob': 0.07241541147232056}, {'id': 201, 'seek': 157114, 'start': 1594.1000000000001, 'end': 1598.5, 'text': ' where these guys have values and you are running only one execution then. Something becomes', 'tokens': [51512, 689, 613, 1074, 362, 4190, 293, 291, 366, 2614, 787, 472, 15058, 550, 13, 6595, 3643, 51732], 'temperature': 0.0, 'avg_logprob': -0.17467576265335083, 'compression_ratio': 1.563953488372093, 'no_speech_prob': 0.07241541147232056}, {'id': 202, 'seek': 159850, 'start': 1598.5, 'end': 1602.66, 'text': ' non-constant because there can be coming through different executions. It may be a', 'tokens': [50364, 2107, 12, 25279, 394, 570, 456, 393, 312, 1348, 807, 819, 4454, 3666, 13, 467, 815, 312, 257, 50572], 'temperature': 0.0, 'avg_logprob': -0.2337810198465983, 'compression_ratio': 1.6956521739130435, 'no_speech_prob': 0.421316534280777}, {'id': 203, 'seek': 159850, 'start': 1602.66, 'end': 1606.82, 'text': ' program input, but when you are executing the program, you know the inputs. They are', 'tokens': [50572, 1461, 4846, 11, 457, 562, 291, 366, 32368, 264, 1461, 11, 291, 458, 264, 15743, 13, 814, 366, 50780], 'temperature': 0.0, 'avg_logprob': -0.2337810198465983, 'compression_ratio': 1.6956521739130435, 'no_speech_prob': 0.421316534280777}, {'id': 204, 'seek': 159850, 'start': 1606.82, 'end': 1611.22, 'text': ' already values and you can actually know which path you are taking. So, actually taking exactly', 'tokens': [50780, 1217, 4190, 293, 291, 393, 767, 458, 597, 3100, 291, 366, 1940, 13, 407, 11, 767, 1940, 2293, 51000], 'temperature': 0.0, 'avg_logprob': -0.2337810198465983, 'compression_ratio': 1.6956521739130435, 'no_speech_prob': 0.421316534280777}, {'id': 205, 'seek': 159850, 'start': 1611.22, 'end': 1621.22, 'text': ' one program path. Yes, so essentially what you can do is, so these are referred to this', 'tokens': [51000, 472, 1461, 3100, 13, 1079, 11, 370, 4476, 437, 291, 393, 360, 307, 11, 370, 613, 366, 10839, 281, 341, 51500], 'temperature': 0.0, 'avg_logprob': -0.2337810198465983, 'compression_ratio': 1.6956521739130435, 'no_speech_prob': 0.421316534280777}, {'id': 206, 'seek': 162122, 'start': 1621.22, 'end': 1631.14, 'text': ' class of, you can do something called speculation. So, you speculate that because this guy is', 'tokens': [50364, 1508, 295, 11, 291, 393, 360, 746, 1219, 27696, 13, 407, 11, 291, 40775, 300, 570, 341, 2146, 307, 50860], 'temperature': 0.0, 'avg_logprob': -0.20897708140628438, 'compression_ratio': 1.5491329479768785, 'no_speech_prob': 0.2005404233932495}, {'id': 207, 'seek': 162122, 'start': 1631.14, 'end': 1638.38, 'text': ' 5, now it is constant propagate z and this whole thing you can say output as 5. What', 'tokens': [50860, 1025, 11, 586, 309, 307, 5754, 48256, 710, 293, 341, 1379, 551, 291, 393, 584, 5598, 382, 1025, 13, 708, 51222], 'temperature': 0.0, 'avg_logprob': -0.20897708140628438, 'compression_ratio': 1.5491329479768785, 'no_speech_prob': 0.2005404233932495}, {'id': 208, 'seek': 162122, 'start': 1638.38, 'end': 1646.66, 'text': ' you can do is, you can put a check here. Did I end up taking the same path? If your check', 'tokens': [51222, 291, 393, 360, 307, 11, 291, 393, 829, 257, 1520, 510, 13, 2589, 286, 917, 493, 1940, 264, 912, 3100, 30, 759, 428, 1520, 51636], 'temperature': 0.0, 'avg_logprob': -0.20897708140628438, 'compression_ratio': 1.5491329479768785, 'no_speech_prob': 0.2005404233932495}, {'id': 209, 'seek': 164666, 'start': 1646.66, 'end': 1652.8600000000001, 'text': ' fails, so this is like putting an extra information, extra code here, a check code here. If that', 'tokens': [50364, 18199, 11, 370, 341, 307, 411, 3372, 364, 2857, 1589, 11, 2857, 3089, 510, 11, 257, 1520, 3089, 510, 13, 759, 300, 50674], 'temperature': 0.0, 'avg_logprob': -0.16489449862776132, 'compression_ratio': 1.7696335078534031, 'no_speech_prob': 0.15378452837467194}, {'id': 210, 'seek': 164666, 'start': 1652.8600000000001, 'end': 1661.5800000000002, 'text': ' check code fails, it will return control back to the whole, back to the entry point and', 'tokens': [50674, 1520, 3089, 18199, 11, 309, 486, 2736, 1969, 646, 281, 264, 1379, 11, 646, 281, 264, 8729, 935, 293, 51110], 'temperature': 0.0, 'avg_logprob': -0.16489449862776132, 'compression_ratio': 1.7696335078534031, 'no_speech_prob': 0.15378452837467194}, {'id': 211, 'seek': 164666, 'start': 1661.5800000000002, 'end': 1667.5400000000002, 'text': ' re-execute the whole thing with the actual values, the actual code.', 'tokens': [51110, 319, 12, 3121, 3045, 1169, 264, 1379, 551, 365, 264, 3539, 4190, 11, 264, 3539, 3089, 13, 51408], 'temperature': 0.0, 'avg_logprob': -0.16489449862776132, 'compression_ratio': 1.7696335078534031, 'no_speech_prob': 0.15378452837467194}, {'id': 212, 'seek': 164666, 'start': 1667.5400000000002, 'end': 1673.6200000000001, 'text': ' Yes, that is why the new path will become, the other path will become slow because it', 'tokens': [51408, 1079, 11, 300, 307, 983, 264, 777, 3100, 486, 1813, 11, 264, 661, 3100, 486, 1813, 2964, 570, 309, 51712], 'temperature': 0.0, 'avg_logprob': -0.16489449862776132, 'compression_ratio': 1.7696335078534031, 'no_speech_prob': 0.15378452837467194}, {'id': 213, 'seek': 167362, 'start': 1673.62, 'end': 1681.26, 'text': ' has to restart from a separate execution and do it and come back. But if it does not happen', 'tokens': [50364, 575, 281, 21022, 490, 257, 4994, 15058, 293, 360, 309, 293, 808, 646, 13, 583, 498, 309, 775, 406, 1051, 50746], 'temperature': 0.0, 'avg_logprob': -0.221441650390625, 'compression_ratio': 1.5608695652173914, 'no_speech_prob': 0.06507918983697891}, {'id': 214, 'seek': 167362, 'start': 1681.26, 'end': 1689.8999999999999, 'text': ' a lot often, then I am good. So, maybe instead of 50, it is let us say these many times.', 'tokens': [50746, 257, 688, 2049, 11, 550, 286, 669, 665, 13, 407, 11, 1310, 2602, 295, 2625, 11, 309, 307, 718, 505, 584, 613, 867, 1413, 13, 51178], 'temperature': 0.0, 'avg_logprob': -0.221441650390625, 'compression_ratio': 1.5608695652173914, 'no_speech_prob': 0.06507918983697891}, {'id': 215, 'seek': 167362, 'start': 1689.8999999999999, 'end': 1694.3799999999999, 'text': ' You see through profile information that is there is a lot of times and this only happens', 'tokens': [51178, 509, 536, 807, 7964, 1589, 300, 307, 456, 307, 257, 688, 295, 1413, 293, 341, 787, 2314, 51402], 'temperature': 0.0, 'avg_logprob': -0.221441650390625, 'compression_ratio': 1.5608695652173914, 'no_speech_prob': 0.06507918983697891}, {'id': 216, 'seek': 167362, 'start': 1694.3799999999999, 'end': 1703.1, 'text': ' 5 times. Do it. I mean 1 in a whatever number of zeros times, you will fail and you have', 'tokens': [51402, 1025, 1413, 13, 1144, 309, 13, 286, 914, 502, 294, 257, 2035, 1230, 295, 35193, 1413, 11, 291, 486, 3061, 293, 291, 362, 51838], 'temperature': 0.0, 'avg_logprob': -0.221441650390625, 'compression_ratio': 1.5608695652173914, 'no_speech_prob': 0.06507918983697891}, {'id': 217, 'seek': 170310, 'start': 1703.1, 'end': 1707.2199999999998, 'text': ' to re-execute. You have to incur more cost than you would have got by not doing this', 'tokens': [50364, 281, 319, 12, 3121, 3045, 1169, 13, 509, 362, 281, 35774, 544, 2063, 813, 291, 576, 362, 658, 538, 406, 884, 341, 50570], 'temperature': 0.0, 'avg_logprob': -0.18918934890202113, 'compression_ratio': 1.725868725868726, 'no_speech_prob': 0.008826208300888538}, {'id': 218, 'seek': 170310, 'start': 1707.2199999999998, 'end': 1714.1799999999998, 'text': ' optimization. But then it is okay if it happens very few times. And this is a very, so these', 'tokens': [50570, 19618, 13, 583, 550, 309, 307, 1392, 498, 309, 2314, 588, 1326, 1413, 13, 400, 341, 307, 257, 588, 11, 370, 613, 50918], 'temperature': 0.0, 'avg_logprob': -0.18918934890202113, 'compression_ratio': 1.725868725868726, 'no_speech_prob': 0.008826208300888538}, {'id': 219, 'seek': 170310, 'start': 1714.1799999999998, 'end': 1719.82, 'text': ' are very aggressive class of optimizations, but they are used a lot in like both architectures', 'tokens': [50918, 366, 588, 10762, 1508, 295, 5028, 14455, 11, 457, 436, 366, 1143, 257, 688, 294, 411, 1293, 6331, 1303, 51200], 'temperature': 0.0, 'avg_logprob': -0.18918934890202113, 'compression_ratio': 1.725868725868726, 'no_speech_prob': 0.008826208300888538}, {'id': 220, 'seek': 170310, 'start': 1719.82, 'end': 1724.86, 'text': ' and compilers. So, even there are things like value speculation where you just speculate', 'tokens': [51200, 293, 715, 388, 433, 13, 407, 11, 754, 456, 366, 721, 411, 2158, 27696, 689, 291, 445, 40775, 51452], 'temperature': 0.0, 'avg_logprob': -0.18918934890202113, 'compression_ratio': 1.725868725868726, 'no_speech_prob': 0.008826208300888538}, {'id': 221, 'seek': 170310, 'start': 1724.86, 'end': 1728.1799999999998, 'text': ' the value of a variable. You say looks like the variable is going to have this value.', 'tokens': [51452, 264, 2158, 295, 257, 7006, 13, 509, 584, 1542, 411, 264, 7006, 307, 516, 281, 362, 341, 2158, 13, 51618], 'temperature': 0.0, 'avg_logprob': -0.18918934890202113, 'compression_ratio': 1.725868725868726, 'no_speech_prob': 0.008826208300888538}, {'id': 222, 'seek': 172818, 'start': 1729.18, 'end': 1735.3400000000001, 'text': ' value and see. So, there are a lot of very interesting things happen with such profile', 'tokens': [50414, 2158, 293, 536, 13, 407, 11, 456, 366, 257, 688, 295, 588, 1880, 721, 1051, 365, 1270, 7964, 50722], 'temperature': 0.0, 'avg_logprob': -0.1668968724680471, 'compression_ratio': 1.748792270531401, 'no_speech_prob': 0.037138208746910095}, {'id': 223, 'seek': 172818, 'start': 1735.3400000000001, 'end': 1740.0600000000002, 'text': ' information. So, let us try to build a dynamic analysis, think of a dynamic analysis which', 'tokens': [50722, 1589, 13, 407, 11, 718, 505, 853, 281, 1322, 257, 8546, 5215, 11, 519, 295, 257, 8546, 5215, 597, 50958], 'temperature': 0.0, 'avg_logprob': -0.1668968724680471, 'compression_ratio': 1.748792270531401, 'no_speech_prob': 0.037138208746910095}, {'id': 224, 'seek': 172818, 'start': 1740.0600000000002, 'end': 1746.22, 'text': ' will do profiling. So, I want to do the simplest kind of profiling which is I want to find', 'tokens': [50958, 486, 360, 1740, 4883, 13, 407, 11, 286, 528, 281, 360, 264, 22811, 733, 295, 1740, 4883, 597, 307, 286, 528, 281, 915, 51266], 'temperature': 0.0, 'avg_logprob': -0.1668968724680471, 'compression_ratio': 1.748792270531401, 'no_speech_prob': 0.037138208746910095}, {'id': 225, 'seek': 172818, 'start': 1746.22, 'end': 1754.26, 'text': ' out a histogram of basic blocks. I want to find out how many times is a basic block traversed', 'tokens': [51266, 484, 257, 49816, 295, 3875, 8474, 13, 286, 528, 281, 915, 484, 577, 867, 1413, 307, 257, 3875, 3461, 23149, 292, 51668], 'temperature': 0.0, 'avg_logprob': -0.1668968724680471, 'compression_ratio': 1.748792270531401, 'no_speech_prob': 0.037138208746910095}, {'id': 226, 'seek': 175426, 'start': 1754.26, 'end': 1759.7, 'text': ' in a given execution. So, now over multiple execution I can sort of accumulate that values', 'tokens': [50364, 294, 257, 2212, 15058, 13, 407, 11, 586, 670, 3866, 15058, 286, 393, 1333, 295, 33384, 300, 4190, 50636], 'temperature': 0.0, 'avg_logprob': -0.14884293996370757, 'compression_ratio': 1.8072289156626506, 'no_speech_prob': 0.05816125497221947}, {'id': 227, 'seek': 175426, 'start': 1759.7, 'end': 1764.94, 'text': ' and then I have a nice profile across multiple iterations that what is the probability how', 'tokens': [50636, 293, 550, 286, 362, 257, 1481, 7964, 2108, 3866, 36540, 300, 437, 307, 264, 8482, 577, 50898], 'temperature': 0.0, 'avg_logprob': -0.14884293996370757, 'compression_ratio': 1.8072289156626506, 'no_speech_prob': 0.05816125497221947}, {'id': 228, 'seek': 175426, 'start': 1764.94, 'end': 1772.14, 'text': ' many times a basic block will be executed. So, I want for every basic block I want to', 'tokens': [50898, 867, 1413, 257, 3875, 3461, 486, 312, 17577, 13, 407, 11, 286, 528, 337, 633, 3875, 3461, 286, 528, 281, 51258], 'temperature': 0.0, 'avg_logprob': -0.14884293996370757, 'compression_ratio': 1.8072289156626506, 'no_speech_prob': 0.05816125497221947}, {'id': 229, 'seek': 175426, 'start': 1772.14, 'end': 1777.78, 'text': ' count how many times was that basic block hit in a given execution. How can I build', 'tokens': [51258, 1207, 577, 867, 1413, 390, 300, 3875, 3461, 2045, 294, 257, 2212, 15058, 13, 1012, 393, 286, 1322, 51540], 'temperature': 0.0, 'avg_logprob': -0.14884293996370757, 'compression_ratio': 1.8072289156626506, 'no_speech_prob': 0.05816125497221947}, {'id': 230, 'seek': 175426, 'start': 1777.78, 'end': 1783.52, 'text': ' that as a dynamic analysis? So, this is control flow profiling because we are trying to understand', 'tokens': [51540, 300, 382, 257, 8546, 5215, 30, 407, 11, 341, 307, 1969, 3095, 1740, 4883, 570, 321, 366, 1382, 281, 1223, 51827], 'temperature': 0.0, 'avg_logprob': -0.14884293996370757, 'compression_ratio': 1.8072289156626506, 'no_speech_prob': 0.05816125497221947}, {'id': 231, 'seek': 178352, 'start': 1783.52, 'end': 1787.36, 'text': ' something about the control flow. So, how can I build that analysis?', 'tokens': [50364, 746, 466, 264, 1969, 3095, 13, 407, 11, 577, 393, 286, 1322, 300, 5215, 30, 50556], 'temperature': 0.0, 'avg_logprob': -0.2236933491446755, 'compression_ratio': 1.2734375, 'no_speech_prob': 0.0062399073503911495}, {'id': 232, 'seek': 178352, 'start': 1787.36, 'end': 1808.8799999999999, 'text': ' Very good as simple as that and how do I maintain the tracker? But how will you dump that? No,', 'tokens': [50556, 4372, 665, 382, 2199, 382, 300, 293, 577, 360, 286, 6909, 264, 37516, 30, 583, 577, 486, 291, 11430, 300, 30, 883, 11, 51632], 'temperature': 0.0, 'avg_logprob': -0.2236933491446755, 'compression_ratio': 1.2734375, 'no_speech_prob': 0.0062399073503911495}, {'id': 233, 'seek': 180888, 'start': 1809.88, 'end': 1815.2600000000002, 'text': ' I mean you are right completely right, but I just wanted to like ask you I mean more', 'tokens': [50414, 286, 914, 291, 366, 558, 2584, 558, 11, 457, 286, 445, 1415, 281, 411, 1029, 291, 286, 914, 544, 50683], 'temperature': 0.0, 'avg_logprob': -0.22517050910241826, 'compression_ratio': 1.9773755656108598, 'no_speech_prob': 0.08010688424110413}, {'id': 234, 'seek': 180888, 'start': 1815.2600000000002, 'end': 1818.6000000000001, 'text': ' details about the implementation. How will you actually do this implementation if you', 'tokens': [50683, 4365, 466, 264, 11420, 13, 1012, 486, 291, 767, 360, 341, 11420, 498, 291, 50850], 'temperature': 0.0, 'avg_logprob': -0.22517050910241826, 'compression_ratio': 1.9773755656108598, 'no_speech_prob': 0.08010688424110413}, {'id': 235, 'seek': 180888, 'start': 1818.6000000000001, 'end': 1826.1200000000001, 'text': ' had to? What will you how will you maintain that information? So, there is a variable', 'tokens': [50850, 632, 281, 30, 708, 486, 291, 577, 486, 291, 6909, 300, 1589, 30, 407, 11, 456, 307, 257, 7006, 51226], 'temperature': 0.0, 'avg_logprob': -0.22517050910241826, 'compression_ratio': 1.9773755656108598, 'no_speech_prob': 0.08010688424110413}, {'id': 236, 'seek': 180888, 'start': 1826.1200000000001, 'end': 1829.24, 'text': ' corresponding to each basic block. How will you maintain that which variable is corresponding', 'tokens': [51226, 11760, 281, 1184, 3875, 3461, 13, 1012, 486, 291, 6909, 300, 597, 7006, 307, 11760, 51382], 'temperature': 0.0, 'avg_logprob': -0.22517050910241826, 'compression_ratio': 1.9773755656108598, 'no_speech_prob': 0.08010688424110413}, {'id': 237, 'seek': 180888, 'start': 1829.24, 'end': 1832.4, 'text': ' to which basic block? What is the frequency of each basic block? How will you maintain', 'tokens': [51382, 281, 597, 3875, 3461, 30, 708, 307, 264, 7893, 295, 1184, 3875, 3461, 30, 1012, 486, 291, 6909, 51540], 'temperature': 0.0, 'avg_logprob': -0.22517050910241826, 'compression_ratio': 1.9773755656108598, 'no_speech_prob': 0.08010688424110413}, {'id': 238, 'seek': 183240, 'start': 1832.4, 'end': 1838.1200000000001, 'text': ' that information? Vector of very good very good vector of basic blocks.', 'tokens': [50364, 300, 1589, 30, 691, 20814, 295, 588, 665, 588, 665, 8062, 295, 3875, 8474, 13, 50650], 'temperature': 0.0, 'avg_logprob': -0.2762523591518402, 'compression_ratio': 1.6973684210526316, 'no_speech_prob': 0.36885392665863037}, {'id': 239, 'seek': 183240, 'start': 1838.1200000000001, 'end': 1851.2, 'text': ' Excellent exactly that nothing more than that right. So, you give each basic block an identifier', 'tokens': [50650, 16723, 2293, 300, 1825, 544, 813, 300, 558, 13, 407, 11, 291, 976, 1184, 3875, 3461, 364, 45690, 51304], 'temperature': 0.0, 'avg_logprob': -0.2762523591518402, 'compression_ratio': 1.6973684210526316, 'no_speech_prob': 0.36885392665863037}, {'id': 240, 'seek': 183240, 'start': 1851.2, 'end': 1857.0, 'text': ' right. For each basic block you give let us say this is my basic block 1, this is 2, this', 'tokens': [51304, 558, 13, 1171, 1184, 3875, 3461, 291, 976, 718, 505, 584, 341, 307, 452, 3875, 3461, 502, 11, 341, 307, 568, 11, 341, 51594], 'temperature': 0.0, 'avg_logprob': -0.2762523591518402, 'compression_ratio': 1.6973684210526316, 'no_speech_prob': 0.36885392665863037}, {'id': 241, 'seek': 185700, 'start': 1857.0, 'end': 1864.6, 'text': ' is 3, this is 4, this is 5, this is 6, this is 7. Then you take an array of 7 size 7,', 'tokens': [50364, 307, 805, 11, 341, 307, 1017, 11, 341, 307, 1025, 11, 341, 307, 1386, 11, 341, 307, 1614, 13, 1396, 291, 747, 364, 10225, 295, 1614, 2744, 1614, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.19127771589491102, 'compression_ratio': 1.6518987341772151, 'no_speech_prob': 0.16220387816429138}, {'id': 242, 'seek': 185700, 'start': 1864.6, 'end': 1875.76, 'text': ' 7 integers and whenever a basic block is hit you just have an instruction which is count', 'tokens': [50744, 1614, 41674, 293, 5699, 257, 3875, 3461, 307, 2045, 291, 445, 362, 364, 10951, 597, 307, 1207, 51302], 'temperature': 0.0, 'avg_logprob': -0.19127771589491102, 'compression_ratio': 1.6518987341772151, 'no_speech_prob': 0.16220387816429138}, {'id': 243, 'seek': 185700, 'start': 1875.76, 'end': 1885.8, 'text': ' basic block number or basic block id plus plus right. So, every basic block knows what', 'tokens': [51302, 3875, 3461, 1230, 420, 3875, 3461, 4496, 1804, 1804, 558, 13, 407, 11, 633, 3875, 3461, 3255, 437, 51804], 'temperature': 0.0, 'avg_logprob': -0.19127771589491102, 'compression_ratio': 1.6518987341772151, 'no_speech_prob': 0.16220387816429138}, {'id': 244, 'seek': 188580, 'start': 1885.8, 'end': 1892.56, 'text': ' is the counter it has. So, the first one will be count 1 plus plus, this guy will be count', 'tokens': [50364, 307, 264, 5682, 309, 575, 13, 407, 11, 264, 700, 472, 486, 312, 1207, 502, 1804, 1804, 11, 341, 2146, 486, 312, 1207, 50702], 'temperature': 0.0, 'avg_logprob': -0.1415784602262536, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.1861843317747116}, {'id': 245, 'seek': 188580, 'start': 1892.56, 'end': 1898.56, 'text': ' 2 plus plus, count 3 plus plus, this will be put in at as an instruction right inside', 'tokens': [50702, 568, 1804, 1804, 11, 1207, 805, 1804, 1804, 11, 341, 486, 312, 829, 294, 412, 382, 364, 10951, 558, 1854, 51002], 'temperature': 0.0, 'avg_logprob': -0.1415784602262536, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.1861843317747116}, {'id': 246, 'seek': 188580, 'start': 1898.56, 'end': 1904.0, 'text': ' the code the LLVM code. So, you will use LLVM or any other compiler to insert this instruction', 'tokens': [51002, 264, 3089, 264, 441, 43, 53, 44, 3089, 13, 407, 11, 291, 486, 764, 441, 43, 53, 44, 420, 604, 661, 31958, 281, 8969, 341, 10951, 51274], 'temperature': 0.0, 'avg_logprob': -0.1415784602262536, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.1861843317747116}, {'id': 247, 'seek': 188580, 'start': 1904.0, 'end': 1909.96, 'text': ' in the code. Whenever that code will get executed it will increment that counter. At the end', 'tokens': [51274, 294, 264, 3089, 13, 14159, 300, 3089, 486, 483, 17577, 309, 486, 26200, 300, 5682, 13, 1711, 264, 917, 51572], 'temperature': 0.0, 'avg_logprob': -0.1415784602262536, 'compression_ratio': 1.8571428571428572, 'no_speech_prob': 0.1861843317747116}, {'id': 248, 'seek': 190996, 'start': 1909.96, 'end': 1916.48, 'text': ' of the day you dump this array it will contain the histogram of all basic blocks the count', 'tokens': [50364, 295, 264, 786, 291, 11430, 341, 10225, 309, 486, 5304, 264, 49816, 295, 439, 3875, 8474, 264, 1207, 50690], 'temperature': 0.0, 'avg_logprob': -0.2615949480157149, 'compression_ratio': 1.4166666666666667, 'no_speech_prob': 0.0977235957980156}, {'id': 249, 'seek': 190996, 'start': 1916.48, 'end': 1933.2, 'text': ' of all basic blocks right. Works for us any questions on this?', 'tokens': [50690, 295, 439, 3875, 8474, 558, 13, 27914, 337, 505, 604, 1651, 322, 341, 30, 51526], 'temperature': 0.0, 'avg_logprob': -0.2615949480157149, 'compression_ratio': 1.4166666666666667, 'no_speech_prob': 0.0977235957980156}, {'id': 250, 'seek': 193320, 'start': 1933.92, 'end': 1945.0, 'text': ' to our actual assignment which was that we wanted to figure out if there is a buffer', 'tokens': [50400, 281, 527, 3539, 15187, 597, 390, 300, 321, 1415, 281, 2573, 484, 498, 456, 307, 257, 21762, 50954], 'temperature': 0.0, 'avg_logprob': -0.20014628909883045, 'compression_ratio': 1.3671875, 'no_speech_prob': 0.3336614966392517}, {'id': 251, 'seek': 193320, 'start': 1945.0, 'end': 1956.4, 'text': ' overflow in our arrays. So, I want to write a dynamic analysis which will trigger an error', 'tokens': [50954, 37772, 294, 527, 41011, 13, 407, 11, 286, 528, 281, 2464, 257, 8546, 5215, 597, 486, 7875, 364, 6713, 51524], 'temperature': 0.0, 'avg_logprob': -0.20014628909883045, 'compression_ratio': 1.3671875, 'no_speech_prob': 0.3336614966392517}, {'id': 252, 'seek': 195640, 'start': 1956.4, 'end': 1964.2, 'text': ' whenever there is a buffer overflow on my stack. Do you understand what is a buffer overflow?', 'tokens': [50364, 5699, 456, 307, 257, 21762, 37772, 322, 452, 8630, 13, 1144, 291, 1223, 437, 307, 257, 21762, 37772, 30, 50754], 'temperature': 0.0, 'avg_logprob': -0.2517617399042303, 'compression_ratio': 1.6592920353982301, 'no_speech_prob': 0.3106682300567627}, {'id': 253, 'seek': 195640, 'start': 1964.2, 'end': 1973.68, 'text': ' Before that who did you guys look at that program tell me what happened in that program what was', 'tokens': [50754, 4546, 300, 567, 630, 291, 1074, 574, 412, 300, 1461, 980, 385, 437, 2011, 294, 300, 1461, 437, 390, 51228], 'temperature': 0.0, 'avg_logprob': -0.2517617399042303, 'compression_ratio': 1.6592920353982301, 'no_speech_prob': 0.3106682300567627}, {'id': 254, 'seek': 195640, 'start': 1973.68, 'end': 1979.88, 'text': ' why you are behaving so weird that motivation dot C could you run it? It showed weird results', 'tokens': [51228, 983, 291, 366, 35263, 370, 3657, 300, 12335, 5893, 383, 727, 291, 1190, 309, 30, 467, 4712, 3657, 3542, 51538], 'temperature': 0.0, 'avg_logprob': -0.2517617399042303, 'compression_ratio': 1.6592920353982301, 'no_speech_prob': 0.3106682300567627}, {'id': 255, 'seek': 195640, 'start': 1979.88, 'end': 1983.72, 'text': ' for your machine also. Oh thank God. Did you study the code and try to figure out what was', 'tokens': [51538, 337, 428, 3479, 611, 13, 876, 1309, 1265, 13, 2589, 291, 2979, 264, 3089, 293, 853, 281, 2573, 484, 437, 390, 51730], 'temperature': 0.0, 'avg_logprob': -0.2517617399042303, 'compression_ratio': 1.6592920353982301, 'no_speech_prob': 0.3106682300567627}, {'id': 256, 'seek': 198372, 'start': 1983.72, 'end': 2000.2, 'text': ' going wrong there? Why does it change the value of C?', 'tokens': [50364, 516, 2085, 456, 30, 1545, 775, 309, 1319, 264, 2158, 295, 383, 30, 51188], 'temperature': 0.0, 'avg_logprob': -0.26747316122055054, 'compression_ratio': 0.9298245614035088, 'no_speech_prob': 0.9656030535697937}, {'id': 257, 'seek': 201372, 'start': 2013.72, 'end': 2027.0, 'text': ' Excellent. So, I think the class almost got the idea right. So, it was exactly that business what', 'tokens': [50364, 16723, 13, 407, 11, 286, 519, 264, 1508, 1920, 658, 264, 1558, 558, 13, 407, 11, 309, 390, 2293, 300, 1606, 437, 51028], 'temperature': 0.0, 'avg_logprob': -0.1997456037081205, 'compression_ratio': 1.680473372781065, 'no_speech_prob': 0.1683141589164734}, {'id': 258, 'seek': 201372, 'start': 2027.0, 'end': 2031.92, 'text': ' you said. So, essentially what was happening is there was this variable this array sitting here', 'tokens': [51028, 291, 848, 13, 407, 11, 4476, 437, 390, 2737, 307, 456, 390, 341, 7006, 341, 10225, 3798, 510, 51274], 'temperature': 0.0, 'avg_logprob': -0.1997456037081205, 'compression_ratio': 1.680473372781065, 'no_speech_prob': 0.1683141589164734}, {'id': 259, 'seek': 201372, 'start': 2031.92, 'end': 2041.72, 'text': ' and the before the array the variable C was stored right and essentially what this guy did', 'tokens': [51274, 293, 264, 949, 264, 10225, 264, 7006, 383, 390, 12187, 558, 293, 4476, 437, 341, 2146, 630, 51764], 'temperature': 0.0, 'avg_logprob': -0.1997456037081205, 'compression_ratio': 1.680473372781065, 'no_speech_prob': 0.1683141589164734}, {'id': 260, 'seek': 204172, 'start': 2041.72, 'end': 2048.56, 'text': ' was whenever it had to it ended up the computation was such that it ended up computing array minus', 'tokens': [50364, 390, 5699, 309, 632, 281, 309, 4590, 493, 264, 24903, 390, 1270, 300, 309, 4590, 493, 15866, 10225, 3175, 50706], 'temperature': 0.0, 'avg_logprob': -0.1344635768603253, 'compression_ratio': 1.807511737089202, 'no_speech_prob': 0.06539832800626755}, {'id': 261, 'seek': 204172, 'start': 2048.56, 'end': 2055.88, 'text': ' 1. So, whenever it so C there is no check on the bounds of an array it does not check if you are', 'tokens': [50706, 502, 13, 407, 11, 5699, 309, 370, 383, 456, 307, 572, 1520, 322, 264, 29905, 295, 364, 10225, 309, 775, 406, 1520, 498, 291, 366, 51072], 'temperature': 0.0, 'avg_logprob': -0.1344635768603253, 'compression_ratio': 1.807511737089202, 'no_speech_prob': 0.06539832800626755}, {'id': 262, 'seek': 204172, 'start': 2055.88, 'end': 2062.68, 'text': ' crossing the bound of an array. So, it simply takes the base address and adds the index to it', 'tokens': [51072, 14712, 264, 5472, 295, 364, 10225, 13, 407, 11, 309, 2935, 2516, 264, 3096, 2985, 293, 10860, 264, 8186, 281, 309, 51412], 'temperature': 0.0, 'avg_logprob': -0.1344635768603253, 'compression_ratio': 1.807511737089202, 'no_speech_prob': 0.06539832800626755}, {'id': 263, 'seek': 204172, 'start': 2062.68, 'end': 2071.36, 'text': ' whatever is the index value multiplied with the size of the base type right that is exactly the', 'tokens': [51412, 2035, 307, 264, 8186, 2158, 17207, 365, 264, 2744, 295, 264, 3096, 2010, 558, 300, 307, 2293, 264, 51846], 'temperature': 0.0, 'avg_logprob': -0.1344635768603253, 'compression_ratio': 1.807511737089202, 'no_speech_prob': 0.06539832800626755}, {'id': 264, 'seek': 207136, 'start': 2071.36, 'end': 2076.92, 'text': ' computation that C does and dereferences this value. So, in this case it looked at the base', 'tokens': [50364, 24903, 300, 383, 775, 293, 15969, 612, 2667, 341, 2158, 13, 407, 11, 294, 341, 1389, 309, 2956, 412, 264, 3096, 50642], 'temperature': 0.0, 'avg_logprob': -0.1707439676920573, 'compression_ratio': 1.5604395604395604, 'no_speech_prob': 0.008052559569478035}, {'id': 265, 'seek': 207136, 'start': 2076.92, 'end': 2088.2400000000002, 'text': ' address was array it did a minus 1 it reached C and it overrode that value and as you said in GCC', 'tokens': [50642, 2985, 390, 10225, 309, 630, 257, 3175, 502, 309, 6488, 383, 293, 309, 670, 340, 1479, 300, 2158, 293, 382, 291, 848, 294, 460, 11717, 51208], 'temperature': 0.0, 'avg_logprob': -0.1707439676920573, 'compression_ratio': 1.5604395604395604, 'no_speech_prob': 0.008052559569478035}, {'id': 266, 'seek': 207136, 'start': 2088.2400000000002, 'end': 2094.92, 'text': ' it ends up putting I here in Clang it ends up putting C here or the other way around whichever', 'tokens': [51208, 309, 5314, 493, 3372, 286, 510, 294, 2033, 656, 309, 5314, 493, 3372, 383, 510, 420, 264, 661, 636, 926, 24123, 51542], 'temperature': 0.0, 'avg_logprob': -0.1707439676920573, 'compression_ratio': 1.5604395604395604, 'no_speech_prob': 0.008052559569478035}, {'id': 267, 'seek': 209492, 'start': 2094.92, 'end': 2110.48, 'text': ' is the yes yes. So, because in Clang C gets stored here in GCC I get stored here. So,', 'tokens': [50364, 307, 264, 2086, 2086, 13, 407, 11, 570, 294, 2033, 656, 383, 2170, 12187, 510, 294, 460, 11717, 286, 483, 12187, 510, 13, 407, 11, 51142], 'temperature': 0.0, 'avg_logprob': -0.1625234285990397, 'compression_ratio': 1.3953488372093024, 'no_speech_prob': 0.05326315760612488}, {'id': 268, 'seek': 209492, 'start': 2110.48, 'end': 2119.8, 'text': ' the memory layout which means that which variable will come where depends on the compiler. The', 'tokens': [51142, 264, 4675, 13333, 597, 1355, 300, 597, 7006, 486, 808, 689, 5946, 322, 264, 31958, 13, 440, 51608], 'temperature': 0.0, 'avg_logprob': -0.1625234285990397, 'compression_ratio': 1.3953488372093024, 'no_speech_prob': 0.05326315760612488}, {'id': 269, 'seek': 211980, 'start': 2119.8, 'end': 2125.4, 'text': ' compiler does not guarantee that I will store things in a certain way it is completely up to', 'tokens': [50364, 31958, 775, 406, 10815, 300, 286, 486, 3531, 721, 294, 257, 1629, 636, 309, 307, 2584, 493, 281, 50644], 'temperature': 0.0, 'avg_logprob': -0.13348398052278113, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.035099342465400696}, {'id': 270, 'seek': 211980, 'start': 2125.4, 'end': 2135.44, 'text': ' the compiler to swap things around as it wants right. So, the example showed you two things one', 'tokens': [50644, 264, 31958, 281, 18135, 721, 926, 382, 309, 2738, 558, 13, 407, 11, 264, 1365, 4712, 291, 732, 721, 472, 51146], 'temperature': 0.0, 'avg_logprob': -0.13348398052278113, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.035099342465400696}, {'id': 271, 'seek': 211980, 'start': 2135.44, 'end': 2143.6000000000004, 'text': ' is that buffer overflow is dangerous and these errors are extremely difficult to catch because', 'tokens': [51146, 307, 300, 21762, 37772, 307, 5795, 293, 613, 13603, 366, 4664, 2252, 281, 3745, 570, 51554], 'temperature': 0.0, 'avg_logprob': -0.13348398052278113, 'compression_ratio': 1.5722222222222222, 'no_speech_prob': 0.035099342465400696}, {'id': 272, 'seek': 214360, 'start': 2143.6, 'end': 2149.88, 'text': ' the bug was not in array the bug was in the error was in the value of C which has nothing', 'tokens': [50364, 264, 7426, 390, 406, 294, 10225, 264, 7426, 390, 294, 264, 6713, 390, 294, 264, 2158, 295, 383, 597, 575, 1825, 50678], 'temperature': 0.0, 'avg_logprob': -0.16048178142971462, 'compression_ratio': 1.819047619047619, 'no_speech_prob': 0.2274671196937561}, {'id': 273, 'seek': 214360, 'start': 2149.88, 'end': 2156.44, 'text': ' to do with array at all. The array initialization what happened never got even used anywhere and', 'tokens': [50678, 281, 360, 365, 10225, 412, 439, 13, 440, 10225, 5883, 2144, 437, 2011, 1128, 658, 754, 1143, 4992, 293, 51006], 'temperature': 0.0, 'avg_logprob': -0.16048178142971462, 'compression_ratio': 1.819047619047619, 'no_speech_prob': 0.2274671196937561}, {'id': 274, 'seek': 214360, 'start': 2156.44, 'end': 2163.2799999999997, 'text': ' whatever was used to compute the final value was C and you see a wrong value in C and you try to', 'tokens': [51006, 2035, 390, 1143, 281, 14722, 264, 2572, 2158, 390, 383, 293, 291, 536, 257, 2085, 2158, 294, 383, 293, 291, 853, 281, 51348], 'temperature': 0.0, 'avg_logprob': -0.16048178142971462, 'compression_ratio': 1.819047619047619, 'no_speech_prob': 0.2274671196937561}, {'id': 275, 'seek': 214360, 'start': 2163.2799999999997, 'end': 2169.36, 'text': ' debug the call chain of the dependencies of C and you will not find anything there because nothing', 'tokens': [51348, 24083, 264, 818, 5021, 295, 264, 36606, 295, 383, 293, 291, 486, 406, 915, 1340, 456, 570, 1825, 51652], 'temperature': 0.0, 'avg_logprob': -0.16048178142971462, 'compression_ratio': 1.819047619047619, 'no_speech_prob': 0.2274671196937561}, {'id': 276, 'seek': 216936, 'start': 2169.36, 'end': 2177.28, 'text': ' is happening anywhere right. So, buffer flow flows are very difficult to debug because it is', 'tokens': [50364, 307, 2737, 4992, 558, 13, 407, 11, 21762, 3095, 12867, 366, 588, 2252, 281, 24083, 570, 309, 307, 50760], 'temperature': 0.0, 'avg_logprob': -0.15492416620254518, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.036167170852422714}, {'id': 277, 'seek': 216936, 'start': 2177.28, 'end': 2182.6400000000003, 'text': ' interference between like different memory addresses it is not that that something wrong', 'tokens': [50760, 24497, 1296, 411, 819, 4675, 16862, 309, 307, 406, 300, 300, 746, 2085, 51028], 'temperature': 0.0, 'avg_logprob': -0.15492416620254518, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.036167170852422714}, {'id': 278, 'seek': 216936, 'start': 2182.6400000000003, 'end': 2188.56, 'text': ' is happening to that variable that I can easily detect that is one thing. Second thing is that', 'tokens': [51028, 307, 2737, 281, 300, 7006, 300, 286, 393, 3612, 5531, 300, 307, 472, 551, 13, 5736, 551, 307, 300, 51324], 'temperature': 0.0, 'avg_logprob': -0.15492416620254518, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.036167170852422714}, {'id': 279, 'seek': 216936, 'start': 2188.56, 'end': 2196.84, 'text': ' do not trust the memory layout of a compiler it is not that a compiler will layout memory in a', 'tokens': [51324, 360, 406, 3361, 264, 4675, 13333, 295, 257, 31958, 309, 307, 406, 300, 257, 31958, 486, 13333, 4675, 294, 257, 51738], 'temperature': 0.0, 'avg_logprob': -0.15492416620254518, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.036167170852422714}, {'id': 280, 'seek': 219684, 'start': 2196.84, 'end': 2203.08, 'text': ' certain order never trust that never write your code assuming that right. So, in certain cases', 'tokens': [50364, 1629, 1668, 1128, 3361, 300, 1128, 2464, 428, 3089, 11926, 300, 558, 13, 407, 11, 294, 1629, 3331, 50676], 'temperature': 0.0, 'avg_logprob': -0.1518720245361328, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.11252293735742569}, {'id': 281, 'seek': 219684, 'start': 2203.08, 'end': 2209.7200000000003, 'text': ' for like very seasoned programmers often use such assumptions but then they know what can happen', 'tokens': [50676, 337, 411, 588, 30111, 41504, 2049, 764, 1270, 17695, 457, 550, 436, 458, 437, 393, 1051, 51008], 'temperature': 0.0, 'avg_logprob': -0.1518720245361328, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.11252293735742569}, {'id': 282, 'seek': 219684, 'start': 2209.7200000000003, 'end': 2216.28, 'text': ' where but otherwise do not make such assumptions because a compiler is free to put allocate memory', 'tokens': [51008, 689, 457, 5911, 360, 406, 652, 1270, 17695, 570, 257, 31958, 307, 1737, 281, 829, 35713, 4675, 51336], 'temperature': 0.0, 'avg_logprob': -0.1518720245361328, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.11252293735742569}, {'id': 283, 'seek': 219684, 'start': 2216.28, 'end': 2221.6400000000003, 'text': ' any way it wants. In fact, there are memory optimizations which actually say key how should', 'tokens': [51336, 604, 636, 309, 2738, 13, 682, 1186, 11, 456, 366, 4675, 5028, 14455, 597, 767, 584, 2141, 577, 820, 51604], 'temperature': 0.0, 'avg_logprob': -0.1518720245361328, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.11252293735742569}, {'id': 284, 'seek': 219684, 'start': 2221.6400000000003, 'end': 2225.8, 'text': ' I allocate memory which will give me the best performance right. So, the compiler the language', 'tokens': [51604, 286, 35713, 4675, 597, 486, 976, 385, 264, 1151, 3389, 558, 13, 407, 11, 264, 31958, 264, 2856, 51812], 'temperature': 0.0, 'avg_logprob': -0.1518720245361328, 'compression_ratio': 1.7666666666666666, 'no_speech_prob': 0.11252293735742569}, {'id': 285, 'seek': 222580, 'start': 2225.8, 'end': 2232.84, 'text': ' gives the compiler full freedom to allocate memory in any way it wants right. So, the memory layout', 'tokens': [50364, 2709, 264, 31958, 1577, 5645, 281, 35713, 4675, 294, 604, 636, 309, 2738, 558, 13, 407, 11, 264, 4675, 13333, 50716], 'temperature': 0.0, 'avg_logprob': -0.20384478569030762, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.002469676546752453}, {'id': 286, 'seek': 222580, 'start': 2232.84, 'end': 2238.1200000000003, 'text': ' is completely up to the compiler do not trust that and it differs so that is why it was differing', 'tokens': [50716, 307, 2584, 493, 281, 264, 31958, 360, 406, 3361, 300, 293, 309, 37761, 370, 300, 307, 983, 309, 390, 743, 278, 50980], 'temperature': 0.0, 'avg_logprob': -0.20384478569030762, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.002469676546752453}, {'id': 287, 'seek': 222580, 'start': 2238.1200000000003, 'end': 2242.84, 'text': ' across compilers GCC and Clang were both showing different results and it is none of their faults', 'tokens': [50980, 2108, 715, 388, 433, 460, 11717, 293, 2033, 656, 645, 1293, 4099, 819, 3542, 293, 309, 307, 6022, 295, 641, 36090, 51216], 'temperature': 0.0, 'avg_logprob': -0.20384478569030762, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.002469676546752453}, {'id': 288, 'seek': 222580, 'start': 2242.84, 'end': 2247.88, 'text': ' it is the fault was with the programmer the programmer gave wrong answer did the wrong', 'tokens': [51216, 309, 307, 264, 7441, 390, 365, 264, 32116, 264, 32116, 2729, 2085, 1867, 630, 264, 2085, 51468], 'temperature': 0.0, 'avg_logprob': -0.20384478569030762, 'compression_ratio': 1.7522935779816513, 'no_speech_prob': 0.002469676546752453}, {'id': 289, 'seek': 224788, 'start': 2247.88, 'end': 2256.04, 'text': ' computation. So, now what I want to do is I want to detect such overflows buffer overflows and', 'tokens': [50364, 24903, 13, 407, 11, 586, 437, 286, 528, 281, 360, 307, 286, 528, 281, 5531, 1270, 670, 33229, 21762, 670, 33229, 293, 50772], 'temperature': 0.0, 'avg_logprob': -0.2273780059814453, 'compression_ratio': 1.7023809523809523, 'no_speech_prob': 0.36905282735824585}, {'id': 290, 'seek': 224788, 'start': 2256.04, 'end': 2269.4, 'text': ' let us say I assume that it is an overflow by only one more word not more than one word. So,', 'tokens': [50772, 718, 505, 584, 286, 6552, 300, 309, 307, 364, 37772, 538, 787, 472, 544, 1349, 406, 544, 813, 472, 1349, 13, 407, 11, 51440], 'temperature': 0.0, 'avg_logprob': -0.2273780059814453, 'compression_ratio': 1.7023809523809523, 'no_speech_prob': 0.36905282735824585}, {'id': 291, 'seek': 224788, 'start': 2269.4, 'end': 2276.2400000000002, 'text': ' overflow can only happen for I will I can end up accessing a minus 1 but I will not access a minus', 'tokens': [51440, 37772, 393, 787, 1051, 337, 286, 486, 286, 393, 917, 493, 26440, 257, 3175, 502, 457, 286, 486, 406, 2105, 257, 3175, 51782], 'temperature': 0.0, 'avg_logprob': -0.2273780059814453, 'compression_ratio': 1.7023809523809523, 'no_speech_prob': 0.36905282735824585}, {'id': 292, 'seek': 227624, 'start': 2276.24, 'end': 2282.7999999999997, 'text': ' 2 like I cannot make that bigger blender like a small off by 1 errors are very common errors', 'tokens': [50364, 568, 411, 286, 2644, 652, 300, 3801, 24564, 411, 257, 1359, 766, 538, 502, 13603, 366, 588, 2689, 13603, 50692], 'temperature': 0.0, 'avg_logprob': -0.12025189399719238, 'compression_ratio': 1.9233870967741935, 'no_speech_prob': 0.059741951525211334}, {'id': 293, 'seek': 227624, 'start': 2283.52, 'end': 2287.6, 'text': ' right lot of times I mean instead of less than you put a less than equal to right such things', 'tokens': [50728, 558, 688, 295, 1413, 286, 914, 2602, 295, 1570, 813, 291, 829, 257, 1570, 813, 2681, 281, 558, 1270, 721, 50932], 'temperature': 0.0, 'avg_logprob': -0.12025189399719238, 'compression_ratio': 1.9233870967741935, 'no_speech_prob': 0.059741951525211334}, {'id': 294, 'seek': 227624, 'start': 2287.6, 'end': 2293.2, 'text': ' often happen right I mean so these off by 1 errors are very common. So, let us say if I do', 'tokens': [50932, 2049, 1051, 558, 286, 914, 370, 613, 766, 538, 502, 13603, 366, 588, 2689, 13, 407, 11, 718, 505, 584, 498, 286, 360, 51212], 'temperature': 0.0, 'avg_logprob': -0.12025189399719238, 'compression_ratio': 1.9233870967741935, 'no_speech_prob': 0.059741951525211334}, {'id': 295, 'seek': 227624, 'start': 2293.8399999999997, 'end': 2299.12, 'text': ' create a problem I will create a problem by only one word but I will not create a problem of more', 'tokens': [51244, 1884, 257, 1154, 286, 486, 1884, 257, 1154, 538, 787, 472, 1349, 457, 286, 486, 406, 1884, 257, 1154, 295, 544, 51508], 'temperature': 0.0, 'avg_logprob': -0.12025189399719238, 'compression_ratio': 1.9233870967741935, 'no_speech_prob': 0.059741951525211334}, {'id': 296, 'seek': 227624, 'start': 2299.12, 'end': 2305.7599999999998, 'text': ' than one word. So, let us just simplify our case by taking this assumption. So, under this assumption', 'tokens': [51508, 813, 472, 1349, 13, 407, 11, 718, 505, 445, 20460, 527, 1389, 538, 1940, 341, 15302, 13, 407, 11, 833, 341, 15302, 51840], 'temperature': 0.0, 'avg_logprob': -0.12025189399719238, 'compression_ratio': 1.9233870967741935, 'no_speech_prob': 0.059741951525211334}, {'id': 297, 'seek': 230624, 'start': 2306.24, 'end': 2318.0, 'text': ' how can I write a dynamic analysis which can detect memory overflows buffer overflows any ideas.', 'tokens': [50380, 577, 393, 286, 2464, 257, 8546, 5215, 597, 393, 5531, 4675, 670, 33229, 21762, 670, 33229, 604, 3487, 13, 50952], 'temperature': 0.0, 'avg_logprob': -0.2526589957150546, 'compression_ratio': 1.170731707317073, 'no_speech_prob': 0.04751134291291237}, {'id': 298, 'seek': 233624, 'start': 2336.24, 'end': 2359.04, 'text': ' How would I know what are valid addresses that like keeping track of water value addresses needs', 'tokens': [50364, 1012, 576, 286, 458, 437, 366, 7363, 16862, 300, 411, 5145, 2837, 295, 1281, 2158, 16862, 2203, 51504], 'temperature': 0.0, 'avg_logprob': -0.37888476962134954, 'compression_ratio': 1.2307692307692308, 'no_speech_prob': 0.017083803191781044}, {'id': 299, 'seek': 235904, 'start': 2359.68, 'end': 2366.8, 'text': ' almost as much space as you are already using you see what I am saying right for so you have', 'tokens': [50396, 1920, 382, 709, 1901, 382, 291, 366, 1217, 1228, 291, 536, 437, 286, 669, 1566, 558, 337, 370, 291, 362, 50752], 'temperature': 0.0, 'avg_logprob': -0.14307543936740147, 'compression_ratio': 1.7149122807017543, 'no_speech_prob': 0.1856599748134613}, {'id': 300, 'seek': 235904, 'start': 2366.8, 'end': 2370.56, 'text': ' to keep some sort of shadow memory. So, for every memory here you have to remember that is it valid', 'tokens': [50752, 281, 1066, 512, 1333, 295, 8576, 4675, 13, 407, 11, 337, 633, 4675, 510, 291, 362, 281, 1604, 300, 307, 309, 7363, 50940], 'temperature': 0.0, 'avg_logprob': -0.14307543936740147, 'compression_ratio': 1.7149122807017543, 'no_speech_prob': 0.1856599748134613}, {'id': 301, 'seek': 235904, 'start': 2370.56, 'end': 2380.88, 'text': ' or not valid excellent idea excellent idea because I have this assumption that I will probably at', 'tokens': [50940, 420, 406, 7363, 7103, 1558, 7103, 1558, 570, 286, 362, 341, 15302, 300, 286, 486, 1391, 412, 51456], 'temperature': 0.0, 'avg_logprob': -0.14307543936740147, 'compression_ratio': 1.7149122807017543, 'no_speech_prob': 0.1856599748134613}, {'id': 302, 'seek': 235904, 'start': 2380.88, 'end': 2386.72, 'text': ' most overflow by one word what I can do is instead of laying out things one after the other whenever', 'tokens': [51456, 881, 37772, 538, 472, 1349, 437, 286, 393, 360, 307, 2602, 295, 14903, 484, 721, 472, 934, 264, 661, 5699, 51748], 'temperature': 0.0, 'avg_logprob': -0.14307543936740147, 'compression_ratio': 1.7149122807017543, 'no_speech_prob': 0.1856599748134613}, {'id': 303, 'seek': 238672, 'start': 2386.72, 'end': 2392.72, 'text': ' I am laying out one word instead of laying out one word I will put a buffer here and put a buffer', 'tokens': [50364, 286, 669, 14903, 484, 472, 1349, 2602, 295, 14903, 484, 472, 1349, 286, 486, 829, 257, 21762, 510, 293, 829, 257, 21762, 50664], 'temperature': 0.0, 'avg_logprob': -0.09331274032592773, 'compression_ratio': 1.8412698412698412, 'no_speech_prob': 0.00370179396122694}, {'id': 304, 'seek': 238672, 'start': 2392.72, 'end': 2397.68, 'text': ' here. Buffer means another extra word here and an extra word here.', 'tokens': [50664, 510, 13, 20254, 260, 1355, 1071, 2857, 1349, 510, 293, 364, 2857, 1349, 510, 13, 50912], 'temperature': 0.0, 'avg_logprob': -0.09331274032592773, 'compression_ratio': 1.8412698412698412, 'no_speech_prob': 0.00370179396122694}, {'id': 305, 'seek': 238672, 'start': 2402.48, 'end': 2406.48, 'text': ' Oh yeah you have to do it you are doing extra computation but this is not that much as', 'tokens': [51152, 876, 1338, 291, 362, 281, 360, 309, 291, 366, 884, 2857, 24903, 457, 341, 307, 406, 300, 709, 382, 51352], 'temperature': 0.0, 'avg_logprob': -0.09331274032592773, 'compression_ratio': 1.8412698412698412, 'no_speech_prob': 0.00370179396122694}, {'id': 306, 'seek': 238672, 'start': 2407.04, 'end': 2414.0, 'text': ' like putting a like completely duplicating your full memory you have to use extra memory because', 'tokens': [51380, 411, 3372, 257, 411, 2584, 17154, 990, 428, 1577, 4675, 291, 362, 281, 764, 2857, 4675, 570, 51728], 'temperature': 0.0, 'avg_logprob': -0.09331274032592773, 'compression_ratio': 1.8412698412698412, 'no_speech_prob': 0.00370179396122694}, {'id': 307, 'seek': 241400, 'start': 2414.0, 'end': 2418.64, 'text': ' you are doing extra computation right even here we had this extra memory right we had to maintain', 'tokens': [50364, 291, 366, 884, 2857, 24903, 558, 754, 510, 321, 632, 341, 2857, 4675, 558, 321, 632, 281, 6909, 50596], 'temperature': 0.0, 'avg_logprob': -0.09122132731008005, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.003940022550523281}, {'id': 308, 'seek': 241400, 'start': 2418.64, 'end': 2428.56, 'text': ' this table. Do you see this so we put a buffer a word before and after every so before the array', 'tokens': [50596, 341, 3199, 13, 1144, 291, 536, 341, 370, 321, 829, 257, 21762, 257, 1349, 949, 293, 934, 633, 370, 949, 264, 10225, 51092], 'temperature': 0.0, 'avg_logprob': -0.09122132731008005, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.003940022550523281}, {'id': 309, 'seek': 241400, 'start': 2428.56, 'end': 2434.96, 'text': ' also we will put one array one word before the array and one word after the array maybe we can', 'tokens': [51092, 611, 321, 486, 829, 472, 10225, 472, 1349, 949, 264, 10225, 293, 472, 1349, 934, 264, 10225, 1310, 321, 393, 51412], 'temperature': 0.0, 'avg_logprob': -0.09122132731008005, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.003940022550523281}, {'id': 310, 'seek': 241400, 'start': 2434.96, 'end': 2439.84, 'text': ' just do it for arrays just to save memory let us say other variables I do not care overflows can', 'tokens': [51412, 445, 360, 309, 337, 41011, 445, 281, 3155, 4675, 718, 505, 584, 661, 9102, 286, 360, 406, 1127, 670, 33229, 393, 51656], 'temperature': 0.0, 'avg_logprob': -0.09122132731008005, 'compression_ratio': 1.8293838862559242, 'no_speech_prob': 0.003940022550523281}, {'id': 311, 'seek': 243984, 'start': 2439.84, 'end': 2443.84, 'text': ' only happen on arrays I will just do it for arrays so before every array access I put a', 'tokens': [50364, 787, 1051, 322, 41011, 286, 486, 445, 360, 309, 337, 41011, 370, 949, 633, 10225, 2105, 286, 829, 257, 50564], 'temperature': 0.0, 'avg_logprob': -0.16254711151123047, 'compression_ratio': 1.5118110236220472, 'no_speech_prob': 0.07773680239915848}, {'id': 312, 'seek': 243984, 'start': 2445.1200000000003, 'end': 2450.08, 'text': ' word after every array access also I put a word. Now what', 'tokens': [50628, 1349, 934, 633, 10225, 2105, 611, 286, 829, 257, 1349, 13, 823, 437, 50876], 'temperature': 0.0, 'avg_logprob': -0.16254711151123047, 'compression_ratio': 1.5118110236220472, 'no_speech_prob': 0.07773680239915848}, {'id': 313, 'seek': 243984, 'start': 2456.0, 'end': 2457.6800000000003, 'text': ' I want to get a runtime error when I hit that.', 'tokens': [51172, 286, 528, 281, 483, 257, 34474, 6713, 562, 286, 2045, 300, 13, 51256], 'temperature': 0.0, 'avg_logprob': -0.16254711151123047, 'compression_ratio': 1.5118110236220472, 'no_speech_prob': 0.07773680239915848}, {'id': 314, 'seek': 245768, 'start': 2457.68, 'end': 2475.9199999999996, 'text': ' Which part the hash part but so you have to save very good idea so you have to save', 'tokens': [50364, 3013, 644, 264, 22019, 644, 457, 370, 291, 362, 281, 3155, 588, 665, 1558, 370, 291, 362, 281, 3155, 51276], 'temperature': 0.0, 'avg_logprob': -0.20342199007670084, 'compression_ratio': 1.448, 'no_speech_prob': 0.05113143473863602}, {'id': 315, 'seek': 245768, 'start': 2475.9199999999996, 'end': 2486.3199999999997, 'text': ' save something in this hash part. Excellent I can put some weird bit pattern let us say 1 1 0 0 1', 'tokens': [51276, 3155, 746, 294, 341, 22019, 644, 13, 16723, 286, 393, 829, 512, 3657, 857, 5102, 718, 505, 584, 502, 502, 1958, 1958, 502, 51796], 'temperature': 0.0, 'avg_logprob': -0.20342199007670084, 'compression_ratio': 1.448, 'no_speech_prob': 0.05113143473863602}, {'id': 316, 'seek': 248632, 'start': 2486.32, 'end': 2492.48, 'text': ' 1 0 0 1 1 0 0 1 1 0 0 some weird thing I write there so all these guys I write the same business', 'tokens': [50364, 502, 1958, 1958, 502, 502, 1958, 1958, 502, 502, 1958, 1958, 512, 3657, 551, 286, 2464, 456, 370, 439, 613, 1074, 286, 2464, 264, 912, 1606, 50672], 'temperature': 0.0, 'avg_logprob': -0.14281535829816547, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.0011635699775069952}, {'id': 317, 'seek': 248632, 'start': 2496.32, 'end': 2504.7200000000003, 'text': ' right I write the same bit string in all these locations right so there is a 1 by', 'tokens': [50864, 558, 286, 2464, 264, 912, 857, 6798, 294, 439, 613, 9253, 558, 370, 456, 307, 257, 502, 538, 51284], 'temperature': 0.0, 'avg_logprob': -0.14281535829816547, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.0011635699775069952}, {'id': 318, 'seek': 248632, 'start': 2504.7200000000003, 'end': 2509.6000000000004, 'text': ' 2 to the power 32 chance that I will hit that accidentally but I will take the chance', 'tokens': [51284, 568, 281, 264, 1347, 8858, 2931, 300, 286, 486, 2045, 300, 15715, 457, 286, 486, 747, 264, 2931, 51528], 'temperature': 0.0, 'avg_logprob': -0.14281535829816547, 'compression_ratio': 1.7959183673469388, 'no_speech_prob': 0.0011635699775069952}, {'id': 319, 'seek': 250960, 'start': 2509.6, 'end': 2522.96, 'text': ' it is a large chance but still I will take it right so I will find so I will store all of them', 'tokens': [50364, 309, 307, 257, 2416, 2931, 457, 920, 286, 486, 747, 309, 558, 370, 286, 486, 915, 370, 286, 486, 3531, 439, 295, 552, 51032], 'temperature': 0.0, 'avg_logprob': -0.33919439560327774, 'compression_ratio': 1.5988700564971752, 'no_speech_prob': 0.012572289444506168}, {'id': 320, 'seek': 250960, 'start': 2522.96, 'end': 2532.72, 'text': ' with this and then how do I what extra code do I add tricatch to give me more simpler answer', 'tokens': [51032, 365, 341, 293, 550, 577, 360, 286, 437, 2857, 3089, 360, 286, 909, 504, 299, 852, 281, 976, 385, 544, 18587, 1867, 51520], 'temperature': 0.0, 'avg_logprob': -0.33919439560327774, 'compression_ratio': 1.5988700564971752, 'no_speech_prob': 0.012572289444506168}, {'id': 321, 'seek': 250960, 'start': 2532.72, 'end': 2537.12, 'text': ' so because I will go to instrument it you have tricatch I need to put it in LNB bytecode right.', 'tokens': [51520, 370, 570, 286, 486, 352, 281, 7198, 309, 291, 362, 504, 299, 852, 286, 643, 281, 829, 309, 294, 441, 45, 33, 40846, 22332, 558, 13, 51740], 'temperature': 0.0, 'avg_logprob': -0.33919439560327774, 'compression_ratio': 1.5988700564971752, 'no_speech_prob': 0.012572289444506168}, {'id': 322, 'seek': 253960, 'start': 2540.56, 'end': 2543.04, 'text': ' So whatever you tell you have to implement it in LNB bytecode.', 'tokens': [50412, 407, 2035, 291, 980, 291, 362, 281, 4445, 309, 294, 441, 45, 33, 40846, 22332, 13, 50536], 'temperature': 0.0, 'avg_logprob': -0.175566208071825, 'compression_ratio': 1.5837837837837838, 'no_speech_prob': 0.01717636175453663}, {'id': 323, 'seek': 253960, 'start': 2546.88, 'end': 2550.3199999999997, 'text': ' Which value where so what exactly how will I exactly implement this', 'tokens': [50728, 3013, 2158, 689, 370, 437, 2293, 577, 486, 286, 2293, 4445, 341, 50900], 'temperature': 0.0, 'avg_logprob': -0.175566208071825, 'compression_ratio': 1.5837837837837838, 'no_speech_prob': 0.01717636175453663}, {'id': 324, 'seek': 253960, 'start': 2555.36, 'end': 2559.52, 'text': ' but A of I may not be the right thing because A of I you will not get A of I in LNB', 'tokens': [51152, 457, 316, 295, 286, 815, 406, 312, 264, 558, 551, 570, 316, 295, 286, 291, 486, 406, 483, 316, 295, 286, 294, 441, 45, 33, 51360], 'temperature': 0.0, 'avg_logprob': -0.175566208071825, 'compression_ratio': 1.5837837837837838, 'no_speech_prob': 0.01717636175453663}, {'id': 325, 'seek': 253960, 'start': 2560.7999999999997, 'end': 2564.96, 'text': ' and moreover there can be other problems there can be a P is equal to A plus I', 'tokens': [51424, 293, 544, 3570, 456, 393, 312, 661, 2740, 456, 393, 312, 257, 430, 307, 2681, 281, 316, 1804, 286, 51632], 'temperature': 0.0, 'avg_logprob': -0.175566208071825, 'compression_ratio': 1.5837837837837838, 'no_speech_prob': 0.01717636175453663}, {'id': 326, 'seek': 256496, 'start': 2564.96, 'end': 2573.84, 'text': ' and you say star P star P is equal to 5 then what it may not look so neat.', 'tokens': [50364, 293, 291, 584, 3543, 430, 3543, 430, 307, 2681, 281, 1025, 550, 437, 309, 815, 406, 574, 370, 10654, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.32310606303967926, 'compression_ratio': 1.5746268656716418, 'no_speech_prob': 0.011472486890852451}, {'id': 327, 'seek': 256496, 'start': 2573.84, 'end': 2581.52, 'text': ' Before any dereference we will check the.', 'tokens': [50808, 4546, 604, 15969, 5158, 321, 486, 1520, 264, 13, 51192], 'temperature': 0.0, 'avg_logprob': -0.32310606303967926, 'compression_ratio': 1.5746268656716418, 'no_speech_prob': 0.011472486890852451}, {'id': 328, 'seek': 256496, 'start': 2581.52, 'end': 2590.8, 'text': ' Yes before every dereference you check so every time you get a dereference says some star P so', 'tokens': [51192, 1079, 949, 633, 15969, 5158, 291, 1520, 370, 633, 565, 291, 483, 257, 15969, 5158, 1619, 512, 3543, 430, 370, 51656], 'temperature': 0.0, 'avg_logprob': -0.32310606303967926, 'compression_ratio': 1.5746268656716418, 'no_speech_prob': 0.011472486890852451}, {'id': 329, 'seek': 259080, 'start': 2590.8, 'end': 2599.6800000000003, 'text': ' you check if star P is equal to equal to that special address that special character the special', 'tokens': [50364, 291, 1520, 498, 3543, 430, 307, 2681, 281, 2681, 281, 300, 2121, 2985, 300, 2121, 2517, 264, 2121, 50808], 'temperature': 0.0, 'avg_logprob': -0.1477748803925096, 'compression_ratio': 1.5526315789473684, 'no_speech_prob': 0.0077749695628881454}, {'id': 330, 'seek': 259080, 'start': 2600.8, 'end': 2603.92, 'text': ' the bit string that I put then flag error.', 'tokens': [50864, 264, 857, 6798, 300, 286, 829, 550, 7166, 6713, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.1477748803925096, 'compression_ratio': 1.5526315789473684, 'no_speech_prob': 0.0077749695628881454}, {'id': 331, 'seek': 259080, 'start': 2608.32, 'end': 2611.2000000000003, 'text': ' Else you do the star P and continue whatever you are doing.', 'tokens': [51240, 45472, 291, 360, 264, 3543, 430, 293, 2354, 2035, 291, 366, 884, 13, 51384], 'temperature': 0.0, 'avg_logprob': -0.1477748803925096, 'compression_ratio': 1.5526315789473684, 'no_speech_prob': 0.0077749695628881454}, {'id': 332, 'seek': 259080, 'start': 2616.1600000000003, 'end': 2619.6000000000004, 'text': ' Does it make sense completely clear.', 'tokens': [51632, 4402, 309, 652, 2020, 2584, 1850, 13, 51804], 'temperature': 0.0, 'avg_logprob': -0.1477748803925096, 'compression_ratio': 1.5526315789473684, 'no_speech_prob': 0.0077749695628881454}, {'id': 333, 'seek': 262080, 'start': 2620.8, 'end': 2634.0, 'text': ' You should not write those programs you should not write those programs', 'tokens': [50364, 509, 820, 406, 2464, 729, 4268, 291, 820, 406, 2464, 729, 4268, 51024], 'temperature': 0.0, 'avg_logprob': -0.22261278557054925, 'compression_ratio': 1.6436781609195403, 'no_speech_prob': 0.007931101135909557}, {'id': 334, 'seek': 262080, 'start': 2635.92, 'end': 2639.76, 'text': ' which uses A minus 1 to get updated please do not write those programs.', 'tokens': [51120, 597, 4960, 316, 3175, 502, 281, 483, 10588, 1767, 360, 406, 2464, 729, 4268, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.22261278557054925, 'compression_ratio': 1.6436781609195403, 'no_speech_prob': 0.007931101135909557}, {'id': 335, 'seek': 263976, 'start': 2639.76, 'end': 2643.44, 'text': ' I mean other variable which is stored at A plus 1.', 'tokens': [50364, 286, 914, 661, 7006, 597, 307, 12187, 412, 316, 1804, 502, 13, 50548], 'temperature': 0.0, 'avg_logprob': -0.2362559669896176, 'compression_ratio': 1.7083333333333333, 'no_speech_prob': 0.026812806725502014}, {'id': 336, 'seek': 263976, 'start': 2647.1200000000003, 'end': 2651.1200000000003, 'text': ' No first of all how do you know what variable gets stored at A minus 1.', 'tokens': [50732, 883, 700, 295, 439, 577, 360, 291, 458, 437, 7006, 2170, 12187, 412, 316, 3175, 502, 13, 50932], 'temperature': 0.0, 'avg_logprob': -0.2362559669896176, 'compression_ratio': 1.7083333333333333, 'no_speech_prob': 0.026812806725502014}, {'id': 337, 'seek': 263976, 'start': 2651.76, 'end': 2655.2000000000003, 'text': ' As I said it is completely up to the compiler to place anything at A minus 1.', 'tokens': [50964, 1018, 286, 848, 309, 307, 2584, 493, 281, 264, 31958, 281, 1081, 1340, 412, 316, 3175, 502, 13, 51136], 'temperature': 0.0, 'avg_logprob': -0.2362559669896176, 'compression_ratio': 1.7083333333333333, 'no_speech_prob': 0.026812806725502014}, {'id': 338, 'seek': 263976, 'start': 2655.2000000000003, 'end': 2659.1200000000003, 'text': ' A minus 1 is an address that you should not use you are not allowed to use that.', 'tokens': [51136, 316, 3175, 502, 307, 364, 2985, 300, 291, 820, 406, 764, 291, 366, 406, 4350, 281, 764, 300, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.2362559669896176, 'compression_ratio': 1.7083333333333333, 'no_speech_prob': 0.026812806725502014}, {'id': 339, 'seek': 263976, 'start': 2660.6400000000003, 'end': 2665.0400000000004, 'text': ' That is the first thing second thing is even even programmatically it is a bad practice', 'tokens': [51408, 663, 307, 264, 700, 551, 1150, 551, 307, 754, 754, 37648, 5030, 309, 307, 257, 1578, 3124, 51628], 'temperature': 0.0, 'avg_logprob': -0.2362559669896176, 'compression_ratio': 1.7083333333333333, 'no_speech_prob': 0.026812806725502014}, {'id': 340, 'seek': 266504, 'start': 2665.6, 'end': 2672.96, 'text': ' to like so the memories each memory symbol that use every variable that use is supposed to be', 'tokens': [50392, 281, 411, 370, 264, 8495, 1184, 4675, 5986, 300, 764, 633, 7006, 300, 764, 307, 3442, 281, 312, 50760], 'temperature': 0.0, 'avg_logprob': -0.2458464390522725, 'compression_ratio': 1.6185567010309279, 'no_speech_prob': 0.013682190328836441}, {'id': 341, 'seek': 266504, 'start': 2674.08, 'end': 2675.7599999999998, 'text': ' not dependent on anything else.', 'tokens': [50816, 406, 12334, 322, 1340, 1646, 13, 50900], 'temperature': 0.0, 'avg_logprob': -0.2458464390522725, 'compression_ratio': 1.6185567010309279, 'no_speech_prob': 0.013682190328836441}, {'id': 342, 'seek': 266504, 'start': 2677.44, 'end': 2683.04, 'text': ' Like address wise like x y z are three different variables you should not like if there is an', 'tokens': [50984, 1743, 2985, 10829, 411, 2031, 288, 710, 366, 1045, 819, 9102, 291, 820, 406, 411, 498, 456, 307, 364, 51264], 'temperature': 0.0, 'avg_logprob': -0.2458464390522725, 'compression_ratio': 1.6185567010309279, 'no_speech_prob': 0.013682190328836441}, {'id': 343, 'seek': 266504, 'start': 2683.04, 'end': 2694.08, 'text': ' array of 10 bytes and then there is a integer C. So I should never use like some location some', 'tokens': [51264, 10225, 295, 1266, 36088, 293, 550, 456, 307, 257, 24922, 383, 13, 407, 286, 820, 1128, 764, 411, 512, 4914, 512, 51816], 'temperature': 0.0, 'avg_logprob': -0.2458464390522725, 'compression_ratio': 1.6185567010309279, 'no_speech_prob': 0.013682190328836441}, {'id': 344, 'seek': 269408, 'start': 2694.08, 'end': 2698.0, 'text': ' operation on A to update C. I should not do that right.', 'tokens': [50364, 6916, 322, 316, 281, 5623, 383, 13, 286, 820, 406, 360, 300, 558, 13, 50560], 'temperature': 0.0, 'avg_logprob': -0.19269279333261344, 'compression_ratio': 1.6296296296296295, 'no_speech_prob': 0.001029257313348353}, {'id': 345, 'seek': 269408, 'start': 2698.0, 'end': 2703.2799999999997, 'text': ' I have C why not use C you want to set C is one set say C is one.', 'tokens': [50560, 286, 362, 383, 983, 406, 764, 383, 291, 528, 281, 992, 383, 307, 472, 992, 584, 383, 307, 472, 13, 50824], 'temperature': 0.0, 'avg_logprob': -0.19269279333261344, 'compression_ratio': 1.6296296296296295, 'no_speech_prob': 0.001029257313348353}, {'id': 346, 'seek': 269408, 'start': 2703.2799999999997, 'end': 2706.08, 'text': ' Why do you want to say A minus 1 as one right.', 'tokens': [50824, 1545, 360, 291, 528, 281, 584, 316, 3175, 502, 382, 472, 558, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.19269279333261344, 'compression_ratio': 1.6296296296296295, 'no_speech_prob': 0.001029257313348353}, {'id': 347, 'seek': 269408, 'start': 2706.08, 'end': 2721.84, 'text': ' So no no so this is only for the analysis in your actual code when you actually run the code or', 'tokens': [50964, 407, 572, 572, 370, 341, 307, 787, 337, 264, 5215, 294, 428, 3539, 3089, 562, 291, 767, 1190, 264, 3089, 420, 51752], 'temperature': 0.0, 'avg_logprob': -0.19269279333261344, 'compression_ratio': 1.6296296296296295, 'no_speech_prob': 0.001029257313348353}, {'id': 348, 'seek': 272184, 'start': 2721.84, 'end': 2726.4, 'text': ' when you actually deploy the code it will not have this instrumentation because this is expensive', 'tokens': [50364, 562, 291, 767, 7274, 264, 3089, 309, 486, 406, 362, 341, 7198, 399, 570, 341, 307, 5124, 50592], 'temperature': 0.0, 'avg_logprob': -0.11817544240217942, 'compression_ratio': 1.871244635193133, 'no_speech_prob': 0.00267047225497663}, {'id': 349, 'seek': 272184, 'start': 2726.4, 'end': 2733.2000000000003, 'text': ' right before every access every memory access I am doing a if check I am putting a check.', 'tokens': [50592, 558, 949, 633, 2105, 633, 4675, 2105, 286, 669, 884, 257, 498, 1520, 286, 669, 3372, 257, 1520, 13, 50932], 'temperature': 0.0, 'avg_logprob': -0.11817544240217942, 'compression_ratio': 1.871244635193133, 'no_speech_prob': 0.00267047225497663}, {'id': 350, 'seek': 272184, 'start': 2733.2000000000003, 'end': 2737.44, 'text': ' So that is lot of code I would not ship that product with so much code.', 'tokens': [50932, 407, 300, 307, 688, 295, 3089, 286, 576, 406, 5374, 300, 1674, 365, 370, 709, 3089, 13, 51144], 'temperature': 0.0, 'avg_logprob': -0.11817544240217942, 'compression_ratio': 1.871244635193133, 'no_speech_prob': 0.00267047225497663}, {'id': 351, 'seek': 272184, 'start': 2737.44, 'end': 2742.1600000000003, 'text': ' It is only to do the analysis it is only to do the analysis I use this extra', 'tokens': [51144, 467, 307, 787, 281, 360, 264, 5215, 309, 307, 787, 281, 360, 264, 5215, 286, 764, 341, 2857, 51380], 'temperature': 0.0, 'avg_logprob': -0.11817544240217942, 'compression_ratio': 1.871244635193133, 'no_speech_prob': 0.00267047225497663}, {'id': 352, 'seek': 272184, 'start': 2742.1600000000003, 'end': 2750.0, 'text': ' space and this extra instructions to say that let us try to let us see if I can trigger that fault.', 'tokens': [51380, 1901, 293, 341, 2857, 9415, 281, 584, 300, 718, 505, 853, 281, 718, 505, 536, 498, 286, 393, 7875, 300, 7441, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.11817544240217942, 'compression_ratio': 1.871244635193133, 'no_speech_prob': 0.00267047225497663}, {'id': 353, 'seek': 275184, 'start': 2752.4, 'end': 2768.08, 'text': ' Yes yes exactly so these problems can be on the stack this can be on the heap solution is are', 'tokens': [50392, 1079, 2086, 2293, 370, 613, 2740, 393, 312, 322, 264, 8630, 341, 393, 312, 322, 264, 33591, 3827, 307, 366, 51176], 'temperature': 0.0, 'avg_logprob': -0.15718931470598493, 'compression_ratio': 1.7911392405063291, 'no_speech_prob': 0.03214254975318909}, {'id': 354, 'seek': 275184, 'start': 2768.08, 'end': 2772.8, 'text': ' similar right if you have it on the heap what do you do whenever you do a malloc instead of', 'tokens': [51176, 2531, 558, 498, 291, 362, 309, 322, 264, 33591, 437, 360, 291, 360, 5699, 291, 360, 257, 16026, 905, 2602, 295, 51412], 'temperature': 0.0, 'avg_logprob': -0.15718931470598493, 'compression_ratio': 1.7911392405063291, 'no_speech_prob': 0.03214254975318909}, {'id': 355, 'seek': 275184, 'start': 2772.8, 'end': 2778.32, 'text': ' using the systems malloc you use your own version of malloc you have your version of malloc which', 'tokens': [51412, 1228, 264, 3652, 16026, 905, 291, 764, 428, 1065, 3037, 295, 16026, 905, 291, 362, 428, 3037, 295, 16026, 905, 597, 51688], 'temperature': 0.0, 'avg_logprob': -0.15718931470598493, 'compression_ratio': 1.7911392405063291, 'no_speech_prob': 0.03214254975318909}, {'id': 356, 'seek': 277832, 'start': 2778.32, 'end': 2785.2000000000003, 'text': ' puts this extra code extra locations before and after the malloc block right and your own free', 'tokens': [50364, 8137, 341, 2857, 3089, 2857, 9253, 949, 293, 934, 264, 16026, 905, 3461, 558, 293, 428, 1065, 1737, 50708], 'temperature': 0.0, 'avg_logprob': -0.12208403419045841, 'compression_ratio': 1.8169014084507042, 'no_speech_prob': 0.020280398428440094}, {'id': 357, 'seek': 277832, 'start': 2786.0, 'end': 2790.96, 'text': ' which will instead of saying whenever it says free a particular address it will say free minus', 'tokens': [50748, 597, 486, 2602, 295, 1566, 5699, 309, 1619, 1737, 257, 1729, 2985, 309, 486, 584, 1737, 3175, 50996], 'temperature': 0.0, 'avg_logprob': -0.12208403419045841, 'compression_ratio': 1.8169014084507042, 'no_speech_prob': 0.020280398428440094}, {'id': 358, 'seek': 277832, 'start': 2790.96, 'end': 2796.0800000000004, 'text': ' my address like whatever some are supposed to be so the user wanted this much buffer but you give', 'tokens': [50996, 452, 2985, 411, 2035, 512, 366, 3442, 281, 312, 370, 264, 4195, 1415, 341, 709, 21762, 457, 291, 976, 51252], 'temperature': 0.0, 'avg_logprob': -0.12208403419045841, 'compression_ratio': 1.8169014084507042, 'no_speech_prob': 0.020280398428440094}, {'id': 359, 'seek': 277832, 'start': 2796.0800000000004, 'end': 2802.1600000000003, 'text': ' it this much buffer this extra thing is yours and when the and but to the user you will return this', 'tokens': [51252, 309, 341, 709, 21762, 341, 2857, 551, 307, 6342, 293, 562, 264, 293, 457, 281, 264, 4195, 291, 486, 2736, 341, 51556], 'temperature': 0.0, 'avg_logprob': -0.12208403419045841, 'compression_ratio': 1.8169014084507042, 'no_speech_prob': 0.020280398428440094}, {'id': 360, 'seek': 280216, 'start': 2802.16, 'end': 2809.12, 'text': ' address user will not even know that there is nothing there right and whenever the user says', 'tokens': [50364, 2985, 4195, 486, 406, 754, 458, 300, 456, 307, 1825, 456, 558, 293, 5699, 264, 4195, 1619, 50712], 'temperature': 0.0, 'avg_logprob': -0.139910243278326, 'compression_ratio': 1.9623655913978495, 'no_speech_prob': 0.07984378933906555}, {'id': 361, 'seek': 280216, 'start': 2809.12, 'end': 2815.7599999999998, 'text': ' free of this you will go and say free of this so you will have your modified versions of the', 'tokens': [50712, 1737, 295, 341, 291, 486, 352, 293, 584, 1737, 295, 341, 370, 291, 486, 362, 428, 15873, 9606, 295, 264, 51044], 'temperature': 0.0, 'avg_logprob': -0.139910243278326, 'compression_ratio': 1.9623655913978495, 'no_speech_prob': 0.07984378933906555}, {'id': 362, 'seek': 280216, 'start': 2815.7599999999998, 'end': 2822.3999999999996, 'text': ' malloc and free calls and then you will you will for every memory access you will', 'tokens': [51044, 16026, 905, 293, 1737, 5498, 293, 550, 291, 486, 291, 486, 337, 633, 4675, 2105, 291, 486, 51376], 'temperature': 0.0, 'avg_logprob': -0.139910243278326, 'compression_ratio': 1.9623655913978495, 'no_speech_prob': 0.07984378933906555}, {'id': 363, 'seek': 280216, 'start': 2824.08, 'end': 2830.48, 'text': ' you will check it if it is it could be a error in this location it is one of these locations that', 'tokens': [51460, 291, 486, 1520, 309, 498, 309, 307, 309, 727, 312, 257, 6713, 294, 341, 4914, 309, 307, 472, 295, 613, 9253, 300, 51780], 'temperature': 0.0, 'avg_logprob': -0.139910243278326, 'compression_ratio': 1.9623655913978495, 'no_speech_prob': 0.07984378933906555}, {'id': 364, 'seek': 283048, 'start': 2830.48, 'end': 2841.68, 'text': ' can be faulty and if yes you trigger fault so all these memory checkers like address', 'tokens': [50364, 393, 312, 2050, 5773, 293, 498, 2086, 291, 7875, 7441, 370, 439, 613, 4675, 1520, 433, 411, 2985, 50924], 'temperature': 0.0, 'avg_logprob': -0.11669485322360335, 'compression_ratio': 1.5657142857142856, 'no_speech_prob': 0.00038943736581131816}, {'id': 365, 'seek': 283048, 'start': 2841.68, 'end': 2849.2, 'text': ' sanitizer or well grind mostly the technique is this they have more sophisticated algorithms', 'tokens': [50924, 47080, 420, 731, 16700, 5240, 264, 6532, 307, 341, 436, 362, 544, 16950, 14642, 51300], 'temperature': 0.0, 'avg_logprob': -0.11669485322360335, 'compression_ratio': 1.5657142857142856, 'no_speech_prob': 0.00038943736581131816}, {'id': 366, 'seek': 283048, 'start': 2849.2, 'end': 2854.48, 'text': ' they are which are much faster give you more information but the high level idea is sort of this', 'tokens': [51300, 436, 366, 597, 366, 709, 4663, 976, 291, 544, 1589, 457, 264, 1090, 1496, 1558, 307, 1333, 295, 341, 51564], 'temperature': 0.0, 'avg_logprob': -0.11669485322360335, 'compression_ratio': 1.5657142857142856, 'no_speech_prob': 0.00038943736581131816}, {'id': 367, 'seek': 286048, 'start': 2861.12, 'end': 2871.04, 'text': ' right so now can we get our hands dirty can we try building such an analyzer in LLVM so what does', 'tokens': [50396, 558, 370, 586, 393, 321, 483, 527, 2377, 9360, 393, 321, 853, 2390, 1270, 364, 6459, 4527, 294, 441, 43, 53, 44, 370, 437, 775, 50892], 'temperature': 0.0, 'avg_logprob': -0.129151980082194, 'compression_ratio': 1.7926829268292683, 'no_speech_prob': 0.007633384317159653}, {'id': 368, 'seek': 286048, 'start': 2871.04, 'end': 2876.32, 'text': ' it take now let us come to what theory again now let us come to how do we build it in LLVM let us', 'tokens': [50892, 309, 747, 586, 718, 505, 808, 281, 437, 5261, 797, 586, 718, 505, 808, 281, 577, 360, 321, 1322, 309, 294, 441, 43, 53, 44, 718, 505, 51156], 'temperature': 0.0, 'avg_logprob': -0.129151980082194, 'compression_ratio': 1.7926829268292683, 'no_speech_prob': 0.007633384317159653}, {'id': 369, 'seek': 286048, 'start': 2876.32, 'end': 2885.6, 'text': ' say I want to do it on the stack right so what do I need to do let us plan it I want to only do it', 'tokens': [51156, 584, 286, 528, 281, 360, 309, 322, 264, 8630, 558, 370, 437, 360, 286, 643, 281, 360, 718, 505, 1393, 309, 286, 528, 281, 787, 360, 309, 51620], 'temperature': 0.0, 'avg_logprob': -0.129151980082194, 'compression_ratio': 1.7926829268292683, 'no_speech_prob': 0.007633384317159653}, {'id': 370, 'seek': 288560, 'start': 2885.6, 'end': 2893.92, 'text': ' on the stack I do not want to do it on heap so how will I do that in in LLVM bit code LLVM IR', 'tokens': [50364, 322, 264, 8630, 286, 360, 406, 528, 281, 360, 309, 322, 33591, 370, 577, 486, 286, 360, 300, 294, 294, 441, 43, 53, 44, 857, 3089, 441, 43, 53, 44, 16486, 50780], 'temperature': 0.0, 'avg_logprob': -0.09407920241355897, 'compression_ratio': 1.8562091503267975, 'no_speech_prob': 0.011943219229578972}, {'id': 371, 'seek': 288560, 'start': 2897.52, 'end': 2904.0, 'text': ' yes so I have to do what insert aloka instructions so like I have to look at the aloka instructions', 'tokens': [50960, 2086, 370, 286, 362, 281, 360, 437, 8969, 419, 15289, 9415, 370, 411, 286, 362, 281, 574, 412, 264, 419, 15289, 9415, 51284], 'temperature': 0.0, 'avg_logprob': -0.09407920241355897, 'compression_ratio': 1.8562091503267975, 'no_speech_prob': 0.011943219229578972}, {'id': 372, 'seek': 288560, 'start': 2904.0, 'end': 2909.8399999999997, 'text': ' there and after each aloka instruction or before each aloka instruction I add my own aloka', 'tokens': [51284, 456, 293, 934, 1184, 419, 15289, 10951, 420, 949, 1184, 419, 15289, 10951, 286, 909, 452, 1065, 419, 15289, 51576], 'temperature': 0.0, 'avg_logprob': -0.09407920241355897, 'compression_ratio': 1.8562091503267975, 'no_speech_prob': 0.011943219229578972}, {'id': 373, 'seek': 290984, 'start': 2909.84, 'end': 2917.1200000000003, 'text': ' instruction right so this will give me extra space to for this extra variables that is one', 'tokens': [50364, 10951, 558, 370, 341, 486, 976, 385, 2857, 1901, 281, 337, 341, 2857, 9102, 300, 307, 472, 50728], 'temperature': 0.0, 'avg_logprob': -0.08983220725223937, 'compression_ratio': 1.729559748427673, 'no_speech_prob': 0.01379182655364275}, {'id': 374, 'seek': 290984, 'start': 2917.1200000000003, 'end': 2930.96, 'text': ' phase this is insert aloka then not store instruction so the dereference is done with', 'tokens': [50728, 5574, 341, 307, 8969, 419, 15289, 550, 406, 3531, 10951, 370, 264, 15969, 5158, 307, 1096, 365, 51420], 'temperature': 0.0, 'avg_logprob': -0.08983220725223937, 'compression_ratio': 1.729559748427673, 'no_speech_prob': 0.01379182655364275}, {'id': 375, 'seek': 290984, 'start': 2930.96, 'end': 2937.6800000000003, 'text': ' something called this GEP instruction gate element pointer instruction right so there is this gate', 'tokens': [51420, 746, 1219, 341, 460, 8929, 10951, 8539, 4478, 23918, 10951, 558, 370, 456, 307, 341, 8539, 51756], 'temperature': 0.0, 'avg_logprob': -0.08983220725223937, 'compression_ratio': 1.729559748427673, 'no_speech_prob': 0.01379182655364275}, {'id': 376, 'seek': 293768, 'start': 2937.68, 'end': 2945.52, 'text': ' element pointer instruction you have to catch all such GEP instructions right for every such', 'tokens': [50364, 4478, 23918, 10951, 291, 362, 281, 3745, 439, 1270, 460, 8929, 9415, 558, 337, 633, 1270, 50756], 'temperature': 0.0, 'avg_logprob': -0.11606812150511023, 'compression_ratio': 1.9171270718232045, 'no_speech_prob': 0.05807941034436226}, {'id': 377, 'seek': 293768, 'start': 2945.52, 'end': 2952.08, 'text': ' instruction you have to check if this is equal to that pattern whatever pattern you have set here', 'tokens': [50756, 10951, 291, 362, 281, 1520, 498, 341, 307, 2681, 281, 300, 5102, 2035, 5102, 291, 362, 992, 510, 51084], 'temperature': 0.0, 'avg_logprob': -0.11606812150511023, 'compression_ratio': 1.9171270718232045, 'no_speech_prob': 0.05807941034436226}, {'id': 378, 'seek': 293768, 'start': 2952.08, 'end': 2956.16, 'text': ' so there is aloka instruction and you also have to maybe that is what you are saying store a', 'tokens': [51084, 370, 456, 307, 419, 15289, 10951, 293, 291, 611, 362, 281, 1310, 300, 307, 437, 291, 366, 1566, 3531, 257, 51288], 'temperature': 0.0, 'avg_logprob': -0.11606812150511023, 'compression_ratio': 1.9171270718232045, 'no_speech_prob': 0.05807941034436226}, {'id': 379, 'seek': 293768, 'start': 2956.16, 'end': 2959.6, 'text': ' special pattern into this aloka instructions in these locations', 'tokens': [51288, 2121, 5102, 666, 341, 419, 15289, 9415, 294, 613, 9253, 51460], 'temperature': 0.0, 'avg_logprob': -0.11606812150511023, 'compression_ratio': 1.9171270718232045, 'no_speech_prob': 0.05807941034436226}, {'id': 380, 'seek': 296768, 'start': 2968.24, 'end': 2974.48, 'text': ' yeah you can sure sure sure but my implementation I did a shortcut so I am telling you what I did', 'tokens': [50392, 1338, 291, 393, 988, 988, 988, 457, 452, 11420, 286, 630, 257, 24822, 370, 286, 669, 3585, 291, 437, 286, 630, 50704], 'temperature': 0.0, 'avg_logprob': -0.11617435843257581, 'compression_ratio': 1.8605577689243027, 'no_speech_prob': 0.26356813311576843}, {'id': 381, 'seek': 296768, 'start': 2974.48, 'end': 2979.68, 'text': ' I did not want you to see that so yeah you are right so maybe I can do it only for arrays I can', 'tokens': [50704, 286, 630, 406, 528, 291, 281, 536, 300, 370, 1338, 291, 366, 558, 370, 1310, 286, 393, 360, 309, 787, 337, 41011, 286, 393, 50964], 'temperature': 0.0, 'avg_logprob': -0.11617435843257581, 'compression_ratio': 1.8605577689243027, 'no_speech_prob': 0.26356813311576843}, {'id': 382, 'seek': 296768, 'start': 2979.68, 'end': 2983.3599999999997, 'text': ' just do it before and after an array but that requires me to find the type of the array and I', 'tokens': [50964, 445, 360, 309, 949, 293, 934, 364, 10225, 457, 300, 7029, 385, 281, 915, 264, 2010, 295, 264, 10225, 293, 286, 51148], 'temperature': 0.0, 'avg_logprob': -0.11617435843257581, 'compression_ratio': 1.8605577689243027, 'no_speech_prob': 0.26356813311576843}, {'id': 383, 'seek': 296768, 'start': 2983.3599999999997, 'end': 2989.52, 'text': " should do that yeah that's true but I just essentially did it for every aloka instruction", 'tokens': [51148, 820, 360, 300, 1338, 300, 311, 2074, 457, 286, 445, 4476, 630, 309, 337, 633, 419, 15289, 10951, 51456], 'temperature': 0.0, 'avg_logprob': -0.11617435843257581, 'compression_ratio': 1.8605577689243027, 'no_speech_prob': 0.26356813311576843}, {'id': 384, 'seek': 296768, 'start': 2989.52, 'end': 2995.12, 'text': " just find if it's aloka put another aloka in between but you're right I mean we can maybe", 'tokens': [51456, 445, 915, 498, 309, 311, 419, 15289, 829, 1071, 419, 15289, 294, 1296, 457, 291, 434, 558, 286, 914, 321, 393, 1310, 51736], 'temperature': 0.0, 'avg_logprob': -0.11617435843257581, 'compression_ratio': 1.8605577689243027, 'no_speech_prob': 0.26356813311576843}, {'id': 385, 'seek': 299512, 'start': 2995.12, 'end': 2999.8399999999997, 'text': ' we get only do it for arrays it saves a space and whenever I have a GEP instruction you', 'tokens': [50364, 321, 483, 787, 360, 309, 337, 41011, 309, 19155, 257, 1901, 293, 5699, 286, 362, 257, 460, 8929, 10951, 291, 50600], 'temperature': 0.0, 'avg_logprob': -0.1696979305412196, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.010115082375705242}, {'id': 386, 'seek': 299512, 'start': 3001.7599999999998, 'end': 3009.2, 'text': ' look at this and you make the check you check if the address at that location held at that location', 'tokens': [50696, 574, 412, 341, 293, 291, 652, 264, 1520, 291, 1520, 498, 264, 2985, 412, 300, 4914, 5167, 412, 300, 4914, 51068], 'temperature': 0.0, 'avg_logprob': -0.1696979305412196, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.010115082375705242}, {'id': 387, 'seek': 299512, 'start': 3009.2, 'end': 3014.4, 'text': ' has is that special bit pattern that you stored here that you put in the store instruction', 'tokens': [51068, 575, 307, 300, 2121, 857, 5102, 300, 291, 12187, 510, 300, 291, 829, 294, 264, 3531, 10951, 51328], 'temperature': 0.0, 'avg_logprob': -0.1696979305412196, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.010115082375705242}, {'id': 388, 'seek': 299512, 'start': 3015.7599999999998, 'end': 3020.24, 'text': ' if it is then trigger the error if not you are good', 'tokens': [51396, 498, 309, 307, 550, 7875, 264, 6713, 498, 406, 291, 366, 665, 51620], 'temperature': 0.0, 'avg_logprob': -0.1696979305412196, 'compression_ratio': 1.746031746031746, 'no_speech_prob': 0.010115082375705242}, {'id': 389, 'seek': 302024, 'start': 3020.24, 'end': 3026.8799999999997, 'text': ' yes yes', 'tokens': [50364, 2086, 2086, 50696], 'temperature': 0.0, 'avg_logprob': -0.14910391294039213, 'compression_ratio': 1.6466666666666667, 'no_speech_prob': 0.004246172960847616}, {'id': 390, 'seek': 302024, 'start': 3029.8399999999997, 'end': 3035.68, 'text': ' so now you have the tool you will run that pass that will do all the instrumentation required', 'tokens': [50844, 370, 586, 291, 362, 264, 2290, 291, 486, 1190, 300, 1320, 300, 486, 360, 439, 264, 7198, 399, 4739, 51136], 'temperature': 0.0, 'avg_logprob': -0.14910391294039213, 'compression_ratio': 1.6466666666666667, 'no_speech_prob': 0.004246172960847616}, {'id': 391, 'seek': 302024, 'start': 3035.68, 'end': 3038.64, 'text': ' you run the program on it it will trigger the fault if there is any', 'tokens': [51136, 291, 1190, 264, 1461, 322, 309, 309, 486, 7875, 264, 7441, 498, 456, 307, 604, 51284], 'temperature': 0.0, 'avg_logprob': -0.14910391294039213, 'compression_ratio': 1.6466666666666667, 'no_speech_prob': 0.004246172960847616}, {'id': 392, 'seek': 302024, 'start': 3039.6, 'end': 3046.3199999999997, 'text': " and then I'll show you the code how we can get it done and then maybe you can", 'tokens': [51332, 293, 550, 286, 603, 855, 291, 264, 3089, 577, 321, 393, 483, 309, 1096, 293, 550, 1310, 291, 393, 51668], 'temperature': 0.0, 'avg_logprob': -0.14910391294039213, 'compression_ratio': 1.6466666666666667, 'no_speech_prob': 0.004246172960847616}, {'id': 393, 'seek': 304632, 'start': 3046.7200000000003, 'end': 3052.32, 'text': " um so we'll see how can we use the rest of the time so then we can spend a little time in you", 'tokens': [50384, 1105, 370, 321, 603, 536, 577, 393, 321, 764, 264, 1472, 295, 264, 565, 370, 550, 321, 393, 3496, 257, 707, 565, 294, 291, 50664], 'temperature': 0.0, 'avg_logprob': -0.1296488616777503, 'compression_ratio': 1.4824561403508771, 'no_speech_prob': 0.007675820495933294}, {'id': 394, 'seek': 304632, 'start': 3052.32, 'end': 3056.8, 'text': ' like tinkering around with that code and try to see if you can do something', 'tokens': [50664, 411, 256, 475, 1794, 926, 365, 300, 3089, 293, 853, 281, 536, 498, 291, 393, 360, 746, 50888], 'temperature': 0.0, 'avg_logprob': -0.1296488616777503, 'compression_ratio': 1.4824561403508771, 'no_speech_prob': 0.007675820495933294}]