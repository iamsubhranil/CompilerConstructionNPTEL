[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 10.620000000000001, 'text': ' So, you have already seen some part of the compiler. So, you have looked at an interesting', 'tokens': [50364, 407, 11, 291, 362, 1217, 1612, 512, 644, 295, 264, 31958, 13, 407, 11, 291, 362, 2956, 412, 364, 1880, 50895], 'temperature': 0.0, 'avg_logprob': -0.13268825925629715, 'compression_ratio': 1.6886792452830188, 'no_speech_prob': 0.0898209661245346}, {'id': 1, 'seek': 0, 'start': 10.620000000000001, 'end': 14.94, 'text': ' data structure known as the abstract syntax tree and I hope you have done some exercises', 'tokens': [50895, 1412, 3877, 2570, 382, 264, 12649, 28431, 4230, 293, 286, 1454, 291, 362, 1096, 512, 11900, 51111], 'temperature': 0.0, 'avg_logprob': -0.13268825925629715, 'compression_ratio': 1.6886792452830188, 'no_speech_prob': 0.0898209661245346}, {'id': 2, 'seek': 0, 'start': 14.94, 'end': 21.94, 'text': ' using that and looked at like traverse state and see what it is look like and so on. So,', 'tokens': [51111, 1228, 300, 293, 2956, 412, 411, 45674, 1785, 293, 536, 437, 309, 307, 574, 411, 293, 370, 322, 13, 407, 11, 51461], 'temperature': 0.0, 'avg_logprob': -0.13268825925629715, 'compression_ratio': 1.6886792452830188, 'no_speech_prob': 0.0898209661245346}, {'id': 3, 'seek': 0, 'start': 21.94, 'end': 26.86, 'text': ' the AST is useful for a lot of optimizations, but then there are many other optimizations', 'tokens': [51461, 264, 316, 6840, 307, 4420, 337, 257, 688, 295, 5028, 14455, 11, 457, 550, 456, 366, 867, 661, 5028, 14455, 51707], 'temperature': 0.0, 'avg_logprob': -0.13268825925629715, 'compression_ratio': 1.6886792452830188, 'no_speech_prob': 0.0898209661245346}, {'id': 4, 'seek': 2686, 'start': 26.86, 'end': 31.7, 'text': ' for which it is useful to have a different intermediate representation and we will be', 'tokens': [50364, 337, 597, 309, 307, 4420, 281, 362, 257, 819, 19376, 10290, 293, 321, 486, 312, 50606], 'temperature': 0.0, 'avg_logprob': -0.23853327588337223, 'compression_ratio': 1.836734693877551, 'no_speech_prob': 0.44345182180404663}, {'id': 5, 'seek': 2686, 'start': 31.7, 'end': 38.94, 'text': ' looking at a different intermediate representation of an LBM and the what we are doing with that', 'tokens': [50606, 1237, 412, 257, 819, 19376, 10290, 295, 364, 441, 18345, 293, 264, 437, 321, 366, 884, 365, 300, 50968], 'temperature': 0.0, 'avg_logprob': -0.23853327588337223, 'compression_ratio': 1.836734693877551, 'no_speech_prob': 0.44345182180404663}, {'id': 6, 'seek': 2686, 'start': 38.94, 'end': 44.96, 'text': ' is that we will look at something called program analysis. So, let me just ask you because', 'tokens': [50968, 307, 300, 321, 486, 574, 412, 746, 1219, 1461, 5215, 13, 407, 11, 718, 385, 445, 1029, 291, 570, 51269], 'temperature': 0.0, 'avg_logprob': -0.23853327588337223, 'compression_ratio': 1.836734693877551, 'no_speech_prob': 0.44345182180404663}, {'id': 7, 'seek': 2686, 'start': 44.96, 'end': 49.34, 'text': ' you all know what is a program and you all understand what is analysis. So, let me ask', 'tokens': [51269, 291, 439, 458, 437, 307, 257, 1461, 293, 291, 439, 1223, 437, 307, 5215, 13, 407, 11, 718, 385, 1029, 51488], 'temperature': 0.0, 'avg_logprob': -0.23853327588337223, 'compression_ratio': 1.836734693877551, 'no_speech_prob': 0.44345182180404663}, {'id': 8, 'seek': 4934, 'start': 49.74, 'end': 56.74, 'text': ' you what do you think is program analysis. So, what is what do you think we will be doing?', 'tokens': [50384, 291, 437, 360, 291, 519, 307, 1461, 5215, 13, 407, 11, 437, 307, 437, 360, 291, 519, 321, 486, 312, 884, 30, 50734], 'temperature': 0.0, 'avg_logprob': -0.28585399280894885, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.2115340381860733}, {'id': 9, 'seek': 4934, 'start': 56.74, 'end': 65.58000000000001, 'text': ' And interestingly we have all been doing program analysis it nothing something nothing very', 'tokens': [50734, 400, 25873, 321, 362, 439, 668, 884, 1461, 5215, 309, 1825, 746, 1825, 588, 51176], 'temperature': 0.0, 'avg_logprob': -0.28585399280894885, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.2115340381860733}, {'id': 10, 'seek': 4934, 'start': 65.58000000000001, 'end': 71.30000000000001, 'text': ' new to any of us. The day you started doing programming you started doing program analysis', 'tokens': [51176, 777, 281, 604, 295, 505, 13, 440, 786, 291, 1409, 884, 9410, 291, 1409, 884, 1461, 5215, 51462], 'temperature': 0.0, 'avg_logprob': -0.28585399280894885, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.2115340381860733}, {'id': 11, 'seek': 4934, 'start': 71.30000000000001, 'end': 74.94, 'text': ' which means that we are trying to understand interesting properties about the program.', 'tokens': [51462, 597, 1355, 300, 321, 366, 1382, 281, 1223, 1880, 7221, 466, 264, 1461, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.28585399280894885, 'compression_ratio': 1.935483870967742, 'no_speech_prob': 0.2115340381860733}, {'id': 12, 'seek': 7494, 'start': 75.74, 'end': 80.98, 'text': ' Excellent. So, you brought out a new term called debugging right. So, that is one thing', 'tokens': [50404, 16723, 13, 407, 11, 291, 3038, 484, 257, 777, 1433, 1219, 45592, 558, 13, 407, 11, 300, 307, 472, 551, 50666], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 13, 'seek': 7494, 'start': 80.98, 'end': 85.14, 'text': ' that you would like to do using program analysis you might want to debug a program may want', 'tokens': [50666, 300, 291, 576, 411, 281, 360, 1228, 1461, 5215, 291, 1062, 528, 281, 24083, 257, 1461, 815, 528, 50874], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 14, 'seek': 7494, 'start': 85.14, 'end': 88.86, 'text': ' to understand what the program is doing and what is the cause for the bug I am seeing', 'tokens': [50874, 281, 1223, 437, 264, 1461, 307, 884, 293, 437, 307, 264, 3082, 337, 264, 7426, 286, 669, 2577, 51060], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 15, 'seek': 7494, 'start': 88.86, 'end': 93.3, 'text': ' at this point in time. Why else would I like to do this analysis? Why would I like to understand', 'tokens': [51060, 412, 341, 935, 294, 565, 13, 1545, 1646, 576, 286, 411, 281, 360, 341, 5215, 30, 1545, 576, 286, 411, 281, 1223, 51282], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 16, 'seek': 7494, 'start': 93.3, 'end': 98.22, 'text': ' my program? Other than making the program correct which is important, but other than', 'tokens': [51282, 452, 1461, 30, 5358, 813, 1455, 264, 1461, 3006, 597, 307, 1021, 11, 457, 661, 813, 51528], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 17, 'seek': 7494, 'start': 98.22, 'end': 104.06, 'text': ' that. So, let us run this program compile this program with our favorite compiler GCC', 'tokens': [51528, 300, 13, 407, 11, 718, 505, 1190, 341, 1461, 31413, 341, 1461, 365, 527, 2954, 31958, 460, 11717, 51820], 'temperature': 0.0, 'avg_logprob': -0.20791783408513145, 'compression_ratio': 1.9035714285714285, 'no_speech_prob': 0.010624922811985016}, {'id': 18, 'seek': 10406, 'start': 104.06, 'end': 118.66, 'text': ' and if I run it get answer 34. Maybe the compiler is buggy who knows right I mean compiler', 'tokens': [50364, 293, 498, 286, 1190, 309, 483, 1867, 12790, 13, 2704, 264, 31958, 307, 7426, 1480, 567, 3255, 558, 286, 914, 31958, 51094], 'temperature': 0.0, 'avg_logprob': -0.2363302924416282, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.003821787191554904}, {'id': 19, 'seek': 10406, 'start': 118.66, 'end': 122.30000000000001, 'text': ' is a piece of software it can have bugs. So, let us try to compile it with another', 'tokens': [51094, 307, 257, 2522, 295, 4722, 309, 393, 362, 15120, 13, 407, 11, 718, 505, 853, 281, 31413, 309, 365, 1071, 51276], 'temperature': 0.0, 'avg_logprob': -0.2363302924416282, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.003821787191554904}, {'id': 20, 'seek': 10406, 'start': 122.30000000000001, 'end': 126.9, 'text': ' favorite another of our favorite software is Clang. You have seen this compiler right.', 'tokens': [51276, 2954, 1071, 295, 527, 2954, 4722, 307, 2033, 656, 13, 509, 362, 1612, 341, 31958, 558, 13, 51506], 'temperature': 0.0, 'avg_logprob': -0.2363302924416282, 'compression_ratio': 1.5662650602409638, 'no_speech_prob': 0.003821787191554904}, {'id': 21, 'seek': 12690, 'start': 126.9, 'end': 138.18, 'text': ' So, let us compile it with this let us see what happens. Some warnings I do not care', 'tokens': [50364, 407, 11, 718, 505, 31413, 309, 365, 341, 718, 505, 536, 437, 2314, 13, 2188, 30009, 286, 360, 406, 1127, 50928], 'temperature': 0.0, 'avg_logprob': -0.25718174809994904, 'compression_ratio': 1.3984375, 'no_speech_prob': 0.019107187166810036}, {'id': 22, 'seek': 12690, 'start': 138.18, 'end': 150.70000000000002, 'text': ' never care about warnings. It goes into infinite loop what is going on? It is the same program', 'tokens': [50928, 1128, 1127, 466, 30009, 13, 467, 1709, 666, 13785, 6367, 437, 307, 516, 322, 30, 467, 307, 264, 912, 1461, 51554], 'temperature': 0.0, 'avg_logprob': -0.25718174809994904, 'compression_ratio': 1.3984375, 'no_speech_prob': 0.019107187166810036}, {'id': 23, 'seek': 15070, 'start': 151.57999999999998, 'end': 158.7, 'text': ' should have been 44 one compiler says 34 the other compiler goes to infinite loop what', 'tokens': [50408, 820, 362, 668, 16408, 472, 31958, 1619, 12790, 264, 661, 31958, 1709, 281, 13785, 6367, 437, 50764], 'temperature': 0.0, 'avg_logprob': -0.22569646835327148, 'compression_ratio': 1.5644171779141105, 'no_speech_prob': 0.15971854329109192}, {'id': 24, 'seek': 15070, 'start': 158.7, 'end': 169.98, 'text': ' is going on with this program? So, how do you go about understanding what is wrong?', 'tokens': [50764, 307, 516, 322, 365, 341, 1461, 30, 407, 11, 577, 360, 291, 352, 466, 3701, 437, 307, 2085, 30, 51328], 'temperature': 0.0, 'avg_logprob': -0.22569646835327148, 'compression_ratio': 1.5644171779141105, 'no_speech_prob': 0.15971854329109192}, {'id': 25, 'seek': 15070, 'start': 169.98, 'end': 174.26, 'text': ' Like if you had to debug this program you have to analyze this program how would you', 'tokens': [51328, 1743, 498, 291, 632, 281, 24083, 341, 1461, 291, 362, 281, 12477, 341, 1461, 577, 576, 291, 51542], 'temperature': 0.0, 'avg_logprob': -0.22569646835327148, 'compression_ratio': 1.5644171779141105, 'no_speech_prob': 0.15971854329109192}, {'id': 26, 'seek': 17426, 'start': 174.26, 'end': 183.34, 'text': ' do it? I mean at a very high level do not get into details at a very high level what', 'tokens': [50364, 360, 309, 30, 286, 914, 412, 257, 588, 1090, 1496, 360, 406, 483, 666, 4365, 412, 257, 588, 1090, 1496, 437, 50818], 'temperature': 0.0, 'avg_logprob': -0.1582356956270006, 'compression_ratio': 1.6503067484662577, 'no_speech_prob': 0.035905297845602036}, {'id': 27, 'seek': 17426, 'start': 183.34, 'end': 194.22, 'text': ' are the different ways of debugging this program? I can run GDB or even simply I can just put', 'tokens': [50818, 366, 264, 819, 2098, 295, 45592, 341, 1461, 30, 286, 393, 1190, 460, 27735, 420, 754, 2935, 286, 393, 445, 829, 51362], 'temperature': 0.0, 'avg_logprob': -0.1582356956270006, 'compression_ratio': 1.6503067484662577, 'no_speech_prob': 0.035905297845602036}, {'id': 28, 'seek': 17426, 'start': 194.22, 'end': 199.34, 'text': ' up printf in the program put a lot of printf just see what is going on at every point what', 'tokens': [51362, 493, 4482, 69, 294, 264, 1461, 829, 257, 688, 295, 4482, 69, 445, 536, 437, 307, 516, 322, 412, 633, 935, 437, 51618], 'temperature': 0.0, 'avg_logprob': -0.1582356956270006, 'compression_ratio': 1.6503067484662577, 'no_speech_prob': 0.035905297845602036}, {'id': 29, 'seek': 19934, 'start': 199.34, 'end': 205.9, 'text': ' is I what you see at different places and then maybe try to make sense of it. So, then what will', 'tokens': [50364, 307, 286, 437, 291, 536, 412, 819, 3190, 293, 550, 1310, 853, 281, 652, 2020, 295, 309, 13, 407, 11, 550, 437, 486, 50692], 'temperature': 0.0, 'avg_logprob': -0.16203022003173828, 'compression_ratio': 1.5340314136125655, 'no_speech_prob': 0.026582708582282066}, {'id': 30, 'seek': 19934, 'start': 205.9, 'end': 213.7, 'text': " I do? I will put a lot of printf's or on GDB and then run the program on some inputs and then see", 'tokens': [50692, 286, 360, 30, 286, 486, 829, 257, 688, 295, 4482, 69, 311, 420, 322, 460, 27735, 293, 550, 1190, 264, 1461, 322, 512, 15743, 293, 550, 536, 51082], 'temperature': 0.0, 'avg_logprob': -0.16203022003173828, 'compression_ratio': 1.5340314136125655, 'no_speech_prob': 0.026582708582282066}, {'id': 31, 'seek': 19934, 'start': 213.7, 'end': 221.38, 'text': ' how do these executions look like. So, this way of analyzing a program is referred to as a dynamic', 'tokens': [51082, 577, 360, 613, 4454, 3666, 574, 411, 13, 407, 11, 341, 636, 295, 23663, 257, 1461, 307, 10839, 281, 382, 257, 8546, 51466], 'temperature': 0.0, 'avg_logprob': -0.16203022003173828, 'compression_ratio': 1.5340314136125655, 'no_speech_prob': 0.026582708582282066}, {'id': 32, 'seek': 22138, 'start': 221.38, 'end': 231.06, 'text': " analysis where the idea is exactly the same we put in extra code in your case printf's and then", 'tokens': [50364, 5215, 689, 264, 1558, 307, 2293, 264, 912, 321, 829, 294, 2857, 3089, 294, 428, 1389, 4482, 69, 311, 293, 550, 50848], 'temperature': 0.0, 'avg_logprob': -0.13839983561682323, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.37411823868751526}, {'id': 33, 'seek': 22138, 'start': 231.06, 'end': 236.06, 'text': ' execute the program on certain inputs and then we try to understand what is going on with the', 'tokens': [50848, 14483, 264, 1461, 322, 1629, 15743, 293, 550, 321, 853, 281, 1223, 437, 307, 516, 322, 365, 264, 51098], 'temperature': 0.0, 'avg_logprob': -0.13839983561682323, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.37411823868751526}, {'id': 34, 'seek': 22138, 'start': 236.06, 'end': 250.42, 'text': ' program. What is some other way of analyzing this program? Yes excellent excellent.', 'tokens': [51098, 1461, 13, 708, 307, 512, 661, 636, 295, 23663, 341, 1461, 30, 1079, 7103, 7103, 13, 51816], 'temperature': 0.0, 'avg_logprob': -0.13839983561682323, 'compression_ratio': 1.6153846153846154, 'no_speech_prob': 0.37411823868751526}, {'id': 35, 'seek': 25042, 'start': 251.1, 'end': 259.74, 'text': ' Dry running the program or just simply staring at this program and then trying to say that what is', 'tokens': [50398, 31562, 2614, 264, 1461, 420, 445, 2935, 18043, 412, 341, 1461, 293, 550, 1382, 281, 584, 300, 437, 307, 50830], 'temperature': 0.0, 'avg_logprob': -0.13635862705319426, 'compression_ratio': 1.8786407766990292, 'no_speech_prob': 0.029145410284399986}, {'id': 36, 'seek': 25042, 'start': 259.74, 'end': 262.94, 'text': ' like somebody said that the program has error I mean somebody just stared at this program did', 'tokens': [50830, 411, 2618, 848, 300, 264, 1461, 575, 6713, 286, 914, 2618, 445, 44738, 412, 341, 1461, 630, 50990], 'temperature': 0.0, 'avg_logprob': -0.13635862705319426, 'compression_ratio': 1.8786407766990292, 'no_speech_prob': 0.029145410284399986}, {'id': 37, 'seek': 25042, 'start': 262.94, 'end': 268.94, 'text': ' not even run the program and they said looks like something is wrong. So, this way of analyzing a', 'tokens': [50990, 406, 754, 1190, 264, 1461, 293, 436, 848, 1542, 411, 746, 307, 2085, 13, 407, 11, 341, 636, 295, 23663, 257, 51290], 'temperature': 0.0, 'avg_logprob': -0.13635862705319426, 'compression_ratio': 1.8786407766990292, 'no_speech_prob': 0.029145410284399986}, {'id': 38, 'seek': 25042, 'start': 268.94, 'end': 276.21999999999997, 'text': ' program which can simulate an execution like you said dry run a program or just try to just look', 'tokens': [51290, 1461, 597, 393, 27817, 364, 15058, 411, 291, 848, 4016, 1190, 257, 1461, 420, 445, 853, 281, 445, 574, 51654], 'temperature': 0.0, 'avg_logprob': -0.13635862705319426, 'compression_ratio': 1.8786407766990292, 'no_speech_prob': 0.029145410284399986}, {'id': 39, 'seek': 27622, 'start': 276.22, 'end': 281.22, 'text': ' at the program text and try to get some meaning out of the program without really executing the', 'tokens': [50364, 412, 264, 1461, 2487, 293, 853, 281, 483, 512, 3620, 484, 295, 264, 1461, 1553, 534, 32368, 264, 50614], 'temperature': 0.0, 'avg_logprob': -0.12232594106389189, 'compression_ratio': 1.8038277511961722, 'no_speech_prob': 0.044415976852178574}, {'id': 40, 'seek': 27622, 'start': 281.22, 'end': 286.26000000000005, 'text': ' program. Those sort of ways of analyzing a program is referred to as static analysis.', 'tokens': [50614, 1461, 13, 3950, 1333, 295, 2098, 295, 23663, 257, 1461, 307, 10839, 281, 382, 13437, 5215, 13, 50866], 'temperature': 0.0, 'avg_logprob': -0.12232594106389189, 'compression_ratio': 1.8038277511961722, 'no_speech_prob': 0.044415976852178574}, {'id': 41, 'seek': 27622, 'start': 286.26000000000005, 'end': 292.26000000000005, 'text': ' Static because we are not really running anything dynamic because we are running the program and', 'tokens': [50866, 745, 2399, 570, 321, 366, 406, 534, 2614, 1340, 8546, 570, 321, 366, 2614, 264, 1461, 293, 51166], 'temperature': 0.0, 'avg_logprob': -0.12232594106389189, 'compression_ratio': 1.8038277511961722, 'no_speech_prob': 0.044415976852178574}, {'id': 42, 'seek': 27622, 'start': 292.26000000000005, 'end': 304.02000000000004, 'text': ' then trying to figure out what is going on. So, the plan is so I do not have a very set agenda but', 'tokens': [51166, 550, 1382, 281, 2573, 484, 437, 307, 516, 322, 13, 407, 11, 264, 1393, 307, 370, 286, 360, 406, 362, 257, 588, 992, 9829, 457, 51754], 'temperature': 0.0, 'avg_logprob': -0.12232594106389189, 'compression_ratio': 1.8038277511961722, 'no_speech_prob': 0.044415976852178574}, {'id': 43, 'seek': 30402, 'start': 304.06, 'end': 309.41999999999996, 'text': ' we will go with the flow. I will see how the class is able to cope up and accordingly I will probably', 'tokens': [50366, 321, 486, 352, 365, 264, 3095, 13, 286, 486, 536, 577, 264, 1508, 307, 1075, 281, 22598, 493, 293, 19717, 286, 486, 1391, 50634], 'temperature': 0.0, 'avg_logprob': -0.15554139855202664, 'compression_ratio': 1.728888888888889, 'no_speech_prob': 0.09747481346130371}, {'id': 44, 'seek': 30402, 'start': 309.41999999999996, 'end': 317.21999999999997, 'text': ' switch things. But the plan is that today I will start with static analysis. We will try to', 'tokens': [50634, 3679, 721, 13, 583, 264, 1393, 307, 300, 965, 286, 486, 722, 365, 13437, 5215, 13, 492, 486, 853, 281, 51024], 'temperature': 0.0, 'avg_logprob': -0.15554139855202664, 'compression_ratio': 1.728888888888889, 'no_speech_prob': 0.09747481346130371}, {'id': 45, 'seek': 30402, 'start': 317.21999999999997, 'end': 324.74, 'text': ' understand how different static analysis work. Then rather it will be an introduction to static', 'tokens': [51024, 1223, 577, 819, 13437, 5215, 589, 13, 1396, 2831, 309, 486, 312, 364, 9339, 281, 13437, 51400], 'temperature': 0.0, 'avg_logprob': -0.15554139855202664, 'compression_ratio': 1.728888888888889, 'no_speech_prob': 0.09747481346130371}, {'id': 46, 'seek': 30402, 'start': 324.74, 'end': 330.09999999999997, 'text': ' analysis without much of formal foundation. I will sort of at a very high level throw things at you', 'tokens': [51400, 5215, 1553, 709, 295, 9860, 7030, 13, 286, 486, 1333, 295, 412, 257, 588, 1090, 1496, 3507, 721, 412, 291, 51668], 'temperature': 0.0, 'avg_logprob': -0.15554139855202664, 'compression_ratio': 1.728888888888889, 'no_speech_prob': 0.09747481346130371}, {'id': 47, 'seek': 33010, 'start': 330.1, 'end': 334.38, 'text': ' and say what would you do looks like a good idea or not that is not a good idea. We will try to', 'tokens': [50364, 293, 584, 437, 576, 291, 360, 1542, 411, 257, 665, 1558, 420, 406, 300, 307, 406, 257, 665, 1558, 13, 492, 486, 853, 281, 50578], 'temperature': 0.0, 'avg_logprob': -0.17457430815893757, 'compression_ratio': 1.8537549407114624, 'no_speech_prob': 0.12458526343107224}, {'id': 48, 'seek': 33010, 'start': 334.38, 'end': 340.74, 'text': ' form a common sense try to understand how can we write a static analyzer. In the next session', 'tokens': [50578, 1254, 257, 2689, 2020, 853, 281, 1223, 577, 393, 321, 2464, 257, 13437, 6459, 4527, 13, 682, 264, 958, 5481, 50896], 'temperature': 0.0, 'avg_logprob': -0.17457430815893757, 'compression_ratio': 1.8537549407114624, 'no_speech_prob': 0.12458526343107224}, {'id': 49, 'seek': 33010, 'start': 340.74, 'end': 346.74, 'text': ' onwards I will try I will give you a hands on with the LLVM compiler. We will look at another', 'tokens': [50896, 34230, 286, 486, 853, 286, 486, 976, 291, 257, 2377, 322, 365, 264, 441, 43, 53, 44, 31958, 13, 492, 486, 574, 412, 1071, 51196], 'temperature': 0.0, 'avg_logprob': -0.17457430815893757, 'compression_ratio': 1.8537549407114624, 'no_speech_prob': 0.12458526343107224}, {'id': 50, 'seek': 33010, 'start': 346.74, 'end': 352.18, 'text': ' representation of the LLVM compiler known as LLVM IR which is a lower level intermediate', 'tokens': [51196, 10290, 295, 264, 441, 43, 53, 44, 31958, 2570, 382, 441, 43, 53, 44, 16486, 597, 307, 257, 3126, 1496, 19376, 51468], 'temperature': 0.0, 'avg_logprob': -0.17457430815893757, 'compression_ratio': 1.8537549407114624, 'no_speech_prob': 0.12458526343107224}, {'id': 51, 'seek': 33010, 'start': 352.18, 'end': 359.86, 'text': ' representation and we will try to implement our analysis on LLVM compiler. Tomorrow we will look', 'tokens': [51468, 10290, 293, 321, 486, 853, 281, 4445, 527, 5215, 322, 441, 43, 53, 44, 31958, 13, 17499, 321, 486, 574, 51852], 'temperature': 0.0, 'avg_logprob': -0.17457430815893757, 'compression_ratio': 1.8537549407114624, 'no_speech_prob': 0.12458526343107224}, {'id': 52, 'seek': 35986, 'start': 359.86, 'end': 366.18, 'text': ' at the foundations of static analysis foundation of something referred to as data flow analysis', 'tokens': [50364, 412, 264, 22467, 295, 13437, 5215, 7030, 295, 746, 10839, 281, 382, 1412, 3095, 5215, 50680], 'temperature': 0.0, 'avg_logprob': -0.1402129782251565, 'compression_ratio': 1.7971698113207548, 'no_speech_prob': 0.005811947863548994}, {'id': 53, 'seek': 35986, 'start': 366.18, 'end': 371.98, 'text': ' and see why does mathematically it works. Why does it work mathematically? So, it gives you', 'tokens': [50680, 293, 536, 983, 775, 44003, 309, 1985, 13, 1545, 775, 309, 589, 44003, 30, 407, 11, 309, 2709, 291, 50970], 'temperature': 0.0, 'avg_logprob': -0.1402129782251565, 'compression_ratio': 1.7971698113207548, 'no_speech_prob': 0.005811947863548994}, {'id': 54, 'seek': 35986, 'start': 371.98, 'end': 378.1, 'text': ' some very interesting guarantees that if you have analysis which looks like this it is surely going', 'tokens': [50970, 512, 588, 1880, 32567, 300, 498, 291, 362, 5215, 597, 1542, 411, 341, 309, 307, 11468, 516, 51276], 'temperature': 0.0, 'avg_logprob': -0.1402129782251565, 'compression_ratio': 1.7971698113207548, 'no_speech_prob': 0.005811947863548994}, {'id': 55, 'seek': 35986, 'start': 378.1, 'end': 382.5, 'text': ' to give you something like this. So, we will see why how does it even end up giving you those', 'tokens': [51276, 281, 976, 291, 746, 411, 341, 13, 407, 11, 321, 486, 536, 983, 577, 775, 309, 754, 917, 493, 2902, 291, 729, 51496], 'temperature': 0.0, 'avg_logprob': -0.1402129782251565, 'compression_ratio': 1.7971698113207548, 'no_speech_prob': 0.005811947863548994}, {'id': 56, 'seek': 38250, 'start': 382.5, 'end': 389.82, 'text': ' guarantees and tomorrow we will try to finish off the analysis. So, the analysis target will', 'tokens': [50364, 32567, 293, 4153, 321, 486, 853, 281, 2413, 766, 264, 5215, 13, 407, 11, 264, 5215, 3779, 486, 50730], 'temperature': 0.0, 'avg_logprob': -0.11588563475497933, 'compression_ratio': 1.7077625570776256, 'no_speech_prob': 0.07917600870132446}, {'id': 57, 'seek': 38250, 'start': 389.82, 'end': 397.16, 'text': ' be this program. Eventually we would like to write a static analyzer which is able to tell', 'tokens': [50730, 312, 341, 1461, 13, 17586, 321, 576, 411, 281, 2464, 257, 13437, 6459, 4527, 597, 307, 1075, 281, 980, 51097], 'temperature': 0.0, 'avg_logprob': -0.11588563475497933, 'compression_ratio': 1.7077625570776256, 'no_speech_prob': 0.07917600870132446}, {'id': 58, 'seek': 38250, 'start': 397.16, 'end': 403.14, 'text': ' me something why this program might be broken and maybe catch such programs some other programs', 'tokens': [51097, 385, 746, 983, 341, 1461, 1062, 312, 5463, 293, 1310, 3745, 1270, 4268, 512, 661, 4268, 51396], 'temperature': 0.0, 'avg_logprob': -0.11588563475497933, 'compression_ratio': 1.7077625570776256, 'no_speech_prob': 0.07917600870132446}, {'id': 59, 'seek': 38250, 'start': 403.14, 'end': 411.74, 'text': ' like this. The last day we will try to look at again depends on what is the pace of the class.', 'tokens': [51396, 411, 341, 13, 440, 1036, 786, 321, 486, 853, 281, 574, 412, 797, 5946, 322, 437, 307, 264, 11638, 295, 264, 1508, 13, 51826], 'temperature': 0.0, 'avg_logprob': -0.11588563475497933, 'compression_ratio': 1.7077625570776256, 'no_speech_prob': 0.07917600870132446}, {'id': 60, 'seek': 41174, 'start': 411.78000000000003, 'end': 417.46000000000004, 'text': ' The last day we will try to look at dynamic analysis. For the same program we will write', 'tokens': [50366, 440, 1036, 786, 321, 486, 853, 281, 574, 412, 8546, 5215, 13, 1171, 264, 912, 1461, 321, 486, 2464, 50650], 'temperature': 0.0, 'avg_logprob': -0.12294234810294685, 'compression_ratio': 1.7819905213270142, 'no_speech_prob': 0.0020160144194960594}, {'id': 61, 'seek': 41174, 'start': 417.46000000000004, 'end': 423.34000000000003, 'text': ' a dynamic analysis and we will try to understand if the dynamic analysis can trigger the bug and', 'tokens': [50650, 257, 8546, 5215, 293, 321, 486, 853, 281, 1223, 498, 264, 8546, 5215, 393, 7875, 264, 7426, 293, 50944], 'temperature': 0.0, 'avg_logprob': -0.12294234810294685, 'compression_ratio': 1.7819905213270142, 'no_speech_prob': 0.0020160144194960594}, {'id': 62, 'seek': 41174, 'start': 423.34000000000003, 'end': 431.74, 'text': ' show you that where the problem is. Looks good. So, the class is going to be very interactive.', 'tokens': [50944, 855, 291, 300, 689, 264, 1154, 307, 13, 10027, 665, 13, 407, 11, 264, 1508, 307, 516, 281, 312, 588, 15141, 13, 51364], 'temperature': 0.0, 'avg_logprob': -0.12294234810294685, 'compression_ratio': 1.7819905213270142, 'no_speech_prob': 0.0020160144194960594}, {'id': 63, 'seek': 41174, 'start': 431.74, 'end': 437.06, 'text': ' I will throw a lot of questions at you. You have to throw a lot of questions at me otherwise it', 'tokens': [51364, 286, 486, 3507, 257, 688, 295, 1651, 412, 291, 13, 509, 362, 281, 3507, 257, 688, 295, 1651, 412, 385, 5911, 309, 51630], 'temperature': 0.0, 'avg_logprob': -0.12294234810294685, 'compression_ratio': 1.7819905213270142, 'no_speech_prob': 0.0020160144194960594}, {'id': 64, 'seek': 43706, 'start': 437.06, 'end': 442.22, 'text': ' will be one sided you will get bombarded with questions only. So, the attack is the best', 'tokens': [50364, 486, 312, 472, 41651, 291, 486, 483, 7851, 22803, 365, 1651, 787, 13, 407, 11, 264, 2690, 307, 264, 1151, 50622], 'temperature': 0.0, 'avg_logprob': -0.14899539947509766, 'compression_ratio': 1.8828451882845187, 'no_speech_prob': 0.3175744116306305}, {'id': 65, 'seek': 43706, 'start': 442.22, 'end': 447.46, 'text': ' defense. So, you should start asking questions otherwise then it is a one sided game. So,', 'tokens': [50622, 7654, 13, 407, 11, 291, 820, 722, 3365, 1651, 5911, 550, 309, 307, 257, 472, 41651, 1216, 13, 407, 11, 50884], 'temperature': 0.0, 'avg_logprob': -0.14899539947509766, 'compression_ratio': 1.8828451882845187, 'no_speech_prob': 0.3175744116306305}, {'id': 66, 'seek': 43706, 'start': 447.46, 'end': 453.86, 'text': ' the other thing is that if you do not keep it interactively interactive we will both bore', 'tokens': [50884, 264, 661, 551, 307, 300, 498, 291, 360, 406, 1066, 309, 4648, 3413, 15141, 321, 486, 1293, 26002, 51204], 'temperature': 0.0, 'avg_logprob': -0.14899539947509766, 'compression_ratio': 1.8828451882845187, 'no_speech_prob': 0.3175744116306305}, {'id': 67, 'seek': 43706, 'start': 453.86, 'end': 459.9, 'text': ' each other out. So, it should not happen. Wherever you do not understand something or', 'tokens': [51204, 1184, 661, 484, 13, 407, 11, 309, 820, 406, 1051, 13, 30903, 291, 360, 406, 1223, 746, 420, 51506], 'temperature': 0.0, 'avg_logprob': -0.14899539947509766, 'compression_ratio': 1.8828451882845187, 'no_speech_prob': 0.3175744116306305}, {'id': 68, 'seek': 43706, 'start': 459.9, 'end': 464.94, 'text': ' wherever you want something to be repeated please let me know and we will do it then and there.', 'tokens': [51506, 8660, 291, 528, 746, 281, 312, 10477, 1767, 718, 385, 458, 293, 321, 486, 360, 309, 550, 293, 456, 13, 51758], 'temperature': 0.0, 'avg_logprob': -0.14899539947509766, 'compression_ratio': 1.8828451882845187, 'no_speech_prob': 0.3175744116306305}, {'id': 69, 'seek': 46494, 'start': 464.94, 'end': 469.58, 'text': ' We will not wait for some later doubt clearing session or anything like that. Then and there we', 'tokens': [50364, 492, 486, 406, 1699, 337, 512, 1780, 6385, 23937, 5481, 420, 1340, 411, 300, 13, 1396, 293, 456, 321, 50596], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 70, 'seek': 46494, 'start': 469.58, 'end': 473.42, 'text': ' will try to clarify it. It is not important how much we cover it is important that whatever we', 'tokens': [50596, 486, 853, 281, 17594, 309, 13, 467, 307, 406, 1021, 577, 709, 321, 2060, 309, 307, 1021, 300, 2035, 321, 50788], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 71, 'seek': 46494, 'start': 473.42, 'end': 479.14, 'text': ' cover you understand it and are able to do it. So, this is a very hands on course. Unless you', 'tokens': [50788, 2060, 291, 1223, 309, 293, 366, 1075, 281, 360, 309, 13, 407, 11, 341, 307, 257, 588, 2377, 322, 1164, 13, 16581, 291, 51074], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 72, 'seek': 46494, 'start': 479.14, 'end': 484.02, 'text': ' are able to implement whatever we are talking about it does not help. You will not even be', 'tokens': [51074, 366, 1075, 281, 4445, 2035, 321, 366, 1417, 466, 309, 775, 406, 854, 13, 509, 486, 406, 754, 312, 51318], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 73, 'seek': 46494, 'start': 484.02, 'end': 489.38, 'text': ' able to carry this information for another week after this. You will forget completely everything.', 'tokens': [51318, 1075, 281, 3985, 341, 1589, 337, 1071, 1243, 934, 341, 13, 509, 486, 2870, 2584, 1203, 13, 51586], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 74, 'seek': 46494, 'start': 489.38, 'end': 494.5, 'text': ' So, it is very important that we finish our assignments and we have to work little slog', 'tokens': [51586, 407, 11, 309, 307, 588, 1021, 300, 321, 2413, 527, 22546, 293, 321, 362, 281, 589, 707, 49760, 51842], 'temperature': 0.0, 'avg_logprob': -0.15005063277024488, 'compression_ratio': 1.8733333333333333, 'no_speech_prob': 0.1361405849456787}, {'id': 75, 'seek': 49450, 'start': 494.74, 'end': 498.98, 'text': ' hard on this because I will try to cover a lot of things. Yeah.', 'tokens': [50376, 1152, 322, 341, 570, 286, 486, 853, 281, 2060, 257, 688, 295, 721, 13, 865, 13, 50588], 'temperature': 0.0, 'avg_logprob': -0.28130982846629865, 'compression_ratio': 1.3695652173913044, 'no_speech_prob': 0.03850114718079567}, {'id': 76, 'seek': 49450, 'start': 498.98, 'end': 508.62, 'text': ' Why do we need different presentations?', 'tokens': [50588, 1545, 360, 321, 643, 819, 18964, 30, 51070], 'temperature': 0.0, 'avg_logprob': -0.28130982846629865, 'compression_ratio': 1.3695652173913044, 'no_speech_prob': 0.03850114718079567}, {'id': 77, 'seek': 49450, 'start': 508.62, 'end': 520.74, 'text': ' Okay that is a very good question. Maybe I will answer that question after the break.', 'tokens': [51070, 1033, 300, 307, 257, 588, 665, 1168, 13, 2704, 286, 486, 1867, 300, 1168, 934, 264, 1821, 13, 51676], 'temperature': 0.0, 'avg_logprob': -0.28130982846629865, 'compression_ratio': 1.3695652173913044, 'no_speech_prob': 0.03850114718079567}, {'id': 78, 'seek': 52074, 'start': 520.74, 'end': 528.66, 'text': ' I will show you something rather than tell you something. So, you will learn about optimization.', 'tokens': [50364, 286, 486, 855, 291, 746, 2831, 813, 980, 291, 746, 13, 407, 11, 291, 486, 1466, 466, 19618, 13, 50760], 'temperature': 0.0, 'avg_logprob': -0.1938054751505894, 'compression_ratio': 1.9551020408163264, 'no_speech_prob': 0.2501387298107147}, {'id': 79, 'seek': 52074, 'start': 528.66, 'end': 532.74, 'text': ' So, Krishna will come after me. So, Krishna and Professor Govind Rajan they will talk about', 'tokens': [50760, 407, 11, 27153, 486, 808, 934, 385, 13, 407, 11, 27153, 293, 8419, 1037, 85, 471, 16745, 282, 436, 486, 751, 466, 50964], 'temperature': 0.0, 'avg_logprob': -0.1938054751505894, 'compression_ratio': 1.9551020408163264, 'no_speech_prob': 0.2501387298107147}, {'id': 80, 'seek': 52074, 'start': 532.74, 'end': 538.94, 'text': ' optimizations and then you will realize more that why these optimizations are required and so on.', 'tokens': [50964, 5028, 14455, 293, 550, 291, 486, 4325, 544, 300, 983, 613, 5028, 14455, 366, 4739, 293, 370, 322, 13, 51274], 'temperature': 0.0, 'avg_logprob': -0.1938054751505894, 'compression_ratio': 1.9551020408163264, 'no_speech_prob': 0.2501387298107147}, {'id': 81, 'seek': 52074, 'start': 538.94, 'end': 542.34, 'text': ' But I will give you I will show you a small program maybe I will make it during the break', 'tokens': [51274, 583, 286, 486, 976, 291, 286, 486, 855, 291, 257, 1359, 1461, 1310, 286, 486, 652, 309, 1830, 264, 1821, 51444], 'temperature': 0.0, 'avg_logprob': -0.1938054751505894, 'compression_ratio': 1.9551020408163264, 'no_speech_prob': 0.2501387298107147}, {'id': 82, 'seek': 52074, 'start': 542.34, 'end': 548.0600000000001, 'text': ' and I will show you how much effect an optimization can have on the programs performance. So, you will', 'tokens': [51444, 293, 286, 486, 855, 291, 577, 709, 1802, 364, 19618, 393, 362, 322, 264, 4268, 3389, 13, 407, 11, 291, 486, 51730], 'temperature': 0.0, 'avg_logprob': -0.1938054751505894, 'compression_ratio': 1.9551020408163264, 'no_speech_prob': 0.2501387298107147}, {'id': 83, 'seek': 54806, 'start': 548.06, 'end': 554.66, 'text': ' really be interested to know how can we really make the program efficient. Excellent question.', 'tokens': [50364, 534, 312, 3102, 281, 458, 577, 393, 321, 534, 652, 264, 1461, 7148, 13, 16723, 1168, 13, 50694], 'temperature': 0.0, 'avg_logprob': -0.17430180239390178, 'compression_ratio': 1.6536796536796536, 'no_speech_prob': 0.07998264580965042}, {'id': 84, 'seek': 54806, 'start': 554.66, 'end': 563.3, 'text': ' So, in this at least in this session the analysis we are doing are can be used for optimization or', 'tokens': [50694, 407, 11, 294, 341, 412, 1935, 294, 341, 5481, 264, 5215, 321, 366, 884, 366, 393, 312, 1143, 337, 19618, 420, 51126], 'temperature': 0.0, 'avg_logprob': -0.17430180239390178, 'compression_ratio': 1.6536796536796536, 'no_speech_prob': 0.07998264580965042}, {'id': 85, 'seek': 54806, 'start': 563.3, 'end': 568.6199999999999, 'text': ' can be used for human consumption. Like for instance in this case casting a bug or understanding a', 'tokens': [51126, 393, 312, 1143, 337, 1952, 12126, 13, 1743, 337, 5197, 294, 341, 1389, 17301, 257, 7426, 420, 3701, 257, 51392], 'temperature': 0.0, 'avg_logprob': -0.17430180239390178, 'compression_ratio': 1.6536796536796536, 'no_speech_prob': 0.07998264580965042}, {'id': 86, 'seek': 54806, 'start': 568.6199999999999, 'end': 574.4599999999999, 'text': ' program. But you will see that Krishna will probably talk about that the information that', 'tokens': [51392, 1461, 13, 583, 291, 486, 536, 300, 27153, 486, 1391, 751, 466, 300, 264, 1589, 300, 51684], 'temperature': 0.0, 'avg_logprob': -0.17430180239390178, 'compression_ratio': 1.6536796536796536, 'no_speech_prob': 0.07998264580965042}, {'id': 87, 'seek': 57446, 'start': 574.46, 'end': 578.62, 'text': ' we get from static analysis how can he exploit those information for additional optimizations.', 'tokens': [50364, 321, 483, 490, 13437, 5215, 577, 393, 415, 25924, 729, 1589, 337, 4497, 5028, 14455, 13, 50572], 'temperature': 0.0, 'avg_logprob': -0.28212199003800104, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.12043541669845581}, {'id': 88, 'seek': 57446, 'start': 578.62, 'end': 590.38, 'text': ' So, now let us come to static analysis. So, static analysis let me try to pull out my slides.', 'tokens': [50572, 407, 11, 586, 718, 505, 808, 281, 13437, 5215, 13, 407, 11, 13437, 5215, 718, 385, 853, 281, 2235, 484, 452, 9788, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.28212199003800104, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.12043541669845581}, {'id': 89, 'seek': 57446, 'start': 590.38, 'end': 603.38, 'text': " Looks like Murphy's law has stuck again. But anyway so, I am not going to pull out that set", 'tokens': [51160, 10027, 411, 28549, 311, 2101, 575, 5541, 797, 13, 583, 4033, 370, 11, 286, 669, 406, 516, 281, 2235, 484, 300, 992, 51810], 'temperature': 0.0, 'avg_logprob': -0.28212199003800104, 'compression_ratio': 1.5909090909090908, 'no_speech_prob': 0.12043541669845581}, {'id': 90, 'seek': 60338, 'start': 603.38, 'end': 619.18, 'text': ' of slides. I think they should do. So, any program there are two set of things that are', 'tokens': [50364, 295, 9788, 13, 286, 519, 436, 820, 360, 13, 407, 11, 604, 1461, 456, 366, 732, 992, 295, 721, 300, 366, 51154], 'temperature': 0.0, 'avg_logprob': -0.17603151848975648, 'compression_ratio': 1.3692307692307693, 'no_speech_prob': 0.022219661623239517}, {'id': 91, 'seek': 60338, 'start': 619.18, 'end': 630.82, 'text': ' relevant. One is right. So, one is that how have you written your control flow statements.', 'tokens': [51154, 7340, 13, 1485, 307, 558, 13, 407, 11, 472, 307, 300, 577, 362, 291, 3720, 428, 1969, 3095, 12363, 13, 51736], 'temperature': 0.0, 'avg_logprob': -0.17603151848975648, 'compression_ratio': 1.3692307692307693, 'no_speech_prob': 0.022219661623239517}, {'id': 92, 'seek': 63082, 'start': 630.82, 'end': 635.6600000000001, 'text': ' Control flow statements are statements like if then else, for loops and so on. So, essentially', 'tokens': [50364, 12912, 3095, 12363, 366, 12363, 411, 498, 550, 1646, 11, 337, 16121, 293, 370, 322, 13, 407, 11, 4476, 50606], 'temperature': 0.0, 'avg_logprob': -0.15364965117803894, 'compression_ratio': 1.773076923076923, 'no_speech_prob': 0.07358130067586899}, {'id': 93, 'seek': 63082, 'start': 635.6600000000001, 'end': 641.1400000000001, 'text': ' they dictate how does the program counter move through the program. The other part of the program', 'tokens': [50606, 436, 36071, 577, 775, 264, 1461, 5682, 1286, 807, 264, 1461, 13, 440, 661, 644, 295, 264, 1461, 50880], 'temperature': 0.0, 'avg_logprob': -0.15364965117803894, 'compression_ratio': 1.773076923076923, 'no_speech_prob': 0.07358130067586899}, {'id': 94, 'seek': 63082, 'start': 641.1400000000001, 'end': 646.62, 'text': ' is about how do you manipulate your variables. Like what do you compute into a variable,', 'tokens': [50880, 307, 466, 577, 360, 291, 20459, 428, 9102, 13, 1743, 437, 360, 291, 14722, 666, 257, 7006, 11, 51154], 'temperature': 0.0, 'avg_logprob': -0.15364965117803894, 'compression_ratio': 1.773076923076923, 'no_speech_prob': 0.07358130067586899}, {'id': 95, 'seek': 63082, 'start': 646.62, 'end': 653.94, 'text': ' where does that value flow into right. So, exactly to analyze these two components of a', 'tokens': [51154, 689, 775, 300, 2158, 3095, 666, 558, 13, 407, 11, 2293, 281, 12477, 613, 732, 6677, 295, 257, 51520], 'temperature': 0.0, 'avg_logprob': -0.15364965117803894, 'compression_ratio': 1.773076923076923, 'no_speech_prob': 0.07358130067586899}, {'id': 96, 'seek': 63082, 'start': 653.94, 'end': 659.4200000000001, 'text': ' program we have a different set of analysis. We have something called control flow analysis', 'tokens': [51520, 1461, 321, 362, 257, 819, 992, 295, 5215, 13, 492, 362, 746, 1219, 1969, 3095, 5215, 51794], 'temperature': 0.0, 'avg_logprob': -0.15364965117803894, 'compression_ratio': 1.773076923076923, 'no_speech_prob': 0.07358130067586899}, {'id': 97, 'seek': 65942, 'start': 659.5799999999999, 'end': 664.9399999999999, 'text': ' which essentially says that in a given program how does the program counter move or how does', 'tokens': [50372, 597, 4476, 1619, 300, 294, 257, 2212, 1461, 577, 775, 264, 1461, 5682, 1286, 420, 577, 775, 50640], 'temperature': 0.0, 'avg_logprob': -0.16369079141055837, 'compression_ratio': 2.0669642857142856, 'no_speech_prob': 0.206194669008255}, {'id': 98, 'seek': 65942, 'start': 664.9399999999999, 'end': 669.6999999999999, 'text': ' the flow of the control move through the program. The other types of analysis are referred to', 'tokens': [50640, 264, 3095, 295, 264, 1969, 1286, 807, 264, 1461, 13, 440, 661, 3467, 295, 5215, 366, 10839, 281, 50878], 'temperature': 0.0, 'avg_logprob': -0.16369079141055837, 'compression_ratio': 2.0669642857142856, 'no_speech_prob': 0.206194669008255}, {'id': 99, 'seek': 65942, 'start': 669.6999999999999, 'end': 673.6999999999999, 'text': ' as data flow analysis which says how do values move through the program. Can you analyze', 'tokens': [50878, 382, 1412, 3095, 5215, 597, 1619, 577, 360, 4190, 1286, 807, 264, 1461, 13, 1664, 291, 12477, 51078], 'temperature': 0.0, 'avg_logprob': -0.16369079141055837, 'compression_ratio': 2.0669642857142856, 'no_speech_prob': 0.206194669008255}, {'id': 100, 'seek': 65942, 'start': 673.6999999999999, 'end': 680.14, 'text': ' and tell us how values move through the program. So, we will start with control flow analysis', 'tokens': [51078, 293, 980, 505, 577, 4190, 1286, 807, 264, 1461, 13, 407, 11, 321, 486, 722, 365, 1969, 3095, 5215, 51400], 'temperature': 0.0, 'avg_logprob': -0.16369079141055837, 'compression_ratio': 2.0669642857142856, 'no_speech_prob': 0.206194669008255}, {'id': 101, 'seek': 65942, 'start': 680.14, 'end': 687.06, 'text': ' and so essentially it is a set of algorithms which analyze the program statically. Of course,', 'tokens': [51400, 293, 370, 4476, 309, 307, 257, 992, 295, 14642, 597, 12477, 264, 1461, 2219, 984, 13, 2720, 1164, 11, 51746], 'temperature': 0.0, 'avg_logprob': -0.16369079141055837, 'compression_ratio': 2.0669642857142856, 'no_speech_prob': 0.206194669008255}, {'id': 102, 'seek': 68706, 'start': 687.3, 'end': 692.9799999999999, 'text': ' you can even have dynamic variants of these algorithms to determine the control flow behavior', 'tokens': [50376, 291, 393, 754, 362, 8546, 21669, 295, 613, 14642, 281, 6997, 264, 1969, 3095, 5223, 50660], 'temperature': 0.0, 'avg_logprob': -0.13370791021383033, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.004901993088424206}, {'id': 103, 'seek': 68706, 'start': 692.9799999999999, 'end': 698.8199999999999, 'text': ' of a program. So, the reference is here and you can read more. So, let us try to understand', 'tokens': [50660, 295, 257, 1461, 13, 407, 11, 264, 6408, 307, 510, 293, 291, 393, 1401, 544, 13, 407, 11, 718, 505, 853, 281, 1223, 50952], 'temperature': 0.0, 'avg_logprob': -0.13370791021383033, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.004901993088424206}, {'id': 104, 'seek': 68706, 'start': 698.8199999999999, 'end': 702.42, 'text': ' what the difference between control flow analysis and data flow analysis.', 'tokens': [50952, 437, 264, 2649, 1296, 1969, 3095, 5215, 293, 1412, 3095, 5215, 13, 51132], 'temperature': 0.0, 'avg_logprob': -0.13370791021383033, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.004901993088424206}, {'id': 105, 'seek': 68706, 'start': 702.42, 'end': 707.9399999999999, 'text': ' So, let us say first example I pick is something called alias analysis. So, alias analysis what', 'tokens': [51132, 407, 11, 718, 505, 584, 700, 1365, 286, 1888, 307, 746, 1219, 419, 4609, 5215, 13, 407, 11, 419, 4609, 5215, 437, 51408], 'temperature': 0.0, 'avg_logprob': -0.13370791021383033, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.004901993088424206}, {'id': 106, 'seek': 68706, 'start': 707.9399999999999, 'end': 713.0999999999999, 'text': ' it tries to answer is that let us say you have a lot of pointer variables in a program. I would', 'tokens': [51408, 309, 9898, 281, 1867, 307, 300, 718, 505, 584, 291, 362, 257, 688, 295, 23918, 9102, 294, 257, 1461, 13, 286, 576, 51666], 'temperature': 0.0, 'avg_logprob': -0.13370791021383033, 'compression_ratio': 1.8636363636363635, 'no_speech_prob': 0.004901993088424206}, {'id': 107, 'seek': 71310, 'start': 713.1, 'end': 719.66, 'text': ' like to understand that which pointer variable is accessing or pointing to which variable which', 'tokens': [50364, 411, 281, 1223, 300, 597, 23918, 7006, 307, 26440, 420, 12166, 281, 597, 7006, 597, 50692], 'temperature': 0.0, 'avg_logprob': -0.11680481650612572, 'compression_ratio': 1.8341232227488151, 'no_speech_prob': 0.013155954889953136}, {'id': 108, 'seek': 71310, 'start': 719.66, 'end': 725.9, 'text': ' other location memory location right. Do you understand what the analysis is. So, I will look', 'tokens': [50692, 661, 4914, 4675, 4914, 558, 13, 1144, 291, 1223, 437, 264, 5215, 307, 13, 407, 11, 286, 486, 574, 51004], 'temperature': 0.0, 'avg_logprob': -0.11680481650612572, 'compression_ratio': 1.8341232227488151, 'no_speech_prob': 0.013155954889953136}, {'id': 109, 'seek': 71310, 'start': 725.9, 'end': 731.22, 'text': ' at all my pointers in my program and I will say that for each pointer I would like to figure out', 'tokens': [51004, 412, 439, 452, 44548, 294, 452, 1461, 293, 286, 486, 584, 300, 337, 1184, 23918, 286, 576, 411, 281, 2573, 484, 51270], 'temperature': 0.0, 'avg_logprob': -0.11680481650612572, 'compression_ratio': 1.8341232227488151, 'no_speech_prob': 0.013155954889953136}, {'id': 110, 'seek': 71310, 'start': 731.22, 'end': 737.0600000000001, 'text': ' which is the memory location that it is pointing to. What sort of analysis do you think it is? Is it', 'tokens': [51270, 597, 307, 264, 4675, 4914, 300, 309, 307, 12166, 281, 13, 708, 1333, 295, 5215, 360, 291, 519, 309, 307, 30, 1119, 309, 51562], 'temperature': 0.0, 'avg_logprob': -0.11680481650612572, 'compression_ratio': 1.8341232227488151, 'no_speech_prob': 0.013155954889953136}, {'id': 111, 'seek': 73706, 'start': 737.2199999999999, 'end': 745.9399999999999, 'text': ' control flow analysis or is it a data flow analysis? Excellent. Why is that? Because for', 'tokens': [50372, 1969, 3095, 5215, 420, 307, 309, 257, 1412, 3095, 5215, 30, 16723, 13, 1545, 307, 300, 30, 1436, 337, 50808], 'temperature': 0.0, 'avg_logprob': -0.21129408650014592, 'compression_ratio': 1.605263157894737, 'no_speech_prob': 0.08245911449193954}, {'id': 112, 'seek': 73706, 'start': 745.9399999999999, 'end': 751.4599999999999, 'text': ' the pointers the addresses is nothing but data right and essentially what we need to track is', 'tokens': [50808, 264, 44548, 264, 16862, 307, 1825, 457, 1412, 558, 293, 4476, 437, 321, 643, 281, 2837, 307, 51084], 'temperature': 0.0, 'avg_logprob': -0.21129408650014592, 'compression_ratio': 1.605263157894737, 'no_speech_prob': 0.08245911449193954}, {'id': 113, 'seek': 73706, 'start': 751.4599999999999, 'end': 757.6999999999999, 'text': ' how do they move through the program right. So, okay let us say I have this particular problem', 'tokens': [51084, 577, 360, 436, 1286, 807, 264, 1461, 558, 13, 407, 11, 1392, 718, 505, 584, 286, 362, 341, 1729, 1154, 51396], 'temperature': 0.0, 'avg_logprob': -0.21129408650014592, 'compression_ratio': 1.605263157894737, 'no_speech_prob': 0.08245911449193954}, {'id': 114, 'seek': 73706, 'start': 757.6999999999999, 'end': 763.3399999999999, 'text': ' which says that what are the nodes that must visit a node n along all paths from n to x.', 'tokens': [51396, 597, 1619, 300, 437, 366, 264, 13891, 300, 1633, 3441, 257, 9984, 297, 2051, 439, 14518, 490, 297, 281, 2031, 13, 51678], 'temperature': 0.0, 'avg_logprob': -0.21129408650014592, 'compression_ratio': 1.605263157894737, 'no_speech_prob': 0.08245911449193954}, {'id': 115, 'seek': 76334, 'start': 763.34, 'end': 769.14, 'text': ' Let me just define what a node is assume that every statement in your program is a node right.', 'tokens': [50364, 961, 385, 445, 6964, 437, 257, 9984, 307, 6552, 300, 633, 5629, 294, 428, 1461, 307, 257, 9984, 558, 13, 50654], 'temperature': 0.0, 'avg_logprob': -0.1443266126844618, 'compression_ratio': 1.6986301369863013, 'no_speech_prob': 0.03839745745062828}, {'id': 116, 'seek': 76334, 'start': 769.14, 'end': 778.5, 'text': ' So, now I can come up with something called I can come up with a graph for a program I', 'tokens': [50654, 407, 11, 586, 286, 393, 808, 493, 365, 746, 1219, 286, 393, 808, 493, 365, 257, 4295, 337, 257, 1461, 286, 51122], 'temperature': 0.0, 'avg_logprob': -0.1443266126844618, 'compression_ratio': 1.6986301369863013, 'no_speech_prob': 0.03839745745062828}, {'id': 117, 'seek': 76334, 'start': 778.5, 'end': 783.1800000000001, 'text': ' will actually properly define that but or let us say do not even bother about it. Let us say I', 'tokens': [51122, 486, 767, 6108, 6964, 300, 457, 420, 718, 505, 584, 360, 406, 754, 8677, 466, 309, 13, 961, 505, 584, 286, 51356], 'temperature': 0.0, 'avg_logprob': -0.1443266126844618, 'compression_ratio': 1.6986301369863013, 'no_speech_prob': 0.03839745745062828}, {'id': 118, 'seek': 76334, 'start': 783.1800000000001, 'end': 790.7, 'text': ' want to figure out that which is the instruction in my program which will surely be executed no', 'tokens': [51356, 528, 281, 2573, 484, 300, 597, 307, 264, 10951, 294, 452, 1461, 597, 486, 11468, 312, 17577, 572, 51732], 'temperature': 0.0, 'avg_logprob': -0.1443266126844618, 'compression_ratio': 1.6986301369863013, 'no_speech_prob': 0.03839745745062828}, {'id': 119, 'seek': 79070, 'start': 790.7, 'end': 796.9000000000001, 'text': ' matter which execution I run no matter what inputs are on my program with which are the', 'tokens': [50364, 1871, 597, 15058, 286, 1190, 572, 1871, 437, 15743, 366, 322, 452, 1461, 365, 597, 366, 264, 50674], 'temperature': 0.0, 'avg_logprob': -0.1880375828061785, 'compression_ratio': 1.8784313725490196, 'no_speech_prob': 0.021984713152050972}, {'id': 120, 'seek': 79070, 'start': 796.9000000000001, 'end': 802.1800000000001, 'text': ' instruction which will surely surely get executed. What is the type of analysis? Is it a control flow', 'tokens': [50674, 10951, 597, 486, 11468, 11468, 483, 17577, 13, 708, 307, 264, 2010, 295, 5215, 30, 1119, 309, 257, 1969, 3095, 50938], 'temperature': 0.0, 'avg_logprob': -0.1880375828061785, 'compression_ratio': 1.8784313725490196, 'no_speech_prob': 0.021984713152050972}, {'id': 121, 'seek': 79070, 'start': 802.1800000000001, 'end': 806.3000000000001, 'text': ' analysis or is it a data flow analysis? Control flow. Control flow because I am just trying to', 'tokens': [50938, 5215, 420, 307, 309, 257, 1412, 3095, 5215, 30, 12912, 3095, 13, 12912, 3095, 570, 286, 669, 445, 1382, 281, 51144], 'temperature': 0.0, 'avg_logprob': -0.1880375828061785, 'compression_ratio': 1.8784313725490196, 'no_speech_prob': 0.021984713152050972}, {'id': 122, 'seek': 79070, 'start': 806.3000000000001, 'end': 811.58, 'text': " figure out does the control read that statement or not that is all I care about. I really don't", 'tokens': [51144, 2573, 484, 775, 264, 1969, 1401, 300, 5629, 420, 406, 300, 307, 439, 286, 1127, 466, 13, 286, 534, 500, 380, 51408], 'temperature': 0.0, 'avg_logprob': -0.1880375828061785, 'compression_ratio': 1.8784313725490196, 'no_speech_prob': 0.021984713152050972}, {'id': 123, 'seek': 79070, 'start': 811.58, 'end': 818.7, 'text': " care about that how can it reach to the program or I don't care about the values of the variables.", 'tokens': [51408, 1127, 466, 300, 577, 393, 309, 2524, 281, 264, 1461, 420, 286, 500, 380, 1127, 466, 264, 4190, 295, 264, 9102, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.1880375828061785, 'compression_ratio': 1.8784313725490196, 'no_speech_prob': 0.021984713152050972}, {'id': 124, 'seek': 81870, 'start': 818.7, 'end': 824.1400000000001, 'text': ' Of course, there are certain scenarios where you have like okay we will talk about them later. So,', 'tokens': [50364, 2720, 1164, 11, 456, 366, 1629, 15077, 689, 291, 362, 411, 1392, 321, 486, 751, 466, 552, 1780, 13, 407, 11, 50636], 'temperature': 0.0, 'avg_logprob': -0.1739277406172319, 'compression_ratio': 1.838095238095238, 'no_speech_prob': 0.006889333017170429}, {'id': 125, 'seek': 81870, 'start': 824.1400000000001, 'end': 830.58, 'text': ' mostly it is control flow analysis. Liveness analysis. So, liveness analysis says that are', 'tokens': [50636, 5240, 309, 307, 1969, 3095, 5215, 13, 441, 8477, 5215, 13, 407, 11, 375, 553, 442, 5215, 1619, 300, 366, 50958], 'temperature': 0.0, 'avg_logprob': -0.1739277406172319, 'compression_ratio': 1.838095238095238, 'no_speech_prob': 0.006889333017170429}, {'id': 126, 'seek': 81870, 'start': 830.58, 'end': 837.38, 'text': ' there variables in my program which are not going to be used ever again or are there variables in', 'tokens': [50958, 456, 9102, 294, 452, 1461, 597, 366, 406, 516, 281, 312, 1143, 1562, 797, 420, 366, 456, 9102, 294, 51298], 'temperature': 0.0, 'avg_logprob': -0.1739277406172319, 'compression_ratio': 1.838095238095238, 'no_speech_prob': 0.006889333017170429}, {'id': 127, 'seek': 81870, 'start': 837.38, 'end': 843.86, 'text': ' my program which contain values which are never going to be consumed by any other statement later.', 'tokens': [51298, 452, 1461, 597, 5304, 4190, 597, 366, 1128, 516, 281, 312, 21226, 538, 604, 661, 5629, 1780, 13, 51622], 'temperature': 0.0, 'avg_logprob': -0.1739277406172319, 'compression_ratio': 1.838095238095238, 'no_speech_prob': 0.006889333017170429}, {'id': 128, 'seek': 84386, 'start': 843.86, 'end': 849.82, 'text': ' Why is that interesting? Why should I even care about something like this?', 'tokens': [50364, 1545, 307, 300, 1880, 30, 1545, 820, 286, 754, 1127, 466, 746, 411, 341, 30, 50662], 'temperature': 0.0, 'avg_logprob': -0.21037081421398726, 'compression_ratio': 1.5575757575757576, 'no_speech_prob': 0.05646109953522682}, {'id': 129, 'seek': 84386, 'start': 849.82, 'end': 861.3000000000001, 'text': ' Not so much but you can for instance you can remove those statements. If they are computing', 'tokens': [50662, 1726, 370, 709, 457, 291, 393, 337, 5197, 291, 393, 4159, 729, 12363, 13, 759, 436, 366, 15866, 51236], 'temperature': 0.0, 'avg_logprob': -0.21037081421398726, 'compression_ratio': 1.5575757575757576, 'no_speech_prob': 0.05646109953522682}, {'id': 130, 'seek': 84386, 'start': 861.3000000000001, 'end': 867.86, 'text': ' something which is not even going to be used then what is the point of computing that. So,', 'tokens': [51236, 746, 597, 307, 406, 754, 516, 281, 312, 1143, 550, 437, 307, 264, 935, 295, 15866, 300, 13, 407, 11, 51564], 'temperature': 0.0, 'avg_logprob': -0.21037081421398726, 'compression_ratio': 1.5575757575757576, 'no_speech_prob': 0.05646109953522682}, {'id': 131, 'seek': 86786, 'start': 867.86, 'end': 874.14, 'text': ' if I say x equals foo and foo is a very heavy function and after that function finishes and', 'tokens': [50364, 498, 286, 584, 2031, 6915, 726, 78, 293, 726, 78, 307, 257, 588, 4676, 2445, 293, 934, 300, 2445, 23615, 293, 50678], 'temperature': 0.0, 'avg_logprob': -0.1412362249274003, 'compression_ratio': 1.654867256637168, 'no_speech_prob': 0.3128992021083832}, {'id': 132, 'seek': 86786, 'start': 874.14, 'end': 881.34, 'text': ' the value gets into x I do not even use x ever again. So, why did I even compute x? So,', 'tokens': [50678, 264, 2158, 2170, 666, 2031, 286, 360, 406, 754, 764, 2031, 1562, 797, 13, 407, 11, 983, 630, 286, 754, 14722, 2031, 30, 407, 11, 51038], 'temperature': 0.0, 'avg_logprob': -0.1412362249274003, 'compression_ratio': 1.654867256637168, 'no_speech_prob': 0.3128992021083832}, {'id': 133, 'seek': 86786, 'start': 881.34, 'end': 887.14, 'text': ' this liveness analysis is able to drive an optimization referred to as dead code elimination.', 'tokens': [51038, 341, 375, 553, 442, 5215, 307, 1075, 281, 3332, 364, 19618, 10839, 281, 382, 3116, 3089, 29224, 13, 51328], 'temperature': 0.0, 'avg_logprob': -0.1412362249274003, 'compression_ratio': 1.654867256637168, 'no_speech_prob': 0.3128992021083832}, {'id': 134, 'seek': 86786, 'start': 887.14, 'end': 895.34, 'text': ' So, any statement which does not create an effect on the rest of the program does not have an impact', 'tokens': [51328, 407, 11, 604, 5629, 597, 775, 406, 1884, 364, 1802, 322, 264, 1472, 295, 264, 1461, 775, 406, 362, 364, 2712, 51738], 'temperature': 0.0, 'avg_logprob': -0.1412362249274003, 'compression_ratio': 1.654867256637168, 'no_speech_prob': 0.3128992021083832}, {'id': 135, 'seek': 89534, 'start': 895.34, 'end': 899.82, 'text': ' on the rest of the program is referred to as dead code. You run that statement or you do not run', 'tokens': [50364, 322, 264, 1472, 295, 264, 1461, 307, 10839, 281, 382, 3116, 3089, 13, 509, 1190, 300, 5629, 420, 291, 360, 406, 1190, 50588], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 136, 'seek': 89534, 'start': 899.82, 'end': 903.94, 'text': ' that statement the behavior of the program is the same or that is the expected output of the program', 'tokens': [50588, 300, 5629, 264, 5223, 295, 264, 1461, 307, 264, 912, 420, 300, 307, 264, 5176, 5598, 295, 264, 1461, 50794], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 137, 'seek': 89534, 'start': 903.94, 'end': 909.26, 'text': ' is the same. So, then we do not really need to run those statements. So, that is one of the', 'tokens': [50794, 307, 264, 912, 13, 407, 11, 550, 321, 360, 406, 534, 643, 281, 1190, 729, 12363, 13, 407, 11, 300, 307, 472, 295, 264, 51060], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 138, 'seek': 89534, 'start': 909.26, 'end': 913.7800000000001, 'text': ' optimizations. So, if your program has lot of dead code you can eliminate them and your program', 'tokens': [51060, 5028, 14455, 13, 407, 11, 498, 428, 1461, 575, 688, 295, 3116, 3089, 291, 393, 13819, 552, 293, 428, 1461, 51286], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 139, 'seek': 89534, 'start': 913.7800000000001, 'end': 917.7, 'text': ' can run faster because it is not running those statements. So, that is one of the optimizations.', 'tokens': [51286, 393, 1190, 4663, 570, 309, 307, 406, 2614, 729, 12363, 13, 407, 11, 300, 307, 472, 295, 264, 5028, 14455, 13, 51482], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 140, 'seek': 89534, 'start': 917.7, 'end': 922.46, 'text': ' In fact, it is one of the very important optimizations. That is again as we can understand', 'tokens': [51482, 682, 1186, 11, 309, 307, 472, 295, 264, 588, 1021, 5028, 14455, 13, 663, 307, 797, 382, 321, 393, 1223, 51720], 'temperature': 0.0, 'avg_logprob': -0.123887756892613, 'compression_ratio': 2.2828685258964145, 'no_speech_prob': 0.22230952978134155}, {'id': 141, 'seek': 92246, 'start': 922.62, 'end': 927.4200000000001, 'text': ' what does this analysis do? Is it a data flow analysis or is it a control flow analysis?', 'tokens': [50372, 437, 775, 341, 5215, 360, 30, 1119, 309, 257, 1412, 3095, 5215, 420, 307, 309, 257, 1969, 3095, 5215, 30, 50612], 'temperature': 0.0, 'avg_logprob': -0.18727160974876167, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.32032886147499084}, {'id': 142, 'seek': 92246, 'start': 927.4200000000001, 'end': 929.14, 'text': ' Data flow.', 'tokens': [50612, 11888, 3095, 13, 50698], 'temperature': 0.0, 'avg_logprob': -0.18727160974876167, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.32032886147499084}, {'id': 143, 'seek': 92246, 'start': 929.14, 'end': 933.5400000000001, 'text': ' Data flow because I am talking about values in those variables. So, do these values get', 'tokens': [50698, 11888, 3095, 570, 286, 669, 1417, 466, 4190, 294, 729, 9102, 13, 407, 11, 360, 613, 4190, 483, 50918], 'temperature': 0.0, 'avg_logprob': -0.18727160974876167, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.32032886147499084}, {'id': 144, 'seek': 92246, 'start': 933.5400000000001, 'end': 941.3000000000001, 'text': ' used again or not? So, now I think you have got an idea of what is control flow analysis', 'tokens': [50918, 1143, 797, 420, 406, 30, 407, 11, 586, 286, 519, 291, 362, 658, 364, 1558, 295, 437, 307, 1969, 3095, 5215, 51306], 'temperature': 0.0, 'avg_logprob': -0.18727160974876167, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.32032886147499084}, {'id': 145, 'seek': 92246, 'start': 941.3000000000001, 'end': 949.38, 'text': ' and what is data flow analysis. So, do not get mixed up now. So, for control flow analysis the', 'tokens': [51306, 293, 437, 307, 1412, 3095, 5215, 13, 407, 11, 360, 406, 483, 7467, 493, 586, 13, 407, 11, 337, 1969, 3095, 5215, 264, 51710], 'temperature': 0.0, 'avg_logprob': -0.18727160974876167, 'compression_ratio': 1.9025641025641025, 'no_speech_prob': 0.32032886147499084}, {'id': 146, 'seek': 94938, 'start': 949.38, 'end': 956.66, 'text': ' most important data structure we will be using is referred to as a CFG or a control flow graph.', 'tokens': [50364, 881, 1021, 1412, 3877, 321, 486, 312, 1228, 307, 10839, 281, 382, 257, 21792, 38, 420, 257, 1969, 3095, 4295, 13, 50728], 'temperature': 0.0, 'avg_logprob': -0.11111706082183535, 'compression_ratio': 1.9689119170984455, 'no_speech_prob': 0.1222706288099289}, {'id': 147, 'seek': 94938, 'start': 958.06, 'end': 964.18, 'text': ' So, if it is a graph then I have to tell you couple of things. I have to tell you that what', 'tokens': [50798, 407, 11, 498, 309, 307, 257, 4295, 550, 286, 362, 281, 980, 291, 1916, 295, 721, 13, 286, 362, 281, 980, 291, 300, 437, 51104], 'temperature': 0.0, 'avg_logprob': -0.11111706082183535, 'compression_ratio': 1.9689119170984455, 'no_speech_prob': 0.1222706288099289}, {'id': 148, 'seek': 94938, 'start': 964.18, 'end': 970.02, 'text': ' is the start node of this graph? Where does the graph start from? I have to tell you what are the', 'tokens': [51104, 307, 264, 722, 9984, 295, 341, 4295, 30, 2305, 775, 264, 4295, 722, 490, 30, 286, 362, 281, 980, 291, 437, 366, 264, 51396], 'temperature': 0.0, 'avg_logprob': -0.11111706082183535, 'compression_ratio': 1.9689119170984455, 'no_speech_prob': 0.1222706288099289}, {'id': 149, 'seek': 94938, 'start': 970.02, 'end': 974.74, 'text': ' nodes in this graph and I have to tell you what are the edges in this graph. If I have to tell', 'tokens': [51396, 13891, 294, 341, 4295, 293, 286, 362, 281, 980, 291, 437, 366, 264, 8819, 294, 341, 4295, 13, 759, 286, 362, 281, 980, 51632], 'temperature': 0.0, 'avg_logprob': -0.11111706082183535, 'compression_ratio': 1.9689119170984455, 'no_speech_prob': 0.1222706288099289}, {'id': 150, 'seek': 97474, 'start': 974.74, 'end': 984.42, 'text': ' you these three things I have described this graph. So, the entry to this graph is the program', 'tokens': [50364, 291, 613, 1045, 721, 286, 362, 7619, 341, 4295, 13, 407, 11, 264, 8729, 281, 341, 4295, 307, 264, 1461, 50848], 'temperature': 0.0, 'avg_logprob': -0.10830567472724505, 'compression_ratio': 2.1027027027027025, 'no_speech_prob': 0.050294119864702225}, {'id': 151, 'seek': 97474, 'start': 984.42, 'end': 989.14, 'text': ' entry point. Let me just tell you what are the nodes in this graph. The nodes in this graph are', 'tokens': [50848, 8729, 935, 13, 961, 385, 445, 980, 291, 437, 366, 264, 13891, 294, 341, 4295, 13, 440, 13891, 294, 341, 4295, 366, 51084], 'temperature': 0.0, 'avg_logprob': -0.10830567472724505, 'compression_ratio': 2.1027027027027025, 'no_speech_prob': 0.050294119864702225}, {'id': 152, 'seek': 97474, 'start': 989.14, 'end': 995.26, 'text': ' to begin with you can think of nodes in this graph as every instruction in the program being a node', 'tokens': [51084, 281, 1841, 365, 291, 393, 519, 295, 13891, 294, 341, 4295, 382, 633, 10951, 294, 264, 1461, 885, 257, 9984, 51390], 'temperature': 0.0, 'avg_logprob': -0.10830567472724505, 'compression_ratio': 2.1027027027027025, 'no_speech_prob': 0.050294119864702225}, {'id': 153, 'seek': 97474, 'start': 995.26, 'end': 1003.42, 'text': ' in this graph. Every instruction in this program is a node in this graph and edge in this there is', 'tokens': [51390, 294, 341, 4295, 13, 2048, 10951, 294, 341, 1461, 307, 257, 9984, 294, 341, 4295, 293, 4691, 294, 341, 456, 307, 51798], 'temperature': 0.0, 'avg_logprob': -0.10830567472724505, 'compression_ratio': 2.1027027027027025, 'no_speech_prob': 0.050294119864702225}, {'id': 154, 'seek': 100342, 'start': 1003.42, 'end': 1013.26, 'text': ' an edge between two nodes n1 and n2. If after running statement at n1 I can immediately there', 'tokens': [50364, 364, 4691, 1296, 732, 13891, 297, 16, 293, 297, 17, 13, 759, 934, 2614, 5629, 412, 297, 16, 286, 393, 4258, 456, 50856], 'temperature': 0.0, 'avg_logprob': -0.1480912764867147, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.014724300242960453}, {'id': 155, 'seek': 100342, 'start': 1013.26, 'end': 1019.38, 'text': ' is some execution on which I can immediately run the statement in n2. Does it make sense?', 'tokens': [50856, 307, 512, 15058, 322, 597, 286, 393, 4258, 1190, 264, 5629, 294, 297, 17, 13, 4402, 309, 652, 2020, 30, 51162], 'temperature': 0.0, 'avg_logprob': -0.1480912764867147, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.014724300242960453}, {'id': 156, 'seek': 100342, 'start': 1019.38, 'end': 1031.54, 'text': ' Immediately after. So, if I have two statements somehow I do not know if I can use the board.', 'tokens': [51162, 34457, 934, 13, 407, 11, 498, 286, 362, 732, 12363, 6063, 286, 360, 406, 458, 498, 286, 393, 764, 264, 3150, 13, 51770], 'temperature': 0.0, 'avg_logprob': -0.1480912764867147, 'compression_ratio': 1.6390532544378698, 'no_speech_prob': 0.014724300242960453}, {'id': 157, 'seek': 103154, 'start': 1032.5, 'end': 1049.94, 'text': ' So, if you have two statements let me see if I can use this. So, for instance let us say this is a', 'tokens': [50412, 407, 11, 498, 291, 362, 732, 12363, 718, 385, 536, 498, 286, 393, 764, 341, 13, 407, 11, 337, 5197, 718, 505, 584, 341, 307, 257, 51284], 'temperature': 0.0, 'avg_logprob': -0.22457270528755935, 'compression_ratio': 1.5901639344262295, 'no_speech_prob': 0.01662181131541729}, {'id': 158, 'seek': 103154, 'start': 1049.94, 'end': 1057.86, 'text': ' node because it is some statement in the program and this is a node because that is a statement', 'tokens': [51284, 9984, 570, 309, 307, 512, 5629, 294, 264, 1461, 293, 341, 307, 257, 9984, 570, 300, 307, 257, 5629, 51680], 'temperature': 0.0, 'avg_logprob': -0.22457270528755935, 'compression_ratio': 1.5901639344262295, 'no_speech_prob': 0.01662181131541729}, {'id': 159, 'seek': 105786, 'start': 1057.86, 'end': 1066.34, 'text': ' in this program. So, what is the edge between what can you detect one edge in this program?', 'tokens': [50364, 294, 341, 1461, 13, 407, 11, 437, 307, 264, 4691, 1296, 437, 393, 291, 5531, 472, 4691, 294, 341, 1461, 30, 50788], 'temperature': 0.0, 'avg_logprob': -0.192010992451718, 'compression_ratio': 1.794701986754967, 'no_speech_prob': 0.03798947483301163}, {'id': 160, 'seek': 105786, 'start': 1067.3, 'end': 1078.1, 'text': ' Tell me some edge in this program. Let me just switch my line numbers on. So, just 10 to 12', 'tokens': [50836, 5115, 385, 512, 4691, 294, 341, 1461, 13, 961, 385, 445, 3679, 452, 1622, 3547, 322, 13, 407, 11, 445, 1266, 281, 2272, 51376], 'temperature': 0.0, 'avg_logprob': -0.192010992451718, 'compression_ratio': 1.794701986754967, 'no_speech_prob': 0.03798947483301163}, {'id': 161, 'seek': 105786, 'start': 1078.1, 'end': 1087.58, 'text': ' is 10 to 12 and edge in this graph. Line 10 to line 12 is line 7 to line 12 and edge in', 'tokens': [51376, 307, 1266, 281, 2272, 293, 4691, 294, 341, 4295, 13, 14670, 1266, 281, 1622, 2272, 307, 1622, 1614, 281, 1622, 2272, 293, 4691, 294, 51850], 'temperature': 0.0, 'avg_logprob': -0.192010992451718, 'compression_ratio': 1.794701986754967, 'no_speech_prob': 0.03798947483301163}, {'id': 162, 'seek': 108758, 'start': 1087.58, 'end': 1098.22, 'text': ' this graph is line 7 to 10 and edge in this graph. Yes or no? I could hear some. Why is it that edge?', 'tokens': [50364, 341, 4295, 307, 1622, 1614, 281, 1266, 293, 4691, 294, 341, 4295, 13, 1079, 420, 572, 30, 286, 727, 1568, 512, 13, 1545, 307, 309, 300, 4691, 30, 50896], 'temperature': 0.0, 'avg_logprob': -0.1981631073297239, 'compression_ratio': 1.3722627737226278, 'no_speech_prob': 0.006249704398214817}, {'id': 163, 'seek': 108758, 'start': 1098.22, 'end': 1107.1, 'text': ' They are not even one after the other. Yes, whenever the statement the while condition', 'tokens': [50896, 814, 366, 406, 754, 472, 934, 264, 661, 13, 1079, 11, 5699, 264, 5629, 264, 1339, 4188, 51340], 'temperature': 0.0, 'avg_logprob': -0.1981631073297239, 'compression_ratio': 1.3722627737226278, 'no_speech_prob': 0.006249704398214817}, {'id': 164, 'seek': 110710, 'start': 1107.1, 'end': 1119.1, 'text': ' 7 becomes false the control can immediately run 10. So, this statement at 7 how many edges does', 'tokens': [50364, 1614, 3643, 7908, 264, 1969, 393, 4258, 1190, 1266, 13, 407, 11, 341, 5629, 412, 1614, 577, 867, 8819, 775, 50964], 'temperature': 0.0, 'avg_logprob': -0.14910400830782378, 'compression_ratio': 1.3379310344827586, 'no_speech_prob': 0.36820945143699646}, {'id': 165, 'seek': 110710, 'start': 1119.1, 'end': 1135.34, 'text': ' it have starting from it? What are the two edges? 7 to 8 and 7 to 10. Can you detect an edge which', 'tokens': [50964, 309, 362, 2891, 490, 309, 30, 708, 366, 264, 732, 8819, 30, 1614, 281, 1649, 293, 1614, 281, 1266, 13, 1664, 291, 5531, 364, 4691, 597, 51776], 'temperature': 0.0, 'avg_logprob': -0.14910400830782378, 'compression_ratio': 1.3379310344827586, 'no_speech_prob': 0.36820945143699646}, {'id': 166, 'seek': 113534, 'start': 1135.34, 'end': 1144.4599999999998, 'text': ' goes the other direction? 8 to 7. So, these edges which go in the other direction I will', 'tokens': [50364, 1709, 264, 661, 3513, 30, 1649, 281, 1614, 13, 407, 11, 613, 8819, 597, 352, 294, 264, 661, 3513, 286, 486, 50820], 'temperature': 0.0, 'avg_logprob': -0.12564733916637943, 'compression_ratio': 1.8774509803921569, 'no_speech_prob': 0.05657584220170975}, {'id': 167, 'seek': 113534, 'start': 1144.4599999999998, 'end': 1149.82, 'text': ' define what is other properly but does not look to be towards direction of the flow of the program.', 'tokens': [50820, 6964, 437, 307, 661, 6108, 457, 775, 406, 574, 281, 312, 3030, 3513, 295, 264, 3095, 295, 264, 1461, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.12564733916637943, 'compression_ratio': 1.8774509803921569, 'no_speech_prob': 0.05657584220170975}, {'id': 168, 'seek': 113534, 'start': 1149.82, 'end': 1156.06, 'text': ' Those edges are referred to as a back edge. So, I can have forward edges or I can have back edges.', 'tokens': [51088, 3950, 8819, 366, 10839, 281, 382, 257, 646, 4691, 13, 407, 11, 286, 393, 362, 2128, 8819, 420, 286, 393, 362, 646, 8819, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.12564733916637943, 'compression_ratio': 1.8774509803921569, 'no_speech_prob': 0.05657584220170975}, {'id': 169, 'seek': 113534, 'start': 1156.06, 'end': 1165.02, 'text': ' So, I can see a back edge from 8 to 7. So, now you understand what is a control flow graph. So,', 'tokens': [51400, 407, 11, 286, 393, 536, 257, 646, 4691, 490, 1649, 281, 1614, 13, 407, 11, 586, 291, 1223, 437, 307, 257, 1969, 3095, 4295, 13, 407, 11, 51848], 'temperature': 0.0, 'avg_logprob': -0.12564733916637943, 'compression_ratio': 1.8774509803921569, 'no_speech_prob': 0.05657584220170975}, {'id': 170, 'seek': 116502, 'start': 1165.02, 'end': 1169.34, 'text': ' this graph is a control flow graph and can you now tell me what is the entry to this graph?', 'tokens': [50364, 341, 4295, 307, 257, 1969, 3095, 4295, 293, 393, 291, 586, 980, 385, 437, 307, 264, 8729, 281, 341, 4295, 30, 50580], 'temperature': 0.0, 'avg_logprob': -0.12029224760988926, 'compression_ratio': 1.645021645021645, 'no_speech_prob': 0.0026244891341775656}, {'id': 171, 'seek': 116502, 'start': 1172.1399999999999, 'end': 1178.78, 'text': ' The first statement in this particular function. So, the first statement would be assignment of', 'tokens': [50720, 440, 700, 5629, 294, 341, 1729, 2445, 13, 407, 11, 264, 700, 5629, 576, 312, 15187, 295, 51052], 'temperature': 0.0, 'avg_logprob': -0.12029224760988926, 'compression_ratio': 1.645021645021645, 'no_speech_prob': 0.0026244891341775656}, {'id': 172, 'seek': 116502, 'start': 1178.78, 'end': 1187.42, 'text': ' 0 to i. Notice that these declarations are not statements. To some extent they are but we will', 'tokens': [51052, 1958, 281, 741, 13, 13428, 300, 613, 16694, 763, 366, 406, 12363, 13, 1407, 512, 8396, 436, 366, 457, 321, 486, 51484], 'temperature': 0.0, 'avg_logprob': -0.12029224760988926, 'compression_ratio': 1.645021645021645, 'no_speech_prob': 0.0026244891341775656}, {'id': 173, 'seek': 116502, 'start': 1187.42, 'end': 1194.46, 'text': ' talk about them when we do the LLBM IR. But at this moment they are not doing any action as such.', 'tokens': [51484, 751, 466, 552, 562, 321, 360, 264, 441, 43, 18345, 16486, 13, 583, 412, 341, 1623, 436, 366, 406, 884, 604, 3069, 382, 1270, 13, 51836], 'temperature': 0.0, 'avg_logprob': -0.12029224760988926, 'compression_ratio': 1.645021645021645, 'no_speech_prob': 0.0026244891341775656}, {'id': 174, 'seek': 119446, 'start': 1194.46, 'end': 1199.74, 'text': ' They are simply just saying allocate some memory. But they also turn out to be statements in your', 'tokens': [50364, 814, 366, 2935, 445, 1566, 35713, 512, 4675, 13, 583, 436, 611, 1261, 484, 281, 312, 12363, 294, 428, 50628], 'temperature': 0.0, 'avg_logprob': -0.09056992781789679, 'compression_ratio': 1.6304347826086956, 'no_speech_prob': 0.0010965202236548066}, {'id': 175, 'seek': 119446, 'start': 1199.74, 'end': 1205.42, 'text': ' LLBM IR. You will see that. But as I can see an active statement here which is assignment of 0', 'tokens': [50628, 441, 43, 18345, 16486, 13, 509, 486, 536, 300, 13, 583, 382, 286, 393, 536, 364, 4967, 5629, 510, 597, 307, 15187, 295, 1958, 50912], 'temperature': 0.0, 'avg_logprob': -0.09056992781789679, 'compression_ratio': 1.6304347826086956, 'no_speech_prob': 0.0010965202236548066}, {'id': 176, 'seek': 119446, 'start': 1205.42, 'end': 1214.06, 'text': ' to i. So, that would be the first node in this graph. The next thing is that this graph', 'tokens': [50912, 281, 741, 13, 407, 11, 300, 576, 312, 264, 700, 9984, 294, 341, 4295, 13, 440, 958, 551, 307, 300, 341, 4295, 51344], 'temperature': 0.0, 'avg_logprob': -0.09056992781789679, 'compression_ratio': 1.6304347826086956, 'no_speech_prob': 0.0010965202236548066}, {'id': 177, 'seek': 119446, 'start': 1214.94, 'end': 1222.14, 'text': ' can become really big. So, there are nodes which are equal to the number of statements in this', 'tokens': [51388, 393, 1813, 534, 955, 13, 407, 11, 456, 366, 13891, 597, 366, 2681, 281, 264, 1230, 295, 12363, 294, 341, 51748], 'temperature': 0.0, 'avg_logprob': -0.09056992781789679, 'compression_ratio': 1.6304347826086956, 'no_speech_prob': 0.0010965202236548066}, {'id': 178, 'seek': 122214, 'start': 1222.14, 'end': 1227.18, 'text': ' graph. Can you think of some idea to reduce this graph and still keep all the information intact?', 'tokens': [50364, 4295, 13, 1664, 291, 519, 295, 512, 1558, 281, 5407, 341, 4295, 293, 920, 1066, 439, 264, 1589, 23493, 30, 50616], 'temperature': 0.0, 'avg_logprob': -0.16943030203542403, 'compression_ratio': 1.5232558139534884, 'no_speech_prob': 0.014915723353624344}, {'id': 179, 'seek': 122214, 'start': 1235.5800000000002, 'end': 1242.0600000000002, 'text': ' Excellent. So, let me just not even care about statements where the control,', 'tokens': [51036, 16723, 13, 407, 11, 718, 385, 445, 406, 754, 1127, 466, 12363, 689, 264, 1969, 11, 51360], 'temperature': 0.0, 'avg_logprob': -0.16943030203542403, 'compression_ratio': 1.5232558139534884, 'no_speech_prob': 0.014915723353624344}, {'id': 180, 'seek': 122214, 'start': 1242.0600000000002, 'end': 1249.5, 'text': ' we know that the control must follow in that sequence. So, this set of statements where', 'tokens': [51360, 321, 458, 300, 264, 1969, 1633, 1524, 294, 300, 8310, 13, 407, 11, 341, 992, 295, 12363, 689, 51732], 'temperature': 0.0, 'avg_logprob': -0.16943030203542403, 'compression_ratio': 1.5232558139534884, 'no_speech_prob': 0.014915723353624344}, {'id': 181, 'seek': 124950, 'start': 1250.3, 'end': 1256.94, 'text': ' if you enter the first statement in that sequence, you are surely going to reach the last statement', 'tokens': [50404, 498, 291, 3242, 264, 700, 5629, 294, 300, 8310, 11, 291, 366, 11468, 516, 281, 2524, 264, 1036, 5629, 50736], 'temperature': 0.0, 'avg_logprob': -0.10054332188197544, 'compression_ratio': 1.7454545454545454, 'no_speech_prob': 0.005721432156860828}, {'id': 182, 'seek': 124950, 'start': 1256.94, 'end': 1262.7, 'text': ' in the sequence. There is no way out. Such sequences of statements are referred to as a basic block.', 'tokens': [50736, 294, 264, 8310, 13, 821, 307, 572, 636, 484, 13, 9653, 22978, 295, 12363, 366, 10839, 281, 382, 257, 3875, 3461, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.10054332188197544, 'compression_ratio': 1.7454545454545454, 'no_speech_prob': 0.005721432156860828}, {'id': 183, 'seek': 124950, 'start': 1265.58, 'end': 1270.86, 'text': " It's a block of statements and you cannot divide it further. So, it's like basic block.", 'tokens': [51168, 467, 311, 257, 3461, 295, 12363, 293, 291, 2644, 9845, 309, 3052, 13, 407, 11, 309, 311, 411, 3875, 3461, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.10054332188197544, 'compression_ratio': 1.7454545454545454, 'no_speech_prob': 0.005721432156860828}, {'id': 184, 'seek': 127086, 'start': 1271.74, 'end': 1274.3799999999999, 'text': ' So, can you identify a basic block in this program?', 'tokens': [50408, 407, 11, 393, 291, 5876, 257, 3875, 3461, 294, 341, 1461, 30, 50540], 'temperature': 0.0, 'avg_logprob': -0.16006139119466145, 'compression_ratio': 1.469945355191257, 'no_speech_prob': 0.06880336254835129}, {'id': 185, 'seek': 127086, 'start': 1278.06, 'end': 1281.4199999999998, 'text': ' 4 to 7. Should I take 7 or should I not take 7?', 'tokens': [50724, 1017, 281, 1614, 13, 6454, 286, 747, 1614, 420, 820, 286, 406, 747, 1614, 30, 50892], 'temperature': 0.0, 'avg_logprob': -0.16006139119466145, 'compression_ratio': 1.469945355191257, 'no_speech_prob': 0.06880336254835129}, {'id': 186, 'seek': 127086, 'start': 1283.6599999999999, 'end': 1289.1799999999998, 'text': ' Okay. So, what does this while statement entail? There are two things it does.', 'tokens': [51004, 1033, 13, 407, 11, 437, 775, 341, 1339, 5629, 948, 864, 30, 821, 366, 732, 721, 309, 775, 13, 51280], 'temperature': 0.0, 'avg_logprob': -0.16006139119466145, 'compression_ratio': 1.469945355191257, 'no_speech_prob': 0.06880336254835129}, {'id': 187, 'seek': 127086, 'start': 1292.3799999999999, 'end': 1296.1399999999999, 'text': ' Okay. Let me just come to it a little later. Let me just ensure that everybody understands', 'tokens': [51440, 1033, 13, 961, 385, 445, 808, 281, 309, 257, 707, 1780, 13, 961, 385, 445, 5586, 300, 2201, 15146, 51628], 'temperature': 0.0, 'avg_logprob': -0.16006139119466145, 'compression_ratio': 1.469945355191257, 'no_speech_prob': 0.06880336254835129}, {'id': 188, 'seek': 129614, 'start': 1296.14, 'end': 1298.5400000000002, 'text': ' what we are talking about. Okay. Some simpler example.', 'tokens': [50364, 437, 321, 366, 1417, 466, 13, 1033, 13, 2188, 18587, 1365, 13, 50484], 'temperature': 0.0, 'avg_logprob': -0.1384421357321083, 'compression_ratio': 1.5910780669144982, 'no_speech_prob': 0.01021397951990366}, {'id': 189, 'seek': 129614, 'start': 1301.42, 'end': 1306.7, 'text': ' 10 and 12. Because if you enter 10, we will surely reach 12. There is no way out. We cannot', 'tokens': [50628, 1266, 293, 2272, 13, 1436, 498, 291, 3242, 1266, 11, 321, 486, 11468, 2524, 2272, 13, 821, 307, 572, 636, 484, 13, 492, 2644, 50892], 'temperature': 0.0, 'avg_logprob': -0.1384421357321083, 'compression_ratio': 1.5910780669144982, 'no_speech_prob': 0.01021397951990366}, {'id': 190, 'seek': 129614, 'start': 1306.7, 'end': 1312.94, 'text': ' do anything. Even including everything like you guys said like from 4 to 7 surely, including 7 or', 'tokens': [50892, 360, 1340, 13, 2754, 3009, 1203, 411, 291, 1074, 848, 411, 490, 1017, 281, 1614, 11468, 11, 3009, 1614, 420, 51204], 'temperature': 0.0, 'avg_logprob': -0.1384421357321083, 'compression_ratio': 1.5910780669144982, 'no_speech_prob': 0.01021397951990366}, {'id': 191, 'seek': 129614, 'start': 1312.94, 'end': 1318.6200000000001, 'text': ' not is a thing of a discussion still. But at least we know from 4 to 7 all these statements', 'tokens': [51204, 406, 307, 257, 551, 295, 257, 5017, 920, 13, 583, 412, 1935, 321, 458, 490, 1017, 281, 1614, 439, 613, 12363, 51488], 'temperature': 0.0, 'avg_logprob': -0.1384421357321083, 'compression_ratio': 1.5910780669144982, 'no_speech_prob': 0.01021397951990366}, {'id': 192, 'seek': 129614, 'start': 1320.3000000000002, 'end': 1325.18, 'text': ' should be in a basic block because if I start executing 4, it cannot happen that I can miss', 'tokens': [51572, 820, 312, 294, 257, 3875, 3461, 570, 498, 286, 722, 32368, 1017, 11, 309, 2644, 1051, 300, 286, 393, 1713, 51816], 'temperature': 0.0, 'avg_logprob': -0.1384421357321083, 'compression_ratio': 1.5910780669144982, 'no_speech_prob': 0.01021397951990366}, {'id': 193, 'seek': 132518, 'start': 1325.18, 'end': 1332.46, 'text': ' any statement in between. What about 7? So, 7, the while loop does two things.', 'tokens': [50364, 604, 5629, 294, 1296, 13, 708, 466, 1614, 30, 407, 11, 1614, 11, 264, 1339, 6367, 775, 732, 721, 13, 50728], 'temperature': 0.0, 'avg_logprob': -0.1331467628479004, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.0009668210404925048}, {'id': 194, 'seek': 132518, 'start': 1333.18, 'end': 1335.3400000000001, 'text': ' If you think about it, can you tell me what are these two things?', 'tokens': [50764, 759, 291, 519, 466, 309, 11, 393, 291, 980, 385, 437, 366, 613, 732, 721, 30, 50872], 'temperature': 0.0, 'avg_logprob': -0.1331467628479004, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.0009668210404925048}, {'id': 195, 'seek': 132518, 'start': 1338.46, 'end': 1343.98, 'text': ' It evaluates this condition, this i is greater than 0 and transfers control.', 'tokens': [51028, 467, 6133, 1024, 341, 4188, 11, 341, 741, 307, 5044, 813, 1958, 293, 29137, 1969, 13, 51304], 'temperature': 0.0, 'avg_logprob': -0.1331467628479004, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.0009668210404925048}, {'id': 196, 'seek': 132518, 'start': 1346.7, 'end': 1353.9, 'text': " So, evaluating this should be part of the basic block because it's a... So,", 'tokens': [51440, 407, 11, 27479, 341, 820, 312, 644, 295, 264, 3875, 3461, 570, 309, 311, 257, 485, 407, 11, 51800], 'temperature': 0.0, 'avg_logprob': -0.1331467628479004, 'compression_ratio': 1.538860103626943, 'no_speech_prob': 0.0009668210404925048}, {'id': 197, 'seek': 135390, 'start': 1353.9, 'end': 1356.94, 'text': ' no matter what you do, you have to evaluate that statement.', 'tokens': [50364, 572, 1871, 437, 291, 360, 11, 291, 362, 281, 13059, 300, 5629, 13, 50516], 'temperature': 0.0, 'avg_logprob': -0.1331624614382253, 'compression_ratio': 1.826839826839827, 'no_speech_prob': 0.0018661448266357183}, {'id': 198, 'seek': 135390, 'start': 1359.74, 'end': 1365.02, 'text': ' And transferring control, which is a go to statement is also part of this because...', 'tokens': [50656, 400, 31437, 1969, 11, 597, 307, 257, 352, 281, 5629, 307, 611, 644, 295, 341, 570, 485, 50920], 'temperature': 0.0, 'avg_logprob': -0.1331624614382253, 'compression_ratio': 1.826839826839827, 'no_speech_prob': 0.0018661448266357183}, {'id': 199, 'seek': 135390, 'start': 1365.98, 'end': 1370.8600000000001, 'text': ' So, after the control is transferred, it goes somewhere else. But the jump statement should', 'tokens': [50968, 407, 11, 934, 264, 1969, 307, 15809, 11, 309, 1709, 4079, 1646, 13, 583, 264, 3012, 5629, 820, 51212], 'temperature': 0.0, 'avg_logprob': -0.1331624614382253, 'compression_ratio': 1.826839826839827, 'no_speech_prob': 0.0018661448266357183}, {'id': 200, 'seek': 135390, 'start': 1370.8600000000001, 'end': 1375.5, 'text': ' be part of that basic block because you are going to hit that jump no matter what. So,', 'tokens': [51212, 312, 644, 295, 300, 3875, 3461, 570, 291, 366, 516, 281, 2045, 300, 3012, 572, 1871, 437, 13, 407, 11, 51444], 'temperature': 0.0, 'avg_logprob': -0.1331624614382253, 'compression_ratio': 1.826839826839827, 'no_speech_prob': 0.0018661448266357183}, {'id': 201, 'seek': 135390, 'start': 1375.5, 'end': 1380.38, 'text': " this is a conditional jump. It's like if something, then go to. So, this statement should be again", 'tokens': [51444, 341, 307, 257, 27708, 3012, 13, 467, 311, 411, 498, 746, 11, 550, 352, 281, 13, 407, 11, 341, 5629, 820, 312, 797, 51688], 'temperature': 0.0, 'avg_logprob': -0.1331624614382253, 'compression_ratio': 1.826839826839827, 'no_speech_prob': 0.0018661448266357183}, {'id': 202, 'seek': 138038, 'start': 1380.38, 'end': 1386.14, 'text': ' part of the basic block. What about the statement after it? Can I include this particular statement', 'tokens': [50364, 644, 295, 264, 3875, 3461, 13, 708, 466, 264, 5629, 934, 309, 30, 1664, 286, 4090, 341, 1729, 5629, 50652], 'temperature': 0.0, 'avg_logprob': -0.145421387046896, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.01998915709555149}, {'id': 203, 'seek': 138038, 'start': 1386.14, 'end': 1395.1000000000001, 'text': ' in the basic block? Statement 8 in the basic block? Why not? Yeah, so it is not guaranteed', 'tokens': [50652, 294, 264, 3875, 3461, 30, 16249, 1712, 1649, 294, 264, 3875, 3461, 30, 1545, 406, 30, 865, 11, 370, 309, 307, 406, 18031, 51100], 'temperature': 0.0, 'avg_logprob': -0.145421387046896, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.01998915709555149}, {'id': 204, 'seek': 138038, 'start': 1395.1000000000001, 'end': 1401.1000000000001, 'text': " that I hit 7, I surely will hit 8. I can't guarantee that. Neither can I guarantee something about 10.", 'tokens': [51100, 300, 286, 2045, 1614, 11, 286, 11468, 486, 2045, 1649, 13, 286, 393, 380, 10815, 300, 13, 23956, 393, 286, 10815, 746, 466, 1266, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.145421387046896, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.01998915709555149}, {'id': 205, 'seek': 138038, 'start': 1403.18, 'end': 1406.46, 'text': " Because after I hit 7, maybe I execute 8. I don't know.", 'tokens': [51504, 1436, 934, 286, 2045, 1614, 11, 1310, 286, 14483, 1649, 13, 286, 500, 380, 458, 13, 51668], 'temperature': 0.0, 'avg_logprob': -0.145421387046896, 'compression_ratio': 1.6859903381642511, 'no_speech_prob': 0.01998915709555149}, {'id': 206, 'seek': 140646, 'start': 1407.3400000000001, 'end': 1412.3, 'text': ' So, those cannot also be part of the same basic block which contains 7.', 'tokens': [50408, 407, 11, 729, 2644, 611, 312, 644, 295, 264, 912, 3875, 3461, 597, 8306, 1614, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.2884590666172868, 'compression_ratio': 1.535031847133758, 'no_speech_prob': 0.013504902832210064}, {'id': 207, 'seek': 140646, 'start': 1419.9, 'end': 1428.7, 'text': " Okay, so now the while statement is a little tricky business. Let's revisit the while statement. So,", 'tokens': [51036, 1033, 11, 370, 586, 264, 1339, 5629, 307, 257, 707, 12414, 1606, 13, 961, 311, 32676, 264, 1339, 5629, 13, 407, 11, 51476], 'temperature': 0.0, 'avg_logprob': -0.2884590666172868, 'compression_ratio': 1.535031847133758, 'no_speech_prob': 0.013504902832210064}, {'id': 208, 'seek': 140646, 'start': 1428.7, 'end': 1433.1000000000001, 'text': ' when I look at the forward execution, it looks like while statement.', 'tokens': [51476, 562, 286, 574, 412, 264, 2128, 15058, 11, 309, 1542, 411, 1339, 5629, 13, 51696], 'temperature': 0.0, 'avg_logprob': -0.2884590666172868, 'compression_ratio': 1.535031847133758, 'no_speech_prob': 0.013504902832210064}, {'id': 209, 'seek': 143646, 'start': 1436.8600000000001, 'end': 1441.74, 'text': ' But think about the case when I execute 8 and then jump back to 7.', 'tokens': [50384, 583, 519, 466, 264, 1389, 562, 286, 14483, 1649, 293, 550, 3012, 646, 281, 1614, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.13508773357310194, 'compression_ratio': 1.5727272727272728, 'no_speech_prob': 0.007391004823148251}, {'id': 210, 'seek': 143646, 'start': 1445.3400000000001, 'end': 1451.58, 'text': ' So, if it is part of the... Now, what does my control flow graph look like? It looks like', 'tokens': [50808, 407, 11, 498, 309, 307, 644, 295, 264, 485, 823, 11, 437, 775, 452, 1969, 3095, 4295, 574, 411, 30, 467, 1542, 411, 51120], 'temperature': 0.0, 'avg_logprob': -0.13508773357310194, 'compression_ratio': 1.5727272727272728, 'no_speech_prob': 0.007391004823148251}, {'id': 211, 'seek': 143646, 'start': 1452.46, 'end': 1459.02, 'text': ' a set of nodes where each node is no more a statement. It is now a basic block. And I know', 'tokens': [51164, 257, 992, 295, 13891, 689, 1184, 9984, 307, 572, 544, 257, 5629, 13, 467, 307, 586, 257, 3875, 3461, 13, 400, 286, 458, 51492], 'temperature': 0.0, 'avg_logprob': -0.13508773357310194, 'compression_ratio': 1.5727272727272728, 'no_speech_prob': 0.007391004823148251}, {'id': 212, 'seek': 143646, 'start': 1459.02, 'end': 1462.14, 'text': " everything in the basic block are going to execute in sequence. So, I don't have to care about the", 'tokens': [51492, 1203, 294, 264, 3875, 3461, 366, 516, 281, 14483, 294, 8310, 13, 407, 11, 286, 500, 380, 362, 281, 1127, 466, 264, 51648], 'temperature': 0.0, 'avg_logprob': -0.13508773357310194, 'compression_ratio': 1.5727272727272728, 'no_speech_prob': 0.007391004823148251}, {'id': 213, 'seek': 146214, 'start': 1462.14, 'end': 1469.98, 'text': ' control flow within them. It is obvious. And my edges are edges from a basic block to another', 'tokens': [50364, 1969, 3095, 1951, 552, 13, 467, 307, 6322, 13, 400, 452, 8819, 366, 8819, 490, 257, 3875, 3461, 281, 1071, 50756], 'temperature': 0.0, 'avg_logprob': -0.09748353240310505, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004563895519822836}, {'id': 214, 'seek': 146214, 'start': 1469.98, 'end': 1476.5400000000002, 'text': ' basic block if the first basic block can transfer control to the second basic block. Now, think', 'tokens': [50756, 3875, 3461, 498, 264, 700, 3875, 3461, 393, 5003, 1969, 281, 264, 1150, 3875, 3461, 13, 823, 11, 519, 51084], 'temperature': 0.0, 'avg_logprob': -0.09748353240310505, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004563895519822836}, {'id': 215, 'seek': 146214, 'start': 1476.5400000000002, 'end': 1483.5, 'text': ' about 7. Now, this is a little sticky situation. Because now if I make it the part of the previous', 'tokens': [51084, 466, 1614, 13, 823, 11, 341, 307, 257, 707, 14470, 2590, 13, 1436, 586, 498, 286, 652, 309, 264, 644, 295, 264, 3894, 51432], 'temperature': 0.0, 'avg_logprob': -0.09748353240310505, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004563895519822836}, {'id': 216, 'seek': 146214, 'start': 1483.5, 'end': 1492.0600000000002, 'text': ' basic block, then after executing 8, how do I transfer control to it? So, I cannot transfer', 'tokens': [51432, 3875, 3461, 11, 550, 934, 32368, 1649, 11, 577, 360, 286, 5003, 1969, 281, 309, 30, 407, 11, 286, 2644, 5003, 51860], 'temperature': 0.0, 'avg_logprob': -0.09748353240310505, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004563895519822836}, {'id': 217, 'seek': 149206, 'start': 1492.06, 'end': 1495.4199999999998, 'text': ' control to the middle of a basic block. I can only transfer control to the beginning of a basic', 'tokens': [50364, 1969, 281, 264, 2808, 295, 257, 3875, 3461, 13, 286, 393, 787, 5003, 1969, 281, 264, 2863, 295, 257, 3875, 50532], 'temperature': 0.0, 'avg_logprob': -0.13526911054338728, 'compression_ratio': 1.8523809523809525, 'no_speech_prob': 0.0003652393934316933}, {'id': 218, 'seek': 149206, 'start': 1495.4199999999998, 'end': 1499.26, 'text': " block. It doesn't make sense to transfer control middle of a basic block. Then what is the graph?", 'tokens': [50532, 3461, 13, 467, 1177, 380, 652, 2020, 281, 5003, 1969, 2808, 295, 257, 3875, 3461, 13, 1396, 437, 307, 264, 4295, 30, 50724], 'temperature': 0.0, 'avg_logprob': -0.13526911054338728, 'compression_ratio': 1.8523809523809525, 'no_speech_prob': 0.0003652393934316933}, {'id': 219, 'seek': 149206, 'start': 1499.26, 'end': 1508.62, 'text': ' I mean, it is very confusing, right? So, the only option is to pull it out and make it part of', 'tokens': [50724, 286, 914, 11, 309, 307, 588, 13181, 11, 558, 30, 407, 11, 264, 787, 3614, 307, 281, 2235, 309, 484, 293, 652, 309, 644, 295, 51192], 'temperature': 0.0, 'avg_logprob': -0.13526911054338728, 'compression_ratio': 1.8523809523809525, 'no_speech_prob': 0.0003652393934316933}, {'id': 220, 'seek': 149206, 'start': 1509.5, 'end': 1521.6599999999999, 'text': ' the next basic block, right? Now, okay, next basic block, that is fine. But can I now put 7 and 8 in', 'tokens': [51236, 264, 958, 3875, 3461, 11, 558, 30, 823, 11, 1392, 11, 958, 3875, 3461, 11, 300, 307, 2489, 13, 583, 393, 286, 586, 829, 1614, 293, 1649, 294, 51844], 'temperature': 0.0, 'avg_logprob': -0.13526911054338728, 'compression_ratio': 1.8523809523809525, 'no_speech_prob': 0.0003652393934316933}, {'id': 221, 'seek': 152166, 'start': 1521.66, 'end': 1527.3400000000001, 'text': ' the same basic block? That is also problematic. So, 7 has to be a separate basic block, 8 has to', 'tokens': [50364, 264, 912, 3875, 3461, 30, 663, 307, 611, 19011, 13, 407, 11, 1614, 575, 281, 312, 257, 4994, 3875, 3461, 11, 1649, 575, 281, 50648], 'temperature': 0.0, 'avg_logprob': -0.13833391786825777, 'compression_ratio': 1.9175257731958764, 'no_speech_prob': 0.003927251324057579}, {'id': 222, 'seek': 152166, 'start': 1527.3400000000001, 'end': 1531.98, 'text': ' be a separate basic block, and 10 has to be a separate basic block. 10 can transfer control to 7.', 'tokens': [50648, 312, 257, 4994, 3875, 3461, 11, 293, 1266, 575, 281, 312, 257, 4994, 3875, 3461, 13, 1266, 393, 5003, 1969, 281, 1614, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.13833391786825777, 'compression_ratio': 1.9175257731958764, 'no_speech_prob': 0.003927251324057579}, {'id': 223, 'seek': 152166, 'start': 1535.66, 'end': 1541.5800000000002, 'text': ' Not 10, sorry, 8. 8 can transfer control to 7. 7 can transfer control to either 8 or 10.', 'tokens': [51064, 1726, 1266, 11, 2597, 11, 1649, 13, 1649, 393, 5003, 1969, 281, 1614, 13, 1614, 393, 5003, 1969, 281, 2139, 1649, 420, 1266, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.13833391786825777, 'compression_ratio': 1.9175257731958764, 'no_speech_prob': 0.003927251324057579}, {'id': 224, 'seek': 152166, 'start': 1544.0600000000002, 'end': 1547.26, 'text': ' Excellent. I mean, I am not even teaching anything. You guys are discovering everything.', 'tokens': [51484, 16723, 13, 286, 914, 11, 286, 669, 406, 754, 4571, 1340, 13, 509, 1074, 366, 24773, 1203, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.13833391786825777, 'compression_ratio': 1.9175257731958764, 'no_speech_prob': 0.003927251324057579}, {'id': 225, 'seek': 154726, 'start': 1548.06, 'end': 1550.46, 'text': ' Okay, so now we have understood what is a control flow graph.', 'tokens': [50404, 1033, 11, 370, 586, 321, 362, 7320, 437, 307, 257, 1969, 3095, 4295, 13, 50524], 'temperature': 0.0, 'avg_logprob': -0.21092316199993266, 'compression_ratio': 1.6076555023923444, 'no_speech_prob': 0.010969582945108414}, {'id': 226, 'seek': 154726, 'start': 1553.58, 'end': 1558.14, 'text': " Right, so essentially, so now let's just summarize whatever we have discussed. So,", 'tokens': [50680, 1779, 11, 370, 4476, 11, 370, 586, 718, 311, 445, 20858, 2035, 321, 362, 7152, 13, 407, 11, 50908], 'temperature': 0.0, 'avg_logprob': -0.21092316199993266, 'compression_ratio': 1.6076555023923444, 'no_speech_prob': 0.010969582945108414}, {'id': 227, 'seek': 154726, 'start': 1558.14, 'end': 1564.46, 'text': ' the very data structure we will use and we will use it a lot is something called a control flow', 'tokens': [50908, 264, 588, 1412, 3877, 321, 486, 764, 293, 321, 486, 764, 309, 257, 688, 307, 746, 1219, 257, 1969, 3095, 51224], 'temperature': 0.0, 'avg_logprob': -0.21092316199993266, 'compression_ratio': 1.6076555023923444, 'no_speech_prob': 0.010969582945108414}, {'id': 228, 'seek': 154726, 'start': 1564.46, 'end': 1576.62, 'text': ' graph or a CFG. Now onwards, the nodes in a CFG are known to have basic blocks. They have every', 'tokens': [51224, 4295, 420, 257, 21792, 38, 13, 823, 34230, 11, 264, 13891, 294, 257, 21792, 38, 366, 2570, 281, 362, 3875, 8474, 13, 814, 362, 633, 51832], 'temperature': 0.0, 'avg_logprob': -0.21092316199993266, 'compression_ratio': 1.6076555023923444, 'no_speech_prob': 0.010969582945108414}, {'id': 229, 'seek': 157662, 'start': 1576.62, 'end': 1581.34, 'text': ' basic block has a single entry and a single exit, meaning that the control can only enter', 'tokens': [50364, 3875, 3461, 575, 257, 2167, 8729, 293, 257, 2167, 11043, 11, 3620, 300, 264, 1969, 393, 787, 3242, 50600], 'temperature': 0.0, 'avg_logprob': -0.09810651673210992, 'compression_ratio': 2.0042735042735043, 'no_speech_prob': 0.000881400250364095}, {'id': 230, 'seek': 157662, 'start': 1581.34, 'end': 1585.26, 'text': ' from at the beginning of the basic block. It can exit only from the end of the basic block.', 'tokens': [50600, 490, 412, 264, 2863, 295, 264, 3875, 3461, 13, 467, 393, 11043, 787, 490, 264, 917, 295, 264, 3875, 3461, 13, 50796], 'temperature': 0.0, 'avg_logprob': -0.09810651673210992, 'compression_ratio': 2.0042735042735043, 'no_speech_prob': 0.000881400250364095}, {'id': 231, 'seek': 157662, 'start': 1586.78, 'end': 1592.9399999999998, 'text': ' Any, if there is any possibility of control transfer between two basic blocks, we will have', 'tokens': [50872, 2639, 11, 498, 456, 307, 604, 7959, 295, 1969, 5003, 1296, 732, 3875, 8474, 11, 321, 486, 362, 51180], 'temperature': 0.0, 'avg_logprob': -0.09810651673210992, 'compression_ratio': 2.0042735042735043, 'no_speech_prob': 0.000881400250364095}, {'id': 232, 'seek': 157662, 'start': 1592.9399999999998, 'end': 1597.5, 'text': ' an edge between these two basic blocks, right? And there are, we will always distinguish between', 'tokens': [51180, 364, 4691, 1296, 613, 732, 3875, 8474, 11, 558, 30, 400, 456, 366, 11, 321, 486, 1009, 20206, 1296, 51408], 'temperature': 0.0, 'avg_logprob': -0.09810651673210992, 'compression_ratio': 2.0042735042735043, 'no_speech_prob': 0.000881400250364095}, {'id': 233, 'seek': 157662, 'start': 1597.5, 'end': 1602.86, 'text': ' two very important basic blocks. One is referred to as the entry block and other is referred to as', 'tokens': [51408, 732, 588, 1021, 3875, 8474, 13, 1485, 307, 10839, 281, 382, 264, 8729, 3461, 293, 661, 307, 10839, 281, 382, 51676], 'temperature': 0.0, 'avg_logprob': -0.09810651673210992, 'compression_ratio': 2.0042735042735043, 'no_speech_prob': 0.000881400250364095}, {'id': 234, 'seek': 160286, 'start': 1602.86, 'end': 1609.1799999999998, 'text': ' the exit block. I can always make sure that I have a single entry. Of course, I have to have a', 'tokens': [50364, 264, 11043, 3461, 13, 286, 393, 1009, 652, 988, 300, 286, 362, 257, 2167, 8729, 13, 2720, 1164, 11, 286, 362, 281, 362, 257, 50680], 'temperature': 0.0, 'avg_logprob': -0.08013688146540549, 'compression_ratio': 1.9065040650406504, 'no_speech_prob': 0.0077028172090649605}, {'id': 235, 'seek': 160286, 'start': 1609.1799999999998, 'end': 1615.34, 'text': ' single entry. There is no function which enters in two different places, right? So, for every', 'tokens': [50680, 2167, 8729, 13, 821, 307, 572, 2445, 597, 18780, 294, 732, 819, 3190, 11, 558, 30, 407, 11, 337, 633, 50988], 'temperature': 0.0, 'avg_logprob': -0.08013688146540549, 'compression_ratio': 1.9065040650406504, 'no_speech_prob': 0.0077028172090649605}, {'id': 236, 'seek': 160286, 'start': 1615.34, 'end': 1620.4599999999998, 'text': ' function in my program, I will have a control flow graph, right? So, we will probably not be able to', 'tokens': [50988, 2445, 294, 452, 1461, 11, 286, 486, 362, 257, 1969, 3095, 4295, 11, 558, 30, 407, 11, 321, 486, 1391, 406, 312, 1075, 281, 51244], 'temperature': 0.0, 'avg_logprob': -0.08013688146540549, 'compression_ratio': 1.9065040650406504, 'no_speech_prob': 0.0077028172090649605}, {'id': 237, 'seek': 160286, 'start': 1620.4599999999998, 'end': 1625.8999999999999, 'text': ' touch analyzing programs which span multiple functions. So, we will only look at programs', 'tokens': [51244, 2557, 23663, 4268, 597, 16174, 3866, 6828, 13, 407, 11, 321, 486, 787, 574, 412, 4268, 51516], 'temperature': 0.0, 'avg_logprob': -0.08013688146540549, 'compression_ratio': 1.9065040650406504, 'no_speech_prob': 0.0077028172090649605}, {'id': 238, 'seek': 160286, 'start': 1625.8999999999999, 'end': 1631.1, 'text': ' which have only one function or every function in the program I can analyze in isolation,', 'tokens': [51516, 597, 362, 787, 472, 2445, 420, 633, 2445, 294, 264, 1461, 286, 393, 12477, 294, 16001, 11, 51776], 'temperature': 0.0, 'avg_logprob': -0.08013688146540549, 'compression_ratio': 1.9065040650406504, 'no_speech_prob': 0.0077028172090649605}, {'id': 239, 'seek': 163110, 'start': 1631.1, 'end': 1636.3799999999999, 'text': ' right? I will not be able to say the effect of one function on another. That is something', 'tokens': [50364, 558, 30, 286, 486, 406, 312, 1075, 281, 584, 264, 1802, 295, 472, 2445, 322, 1071, 13, 663, 307, 746, 50628], 'temperature': 0.0, 'avg_logprob': -0.18559857244076935, 'compression_ratio': 1.8853754940711462, 'no_speech_prob': 0.0008828641730360687}, {'id': 240, 'seek': 163110, 'start': 1636.3799999999999, 'end': 1641.4199999999998, 'text': ' referred to as an interprocedural analysis, right? So, because you want to figure out what', 'tokens': [50628, 10839, 281, 382, 364, 728, 4318, 1232, 1807, 5215, 11, 558, 30, 407, 11, 570, 291, 528, 281, 2573, 484, 437, 50880], 'temperature': 0.0, 'avg_logprob': -0.18559857244076935, 'compression_ratio': 1.8853754940711462, 'no_speech_prob': 0.0008828641730360687}, {'id': 241, 'seek': 163110, 'start': 1641.4199999999998, 'end': 1649.1, 'text': ' interaction between procedures, we will constrain ourselves to what is referred to as intra-procedural', 'tokens': [50880, 9285, 1296, 13846, 11, 321, 486, 1817, 7146, 4175, 281, 437, 307, 10839, 281, 382, 43358, 12, 4318, 1232, 1807, 51264], 'temperature': 0.0, 'avg_logprob': -0.18559857244076935, 'compression_ratio': 1.8853754940711462, 'no_speech_prob': 0.0008828641730360687}, {'id': 242, 'seek': 163110, 'start': 1649.1, 'end': 1654.06, 'text': ' analysis, right? So, these are the analysis only within a function, right? So, every function will', 'tokens': [51264, 5215, 11, 558, 30, 407, 11, 613, 366, 264, 5215, 787, 1951, 257, 2445, 11, 558, 30, 407, 11, 633, 2445, 486, 51512], 'temperature': 0.0, 'avg_logprob': -0.18559857244076935, 'compression_ratio': 1.8853754940711462, 'no_speech_prob': 0.0008828641730360687}, {'id': 243, 'seek': 163110, 'start': 1654.06, 'end': 1659.5, 'text': ' have a control flow graph and the control flow graph will look like this. There is going to be', 'tokens': [51512, 362, 257, 1969, 3095, 4295, 293, 264, 1969, 3095, 4295, 486, 574, 411, 341, 13, 821, 307, 516, 281, 312, 51784], 'temperature': 0.0, 'avg_logprob': -0.18559857244076935, 'compression_ratio': 1.8853754940711462, 'no_speech_prob': 0.0008828641730360687}, {'id': 244, 'seek': 165950, 'start': 1660.46, 'end': 1669.66, 'text': ' a strict entry block and I can always transform my control flow graph so that it has an exit block.', 'tokens': [50412, 257, 10910, 8729, 3461, 293, 286, 393, 1009, 4088, 452, 1969, 3095, 4295, 370, 300, 309, 575, 364, 11043, 3461, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.1578060785929362, 'compression_ratio': 1.7433155080213905, 'no_speech_prob': 0.005366089753806591}, {'id': 245, 'seek': 165950, 'start': 1671.26, 'end': 1675.1, 'text': ' So, what will an exit block have in a function?', 'tokens': [50952, 407, 11, 437, 486, 364, 11043, 3461, 362, 294, 257, 2445, 30, 51144], 'temperature': 0.0, 'avg_logprob': -0.1578060785929362, 'compression_ratio': 1.7433155080213905, 'no_speech_prob': 0.005366089753806591}, {'id': 246, 'seek': 165950, 'start': 1678.3, 'end': 1684.14, 'text': " Instruction will surely have written instruction, right? It's surely going to have a written", 'tokens': [51304, 2730, 3826, 486, 11468, 362, 3720, 10951, 11, 558, 30, 467, 311, 11468, 516, 281, 362, 257, 3720, 51596], 'temperature': 0.0, 'avg_logprob': -0.1578060785929362, 'compression_ratio': 1.7433155080213905, 'no_speech_prob': 0.005366089753806591}, {'id': 247, 'seek': 165950, 'start': 1684.14, 'end': 1688.62, 'text': ' instruction, but then the program may not or a function may not have a single return.', 'tokens': [51596, 10951, 11, 457, 550, 264, 1461, 815, 406, 420, 257, 2445, 815, 406, 362, 257, 2167, 2736, 13, 51820], 'temperature': 0.0, 'avg_logprob': -0.1578060785929362, 'compression_ratio': 1.7433155080213905, 'no_speech_prob': 0.005366089753806591}, {'id': 248, 'seek': 168950, 'start': 1689.5, 'end': 1693.82, 'text': ' I can say if something return, if something return, switch case return, right? I can have', 'tokens': [50364, 286, 393, 584, 498, 746, 2736, 11, 498, 746, 2736, 11, 3679, 1389, 2736, 11, 558, 30, 286, 393, 362, 50580], 'temperature': 0.0, 'avg_logprob': -0.11854905979607695, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.002389489207416773}, {'id': 249, 'seek': 168950, 'start': 1693.82, 'end': 1700.06, 'text': ' multiple returns in my program. So, every return is going to create an exit node. How can I ensure', 'tokens': [50580, 3866, 11247, 294, 452, 1461, 13, 407, 11, 633, 2736, 307, 516, 281, 1884, 364, 11043, 9984, 13, 1012, 393, 286, 5586, 50892], 'temperature': 0.0, 'avg_logprob': -0.11854905979607695, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.002389489207416773}, {'id': 250, 'seek': 168950, 'start': 1700.06, 'end': 1706.94, 'text': ' that my graph has a single exit node? Exactly that is the solution. I will ensure only that', 'tokens': [50892, 300, 452, 4295, 575, 257, 2167, 11043, 9984, 30, 7587, 300, 307, 264, 3827, 13, 286, 486, 5586, 787, 300, 51236], 'temperature': 0.0, 'avg_logprob': -0.11854905979607695, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.002389489207416773}, {'id': 251, 'seek': 168950, 'start': 1706.94, 'end': 1714.86, 'text': ' guy has a return. For every statement which has a return, you put a store that return value and', 'tokens': [51236, 2146, 575, 257, 2736, 13, 1171, 633, 5629, 597, 575, 257, 2736, 11, 291, 829, 257, 3531, 300, 2736, 2158, 293, 51632], 'temperature': 0.0, 'avg_logprob': -0.11854905979607695, 'compression_ratio': 1.7735849056603774, 'no_speech_prob': 0.002389489207416773}, {'id': 252, 'seek': 171486, 'start': 1714.86, 'end': 1720.78, 'text': ' transfer control to that block, right? So, I can ensure I can do a small simple transformation', 'tokens': [50364, 5003, 1969, 281, 300, 3461, 11, 558, 30, 407, 11, 286, 393, 5586, 286, 393, 360, 257, 1359, 2199, 9887, 50660], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 253, 'seek': 171486, 'start': 1720.78, 'end': 1726.1399999999999, 'text': ' to the program and understand see from the first day onwards, we have started looking at changing', 'tokens': [50660, 281, 264, 1461, 293, 1223, 536, 490, 264, 700, 786, 34230, 11, 321, 362, 1409, 1237, 412, 4473, 50928], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 254, 'seek': 171486, 'start': 1726.1399999999999, 'end': 1732.4599999999998, 'text': ' the program to make our analysis easier, right? And that will be the trend all through. If you', 'tokens': [50928, 264, 1461, 281, 652, 527, 5215, 3571, 11, 558, 30, 400, 300, 486, 312, 264, 6028, 439, 807, 13, 759, 291, 51244], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 255, 'seek': 171486, 'start': 1732.4599999999998, 'end': 1736.06, 'text': " can do any simplification which makes our analysis easier, we'll do it, right? So, this is a very", 'tokens': [51244, 393, 360, 604, 6883, 3774, 597, 1669, 527, 5215, 3571, 11, 321, 603, 360, 309, 11, 558, 30, 407, 11, 341, 307, 257, 588, 51424], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 256, 'seek': 171486, 'start': 1736.06, 'end': 1739.4199999999998, 'text': " simple transformation, but you will see that when you're writing code, it will make your", 'tokens': [51424, 2199, 9887, 11, 457, 291, 486, 536, 300, 562, 291, 434, 3579, 3089, 11, 309, 486, 652, 428, 51592], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 257, 'seek': 171486, 'start': 1739.4199999999998, 'end': 1743.74, 'text': ' implementation much simpler, right? So, we will have a single. So, we will assume from now onwards,', 'tokens': [51592, 11420, 709, 18587, 11, 558, 30, 407, 11, 321, 486, 362, 257, 2167, 13, 407, 11, 321, 486, 6552, 490, 586, 34230, 11, 51808], 'temperature': 0.0, 'avg_logprob': -0.11113328519074814, 'compression_ratio': 1.9391891891891893, 'no_speech_prob': 0.04463627561926842}, {'id': 258, 'seek': 174374, 'start': 1743.74, 'end': 1747.74, 'text': " we'll assume that we have a single entry block and we have a single exit block. You can always", 'tokens': [50364, 321, 603, 6552, 300, 321, 362, 257, 2167, 8729, 3461, 293, 321, 362, 257, 2167, 11043, 3461, 13, 509, 393, 1009, 50564], 'temperature': 0.0, 'avg_logprob': -0.1103883558704007, 'compression_ratio': 1.8663967611336032, 'no_speech_prob': 0.0017540549160912633}, {'id': 259, 'seek': 174374, 'start': 1747.74, 'end': 1756.06, 'text': ' transform programs with multiple returns to a procedure with single return. Okay. So,', 'tokens': [50564, 4088, 4268, 365, 3866, 11247, 281, 257, 10747, 365, 2167, 2736, 13, 1033, 13, 407, 11, 50980], 'temperature': 0.0, 'avg_logprob': -0.1103883558704007, 'compression_ratio': 1.8663967611336032, 'no_speech_prob': 0.0017540549160912633}, {'id': 260, 'seek': 174374, 'start': 1756.06, 'end': 1761.42, 'text': " this is example of a control program. Big deal. It's a graph. There are, I can see two loops.", 'tokens': [50980, 341, 307, 1365, 295, 257, 1969, 1461, 13, 5429, 2028, 13, 467, 311, 257, 4295, 13, 821, 366, 11, 286, 393, 536, 732, 16121, 13, 51248], 'temperature': 0.0, 'avg_logprob': -0.1103883558704007, 'compression_ratio': 1.8663967611336032, 'no_speech_prob': 0.0017540549160912633}, {'id': 261, 'seek': 174374, 'start': 1761.42, 'end': 1766.54, 'text': ' There is a loop from, loop containing two, three, four, five. There is a loop containing,', 'tokens': [51248, 821, 307, 257, 6367, 490, 11, 6367, 19273, 732, 11, 1045, 11, 1451, 11, 1732, 13, 821, 307, 257, 6367, 19273, 11, 51504], 'temperature': 0.0, 'avg_logprob': -0.1103883558704007, 'compression_ratio': 1.8663967611336032, 'no_speech_prob': 0.0017540549160912633}, {'id': 262, 'seek': 174374, 'start': 1766.54, 'end': 1771.02, 'text': ' there is a, so this is a nested loop. So, there is another loop which is two, three, four, five,', 'tokens': [51504, 456, 307, 257, 11, 370, 341, 307, 257, 15646, 292, 6367, 13, 407, 11, 456, 307, 1071, 6367, 597, 307, 732, 11, 1045, 11, 1451, 11, 1732, 11, 51728], 'temperature': 0.0, 'avg_logprob': -0.1103883558704007, 'compression_ratio': 1.8663967611336032, 'no_speech_prob': 0.0017540549160912633}, {'id': 263, 'seek': 177102, 'start': 1771.02, 'end': 1787.02, 'text': ' and six, right? And so, can you identify that statement at four? What could be creating such', 'tokens': [50364, 293, 2309, 11, 558, 30, 400, 370, 11, 393, 291, 5876, 300, 5629, 412, 1451, 30, 708, 727, 312, 4084, 1270, 51164], 'temperature': 0.0, 'avg_logprob': -0.17772587485935376, 'compression_ratio': 1.366412213740458, 'no_speech_prob': 0.04312833771109581}, {'id': 264, 'seek': 177102, 'start': 1787.02, 'end': 1796.46, 'text': ' a weird jump? Actually, break will also not do because break will have just exit loop,', 'tokens': [51164, 257, 3657, 3012, 30, 5135, 11, 1821, 486, 611, 406, 360, 570, 1821, 486, 362, 445, 11043, 6367, 11, 51636], 'temperature': 0.0, 'avg_logprob': -0.17772587485935376, 'compression_ratio': 1.366412213740458, 'no_speech_prob': 0.04312833771109581}, {'id': 265, 'seek': 179646, 'start': 1796.46, 'end': 1803.82, 'text': ' go to. So, you need a forward go to, but had it been a single loop, then it could have been a break.', 'tokens': [50364, 352, 281, 13, 407, 11, 291, 643, 257, 2128, 352, 281, 11, 457, 632, 309, 668, 257, 2167, 6367, 11, 550, 309, 727, 362, 668, 257, 1821, 13, 50732], 'temperature': 0.0, 'avg_logprob': -0.18457096815109253, 'compression_ratio': 1.6141304347826086, 'no_speech_prob': 0.013970986939966679}, {'id': 266, 'seek': 179646, 'start': 1805.74, 'end': 1812.3, 'text': ' So, looking at a control flow graph, you should be able to identify these control flow statements,', 'tokens': [50828, 407, 11, 1237, 412, 257, 1969, 3095, 4295, 11, 291, 820, 312, 1075, 281, 5876, 613, 1969, 3095, 12363, 11, 51156], 'temperature': 0.0, 'avg_logprob': -0.18457096815109253, 'compression_ratio': 1.6141304347826086, 'no_speech_prob': 0.013970986939966679}, {'id': 267, 'seek': 179646, 'start': 1812.3, 'end': 1821.1000000000001, 'text': ' right? So, can you think of what statement does two have? Note two have? And if condition, right?', 'tokens': [51156, 558, 30, 407, 11, 393, 291, 519, 295, 437, 5629, 775, 732, 362, 30, 11633, 732, 362, 30, 400, 498, 4188, 11, 558, 30, 51596], 'temperature': 0.0, 'avg_logprob': -0.18457096815109253, 'compression_ratio': 1.6141304347826086, 'no_speech_prob': 0.013970986939966679}, {'id': 268, 'seek': 182110, 'start': 1821.26, 'end': 1825.1, 'text': " So, on a true, it goes to three and false goes to four or something like that. We don't distinguish", 'tokens': [50372, 407, 11, 322, 257, 2074, 11, 309, 1709, 281, 1045, 293, 7908, 1709, 281, 1451, 420, 746, 411, 300, 13, 492, 500, 380, 20206, 50564], 'temperature': 0.0, 'avg_logprob': -0.24420902854517887, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.005904323887079954}, {'id': 269, 'seek': 182110, 'start': 1825.1, 'end': 1829.4199999999998, 'text': ' between the true side and the false side in a control flow graph unless really required. So,', 'tokens': [50564, 1296, 264, 2074, 1252, 293, 264, 7908, 1252, 294, 257, 1969, 3095, 4295, 5969, 534, 4739, 13, 407, 11, 50780], 'temperature': 0.0, 'avg_logprob': -0.24420902854517887, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.005904323887079954}, {'id': 270, 'seek': 182110, 'start': 1829.4199999999998, 'end': 1834.9399999999998, 'text': " in general control flow graph, we'll not annotate it. What if that node four wasn't there and the", 'tokens': [50780, 294, 2674, 1969, 3095, 4295, 11, 321, 603, 406, 25339, 473, 309, 13, 708, 498, 300, 9984, 1451, 2067, 380, 456, 293, 264, 51056], 'temperature': 0.0, 'avg_logprob': -0.24420902854517887, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.005904323887079954}, {'id': 271, 'seek': 182110, 'start': 1834.9399999999998, 'end': 1841.1799999999998, 'text': ' control from two would have just gone to five? What would the statement at two look like?', 'tokens': [51056, 1969, 490, 732, 576, 362, 445, 2780, 281, 1732, 30, 708, 576, 264, 5629, 412, 732, 574, 411, 30, 51368], 'temperature': 0.0, 'avg_logprob': -0.24420902854517887, 'compression_ratio': 1.6964285714285714, 'no_speech_prob': 0.005904323887079954}, {'id': 272, 'seek': 184118, 'start': 1842.0600000000002, 'end': 1844.78, 'text': ' What would the statement at two look like?', 'tokens': [50408, 708, 576, 264, 5629, 412, 732, 574, 411, 30, 50544], 'temperature': 0.0, 'avg_logprob': -0.19831794738769531, 'compression_ratio': 1.3617021276595744, 'no_speech_prob': 0.04725053161382675}, {'id': 273, 'seek': 184118, 'start': 1849.26, 'end': 1852.8600000000001, 'text': ' If then it will transfer control to three, otherwise it would have anyway gone to.', 'tokens': [50768, 759, 550, 309, 486, 5003, 1969, 281, 1045, 11, 5911, 309, 576, 362, 4033, 2780, 281, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.19831794738769531, 'compression_ratio': 1.3617021276595744, 'no_speech_prob': 0.04725053161382675}, {'id': 274, 'seek': 184118, 'start': 1855.8200000000002, 'end': 1861.5, 'text': ' So, okay, excellent. So, you guys understand it and anything else?', 'tokens': [51096, 407, 11, 1392, 11, 7103, 13, 407, 11, 291, 1074, 1223, 309, 293, 1340, 1646, 30, 51380], 'temperature': 0.0, 'avg_logprob': -0.19831794738769531, 'compression_ratio': 1.3617021276595744, 'no_speech_prob': 0.04725053161382675}, {'id': 275, 'seek': 186150, 'start': 1862.14, 'end': 1871.74, 'text': ' And can you tell me the nature of these loops? The loop at two and like two to five and two to six,', 'tokens': [50396, 400, 393, 291, 980, 385, 264, 3687, 295, 613, 16121, 30, 440, 6367, 412, 732, 293, 411, 732, 281, 1732, 293, 732, 281, 2309, 11, 50876], 'temperature': 0.0, 'avg_logprob': -0.21479056717513442, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.10901565849781036}, {'id': 276, 'seek': 186150, 'start': 1872.78, 'end': 1877.98, 'text': ' they are variants of loop. They are for loop or while loop or do while loop, repeat until what', 'tokens': [50928, 436, 366, 21669, 295, 6367, 13, 814, 366, 337, 6367, 420, 1339, 6367, 420, 360, 1339, 6367, 11, 7149, 1826, 437, 51188], 'temperature': 0.0, 'avg_logprob': -0.21479056717513442, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.10901565849781036}, {'id': 277, 'seek': 186150, 'start': 1877.98, 'end': 1891.1, 'text': ' sort of loops they are. So, what would they do while, right? Why is that? Because the check', 'tokens': [51188, 1333, 295, 16121, 436, 366, 13, 407, 11, 437, 576, 436, 360, 1339, 11, 558, 30, 1545, 307, 300, 30, 1436, 264, 1520, 51844], 'temperature': 0.0, 'avg_logprob': -0.21479056717513442, 'compression_ratio': 1.672514619883041, 'no_speech_prob': 0.10901565849781036}, {'id': 278, 'seek': 189110, 'start': 1891.1, 'end': 1899.82, 'text': ' happens at the end. Had it been a while loop, how would it look like? Right, right, excellent.', 'tokens': [50364, 2314, 412, 264, 917, 13, 12298, 309, 668, 257, 1339, 6367, 11, 577, 576, 309, 574, 411, 30, 1779, 11, 558, 11, 7103, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.12233735084533691, 'compression_ratio': 1.6808510638297873, 'no_speech_prob': 0.0012439903803169727}, {'id': 279, 'seek': 189110, 'start': 1901.8999999999999, 'end': 1907.8999999999999, 'text': " So, the next step is that now the program, the first control for analysis we'll do is to construct", 'tokens': [50904, 407, 11, 264, 958, 1823, 307, 300, 586, 264, 1461, 11, 264, 700, 1969, 337, 5215, 321, 603, 360, 307, 281, 7690, 51204], 'temperature': 0.0, 'avg_logprob': -0.12233735084533691, 'compression_ratio': 1.6808510638297873, 'no_speech_prob': 0.0012439903803169727}, {'id': 280, 'seek': 189110, 'start': 1907.8999999999999, 'end': 1912.1399999999999, 'text': ' this nice data structure. This is a very interesting data structure. See, looking at the data structure,', 'tokens': [51204, 341, 1481, 1412, 3877, 13, 639, 307, 257, 588, 1880, 1412, 3877, 13, 3008, 11, 1237, 412, 264, 1412, 3877, 11, 51416], 'temperature': 0.0, 'avg_logprob': -0.12233735084533691, 'compression_ratio': 1.6808510638297873, 'no_speech_prob': 0.0012439903803169727}, {'id': 281, 'seek': 189110, 'start': 1912.1399999999999, 'end': 1918.1399999999999, 'text': ' I can say so much about the program. Like you could, you can say that there is a go to statement', 'tokens': [51416, 286, 393, 584, 370, 709, 466, 264, 1461, 13, 1743, 291, 727, 11, 291, 393, 584, 300, 456, 307, 257, 352, 281, 5629, 51716], 'temperature': 0.0, 'avg_logprob': -0.12233735084533691, 'compression_ratio': 1.6808510638297873, 'no_speech_prob': 0.0012439903803169727}, {'id': 282, 'seek': 191814, 'start': 1918.14, 'end': 1923.18, 'text': ' sitting here. You can say, oh, there are two loops sitting here. Oh, these loops look like a', 'tokens': [50364, 3798, 510, 13, 509, 393, 584, 11, 1954, 11, 456, 366, 732, 16121, 3798, 510, 13, 876, 11, 613, 16121, 574, 411, 257, 50616], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 283, 'seek': 191814, 'start': 1923.18, 'end': 1927.0200000000002, 'text': ' two while loop. Right? You can say so much, but just by looking at this particular graph.', 'tokens': [50616, 732, 1339, 6367, 13, 1779, 30, 509, 393, 584, 370, 709, 11, 457, 445, 538, 1237, 412, 341, 1729, 4295, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 284, 'seek': 191814, 'start': 1927.8200000000002, 'end': 1931.9, 'text': ' Interestingly, I have not even told you what statements are there in these basic blocks.', 'tokens': [50848, 30564, 11, 286, 362, 406, 754, 1907, 291, 437, 12363, 366, 456, 294, 613, 3875, 8474, 13, 51052], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 285, 'seek': 191814, 'start': 1931.9, 'end': 1936.46, 'text': ' Right? They are completely abstracted away. So, abstraction is the key to program analysis', 'tokens': [51052, 1779, 30, 814, 366, 2584, 12649, 292, 1314, 13, 407, 11, 37765, 307, 264, 2141, 281, 1461, 5215, 51280], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 286, 'seek': 191814, 'start': 1937.0200000000002, 'end': 1940.22, 'text': ' because programs are very complicated. Unless you throw a lot of details,', 'tokens': [51308, 570, 4268, 366, 588, 6179, 13, 16581, 291, 3507, 257, 688, 295, 4365, 11, 51468], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 287, 'seek': 191814, 'start': 1940.7800000000002, 'end': 1944.5400000000002, 'text': ' they are very difficult to analyze. Right? So, you only have to throw a lot of details', 'tokens': [51496, 436, 366, 588, 2252, 281, 12477, 13, 1779, 30, 407, 11, 291, 787, 362, 281, 3507, 257, 688, 295, 4365, 51684], 'temperature': 0.0, 'avg_logprob': -0.17659052150455987, 'compression_ratio': 1.7910958904109588, 'no_speech_prob': 0.03509625047445297}, {'id': 288, 'seek': 194454, 'start': 1944.54, 'end': 1948.86, 'text': ' and only look at things that really matter to you. Right? So, here I have thrown away all', 'tokens': [50364, 293, 787, 574, 412, 721, 300, 534, 1871, 281, 291, 13, 1779, 30, 407, 11, 510, 286, 362, 11732, 1314, 439, 50580], 'temperature': 0.0, 'avg_logprob': -0.11720725468226842, 'compression_ratio': 1.7941176470588236, 'no_speech_prob': 0.022952085360884666}, {'id': 289, 'seek': 194454, 'start': 1948.86, 'end': 1954.06, 'text': ' statements. Right? But still the structure of this graph tells me a lot about what this program is', 'tokens': [50580, 12363, 13, 1779, 30, 583, 920, 264, 3877, 295, 341, 4295, 5112, 385, 257, 688, 466, 437, 341, 1461, 307, 50840], 'temperature': 0.0, 'avg_logprob': -0.11720725468226842, 'compression_ratio': 1.7941176470588236, 'no_speech_prob': 0.022952085360884666}, {'id': 290, 'seek': 194454, 'start': 1954.06, 'end': 1961.6599999999999, 'text': " doing. Okay. So, the first control for analysis we'll do is we'll try to construct this control", 'tokens': [50840, 884, 13, 1033, 13, 407, 11, 264, 700, 1969, 337, 5215, 321, 603, 360, 307, 321, 603, 853, 281, 7690, 341, 1969, 51220], 'temperature': 0.0, 'avg_logprob': -0.11720725468226842, 'compression_ratio': 1.7941176470588236, 'no_speech_prob': 0.022952085360884666}, {'id': 291, 'seek': 194454, 'start': 1961.6599999999999, 'end': 1965.74, 'text': " for graph. Control for analysis we'll do is to construct control for graph. Okay.", 'tokens': [51220, 337, 4295, 13, 12912, 337, 5215, 321, 603, 360, 307, 281, 7690, 1969, 337, 4295, 13, 1033, 13, 51424], 'temperature': 0.0, 'avg_logprob': -0.11720725468226842, 'compression_ratio': 1.7941176470588236, 'no_speech_prob': 0.022952085360884666}, {'id': 292, 'seek': 196574, 'start': 1965.9, 'end': 1979.02, 'text': ' Okay. So, have you guys seen some other intermediate representation other than', 'tokens': [50372, 1033, 13, 407, 11, 362, 291, 1074, 1612, 512, 661, 19376, 10290, 661, 813, 51028], 'temperature': 0.0, 'avg_logprob': -0.23780541087305823, 'compression_ratio': 1.3153846153846154, 'no_speech_prob': 0.024309659376740456}, {'id': 293, 'seek': 196574, 'start': 1982.7, 'end': 1993.1, 'text': " your AST? Even in your schools? Have you seen three address code? How many of you don't know", 'tokens': [51212, 428, 316, 6840, 30, 2754, 294, 428, 4656, 30, 3560, 291, 1612, 1045, 2985, 3089, 30, 1012, 867, 295, 291, 500, 380, 458, 51732], 'temperature': 0.0, 'avg_logprob': -0.23780541087305823, 'compression_ratio': 1.3153846153846154, 'no_speech_prob': 0.024309659376740456}, {'id': 294, 'seek': 199310, 'start': 1993.1, 'end': 1998.9399999999998, 'text': " or how many of you know three address code? That's the easier answer. Mostly everybody.", 'tokens': [50364, 420, 577, 867, 295, 291, 458, 1045, 2985, 3089, 30, 663, 311, 264, 3571, 1867, 13, 29035, 2201, 13, 50656], 'temperature': 0.0, 'avg_logprob': -0.2921680910833951, 'compression_ratio': 1.3355263157894737, 'no_speech_prob': 0.01190358679741621}, {'id': 295, 'seek': 199310, 'start': 2001.02, 'end': 2003.1, 'text': ' So, why does it become a tree?', 'tokens': [50760, 407, 11, 983, 775, 309, 1813, 257, 4230, 30, 50864], 'temperature': 0.0, 'avg_logprob': -0.2921680910833951, 'compression_ratio': 1.3355263157894737, 'no_speech_prob': 0.01190358679741621}, {'id': 296, 'seek': 199310, 'start': 2009.74, 'end': 2015.5, 'text': ' Yeah, but then it could have become a DAG. Even the cycle eliminated, this is a DAG.', 'tokens': [51196, 865, 11, 457, 550, 309, 727, 362, 1813, 257, 9578, 38, 13, 2754, 264, 6586, 20308, 11, 341, 307, 257, 9578, 38, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.2921680910833951, 'compression_ratio': 1.3355263157894737, 'no_speech_prob': 0.01190358679741621}, {'id': 297, 'seek': 202310, 'start': 2023.1, 'end': 2032.06, 'text': ' Okay. So, somehow it becomes a tree. So, maybe you can discern more.', 'tokens': [50364, 1033, 13, 407, 11, 6063, 309, 3643, 257, 4230, 13, 407, 11, 1310, 291, 393, 30868, 544, 13, 50812], 'temperature': 0.0, 'avg_logprob': -0.2782083068575178, 'compression_ratio': 1.0684931506849316, 'no_speech_prob': 0.011999278329312801}, {'id': 298, 'seek': 202310, 'start': 2042.3799999999999, 'end': 2043.1799999999998, 'text': ' Okay. So,', 'tokens': [51328, 1033, 13, 407, 11, 51368], 'temperature': 0.0, 'avg_logprob': -0.2782083068575178, 'compression_ratio': 1.0684931506849316, 'no_speech_prob': 0.011999278329312801}, {'id': 299, 'seek': 204318, 'start': 2043.18, 'end': 2055.7400000000002, 'text': ' so, no direction we have not extracted out. We created, we can create a directed graph.', 'tokens': [50364, 370, 11, 572, 3513, 321, 362, 406, 34086, 484, 13, 492, 2942, 11, 321, 393, 1884, 257, 12898, 4295, 13, 50992], 'temperature': 0.0, 'avg_logprob': -0.284516377882524, 'compression_ratio': 1.4, 'no_speech_prob': 0.020207028836011887}, {'id': 300, 'seek': 204318, 'start': 2062.54, 'end': 2070.94, 'text': ' You have a, the question was that you retain the same nodes as in the CFG', 'tokens': [51332, 509, 362, 257, 11, 264, 1168, 390, 300, 291, 18340, 264, 912, 13891, 382, 294, 264, 21792, 38, 51752], 'temperature': 0.0, 'avg_logprob': -0.284516377882524, 'compression_ratio': 1.4, 'no_speech_prob': 0.020207028836011887}, {'id': 301, 'seek': 207094, 'start': 2070.94, 'end': 2080.78, 'text': ' and between n1 to n2 you create an edge, you can create a directed edge if n1 is the dominator of n2.', 'tokens': [50364, 293, 1296, 297, 16, 281, 297, 17, 291, 1884, 364, 4691, 11, 291, 393, 1884, 257, 12898, 4691, 498, 297, 16, 307, 264, 8859, 1639, 295, 297, 17, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.2819167628432765, 'compression_ratio': 1.2317073170731707, 'no_speech_prob': 0.011443442665040493}, {'id': 302, 'seek': 208078, 'start': 2080.78, 'end': 2103.7400000000002, 'text': ' So, why cannot, why can the idomb relation not be cardinality more than 1?', 'tokens': [50364, 407, 11, 983, 2644, 11, 983, 393, 264, 4496, 3548, 9721, 406, 312, 2920, 259, 1860, 544, 813, 502, 30, 51512], 'temperature': 0.0, 'avg_logprob': -0.375665823618571, 'compression_ratio': 1.0571428571428572, 'no_speech_prob': 0.17280445992946625}, {'id': 303, 'seek': 210374, 'start': 2103.74, 'end': 2117.02, 'text': ' Why can it not have two closest predecessors? Because,', 'tokens': [50364, 1545, 393, 309, 406, 362, 732, 13699, 24874, 45700, 30, 1436, 11, 51028], 'temperature': 0.0, 'avg_logprob': -0.24173244677091899, 'compression_ratio': 1.2201834862385321, 'no_speech_prob': 0.009007195010781288}, {'id': 304, 'seek': 210374, 'start': 2125.5, 'end': 2129.9799999999996, 'text': ' so, we said it is a poset. So, there may be no relation between certain nodes.', 'tokens': [51452, 370, 11, 321, 848, 309, 307, 257, 1366, 302, 13, 407, 11, 456, 815, 312, 572, 9721, 1296, 1629, 13891, 13, 51676], 'temperature': 0.0, 'avg_logprob': -0.24173244677091899, 'compression_ratio': 1.2201834862385321, 'no_speech_prob': 0.009007195010781288}, {'id': 305, 'seek': 213374, 'start': 2134.3799999999997, 'end': 2138.7799999999997, 'text': ' No, but if it is a poset, then it means there are nodes which,', 'tokens': [50396, 883, 11, 457, 498, 309, 307, 257, 1366, 302, 11, 550, 309, 1355, 456, 366, 13891, 597, 11, 50616], 'temperature': 0.0, 'avg_logprob': -0.20897115193880522, 'compression_ratio': 1.4369747899159664, 'no_speech_prob': 0.023464608937501907}, {'id': 306, 'seek': 213374, 'start': 2138.7799999999997, 'end': 2142.3799999999997, 'text': ' for which there is no relation at all. So, there is nothing which is,', 'tokens': [50616, 337, 597, 456, 307, 572, 9721, 412, 439, 13, 407, 11, 456, 307, 1825, 597, 307, 11, 50796], 'temperature': 0.0, 'avg_logprob': -0.20897115193880522, 'compression_ratio': 1.4369747899159664, 'no_speech_prob': 0.023464608937501907}, {'id': 307, 'seek': 213374, 'start': 2142.3799999999997, 'end': 2143.8199999999997, 'text': ' for them I cannot say which is closer.', 'tokens': [50796, 337, 552, 286, 2644, 584, 597, 307, 4966, 13, 50868], 'temperature': 0.0, 'avg_logprob': -0.20897115193880522, 'compression_ratio': 1.4369747899159664, 'no_speech_prob': 0.023464608937501907}, {'id': 308, 'seek': 214382, 'start': 2143.82, 'end': 2164.54, 'text': ' Very good, very good, very, very good. Okay. So, so, this tree is referred to as the dominated tree,', 'tokens': [50364, 4372, 665, 11, 588, 665, 11, 588, 11, 588, 665, 13, 1033, 13, 407, 11, 370, 11, 341, 4230, 307, 10839, 281, 382, 264, 23755, 4230, 11, 51400], 'temperature': 0.0, 'avg_logprob': -0.20545629501342774, 'compression_ratio': 1.424, 'no_speech_prob': 0.04711444303393364}, {'id': 309, 'seek': 214382, 'start': 2164.54, 'end': 2171.42, 'text': ' right? Data structure number 2. Again, a very interesting data structure. So,', 'tokens': [51400, 558, 30, 11888, 3877, 1230, 568, 13, 3764, 11, 257, 588, 1880, 1412, 3877, 13, 407, 11, 51744], 'temperature': 0.0, 'avg_logprob': -0.20545629501342774, 'compression_ratio': 1.424, 'no_speech_prob': 0.04711444303393364}, {'id': 310, 'seek': 217142, 'start': 2171.42, 'end': 2175.58, 'text': ' you can organize all your dominators into this beautiful data structure called the dominator', 'tokens': [50364, 291, 393, 13859, 439, 428, 8859, 3391, 666, 341, 2238, 1412, 3877, 1219, 264, 8859, 1639, 50572], 'temperature': 0.0, 'avg_logprob': -0.14484849572181702, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.027554333209991455}, {'id': 311, 'seek': 217142, 'start': 2175.58, 'end': 2180.14, 'text': ' tree and looking at the dominator tree, you can figure out the set of dominators for every node.', 'tokens': [50572, 4230, 293, 1237, 412, 264, 8859, 1639, 4230, 11, 291, 393, 2573, 484, 264, 992, 295, 8859, 3391, 337, 633, 9984, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.14484849572181702, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.027554333209991455}, {'id': 312, 'seek': 217142, 'start': 2180.7000000000003, 'end': 2192.38, 'text': ' How? How? Yeah, just look at its ancestors. Like from that node, just keep on looking at the', 'tokens': [50828, 1012, 30, 1012, 30, 865, 11, 445, 574, 412, 1080, 18069, 13, 1743, 490, 300, 9984, 11, 445, 1066, 322, 1237, 412, 264, 51412], 'temperature': 0.0, 'avg_logprob': -0.14484849572181702, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.027554333209991455}, {'id': 313, 'seek': 217142, 'start': 2192.38, 'end': 2197.82, 'text': ' ancestor, you will get the, all the nodes that are there, all of them will be its dominators, right?', 'tokens': [51412, 40032, 11, 291, 486, 483, 264, 11, 439, 264, 13891, 300, 366, 456, 11, 439, 295, 552, 486, 312, 1080, 8859, 3391, 11, 558, 30, 51684], 'temperature': 0.0, 'avg_logprob': -0.14484849572181702, 'compression_ratio': 1.7981220657276995, 'no_speech_prob': 0.027554333209991455}, {'id': 314, 'seek': 219782, 'start': 2197.82, 'end': 2207.5800000000004, 'text': ' So, that is the next thing. I do not have a diagram of that, but you guys created some, I hope.', 'tokens': [50364, 407, 11, 300, 307, 264, 958, 551, 13, 286, 360, 406, 362, 257, 10686, 295, 300, 11, 457, 291, 1074, 2942, 512, 11, 286, 1454, 13, 50852], 'temperature': 0.0, 'avg_logprob': -0.16492350689776533, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.005905190482735634}, {'id': 315, 'seek': 219782, 'start': 2212.1400000000003, 'end': 2217.82, 'text': ' Okay. So, this is the algorithm to compute dominators. So, you need to initialize all', 'tokens': [51080, 1033, 13, 407, 11, 341, 307, 264, 9284, 281, 14722, 8859, 3391, 13, 407, 11, 291, 643, 281, 5883, 1125, 439, 51364], 'temperature': 0.0, 'avg_logprob': -0.16492350689776533, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.005905190482735634}, {'id': 316, 'seek': 219782, 'start': 2217.82, 'end': 2223.5800000000004, 'text': ' nodes to the set of the universal node, that set of all nodes. And then you say that domain is', 'tokens': [51364, 13891, 281, 264, 992, 295, 264, 11455, 9984, 11, 300, 992, 295, 439, 13891, 13, 400, 550, 291, 584, 300, 9274, 307, 51652], 'temperature': 0.0, 'avg_logprob': -0.16492350689776533, 'compression_ratio': 1.5681818181818181, 'no_speech_prob': 0.005905190482735634}, {'id': 317, 'seek': 222358, 'start': 2223.58, 'end': 2227.98, 'text': ' nothing but put in that node and union it with the intersection of the predecessors of the node.', 'tokens': [50364, 1825, 457, 829, 294, 300, 9984, 293, 11671, 309, 365, 264, 15236, 295, 264, 24874, 45700, 295, 264, 9984, 13, 50584], 'temperature': 0.0, 'avg_logprob': -0.11336481398430423, 'compression_ratio': 1.6035502958579881, 'no_speech_prob': 0.03507089242339134}, {'id': 318, 'seek': 222358, 'start': 2230.22, 'end': 2236.46, 'text': ' So, you could have also done with a different initialization. You could have also initialized', 'tokens': [50696, 407, 11, 291, 727, 362, 611, 1096, 365, 257, 819, 5883, 2144, 13, 509, 727, 362, 611, 5883, 1602, 51008], 'temperature': 0.0, 'avg_logprob': -0.11336481398430423, 'compression_ratio': 1.6035502958579881, 'no_speech_prob': 0.03507089242339134}, {'id': 319, 'seek': 222358, 'start': 2236.46, 'end': 2248.22, 'text': ' it to empty. Why did we decide to initialize it to N? So, try to reason on this.', 'tokens': [51008, 309, 281, 6707, 13, 1545, 630, 321, 4536, 281, 5883, 1125, 309, 281, 426, 30, 407, 11, 853, 281, 1778, 322, 341, 13, 51596], 'temperature': 0.0, 'avg_logprob': -0.11336481398430423, 'compression_ratio': 1.6035502958579881, 'no_speech_prob': 0.03507089242339134}, {'id': 320, 'seek': 225358, 'start': 2254.38, 'end': 2257.58, 'text': ' Hey, easier kya hota hai? It will not give you the same result.', 'tokens': [50404, 1911, 11, 3571, 350, 3016, 2368, 64, 21822, 30, 467, 486, 406, 976, 291, 264, 912, 1874, 13, 50564], 'temperature': 0.0, 'avg_logprob': -0.2517372934441817, 'compression_ratio': 1.638157894736842, 'no_speech_prob': 0.03934261575341225}, {'id': 321, 'seek': 225358, 'start': 2266.7799999999997, 'end': 2272.54, 'text': ' No, no, do you say that, that if I can it as the empty set, initialize it to the empty set,', 'tokens': [51024, 883, 11, 572, 11, 360, 291, 584, 300, 11, 300, 498, 286, 393, 309, 382, 264, 6707, 992, 11, 5883, 1125, 309, 281, 264, 6707, 992, 11, 51312], 'temperature': 0.0, 'avg_logprob': -0.2517372934441817, 'compression_ratio': 1.638157894736842, 'no_speech_prob': 0.03934261575341225}, {'id': 322, 'seek': 225358, 'start': 2272.54, 'end': 2276.62, 'text': ' I would have not got the, I would have got the same solution, but it is, would have been less', 'tokens': [51312, 286, 576, 362, 406, 658, 264, 11, 286, 576, 362, 658, 264, 912, 3827, 11, 457, 309, 307, 11, 576, 362, 668, 1570, 51516], 'temperature': 0.0, 'avg_logprob': -0.2517372934441817, 'compression_ratio': 1.638157894736842, 'no_speech_prob': 0.03934261575341225}, {'id': 323, 'seek': 227662, 'start': 2276.62, 'end': 2283.98, 'text': ' efficient or you would have not got the same solution. So, efficiency first is correctness.', 'tokens': [50364, 7148, 420, 291, 576, 362, 406, 658, 264, 912, 3827, 13, 407, 11, 10493, 700, 307, 3006, 1287, 13, 50732], 'temperature': 0.0, 'avg_logprob': -0.14966777879364637, 'compression_ratio': 1.6968325791855203, 'no_speech_prob': 0.015396281145513058}, {'id': 324, 'seek': 227662, 'start': 2283.98, 'end': 2288.7799999999997, 'text': ' Am I getting the, I mean what is correct is different, but here. But you will have to do it', 'tokens': [50732, 2012, 286, 1242, 264, 11, 286, 914, 437, 307, 3006, 307, 819, 11, 457, 510, 13, 583, 291, 486, 362, 281, 360, 309, 50972], 'temperature': 0.0, 'avg_logprob': -0.14966777879364637, 'compression_ratio': 1.6968325791855203, 'no_speech_prob': 0.015396281145513058}, {'id': 325, 'seek': 227662, 'start': 2288.7799999999997, 'end': 2293.1, 'text': ' here in this case also, because I have not given any ordering on the how the nodes have to be', 'tokens': [50972, 510, 294, 341, 1389, 611, 11, 570, 286, 362, 406, 2212, 604, 21739, 322, 264, 577, 264, 13891, 362, 281, 312, 51188], 'temperature': 0.0, 'avg_logprob': -0.14966777879364637, 'compression_ratio': 1.6968325791855203, 'no_speech_prob': 0.015396281145513058}, {'id': 326, 'seek': 227662, 'start': 2293.1, 'end': 2301.2599999999998, 'text': ' computed. So, here I am assuming it to be a graph. I have not even removed my cycles and I am not', 'tokens': [51188, 40610, 13, 407, 11, 510, 286, 669, 11926, 309, 281, 312, 257, 4295, 13, 286, 362, 406, 754, 7261, 452, 17796, 293, 286, 669, 406, 51596], 'temperature': 0.0, 'avg_logprob': -0.14966777879364637, 'compression_ratio': 1.6968325791855203, 'no_speech_prob': 0.015396281145513058}, {'id': 327, 'seek': 230126, 'start': 2301.26, 'end': 2307.98, 'text': ' even assuming any ordering on the nodes. So, I am just saying just pick a node and apply this', 'tokens': [50364, 754, 11926, 604, 21739, 322, 264, 13891, 13, 407, 11, 286, 669, 445, 1566, 445, 1888, 257, 9984, 293, 3079, 341, 50700], 'temperature': 0.0, 'avg_logprob': -0.10297640405520044, 'compression_ratio': 1.7570093457943925, 'no_speech_prob': 0.022939341142773628}, {'id': 328, 'seek': 230126, 'start': 2307.98, 'end': 2312.94, 'text': ' and update the dominator set for it. Pick a node, apply this, apply the update dominator set.', 'tokens': [50700, 293, 5623, 264, 8859, 1639, 992, 337, 309, 13, 14129, 257, 9984, 11, 3079, 341, 11, 3079, 264, 5623, 8859, 1639, 992, 13, 50948], 'temperature': 0.0, 'avg_logprob': -0.10297640405520044, 'compression_ratio': 1.7570093457943925, 'no_speech_prob': 0.022939341142773628}, {'id': 329, 'seek': 230126, 'start': 2312.94, 'end': 2320.94, 'text': ' Keep on doing it till there is one iteration when none of the nodes dominator changes. So,', 'tokens': [50948, 5527, 322, 884, 309, 4288, 456, 307, 472, 24784, 562, 6022, 295, 264, 13891, 8859, 1639, 2962, 13, 407, 11, 51348], 'temperature': 0.0, 'avg_logprob': -0.10297640405520044, 'compression_ratio': 1.7570093457943925, 'no_speech_prob': 0.022939341142773628}, {'id': 330, 'seek': 230126, 'start': 2321.82, 'end': 2326.38, 'text': ' that is the exercise. Do it, you will get a lot of intuition as to what is going on. Just work it', 'tokens': [51392, 300, 307, 264, 5380, 13, 1144, 309, 11, 291, 486, 483, 257, 688, 295, 24002, 382, 281, 437, 307, 516, 322, 13, 1449, 589, 309, 51620], 'temperature': 0.0, 'avg_logprob': -0.10297640405520044, 'compression_ratio': 1.7570093457943925, 'no_speech_prob': 0.022939341142773628}, {'id': 331, 'seek': 232638, 'start': 2326.38, 'end': 2331.5, 'text': ' out. Just try to put it as empty set. Do it for a small graph. Maybe you can do it with lunch break', 'tokens': [50364, 484, 13, 1449, 853, 281, 829, 309, 382, 6707, 992, 13, 1144, 309, 337, 257, 1359, 4295, 13, 2704, 291, 393, 360, 309, 365, 6349, 1821, 50620], 'temperature': 0.0, 'avg_logprob': -0.13982785665071928, 'compression_ratio': 1.606694560669456, 'no_speech_prob': 0.016901597380638123}, {'id': 332, 'seek': 232638, 'start': 2331.5, 'end': 2338.06, 'text': ' or drink the, this thing later. Initialize it to a, we will know the theoretical reasons behind it', 'tokens': [50620, 420, 2822, 264, 11, 341, 551, 1780, 13, 22937, 831, 1125, 309, 281, 257, 11, 321, 486, 458, 264, 20864, 4112, 2261, 309, 50948], 'temperature': 0.0, 'avg_logprob': -0.13982785665071928, 'compression_ratio': 1.606694560669456, 'no_speech_prob': 0.016901597380638123}, {'id': 333, 'seek': 232638, 'start': 2338.06, 'end': 2342.78, 'text': ' tomorrow. We will actually look at fixed one theory and we will say that why is it interesting,', 'tokens': [50948, 4153, 13, 492, 486, 767, 574, 412, 6806, 472, 5261, 293, 321, 486, 584, 300, 983, 307, 309, 1880, 11, 51184], 'temperature': 0.0, 'avg_logprob': -0.13982785665071928, 'compression_ratio': 1.606694560669456, 'no_speech_prob': 0.016901597380638123}, {'id': 334, 'seek': 232638, 'start': 2343.5, 'end': 2348.46, 'text': ' why we have to do it this way. But for now, just try to get an intuition as to why is it,', 'tokens': [51220, 983, 321, 362, 281, 360, 309, 341, 636, 13, 583, 337, 586, 11, 445, 853, 281, 483, 364, 24002, 382, 281, 983, 307, 309, 11, 51468], 'temperature': 0.0, 'avg_logprob': -0.13982785665071928, 'compression_ratio': 1.606694560669456, 'no_speech_prob': 0.016901597380638123}, {'id': 335, 'seek': 234846, 'start': 2348.46, 'end': 2355.7400000000002, 'text': ' why do we have to initialize it to n. So, the next topic is I will come to,', 'tokens': [50364, 983, 360, 321, 362, 281, 5883, 1125, 309, 281, 297, 13, 407, 11, 264, 958, 4829, 307, 286, 486, 808, 281, 11, 50728], 'temperature': 0.0, 'avg_logprob': -0.11215865227483934, 'compression_ratio': 1.46875, 'no_speech_prob': 0.008053276687860489}, {'id': 336, 'seek': 234846, 'start': 2357.98, 'end': 2363.7400000000002, 'text': ' so we will discuss about something called a reducible flow graph.', 'tokens': [50840, 370, 321, 486, 2248, 466, 746, 1219, 257, 2783, 32128, 3095, 4295, 13, 51128], 'temperature': 0.0, 'avg_logprob': -0.11215865227483934, 'compression_ratio': 1.46875, 'no_speech_prob': 0.008053276687860489}, {'id': 337, 'seek': 234846, 'start': 2367.98, 'end': 2375.18, 'text': ' So, any graph you should be able to partition the edges into two categories. One is something', 'tokens': [51340, 407, 11, 604, 4295, 291, 820, 312, 1075, 281, 24808, 264, 8819, 666, 732, 10479, 13, 1485, 307, 746, 51700], 'temperature': 0.0, 'avg_logprob': -0.11215865227483934, 'compression_ratio': 1.46875, 'no_speech_prob': 0.008053276687860489}, {'id': 338, 'seek': 237518, 'start': 2375.18, 'end': 2387.1, 'text': ' called forward edges where the, where with those edges the graph creates a dag. If you just keep', 'tokens': [50364, 1219, 2128, 8819, 689, 264, 11, 689, 365, 729, 8819, 264, 4295, 7829, 257, 15460, 13, 759, 291, 445, 1066, 50960], 'temperature': 0.0, 'avg_logprob': -0.09351990620295207, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004328154493123293}, {'id': 339, 'seek': 237518, 'start': 2387.1, 'end': 2394.14, 'text': ' the forward edges, the graph would have created a dag. The other are back edges which prevent', 'tokens': [50960, 264, 2128, 8819, 11, 264, 4295, 576, 362, 2942, 257, 15460, 13, 440, 661, 366, 646, 8819, 597, 4871, 51312], 'temperature': 0.0, 'avg_logprob': -0.09351990620295207, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004328154493123293}, {'id': 340, 'seek': 237518, 'start': 2394.14, 'end': 2400.14, 'text': ' it from becoming a dag. So, these are edges on top of the dag. So, these are, so one algorithm', 'tokens': [51312, 309, 490, 5617, 257, 15460, 13, 407, 11, 613, 366, 8819, 322, 1192, 295, 264, 15460, 13, 407, 11, 613, 366, 11, 370, 472, 9284, 51612], 'temperature': 0.0, 'avg_logprob': -0.09351990620295207, 'compression_ratio': 1.7272727272727273, 'no_speech_prob': 0.004328154493123293}, {'id': 341, 'seek': 240014, 'start': 2401.1, 'end': 2410.22, 'text': ' to identify back edges is where the head dominates the tail. Can you see that? So,', 'tokens': [50412, 281, 5876, 646, 8819, 307, 689, 264, 1378, 8859, 1024, 264, 6838, 13, 1664, 291, 536, 300, 30, 407, 11, 50868], 'temperature': 0.0, 'avg_logprob': -0.1014437152914805, 'compression_ratio': 1.6627218934911243, 'no_speech_prob': 0.002250156830996275}, {'id': 342, 'seek': 240014, 'start': 2410.22, 'end': 2419.02, 'text': ' see the dominators start becoming useful already. So, if you have a graph here for all the forward', 'tokens': [50868, 536, 264, 8859, 3391, 722, 5617, 4420, 1217, 13, 407, 11, 498, 291, 362, 257, 4295, 510, 337, 439, 264, 2128, 51308], 'temperature': 0.0, 'avg_logprob': -0.1014437152914805, 'compression_ratio': 1.6627218934911243, 'no_speech_prob': 0.002250156830996275}, {'id': 343, 'seek': 240014, 'start': 2419.02, 'end': 2429.74, 'text': ' edges, you would see that the tail dominates the head. But for back edges, it will be the other way', 'tokens': [51308, 8819, 11, 291, 576, 536, 300, 264, 6838, 8859, 1024, 264, 1378, 13, 583, 337, 646, 8819, 11, 309, 486, 312, 264, 661, 636, 51844], 'temperature': 0.0, 'avg_logprob': -0.1014437152914805, 'compression_ratio': 1.6627218934911243, 'no_speech_prob': 0.002250156830996275}, {'id': 344, 'seek': 242974, 'start': 2429.74, 'end': 2452.22, 'text': ' around. So, let me just see what I wanted to say here is, okay sorry. So, these are,', 'tokens': [50364, 926, 13, 407, 11, 718, 385, 445, 536, 437, 286, 1415, 281, 584, 510, 307, 11, 1392, 2597, 13, 407, 11, 613, 366, 11, 51488], 'temperature': 0.0, 'avg_logprob': -0.2078030197708695, 'compression_ratio': 1.4108527131782946, 'no_speech_prob': 0.007802931591868401}, {'id': 345, 'seek': 242974, 'start': 2453.9799999999996, 'end': 2458.7, 'text': ' so any graph, so I should have said the other way. So, any graph where you can divide your set of', 'tokens': [51576, 370, 604, 4295, 11, 370, 286, 820, 362, 848, 264, 661, 636, 13, 407, 11, 604, 4295, 689, 291, 393, 9845, 428, 992, 295, 51812], 'temperature': 0.0, 'avg_logprob': -0.2078030197708695, 'compression_ratio': 1.4108527131782946, 'no_speech_prob': 0.007802931591868401}, {'id': 346, 'seek': 245870, 'start': 2458.7, 'end': 2465.2599999999998, 'text': ' edges into these two categories is referred to as a reducible flow graph. There are other flow graphs', 'tokens': [50364, 8819, 666, 613, 732, 10479, 307, 10839, 281, 382, 257, 2783, 32128, 3095, 4295, 13, 821, 366, 661, 3095, 24877, 50692], 'temperature': 0.0, 'avg_logprob': -0.15196145966995595, 'compression_ratio': 1.7635467980295567, 'no_speech_prob': 0.0005702315247617662}, {'id': 347, 'seek': 245870, 'start': 2465.2599999999998, 'end': 2471.4199999999996, 'text': ' which have the something called cross edges which, so these are called tree edges. But', 'tokens': [50692, 597, 362, 264, 746, 1219, 3278, 8819, 597, 11, 370, 613, 366, 1219, 4230, 8819, 13, 583, 51000], 'temperature': 0.0, 'avg_logprob': -0.15196145966995595, 'compression_ratio': 1.7635467980295567, 'no_speech_prob': 0.0005702315247617662}, {'id': 348, 'seek': 245870, 'start': 2472.14, 'end': 2475.66, 'text': ' like for instance, this particular graph, let us not get too much into it. Like for instance,', 'tokens': [51036, 411, 337, 5197, 11, 341, 1729, 4295, 11, 718, 505, 406, 483, 886, 709, 666, 309, 13, 1743, 337, 5197, 11, 51212], 'temperature': 0.0, 'avg_logprob': -0.15196145966995595, 'compression_ratio': 1.7635467980295567, 'no_speech_prob': 0.0005702315247617662}, {'id': 349, 'seek': 245870, 'start': 2475.66, 'end': 2487.66, 'text': ' this particular graph, look at this graph on the left. So, here for node 5,', 'tokens': [51212, 341, 1729, 4295, 11, 574, 412, 341, 4295, 322, 264, 1411, 13, 407, 11, 510, 337, 9984, 1025, 11, 51812], 'temperature': 0.0, 'avg_logprob': -0.15196145966995595, 'compression_ratio': 1.7635467980295567, 'no_speech_prob': 0.0005702315247617662}, {'id': 350, 'seek': 248870, 'start': 2488.7, 'end': 2505.8999999999996, 'text': ' this. The other thing is that this particular result that identifying back edges by identifying', 'tokens': [50364, 341, 13, 440, 661, 551, 307, 300, 341, 1729, 1874, 300, 16696, 646, 8819, 538, 16696, 51224], 'temperature': 0.0, 'avg_logprob': -0.15204259928535013, 'compression_ratio': 1.6724137931034482, 'no_speech_prob': 0.0016996725462377071}, {'id': 351, 'seek': 248870, 'start': 2505.8999999999996, 'end': 2510.2999999999997, 'text': ' nodes where the head dominates tails, it only works for these class of graphs which are called', 'tokens': [51224, 13891, 689, 264, 1378, 8859, 1024, 28537, 11, 309, 787, 1985, 337, 613, 1508, 295, 24877, 597, 366, 1219, 51444], 'temperature': 0.0, 'avg_logprob': -0.15204259928535013, 'compression_ratio': 1.6724137931034482, 'no_speech_prob': 0.0016996725462377071}, {'id': 352, 'seek': 248870, 'start': 2510.2999999999997, 'end': 2517.02, 'text': ' reducible flow graphs. So, for this reducible flow graphs, so this is a graph, the graph on the left', 'tokens': [51444, 2783, 32128, 3095, 24877, 13, 407, 11, 337, 341, 2783, 32128, 3095, 24877, 11, 370, 341, 307, 257, 4295, 11, 264, 4295, 322, 264, 1411, 51780], 'temperature': 0.0, 'avg_logprob': -0.15204259928535013, 'compression_ratio': 1.6724137931034482, 'no_speech_prob': 0.0016996725462377071}, {'id': 353, 'seek': 251702, 'start': 2517.02, 'end': 2524.46, 'text': ' side is a graph which is not a reducible flow graph. Okay, so very intuitively the way to think', 'tokens': [50364, 1252, 307, 257, 4295, 597, 307, 406, 257, 2783, 32128, 3095, 4295, 13, 1033, 11, 370, 588, 46506, 264, 636, 281, 519, 50736], 'temperature': 0.0, 'avg_logprob': -0.10120942321004747, 'compression_ratio': 1.7294117647058824, 'no_speech_prob': 0.023624403402209282}, {'id': 354, 'seek': 251702, 'start': 2524.46, 'end': 2531.5, 'text': ' about this is that in a reducible flow graph, it is easy to identify the loops. It is easy to say', 'tokens': [50736, 466, 341, 307, 300, 294, 257, 2783, 32128, 3095, 4295, 11, 309, 307, 1858, 281, 5876, 264, 16121, 13, 467, 307, 1858, 281, 584, 51088], 'temperature': 0.0, 'avg_logprob': -0.10120942321004747, 'compression_ratio': 1.7294117647058824, 'no_speech_prob': 0.023624403402209282}, {'id': 355, 'seek': 251702, 'start': 2531.5, 'end': 2541.02, 'text': ' that which set of nodes forms a loop. So, if you think about the graph in the left, can you say that', 'tokens': [51088, 300, 597, 992, 295, 13891, 6422, 257, 6367, 13, 407, 11, 498, 291, 519, 466, 264, 4295, 294, 264, 1411, 11, 393, 291, 584, 300, 51564], 'temperature': 0.0, 'avg_logprob': -0.10120942321004747, 'compression_ratio': 1.7294117647058824, 'no_speech_prob': 0.023624403402209282}, {'id': 356, 'seek': 254102, 'start': 2541.66, 'end': 2548.54, 'text': ' which are the nodes, which are the loops and what are the nodes in the loop? So, like 2, 3 and 2, 4,', 'tokens': [50396, 597, 366, 264, 13891, 11, 597, 366, 264, 16121, 293, 437, 366, 264, 13891, 294, 264, 6367, 30, 407, 11, 411, 568, 11, 805, 293, 568, 11, 1017, 11, 50740], 'temperature': 0.0, 'avg_logprob': -0.12248549094566932, 'compression_ratio': 1.8857142857142857, 'no_speech_prob': 0.05589135363698006}, {'id': 357, 'seek': 254102, 'start': 2549.34, 'end': 2558.54, 'text': ' they seem to be loops, but just think of a program. So, these two loops are neither disjoint loops,', 'tokens': [50780, 436, 1643, 281, 312, 16121, 11, 457, 445, 519, 295, 257, 1461, 13, 407, 11, 613, 732, 16121, 366, 9662, 717, 48613, 16121, 11, 51240], 'temperature': 0.0, 'avg_logprob': -0.12248549094566932, 'compression_ratio': 1.8857142857142857, 'no_speech_prob': 0.05589135363698006}, {'id': 358, 'seek': 254102, 'start': 2558.54, 'end': 2564.86, 'text': ' you cannot say that they are two separate loops, nor they are nested loops, nor are they contained', 'tokens': [51240, 291, 2644, 584, 300, 436, 366, 732, 4994, 16121, 11, 6051, 436, 366, 15646, 292, 16121, 11, 6051, 366, 436, 16212, 51556], 'temperature': 0.0, 'avg_logprob': -0.12248549094566932, 'compression_ratio': 1.8857142857142857, 'no_speech_prob': 0.05589135363698006}, {'id': 359, 'seek': 254102, 'start': 2564.86, 'end': 2568.94, 'text': ' within each other. Or you can actually say both of them are contained within each other. You can', 'tokens': [51556, 1951, 1184, 661, 13, 1610, 291, 393, 767, 584, 1293, 295, 552, 366, 16212, 1951, 1184, 661, 13, 509, 393, 51760], 'temperature': 0.0, 'avg_logprob': -0.12248549094566932, 'compression_ratio': 1.8857142857142857, 'no_speech_prob': 0.05589135363698006}, {'id': 360, 'seek': 256894, 'start': 2568.94, 'end': 2574.86, 'text': ' think of 2, 3 as the main loop and this thing as something between that, but then it can switch', 'tokens': [50364, 519, 295, 568, 11, 805, 382, 264, 2135, 6367, 293, 341, 551, 382, 746, 1296, 300, 11, 457, 550, 309, 393, 3679, 50660], 'temperature': 0.0, 'avg_logprob': -0.11521373132262568, 'compression_ratio': 2.0437158469945356, 'no_speech_prob': 0.015404799953103065}, {'id': 361, 'seek': 256894, 'start': 2574.86, 'end': 2582.7000000000003, 'text': ' between these loops. It is very weird. So, for the arrow, the arrow head, we say arrow head.', 'tokens': [50660, 1296, 613, 16121, 13, 467, 307, 588, 3657, 13, 407, 11, 337, 264, 11610, 11, 264, 11610, 1378, 11, 321, 584, 11610, 1378, 13, 51052], 'temperature': 0.0, 'avg_logprob': -0.11521373132262568, 'compression_ratio': 2.0437158469945356, 'no_speech_prob': 0.015404799953103065}, {'id': 362, 'seek': 256894, 'start': 2583.58, 'end': 2589.34, 'text': ' So, wherever it is pointing is the head. So, whenever we say we draw an arrow, we say the', 'tokens': [51096, 407, 11, 8660, 309, 307, 12166, 307, 264, 1378, 13, 407, 11, 5699, 321, 584, 321, 2642, 364, 11610, 11, 321, 584, 264, 51384], 'temperature': 0.0, 'avg_logprob': -0.11521373132262568, 'compression_ratio': 2.0437158469945356, 'no_speech_prob': 0.015404799953103065}, {'id': 363, 'seek': 256894, 'start': 2589.34, 'end': 2594.38, 'text': ' arrow head points here. So, the wherever it is pointing is the head and wherever it is starting', 'tokens': [51384, 11610, 1378, 2793, 510, 13, 407, 11, 264, 8660, 309, 307, 12166, 307, 264, 1378, 293, 8660, 309, 307, 2891, 51636], 'temperature': 0.0, 'avg_logprob': -0.11521373132262568, 'compression_ratio': 2.0437158469945356, 'no_speech_prob': 0.015404799953103065}, {'id': 364, 'seek': 259438, 'start': 2594.38, 'end': 2606.86, 'text': ' from is the tail. So, for graphs where you cannot partition the set of nodes into categories such', 'tokens': [50364, 490, 307, 264, 6838, 13, 407, 11, 337, 24877, 689, 291, 2644, 24808, 264, 992, 295, 13891, 666, 10479, 1270, 50988], 'temperature': 0.0, 'avg_logprob': -0.1080696529812283, 'compression_ratio': 1.5491803278688525, 'no_speech_prob': 0.017944904044270515}, {'id': 365, 'seek': 259438, 'start': 2606.86, 'end': 2616.62, 'text': ' that the loops are either disjoint or nested, if you cannot partition your nodes into those', 'tokens': [50988, 300, 264, 16121, 366, 2139, 717, 48613, 420, 15646, 292, 11, 498, 291, 2644, 24808, 428, 13891, 666, 729, 51476], 'temperature': 0.0, 'avg_logprob': -0.1080696529812283, 'compression_ratio': 1.5491803278688525, 'no_speech_prob': 0.017944904044270515}, {'id': 366, 'seek': 261662, 'start': 2616.62, 'end': 2625.42, 'text': ' categories or loops into those categories, then we say the loop, the graph is a irreducible graph.', 'tokens': [50364, 10479, 420, 16121, 666, 729, 10479, 11, 550, 321, 584, 264, 6367, 11, 264, 4295, 307, 257, 16014, 769, 32128, 4295, 13, 50804], 'temperature': 0.0, 'avg_logprob': -0.1094986094106542, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.06949042528867722}, {'id': 367, 'seek': 261662, 'start': 2626.22, 'end': 2633.2599999999998, 'text': ' Otherwise, it is a reducible graph. So, if it is a nested loop, then all the nodes in the nested', 'tokens': [50844, 10328, 11, 309, 307, 257, 2783, 32128, 4295, 13, 407, 11, 498, 309, 307, 257, 15646, 292, 6367, 11, 550, 439, 264, 13891, 294, 264, 15646, 292, 51196], 'temperature': 0.0, 'avg_logprob': -0.1094986094106542, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.06949042528867722}, {'id': 368, 'seek': 261662, 'start': 2633.2599999999998, 'end': 2639.5, 'text': ' loop will be contained into the outer loop. If it is a disjoint loop, they will not intersect at all.', 'tokens': [51196, 6367, 486, 312, 16212, 666, 264, 10847, 6367, 13, 759, 309, 307, 257, 717, 48613, 6367, 11, 436, 486, 406, 27815, 412, 439, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.1094986094106542, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.06949042528867722}, {'id': 369, 'seek': 261662, 'start': 2642.7799999999997, 'end': 2646.22, 'text': ' Disjoint loops is one for loop followed by another for loop. There is nothing which is', 'tokens': [51672, 4208, 48613, 16121, 307, 472, 337, 6367, 6263, 538, 1071, 337, 6367, 13, 821, 307, 1825, 597, 307, 51844], 'temperature': 0.0, 'avg_logprob': -0.1094986094106542, 'compression_ratio': 1.900990099009901, 'no_speech_prob': 0.06949042528867722}, {'id': 370, 'seek': 264622, 'start': 2647.18, 'end': 2653.58, 'text': ' intersecting with. In this case, this is neither. So, if you figure out 2, 3 is one loop, 2, 4 is', 'tokens': [50412, 27815, 278, 365, 13, 682, 341, 1389, 11, 341, 307, 9662, 13, 407, 11, 498, 291, 2573, 484, 568, 11, 805, 307, 472, 6367, 11, 568, 11, 1017, 307, 50732], 'temperature': 0.0, 'avg_logprob': -0.10914566002640069, 'compression_ratio': 1.896551724137931, 'no_speech_prob': 0.0008291103295050561}, {'id': 371, 'seek': 264622, 'start': 2653.58, 'end': 2658.2999999999997, 'text': ' one loop. In that case, there is an intersection. So, they cannot be disjoint loops and they are not', 'tokens': [50732, 472, 6367, 13, 682, 300, 1389, 11, 456, 307, 364, 15236, 13, 407, 11, 436, 2644, 312, 717, 48613, 16121, 293, 436, 366, 406, 50968], 'temperature': 0.0, 'avg_logprob': -0.10914566002640069, 'compression_ratio': 1.896551724137931, 'no_speech_prob': 0.0008291103295050561}, {'id': 372, 'seek': 264622, 'start': 2658.2999999999997, 'end': 2663.18, 'text': ' nested because if they had been nested, then one loop should have completely contained the other.', 'tokens': [50968, 15646, 292, 570, 498, 436, 632, 668, 15646, 292, 11, 550, 472, 6367, 820, 362, 2584, 16212, 264, 661, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.10914566002640069, 'compression_ratio': 1.896551724137931, 'no_speech_prob': 0.0008291103295050561}, {'id': 373, 'seek': 264622, 'start': 2663.8199999999997, 'end': 2667.98, 'text': ' The set of nodes in one loop should have been contained completely in the other set. So,', 'tokens': [51244, 440, 992, 295, 13891, 294, 472, 6367, 820, 362, 668, 16212, 2584, 294, 264, 661, 992, 13, 407, 11, 51452], 'temperature': 0.0, 'avg_logprob': -0.10914566002640069, 'compression_ratio': 1.896551724137931, 'no_speech_prob': 0.0008291103295050561}, {'id': 374, 'seek': 266798, 'start': 2667.98, 'end': 2675.18, 'text': ' it is neither a full loop. So, the good news is, so in analysis, it is generally', 'tokens': [50364, 309, 307, 9662, 257, 1577, 6367, 13, 407, 11, 264, 665, 2583, 307, 11, 370, 294, 5215, 11, 309, 307, 5101, 50724], 'temperature': 0.0, 'avg_logprob': -0.1494612326988807, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.020942574366927147}, {'id': 375, 'seek': 266798, 'start': 2676.14, 'end': 2681.18, 'text': ' much easier to analyze reducible flow graphs. Irreducible flow graphs create certain problems.', 'tokens': [50772, 709, 3571, 281, 12477, 2783, 32128, 3095, 24877, 13, 9151, 265, 769, 32128, 3095, 24877, 1884, 1629, 2740, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.1494612326988807, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.020942574366927147}, {'id': 376, 'seek': 266798, 'start': 2685.34, 'end': 2694.94, 'text': ' But the good news is that all graphs that you can construct using structured program statements,', 'tokens': [51232, 583, 264, 665, 2583, 307, 300, 439, 24877, 300, 291, 393, 7690, 1228, 18519, 1461, 12363, 11, 51712], 'temperature': 0.0, 'avg_logprob': -0.1494612326988807, 'compression_ratio': 1.6385542168674698, 'no_speech_prob': 0.020942574366927147}, {'id': 377, 'seek': 269494, 'start': 2694.94, 'end': 2701.02, 'text': ' like while statements, if statements, do while statements, you can only produce reducible flow', 'tokens': [50364, 411, 1339, 12363, 11, 498, 12363, 11, 360, 1339, 12363, 11, 291, 393, 787, 5258, 2783, 32128, 3095, 50668], 'temperature': 0.0, 'avg_logprob': -0.14254573443988422, 'compression_ratio': 2.0639269406392695, 'no_speech_prob': 0.00297015649266541}, {'id': 378, 'seek': 269494, 'start': 2701.02, 'end': 2706.54, 'text': ' graphs. You can never never produce irreducible flow graphs. That is why there does not exist', 'tokens': [50668, 24877, 13, 509, 393, 1128, 1128, 5258, 16014, 769, 32128, 3095, 24877, 13, 663, 307, 983, 456, 775, 406, 2514, 50944], 'temperature': 0.0, 'avg_logprob': -0.14254573443988422, 'compression_ratio': 2.0639269406392695, 'no_speech_prob': 0.00297015649266541}, {'id': 379, 'seek': 269494, 'start': 2706.54, 'end': 2711.34, 'text': ' anyway. You can produce this left graph using just structured statements. How can you produce', 'tokens': [50944, 4033, 13, 509, 393, 5258, 341, 1411, 4295, 1228, 445, 18519, 12363, 13, 1012, 393, 291, 5258, 51184], 'temperature': 0.0, 'avg_logprob': -0.14254573443988422, 'compression_ratio': 2.0639269406392695, 'no_speech_prob': 0.00297015649266541}, {'id': 380, 'seek': 269494, 'start': 2711.34, 'end': 2717.26, 'text': ' this left graph? You can still do it. Gotoes. Yeah. Yeah. So, if you use gotoes statements,', 'tokens': [51184, 341, 1411, 4295, 30, 509, 393, 920, 360, 309, 13, 5803, 78, 279, 13, 865, 13, 865, 13, 407, 11, 498, 291, 764, 658, 78, 279, 12363, 11, 51480], 'temperature': 0.0, 'avg_logprob': -0.14254573443988422, 'compression_ratio': 2.0639269406392695, 'no_speech_prob': 0.00297015649266541}, {'id': 381, 'seek': 269494, 'start': 2717.26, 'end': 2720.2200000000003, 'text': ' only then can you produce such statements. And that is why people could talk.', 'tokens': [51480, 787, 550, 393, 291, 5258, 1270, 12363, 13, 400, 300, 307, 983, 561, 727, 751, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.14254573443988422, 'compression_ratio': 2.0639269406392695, 'no_speech_prob': 0.00297015649266541}, {'id': 382, 'seek': 272022, 'start': 2720.7799999999997, 'end': 2728.22, 'text': ' So, gotoes statements can create such weird graphs, but your structured statements will never do it.', 'tokens': [50392, 407, 11, 658, 78, 279, 12363, 393, 1884, 1270, 3657, 24877, 11, 457, 428, 18519, 12363, 486, 1128, 360, 309, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.12749024266782014, 'compression_ratio': 1.9012875536480687, 'no_speech_prob': 0.008313147351145744}, {'id': 383, 'seek': 272022, 'start': 2729.1, 'end': 2733.8999999999996, 'text': ' And many a times, the good news is that you can actually rewrite a reducible flow graph,', 'tokens': [50808, 400, 867, 257, 1413, 11, 264, 665, 2583, 307, 300, 291, 393, 767, 28132, 257, 2783, 32128, 3095, 4295, 11, 51048], 'temperature': 0.0, 'avg_logprob': -0.12749024266782014, 'compression_ratio': 1.9012875536480687, 'no_speech_prob': 0.008313147351145744}, {'id': 384, 'seek': 272022, 'start': 2733.8999999999996, 'end': 2738.14, 'text': ' irreducible flow graph into a reducible flow graph. So, generally it is by duplication of', 'tokens': [51048, 16014, 769, 32128, 3095, 4295, 666, 257, 2783, 32128, 3095, 4295, 13, 407, 11, 5101, 309, 307, 538, 17154, 399, 295, 51260], 'temperature': 0.0, 'avg_logprob': -0.12749024266782014, 'compression_ratio': 1.9012875536480687, 'no_speech_prob': 0.008313147351145744}, {'id': 385, 'seek': 272022, 'start': 2738.14, 'end': 2741.4199999999996, 'text': ' nodes. So, duplication of, but anyway, let us not get too much into it.', 'tokens': [51260, 13891, 13, 407, 11, 17154, 399, 295, 11, 457, 4033, 11, 718, 505, 406, 483, 886, 709, 666, 309, 13, 51424], 'temperature': 0.0, 'avg_logprob': -0.12749024266782014, 'compression_ratio': 1.9012875536480687, 'no_speech_prob': 0.008313147351145744}, {'id': 386, 'seek': 272022, 'start': 2743.66, 'end': 2749.4199999999996, 'text': ' So, the good news is that if your graphs are reducible, then I have a very simple algorithm', 'tokens': [51536, 407, 11, 264, 665, 2583, 307, 300, 498, 428, 24877, 366, 2783, 32128, 11, 550, 286, 362, 257, 588, 2199, 9284, 51824], 'temperature': 0.0, 'avg_logprob': -0.12749024266782014, 'compression_ratio': 1.9012875536480687, 'no_speech_prob': 0.008313147351145744}, {'id': 387, 'seek': 274942, 'start': 2749.42, 'end': 2757.98, 'text': ' for identifying the back edges, the back edges. So, this result holds that the back edges are the', 'tokens': [50364, 337, 16696, 264, 646, 8819, 11, 264, 646, 8819, 13, 407, 11, 341, 1874, 9190, 300, 264, 646, 8819, 366, 264, 50792], 'temperature': 0.0, 'avg_logprob': -0.11778944651285807, 'compression_ratio': 1.705521472392638, 'no_speech_prob': 0.0006068407092243433}, {'id': 388, 'seek': 274942, 'start': 2757.98, 'end': 2765.42, 'text': ' edges where the head dominates the tail. This only holds if you have a reducible flow graph.', 'tokens': [50792, 8819, 689, 264, 1378, 8859, 1024, 264, 6838, 13, 639, 787, 9190, 498, 291, 362, 257, 2783, 32128, 3095, 4295, 13, 51164], 'temperature': 0.0, 'avg_logprob': -0.11778944651285807, 'compression_ratio': 1.705521472392638, 'no_speech_prob': 0.0006068407092243433}, {'id': 389, 'seek': 274942, 'start': 2770.14, 'end': 2777.82, 'text': ' So, this is good. So, we are done. The last thing is about natural loops. So, the next,', 'tokens': [51400, 407, 11, 341, 307, 665, 13, 407, 11, 321, 366, 1096, 13, 440, 1036, 551, 307, 466, 3303, 16121, 13, 407, 11, 264, 958, 11, 51784], 'temperature': 0.0, 'avg_logprob': -0.11778944651285807, 'compression_ratio': 1.705521472392638, 'no_speech_prob': 0.0006068407092243433}, {'id': 390, 'seek': 277782, 'start': 2777.82, 'end': 2784.46, 'text': ' the last thing is we would like to find out that which statements in the program form a loop.', 'tokens': [50364, 264, 1036, 551, 307, 321, 576, 411, 281, 915, 484, 300, 597, 12363, 294, 264, 1461, 1254, 257, 6367, 13, 50696], 'temperature': 0.0, 'avg_logprob': -0.09161514430851131, 'compression_ratio': 1.5405405405405406, 'no_speech_prob': 0.000791415513958782}, {'id': 391, 'seek': 277782, 'start': 2786.1400000000003, 'end': 2791.1000000000004, 'text': ' So, those are referred to as a natural loop. For example, in this particular graph, what are the', 'tokens': [50780, 407, 11, 729, 366, 10839, 281, 382, 257, 3303, 6367, 13, 1171, 1365, 11, 294, 341, 1729, 4295, 11, 437, 366, 264, 51028], 'temperature': 0.0, 'avg_logprob': -0.09161514430851131, 'compression_ratio': 1.5405405405405406, 'no_speech_prob': 0.000791415513958782}, {'id': 392, 'seek': 277782, 'start': 2791.1000000000004, 'end': 2800.86, 'text': ' loops? We have two loops. One loop is from 5 to 2, the other loop is from 6 to 2. Each loop is', 'tokens': [51028, 16121, 30, 492, 362, 732, 16121, 13, 1485, 6367, 307, 490, 1025, 281, 568, 11, 264, 661, 6367, 307, 490, 1386, 281, 568, 13, 6947, 6367, 307, 51516], 'temperature': 0.0, 'avg_logprob': -0.09161514430851131, 'compression_ratio': 1.5405405405405406, 'no_speech_prob': 0.000791415513958782}, {'id': 393, 'seek': 280086, 'start': 2801.82, 'end': 2803.98, 'text': ' identified by a back edge. So,', 'tokens': [50412, 9234, 538, 257, 646, 4691, 13, 407, 11, 50520], 'temperature': 0.0, 'avg_logprob': -0.1478984205028679, 'compression_ratio': 1.6032608695652173, 'no_speech_prob': 0.011301524005830288}, {'id': 394, 'seek': 280086, 'start': 2809.9, 'end': 2818.86, 'text': ' so now our task is to find out the natural loops. How can we do it? Any ideas? How can we get the,', 'tokens': [50816, 370, 586, 527, 5633, 307, 281, 915, 484, 264, 3303, 16121, 13, 1012, 393, 321, 360, 309, 30, 2639, 3487, 30, 1012, 393, 321, 483, 264, 11, 51264], 'temperature': 0.0, 'avg_logprob': -0.1478984205028679, 'compression_ratio': 1.6032608695652173, 'no_speech_prob': 0.011301524005830288}, {'id': 395, 'seek': 280086, 'start': 2818.86, 'end': 2821.82, 'text': ' so I will be, so what is algorithm take? The algorithm takes a back edge', 'tokens': [51264, 370, 286, 486, 312, 11, 370, 437, 307, 9284, 747, 30, 440, 9284, 2516, 257, 646, 4691, 51412], 'temperature': 0.0, 'avg_logprob': -0.1478984205028679, 'compression_ratio': 1.6032608695652173, 'no_speech_prob': 0.011301524005830288}, {'id': 396, 'seek': 280086, 'start': 2822.7000000000003, 'end': 2828.6200000000003, 'text': ' and it gives out the set of nodes which belong to that particular loop corresponding to that', 'tokens': [51456, 293, 309, 2709, 484, 264, 992, 295, 13891, 597, 5784, 281, 300, 1729, 6367, 11760, 281, 300, 51752], 'temperature': 0.0, 'avg_logprob': -0.1478984205028679, 'compression_ratio': 1.6032608695652173, 'no_speech_prob': 0.011301524005830288}, {'id': 397, 'seek': 282862, 'start': 2828.62, 'end': 2832.7, 'text': ' particular back edge. So, any idea how can we do about doing that?', 'tokens': [50364, 1729, 646, 4691, 13, 407, 11, 604, 1558, 577, 393, 321, 360, 466, 884, 300, 30, 50568], 'temperature': 0.0, 'avg_logprob': -0.18036034901936848, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.0018064954783767462}, {'id': 398, 'seek': 282862, 'start': 2837.2599999999998, 'end': 2842.14, 'text': ' No, the back edges I can identify. Given a graph, I can exactly use this to identify my back edges.', 'tokens': [50796, 883, 11, 264, 646, 8819, 286, 393, 5876, 13, 18600, 257, 4295, 11, 286, 393, 2293, 764, 341, 281, 5876, 452, 646, 8819, 13, 51040], 'temperature': 0.0, 'avg_logprob': -0.18036034901936848, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.0018064954783767462}, {'id': 399, 'seek': 282862, 'start': 2844.62, 'end': 2853.1, 'text': ' Where is it? So, I can use this to identify my back edges. Now you are, now I have,', 'tokens': [51164, 2305, 307, 309, 30, 407, 11, 286, 393, 764, 341, 281, 5876, 452, 646, 8819, 13, 823, 291, 366, 11, 586, 286, 362, 11, 51588], 'temperature': 0.0, 'avg_logprob': -0.18036034901936848, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.0018064954783767462}, {'id': 400, 'seek': 282862, 'start': 2853.1, 'end': 2856.22, 'text': ' so see how the analysis is progressing. First from the linear set of statements,', 'tokens': [51588, 370, 536, 577, 264, 5215, 307, 36305, 13, 2386, 490, 264, 8213, 992, 295, 12363, 11, 51744], 'temperature': 0.0, 'avg_logprob': -0.18036034901936848, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.0018064954783767462}, {'id': 401, 'seek': 285622, 'start': 2856.22, 'end': 2862.22, 'text': ' I have constructed my control flow graph, my CFG. In my CFG, I apply and let us say I only', 'tokens': [50364, 286, 362, 17083, 452, 1969, 3095, 4295, 11, 452, 21792, 38, 13, 682, 452, 21792, 38, 11, 286, 3079, 293, 718, 505, 584, 286, 787, 50664], 'temperature': 0.0, 'avg_logprob': -0.10287011054254347, 'compression_ratio': 1.8560311284046693, 'no_speech_prob': 0.009682297706604004}, {'id': 402, 'seek': 285622, 'start': 2862.22, 'end': 2866.7799999999997, 'text': ' writing programs which does not allow good use. So, you are sure that this is going to be a', 'tokens': [50664, 3579, 4268, 597, 775, 406, 2089, 665, 764, 13, 407, 11, 291, 366, 988, 300, 341, 307, 516, 281, 312, 257, 50892], 'temperature': 0.0, 'avg_logprob': -0.10287011054254347, 'compression_ratio': 1.8560311284046693, 'no_speech_prob': 0.009682297706604004}, {'id': 403, 'seek': 285622, 'start': 2866.7799999999997, 'end': 2872.22, 'text': ' reducible graph. If it is a reducible graph, then I can apply this particular algorithm to identify', 'tokens': [50892, 2783, 32128, 4295, 13, 759, 309, 307, 257, 2783, 32128, 4295, 11, 550, 286, 393, 3079, 341, 1729, 9284, 281, 5876, 51164], 'temperature': 0.0, 'avg_logprob': -0.10287011054254347, 'compression_ratio': 1.8560311284046693, 'no_speech_prob': 0.009682297706604004}, {'id': 404, 'seek': 285622, 'start': 2872.22, 'end': 2877.5, 'text': ' my back edges. So, on the control flow graph, I have already identified my back edges. Once I have', 'tokens': [51164, 452, 646, 8819, 13, 407, 11, 322, 264, 1969, 3095, 4295, 11, 286, 362, 1217, 9234, 452, 646, 8819, 13, 3443, 286, 362, 51428], 'temperature': 0.0, 'avg_logprob': -0.10287011054254347, 'compression_ratio': 1.8560311284046693, 'no_speech_prob': 0.009682297706604004}, {'id': 405, 'seek': 285622, 'start': 2877.5, 'end': 2882.7, 'text': ' identified my back edges, now I can pick up one back edge at a time and I can start asking that', 'tokens': [51428, 9234, 452, 646, 8819, 11, 586, 286, 393, 1888, 493, 472, 646, 4691, 412, 257, 565, 293, 286, 393, 722, 3365, 300, 51688], 'temperature': 0.0, 'avg_logprob': -0.10287011054254347, 'compression_ratio': 1.8560311284046693, 'no_speech_prob': 0.009682297706604004}, {'id': 406, 'seek': 288270, 'start': 2882.7, 'end': 2890.46, 'text': ' what is the loop under this back edge, for this back edge. So, this is the algorithm now we want', 'tokens': [50364, 437, 307, 264, 6367, 833, 341, 646, 4691, 11, 337, 341, 646, 4691, 13, 407, 11, 341, 307, 264, 9284, 586, 321, 528, 50752], 'temperature': 0.0, 'avg_logprob': -0.16773373333375846, 'compression_ratio': 1.6802721088435375, 'no_speech_prob': 0.036976948380470276}, {'id': 407, 'seek': 288270, 'start': 2890.46, 'end': 2895.2599999999998, 'text': ' to come up with. We want to figure out that given the back edge, what is the loop that this back', 'tokens': [50752, 281, 808, 493, 365, 13, 492, 528, 281, 2573, 484, 300, 2212, 264, 646, 4691, 11, 437, 307, 264, 6367, 300, 341, 646, 50992], 'temperature': 0.0, 'avg_logprob': -0.16773373333375846, 'compression_ratio': 1.6802721088435375, 'no_speech_prob': 0.036976948380470276}, {'id': 408, 'seek': 288270, 'start': 2895.2599999999998, 'end': 2907.5, 'text': ' edge consists of? How would you do that? Travels how?', 'tokens': [50992, 4691, 14689, 295, 30, 1012, 576, 291, 360, 300, 30, 20610, 82, 577, 30, 51604], 'temperature': 0.0, 'avg_logprob': -0.16773373333375846, 'compression_ratio': 1.6802721088435375, 'no_speech_prob': 0.036976948380470276}, {'id': 409, 'seek': 291270, 'start': 2912.7, 'end': 2927.66, 'text': ' They fall in the loop, but that is not, I do not want to detect loops. I want to find out that what', 'tokens': [50364, 814, 2100, 294, 264, 6367, 11, 457, 300, 307, 406, 11, 286, 360, 406, 528, 281, 5531, 16121, 13, 286, 528, 281, 915, 484, 300, 437, 51112], 'temperature': 0.0, 'avg_logprob': -0.15410953760147095, 'compression_ratio': 1.6647398843930636, 'no_speech_prob': 0.02365037612617016}, {'id': 410, 'seek': 291270, 'start': 2927.66, 'end': 2935.02, 'text': ' are the nodes in that loop? Like for instance, maybe I did not say it properly. So, in this case,', 'tokens': [51112, 366, 264, 13891, 294, 300, 6367, 30, 1743, 337, 5197, 11, 1310, 286, 630, 406, 584, 309, 6108, 13, 407, 11, 294, 341, 1389, 11, 51480], 'temperature': 0.0, 'avg_logprob': -0.15410953760147095, 'compression_ratio': 1.6647398843930636, 'no_speech_prob': 0.02365037612617016}, {'id': 411, 'seek': 291270, 'start': 2935.58, 'end': 2941.2599999999998, 'text': ' what are the nodes in the back edge from 5 to 2? What are the nodes this loop consists of?', 'tokens': [51508, 437, 366, 264, 13891, 294, 264, 646, 4691, 490, 1025, 281, 568, 30, 708, 366, 264, 13891, 341, 6367, 14689, 295, 30, 51792], 'temperature': 0.0, 'avg_logprob': -0.15410953760147095, 'compression_ratio': 1.6647398843930636, 'no_speech_prob': 0.02365037612617016}, {'id': 412, 'seek': 294270, 'start': 2943.02, 'end': 2950.8599999999997, 'text': ' 2, 3, 4 and 5. That is the set of nodes. And 6 to 2 has 2, 3, 4, 5 and 6.', 'tokens': [50380, 568, 11, 805, 11, 1017, 293, 1025, 13, 663, 307, 264, 992, 295, 13891, 13, 400, 1386, 281, 568, 575, 568, 11, 805, 11, 1017, 11, 1025, 293, 1386, 13, 50772], 'temperature': 0.0, 'avg_logprob': -0.18754856109619142, 'compression_ratio': 1.43125, 'no_speech_prob': 0.019699541851878166}, {'id': 413, 'seek': 294270, 'start': 2951.4199999999996, 'end': 2955.58, 'text': ' It completely contains the inner loop plus it has this extra node 6.', 'tokens': [50800, 467, 2584, 8306, 264, 7284, 6367, 1804, 309, 575, 341, 2857, 9984, 1386, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.18754856109619142, 'compression_ratio': 1.43125, 'no_speech_prob': 0.019699541851878166}, {'id': 414, 'seek': 294270, 'start': 2966.54, 'end': 2971.66, 'text': ' No, no, the dominator does not come into the picture because look at 5. 3 and 4 do not', 'tokens': [51556, 883, 11, 572, 11, 264, 8859, 1639, 775, 406, 808, 666, 264, 3036, 570, 574, 412, 1025, 13, 805, 293, 1017, 360, 406, 51812], 'temperature': 0.0, 'avg_logprob': -0.18754856109619142, 'compression_ratio': 1.43125, 'no_speech_prob': 0.019699541851878166}, {'id': 415, 'seek': 297166, 'start': 2971.66, 'end': 2981.8999999999996, 'text': ' dominate 5, but they are part of the loop very much. The dominator of 5 is 2. Yes.', 'tokens': [50364, 28246, 1025, 11, 457, 436, 366, 644, 295, 264, 6367, 588, 709, 13, 440, 8859, 1639, 295, 1025, 307, 568, 13, 1079, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.1618283462524414, 'compression_ratio': 1.5180722891566265, 'no_speech_prob': 0.012807879596948624}, {'id': 416, 'seek': 297166, 'start': 2983.98, 'end': 2990.54, 'text': ' That is also not necessary. Like look at 6. Forget that edge from 4 to 7, but had that not', 'tokens': [50980, 663, 307, 611, 406, 4818, 13, 1743, 574, 412, 1386, 13, 18675, 300, 4691, 490, 1017, 281, 1614, 11, 457, 632, 300, 406, 51308], 'temperature': 0.0, 'avg_logprob': -0.1618283462524414, 'compression_ratio': 1.5180722891566265, 'no_speech_prob': 0.012807879596948624}, {'id': 417, 'seek': 297166, 'start': 2990.54, 'end': 2999.3399999999997, 'text': ' been there, then 5 would have been the dominator of 6. 6 to 2 there is a loop.', 'tokens': [51308, 668, 456, 11, 550, 1025, 576, 362, 668, 264, 8859, 1639, 295, 1386, 13, 1386, 281, 568, 456, 307, 257, 6367, 13, 51748], 'temperature': 0.0, 'avg_logprob': -0.1618283462524414, 'compression_ratio': 1.5180722891566265, 'no_speech_prob': 0.012807879596948624}, {'id': 418, 'seek': 300166, 'start': 3001.66, 'end': 3006.7799999999997, 'text': ' That has dominator as 2. So, the dominator of dominator.', 'tokens': [50364, 663, 575, 8859, 1639, 382, 568, 13, 407, 11, 264, 8859, 1639, 295, 8859, 1639, 13, 50620], 'temperature': 0.0, 'avg_logprob': -0.28182119481703816, 'compression_ratio': 1.8727272727272728, 'no_speech_prob': 0.022490456700325012}, {'id': 419, 'seek': 300166, 'start': 3006.7799999999997, 'end': 3010.7799999999997, 'text': ' But, but even 8 has dominator as 2. Node 8 also has dominator 2.', 'tokens': [50620, 583, 11, 457, 754, 1649, 575, 8859, 1639, 382, 568, 13, 38640, 1649, 611, 575, 8859, 1639, 568, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.28182119481703816, 'compression_ratio': 1.8727272727272728, 'no_speech_prob': 0.022490456700325012}, {'id': 420, 'seek': 300166, 'start': 3010.7799999999997, 'end': 3016.94, 'text': ' Form nodes which have dominator 2, but not dominator 7, not 6.', 'tokens': [50820, 10126, 13891, 597, 362, 8859, 1639, 568, 11, 457, 406, 8859, 1639, 1614, 11, 406, 1386, 13, 51128], 'temperature': 0.0, 'avg_logprob': -0.28182119481703816, 'compression_ratio': 1.8727272727272728, 'no_speech_prob': 0.022490456700325012}, {'id': 421, 'seek': 300166, 'start': 3016.94, 'end': 3021.98, 'text': ' Dominator 2, but how do you get 7 and 6? That is my other question.', 'tokens': [51128, 18027, 1639, 568, 11, 457, 577, 360, 291, 483, 1614, 293, 1386, 30, 663, 307, 452, 661, 1168, 13, 51380], 'temperature': 0.0, 'avg_logprob': -0.28182119481703816, 'compression_ratio': 1.8727272727272728, 'no_speech_prob': 0.022490456700325012}, {'id': 422, 'seek': 300166, 'start': 3021.98, 'end': 3027.3399999999997, 'text': ' No, for 6, nodes 3, 4 and 5 have dominator 2, but not 6.', 'tokens': [51380, 883, 11, 337, 1386, 11, 13891, 805, 11, 1017, 293, 1025, 362, 8859, 1639, 568, 11, 457, 406, 1386, 13, 51648], 'temperature': 0.0, 'avg_logprob': -0.28182119481703816, 'compression_ratio': 1.8727272727272728, 'no_speech_prob': 0.022490456700325012}, {'id': 423, 'seek': 303166, 'start': 3031.66, 'end': 3040.06, 'text': ' Sorry, yeah what is it? For 4 node, we have dominator,', 'tokens': [50364, 4919, 11, 1338, 437, 307, 309, 30, 1171, 1017, 9984, 11, 321, 362, 8859, 1639, 11, 50784], 'temperature': 0.0, 'avg_logprob': -0.35105148581571355, 'compression_ratio': 1.767605633802817, 'no_speech_prob': 0.13831980526447296}, {'id': 424, 'seek': 303166, 'start': 3040.8599999999997, 'end': 3046.8599999999997, 'text': ' we have 2 in dominator side and not 6 and in dominator side. So, for 3, 4 and 5, we have', 'tokens': [50824, 321, 362, 568, 294, 8859, 1639, 1252, 293, 406, 1386, 293, 294, 8859, 1639, 1252, 13, 407, 11, 337, 805, 11, 1017, 293, 1025, 11, 321, 362, 51124], 'temperature': 0.0, 'avg_logprob': -0.35105148581571355, 'compression_ratio': 1.767605633802817, 'no_speech_prob': 0.13831980526447296}, {'id': 425, 'seek': 303166, 'start': 3046.8599999999997, 'end': 3051.1, 'text': ' dominated 2, but not 6. So, there will be no loop.', 'tokens': [51124, 23755, 568, 11, 457, 406, 1386, 13, 407, 11, 456, 486, 312, 572, 6367, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.35105148581571355, 'compression_ratio': 1.767605633802817, 'no_speech_prob': 0.13831980526447296}, {'id': 426, 'seek': 303166, 'start': 3051.1, 'end': 3058.14, 'text': ' For 3, 4, 5 have dominator dominated 2. Yeah, but not 6.', 'tokens': [51336, 1171, 805, 11, 1017, 11, 1025, 362, 8859, 1639, 23755, 568, 13, 865, 11, 457, 406, 1386, 13, 51688], 'temperature': 0.0, 'avg_logprob': -0.35105148581571355, 'compression_ratio': 1.767605633802817, 'no_speech_prob': 0.13831980526447296}, {'id': 427, 'seek': 305814, 'start': 3058.14, 'end': 3071.2599999999998, 'text': ' You are talking about this particular loop. No, but if 6 had 2 branches, let us say from 6,', 'tokens': [50364, 509, 366, 1417, 466, 341, 1729, 6367, 13, 883, 11, 457, 498, 1386, 632, 568, 14770, 11, 718, 505, 584, 490, 1386, 11, 51020], 'temperature': 0.0, 'avg_logprob': -0.17959569375726242, 'compression_ratio': 1.6981132075471699, 'no_speech_prob': 0.04202418029308319}, {'id': 428, 'seek': 305814, 'start': 3071.2599999999998, 'end': 3075.5, 'text': ' I could have split into 2 branches, then even 7 would not have dominator as 2, but it would', 'tokens': [51020, 286, 727, 362, 7472, 666, 568, 14770, 11, 550, 754, 1614, 576, 406, 362, 8859, 1639, 382, 568, 11, 457, 309, 576, 51232], 'temperature': 0.0, 'avg_logprob': -0.17959569375726242, 'compression_ratio': 1.6981132075471699, 'no_speech_prob': 0.04202418029308319}, {'id': 429, 'seek': 305814, 'start': 3075.5, 'end': 3081.5, 'text': ' have have 2 as a dominator. So, let us say from 6, I have a branch, I have 2 branches,', 'tokens': [51232, 362, 362, 568, 382, 257, 8859, 1639, 13, 407, 11, 718, 505, 584, 490, 1386, 11, 286, 362, 257, 9819, 11, 286, 362, 568, 14770, 11, 51532], 'temperature': 0.0, 'avg_logprob': -0.17959569375726242, 'compression_ratio': 1.6981132075471699, 'no_speech_prob': 0.04202418029308319}, {'id': 430, 'seek': 308150, 'start': 3081.66, 'end': 3090.06, 'text': ' 1 branch goes to 2, the other branch goes to 8, then 7 is not dominated by 6, but 7 is dominated', 'tokens': [50372, 502, 9819, 1709, 281, 568, 11, 264, 661, 9819, 1709, 281, 1649, 11, 550, 1614, 307, 406, 23755, 538, 1386, 11, 457, 1614, 307, 23755, 50792], 'temperature': 0.0, 'avg_logprob': -0.21698516845703125, 'compression_ratio': 1.664516129032258, 'no_speech_prob': 0.10075338929891586}, {'id': 431, 'seek': 308150, 'start': 3090.06, 'end': 3104.06, 'text': ' by 2, 4, 5 and 6, 2 and 5. So, you have to somehow distinguish the nodes which are outside', 'tokens': [50792, 538, 568, 11, 1017, 11, 1025, 293, 1386, 11, 568, 293, 1025, 13, 407, 11, 291, 362, 281, 6063, 20206, 264, 13891, 597, 366, 2380, 51492], 'temperature': 0.0, 'avg_logprob': -0.21698516845703125, 'compression_ratio': 1.664516129032258, 'no_speech_prob': 0.10075338929891586}, {'id': 432, 'seek': 308150, 'start': 3104.06, 'end': 3106.86, 'text': ' the loop from the nodes which are inside the loop. How do you do that?', 'tokens': [51492, 264, 6367, 490, 264, 13891, 597, 366, 1854, 264, 6367, 13, 1012, 360, 291, 360, 300, 30, 51632], 'temperature': 0.0, 'avg_logprob': -0.21698516845703125, 'compression_ratio': 1.664516129032258, 'no_speech_prob': 0.10075338929891586}, {'id': 433, 'seek': 310686, 'start': 3107.5, 'end': 3112.38, 'text': ' There is a path from 2 to 5. There is a path from 2 to 5, yes.', 'tokens': [50396, 821, 307, 257, 3100, 490, 568, 281, 1025, 13, 821, 307, 257, 3100, 490, 568, 281, 1025, 11, 2086, 13, 50640], 'temperature': 0.0, 'avg_logprob': -0.19264006614685059, 'compression_ratio': 1.683453237410072, 'no_speech_prob': 0.1036125123500824}, {'id': 434, 'seek': 310686, 'start': 3115.1800000000003, 'end': 3118.54, 'text': ' Agreed, but how do you figure out in this automatically how do you figure that out?', 'tokens': [50780, 29324, 292, 11, 457, 577, 360, 291, 2573, 484, 294, 341, 6772, 577, 360, 291, 2573, 300, 484, 30, 50948], 'temperature': 0.0, 'avg_logprob': -0.19264006614685059, 'compression_ratio': 1.683453237410072, 'no_speech_prob': 0.1036125123500824}, {'id': 435, 'seek': 310686, 'start': 3119.58, 'end': 3124.86, 'text': ' Because I can also find a path somehow differently. I can also find a path from 7 to 3.', 'tokens': [51000, 1436, 286, 393, 611, 915, 257, 3100, 6063, 7614, 13, 286, 393, 611, 915, 257, 3100, 490, 1614, 281, 805, 13, 51264], 'temperature': 0.0, 'avg_logprob': -0.19264006614685059, 'compression_ratio': 1.683453237410072, 'no_speech_prob': 0.1036125123500824}, {'id': 436, 'seek': 312486, 'start': 3125.82, 'end': 3130.1400000000003, 'text': ' Right, I can say 2, 4, 7, no, not 3, but', 'tokens': [50412, 1779, 11, 286, 393, 584, 568, 11, 1017, 11, 1614, 11, 572, 11, 406, 805, 11, 457, 50628], 'temperature': 0.0, 'avg_logprob': -0.4088774982251619, 'compression_ratio': 1.0459770114942528, 'no_speech_prob': 0.36128830909729004}, {'id': 437, 'seek': 312486, 'start': 3135.5, 'end': 3136.78, 'text': ' okay, in this case it does not happen.', 'tokens': [50896, 1392, 11, 294, 341, 1389, 309, 775, 406, 1051, 13, 50960], 'temperature': 0.0, 'avg_logprob': -0.4088774982251619, 'compression_ratio': 1.0459770114942528, 'no_speech_prob': 0.36128830909729004}, {'id': 438, 'seek': 312486, 'start': 3141.26, 'end': 3145.26, 'text': ' Yeah, sure.', 'tokens': [51184, 865, 11, 988, 13, 51384], 'temperature': 0.0, 'avg_logprob': -0.4088774982251619, 'compression_ratio': 1.0459770114942528, 'no_speech_prob': 0.36128830909729004}, {'id': 439, 'seek': 315486, 'start': 3154.86, 'end': 3173.82, 'text': ' You are almost there, very much almost there. So, let us, we got interested in time, let us go', 'tokens': [50364, 509, 366, 1920, 456, 11, 588, 709, 1920, 456, 13, 407, 11, 718, 505, 11, 321, 658, 3102, 294, 565, 11, 718, 505, 352, 51312], 'temperature': 0.0, 'avg_logprob': -0.25035330101295755, 'compression_ratio': 1.4806201550387597, 'no_speech_prob': 0.026665031909942627}, {'id': 440, 'seek': 315486, 'start': 3173.82, 'end': 3184.1400000000003, 'text': ' there. So, essentially this is the idea. So, for a back edge end to D, the natural loop consists', 'tokens': [51312, 456, 13, 407, 11, 4476, 341, 307, 264, 1558, 13, 407, 11, 337, 257, 646, 4691, 917, 281, 413, 11, 264, 3303, 6367, 14689, 51828], 'temperature': 0.0, 'avg_logprob': -0.25035330101295755, 'compression_ratio': 1.4806201550387597, 'no_speech_prob': 0.026665031909942627}, {'id': 441, 'seek': 318414, 'start': 3184.14, 'end': 3189.8199999999997, 'text': ' of nodes that can reach N without visiting. So, I mean, you want to just similar on those lines.', 'tokens': [50364, 295, 13891, 300, 393, 2524, 426, 1553, 11700, 13, 407, 11, 286, 914, 11, 291, 528, 281, 445, 2531, 322, 729, 3876, 13, 50648], 'temperature': 0.0, 'avg_logprob': -0.1480320277966951, 'compression_ratio': 1.738938053097345, 'no_speech_prob': 0.0032707895152270794}, {'id': 442, 'seek': 318414, 'start': 3189.8199999999997, 'end': 3195.5, 'text': ' So, now the algorithm looks very similar, looks like this. Essentially what you start is you have', 'tokens': [50648, 407, 11, 586, 264, 9284, 1542, 588, 2531, 11, 1542, 411, 341, 13, 23596, 437, 291, 722, 307, 291, 362, 50932], 'temperature': 0.0, 'avg_logprob': -0.1480320277966951, 'compression_ratio': 1.738938053097345, 'no_speech_prob': 0.0032707895152270794}, {'id': 443, 'seek': 318414, 'start': 3195.5, 'end': 3202.14, 'text': ' this set which is the loop set which will contain all the nodes which will be the loop for that', 'tokens': [50932, 341, 992, 597, 307, 264, 6367, 992, 597, 486, 5304, 439, 264, 13891, 597, 486, 312, 264, 6367, 337, 300, 51264], 'temperature': 0.0, 'avg_logprob': -0.1480320277966951, 'compression_ratio': 1.738938053097345, 'no_speech_prob': 0.0032707895152270794}, {'id': 444, 'seek': 318414, 'start': 3202.14, 'end': 3212.14, 'text': ' particular back edge. And then you start, you have a stack which will be used to explore it basically.', 'tokens': [51264, 1729, 646, 4691, 13, 400, 550, 291, 722, 11, 291, 362, 257, 8630, 597, 486, 312, 1143, 281, 6839, 309, 1936, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.1480320277966951, 'compression_ratio': 1.738938053097345, 'no_speech_prob': 0.0032707895152270794}, {'id': 445, 'seek': 321214, 'start': 3212.14, 'end': 3219.42, 'text': ' Some sort of a DFS traversal if you will like. So, now for each element C popped from the stack,', 'tokens': [50364, 2188, 1333, 295, 257, 413, 29318, 23149, 304, 498, 291, 486, 411, 13, 407, 11, 586, 337, 1184, 4478, 383, 21545, 490, 264, 8630, 11, 50728], 'temperature': 0.0, 'avg_logprob': -0.1537454746387623, 'compression_ratio': 1.7363636363636363, 'no_speech_prob': 0.0445256382226944}, {'id': 446, 'seek': 321214, 'start': 3220.7, 'end': 3225.3399999999997, 'text': ' for all predecessors in C, if P is not already in the loop, then you have to explore it further.', 'tokens': [50792, 337, 439, 24874, 45700, 294, 383, 11, 498, 430, 307, 406, 1217, 294, 264, 6367, 11, 550, 291, 362, 281, 6839, 309, 3052, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.1537454746387623, 'compression_ratio': 1.7363636363636363, 'no_speech_prob': 0.0445256382226944}, {'id': 447, 'seek': 321214, 'start': 3225.3399999999997, 'end': 3230.7, 'text': ' So, you have to just think of some are doing a DFS traversal only the loop. Right. So, as soon as', 'tokens': [51024, 407, 11, 291, 362, 281, 445, 519, 295, 512, 366, 884, 257, 413, 29318, 23149, 304, 787, 264, 6367, 13, 1779, 13, 407, 11, 382, 2321, 382, 51292], 'temperature': 0.0, 'avg_logprob': -0.1537454746387623, 'compression_ratio': 1.7363636363636363, 'no_speech_prob': 0.0445256382226944}, {'id': 448, 'seek': 321214, 'start': 3230.7, 'end': 3235.18, 'text': ' you try coming out of the loop, you will not explore further at all. So, you are using the', 'tokens': [51292, 291, 853, 1348, 484, 295, 264, 6367, 11, 291, 486, 406, 6839, 3052, 412, 439, 13, 407, 11, 291, 366, 1228, 264, 51516], 'temperature': 0.0, 'avg_logprob': -0.1537454746387623, 'compression_ratio': 1.7363636363636363, 'no_speech_prob': 0.0445256382226944}, {'id': 449, 'seek': 323518, 'start': 3235.18, 'end': 3242.7799999999997, 'text': ' stack to do that. So, you add P into the loop and push P into the stack. And then again,', 'tokens': [50364, 8630, 281, 360, 300, 13, 407, 11, 291, 909, 430, 666, 264, 6367, 293, 2944, 430, 666, 264, 8630, 13, 400, 550, 797, 11, 50744], 'temperature': 0.0, 'avg_logprob': -0.16796398162841797, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.261109858751297}, {'id': 450, 'seek': 323518, 'start': 3242.7799999999997, 'end': 3251.4199999999996, 'text': ' so you push P into the stack means what? You are trying to explore the children of P. Right.', 'tokens': [50744, 370, 291, 2944, 430, 666, 264, 8630, 1355, 437, 30, 509, 366, 1382, 281, 6839, 264, 2227, 295, 430, 13, 1779, 13, 51176], 'temperature': 0.0, 'avg_logprob': -0.16796398162841797, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.261109858751297}, {'id': 451, 'seek': 323518, 'start': 3251.4199999999996, 'end': 3254.46, 'text': ' We are going to forward and basically you want to expand the DFS traversal into P.', 'tokens': [51176, 492, 366, 516, 281, 2128, 293, 1936, 291, 528, 281, 5268, 264, 413, 29318, 23149, 304, 666, 430, 13, 51328], 'temperature': 0.0, 'avg_logprob': -0.16796398162841797, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.261109858751297}, {'id': 452, 'seek': 323518, 'start': 3258.46, 'end': 3263.5, 'text': ' So, we are going the other way around. Sorry, sorry, sorry. Yeah, you are doing a backward', 'tokens': [51528, 407, 11, 321, 366, 516, 264, 661, 636, 926, 13, 4919, 11, 2597, 11, 2597, 13, 865, 11, 291, 366, 884, 257, 23897, 51780], 'temperature': 0.0, 'avg_logprob': -0.16796398162841797, 'compression_ratio': 1.7067307692307692, 'no_speech_prob': 0.261109858751297}, {'id': 453, 'seek': 326350, 'start': 3264.22, 'end': 3269.74, 'text': ' backward DFS basically backward DFS into it. So, you are, so for all predecessors in C, so you', 'tokens': [50400, 23897, 413, 29318, 1936, 23897, 413, 29318, 666, 309, 13, 407, 11, 291, 366, 11, 370, 337, 439, 24874, 45700, 294, 383, 11, 370, 291, 50676], 'temperature': 0.0, 'avg_logprob': -0.12978457282571232, 'compression_ratio': 1.5737704918032787, 'no_speech_prob': 0.0009522439213469625}, {'id': 454, 'seek': 326350, 'start': 3270.38, 'end': 3278.7, 'text': ' push the parent till you reach the entry node. So, what we will do is we will try to implement', 'tokens': [50708, 2944, 264, 2596, 4288, 291, 2524, 264, 8729, 9984, 13, 407, 11, 437, 321, 486, 360, 307, 321, 486, 853, 281, 4445, 51124], 'temperature': 0.0, 'avg_logprob': -0.12978457282571232, 'compression_ratio': 1.5737704918032787, 'no_speech_prob': 0.0009522439213469625}, {'id': 455, 'seek': 326350, 'start': 3278.7, 'end': 3290.86, 'text': ' this algorithm into LLVM in LLVM. Right. So, what I will suggest you to do is you can quickly do a', 'tokens': [51124, 341, 9284, 666, 441, 43, 53, 44, 294, 441, 43, 53, 44, 13, 1779, 13, 407, 11, 437, 286, 486, 3402, 291, 281, 360, 307, 291, 393, 2661, 360, 257, 51732], 'temperature': 0.0, 'avg_logprob': -0.12978457282571232, 'compression_ratio': 1.5737704918032787, 'no_speech_prob': 0.0009522439213469625}, {'id': 456, 'seek': 329086, 'start': 3291.58, 'end': 3298.78, 'text': ' a mock simulation of this on some graph. Try to see you understand this and then we will try to', 'tokens': [50400, 257, 17362, 16575, 295, 341, 322, 512, 4295, 13, 6526, 281, 536, 291, 1223, 341, 293, 550, 321, 486, 853, 281, 50760], 'temperature': 0.0, 'avg_logprob': -0.14263303713365036, 'compression_ratio': 1.6940639269406392, 'no_speech_prob': 0.002050282433629036}, {'id': 457, 'seek': 329086, 'start': 3298.78, 'end': 3305.58, 'text': ' implement it and see if it really works on on this algorithm really works on real programs.', 'tokens': [50760, 4445, 309, 293, 536, 498, 309, 534, 1985, 322, 322, 341, 9284, 534, 1985, 322, 957, 4268, 13, 51100], 'temperature': 0.0, 'avg_logprob': -0.14263303713365036, 'compression_ratio': 1.6940639269406392, 'no_speech_prob': 0.002050282433629036}, {'id': 458, 'seek': 329086, 'start': 3308.78, 'end': 3313.58, 'text': ' Right. The idea is very simple. You just think about you start with the bottom of the loop like', 'tokens': [51260, 1779, 13, 440, 1558, 307, 588, 2199, 13, 509, 445, 519, 466, 291, 722, 365, 264, 2767, 295, 264, 6367, 411, 51500], 'temperature': 0.0, 'avg_logprob': -0.14263303713365036, 'compression_ratio': 1.6940639269406392, 'no_speech_prob': 0.002050282433629036}, {'id': 459, 'seek': 329086, 'start': 3313.58, 'end': 3317.82, 'text': ' where the loop ends and start going up. So, essentially start exploring it to the other', 'tokens': [51500, 689, 264, 6367, 5314, 293, 722, 516, 493, 13, 407, 11, 4476, 722, 12736, 309, 281, 264, 661, 51712], 'temperature': 0.0, 'avg_logprob': -0.14263303713365036, 'compression_ratio': 1.6940639269406392, 'no_speech_prob': 0.002050282433629036}, {'id': 460, 'seek': 331782, 'start': 3317.82, 'end': 3321.5800000000004, 'text': ' direction till you reach the head. Keep on collecting all of them in your loop. So,', 'tokens': [50364, 3513, 4288, 291, 2524, 264, 1378, 13, 5527, 322, 12510, 439, 295, 552, 294, 428, 6367, 13, 407, 11, 50552], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 461, 'seek': 331782, 'start': 3321.5800000000004, 'end': 3326.7000000000003, 'text': ' the stack is only used to do this backward DFS and the loop is contains all the statements.', 'tokens': [50552, 264, 8630, 307, 787, 1143, 281, 360, 341, 23897, 413, 29318, 293, 264, 6367, 307, 8306, 439, 264, 12363, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 462, 'seek': 331782, 'start': 3327.98, 'end': 3331.5, 'text': ' So, if you look at the loop it is just doing a DFS. There is nothing very simple. Why are', 'tokens': [50872, 407, 11, 498, 291, 574, 412, 264, 6367, 309, 307, 445, 884, 257, 413, 29318, 13, 821, 307, 1825, 588, 2199, 13, 1545, 366, 51048], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 463, 'seek': 331782, 'start': 3331.5, 'end': 3335.26, 'text': ' we doing a backward DFS and not a forward DFS? How do you know you have got outside the loop?', 'tokens': [51048, 321, 884, 257, 23897, 413, 29318, 293, 406, 257, 2128, 413, 29318, 30, 1012, 360, 291, 458, 291, 362, 658, 2380, 264, 6367, 30, 51236], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 464, 'seek': 331782, 'start': 3335.26, 'end': 3341.42, 'text': ' That is the main problem. That condition is hard to write. That this the head of this', 'tokens': [51236, 663, 307, 264, 2135, 1154, 13, 663, 4188, 307, 1152, 281, 2464, 13, 663, 341, 264, 1378, 295, 341, 51544], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 465, 'seek': 331782, 'start': 3341.42, 'end': 3345.6600000000003, 'text': ' node is not in the loop, but you do not know the loop. Right. That is the main problem.', 'tokens': [51544, 9984, 307, 406, 294, 264, 6367, 11, 457, 291, 360, 406, 458, 264, 6367, 13, 1779, 13, 663, 307, 264, 2135, 1154, 13, 51756], 'temperature': 0.0, 'avg_logprob': -0.11002340516843996, 'compression_ratio': 1.8900709219858156, 'no_speech_prob': 0.012423680163919926}, {'id': 466, 'seek': 334566, 'start': 3346.54, 'end': 3352.22, 'text': ' Because you have a node and you start expanding during a DFS from that node. Right. So,', 'tokens': [50408, 1436, 291, 362, 257, 9984, 293, 291, 722, 14702, 1830, 257, 413, 29318, 490, 300, 9984, 13, 1779, 13, 407, 11, 50692], 'temperature': 0.0, 'avg_logprob': -0.17846277848030756, 'compression_ratio': 1.7397260273972603, 'no_speech_prob': 0.001409780466929078}, {'id': 467, 'seek': 334566, 'start': 3352.22, 'end': 3356.62, 'text': ' now the problem is that once you have the successor expanding on the successor,', 'tokens': [50692, 586, 264, 1154, 307, 300, 1564, 291, 362, 264, 31864, 14702, 322, 264, 31864, 11, 50912], 'temperature': 0.0, 'avg_logprob': -0.17846277848030756, 'compression_ratio': 1.7397260273972603, 'no_speech_prob': 0.001409780466929078}, {'id': 468, 'seek': 334566, 'start': 3356.62, 'end': 3361.2599999999998, 'text': ' if it goes out of the loop, what condition will you use to stop it? How will you know?', 'tokens': [50912, 498, 309, 1709, 484, 295, 264, 6367, 11, 437, 4188, 486, 291, 764, 281, 1590, 309, 30, 1012, 486, 291, 458, 30, 51144], 'temperature': 0.0, 'avg_logprob': -0.17846277848030756, 'compression_ratio': 1.7397260273972603, 'no_speech_prob': 0.001409780466929078}, {'id': 469, 'seek': 334566, 'start': 3364.46, 'end': 3366.7799999999997, 'text': ' No, head until you have. You have the back edge. So, you have both the.', 'tokens': [51304, 883, 11, 1378, 1826, 291, 362, 13, 509, 362, 264, 646, 4691, 13, 407, 11, 291, 362, 1293, 264, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.17846277848030756, 'compression_ratio': 1.7397260273972603, 'no_speech_prob': 0.001409780466929078}, {'id': 470, 'seek': 334566, 'start': 3369.5, 'end': 3371.5, 'text': ' But how do you know that node will not reach the tail?', 'tokens': [51556, 583, 577, 360, 291, 458, 300, 9984, 486, 406, 2524, 264, 6838, 30, 51656], 'temperature': 0.0, 'avg_logprob': -0.17846277848030756, 'compression_ratio': 1.7397260273972603, 'no_speech_prob': 0.001409780466929078}, {'id': 471, 'seek': 337150, 'start': 3371.5, 'end': 3377.02, 'text': ' The node you are going to that will not eventually reach the tail. How do you know?', 'tokens': [50364, 440, 9984, 291, 366, 516, 281, 300, 486, 406, 4728, 2524, 264, 6838, 13, 1012, 360, 291, 458, 30, 50640], 'temperature': 0.0, 'avg_logprob': -0.19502432592983904, 'compression_ratio': 1.7751937984496124, 'no_speech_prob': 0.008827859535813332}, {'id': 472, 'seek': 337150, 'start': 3378.86, 'end': 3383.74, 'text': ' Right. In the backward DFS, you will not even get that problem because you will only go through', 'tokens': [50732, 1779, 13, 682, 264, 23897, 413, 29318, 11, 291, 486, 406, 754, 483, 300, 1154, 570, 291, 486, 787, 352, 807, 50976], 'temperature': 0.0, 'avg_logprob': -0.19502432592983904, 'compression_ratio': 1.7751937984496124, 'no_speech_prob': 0.008827859535813332}, {'id': 473, 'seek': 337150, 'start': 3383.74, 'end': 3388.14, 'text': ' the it can only traverse because you started with 6, can only traverse things in the loop.', 'tokens': [50976, 264, 309, 393, 787, 45674, 570, 291, 1409, 365, 1386, 11, 393, 787, 45674, 721, 294, 264, 6367, 13, 51196], 'temperature': 0.0, 'avg_logprob': -0.19502432592983904, 'compression_ratio': 1.7751937984496124, 'no_speech_prob': 0.008827859535813332}, {'id': 474, 'seek': 337150, 'start': 3389.18, 'end': 3395.34, 'text': ' And once you reach the head, you stop. That is it. So, it looks little tricky. But if you', 'tokens': [51248, 400, 1564, 291, 2524, 264, 1378, 11, 291, 1590, 13, 663, 307, 309, 13, 407, 11, 309, 1542, 707, 12414, 13, 583, 498, 291, 51556], 'temperature': 0.0, 'avg_logprob': -0.19502432592983904, 'compression_ratio': 1.7751937984496124, 'no_speech_prob': 0.008827859535813332}, {'id': 475, 'seek': 337150, 'start': 3395.34, 'end': 3399.58, 'text': ' like understand it, it is just backward DFS and collecting all the nodes till you hit the head of', 'tokens': [51556, 411, 1223, 309, 11, 309, 307, 445, 23897, 413, 29318, 293, 12510, 439, 264, 13891, 4288, 291, 2045, 264, 1378, 295, 51768], 'temperature': 0.0, 'avg_logprob': -0.19502432592983904, 'compression_ratio': 1.7751937984496124, 'no_speech_prob': 0.008827859535813332}, {'id': 476, 'seek': 339958, 'start': 3399.58, 'end': 3406.7, 'text': ' them for a back edge into D. So, that is it. So, I define the natural loop as the set of all nodes', 'tokens': [50364, 552, 337, 257, 646, 4691, 666, 413, 13, 407, 11, 300, 307, 309, 13, 407, 11, 286, 6964, 264, 3303, 6367, 382, 264, 992, 295, 439, 13891, 50720], 'temperature': 0.0, 'avg_logprob': -0.18308969871285036, 'compression_ratio': 1.7582938388625593, 'no_speech_prob': 0.004459050018340349}, {'id': 477, 'seek': 339958, 'start': 3406.7, 'end': 3415.5, 'text': ' that can reach N without visiting D. So, without visiting the tail of the loop.', 'tokens': [50720, 300, 393, 2524, 426, 1553, 11700, 413, 13, 407, 11, 1553, 11700, 264, 6838, 295, 264, 6367, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.18308969871285036, 'compression_ratio': 1.7582938388625593, 'no_speech_prob': 0.004459050018340349}, {'id': 478, 'seek': 339958, 'start': 3416.62, 'end': 3421.5, 'text': ' So, one thing is that it is surely dominated by the head of the loop. Right. Because it is a', 'tokens': [51216, 407, 11, 472, 551, 307, 300, 309, 307, 11468, 23755, 538, 264, 1378, 295, 264, 6367, 13, 1779, 13, 1436, 309, 307, 257, 51460], 'temperature': 0.0, 'avg_logprob': -0.18308969871285036, 'compression_ratio': 1.7582938388625593, 'no_speech_prob': 0.004459050018340349}, {'id': 479, 'seek': 339958, 'start': 3421.5, 'end': 3426.46, 'text': ' structured graph like a false statement or while statement. They have to start from the head of the', 'tokens': [51460, 18519, 4295, 411, 257, 7908, 5629, 420, 1339, 5629, 13, 814, 362, 281, 722, 490, 264, 1378, 295, 264, 51708], 'temperature': 0.0, 'avg_logprob': -0.18308969871285036, 'compression_ratio': 1.7582938388625593, 'no_speech_prob': 0.004459050018340349}, {'id': 480, 'seek': 342646, 'start': 3426.46, 'end': 3434.3, 'text': ' loop. Right. The beginning of the loop. Sorry. Right. And so, right. So, essentially what it', 'tokens': [50364, 6367, 13, 1779, 13, 440, 2863, 295, 264, 6367, 13, 4919, 13, 1779, 13, 400, 370, 11, 558, 13, 407, 11, 4476, 437, 309, 50756], 'temperature': 0.0, 'avg_logprob': -0.14220517289404774, 'compression_ratio': 1.7123287671232876, 'no_speech_prob': 0.009665870107710361}, {'id': 481, 'seek': 342646, 'start': 3434.3, 'end': 3438.3, 'text': ' says is that we chart the graph. Let us try to again come back to the example. So, essentially', 'tokens': [50756, 1619, 307, 300, 321, 6927, 264, 4295, 13, 961, 505, 853, 281, 797, 808, 646, 281, 264, 1365, 13, 407, 11, 4476, 50956], 'temperature': 0.0, 'avg_logprob': -0.14220517289404774, 'compression_ratio': 1.7123287671232876, 'no_speech_prob': 0.009665870107710361}, {'id': 482, 'seek': 342646, 'start': 3438.3, 'end': 3445.5, 'text': ' node 3 is a so, let us consider the back edge which is 5 to 2. Right. So, what about node 3?', 'tokens': [50956, 9984, 805, 307, 257, 370, 11, 718, 505, 1949, 264, 646, 4691, 597, 307, 1025, 281, 568, 13, 1779, 13, 407, 11, 437, 466, 9984, 805, 30, 51316], 'temperature': 0.0, 'avg_logprob': -0.14220517289404774, 'compression_ratio': 1.7123287671232876, 'no_speech_prob': 0.009665870107710361}, {'id': 483, 'seek': 342646, 'start': 3446.38, 'end': 3454.7, 'text': ' So, essentially we want to visit all nodes that I can visit without reaching the tail. Because', 'tokens': [51360, 407, 11, 4476, 321, 528, 281, 3441, 439, 13891, 300, 286, 393, 3441, 1553, 9906, 264, 6838, 13, 1436, 51776], 'temperature': 0.0, 'avg_logprob': -0.14220517289404774, 'compression_ratio': 1.7123287671232876, 'no_speech_prob': 0.009665870107710361}, {'id': 484, 'seek': 345470, 'start': 3454.7, 'end': 3463.1, 'text': ' once you reach the tail, reach the bottom of the loop which is 5, you are done. Right. So, what are', 'tokens': [50364, 1564, 291, 2524, 264, 6838, 11, 2524, 264, 2767, 295, 264, 6367, 597, 307, 1025, 11, 291, 366, 1096, 13, 1779, 13, 407, 11, 437, 366, 50784], 'temperature': 0.0, 'avg_logprob': -0.2307665998285467, 'compression_ratio': 1.4403669724770642, 'no_speech_prob': 0.00999993085861206}, {'id': 485, 'seek': 345470, 'start': 3470.14, 'end': 3476.06, 'text': ' the entry point until you reach the tail, the dominating.', 'tokens': [51136, 264, 8729, 935, 1826, 291, 2524, 264, 6838, 11, 264, 8859, 990, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.2307665998285467, 'compression_ratio': 1.4403669724770642, 'no_speech_prob': 0.00999993085861206}]