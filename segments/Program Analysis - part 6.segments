[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 10.22, 'text': ' So, today we will look at lattice theory. So, we will look at more the lattice theory', 'tokens': [50364, 407, 11, 965, 321, 486, 574, 412, 34011, 5261, 13, 407, 11, 321, 486, 574, 412, 544, 264, 34011, 5261, 50875], 'temperature': 0.0, 'avg_logprob': -0.19806138859238737, 'compression_ratio': 1.7281553398058251, 'no_speech_prob': 0.07137338817119598}, {'id': 1, 'seek': 0, 'start': 10.22, 'end': 14.24, 'text': ' and fixed point theory. So, see we look at look at the mathematical foundations of why', 'tokens': [50875, 293, 6806, 935, 5261, 13, 407, 11, 536, 321, 574, 412, 574, 412, 264, 18894, 22467, 295, 983, 51076], 'temperature': 0.0, 'avg_logprob': -0.19806138859238737, 'compression_ratio': 1.7281553398058251, 'no_speech_prob': 0.07137338817119598}, {'id': 2, 'seek': 0, 'start': 14.24, 'end': 22.2, 'text': ' the analysis that we described yesterday really works. Why do you think it should really work?', 'tokens': [51076, 264, 5215, 300, 321, 7619, 5186, 534, 1985, 13, 1545, 360, 291, 519, 309, 820, 534, 589, 30, 51474], 'temperature': 0.0, 'avg_logprob': -0.19806138859238737, 'compression_ratio': 1.7281553398058251, 'no_speech_prob': 0.07137338817119598}, {'id': 3, 'seek': 0, 'start': 22.2, 'end': 29.64, 'text': ' So, before we get into anything let us just start covering the basics. So, first is what', 'tokens': [51474, 407, 11, 949, 321, 483, 666, 1340, 718, 505, 445, 722, 10322, 264, 14688, 13, 407, 11, 700, 307, 437, 51846], 'temperature': 0.0, 'avg_logprob': -0.19806138859238737, 'compression_ratio': 1.7281553398058251, 'no_speech_prob': 0.07137338817119598}, {'id': 4, 'seek': 2964, 'start': 29.64, 'end': 41.36, 'text': ' is a set? So, what is a set? So, it is a collection of elements. The next thing is', 'tokens': [50364, 307, 257, 992, 30, 407, 11, 437, 307, 257, 992, 30, 407, 11, 309, 307, 257, 5765, 295, 4959, 13, 440, 958, 551, 307, 50950], 'temperature': 0.0, 'avg_logprob': -0.14306119918823243, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.2840054929256439}, {'id': 5, 'seek': 2964, 'start': 41.36, 'end': 54.84, 'text': ' a notion of a binary relation. So, what is a binary relation? Relation between two elements', 'tokens': [50950, 257, 10710, 295, 257, 17434, 9721, 13, 407, 11, 437, 307, 257, 17434, 9721, 30, 8738, 399, 1296, 732, 4959, 51624], 'temperature': 0.0, 'avg_logprob': -0.14306119918823243, 'compression_ratio': 1.6730769230769231, 'no_speech_prob': 0.2840054929256439}, {'id': 6, 'seek': 5484, 'start': 54.92, 'end': 66.24000000000001, 'text': ' of a relation between elements of a set. Can you describe the binary relation? What was', 'tokens': [50368, 295, 257, 9721, 1296, 4959, 295, 257, 992, 13, 1664, 291, 6786, 264, 17434, 9721, 30, 708, 390, 50934], 'temperature': 0.0, 'avg_logprob': -0.2993027230967646, 'compression_ratio': 1.3937007874015748, 'no_speech_prob': 0.6711887717247009}, {'id': 7, 'seek': 5484, 'start': 66.24000000000001, 'end': 78.44, 'text': ' it? Marriage. Marriage, okay nice. That was a good relation in all senses. So, other than', 'tokens': [50934, 309, 30, 49593, 13, 49593, 11, 1392, 1481, 13, 663, 390, 257, 665, 9721, 294, 439, 17057, 13, 407, 11, 661, 813, 51544], 'temperature': 0.0, 'avg_logprob': -0.2993027230967646, 'compression_ratio': 1.3937007874015748, 'no_speech_prob': 0.6711887717247009}, {'id': 8, 'seek': 7844, 'start': 78.44, 'end': 91.92, 'text': ' mathematically what relation can you think of? Other than social relation. So, relations like', 'tokens': [50364, 44003, 437, 9721, 393, 291, 519, 295, 30, 5358, 813, 2093, 9721, 13, 407, 11, 2299, 411, 51038], 'temperature': 0.0, 'avg_logprob': -0.22056507027667502, 'compression_ratio': 1.4841269841269842, 'no_speech_prob': 0.05086588114500046}, {'id': 9, 'seek': 7844, 'start': 91.92, 'end': 101.56, 'text': ' greater than less than. So, essentially we will use this notation. So, you say if A and B are', 'tokens': [51038, 5044, 813, 1570, 813, 13, 407, 11, 4476, 321, 486, 764, 341, 24657, 13, 407, 11, 291, 584, 498, 316, 293, 363, 366, 51520], 'temperature': 0.0, 'avg_logprob': -0.22056507027667502, 'compression_ratio': 1.4841269841269842, 'no_speech_prob': 0.05086588114500046}, {'id': 10, 'seek': 10156, 'start': 101.56, 'end': 111.72, 'text': ' elements of some set then I can say that I use the notation A R B to say is A is related to B,', 'tokens': [50364, 4959, 295, 512, 992, 550, 286, 393, 584, 300, 286, 764, 264, 24657, 316, 497, 363, 281, 584, 307, 316, 307, 4077, 281, 363, 11, 50872], 'temperature': 0.0, 'avg_logprob': -0.18881402333577474, 'compression_ratio': 1.6091954022988506, 'no_speech_prob': 0.16395381093025208}, {'id': 11, 'seek': 10156, 'start': 111.72, 'end': 118.80000000000001, 'text': ' right? Or we can also essentially describe the same thing in a slightly different way.', 'tokens': [50872, 558, 30, 1610, 321, 393, 611, 4476, 6786, 264, 912, 551, 294, 257, 4748, 819, 636, 13, 51226], 'temperature': 0.0, 'avg_logprob': -0.18881402333577474, 'compression_ratio': 1.6091954022988506, 'no_speech_prob': 0.16395381093025208}, {'id': 12, 'seek': 10156, 'start': 118.80000000000001, 'end': 128.48000000000002, 'text': ' I can think of the same business. I can think of this R the relation R as also a set and now it is', 'tokens': [51226, 286, 393, 519, 295, 264, 912, 1606, 13, 286, 393, 519, 295, 341, 497, 264, 9721, 497, 382, 611, 257, 992, 293, 586, 309, 307, 51710], 'temperature': 0.0, 'avg_logprob': -0.18881402333577474, 'compression_ratio': 1.6091954022988506, 'no_speech_prob': 0.16395381093025208}, {'id': 13, 'seek': 12848, 'start': 128.48, 'end': 134.95999999999998, 'text': ' a set of tuples A comma B, right? So, people keep on using these two notation interchangeably,', 'tokens': [50364, 257, 992, 295, 2604, 2622, 316, 22117, 363, 11, 558, 30, 407, 11, 561, 1066, 322, 1228, 613, 732, 24657, 30358, 1188, 11, 50688], 'temperature': 0.0, 'avg_logprob': -0.16843894675925927, 'compression_ratio': 1.8669950738916257, 'no_speech_prob': 0.06344551593065262}, {'id': 14, 'seek': 12848, 'start': 134.95999999999998, 'end': 141.2, 'text': ' right? So, I can say that A is less than equal to B. So, less than equal to being the binary', 'tokens': [50688, 558, 30, 407, 11, 286, 393, 584, 300, 316, 307, 1570, 813, 2681, 281, 363, 13, 407, 11, 1570, 813, 2681, 281, 885, 264, 17434, 51000], 'temperature': 0.0, 'avg_logprob': -0.16843894675925927, 'compression_ratio': 1.8669950738916257, 'no_speech_prob': 0.06344551593065262}, {'id': 15, 'seek': 12848, 'start': 141.2, 'end': 149.07999999999998, 'text': ' relation or I can say the tuple A comma B is element of this set less than equal to, right?', 'tokens': [51000, 9721, 420, 286, 393, 584, 264, 2604, 781, 316, 22117, 363, 307, 4478, 295, 341, 992, 1570, 813, 2681, 281, 11, 558, 30, 51394], 'temperature': 0.0, 'avg_logprob': -0.16843894675925927, 'compression_ratio': 1.8669950738916257, 'no_speech_prob': 0.06344551593065262}, {'id': 16, 'seek': 12848, 'start': 149.07999999999998, 'end': 155.56, 'text': ' Both of them mean the same thing. So, this ordering you maintain this. So, it is a tuple. It is not', 'tokens': [51394, 6767, 295, 552, 914, 264, 912, 551, 13, 407, 11, 341, 21739, 291, 6909, 341, 13, 407, 11, 309, 307, 257, 2604, 781, 13, 467, 307, 406, 51718], 'temperature': 0.0, 'avg_logprob': -0.16843894675925927, 'compression_ratio': 1.8669950738916257, 'no_speech_prob': 0.06344551593065262}, {'id': 17, 'seek': 15556, 'start': 155.56, 'end': 164.44, 'text': ' so you have to that ordering does matter, right? So, now there are some properties of', 'tokens': [50364, 370, 291, 362, 281, 300, 21739, 775, 1871, 11, 558, 30, 407, 11, 586, 456, 366, 512, 7221, 295, 50808], 'temperature': 0.0, 'avg_logprob': -0.19316954082912868, 'compression_ratio': 1.7547169811320755, 'no_speech_prob': 0.11531008034944534}, {'id': 18, 'seek': 15556, 'start': 164.44, 'end': 171.4, 'text': ' sets that we properties of relations we discuss. So, the first is reflexivity. So, what is', 'tokens': [50808, 6352, 300, 321, 7221, 295, 2299, 321, 2248, 13, 407, 11, 264, 700, 307, 23802, 4253, 13, 407, 11, 437, 307, 51156], 'temperature': 0.0, 'avg_logprob': -0.19316954082912868, 'compression_ratio': 1.7547169811320755, 'no_speech_prob': 0.11531008034944534}, {'id': 19, 'seek': 15556, 'start': 171.4, 'end': 184.84, 'text': ' reflexivity? When do we say relation is reflexive? When every element is related to itself, right? So,', 'tokens': [51156, 23802, 4253, 30, 1133, 360, 321, 584, 9721, 307, 23802, 488, 30, 1133, 633, 4478, 307, 4077, 281, 2564, 11, 558, 30, 407, 11, 51828], 'temperature': 0.0, 'avg_logprob': -0.19316954082912868, 'compression_ratio': 1.7547169811320755, 'no_speech_prob': 0.11531008034944534}, {'id': 20, 'seek': 18484, 'start': 184.84, 'end': 194.28, 'text': ' when A comma A is always a member of this relation, right? Then the next is symmetry.', 'tokens': [50364, 562, 316, 22117, 316, 307, 1009, 257, 4006, 295, 341, 9721, 11, 558, 30, 1396, 264, 958, 307, 25440, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.15052202512633125, 'compression_ratio': 1.4523809523809523, 'no_speech_prob': 0.0031621919479221106}, {'id': 21, 'seek': 18484, 'start': 194.28, 'end': 209.2, 'text': ' What is symmetry? Right. So, if A is related to B, it implies that B is related to A. The next is', 'tokens': [50836, 708, 307, 25440, 30, 1779, 13, 407, 11, 498, 316, 307, 4077, 281, 363, 11, 309, 18779, 300, 363, 307, 4077, 281, 316, 13, 440, 958, 307, 51582], 'temperature': 0.0, 'avg_logprob': -0.15052202512633125, 'compression_ratio': 1.4523809523809523, 'no_speech_prob': 0.0031621919479221106}, {'id': 22, 'seek': 20920, 'start': 209.2, 'end': 217.83999999999997, 'text': ' anti-symmetry. What is anti-symmetry? There is small difference between asymmetry and anti-symmetry.', 'tokens': [50364, 6061, 12, 3187, 2174, 9889, 13, 708, 307, 6061, 12, 3187, 2174, 9889, 30, 821, 307, 1359, 2649, 1296, 37277, 9889, 293, 6061, 12, 3187, 2174, 9889, 13, 50796], 'temperature': 0.0, 'avg_logprob': -0.18124333074537374, 'compression_ratio': 1.5476190476190477, 'no_speech_prob': 0.09246544539928436}, {'id': 23, 'seek': 20920, 'start': 217.83999999999997, 'end': 228.83999999999997, 'text': ' Yes, that is the right definition. So, you say that if A is related to B and you say that B is', 'tokens': [50796, 1079, 11, 300, 307, 264, 558, 7123, 13, 407, 11, 291, 584, 300, 498, 316, 307, 4077, 281, 363, 293, 291, 584, 300, 363, 307, 51346], 'temperature': 0.0, 'avg_logprob': -0.18124333074537374, 'compression_ratio': 1.5476190476190477, 'no_speech_prob': 0.09246544539928436}, {'id': 24, 'seek': 22884, 'start': 228.84, 'end': 239.6, 'text': ' also related to A, then it implies that A must be equal to B, right? So, it is possible that these', 'tokens': [50364, 611, 4077, 281, 316, 11, 550, 309, 18779, 300, 316, 1633, 312, 2681, 281, 363, 11, 558, 30, 407, 11, 309, 307, 1944, 300, 613, 50902], 'temperature': 0.0, 'avg_logprob': -0.12023080969756504, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.021573545411229134}, {'id': 25, 'seek': 22884, 'start': 239.6, 'end': 247.52, 'text': ' two happen, but if these two happen, it simply means that this must be the same element, right?', 'tokens': [50902, 732, 1051, 11, 457, 498, 613, 732, 1051, 11, 309, 2935, 1355, 300, 341, 1633, 312, 264, 912, 4478, 11, 558, 30, 51298], 'temperature': 0.0, 'avg_logprob': -0.12023080969756504, 'compression_ratio': 1.5275590551181102, 'no_speech_prob': 0.021573545411229134}, {'id': 26, 'seek': 24752, 'start': 247.52, 'end': 261.8, 'text': ' And the next is transitivity. What is transitivity? Yeah. So, A is related to B and B is related to some C,', 'tokens': [50364, 400, 264, 958, 307, 17976, 4253, 13, 708, 307, 17976, 4253, 30, 865, 13, 407, 11, 316, 307, 4077, 281, 363, 293, 363, 307, 4077, 281, 512, 383, 11, 51078], 'temperature': 0.0, 'avg_logprob': -0.2078344708397275, 'compression_ratio': 1.4964028776978417, 'no_speech_prob': 0.03826189041137695}, {'id': 27, 'seek': 24752, 'start': 261.8, 'end': 275.84000000000003, 'text': ' then we simply say A must be related to C. Agreed? Okay. So, next we define the notion of a poset or', 'tokens': [51078, 550, 321, 2935, 584, 316, 1633, 312, 4077, 281, 383, 13, 29324, 292, 30, 1033, 13, 407, 11, 958, 321, 6964, 264, 10710, 295, 257, 1366, 302, 420, 51780], 'temperature': 0.0, 'avg_logprob': -0.2078344708397275, 'compression_ratio': 1.4964028776978417, 'no_speech_prob': 0.03826189041137695}, {'id': 28, 'seek': 27584, 'start': 275.84, 'end': 281.08, 'text': ' a partially ordered set. So, we talked a little bit about that yesterday, but let us define it', 'tokens': [50364, 257, 18886, 8866, 992, 13, 407, 11, 321, 2825, 257, 707, 857, 466, 300, 5186, 11, 457, 718, 505, 6964, 309, 50626], 'temperature': 0.0, 'avg_logprob': -0.14815939797295463, 'compression_ratio': 1.7300884955752212, 'no_speech_prob': 0.13620904088020325}, {'id': 29, 'seek': 27584, 'start': 281.08, 'end': 287.32, 'text': ' formally now. So, whenever I say, okay, there is a poset, you should ask me that what is the set here?', 'tokens': [50626, 25983, 586, 13, 407, 11, 5699, 286, 584, 11, 1392, 11, 456, 307, 257, 1366, 302, 11, 291, 820, 1029, 385, 300, 437, 307, 264, 992, 510, 30, 50938], 'temperature': 0.0, 'avg_logprob': -0.14815939797295463, 'compression_ratio': 1.7300884955752212, 'no_speech_prob': 0.13620904088020325}, {'id': 30, 'seek': 27584, 'start': 287.32, 'end': 294.35999999999996, 'text': ' What is the underlying set? And you have to ask me what is the underlying relation, right? So,', 'tokens': [50938, 708, 307, 264, 14217, 992, 30, 400, 291, 362, 281, 1029, 385, 437, 307, 264, 14217, 9721, 11, 558, 30, 407, 11, 51290], 'temperature': 0.0, 'avg_logprob': -0.14815939797295463, 'compression_ratio': 1.7300884955752212, 'no_speech_prob': 0.13620904088020325}, {'id': 31, 'seek': 27584, 'start': 295.35999999999996, 'end': 304.4, 'text': ' I have a set S and a relation less than equal to. So, a poset, so what are the, anybody knows what', 'tokens': [51340, 286, 362, 257, 992, 318, 293, 257, 9721, 1570, 813, 2681, 281, 13, 407, 11, 257, 1366, 302, 11, 370, 437, 366, 264, 11, 4472, 3255, 437, 51792], 'temperature': 0.0, 'avg_logprob': -0.14815939797295463, 'compression_ratio': 1.7300884955752212, 'no_speech_prob': 0.13620904088020325}, {'id': 32, 'seek': 30440, 'start': 304.4, 'end': 316.28, 'text': ' are the properties that a poset satisfies? So, first is it, is it reflexive? So, it is reflexive.', 'tokens': [50364, 366, 264, 7221, 300, 257, 1366, 302, 44271, 30, 407, 11, 700, 307, 309, 11, 307, 309, 23802, 488, 30, 407, 11, 309, 307, 23802, 488, 13, 50958], 'temperature': 0.0, 'avg_logprob': -0.1359595792839326, 'compression_ratio': 1.7159763313609468, 'no_speech_prob': 0.0032149963080883026}, {'id': 33, 'seek': 30440, 'start': 316.28, 'end': 324.44, 'text': ' It means that every element in the poset must be related to itself by the less than equal to,', 'tokens': [50958, 467, 1355, 300, 633, 4478, 294, 264, 1366, 302, 1633, 312, 4077, 281, 2564, 538, 264, 1570, 813, 2681, 281, 11, 51366], 'temperature': 0.0, 'avg_logprob': -0.1359595792839326, 'compression_ratio': 1.7159763313609468, 'no_speech_prob': 0.0032149963080883026}, {'id': 34, 'seek': 30440, 'start': 324.44, 'end': 331.08, 'text': ' that is why it is a less than equal to and not less than, right? So, the next is, is it symmetric?', 'tokens': [51366, 300, 307, 983, 309, 307, 257, 1570, 813, 2681, 281, 293, 406, 1570, 813, 11, 558, 30, 407, 11, 264, 958, 307, 11, 307, 309, 32330, 30, 51698], 'temperature': 0.0, 'avg_logprob': -0.1359595792839326, 'compression_ratio': 1.7159763313609468, 'no_speech_prob': 0.0032149963080883026}, {'id': 35, 'seek': 33108, 'start': 331.08, 'end': 343.15999999999997, 'text': ' No, it is not symmetric, it is antisymmetric. And the third is, it is transitive.', 'tokens': [50364, 883, 11, 309, 307, 406, 32330, 11, 309, 307, 2511, 14169, 2174, 17475, 13, 400, 264, 2636, 307, 11, 309, 307, 1145, 2187, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.2466515454378995, 'compression_ratio': 1.5593220338983051, 'no_speech_prob': 0.01958874613046646}, {'id': 36, 'seek': 33108, 'start': 343.15999999999997, 'end': 357.15999999999997, 'text': ' What is antisymmetric will be symmetric, not really, actually they are anti, the names is anti, right?', 'tokens': [50968, 708, 307, 2511, 14169, 2174, 17475, 486, 312, 32330, 11, 406, 534, 11, 767, 436, 366, 6061, 11, 264, 5288, 307, 6061, 11, 558, 30, 51668], 'temperature': 0.0, 'avg_logprob': -0.2466515454378995, 'compression_ratio': 1.5593220338983051, 'no_speech_prob': 0.01958874613046646}, {'id': 37, 'seek': 35716, 'start': 357.24, 'end': 365.76000000000005, 'text': ' Not belongs, related to.', 'tokens': [50368, 1726, 12953, 11, 4077, 281, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.24297556443647905, 'compression_ratio': 1.6434108527131783, 'no_speech_prob': 0.12117144465446472}, {'id': 38, 'seek': 35716, 'start': 365.76000000000005, 'end': 379.6, 'text': ' No, just see the if then else condition. So, this is the condition, if this condition holds,', 'tokens': [50794, 883, 11, 445, 536, 264, 498, 550, 1646, 4188, 13, 407, 11, 341, 307, 264, 4188, 11, 498, 341, 4188, 9190, 11, 51486], 'temperature': 0.0, 'avg_logprob': -0.24297556443647905, 'compression_ratio': 1.6434108527131783, 'no_speech_prob': 0.12117144465446472}, {'id': 39, 'seek': 35716, 'start': 379.6, 'end': 383.6, 'text': ' then this condition holds. It is not saying that for all elements this condition holds, right?', 'tokens': [51486, 550, 341, 4188, 9190, 13, 467, 307, 406, 1566, 300, 337, 439, 4959, 341, 4188, 9190, 11, 558, 30, 51686], 'temperature': 0.0, 'avg_logprob': -0.24297556443647905, 'compression_ratio': 1.6434108527131783, 'no_speech_prob': 0.12117144465446472}, {'id': 40, 'seek': 38360, 'start': 384.12, 'end': 391.44, 'text': ' So, this is implies, this is implies, right? So, this is given the left hand side is true,', 'tokens': [50390, 407, 11, 341, 307, 18779, 11, 341, 307, 18779, 11, 558, 30, 407, 11, 341, 307, 2212, 264, 1411, 1011, 1252, 307, 2074, 11, 50756], 'temperature': 0.0, 'avg_logprob': -0.24850859361536362, 'compression_ratio': 1.5032679738562091, 'no_speech_prob': 0.006085820030421019}, {'id': 41, 'seek': 38360, 'start': 391.44, 'end': 393.20000000000005, 'text': ' then the right hand side surely holds.', 'tokens': [50756, 550, 264, 558, 1011, 1252, 11468, 9190, 13, 50844], 'temperature': 0.0, 'avg_logprob': -0.24850859361536362, 'compression_ratio': 1.5032679738562091, 'no_speech_prob': 0.006085820030421019}, {'id': 42, 'seek': 38360, 'start': 393.20000000000005, 'end': 400.28000000000003, 'text': ' Yes.', 'tokens': [50844, 1079, 13, 51198], 'temperature': 0.0, 'avg_logprob': -0.24850859361536362, 'compression_ratio': 1.5032679738562091, 'no_speech_prob': 0.006085820030421019}, {'id': 43, 'seek': 38360, 'start': 400.28000000000003, 'end': 413.52000000000004, 'text': ' Exactly, it is a very well put. And in fact, like you said that I am just speaking to elements,', 'tokens': [51198, 7587, 11, 309, 307, 257, 588, 731, 829, 13, 400, 294, 1186, 11, 411, 291, 848, 300, 286, 669, 445, 4124, 281, 4959, 11, 51860], 'temperature': 0.0, 'avg_logprob': -0.24850859361536362, 'compression_ratio': 1.5032679738562091, 'no_speech_prob': 0.006085820030421019}, {'id': 44, 'seek': 41352, 'start': 413.91999999999996, 'end': 417.91999999999996, 'text': ' and saying there is a relation between them. And not even saying any two element will have', 'tokens': [50384, 293, 1566, 456, 307, 257, 9721, 1296, 552, 13, 400, 406, 754, 1566, 604, 732, 4478, 486, 362, 50584], 'temperature': 0.0, 'avg_logprob': -0.19586983112373738, 'compression_ratio': 2.0, 'no_speech_prob': 0.004192839376628399}, {'id': 45, 'seek': 41352, 'start': 417.91999999999996, 'end': 425.0, 'text': ' to even be related, any two arbitrary elements have to be related, that is not even the case, right?', 'tokens': [50584, 281, 754, 312, 4077, 11, 604, 732, 23211, 4959, 362, 281, 312, 4077, 11, 300, 307, 406, 754, 264, 1389, 11, 558, 30, 50938], 'temperature': 0.0, 'avg_logprob': -0.19586983112373738, 'compression_ratio': 2.0, 'no_speech_prob': 0.004192839376628399}, {'id': 46, 'seek': 41352, 'start': 425.0, 'end': 429.47999999999996, 'text': ' So, these just say that how does this relation look like. So, this says that if it is the case', 'tokens': [50938, 407, 11, 613, 445, 584, 300, 577, 775, 341, 9721, 574, 411, 13, 407, 11, 341, 1619, 300, 498, 309, 307, 264, 1389, 51162], 'temperature': 0.0, 'avg_logprob': -0.19586983112373738, 'compression_ratio': 2.0, 'no_speech_prob': 0.004192839376628399}, {'id': 47, 'seek': 41352, 'start': 429.47999999999996, 'end': 434.08, 'text': ' that A is related to B and it is the case that B is related to A, then it is surely the case that', 'tokens': [51162, 300, 316, 307, 4077, 281, 363, 293, 309, 307, 264, 1389, 300, 363, 307, 4077, 281, 316, 11, 550, 309, 307, 11468, 264, 1389, 300, 51392], 'temperature': 0.0, 'avg_logprob': -0.19586983112373738, 'compression_ratio': 2.0, 'no_speech_prob': 0.004192839376628399}, {'id': 48, 'seek': 43408, 'start': 434.08, 'end': 452.4, 'text': ' A must be equal to B, right? So, now let us try to think of a way of representing posets,', 'tokens': [50364, 316, 1633, 312, 2681, 281, 363, 11, 558, 30, 407, 11, 586, 718, 505, 853, 281, 519, 295, 257, 636, 295, 13460, 1366, 1385, 11, 51280], 'temperature': 0.0, 'avg_logprob': -0.21206470330556235, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.030131982639431953}, {'id': 49, 'seek': 43408, 'start': 452.4, 'end': 459.24, 'text': ' right? And they are, the posets are extremely important as mathematical structures as well', 'tokens': [51280, 558, 30, 400, 436, 366, 11, 264, 1366, 1385, 366, 4664, 1021, 382, 18894, 9227, 382, 731, 51622], 'temperature': 0.0, 'avg_logprob': -0.21206470330556235, 'compression_ratio': 1.3636363636363635, 'no_speech_prob': 0.030131982639431953}, {'id': 50, 'seek': 45924, 'start': 459.24, 'end': 465.96000000000004, 'text': ' as in computer science when we discuss algorithms and things like that. So, we, we, let us have a', 'tokens': [50364, 382, 294, 3820, 3497, 562, 321, 2248, 14642, 293, 721, 411, 300, 13, 407, 11, 321, 11, 321, 11, 718, 505, 362, 257, 50700], 'temperature': 0.0, 'avg_logprob': -0.15615800162342108, 'compression_ratio': 1.6812227074235808, 'no_speech_prob': 0.06359963119029999}, {'id': 51, 'seek': 45924, 'start': 465.96000000000004, 'end': 472.48, 'text': ' nice representation to describe a poset. So, that I, in graphically I can describe what my S is and', 'tokens': [50700, 1481, 10290, 281, 6786, 257, 1366, 302, 13, 407, 11, 300, 286, 11, 294, 4295, 984, 286, 393, 6786, 437, 452, 318, 307, 293, 51026], 'temperature': 0.0, 'avg_logprob': -0.15615800162342108, 'compression_ratio': 1.6812227074235808, 'no_speech_prob': 0.06359963119029999}, {'id': 52, 'seek': 45924, 'start': 472.48, 'end': 478.72, 'text': ' how does the relation less than equal to hold on that set. So, let us try to use the properties', 'tokens': [51026, 577, 775, 264, 9721, 1570, 813, 2681, 281, 1797, 322, 300, 992, 13, 407, 11, 718, 505, 853, 281, 764, 264, 7221, 51338], 'temperature': 0.0, 'avg_logprob': -0.15615800162342108, 'compression_ratio': 1.6812227074235808, 'no_speech_prob': 0.06359963119029999}, {'id': 53, 'seek': 45924, 'start': 478.72, 'end': 487.16, 'text': ' of the poset, right? So, one property I know is that it is reflexive, it is anti-symmetric,', 'tokens': [51338, 295, 264, 1366, 302, 11, 558, 30, 407, 11, 472, 4707, 286, 458, 307, 300, 309, 307, 23802, 488, 11, 309, 307, 6061, 12, 3187, 2174, 17475, 11, 51760], 'temperature': 0.0, 'avg_logprob': -0.15615800162342108, 'compression_ratio': 1.6812227074235808, 'no_speech_prob': 0.06359963119029999}, {'id': 54, 'seek': 48716, 'start': 487.16, 'end': 493.92, 'text': ' it is transitive. So, think about this. Let us say I use this, I try to represent it using a graph', 'tokens': [50364, 309, 307, 1145, 2187, 13, 407, 11, 519, 466, 341, 13, 961, 505, 584, 286, 764, 341, 11, 286, 853, 281, 2906, 309, 1228, 257, 4295, 50702], 'temperature': 0.0, 'avg_logprob': -0.1378640272678473, 'compression_ratio': 1.6101694915254237, 'no_speech_prob': 0.015864809975028038}, {'id': 55, 'seek': 48716, 'start': 493.92, 'end': 502.88000000000005, 'text': ' where every point that I have is basically a member of this set. So, every member of this set,', 'tokens': [50702, 689, 633, 935, 300, 286, 362, 307, 1936, 257, 4006, 295, 341, 992, 13, 407, 11, 633, 4006, 295, 341, 992, 11, 51150], 'temperature': 0.0, 'avg_logprob': -0.1378640272678473, 'compression_ratio': 1.6101694915254237, 'no_speech_prob': 0.015864809975028038}, {'id': 56, 'seek': 48716, 'start': 502.88000000000005, 'end': 509.44000000000005, 'text': ' I represent by this graph, as a node in this graph, right? The second is I need to describe', 'tokens': [51150, 286, 2906, 538, 341, 4295, 11, 382, 257, 9984, 294, 341, 4295, 11, 558, 30, 440, 1150, 307, 286, 643, 281, 6786, 51478], 'temperature': 0.0, 'avg_logprob': -0.1378640272678473, 'compression_ratio': 1.6101694915254237, 'no_speech_prob': 0.015864809975028038}, {'id': 57, 'seek': 50944, 'start': 509.44, 'end': 517.92, 'text': ' what are the edges. So, I say whenever A is related to B, I will have an edge going from A to B,', 'tokens': [50364, 437, 366, 264, 8819, 13, 407, 11, 286, 584, 5699, 316, 307, 4077, 281, 363, 11, 286, 486, 362, 364, 4691, 516, 490, 316, 281, 363, 11, 50788], 'temperature': 0.0, 'avg_logprob': -0.14099993816641873, 'compression_ratio': 1.8846153846153846, 'no_speech_prob': 0.1548772007226944}, {'id': 58, 'seek': 50944, 'start': 517.92, 'end': 525.92, 'text': ' it is a directed edge, right? So, I will, whenever A is related to B, I will create an edge between', 'tokens': [50788, 309, 307, 257, 12898, 4691, 11, 558, 30, 407, 11, 286, 486, 11, 5699, 316, 307, 4077, 281, 363, 11, 286, 486, 1884, 364, 4691, 1296, 51188], 'temperature': 0.0, 'avg_logprob': -0.14099993816641873, 'compression_ratio': 1.8846153846153846, 'no_speech_prob': 0.1548772007226944}, {'id': 59, 'seek': 50944, 'start': 525.92, 'end': 531.0, 'text': ' A and B. Whenever B is related to D, I will create an edge between, so this is the same relation,', 'tokens': [51188, 316, 293, 363, 13, 14159, 363, 307, 4077, 281, 413, 11, 286, 486, 1884, 364, 4691, 1296, 11, 370, 341, 307, 264, 912, 9721, 11, 51442], 'temperature': 0.0, 'avg_logprob': -0.14099993816641873, 'compression_ratio': 1.8846153846153846, 'no_speech_prob': 0.1548772007226944}, {'id': 60, 'seek': 53100, 'start': 531.0, 'end': 540.2, 'text': ' so I need not keep on putting this. So, when A is related to itself, what will I have?', 'tokens': [50364, 370, 286, 643, 406, 1066, 322, 3372, 341, 13, 407, 11, 562, 316, 307, 4077, 281, 2564, 11, 437, 486, 286, 362, 30, 50824], 'temperature': 0.0, 'avg_logprob': -0.12107936235574576, 'compression_ratio': 1.048780487804878, 'no_speech_prob': 0.6290149092674255}, {'id': 61, 'seek': 56100, 'start': 561.0, 'end': 573.8, 'text': ' So, I will have a self-loop into this, right? What if this, so if this relation was transitive,', 'tokens': [50364, 407, 11, 286, 486, 362, 257, 2698, 12, 46623, 666, 341, 11, 558, 30, 708, 498, 341, 11, 370, 498, 341, 9721, 390, 1145, 2187, 11, 51004], 'temperature': 0.0, 'avg_logprob': -0.18798261122270063, 'compression_ratio': 1.484375, 'no_speech_prob': 0.05111571401357651}, {'id': 62, 'seek': 56100, 'start': 573.8, 'end': 584.52, 'text': ' what will it look like? I will also have this thing between B and if I had a, if this relation', 'tokens': [51004, 437, 486, 309, 574, 411, 30, 286, 486, 611, 362, 341, 551, 1296, 363, 293, 498, 286, 632, 257, 11, 498, 341, 9721, 51540], 'temperature': 0.0, 'avg_logprob': -0.18798261122270063, 'compression_ratio': 1.484375, 'no_speech_prob': 0.05111571401357651}, {'id': 63, 'seek': 58452, 'start': 584.52, 'end': 599.3199999999999, 'text': ' was reflexive, then what would I have? Self-loop on all nodes, right? So, do you agree that if', 'tokens': [50364, 390, 23802, 488, 11, 550, 437, 576, 286, 362, 30, 16348, 12, 46623, 322, 439, 13891, 11, 558, 30, 407, 11, 360, 291, 3986, 300, 498, 51104], 'temperature': 0.0, 'avg_logprob': -0.07332170926607572, 'compression_ratio': 1.3785714285714286, 'no_speech_prob': 0.14205630123615265}, {'id': 64, 'seek': 58452, 'start': 599.3199999999999, 'end': 606.56, 'text': ' I give you this diagram, you should be able to, this completely describes the set and the relation', 'tokens': [51104, 286, 976, 291, 341, 10686, 11, 291, 820, 312, 1075, 281, 11, 341, 2584, 15626, 264, 992, 293, 264, 9721, 51466], 'temperature': 0.0, 'avg_logprob': -0.07332170926607572, 'compression_ratio': 1.3785714285714286, 'no_speech_prob': 0.14205630123615265}, {'id': 65, 'seek': 60656, 'start': 606.56, 'end': 615.64, 'text': ' on this set, agreed? Okay. Now, this is looking really ugly, right? I mean forget my handwriting,', 'tokens': [50364, 322, 341, 992, 11, 9166, 30, 1033, 13, 823, 11, 341, 307, 1237, 534, 12246, 11, 558, 30, 286, 914, 2870, 452, 39179, 11, 50818], 'temperature': 0.0, 'avg_logprob': -0.1560423887228664, 'compression_ratio': 1.6120218579234973, 'no_speech_prob': 0.28494030237197876}, {'id': 66, 'seek': 60656, 'start': 615.64, 'end': 625.1199999999999, 'text': ' but even otherwise it is looking ugly, right? So, now the question is that can I use the property', 'tokens': [50818, 457, 754, 5911, 309, 307, 1237, 12246, 11, 558, 30, 407, 11, 586, 264, 1168, 307, 300, 393, 286, 764, 264, 4707, 51292], 'temperature': 0.0, 'avg_logprob': -0.1560423887228664, 'compression_ratio': 1.6120218579234973, 'no_speech_prob': 0.28494030237197876}, {'id': 67, 'seek': 60656, 'start': 625.1199999999999, 'end': 632.4399999999999, 'text': ' of this poset to simplify this diagram? So, if I use this, if I tell you that this diagram is going', 'tokens': [51292, 295, 341, 1366, 302, 281, 20460, 341, 10686, 30, 407, 11, 498, 286, 764, 341, 11, 498, 286, 980, 291, 300, 341, 10686, 307, 516, 51658], 'temperature': 0.0, 'avg_logprob': -0.1560423887228664, 'compression_ratio': 1.6120218579234973, 'no_speech_prob': 0.28494030237197876}, {'id': 68, 'seek': 63244, 'start': 632.44, 'end': 641.0400000000001, 'text': ' to be a poset, this is, I am only using to represent a poset, then you already know that because it is', 'tokens': [50364, 281, 312, 257, 1366, 302, 11, 341, 307, 11, 286, 669, 787, 1228, 281, 2906, 257, 1366, 302, 11, 550, 291, 1217, 458, 300, 570, 309, 307, 50794], 'temperature': 0.0, 'avg_logprob': -0.11607759877255089, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.20088207721710205}, {'id': 69, 'seek': 63244, 'start': 641.0400000000001, 'end': 648.5200000000001, 'text': ' a poset, this guy is going to be reflexive. It means that all nodes are surely going to have loops,', 'tokens': [50794, 257, 1366, 302, 11, 341, 2146, 307, 516, 281, 312, 23802, 488, 13, 467, 1355, 300, 439, 13891, 366, 11468, 516, 281, 362, 16121, 11, 51168], 'temperature': 0.0, 'avg_logprob': -0.11607759877255089, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.20088207721710205}, {'id': 70, 'seek': 63244, 'start': 648.5200000000001, 'end': 653.1600000000001, 'text': ' self-loops. So, what is the point of showing them? I know it is going to be the case, so let us not,', 'tokens': [51168, 2698, 12, 752, 3370, 13, 407, 11, 437, 307, 264, 935, 295, 4099, 552, 30, 286, 458, 309, 307, 516, 281, 312, 264, 1389, 11, 370, 718, 505, 406, 11, 51400], 'temperature': 0.0, 'avg_logprob': -0.11607759877255089, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.20088207721710205}, {'id': 71, 'seek': 63244, 'start': 653.1600000000001, 'end': 656.44, 'text': ' because that is not giving additional information, I know it is a poset, so they are going to be', 'tokens': [51400, 570, 300, 307, 406, 2902, 4497, 1589, 11, 286, 458, 309, 307, 257, 1366, 302, 11, 370, 436, 366, 516, 281, 312, 51564], 'temperature': 0.0, 'avg_logprob': -0.11607759877255089, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.20088207721710205}, {'id': 72, 'seek': 65644, 'start': 656.44, 'end': 665.24, 'text': ' self-loop on everything. So, let us get rid of the self-loops, right? Okay, good. Second thing I know', 'tokens': [50364, 2698, 12, 46623, 322, 1203, 13, 407, 11, 718, 505, 483, 3973, 295, 264, 2698, 12, 752, 3370, 11, 558, 30, 1033, 11, 665, 13, 5736, 551, 286, 458, 50804], 'temperature': 0.0, 'avg_logprob': -0.1473070546200401, 'compression_ratio': 1.6105263157894736, 'no_speech_prob': 0.2670899033546448}, {'id': 73, 'seek': 65644, 'start': 665.24, 'end': 675.6400000000001, 'text': ' is that it is transitive. If it is transitive, if I see a continuous chain, like if I see a link from', 'tokens': [50804, 307, 300, 309, 307, 1145, 2187, 13, 759, 309, 307, 1145, 2187, 11, 498, 286, 536, 257, 10957, 5021, 11, 411, 498, 286, 536, 257, 2113, 490, 51324], 'temperature': 0.0, 'avg_logprob': -0.1473070546200401, 'compression_ratio': 1.6105263157894736, 'no_speech_prob': 0.2670899033546448}, {'id': 74, 'seek': 65644, 'start': 675.6400000000001, 'end': 683.8800000000001, 'text': ' A to B and B to D, then I know that there is going to be a link between A and D, right? So, I can just', 'tokens': [51324, 316, 281, 363, 293, 363, 281, 413, 11, 550, 286, 458, 300, 456, 307, 516, 281, 312, 257, 2113, 1296, 316, 293, 413, 11, 558, 30, 407, 11, 286, 393, 445, 51736], 'temperature': 0.0, 'avg_logprob': -0.1473070546200401, 'compression_ratio': 1.6105263157894736, 'no_speech_prob': 0.2670899033546448}, {'id': 75, 'seek': 68388, 'start': 683.88, 'end': 690.24, 'text': ' follow a sequence of edges, I know that relation surely holds. Again, that extra edge is not giving', 'tokens': [50364, 1524, 257, 8310, 295, 8819, 11, 286, 458, 300, 9721, 11468, 9190, 13, 3764, 11, 300, 2857, 4691, 307, 406, 2902, 50682], 'temperature': 0.0, 'avg_logprob': -0.10909927701487125, 'compression_ratio': 1.7674418604651163, 'no_speech_prob': 0.022144945338368416}, {'id': 76, 'seek': 68388, 'start': 690.24, 'end': 698.04, 'text': ' any extra information, right? So, again I can simplify my diagram, I can get rid of this, right?', 'tokens': [50682, 604, 2857, 1589, 11, 558, 30, 407, 11, 797, 286, 393, 20460, 452, 10686, 11, 286, 393, 483, 3973, 295, 341, 11, 558, 30, 51072], 'temperature': 0.0, 'avg_logprob': -0.10909927701487125, 'compression_ratio': 1.7674418604651163, 'no_speech_prob': 0.022144945338368416}, {'id': 77, 'seek': 68388, 'start': 698.04, 'end': 705.48, 'text': ' The third thing I know that it is going to be antisymmetric, right? If it is antisymmetric,', 'tokens': [51072, 440, 2636, 551, 286, 458, 300, 309, 307, 516, 281, 312, 2511, 14169, 2174, 17475, 11, 558, 30, 759, 309, 307, 2511, 14169, 2174, 17475, 11, 51444], 'temperature': 0.0, 'avg_logprob': -0.10909927701487125, 'compression_ratio': 1.7674418604651163, 'no_speech_prob': 0.022144945338368416}, {'id': 78, 'seek': 68388, 'start': 705.48, 'end': 711.44, 'text': ' then I am sure that if there is a relation between A to B, then there cannot be a relation,', 'tokens': [51444, 550, 286, 669, 988, 300, 498, 456, 307, 257, 9721, 1296, 316, 281, 363, 11, 550, 456, 2644, 312, 257, 9721, 11, 51742], 'temperature': 0.0, 'avg_logprob': -0.10909927701487125, 'compression_ratio': 1.7674418604651163, 'no_speech_prob': 0.022144945338368416}, {'id': 79, 'seek': 71144, 'start': 711.9200000000001, 'end': 717.5600000000001, 'text': ' there cannot be a line going the other direction, there cannot be a line going from B to A. If this', 'tokens': [50388, 456, 2644, 312, 257, 1622, 516, 264, 661, 3513, 11, 456, 2644, 312, 257, 1622, 516, 490, 363, 281, 316, 13, 759, 341, 50670], 'temperature': 0.0, 'avg_logprob': -0.12759137335624404, 'compression_ratio': 2.2088888888888887, 'no_speech_prob': 0.007319175638258457}, {'id': 80, 'seek': 71144, 'start': 717.5600000000001, 'end': 721.7600000000001, 'text': ' happens, then they surely are the same point, they will collapse into the same point, right? So,', 'tokens': [50670, 2314, 11, 550, 436, 11468, 366, 264, 912, 935, 11, 436, 486, 15584, 666, 264, 912, 935, 11, 558, 30, 407, 11, 50880], 'temperature': 0.0, 'avg_logprob': -0.12759137335624404, 'compression_ratio': 2.2088888888888887, 'no_speech_prob': 0.007319175638258457}, {'id': 81, 'seek': 71144, 'start': 721.7600000000001, 'end': 726.2800000000001, 'text': ' it cannot happen that there is an edge going from A to B and there is also an edge going from B to A,', 'tokens': [50880, 309, 2644, 1051, 300, 456, 307, 364, 4691, 516, 490, 316, 281, 363, 293, 456, 307, 611, 364, 4691, 516, 490, 363, 281, 316, 11, 51106], 'temperature': 0.0, 'avg_logprob': -0.12759137335624404, 'compression_ratio': 2.2088888888888887, 'no_speech_prob': 0.007319175638258457}, {'id': 82, 'seek': 71144, 'start': 726.2800000000001, 'end': 734.0400000000001, 'text': ' that is not possible, right? So, then what I can do is, I know that my edges can only flow in one', 'tokens': [51106, 300, 307, 406, 1944, 11, 558, 30, 407, 11, 550, 437, 286, 393, 360, 307, 11, 286, 458, 300, 452, 8819, 393, 787, 3095, 294, 472, 51494], 'temperature': 0.0, 'avg_logprob': -0.12759137335624404, 'compression_ratio': 2.2088888888888887, 'no_speech_prob': 0.007319175638258457}, {'id': 83, 'seek': 71144, 'start': 734.0400000000001, 'end': 739.84, 'text': ' direction, they cannot flow in the other direction, this is not possible, right? So, now if my edges', 'tokens': [51494, 3513, 11, 436, 2644, 3095, 294, 264, 661, 3513, 11, 341, 307, 406, 1944, 11, 558, 30, 407, 11, 586, 498, 452, 8819, 51784], 'temperature': 0.0, 'avg_logprob': -0.12759137335624404, 'compression_ratio': 2.2088888888888887, 'no_speech_prob': 0.007319175638258457}, {'id': 84, 'seek': 73984, 'start': 739.84, 'end': 746.6800000000001, 'text': ' flow in one direction, I can always lay my edges in a way that they all go down or they all go up,', 'tokens': [50364, 3095, 294, 472, 3513, 11, 286, 393, 1009, 2360, 452, 8819, 294, 257, 636, 300, 436, 439, 352, 760, 420, 436, 439, 352, 493, 11, 50706], 'temperature': 0.0, 'avg_logprob': -0.10345699550869229, 'compression_ratio': 1.8708133971291867, 'no_speech_prob': 0.024846285581588745}, {'id': 85, 'seek': 73984, 'start': 746.6800000000001, 'end': 754.0, 'text': ' I can do something like that, right? So, let us say I decide that all my arrows, I just line up my', 'tokens': [50706, 286, 393, 360, 746, 411, 300, 11, 558, 30, 407, 11, 718, 505, 584, 286, 4536, 300, 439, 452, 19669, 11, 286, 445, 1622, 493, 452, 51072], 'temperature': 0.0, 'avg_logprob': -0.10345699550869229, 'compression_ratio': 1.8708133971291867, 'no_speech_prob': 0.024846285581588745}, {'id': 86, 'seek': 73984, 'start': 754.0, 'end': 761.9200000000001, 'text': ' arrows in a way so that they all go down, right? So, in this case, or let us say I am trying to', 'tokens': [51072, 19669, 294, 257, 636, 370, 300, 436, 439, 352, 760, 11, 558, 30, 407, 11, 294, 341, 1389, 11, 420, 718, 505, 584, 286, 669, 1382, 281, 51468], 'temperature': 0.0, 'avg_logprob': -0.10345699550869229, 'compression_ratio': 1.8708133971291867, 'no_speech_prob': 0.024846285581588745}, {'id': 87, 'seek': 73984, 'start': 761.9200000000001, 'end': 767.2800000000001, 'text': ' use this particular thing, so let us try to make that all of them, so which one will be the right', 'tokens': [51468, 764, 341, 1729, 551, 11, 370, 718, 505, 853, 281, 652, 300, 439, 295, 552, 11, 370, 597, 472, 486, 312, 264, 558, 51736], 'temperature': 0.0, 'avg_logprob': -0.10345699550869229, 'compression_ratio': 1.8708133971291867, 'no_speech_prob': 0.024846285581588745}, {'id': 88, 'seek': 76728, 'start': 767.28, 'end': 776.16, 'text': ' direction? So, if I order them by less than equal to, so let us keep the lesser guy below, right?', 'tokens': [50364, 3513, 30, 407, 11, 498, 286, 1668, 552, 538, 1570, 813, 2681, 281, 11, 370, 718, 505, 1066, 264, 22043, 2146, 2507, 11, 558, 30, 50808], 'temperature': 0.0, 'avg_logprob': -0.13869987371313663, 'compression_ratio': 1.9274193548387097, 'no_speech_prob': 0.07326821982860565}, {'id': 89, 'seek': 76728, 'start': 776.16, 'end': 782.36, 'text': ' Just, I mean, just my way of putting it, it does not hurt anyway, right? So, because I want to,', 'tokens': [50808, 1449, 11, 286, 914, 11, 445, 452, 636, 295, 3372, 309, 11, 309, 775, 406, 4607, 4033, 11, 558, 30, 407, 11, 570, 286, 528, 281, 11, 51118], 'temperature': 0.0, 'avg_logprob': -0.13869987371313663, 'compression_ratio': 1.9274193548387097, 'no_speech_prob': 0.07326821982860565}, {'id': 90, 'seek': 76728, 'start': 782.36, 'end': 785.88, 'text': ' because there is semantic meaning to less than equal to, had it been some arbitrary relation,', 'tokens': [51118, 570, 456, 307, 47982, 3620, 281, 1570, 813, 2681, 281, 11, 632, 309, 668, 512, 23211, 9721, 11, 51294], 'temperature': 0.0, 'avg_logprob': -0.13869987371313663, 'compression_ratio': 1.9274193548387097, 'no_speech_prob': 0.07326821982860565}, {'id': 91, 'seek': 76728, 'start': 785.88, 'end': 790.04, 'text': ' I would not have bothered, right? But if it, because it is less than equal to, let us keep', 'tokens': [51294, 286, 576, 406, 362, 22996, 11, 558, 30, 583, 498, 309, 11, 570, 309, 307, 1570, 813, 2681, 281, 11, 718, 505, 1066, 51502], 'temperature': 0.0, 'avg_logprob': -0.13869987371313663, 'compression_ratio': 1.9274193548387097, 'no_speech_prob': 0.07326821982860565}, {'id': 92, 'seek': 76728, 'start': 790.04, 'end': 797.12, 'text': ' the lower element downwards, so the arrows go up, right? So, if there is a, if A is less than equal', 'tokens': [51502, 264, 3126, 4478, 39880, 11, 370, 264, 19669, 352, 493, 11, 558, 30, 407, 11, 498, 456, 307, 257, 11, 498, 316, 307, 1570, 813, 2681, 51856], 'temperature': 0.0, 'avg_logprob': -0.13869987371313663, 'compression_ratio': 1.9274193548387097, 'no_speech_prob': 0.07326821982860565}, {'id': 93, 'seek': 79712, 'start': 797.12, 'end': 803.24, 'text': ' to B, then I will put A below and I will put B upwards. So, all my arrows will only flow upwards,', 'tokens': [50364, 281, 363, 11, 550, 286, 486, 829, 316, 2507, 293, 286, 486, 829, 363, 22167, 13, 407, 11, 439, 452, 19669, 486, 787, 3095, 22167, 11, 50670], 'temperature': 0.0, 'avg_logprob': -0.09000695506228676, 'compression_ratio': 1.691860465116279, 'no_speech_prob': 0.001959430053830147}, {'id': 94, 'seek': 79712, 'start': 803.24, 'end': 814.92, 'text': ' right? Something like this. If all my arrows flow upwards, then what is the point of putting these', 'tokens': [50670, 558, 30, 6595, 411, 341, 13, 759, 439, 452, 19669, 3095, 22167, 11, 550, 437, 307, 264, 935, 295, 3372, 613, 51254], 'temperature': 0.0, 'avg_logprob': -0.09000695506228676, 'compression_ratio': 1.691860465116279, 'no_speech_prob': 0.001959430053830147}, {'id': 95, 'seek': 79712, 'start': 814.92, 'end': 822.88, 'text': ' arrowheads, right? Now, from a directed graph, I can reduce this thing to an undirected graph.', 'tokens': [51254, 11610, 29481, 11, 558, 30, 823, 11, 490, 257, 12898, 4295, 11, 286, 393, 5407, 341, 551, 281, 364, 674, 11890, 292, 4295, 13, 51652], 'temperature': 0.0, 'avg_logprob': -0.09000695506228676, 'compression_ratio': 1.691860465116279, 'no_speech_prob': 0.001959430053830147}, {'id': 96, 'seek': 82288, 'start': 822.88, 'end': 831.28, 'text': ' So, what have I done? I have used my reflexivity to get rid of self-loops, I have used asymmetry', 'tokens': [50364, 407, 11, 437, 362, 286, 1096, 30, 286, 362, 1143, 452, 23802, 4253, 281, 483, 3973, 295, 2698, 12, 752, 3370, 11, 286, 362, 1143, 37277, 9889, 50784], 'temperature': 0.0, 'avg_logprob': -0.20946591430240208, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.007921334356069565}, {'id': 97, 'seek': 82288, 'start': 831.28, 'end': 836.4, 'text': ' to get rid of direction, directed arrows and I have used transitivity to get rid of this', 'tokens': [50784, 281, 483, 3973, 295, 3513, 11, 12898, 19669, 293, 286, 362, 1143, 17976, 4253, 281, 483, 3973, 295, 341, 51040], 'temperature': 0.0, 'avg_logprob': -0.20946591430240208, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.007921334356069565}, {'id': 98, 'seek': 82288, 'start': 836.4, 'end': 844.08, 'text': ' rendered edges which I know sure exist because edges between sequence of nodes, right? So,', 'tokens': [51040, 28748, 8819, 597, 286, 458, 988, 2514, 570, 8819, 1296, 8310, 295, 13891, 11, 558, 30, 407, 11, 51424], 'temperature': 0.0, 'avg_logprob': -0.20946591430240208, 'compression_ratio': 1.6727272727272726, 'no_speech_prob': 0.007921334356069565}, {'id': 99, 'seek': 84408, 'start': 844.08, 'end': 856.64, 'text': ' this particular representation is known as a hash diagram, right? And now onwards,', 'tokens': [50364, 341, 1729, 10290, 307, 2570, 382, 257, 22019, 10686, 11, 558, 30, 400, 586, 34230, 11, 50992], 'temperature': 0.0, 'avg_logprob': -0.15931913127069888, 'compression_ratio': 1.4634146341463414, 'no_speech_prob': 0.011642525903880596}, {'id': 100, 'seek': 84408, 'start': 856.64, 'end': 865.96, 'text': ' we will forget everything else, we will only stare at hash diagrams, right? So, are we clear? So,', 'tokens': [50992, 321, 486, 2870, 1203, 1646, 11, 321, 486, 787, 22432, 412, 22019, 36709, 11, 558, 30, 407, 11, 366, 321, 1850, 30, 407, 11, 51458], 'temperature': 0.0, 'avg_logprob': -0.15931913127069888, 'compression_ratio': 1.4634146341463414, 'no_speech_prob': 0.011642525903880596}, {'id': 101, 'seek': 86596, 'start': 865.96, 'end': 874.12, 'text': ' what does it, what will it look like? I will have elements from the set, then we will have', 'tokens': [50364, 437, 775, 309, 11, 437, 486, 309, 574, 411, 30, 286, 486, 362, 4959, 490, 264, 992, 11, 550, 321, 486, 362, 50772], 'temperature': 0.0, 'avg_logprob': -0.12350913456508092, 'compression_ratio': 1.5, 'no_speech_prob': 0.009193009696900845}, {'id': 102, 'seek': 86596, 'start': 874.12, 'end': 889.64, 'text': ' edges between them and now can I say what the relation is? What is the relation on this set?', 'tokens': [50772, 8819, 1296, 552, 293, 586, 393, 286, 584, 437, 264, 9721, 307, 30, 708, 307, 264, 9721, 322, 341, 992, 30, 51548], 'temperature': 0.0, 'avg_logprob': -0.12350913456508092, 'compression_ratio': 1.5, 'no_speech_prob': 0.009193009696900845}, {'id': 103, 'seek': 88964, 'start': 889.64, 'end': 907.64, 'text': ' If I use this diagram now, can you describe the relation? So, S is my set which is A,', 'tokens': [50364, 759, 286, 764, 341, 10686, 586, 11, 393, 291, 6786, 264, 9721, 30, 407, 11, 318, 307, 452, 992, 597, 307, 316, 11, 51264], 'temperature': 0.0, 'avg_logprob': -0.14500446672792788, 'compression_ratio': 1.0240963855421688, 'no_speech_prob': 0.0653461366891861}, {'id': 104, 'seek': 90764, 'start': 907.64, 'end': 915.56, 'text': ' B, C, D, E and I have a relation less than equal to. So, then what is the relation?', 'tokens': [50364, 363, 11, 383, 11, 413, 11, 462, 293, 286, 362, 257, 9721, 1570, 813, 2681, 281, 13, 407, 11, 550, 437, 307, 264, 9721, 30, 50760], 'temperature': 0.0, 'avg_logprob': -0.1392467842727411, 'compression_ratio': 1.8736842105263158, 'no_speech_prob': 0.4031055271625519}, {'id': 105, 'seek': 90764, 'start': 915.56, 'end': 931.88, 'text': ' B is, A is less than equal to B, then C, A is less than equal to C, A is less than equal to D,', 'tokens': [50760, 363, 307, 11, 316, 307, 1570, 813, 2681, 281, 363, 11, 550, 383, 11, 316, 307, 1570, 813, 2681, 281, 383, 11, 316, 307, 1570, 813, 2681, 281, 413, 11, 51576], 'temperature': 0.0, 'avg_logprob': -0.1392467842727411, 'compression_ratio': 1.8736842105263158, 'no_speech_prob': 0.4031055271625519}, {'id': 106, 'seek': 93188, 'start': 931.88, 'end': 945.8, 'text': ' A is less than equal to E, exactly very good, E is less than equal to B. So, this A is less', 'tokens': [50364, 316, 307, 1570, 813, 2681, 281, 462, 11, 2293, 588, 665, 11, 462, 307, 1570, 813, 2681, 281, 363, 13, 407, 11, 341, 316, 307, 1570, 51060], 'temperature': 0.0, 'avg_logprob': -0.2287201621315696, 'compression_ratio': 1.525, 'no_speech_prob': 0.1105327233672142}, {'id': 107, 'seek': 93188, 'start': 945.8, 'end': 955.52, 'text': ' than equal to D, I got through transitivity, that edge was not even there. Yes, and now the', 'tokens': [51060, 813, 2681, 281, 413, 11, 286, 658, 807, 17976, 4253, 11, 300, 4691, 390, 406, 754, 456, 13, 1079, 11, 293, 586, 264, 51546], 'temperature': 0.0, 'avg_logprob': -0.2287201621315696, 'compression_ratio': 1.525, 'no_speech_prob': 0.1105327233672142}, {'id': 108, 'seek': 95552, 'start': 955.52, 'end': 960.68, 'text': ' reflexive relations, A is less than equal to A, B is less than equal to B and all this business,', 'tokens': [50364, 23802, 488, 2299, 11, 316, 307, 1570, 813, 2681, 281, 316, 11, 363, 307, 1570, 813, 2681, 281, 363, 293, 439, 341, 1606, 11, 50622], 'temperature': 0.0, 'avg_logprob': -0.19528084141867502, 'compression_ratio': 1.4328358208955223, 'no_speech_prob': 0.10018123686313629}, {'id': 109, 'seek': 95552, 'start': 960.68, 'end': 980.52, 'text': ' right? Clear? Okay. Now, the next definition is a definition of a chain. So, now in your poset,', 'tokens': [50622, 558, 30, 14993, 30, 1033, 13, 823, 11, 264, 958, 7123, 307, 257, 7123, 295, 257, 5021, 13, 407, 11, 586, 294, 428, 1366, 302, 11, 51614], 'temperature': 0.0, 'avg_logprob': -0.19528084141867502, 'compression_ratio': 1.4328358208955223, 'no_speech_prob': 0.10018123686313629}, {'id': 110, 'seek': 98052, 'start': 980.52, 'end': 986.8, 'text': ' so this what I had here was a partially ordered set because you can see that there is a relation', 'tokens': [50364, 370, 341, 437, 286, 632, 510, 390, 257, 18886, 8866, 992, 570, 291, 393, 536, 300, 456, 307, 257, 9721, 50678], 'temperature': 0.0, 'avg_logprob': -0.11621741244667455, 'compression_ratio': 1.78125, 'no_speech_prob': 0.12068898975849152}, {'id': 111, 'seek': 98052, 'start': 986.8, 'end': 992.24, 'text': ' between B and A, there is a relation between C and A, but there is no relation between B and C.', 'tokens': [50678, 1296, 363, 293, 316, 11, 456, 307, 257, 9721, 1296, 383, 293, 316, 11, 457, 456, 307, 572, 9721, 1296, 363, 293, 383, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.11621741244667455, 'compression_ratio': 1.78125, 'no_speech_prob': 0.12068898975849152}, {'id': 112, 'seek': 98052, 'start': 992.24, 'end': 1002.76, 'text': ' I cannot say which one is less than which one, right? So, that is why it is referred to as a', 'tokens': [50950, 286, 2644, 584, 597, 472, 307, 1570, 813, 597, 472, 11, 558, 30, 407, 11, 300, 307, 983, 309, 307, 10839, 281, 382, 257, 51476], 'temperature': 0.0, 'avg_logprob': -0.11621741244667455, 'compression_ratio': 1.78125, 'no_speech_prob': 0.12068898975849152}, {'id': 113, 'seek': 100276, 'start': 1002.76, 'end': 1011.3199999999999, 'text': ' partially ordered set because the relation holds, does not hold for any two arbitrary elements in', 'tokens': [50364, 18886, 8866, 992, 570, 264, 9721, 9190, 11, 775, 406, 1797, 337, 604, 732, 23211, 4959, 294, 50792], 'temperature': 0.0, 'avg_logprob': -0.15480514194654382, 'compression_ratio': 1.844155844155844, 'no_speech_prob': 0.21098989248275757}, {'id': 114, 'seek': 100276, 'start': 1011.3199999999999, 'end': 1017.92, 'text': ' the set, may or may not hold for any two arbitrary elements in the set, right? So, now the thing is', 'tokens': [50792, 264, 992, 11, 815, 420, 815, 406, 1797, 337, 604, 732, 23211, 4959, 294, 264, 992, 11, 558, 30, 407, 11, 586, 264, 551, 307, 51122], 'temperature': 0.0, 'avg_logprob': -0.15480514194654382, 'compression_ratio': 1.844155844155844, 'no_speech_prob': 0.21098989248275757}, {'id': 115, 'seek': 100276, 'start': 1017.92, 'end': 1022.4, 'text': ' that, so remember the example that I gave yesterday, so what is a totally ordered set?', 'tokens': [51122, 300, 11, 370, 1604, 264, 1365, 300, 286, 2729, 5186, 11, 370, 437, 307, 257, 3879, 8866, 992, 30, 51346], 'temperature': 0.0, 'avg_logprob': -0.15480514194654382, 'compression_ratio': 1.844155844155844, 'no_speech_prob': 0.21098989248275757}, {'id': 116, 'seek': 102240, 'start': 1022.4, 'end': 1036.56, 'text': ' If an element is related to every other element, right? And what is a partially ordered set? Of', 'tokens': [50364, 759, 364, 4478, 307, 4077, 281, 633, 661, 4478, 11, 558, 30, 400, 437, 307, 257, 18886, 8866, 992, 30, 2720, 51072], 'temperature': 0.0, 'avg_logprob': -0.22340157296922472, 'compression_ratio': 1.8, 'no_speech_prob': 0.04940154030919075}, {'id': 117, 'seek': 102240, 'start': 1036.56, 'end': 1044.24, 'text': ' course, where it is not related, it may or may not be related to the other set. So, of course,', 'tokens': [51072, 1164, 11, 689, 309, 307, 406, 4077, 11, 309, 815, 420, 815, 406, 312, 4077, 281, 264, 661, 992, 13, 407, 11, 295, 1164, 11, 51456], 'temperature': 0.0, 'avg_logprob': -0.22340157296922472, 'compression_ratio': 1.8, 'no_speech_prob': 0.04940154030919075}, {'id': 118, 'seek': 102240, 'start': 1044.24, 'end': 1050.84, 'text': ' a totally ordered set is a more constrained form of a partially ordered set. So, partial', 'tokens': [51456, 257, 3879, 8866, 992, 307, 257, 544, 38901, 1254, 295, 257, 18886, 8866, 992, 13, 407, 11, 14641, 51786], 'temperature': 0.0, 'avg_logprob': -0.22340157296922472, 'compression_ratio': 1.8, 'no_speech_prob': 0.04940154030919075}, {'id': 119, 'seek': 105084, 'start': 1050.84, 'end': 1056.04, 'text': ' ordered set is a more general thing. If it so happens that in the partially ordered set,', 'tokens': [50364, 8866, 992, 307, 257, 544, 2674, 551, 13, 759, 309, 370, 2314, 300, 294, 264, 18886, 8866, 992, 11, 50624], 'temperature': 0.0, 'avg_logprob': -0.16879541733685663, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016750192269682884}, {'id': 120, 'seek': 105084, 'start': 1056.04, 'end': 1060.0, 'text': ' there is a relation between everything, then becomes a totally ordered set, right?', 'tokens': [50624, 456, 307, 257, 9721, 1296, 1203, 11, 550, 3643, 257, 3879, 8866, 992, 11, 558, 30, 50822], 'temperature': 0.0, 'avg_logprob': -0.16879541733685663, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016750192269682884}, {'id': 121, 'seek': 105084, 'start': 1060.0, 'end': 1071.52, 'text': ' Okay, so now the next notion is of a chain. So, a set of elements in a poset which are totally', 'tokens': [50822, 1033, 11, 370, 586, 264, 958, 10710, 307, 295, 257, 5021, 13, 407, 11, 257, 992, 295, 4959, 294, 257, 1366, 302, 597, 366, 3879, 51398], 'temperature': 0.0, 'avg_logprob': -0.16879541733685663, 'compression_ratio': 1.5647058823529412, 'no_speech_prob': 0.016750192269682884}, {'id': 122, 'seek': 107152, 'start': 1071.52, 'end': 1081.36, 'text': ' ordered forms a chain. So, if I have a poset, let me keep it as S only. So, let us say I have', 'tokens': [50364, 8866, 6422, 257, 5021, 13, 407, 11, 498, 286, 362, 257, 1366, 302, 11, 718, 385, 1066, 309, 382, 318, 787, 13, 407, 11, 718, 505, 584, 286, 362, 50856], 'temperature': 0.0, 'avg_logprob': -0.12650088132438014, 'compression_ratio': 1.4732824427480915, 'no_speech_prob': 0.12558722496032715}, {'id': 123, 'seek': 107152, 'start': 1081.36, 'end': 1093.68, 'text': ' a poset S and let us say I extract out some subset X from it such that in X under the same relation', 'tokens': [50856, 257, 1366, 302, 318, 293, 718, 505, 584, 286, 8947, 484, 512, 25993, 1783, 490, 309, 1270, 300, 294, 1783, 833, 264, 912, 9721, 51472], 'temperature': 0.0, 'avg_logprob': -0.12650088132438014, 'compression_ratio': 1.4732824427480915, 'no_speech_prob': 0.12558722496032715}, {'id': 124, 'seek': 109368, 'start': 1093.68, 'end': 1100.28, 'text': ' less than equal to all my elements in X are ordered. So, X is totally ordered,', 'tokens': [50364, 1570, 813, 2681, 281, 439, 452, 4959, 294, 1783, 366, 8866, 13, 407, 11, 1783, 307, 3879, 8866, 11, 50694], 'temperature': 0.0, 'avg_logprob': -0.13286166191101073, 'compression_ratio': 1.3129770992366412, 'no_speech_prob': 0.21114952862262726}, {'id': 125, 'seek': 109368, 'start': 1100.28, 'end': 1122.24, 'text': ' then I will refer to X as a chain. Make sense? Some blank looks. If I am able to extract out,', 'tokens': [50694, 550, 286, 486, 2864, 281, 1783, 382, 257, 5021, 13, 4387, 2020, 30, 2188, 8247, 1542, 13, 759, 286, 669, 1075, 281, 8947, 484, 11, 51792], 'temperature': 0.0, 'avg_logprob': -0.13286166191101073, 'compression_ratio': 1.3129770992366412, 'no_speech_prob': 0.21114952862262726}, {'id': 126, 'seek': 112224, 'start': 1122.24, 'end': 1130.72, 'text': ' if I take a subset of elements from X from S and that subset turns out to be totally', 'tokens': [50364, 498, 286, 747, 257, 25993, 295, 4959, 490, 1783, 490, 318, 293, 300, 25993, 4523, 484, 281, 312, 3879, 50788], 'temperature': 0.0, 'avg_logprob': -0.11759657178606306, 'compression_ratio': 1.536144578313253, 'no_speech_prob': 0.003927039913833141}, {'id': 127, 'seek': 112224, 'start': 1130.72, 'end': 1135.52, 'text': ' ordered under the same relation, then I will refer to this X as a chain.', 'tokens': [50788, 8866, 833, 264, 912, 9721, 11, 550, 286, 486, 2864, 281, 341, 1783, 382, 257, 5021, 13, 51028], 'temperature': 0.0, 'avg_logprob': -0.11759657178606306, 'compression_ratio': 1.536144578313253, 'no_speech_prob': 0.003927039913833141}, {'id': 128, 'seek': 112224, 'start': 1135.52, 'end': 1149.68, 'text': ' So, the next definition is an anti-chain. It is the other way round. If I pick a subset out of my', 'tokens': [51028, 407, 11, 264, 958, 7123, 307, 364, 6061, 12, 11509, 13, 467, 307, 264, 661, 636, 3098, 13, 759, 286, 1888, 257, 25993, 484, 295, 452, 51736], 'temperature': 0.0, 'avg_logprob': -0.11759657178606306, 'compression_ratio': 1.536144578313253, 'no_speech_prob': 0.003927039913833141}, {'id': 129, 'seek': 114968, 'start': 1149.68, 'end': 1162.64, 'text': ' set and none of them are related to each other, then it becomes an anti-chain, right? Now,', 'tokens': [50364, 992, 293, 6022, 295, 552, 366, 4077, 281, 1184, 661, 11, 550, 309, 3643, 364, 6061, 12, 11509, 11, 558, 30, 823, 11, 51012], 'temperature': 0.0, 'avg_logprob': -0.11812643911324296, 'compression_ratio': 1.4210526315789473, 'no_speech_prob': 0.2005632519721985}, {'id': 130, 'seek': 114968, 'start': 1162.64, 'end': 1176.76, 'text': ' let us try to pick our older diagram. Let us look at this particular diagram and let us try to see', 'tokens': [51012, 718, 505, 853, 281, 1888, 527, 4906, 10686, 13, 961, 505, 574, 412, 341, 1729, 10686, 293, 718, 505, 853, 281, 536, 51718], 'temperature': 0.0, 'avg_logprob': -0.11812643911324296, 'compression_ratio': 1.4210526315789473, 'no_speech_prob': 0.2005632519721985}, {'id': 131, 'seek': 117676, 'start': 1176.76, 'end': 1190.48, 'text': ' can you give me a chain on this? Tell me which one is a chain? AD is a chain. Anything else?', 'tokens': [50364, 393, 291, 976, 385, 257, 5021, 322, 341, 30, 5115, 385, 597, 472, 307, 257, 5021, 30, 9135, 307, 257, 5021, 13, 11998, 1646, 30, 51050], 'temperature': 0.0, 'avg_logprob': -0.1713846485789229, 'compression_ratio': 1.6488095238095237, 'no_speech_prob': 0.15251410007476807}, {'id': 132, 'seek': 117676, 'start': 1190.48, 'end': 1200.24, 'text': ' AC is a chain. AB is a chain. So, see why it is called a chain? Because it is a chain. It is a', 'tokens': [51050, 8157, 307, 257, 5021, 13, 13838, 307, 257, 5021, 13, 407, 11, 536, 983, 309, 307, 1219, 257, 5021, 30, 1436, 309, 307, 257, 5021, 13, 467, 307, 257, 51538], 'temperature': 0.0, 'avg_logprob': -0.1713846485789229, 'compression_ratio': 1.6488095238095237, 'no_speech_prob': 0.15251410007476807}, {'id': 133, 'seek': 117676, 'start': 1200.24, 'end': 1204.76, 'text': ' sequence of elements, right? So, you can just follow the edges and whatever path you get,', 'tokens': [51538, 8310, 295, 4959, 11, 558, 30, 407, 11, 291, 393, 445, 1524, 264, 8819, 293, 2035, 3100, 291, 483, 11, 51764], 'temperature': 0.0, 'avg_logprob': -0.1713846485789229, 'compression_ratio': 1.6488095238095237, 'no_speech_prob': 0.15251410007476807}, {'id': 134, 'seek': 120476, 'start': 1204.76, 'end': 1209.68, 'text': ' if you can able to get a path, that is going to be a chain because every line is basically telling', 'tokens': [50364, 498, 291, 393, 1075, 281, 483, 257, 3100, 11, 300, 307, 516, 281, 312, 257, 5021, 570, 633, 1622, 307, 1936, 3585, 50610], 'temperature': 0.0, 'avg_logprob': -0.2510790391401811, 'compression_ratio': 1.8576923076923078, 'no_speech_prob': 0.08710212260484695}, {'id': 135, 'seek': 120476, 'start': 1209.68, 'end': 1216.68, 'text': ' your relation, right? But there is no other option. You will not be able to go in any other direction.', 'tokens': [50610, 428, 9721, 11, 558, 30, 583, 456, 307, 572, 661, 3614, 13, 509, 486, 406, 312, 1075, 281, 352, 294, 604, 661, 3513, 13, 50960], 'temperature': 0.0, 'avg_logprob': -0.2510790391401811, 'compression_ratio': 1.8576923076923078, 'no_speech_prob': 0.08710212260484695}, {'id': 136, 'seek': 120476, 'start': 1216.68, 'end': 1222.44, 'text': ' So, if there is an edge from that, either it will go upwards or it will not be there at all, right?', 'tokens': [50960, 407, 11, 498, 456, 307, 364, 4691, 490, 300, 11, 2139, 309, 486, 352, 22167, 420, 309, 486, 406, 312, 456, 412, 439, 11, 558, 30, 51248], 'temperature': 0.0, 'avg_logprob': -0.2510790391401811, 'compression_ratio': 1.8576923076923078, 'no_speech_prob': 0.08710212260484695}, {'id': 137, 'seek': 120476, 'start': 1222.44, 'end': 1230.52, 'text': ' So, there cannot be an edge between like it. Ha, there can be an edge maybe. I should. Ha,', 'tokens': [51248, 407, 11, 456, 2644, 312, 364, 4691, 1296, 411, 309, 13, 4064, 11, 456, 393, 312, 364, 4691, 1310, 13, 286, 820, 13, 4064, 11, 51652], 'temperature': 0.0, 'avg_logprob': -0.2510790391401811, 'compression_ratio': 1.8576923076923078, 'no_speech_prob': 0.08710212260484695}, {'id': 138, 'seek': 120476, 'start': 1230.52, 'end': 1234.6, 'text': ' you are right. Maybe that is a better thing to say. So, like for instance, if this was the', 'tokens': [51652, 291, 366, 558, 13, 2704, 300, 307, 257, 1101, 551, 281, 584, 13, 407, 11, 411, 337, 5197, 11, 498, 341, 390, 264, 51856], 'temperature': 0.0, 'avg_logprob': -0.2510790391401811, 'compression_ratio': 1.8576923076923078, 'no_speech_prob': 0.08710212260484695}, {'id': 139, 'seek': 123460, 'start': 1234.6, 'end': 1243.0, 'text': ' case, I cannot come to D. I have to keep on going upwards only, right? So, like something like this.', 'tokens': [50364, 1389, 11, 286, 2644, 808, 281, 413, 13, 286, 362, 281, 1066, 322, 516, 22167, 787, 11, 558, 30, 407, 11, 411, 746, 411, 341, 13, 50784], 'temperature': 0.0, 'avg_logprob': -0.12921525144028936, 'compression_ratio': 1.6741573033707866, 'no_speech_prob': 0.002098360564559698}, {'id': 140, 'seek': 123460, 'start': 1243.0, 'end': 1252.56, 'text': ' Now, I cannot say AC D is a chain, right? Why is that? Because in that set A and D are not related,', 'tokens': [50784, 823, 11, 286, 2644, 584, 8157, 413, 307, 257, 5021, 11, 558, 30, 1545, 307, 300, 30, 1436, 294, 300, 992, 316, 293, 413, 366, 406, 4077, 11, 51262], 'temperature': 0.0, 'avg_logprob': -0.12921525144028936, 'compression_ratio': 1.6741573033707866, 'no_speech_prob': 0.002098360564559698}, {'id': 141, 'seek': 123460, 'start': 1252.56, 'end': 1263.08, 'text': ' right? I know that C is greater than A. I know that C is greater than D. But there is no relation', 'tokens': [51262, 558, 30, 286, 458, 300, 383, 307, 5044, 813, 316, 13, 286, 458, 300, 383, 307, 5044, 813, 413, 13, 583, 456, 307, 572, 9721, 51788], 'temperature': 0.0, 'avg_logprob': -0.12921525144028936, 'compression_ratio': 1.6741573033707866, 'no_speech_prob': 0.002098360564559698}, {'id': 142, 'seek': 126308, 'start': 1263.08, 'end': 1274.72, 'text': ' between A and D. Oh, on this path, it becomes an alternative relation. Sorry, because there is a', 'tokens': [50364, 1296, 316, 293, 413, 13, 876, 11, 322, 341, 3100, 11, 309, 3643, 364, 8535, 9721, 13, 4919, 11, 570, 456, 307, 257, 50946], 'temperature': 0.0, 'avg_logprob': -0.32865594562731293, 'compression_ratio': 1.4338235294117647, 'no_speech_prob': 0.31866878271102905}, {'id': 143, 'seek': 126308, 'start': 1274.72, 'end': 1283.1599999999999, 'text': ' path like this. Right, right, right, right. So, I did not let us say, this edge is not even there,', 'tokens': [50946, 3100, 411, 341, 13, 1779, 11, 558, 11, 558, 11, 558, 13, 407, 11, 286, 630, 406, 718, 505, 584, 11, 341, 4691, 307, 406, 754, 456, 11, 51368], 'temperature': 0.0, 'avg_logprob': -0.32865594562731293, 'compression_ratio': 1.4338235294117647, 'no_speech_prob': 0.31866878271102905}, {'id': 144, 'seek': 128316, 'start': 1283.16, 'end': 1305.0, 'text': ' right? So, I cannot do this business. So, okay. The next thing is that is what is an anti-chain?', 'tokens': [50364, 558, 30, 407, 11, 286, 2644, 360, 341, 1606, 13, 407, 11, 1392, 13, 440, 958, 551, 307, 300, 307, 437, 307, 364, 6061, 12, 11509, 30, 51456], 'temperature': 0.0, 'avg_logprob': -0.19561884480137978, 'compression_ratio': 1.1162790697674418, 'no_speech_prob': 0.29515063762664795}, {'id': 145, 'seek': 130500, 'start': 1305.0, 'end': 1320.92, 'text': ' Can I get an anti-chain here? Or BCD, right? So, there is no relation between B and C. There is,', 'tokens': [50364, 1664, 286, 483, 364, 6061, 12, 11509, 510, 30, 1610, 14359, 35, 11, 558, 30, 407, 11, 456, 307, 572, 9721, 1296, 363, 293, 383, 13, 821, 307, 11, 51160], 'temperature': 0.0, 'avg_logprob': -0.20426482865304657, 'compression_ratio': 1.0666666666666667, 'no_speech_prob': 0.4566347599029541}, {'id': 146, 'seek': 132092, 'start': 1320.92, 'end': 1340.8400000000001, 'text': ' sorry, why did I take D? I am sorry. D was not there. BC and BFNE, okay. Yeah, so BFNE. BC and E,', 'tokens': [50364, 2597, 11, 983, 630, 286, 747, 413, 30, 286, 669, 2597, 13, 413, 390, 406, 456, 13, 14359, 293, 363, 37, 15988, 11, 1392, 13, 865, 11, 370, 363, 37, 15988, 13, 14359, 293, 462, 11, 51360], 'temperature': 0.0, 'avg_logprob': -0.39890730381011963, 'compression_ratio': 1.0898876404494382, 'no_speech_prob': 0.3838660418987274}, {'id': 147, 'seek': 134084, 'start': 1340.84, 'end': 1351.24, 'text': ' yeah, sure. Right. So, now, these are going to be anti-chains, right? So, it is slightly complicated.', 'tokens': [50364, 1338, 11, 988, 13, 1779, 13, 407, 11, 586, 11, 613, 366, 516, 281, 312, 6061, 12, 339, 2315, 11, 558, 30, 407, 11, 309, 307, 4748, 6179, 13, 50884], 'temperature': 0.0, 'avg_logprob': -0.1937595322018578, 'compression_ratio': 1.5555555555555556, 'no_speech_prob': 0.053044289350509644}, {'id': 148, 'seek': 134084, 'start': 1351.24, 'end': 1363.12, 'text': ' You have to make sure that some other relation does not creep in. So, the next thing is this', 'tokens': [50884, 509, 362, 281, 652, 988, 300, 512, 661, 9721, 775, 406, 9626, 294, 13, 407, 11, 264, 958, 551, 307, 341, 51478], 'temperature': 0.0, 'avg_logprob': -0.1937595322018578, 'compression_ratio': 1.5555555555555556, 'no_speech_prob': 0.053044289350509644}, {'id': 149, 'seek': 134084, 'start': 1363.12, 'end': 1368.76, 'text': ' notion of duality. Maybe I will come to it later, okay. So, now, then there is this notion of upper', 'tokens': [51478, 10710, 295, 11848, 507, 13, 2704, 286, 486, 808, 281, 309, 1780, 11, 1392, 13, 407, 11, 586, 11, 550, 456, 307, 341, 10710, 295, 6597, 51760], 'temperature': 0.0, 'avg_logprob': -0.1937595322018578, 'compression_ratio': 1.5555555555555556, 'no_speech_prob': 0.053044289350509644}, {'id': 150, 'seek': 136876, 'start': 1368.76, 'end': 1379.6, 'text': ' bound and lower bounds. So, if there are two elements, if there is a set of elements such', 'tokens': [50364, 5472, 293, 3126, 29905, 13, 407, 11, 498, 456, 366, 732, 4959, 11, 498, 456, 307, 257, 992, 295, 4959, 1270, 50906], 'temperature': 0.0, 'avg_logprob': -0.12608007482580236, 'compression_ratio': 1.688622754491018, 'no_speech_prob': 0.060116492211818695}, {'id': 151, 'seek': 136876, 'start': 1379.6, 'end': 1386.4, 'text': ' that in this set of elements, maybe they look like this, right? So, let us say in this set of elements,', 'tokens': [50906, 300, 294, 341, 992, 295, 4959, 11, 1310, 436, 574, 411, 341, 11, 558, 30, 407, 11, 718, 505, 584, 294, 341, 992, 295, 4959, 11, 51246], 'temperature': 0.0, 'avg_logprob': -0.12608007482580236, 'compression_ratio': 1.688622754491018, 'no_speech_prob': 0.060116492211818695}, {'id': 152, 'seek': 136876, 'start': 1386.4, 'end': 1395.52, 'text': ' if I can find one element which is greater than all of them, including itself of course,', 'tokens': [51246, 498, 286, 393, 915, 472, 4478, 597, 307, 5044, 813, 439, 295, 552, 11, 3009, 2564, 295, 1164, 11, 51702], 'temperature': 0.0, 'avg_logprob': -0.12608007482580236, 'compression_ratio': 1.688622754491018, 'no_speech_prob': 0.060116492211818695}, {'id': 153, 'seek': 139552, 'start': 1395.52, 'end': 1409.6, 'text': ' then I refer to this as the upper bound of this set, right? So, if I extract a subset out of my', 'tokens': [50364, 550, 286, 2864, 281, 341, 382, 264, 6597, 5472, 295, 341, 992, 11, 558, 30, 407, 11, 498, 286, 8947, 257, 25993, 484, 295, 452, 51068], 'temperature': 0.0, 'avg_logprob': -0.11865867508782281, 'compression_ratio': 1.7195121951219512, 'no_speech_prob': 0.0068204523995518684}, {'id': 154, 'seek': 139552, 'start': 1409.6, 'end': 1414.76, 'text': ' set and in that subset I am able to find one element which dominates everything else, which', 'tokens': [51068, 992, 293, 294, 300, 25993, 286, 669, 1075, 281, 915, 472, 4478, 597, 8859, 1024, 1203, 1646, 11, 597, 51326], 'temperature': 0.0, 'avg_logprob': -0.11865867508782281, 'compression_ratio': 1.7195121951219512, 'no_speech_prob': 0.0068204523995518684}, {'id': 155, 'seek': 139552, 'start': 1414.76, 'end': 1420.0, 'text': ' which is greater than everything else, then I say that element is the upper bound of that set.', 'tokens': [51326, 597, 307, 5044, 813, 1203, 1646, 11, 550, 286, 584, 300, 4478, 307, 264, 6597, 5472, 295, 300, 992, 13, 51588], 'temperature': 0.0, 'avg_logprob': -0.11865867508782281, 'compression_ratio': 1.7195121951219512, 'no_speech_prob': 0.0068204523995518684}, {'id': 156, 'seek': 142000, 'start': 1420.0, 'end': 1428.56, 'text': ' So, is it required that will always happen? Not really, right? Like for instance, you pick', 'tokens': [50364, 407, 11, 307, 309, 4739, 300, 486, 1009, 1051, 30, 1726, 534, 11, 558, 30, 1743, 337, 5197, 11, 291, 1888, 50792], 'temperature': 0.0, 'avg_logprob': -0.20593064764271612, 'compression_ratio': 1.5527426160337552, 'no_speech_prob': 0.04573199152946472}, {'id': 157, 'seek': 142000, 'start': 1428.56, 'end': 1432.52, 'text': ' an anti-chain, nothing is related to anybody. So, there is not going to be an upper bound', 'tokens': [50792, 364, 6061, 12, 11509, 11, 1825, 307, 4077, 281, 4472, 13, 407, 11, 456, 307, 406, 516, 281, 312, 364, 6597, 5472, 50990], 'temperature': 0.0, 'avg_logprob': -0.20593064764271612, 'compression_ratio': 1.5527426160337552, 'no_speech_prob': 0.04573199152946472}, {'id': 158, 'seek': 142000, 'start': 1432.52, 'end': 1440.08, 'text': ' anyway because you do not have a relation between them. What about a chain? Yes, because it is', 'tokens': [50990, 4033, 570, 291, 360, 406, 362, 257, 9721, 1296, 552, 13, 708, 466, 257, 5021, 30, 1079, 11, 570, 309, 307, 51368], 'temperature': 0.0, 'avg_logprob': -0.20593064764271612, 'compression_ratio': 1.5527426160337552, 'no_speech_prob': 0.04573199152946472}, {'id': 159, 'seek': 142000, 'start': 1440.08, 'end': 1444.16, 'text': ' always totally ordered. So, you can surely find somebody who is greater than everybody else,', 'tokens': [51368, 1009, 3879, 8866, 13, 407, 11, 291, 393, 11468, 915, 2618, 567, 307, 5044, 813, 2201, 1646, 11, 51572], 'temperature': 0.0, 'avg_logprob': -0.20593064764271612, 'compression_ratio': 1.5527426160337552, 'no_speech_prob': 0.04573199152946472}, {'id': 160, 'seek': 144416, 'start': 1444.16, 'end': 1454.8000000000002, 'text': ' because it is in a line like it is all going upwards and in that sequence. So, that is what', 'tokens': [50364, 570, 309, 307, 294, 257, 1622, 411, 309, 307, 439, 516, 22167, 293, 294, 300, 8310, 13, 407, 11, 300, 307, 437, 50896], 'temperature': 0.0, 'avg_logprob': -0.19529366147690924, 'compression_ratio': 1.6242774566473988, 'no_speech_prob': 0.09211347252130508}, {'id': 161, 'seek': 144416, 'start': 1454.8000000000002, 'end': 1461.8000000000002, 'text': ' is referred to as a upper bound and similarly I can define my lower bound which says that it is', 'tokens': [50896, 307, 10839, 281, 382, 257, 6597, 5472, 293, 14138, 286, 393, 6964, 452, 3126, 5472, 597, 1619, 300, 309, 307, 51246], 'temperature': 0.0, 'avg_logprob': -0.19529366147690924, 'compression_ratio': 1.6242774566473988, 'no_speech_prob': 0.09211347252130508}, {'id': 162, 'seek': 144416, 'start': 1461.8000000000002, 'end': 1466.3200000000002, 'text': ' the set of element, if there exists an element which is smaller than everything else, that is', 'tokens': [51246, 264, 992, 295, 4478, 11, 498, 456, 8198, 364, 4478, 597, 307, 4356, 813, 1203, 1646, 11, 300, 307, 51472], 'temperature': 0.0, 'avg_logprob': -0.19529366147690924, 'compression_ratio': 1.6242774566473988, 'no_speech_prob': 0.09211347252130508}, {'id': 163, 'seek': 146632, 'start': 1466.32, 'end': 1473.32, 'text': ' referred to as a lower bound. Then there is this notion of a lub or a least upper bound.', 'tokens': [50364, 10839, 281, 382, 257, 3126, 5472, 13, 1396, 456, 307, 341, 10710, 295, 257, 15980, 420, 257, 1935, 6597, 5472, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.16870183814061832, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.07939839363098145}, {'id': 164, 'seek': 146632, 'start': 1473.32, 'end': 1480.84, 'text': ' What is the least upper bound? So, it can happen that in a set there are multiple upper bounds,', 'tokens': [50714, 708, 307, 264, 1935, 6597, 5472, 30, 407, 11, 309, 393, 1051, 300, 294, 257, 992, 456, 366, 3866, 6597, 29905, 11, 51090], 'temperature': 0.0, 'avg_logprob': -0.16870183814061832, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.07939839363098145}, {'id': 165, 'seek': 146632, 'start': 1480.84, 'end': 1488.6799999999998, 'text': ' there are multiple elements which are. So, the upper bound need or need not be part of the set.', 'tokens': [51090, 456, 366, 3866, 4959, 597, 366, 13, 407, 11, 264, 6597, 5472, 643, 420, 643, 406, 312, 644, 295, 264, 992, 13, 51482], 'temperature': 0.0, 'avg_logprob': -0.16870183814061832, 'compression_ratio': 1.78343949044586, 'no_speech_prob': 0.07939839363098145}, {'id': 166, 'seek': 148868, 'start': 1488.68, 'end': 1500.4, 'text': ' So, I will maybe I will take better examples little later. So, now let us say this is my', 'tokens': [50364, 407, 11, 286, 486, 1310, 286, 486, 747, 1101, 5110, 707, 1780, 13, 407, 11, 586, 718, 505, 584, 341, 307, 452, 50950], 'temperature': 0.0, 'avg_logprob': -0.3207557384784405, 'compression_ratio': 1.1, 'no_speech_prob': 0.027484428137540817}, {'id': 167, 'seek': 150040, 'start': 1500.4, 'end': 1517.92, 'text': ' poset and I consider only these elements. So, for these set of elements which are the upper bounds?', 'tokens': [50364, 1366, 302, 293, 286, 1949, 787, 613, 4959, 13, 407, 11, 337, 613, 992, 295, 4959, 597, 366, 264, 6597, 29905, 30, 51240], 'temperature': 0.0, 'avg_logprob': -0.19195486949040338, 'compression_ratio': 1.1647058823529413, 'no_speech_prob': 0.13740012049674988}, {'id': 168, 'seek': 151792, 'start': 1517.92, 'end': 1535.88, 'text': ' This one is an upper bound. So, let us say a, b, c, d, e, f, g. So, b is an upper bound. So,', 'tokens': [50364, 639, 472, 307, 364, 6597, 5472, 13, 407, 11, 718, 505, 584, 257, 11, 272, 11, 269, 11, 274, 11, 308, 11, 283, 11, 290, 13, 407, 11, 272, 307, 364, 6597, 5472, 13, 407, 11, 51262], 'temperature': 0.0, 'avg_logprob': -0.14266369947746618, 'compression_ratio': 1.6545454545454545, 'no_speech_prob': 0.09844997525215149}, {'id': 169, 'seek': 151792, 'start': 1535.88, 'end': 1543.8400000000001, 'text': ' for all these elements b, e, f, and g, b is an upper bound, because b is an element which', 'tokens': [51262, 337, 439, 613, 4959, 272, 11, 308, 11, 283, 11, 293, 290, 11, 272, 307, 364, 6597, 5472, 11, 570, 272, 307, 364, 4478, 597, 51660], 'temperature': 0.0, 'avg_logprob': -0.14266369947746618, 'compression_ratio': 1.6545454545454545, 'no_speech_prob': 0.09844997525215149}, {'id': 170, 'seek': 154384, 'start': 1543.84, 'end': 1551.04, 'text': ' dominates everything else, it is greater than everything else. What about a? a is also an upper', 'tokens': [50364, 8859, 1024, 1203, 1646, 11, 309, 307, 5044, 813, 1203, 1646, 13, 708, 466, 257, 30, 257, 307, 611, 364, 6597, 50724], 'temperature': 0.0, 'avg_logprob': -0.1265707015991211, 'compression_ratio': 2.108108108108108, 'no_speech_prob': 0.20530590415000916}, {'id': 171, 'seek': 154384, 'start': 1551.04, 'end': 1559.56, 'text': ' bound, because a also is greater than d, greater than e, greater than f, greater than g. So,', 'tokens': [50724, 5472, 11, 570, 257, 611, 307, 5044, 813, 274, 11, 5044, 813, 308, 11, 5044, 813, 283, 11, 5044, 813, 290, 13, 407, 11, 51150], 'temperature': 0.0, 'avg_logprob': -0.1265707015991211, 'compression_ratio': 2.108108108108108, 'no_speech_prob': 0.20530590415000916}, {'id': 172, 'seek': 154384, 'start': 1559.56, 'end': 1564.9599999999998, 'text': ' it is possible that you can end up having multiple upper bounds. So, if you have multiple upper bounds,', 'tokens': [51150, 309, 307, 1944, 300, 291, 393, 917, 493, 1419, 3866, 6597, 29905, 13, 407, 11, 498, 291, 362, 3866, 6597, 29905, 11, 51420], 'temperature': 0.0, 'avg_logprob': -0.1265707015991211, 'compression_ratio': 2.108108108108108, 'no_speech_prob': 0.20530590415000916}, {'id': 173, 'seek': 154384, 'start': 1564.9599999999998, 'end': 1571.8, 'text': ' the question is that which of them is the least upper bound. So, which is the closest upper bound', 'tokens': [51420, 264, 1168, 307, 300, 597, 295, 552, 307, 264, 1935, 6597, 5472, 13, 407, 11, 597, 307, 264, 13699, 6597, 5472, 51762], 'temperature': 0.0, 'avg_logprob': -0.1265707015991211, 'compression_ratio': 2.108108108108108, 'no_speech_prob': 0.20530590415000916}, {'id': 174, 'seek': 157180, 'start': 1571.8, 'end': 1577.6399999999999, 'text': ' to the rest of the elements. So, in this case though we have a choice between a and b, b is', 'tokens': [50364, 281, 264, 1472, 295, 264, 4959, 13, 407, 11, 294, 341, 1389, 1673, 321, 362, 257, 3922, 1296, 257, 293, 272, 11, 272, 307, 50656], 'temperature': 0.0, 'avg_logprob': -0.15899224508376347, 'compression_ratio': 1.5966850828729282, 'no_speech_prob': 0.0292807724326849}, {'id': 175, 'seek': 157180, 'start': 1577.6399999999999, 'end': 1591.84, 'text': ' the least upper bound or lub. So, it also has a name called join. So, I will also refer to this', 'tokens': [50656, 264, 1935, 6597, 5472, 420, 287, 836, 13, 407, 11, 309, 611, 575, 257, 1315, 1219, 3917, 13, 407, 11, 286, 486, 611, 2864, 281, 341, 51366], 'temperature': 0.0, 'avg_logprob': -0.15899224508376347, 'compression_ratio': 1.5966850828729282, 'no_speech_prob': 0.0292807724326849}, {'id': 176, 'seek': 157180, 'start': 1591.84, 'end': 1597.84, 'text': ' as join or the lub, both of them are the same. It is denoted using this particular symbol, this cups.', 'tokens': [51366, 382, 3917, 420, 264, 287, 836, 11, 1293, 295, 552, 366, 264, 912, 13, 467, 307, 1441, 23325, 1228, 341, 1729, 5986, 11, 341, 13381, 13, 51666], 'temperature': 0.0, 'avg_logprob': -0.15899224508376347, 'compression_ratio': 1.5966850828729282, 'no_speech_prob': 0.0292807724326849}, {'id': 177, 'seek': 159784, 'start': 1597.84, 'end': 1609.3999999999999, 'text': ' Yeah, it is the relation is greater than equal to. So, this b could have been in this set also,', 'tokens': [50364, 865, 11, 309, 307, 264, 9721, 307, 5044, 813, 2681, 281, 13, 407, 11, 341, 272, 727, 362, 668, 294, 341, 992, 611, 11, 50942], 'temperature': 0.0, 'avg_logprob': -0.20143882648364916, 'compression_ratio': 1.715151515151515, 'no_speech_prob': 0.022750817239284515}, {'id': 178, 'seek': 159784, 'start': 1609.3999999999999, 'end': 1616.3999999999999, 'text': ' then also it would have been an upper bound. For instance, if this was the set, then also b is an', 'tokens': [50942, 550, 611, 309, 576, 362, 668, 364, 6597, 5472, 13, 1171, 5197, 11, 498, 341, 390, 264, 992, 11, 550, 611, 272, 307, 364, 51292], 'temperature': 0.0, 'avg_logprob': -0.20143882648364916, 'compression_ratio': 1.715151515151515, 'no_speech_prob': 0.022750817239284515}, {'id': 179, 'seek': 159784, 'start': 1616.3999999999999, 'end': 1621.9599999999998, 'text': ' upper bound. It need not be outside that set altogether, like outside the set of elements', 'tokens': [51292, 6597, 5472, 13, 467, 643, 406, 312, 2380, 300, 992, 19051, 11, 411, 2380, 264, 992, 295, 4959, 51570], 'temperature': 0.0, 'avg_logprob': -0.20143882648364916, 'compression_ratio': 1.715151515151515, 'no_speech_prob': 0.022750817239284515}, {'id': 180, 'seek': 162196, 'start': 1621.96, 'end': 1628.56, 'text': ' I am talking about. So, it may be possible that if you have a, so like I said anti chain,', 'tokens': [50364, 286, 669, 1417, 466, 13, 407, 11, 309, 815, 312, 1944, 300, 498, 291, 362, 257, 11, 370, 411, 286, 848, 6061, 5021, 11, 50694], 'temperature': 0.0, 'avg_logprob': -0.1776133518592984, 'compression_ratio': 2.0604395604395602, 'no_speech_prob': 0.33310768008232117}, {'id': 181, 'seek': 162196, 'start': 1628.56, 'end': 1634.28, 'text': ' anti chain it may, the anti chain may also have an upper bound, but the upper bound will not lie', 'tokens': [50694, 6061, 5021, 309, 815, 11, 264, 6061, 5021, 815, 611, 362, 364, 6597, 5472, 11, 457, 264, 6597, 5472, 486, 406, 4544, 50980], 'temperature': 0.0, 'avg_logprob': -0.1776133518592984, 'compression_ratio': 2.0604395604395602, 'no_speech_prob': 0.33310768008232117}, {'id': 182, 'seek': 162196, 'start': 1634.28, 'end': 1638.8400000000001, 'text': ' in that set. So, it is not required that upper bound or lower bound have to lie in that set,', 'tokens': [50980, 294, 300, 992, 13, 407, 11, 309, 307, 406, 4739, 300, 6597, 5472, 420, 3126, 5472, 362, 281, 4544, 294, 300, 992, 11, 51208], 'temperature': 0.0, 'avg_logprob': -0.1776133518592984, 'compression_ratio': 2.0604395604395602, 'no_speech_prob': 0.33310768008232117}, {'id': 183, 'seek': 162196, 'start': 1638.8400000000001, 'end': 1643.8400000000001, 'text': ' but they may or may not lie in that set. There may be some upper bound lying in that set or may', 'tokens': [51208, 457, 436, 815, 420, 815, 406, 4544, 294, 300, 992, 13, 821, 815, 312, 512, 6597, 5472, 8493, 294, 300, 992, 420, 815, 51458], 'temperature': 0.0, 'avg_logprob': -0.1776133518592984, 'compression_ratio': 2.0604395604395602, 'no_speech_prob': 0.33310768008232117}, {'id': 184, 'seek': 164384, 'start': 1643.84, 'end': 1657.72, 'text': ' not be there. So, now the next thing is the notion of, similar notion of something called', 'tokens': [50364, 406, 312, 456, 13, 407, 11, 586, 264, 958, 551, 307, 264, 10710, 295, 11, 2531, 10710, 295, 746, 1219, 51058], 'temperature': 0.0, 'avg_logprob': -0.1489589500427246, 'compression_ratio': 1.4634146341463414, 'no_speech_prob': 0.11208322644233704}, {'id': 185, 'seek': 164384, 'start': 1657.72, 'end': 1665.6799999999998, 'text': ' the greatest lower bound. So, similarly for these set of elements, like for D, E, B and G,', 'tokens': [51058, 264, 6636, 3126, 5472, 13, 407, 11, 14138, 337, 613, 992, 295, 4959, 11, 411, 337, 413, 11, 462, 11, 363, 293, 460, 11, 51456], 'temperature': 0.0, 'avg_logprob': -0.1489589500427246, 'compression_ratio': 1.4634146341463414, 'no_speech_prob': 0.11208322644233704}, {'id': 186, 'seek': 166568, 'start': 1665.68, 'end': 1676.4, 'text': ' does there exist a lower bound? Unfortunately, in this case there does not exist any lower bound,', 'tokens': [50364, 775, 456, 2514, 257, 3126, 5472, 30, 8590, 11, 294, 341, 1389, 456, 775, 406, 2514, 604, 3126, 5472, 11, 50900], 'temperature': 0.0, 'avg_logprob': -0.18509025338255328, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.004964417777955532}, {'id': 187, 'seek': 166568, 'start': 1676.4, 'end': 1683.4, 'text': ' right? But I can join them and then I can say, let us say x and then x becomes the lower bound,', 'tokens': [50900, 558, 30, 583, 286, 393, 3917, 552, 293, 550, 286, 393, 584, 11, 718, 505, 584, 2031, 293, 550, 2031, 3643, 264, 3126, 5472, 11, 51250], 'temperature': 0.0, 'avg_logprob': -0.18509025338255328, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.004964417777955532}, {'id': 188, 'seek': 166568, 'start': 1683.4, 'end': 1693.48, 'text': ' but then I can also have y and z, right? Then x, y and z are all lower bounds of these set of elements.', 'tokens': [51250, 457, 550, 286, 393, 611, 362, 288, 293, 710, 11, 558, 30, 1396, 2031, 11, 288, 293, 710, 366, 439, 3126, 29905, 295, 613, 992, 295, 4959, 13, 51754], 'temperature': 0.0, 'avg_logprob': -0.18509025338255328, 'compression_ratio': 1.7678571428571428, 'no_speech_prob': 0.004964417777955532}, {'id': 189, 'seek': 169348, 'start': 1693.48, 'end': 1702.3600000000001, 'text': ' Right? And now there is a notion of something known as the greatest lower bound. So,', 'tokens': [50364, 1779, 30, 400, 586, 456, 307, 257, 10710, 295, 746, 2570, 382, 264, 6636, 3126, 5472, 13, 407, 11, 50808], 'temperature': 0.0, 'avg_logprob': -0.1409062249319894, 'compression_ratio': 1.6582278481012658, 'no_speech_prob': 0.0043397038243710995}, {'id': 190, 'seek': 169348, 'start': 1702.3600000000001, 'end': 1711.2, 'text': ' among all these elements x is the greatest. So, then x is my greatest lower bound. Okay.', 'tokens': [50808, 3654, 439, 613, 4959, 2031, 307, 264, 6636, 13, 407, 11, 550, 2031, 307, 452, 6636, 3126, 5472, 13, 1033, 13, 51250], 'temperature': 0.0, 'avg_logprob': -0.1409062249319894, 'compression_ratio': 1.6582278481012658, 'no_speech_prob': 0.0043397038243710995}, {'id': 191, 'seek': 169348, 'start': 1711.2, 'end': 1720.84, 'text': ' So, consider this particular case. So, what are, what is the lower bounds of this set D,', 'tokens': [51250, 407, 11, 1949, 341, 1729, 1389, 13, 407, 11, 437, 366, 11, 437, 307, 264, 3126, 29905, 295, 341, 992, 413, 11, 51732], 'temperature': 0.0, 'avg_logprob': -0.1409062249319894, 'compression_ratio': 1.6582278481012658, 'no_speech_prob': 0.0043397038243710995}, {'id': 192, 'seek': 172084, 'start': 1720.8799999999999, 'end': 1733.24, 'text': ' E, F and G? x and y are both lower bounds of this particular, of this set. So,', 'tokens': [50366, 462, 11, 479, 293, 460, 30, 2031, 293, 288, 366, 1293, 3126, 29905, 295, 341, 1729, 11, 295, 341, 992, 13, 407, 11, 50984], 'temperature': 0.0, 'avg_logprob': -0.17717762554393096, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.010426373220980167}, {'id': 193, 'seek': 172084, 'start': 1733.24, 'end': 1741.6, 'text': ' does the greatest lower bound exist? No, because for the lower bounds these guys are not related', 'tokens': [50984, 775, 264, 6636, 3126, 5472, 2514, 30, 883, 11, 570, 337, 264, 3126, 29905, 613, 1074, 366, 406, 4077, 51402], 'temperature': 0.0, 'avg_logprob': -0.17717762554393096, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.010426373220980167}, {'id': 194, 'seek': 172084, 'start': 1741.6, 'end': 1746.32, 'text': ' in by themselves, right? Because these are not related, there does not exist a greatest', 'tokens': [51402, 294, 538, 2969, 11, 558, 30, 1436, 613, 366, 406, 4077, 11, 456, 775, 406, 2514, 257, 6636, 51638], 'temperature': 0.0, 'avg_logprob': -0.17717762554393096, 'compression_ratio': 1.6540880503144655, 'no_speech_prob': 0.010426373220980167}, {'id': 195, 'seek': 174632, 'start': 1746.32, 'end': 1753.12, 'text': ' lower bound. So, it is not necessary that you will surely the least upper bound or the greatest', 'tokens': [50364, 3126, 5472, 13, 407, 11, 309, 307, 406, 4818, 300, 291, 486, 11468, 264, 1935, 6597, 5472, 420, 264, 6636, 50704], 'temperature': 0.0, 'avg_logprob': -0.17753937665153952, 'compression_ratio': 1.4921875, 'no_speech_prob': 0.07283497601747513}, {'id': 196, 'seek': 174632, 'start': 1753.12, 'end': 1765.9199999999998, 'text': ' lower bound exist. Greatest, right? Or lowest. So, it has to be, two people cannot be greatest,', 'tokens': [50704, 3126, 5472, 2514, 13, 3769, 377, 11, 558, 30, 1610, 12437, 13, 407, 11, 309, 575, 281, 312, 11, 732, 561, 2644, 312, 6636, 11, 51344], 'temperature': 0.0, 'avg_logprob': -0.17753937665153952, 'compression_ratio': 1.4921875, 'no_speech_prob': 0.07283497601747513}, {'id': 197, 'seek': 176592, 'start': 1766.0800000000002, 'end': 1778.0800000000002, 'text': ' so yeah, has to be one. So, now there is notion of something called top. Now,', 'tokens': [50372, 370, 1338, 11, 575, 281, 312, 472, 13, 407, 11, 586, 456, 307, 10710, 295, 746, 1219, 1192, 13, 823, 11, 50972], 'temperature': 0.0, 'avg_logprob': -0.17523919908623947, 'compression_ratio': 1.6130952380952381, 'no_speech_prob': 0.007065736688673496}, {'id': 198, 'seek': 176592, 'start': 1778.0800000000002, 'end': 1787.0800000000002, 'text': ' if I take my whole set S and if I am able to get an element which is greater than every element in', 'tokens': [50972, 498, 286, 747, 452, 1379, 992, 318, 293, 498, 286, 669, 1075, 281, 483, 364, 4478, 597, 307, 5044, 813, 633, 4478, 294, 51422], 'temperature': 0.0, 'avg_logprob': -0.17523919908623947, 'compression_ratio': 1.6130952380952381, 'no_speech_prob': 0.007065736688673496}, {'id': 199, 'seek': 176592, 'start': 1787.0800000000002, 'end': 1791.8400000000001, 'text': ' this set, right? Now, consider the whole set of, not a subset of elements. Now, I consider the', 'tokens': [51422, 341, 992, 11, 558, 30, 823, 11, 1949, 264, 1379, 992, 295, 11, 406, 257, 25993, 295, 4959, 13, 823, 11, 286, 1949, 264, 51660], 'temperature': 0.0, 'avg_logprob': -0.17523919908623947, 'compression_ratio': 1.6130952380952381, 'no_speech_prob': 0.007065736688673496}, {'id': 200, 'seek': 179184, 'start': 1791.84, 'end': 1797.32, 'text': ' whole set of elements. In this set of elements I say that there exists an element which is greater', 'tokens': [50364, 1379, 992, 295, 4959, 13, 682, 341, 992, 295, 4959, 286, 584, 300, 456, 8198, 364, 4478, 597, 307, 5044, 50638], 'temperature': 0.0, 'avg_logprob': -0.17504217359754776, 'compression_ratio': 2.005586592178771, 'no_speech_prob': 0.01254914328455925}, {'id': 201, 'seek': 179184, 'start': 1797.32, 'end': 1804.28, 'text': ' than everybody else. That is referred to as the top element, top. Similarly, similarly there is', 'tokens': [50638, 813, 2201, 1646, 13, 663, 307, 10839, 281, 382, 264, 1192, 4478, 11, 1192, 13, 13157, 11, 14138, 456, 307, 50986], 'temperature': 0.0, 'avg_logprob': -0.17504217359754776, 'compression_ratio': 2.005586592178771, 'no_speech_prob': 0.01254914328455925}, {'id': 202, 'seek': 179184, 'start': 1804.28, 'end': 1809.9599999999998, 'text': ' bottom which says for this set if there is an element which is smaller than everybody else,', 'tokens': [50986, 2767, 597, 1619, 337, 341, 992, 498, 456, 307, 364, 4478, 597, 307, 4356, 813, 2201, 1646, 11, 51270], 'temperature': 0.0, 'avg_logprob': -0.17504217359754776, 'compression_ratio': 2.005586592178771, 'no_speech_prob': 0.01254914328455925}, {'id': 203, 'seek': 179184, 'start': 1809.9599999999998, 'end': 1814.6799999999998, 'text': ' then I refer to as bottom. So, this is denoted by t, this is denoted by,', 'tokens': [51270, 550, 286, 2864, 281, 382, 2767, 13, 407, 11, 341, 307, 1441, 23325, 538, 256, 11, 341, 307, 1441, 23325, 538, 11, 51506], 'temperature': 0.0, 'avg_logprob': -0.17504217359754776, 'compression_ratio': 2.005586592178771, 'no_speech_prob': 0.01254914328455925}, {'id': 204, 'seek': 181468, 'start': 1814.68, 'end': 1825.64, 'text': ' so upper bound is for an arbitrary set of elements. So, you have to say upper bound of', 'tokens': [50364, 370, 6597, 5472, 307, 337, 364, 23211, 992, 295, 4959, 13, 407, 11, 291, 362, 281, 584, 6597, 5472, 295, 50912], 'temperature': 0.0, 'avg_logprob': -0.2363086407001202, 'compression_ratio': 1.78, 'no_speech_prob': 0.12871398031711578}, {'id': 205, 'seek': 181468, 'start': 1825.64, 'end': 1835.3200000000002, 'text': ' which elements and top is the upper bound of all elements, rather the greatest upper bound for all', 'tokens': [50912, 597, 4959, 293, 1192, 307, 264, 6597, 5472, 295, 439, 4959, 11, 2831, 264, 6636, 6597, 5472, 337, 439, 51396], 'temperature': 0.0, 'avg_logprob': -0.2363086407001202, 'compression_ratio': 1.78, 'no_speech_prob': 0.12871398031711578}, {'id': 206, 'seek': 181468, 'start': 1835.3200000000002, 'end': 1841.44, 'text': ' elements, rather sorry not necessarily. It has to be, so essentially I am saying,', 'tokens': [51396, 4959, 11, 2831, 2597, 406, 4725, 13, 467, 575, 281, 312, 11, 370, 4476, 286, 669, 1566, 11, 51702], 'temperature': 0.0, 'avg_logprob': -0.2363086407001202, 'compression_ratio': 1.78, 'no_speech_prob': 0.12871398031711578}, {'id': 207, 'seek': 184144, 'start': 1841.44, 'end': 1845.52, 'text': ' so this is the element because it is the full set. There must be one element which is greater', 'tokens': [50364, 370, 341, 307, 264, 4478, 570, 309, 307, 264, 1577, 992, 13, 821, 1633, 312, 472, 4478, 597, 307, 5044, 50568], 'temperature': 0.0, 'avg_logprob': -0.20098633379549594, 'compression_ratio': 1.6145251396648044, 'no_speech_prob': 0.05020901560783386}, {'id': 208, 'seek': 184144, 'start': 1845.52, 'end': 1860.0800000000002, 'text': ' than all of them. That is my top. Top will be the greatest upper bound, but it is surely going to', 'tokens': [50568, 813, 439, 295, 552, 13, 663, 307, 452, 1192, 13, 8840, 486, 312, 264, 6636, 6597, 5472, 11, 457, 309, 307, 11468, 516, 281, 51296], 'temperature': 0.0, 'avg_logprob': -0.20098633379549594, 'compression_ratio': 1.6145251396648044, 'no_speech_prob': 0.05020901560783386}, {'id': 209, 'seek': 184144, 'start': 1860.0800000000002, 'end': 1868.1200000000001, 'text': ' be an upper bound also because I am considering all elements now, right? So, no, like think about', 'tokens': [51296, 312, 364, 6597, 5472, 611, 570, 286, 669, 8079, 439, 4959, 586, 11, 558, 30, 407, 11, 572, 11, 411, 519, 466, 51698], 'temperature': 0.0, 'avg_logprob': -0.20098633379549594, 'compression_ratio': 1.6145251396648044, 'no_speech_prob': 0.05020901560783386}, {'id': 210, 'seek': 186812, 'start': 1868.6399999999999, 'end': 1875.6, 'text': ' B and C. It can be an upper bound if, so if I considering these two can be candidates for', 'tokens': [50390, 363, 293, 383, 13, 467, 393, 312, 364, 6597, 5472, 498, 11, 370, 498, 286, 8079, 613, 732, 393, 312, 11255, 337, 50738], 'temperature': 0.0, 'avg_logprob': -0.19126554539329127, 'compression_ratio': 1.6369047619047619, 'no_speech_prob': 0.22475460171699524}, {'id': 211, 'seek': 186812, 'start': 1875.6, 'end': 1881.32, 'text': ' upper bound for this set. If my set is the whole set of things, then B, I mean it cannot be B', 'tokens': [50738, 6597, 5472, 337, 341, 992, 13, 759, 452, 992, 307, 264, 1379, 992, 295, 721, 11, 550, 363, 11, 286, 914, 309, 2644, 312, 363, 51024], 'temperature': 0.0, 'avg_logprob': -0.19126554539329127, 'compression_ratio': 1.6369047619047619, 'no_speech_prob': 0.22475460171699524}, {'id': 212, 'seek': 186812, 'start': 1881.32, 'end': 1889.3999999999999, 'text': ' anymore because I am considering top also, top itself also. So, top is not outside the set,', 'tokens': [51024, 3602, 570, 286, 669, 8079, 1192, 611, 11, 1192, 2564, 611, 13, 407, 11, 1192, 307, 406, 2380, 264, 992, 11, 51428], 'temperature': 0.0, 'avg_logprob': -0.19126554539329127, 'compression_ratio': 1.6369047619047619, 'no_speech_prob': 0.22475460171699524}, {'id': 213, 'seek': 188940, 'start': 1889.4, 'end': 1898.6000000000001, 'text': ' top is also part of the set. The top element is also part of the set. It is upper bound and', 'tokens': [50364, 1192, 307, 611, 644, 295, 264, 992, 13, 440, 1192, 4478, 307, 611, 644, 295, 264, 992, 13, 467, 307, 6597, 5472, 293, 50824], 'temperature': 0.0, 'avg_logprob': -0.17425066491831903, 'compression_ratio': 1.7889447236180904, 'no_speech_prob': 0.027369767427444458}, {'id': 214, 'seek': 188940, 'start': 1898.6000000000001, 'end': 1903.0, 'text': ' that upper bound has to be unique because I am saying there is only one element.', 'tokens': [50824, 300, 6597, 5472, 575, 281, 312, 3845, 570, 286, 669, 1566, 456, 307, 787, 472, 4478, 13, 51044], 'temperature': 0.0, 'avg_logprob': -0.17425066491831903, 'compression_ratio': 1.7889447236180904, 'no_speech_prob': 0.027369767427444458}, {'id': 215, 'seek': 188940, 'start': 1903.0, 'end': 1908.76, 'text': ' Greatest upper bound, so essentially top may not exist, that is a different matter. So,', 'tokens': [51044, 3769, 377, 6597, 5472, 11, 370, 4476, 1192, 815, 406, 2514, 11, 300, 307, 257, 819, 1871, 13, 407, 11, 51332], 'temperature': 0.0, 'avg_logprob': -0.17425066491831903, 'compression_ratio': 1.7889447236180904, 'no_speech_prob': 0.027369767427444458}, {'id': 216, 'seek': 188940, 'start': 1908.76, 'end': 1915.1200000000001, 'text': ' it can happen that there is like the whole set of elements are like this. Then there is no top,', 'tokens': [51332, 309, 393, 1051, 300, 456, 307, 411, 264, 1379, 992, 295, 4959, 366, 411, 341, 13, 1396, 456, 307, 572, 1192, 11, 51650], 'temperature': 0.0, 'avg_logprob': -0.17425066491831903, 'compression_ratio': 1.7889447236180904, 'no_speech_prob': 0.027369767427444458}, {'id': 217, 'seek': 191512, 'start': 1915.12, 'end': 1922.9199999999998, 'text': ' right? But the only way to get a top here is that if it is greater than everything else,', 'tokens': [50364, 558, 30, 583, 264, 787, 636, 281, 483, 257, 1192, 510, 307, 300, 498, 309, 307, 5044, 813, 1203, 1646, 11, 50754], 'temperature': 0.0, 'avg_logprob': -0.17447039816114637, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.015847019851207733}, {'id': 218, 'seek': 191512, 'start': 1922.9199999999998, 'end': 1928.9599999999998, 'text': ' right? So, in this case, if I take this whole set of things, then this is the upper bound.', 'tokens': [50754, 558, 30, 407, 11, 294, 341, 1389, 11, 498, 286, 747, 341, 1379, 992, 295, 721, 11, 550, 341, 307, 264, 6597, 5472, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.17447039816114637, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.015847019851207733}, {'id': 219, 'seek': 191512, 'start': 1928.9599999999998, 'end': 1933.6, 'text': ' The upper bound itself is a singleton set and of course it is also greatest upper bound.', 'tokens': [51056, 440, 6597, 5472, 2564, 307, 257, 1522, 14806, 992, 293, 295, 1164, 309, 307, 611, 6636, 6597, 5472, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.17447039816114637, 'compression_ratio': 1.6341463414634145, 'no_speech_prob': 0.015847019851207733}, {'id': 220, 'seek': 193360, 'start': 1933.6, 'end': 1951.24, 'text': ' The whole set, upper bound on the whole set. So, upper bounds we essentially needs a set,', 'tokens': [50364, 440, 1379, 992, 11, 6597, 5472, 322, 264, 1379, 992, 13, 407, 11, 6597, 29905, 321, 4476, 2203, 257, 992, 11, 51246], 'temperature': 0.0, 'avg_logprob': -0.14787540738544766, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.06903430819511414}, {'id': 221, 'seek': 193360, 'start': 1951.24, 'end': 1955.32, 'text': ' right? It needs a subset of this S and you say on this subset of this S,', 'tokens': [51246, 558, 30, 467, 2203, 257, 25993, 295, 341, 318, 293, 291, 584, 322, 341, 25993, 295, 341, 318, 11, 51450], 'temperature': 0.0, 'avg_logprob': -0.14787540738544766, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.06903430819511414}, {'id': 222, 'seek': 193360, 'start': 1955.32, 'end': 1959.1599999999999, 'text': ' which is the least upper bound or greatest upper bound or whatever it is.', 'tokens': [51450, 597, 307, 264, 1935, 6597, 5472, 420, 6636, 6597, 5472, 420, 2035, 309, 307, 13, 51642], 'temperature': 0.0, 'avg_logprob': -0.14787540738544766, 'compression_ratio': 1.7611940298507462, 'no_speech_prob': 0.06903430819511414}, {'id': 223, 'seek': 195916, 'start': 1959.16, 'end': 1965.48, 'text': ' Of course, of course, of course, because it is an upper bound for the whole set,', 'tokens': [50364, 2720, 1164, 11, 295, 1164, 11, 295, 1164, 11, 570, 309, 307, 364, 6597, 5472, 337, 264, 1379, 992, 11, 50680], 'temperature': 0.0, 'avg_logprob': -0.2302166072801612, 'compression_ratio': 1.9371069182389937, 'no_speech_prob': 0.211441770195961}, {'id': 224, 'seek': 195916, 'start': 1965.48, 'end': 1968.1200000000001, 'text': ' of course it is an upper bound on all the subsets.', 'tokens': [50680, 295, 1164, 309, 307, 364, 6597, 5472, 322, 439, 264, 2090, 1385, 13, 50812], 'temperature': 0.0, 'avg_logprob': -0.2302166072801612, 'compression_ratio': 1.9371069182389937, 'no_speech_prob': 0.211441770195961}, {'id': 225, 'seek': 195916, 'start': 1968.1200000000001, 'end': 1982.92, 'text': ' No, so essentially you have this, so you have this set of elements, right? So,', 'tokens': [50812, 883, 11, 370, 4476, 291, 362, 341, 11, 370, 291, 362, 341, 992, 295, 4959, 11, 558, 30, 407, 11, 51552], 'temperature': 0.0, 'avg_logprob': -0.2302166072801612, 'compression_ratio': 1.9371069182389937, 'no_speech_prob': 0.211441770195961}, {'id': 226, 'seek': 195916, 'start': 1982.92, 'end': 1988.72, 'text': ' on this set of elements you decide to, so you are, all you know is this set of elements. There is', 'tokens': [51552, 322, 341, 992, 295, 4959, 291, 4536, 281, 11, 370, 291, 366, 11, 439, 291, 458, 307, 341, 992, 295, 4959, 13, 821, 307, 51842], 'temperature': 0.0, 'avg_logprob': -0.2302166072801612, 'compression_ratio': 1.9371069182389937, 'no_speech_prob': 0.211441770195961}, {'id': 227, 'seek': 198872, 'start': 1988.72, 'end': 1992.28, 'text': ' nothing outside this set, right? You do not know what happens outside. You do not even care', 'tokens': [50364, 1825, 2380, 341, 992, 11, 558, 30, 509, 360, 406, 458, 437, 2314, 2380, 13, 509, 360, 406, 754, 1127, 50542], 'temperature': 0.0, 'avg_logprob': -0.16831843058268228, 'compression_ratio': 2.064516129032258, 'no_speech_prob': 0.012321190908551216}, {'id': 228, 'seek': 198872, 'start': 1992.28, 'end': 1997.96, 'text': ' about what happens outside this. On this set, particular set, you can take a subset say X and', 'tokens': [50542, 466, 437, 2314, 2380, 341, 13, 1282, 341, 992, 11, 1729, 992, 11, 291, 393, 747, 257, 25993, 584, 1783, 293, 50826], 'temperature': 0.0, 'avg_logprob': -0.16831843058268228, 'compression_ratio': 2.064516129032258, 'no_speech_prob': 0.012321190908551216}, {'id': 229, 'seek': 198872, 'start': 1997.96, 'end': 2007.64, 'text': ' then you can ask what is the upper bound of this subset X. Now, the upper bound of this subset X,', 'tokens': [50826, 550, 291, 393, 1029, 437, 307, 264, 6597, 5472, 295, 341, 25993, 1783, 13, 823, 11, 264, 6597, 5472, 295, 341, 25993, 1783, 11, 51310], 'temperature': 0.0, 'avg_logprob': -0.16831843058268228, 'compression_ratio': 2.064516129032258, 'no_speech_prob': 0.012321190908551216}, {'id': 230, 'seek': 198872, 'start': 2007.64, 'end': 2013.88, 'text': ' there may exist an upper bound of this right here or they may exist other upper bounds here as well,', 'tokens': [51310, 456, 815, 2514, 364, 6597, 5472, 295, 341, 558, 510, 420, 436, 815, 2514, 661, 6597, 29905, 510, 382, 731, 11, 51622], 'temperature': 0.0, 'avg_logprob': -0.16831843058268228, 'compression_ratio': 2.064516129032258, 'no_speech_prob': 0.012321190908551216}, {'id': 231, 'seek': 201388, 'start': 2013.88, 'end': 2023.24, 'text': ' right? But I will not go out of S itself, right? Yes, so you can ask what is the upper bound of', 'tokens': [50364, 558, 30, 583, 286, 486, 406, 352, 484, 295, 318, 2564, 11, 558, 30, 1079, 11, 370, 291, 393, 1029, 437, 307, 264, 6597, 5472, 295, 50832], 'temperature': 0.0, 'avg_logprob': -0.15482953699623667, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.013201520778238773}, {'id': 232, 'seek': 201388, 'start': 2023.24, 'end': 2030.24, 'text': ' this X which lies in S, right? So, S is all I care about. I do not care about anything outside', 'tokens': [50832, 341, 1783, 597, 9134, 294, 318, 11, 558, 30, 407, 11, 318, 307, 439, 286, 1127, 466, 13, 286, 360, 406, 1127, 466, 1340, 2380, 51182], 'temperature': 0.0, 'avg_logprob': -0.15482953699623667, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.013201520778238773}, {'id': 233, 'seek': 201388, 'start': 2030.24, 'end': 2040.3200000000002, 'text': ' S. Now, if my X becomes S, then my upper bound becomes my top and other, similarly my lower', 'tokens': [51182, 318, 13, 823, 11, 498, 452, 1783, 3643, 318, 11, 550, 452, 6597, 5472, 3643, 452, 1192, 293, 661, 11, 14138, 452, 3126, 51686], 'temperature': 0.0, 'avg_logprob': -0.15482953699623667, 'compression_ratio': 1.5161290322580645, 'no_speech_prob': 0.013201520778238773}, {'id': 234, 'seek': 204032, 'start': 2040.32, 'end': 2048.7999999999997, 'text': ' bound becomes my bottom. No, like for this particular case, so if I have A, B, C, D,', 'tokens': [50364, 5472, 3643, 452, 2767, 13, 883, 11, 411, 337, 341, 1729, 1389, 11, 370, 498, 286, 362, 316, 11, 363, 11, 383, 11, 413, 11, 50788], 'temperature': 0.0, 'avg_logprob': -0.10958707709061472, 'compression_ratio': 1.5865921787709498, 'no_speech_prob': 0.09295973926782608}, {'id': 235, 'seek': 204032, 'start': 2048.7999999999997, 'end': 2058.56, 'text': ' right? So, for this set, subset, so my set is this whole thing. A, B, C, D is my set S and this is', 'tokens': [50788, 558, 30, 407, 11, 337, 341, 992, 11, 25993, 11, 370, 452, 992, 307, 341, 1379, 551, 13, 316, 11, 363, 11, 383, 11, 413, 307, 452, 992, 318, 293, 341, 307, 51276], 'temperature': 0.0, 'avg_logprob': -0.10958707709061472, 'compression_ratio': 1.5865921787709498, 'no_speech_prob': 0.09295973926782608}, {'id': 236, 'seek': 204032, 'start': 2058.56, 'end': 2068.84, 'text': ' my set X on which I am querying for a upper bound. Do you see an upper bound for A, B? Yeah, it is C', 'tokens': [51276, 452, 992, 1783, 322, 597, 286, 669, 7083, 1840, 337, 257, 6597, 5472, 13, 1144, 291, 536, 364, 6597, 5472, 337, 316, 11, 363, 30, 865, 11, 309, 307, 383, 51790], 'temperature': 0.0, 'avg_logprob': -0.10958707709061472, 'compression_ratio': 1.5865921787709498, 'no_speech_prob': 0.09295973926782608}, {'id': 237, 'seek': 206884, 'start': 2068.84, 'end': 2077.52, 'text': ' or D, right? So, the upper bound need not lie in X, but it surely must lie in S because I only know', 'tokens': [50364, 420, 413, 11, 558, 30, 407, 11, 264, 6597, 5472, 643, 406, 4544, 294, 1783, 11, 457, 309, 11468, 1633, 4544, 294, 318, 570, 286, 787, 458, 50798], 'temperature': 0.0, 'avg_logprob': -0.1317828351801092, 'compression_ratio': 1.728813559322034, 'no_speech_prob': 0.011833037249743938}, {'id': 238, 'seek': 206884, 'start': 2077.52, 'end': 2084.88, 'text': ' about S. I do not know anything outside S, right? So, C and D are upper bounds of A and B. Similarly,', 'tokens': [50798, 466, 318, 13, 286, 360, 406, 458, 1340, 2380, 318, 11, 558, 30, 407, 11, 383, 293, 413, 366, 6597, 29905, 295, 316, 293, 363, 13, 13157, 11, 51166], 'temperature': 0.0, 'avg_logprob': -0.1317828351801092, 'compression_ratio': 1.728813559322034, 'no_speech_prob': 0.011833037249743938}, {'id': 239, 'seek': 206884, 'start': 2084.88, 'end': 2093.96, 'text': ' D is also an upper bound of A and B, but then there is no greatest upper bound, sorry least upper bound,', 'tokens': [51166, 413, 307, 611, 364, 6597, 5472, 295, 316, 293, 363, 11, 457, 550, 456, 307, 572, 6636, 6597, 5472, 11, 2597, 1935, 6597, 5472, 11, 51620], 'temperature': 0.0, 'avg_logprob': -0.1317828351801092, 'compression_ratio': 1.728813559322034, 'no_speech_prob': 0.011833037249743938}, {'id': 240, 'seek': 209396, 'start': 2093.96, 'end': 2100.88, 'text': ' right? Because I cannot say because these are not related. So, now I cannot say which of them is', 'tokens': [50364, 558, 30, 1436, 286, 2644, 584, 570, 613, 366, 406, 4077, 13, 407, 11, 586, 286, 2644, 584, 597, 295, 552, 307, 50710], 'temperature': 0.0, 'avg_logprob': -0.15171324240194783, 'compression_ratio': 1.75, 'no_speech_prob': 0.008815987035632133}, {'id': 241, 'seek': 209396, 'start': 2100.88, 'end': 2108.2400000000002, 'text': ' least, right? Least has to be unique element, right? It has to be singleton set. So, that is the issue,', 'tokens': [50710, 1935, 11, 558, 30, 1456, 525, 575, 281, 312, 3845, 4478, 11, 558, 30, 467, 575, 281, 312, 1522, 14806, 992, 13, 407, 11, 300, 307, 264, 2734, 11, 51078], 'temperature': 0.0, 'avg_logprob': -0.15171324240194783, 'compression_ratio': 1.75, 'no_speech_prob': 0.008815987035632133}, {'id': 242, 'seek': 209396, 'start': 2108.2400000000002, 'end': 2114.32, 'text': ' but it could be possible that this D is not there, but then I have something is top of, yeah,', 'tokens': [51078, 457, 309, 727, 312, 1944, 300, 341, 413, 307, 406, 456, 11, 457, 550, 286, 362, 746, 307, 1192, 295, 11, 1338, 11, 51382], 'temperature': 0.0, 'avg_logprob': -0.15171324240194783, 'compression_ratio': 1.75, 'no_speech_prob': 0.008815987035632133}, {'id': 243, 'seek': 209396, 'start': 2114.32, 'end': 2121.36, 'text': ' I have something related to C, right? So, maybe like this also E and F. So, had D not been there,', 'tokens': [51382, 286, 362, 746, 4077, 281, 383, 11, 558, 30, 407, 11, 1310, 411, 341, 611, 462, 293, 479, 13, 407, 11, 632, 413, 406, 668, 456, 11, 51734], 'temperature': 0.0, 'avg_logprob': -0.15171324240194783, 'compression_ratio': 1.75, 'no_speech_prob': 0.008815987035632133}, {'id': 244, 'seek': 212136, 'start': 2121.36, 'end': 2129.88, 'text': ' let us say D is not there. So, let us say D is not there, the structure is like this, then my C,', 'tokens': [50364, 718, 505, 584, 413, 307, 406, 456, 13, 407, 11, 718, 505, 584, 413, 307, 406, 456, 11, 264, 3877, 307, 411, 341, 11, 550, 452, 383, 11, 50790], 'temperature': 0.0, 'avg_logprob': -0.12327891220281154, 'compression_ratio': 1.6375, 'no_speech_prob': 0.023578885942697525}, {'id': 245, 'seek': 212136, 'start': 2129.88, 'end': 2136.7200000000003, 'text': ' F and E are all upper bounds, right? And my C is my least upper bound.', 'tokens': [50790, 479, 293, 462, 366, 439, 6597, 29905, 11, 558, 30, 400, 452, 383, 307, 452, 1935, 6597, 5472, 13, 51132], 'temperature': 0.0, 'avg_logprob': -0.12327891220281154, 'compression_ratio': 1.6375, 'no_speech_prob': 0.023578885942697525}, {'id': 246, 'seek': 212136, 'start': 2136.7200000000003, 'end': 2149.08, 'text': ' Upper bound can be a part of X as well. So, it can be the case that A and B were also related,', 'tokens': [51132, 36926, 5472, 393, 312, 257, 644, 295, 1783, 382, 731, 13, 407, 11, 309, 393, 312, 264, 1389, 300, 316, 293, 363, 645, 611, 4077, 11, 51750], 'temperature': 0.0, 'avg_logprob': -0.12327891220281154, 'compression_ratio': 1.6375, 'no_speech_prob': 0.023578885942697525}, {'id': 247, 'seek': 214908, 'start': 2149.08, 'end': 2154.36, 'text': ' right? In that case A becomes upper bound or whichever you see the, I do not know,', 'tokens': [50364, 558, 30, 682, 300, 1389, 316, 3643, 6597, 5472, 420, 24123, 291, 536, 264, 11, 286, 360, 406, 458, 11, 50628], 'temperature': 0.0, 'avg_logprob': -0.2154830906489124, 'compression_ratio': 1.5617283950617284, 'no_speech_prob': 0.011309731751680374}, {'id': 248, 'seek': 214908, 'start': 2154.36, 'end': 2160.88, 'text': ' what does it look like? So, which way the arrow goes? So, I see slight tilt towards A. So,', 'tokens': [50628, 437, 775, 309, 574, 411, 30, 407, 11, 597, 636, 264, 11610, 1709, 30, 407, 11, 286, 536, 4036, 18446, 3030, 316, 13, 407, 11, 50954], 'temperature': 0.0, 'avg_logprob': -0.2154830906489124, 'compression_ratio': 1.5617283950617284, 'no_speech_prob': 0.011309731751680374}, {'id': 249, 'seek': 214908, 'start': 2160.88, 'end': 2167.2, 'text': ' in that case I will say A is a upper bound and also the least upper bound, yes.', 'tokens': [50954, 294, 300, 1389, 286, 486, 584, 316, 307, 257, 6597, 5472, 293, 611, 264, 1935, 6597, 5472, 11, 2086, 13, 51270], 'temperature': 0.0, 'avg_logprob': -0.2154830906489124, 'compression_ratio': 1.5617283950617284, 'no_speech_prob': 0.011309731751680374}, {'id': 250, 'seek': 216720, 'start': 2167.2, 'end': 2183.52, 'text': ' So, are we good? Any questions here? So, lot of definitions and sorry if tomorrow,', 'tokens': [50364, 407, 11, 366, 321, 665, 30, 2639, 1651, 510, 30, 407, 11, 688, 295, 21988, 293, 2597, 498, 4153, 11, 51180], 'temperature': 0.0, 'avg_logprob': -0.21308143322284406, 'compression_ratio': 1.5163398692810457, 'no_speech_prob': 0.016905372962355614}, {'id': 251, 'seek': 216720, 'start': 2183.52, 'end': 2185.96, 'text': ' today there will be lot of definitions, but we have to.', 'tokens': [51180, 965, 456, 486, 312, 688, 295, 21988, 11, 457, 321, 362, 281, 13, 51302], 'temperature': 0.0, 'avg_logprob': -0.21308143322284406, 'compression_ratio': 1.5163398692810457, 'no_speech_prob': 0.016905372962355614}, {'id': 252, 'seek': 216720, 'start': 2185.96, 'end': 2196.3199999999997, 'text': ' Yes, yes, yes. So, first we can calculate the upper bounds and then I can just see is there a', 'tokens': [51302, 1079, 11, 2086, 11, 2086, 13, 407, 11, 700, 321, 393, 8873, 264, 6597, 29905, 293, 550, 286, 393, 445, 536, 307, 456, 257, 51820], 'temperature': 0.0, 'avg_logprob': -0.21308143322284406, 'compression_ratio': 1.5163398692810457, 'no_speech_prob': 0.016905372962355614}, {'id': 253, 'seek': 219632, 'start': 2196.32, 'end': 2206.52, 'text': ' least element? If I find one, I will say that is the least upper bound. So, the next definition', 'tokens': [50364, 1935, 4478, 30, 759, 286, 915, 472, 11, 286, 486, 584, 300, 307, 264, 1935, 6597, 5472, 13, 407, 11, 264, 958, 7123, 50874], 'temperature': 0.0, 'avg_logprob': -0.14426620801289877, 'compression_ratio': 1.7610062893081762, 'no_speech_prob': 0.01493059005588293}, {'id': 254, 'seek': 219632, 'start': 2206.52, 'end': 2212.84, 'text': ' is for something known as a lattice. So, what is a lattice? A lattice is a poset, a partially', 'tokens': [50874, 307, 337, 746, 2570, 382, 257, 34011, 13, 407, 11, 437, 307, 257, 34011, 30, 316, 34011, 307, 257, 1366, 302, 11, 257, 18886, 51190], 'temperature': 0.0, 'avg_logprob': -0.14426620801289877, 'compression_ratio': 1.7610062893081762, 'no_speech_prob': 0.01493059005588293}, {'id': 255, 'seek': 219632, 'start': 2212.84, 'end': 2222.52, 'text': ' ordered set where all the least upper bounds, so where there exists least upper bounds and', 'tokens': [51190, 8866, 992, 689, 439, 264, 1935, 6597, 29905, 11, 370, 689, 456, 8198, 1935, 6597, 29905, 293, 51674], 'temperature': 0.0, 'avg_logprob': -0.14426620801289877, 'compression_ratio': 1.7610062893081762, 'no_speech_prob': 0.01493059005588293}, {'id': 256, 'seek': 222252, 'start': 2222.52, 'end': 2232.6, 'text': ' greatest lower bounds for all non-empty finite subsets, right? So, now in my set S, if I select', 'tokens': [50364, 6636, 3126, 29905, 337, 439, 2107, 12, 4543, 88, 19362, 2090, 1385, 11, 558, 30, 407, 11, 586, 294, 452, 992, 318, 11, 498, 286, 3048, 50868], 'temperature': 0.0, 'avg_logprob': -0.11949575087603401, 'compression_ratio': 1.5336787564766838, 'no_speech_prob': 0.128771111369133}, {'id': 257, 'seek': 222252, 'start': 2232.6, 'end': 2243.6, 'text': ' any non-empty finite subset X, I am sure I will be able to get one LUB and one GLB. It will surely', 'tokens': [50868, 604, 2107, 12, 4543, 88, 19362, 25993, 1783, 11, 286, 669, 988, 286, 486, 312, 1075, 281, 483, 472, 441, 23553, 293, 472, 16225, 33, 13, 467, 486, 11468, 51418], 'temperature': 0.0, 'avg_logprob': -0.11949575087603401, 'compression_ratio': 1.5336787564766838, 'no_speech_prob': 0.128771111369133}, {'id': 258, 'seek': 222252, 'start': 2243.6, 'end': 2250.6, 'text': ' exist. So, it basically constrains on the structure of my hash diagrams. My hash diagram will be such', 'tokens': [51418, 2514, 13, 407, 11, 309, 1936, 11525, 1292, 322, 264, 3877, 295, 452, 22019, 36709, 13, 1222, 22019, 10686, 486, 312, 1270, 51768], 'temperature': 0.0, 'avg_logprob': -0.11949575087603401, 'compression_ratio': 1.5336787564766838, 'no_speech_prob': 0.128771111369133}, {'id': 259, 'seek': 225060, 'start': 2250.6, 'end': 2256.24, 'text': ' that that is no matter which particular subset of elements I pick, I will always be able to find', 'tokens': [50364, 300, 300, 307, 572, 1871, 597, 1729, 25993, 295, 4959, 286, 1888, 11, 286, 486, 1009, 312, 1075, 281, 915, 50646], 'temperature': 0.0, 'avg_logprob': -0.15909491844897, 'compression_ratio': 1.3450704225352113, 'no_speech_prob': 0.04805898293852806}, {'id': 260, 'seek': 225060, 'start': 2256.24, 'end': 2272.56, 'text': ' a LUB and a GLB, right? So, does it also mean that there always will also be a top and bottom?', 'tokens': [50646, 257, 441, 23553, 293, 257, 16225, 33, 11, 558, 30, 407, 11, 775, 309, 611, 914, 300, 456, 1009, 486, 611, 312, 257, 1192, 293, 2767, 30, 51462], 'temperature': 0.0, 'avg_logprob': -0.15909491844897, 'compression_ratio': 1.3450704225352113, 'no_speech_prob': 0.04805898293852806}, {'id': 261, 'seek': 227256, 'start': 2272.56, 'end': 2281.16, 'text': ' Yeah, I can take the whole set S, right? And then I can ask what, because it is a whole set S,', 'tokens': [50364, 865, 11, 286, 393, 747, 264, 1379, 992, 318, 11, 558, 30, 400, 550, 286, 393, 1029, 437, 11, 570, 309, 307, 257, 1379, 992, 318, 11, 50794], 'temperature': 0.0, 'avg_logprob': -0.18629496097564696, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.02288973517715931}, {'id': 262, 'seek': 227256, 'start': 2281.16, 'end': 2287.88, 'text': ' it is I can ask what is LUB and GLB for it and those will correspond to the top and bottom. So,', 'tokens': [50794, 309, 307, 286, 393, 1029, 437, 307, 441, 23553, 293, 16225, 33, 337, 309, 293, 729, 486, 6805, 281, 264, 1192, 293, 2767, 13, 407, 11, 51130], 'temperature': 0.0, 'avg_logprob': -0.18629496097564696, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.02288973517715931}, {'id': 263, 'seek': 227256, 'start': 2287.88, 'end': 2295.64, 'text': ' my set of elements for which I will always be able to find the join and meet for any', 'tokens': [51130, 452, 992, 295, 4959, 337, 597, 286, 486, 1009, 312, 1075, 281, 915, 264, 3917, 293, 1677, 337, 604, 51518], 'temperature': 0.0, 'avg_logprob': -0.18629496097564696, 'compression_ratio': 1.5804597701149425, 'no_speech_prob': 0.02288973517715931}, {'id': 264, 'seek': 229564, 'start': 2295.7999999999997, 'end': 2304.16, 'text': ' arbitrary subsets is referred to as a lattice, right? It is a pretty strict structure on the', 'tokens': [50372, 23211, 2090, 1385, 307, 10839, 281, 382, 257, 34011, 11, 558, 30, 467, 307, 257, 1238, 10910, 3877, 322, 264, 50790], 'temperature': 0.0, 'avg_logprob': -0.13870142547177597, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.2384435087442398}, {'id': 265, 'seek': 229564, 'start': 2304.16, 'end': 2312.64, 'text': ' sets that you can have, right? Sets and the relation that you have. So, there is also notion', 'tokens': [50790, 6352, 300, 291, 393, 362, 11, 558, 30, 318, 1385, 293, 264, 9721, 300, 291, 362, 13, 407, 11, 456, 307, 611, 10710, 51214], 'temperature': 0.0, 'avg_logprob': -0.13870142547177597, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.2384435087442398}, {'id': 266, 'seek': 229564, 'start': 2312.64, 'end': 2319.2, 'text': ' of a complete lattice. A complete lattice says a lattice in which all subsets have both a meet', 'tokens': [51214, 295, 257, 3566, 34011, 13, 316, 3566, 34011, 1619, 257, 34011, 294, 597, 439, 2090, 1385, 362, 1293, 257, 1677, 51542], 'temperature': 0.0, 'avg_logprob': -0.13870142547177597, 'compression_ratio': 1.6666666666666667, 'no_speech_prob': 0.2384435087442398}, {'id': 267, 'seek': 231920, 'start': 2319.2, 'end': 2328.72, 'text': ' and a join or a LUB and a GLB. So, here I do not even care about finiteness. It becomes little', 'tokens': [50364, 293, 257, 3917, 420, 257, 441, 23553, 293, 257, 16225, 33, 13, 407, 11, 510, 286, 360, 406, 754, 1127, 466, 962, 6009, 442, 13, 467, 3643, 707, 50840], 'temperature': 0.0, 'avg_logprob': -0.14196583320354594, 'compression_ratio': 1.3617021276595744, 'no_speech_prob': 0.02150830253958702}, {'id': 268, 'seek': 231920, 'start': 2328.72, 'end': 2337.68, 'text': ' weird. So, I am saying if I even take an infinite subset of elements, even then I will be able to', 'tokens': [50840, 3657, 13, 407, 11, 286, 669, 1566, 498, 286, 754, 747, 364, 13785, 25993, 295, 4959, 11, 754, 550, 286, 486, 312, 1075, 281, 51288], 'temperature': 0.0, 'avg_logprob': -0.14196583320354594, 'compression_ratio': 1.3617021276595744, 'no_speech_prob': 0.02150830253958702}, {'id': 269, 'seek': 233768, 'start': 2337.68, 'end': 2358.9199999999996, 'text': ' compute an upper bound and lower bound, right? Hey, you are cheating. That is actually a partially', 'tokens': [50364, 14722, 364, 6597, 5472, 293, 3126, 5472, 11, 558, 30, 1911, 11, 291, 366, 18309, 13, 663, 307, 767, 257, 18886, 51426], 'temperature': 0.0, 'avg_logprob': -0.28376522064208987, 'compression_ratio': 1.1264367816091954, 'no_speech_prob': 0.16182683408260345}, {'id': 270, 'seek': 235892, 'start': 2359.92, 'end': 2376.32, 'text': ' ordered set. So, show me a proper poset and then give me an answer. No, but yeah, so no, but there is a small problem,', 'tokens': [50414, 8866, 992, 13, 407, 11, 855, 385, 257, 2296, 1366, 302, 293, 550, 976, 385, 364, 1867, 13, 883, 11, 457, 1338, 11, 370, 572, 11, 457, 456, 307, 257, 1359, 1154, 11, 51234], 'temperature': 0.0, 'avg_logprob': -0.27265703678131104, 'compression_ratio': 1.4155844155844155, 'no_speech_prob': 0.05917816609144211}, {'id': 271, 'seek': 235892, 'start': 2376.32, 'end': 2385.84, 'text': ' right? So, even in this particular set, all my let us say all my integers, then if I take the whole', 'tokens': [51234, 558, 30, 407, 11, 754, 294, 341, 1729, 992, 11, 439, 452, 718, 505, 584, 439, 452, 41674, 11, 550, 498, 286, 747, 264, 1379, 51710], 'temperature': 0.0, 'avg_logprob': -0.27265703678131104, 'compression_ratio': 1.4155844155844155, 'no_speech_prob': 0.05917816609144211}, {'id': 272, 'seek': 238584, 'start': 2385.84, 'end': 2393.4, 'text': ' set of integers, then what is my greatest upper bound and least upper bound and greatest lower bound?', 'tokens': [50364, 992, 295, 41674, 11, 550, 437, 307, 452, 6636, 6597, 5472, 293, 1935, 6597, 5472, 293, 6636, 3126, 5472, 30, 50742], 'temperature': 0.0, 'avg_logprob': -0.19599574374169418, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.2939736545085907}, {'id': 273, 'seek': 238584, 'start': 2393.4, 'end': 2400.88, 'text': ' Then? Then? It is a very good question actually. It is a very good point. So,', 'tokens': [50742, 1396, 30, 1396, 30, 467, 307, 257, 588, 665, 1168, 767, 13, 467, 307, 257, 588, 665, 935, 13, 407, 11, 51116], 'temperature': 0.0, 'avg_logprob': -0.19599574374169418, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.2939736545085907}, {'id': 274, 'seek': 238584, 'start': 2400.88, 'end': 2408.6000000000004, 'text': ' he gave a very good example, but he is stuck now. I turned tables on him. Now, tell me. So,', 'tokens': [51116, 415, 2729, 257, 588, 665, 1365, 11, 457, 415, 307, 5541, 586, 13, 286, 3574, 8020, 322, 796, 13, 823, 11, 980, 385, 13, 407, 11, 51502], 'temperature': 0.0, 'avg_logprob': -0.19599574374169418, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.2939736545085907}, {'id': 275, 'seek': 238584, 'start': 2408.6000000000004, 'end': 2412.4, 'text': ' if you have an infinite set of elements, which is my let us say my set of integers,', 'tokens': [51502, 498, 291, 362, 364, 13785, 992, 295, 4959, 11, 597, 307, 452, 718, 505, 584, 452, 992, 295, 41674, 11, 51692], 'temperature': 0.0, 'avg_logprob': -0.19599574374169418, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.2939736545085907}, {'id': 276, 'seek': 241240, 'start': 2412.4, 'end': 2416.6, 'text': ' which is not even a poset. It is actually totally ordered set, but is it a lattice?', 'tokens': [50364, 597, 307, 406, 754, 257, 1366, 302, 13, 467, 307, 767, 3879, 8866, 992, 11, 457, 307, 309, 257, 34011, 30, 50574], 'temperature': 0.0, 'avg_logprob': -0.15375119737051066, 'compression_ratio': 1.7867298578199051, 'no_speech_prob': 0.06541142612695694}, {'id': 277, 'seek': 241240, 'start': 2416.6, 'end': 2425.7200000000003, 'text': ' Because now for any infinite subsets, I should be even for infinite subset, I should be able to take.', 'tokens': [50574, 1436, 586, 337, 604, 13785, 2090, 1385, 11, 286, 820, 312, 754, 337, 13785, 25993, 11, 286, 820, 312, 1075, 281, 747, 13, 51030], 'temperature': 0.0, 'avg_logprob': -0.15375119737051066, 'compression_ratio': 1.7867298578199051, 'no_speech_prob': 0.06541142612695694}, {'id': 278, 'seek': 241240, 'start': 2425.7200000000003, 'end': 2431.8, 'text': ' So, if I take an infinite subset, that is all integers greater than 0. I should be able to', 'tokens': [51030, 407, 11, 498, 286, 747, 364, 13785, 25993, 11, 300, 307, 439, 41674, 5044, 813, 1958, 13, 286, 820, 312, 1075, 281, 51334], 'temperature': 0.0, 'avg_logprob': -0.15375119737051066, 'compression_ratio': 1.7867298578199051, 'no_speech_prob': 0.06541142612695694}, {'id': 279, 'seek': 241240, 'start': 2431.8, 'end': 2438.64, 'text': ' consider. So, I can define it, right? Then I should be able to give you a least upper bound on it. I', 'tokens': [51334, 1949, 13, 407, 11, 286, 393, 6964, 309, 11, 558, 30, 1396, 286, 820, 312, 1075, 281, 976, 291, 257, 1935, 6597, 5472, 322, 309, 13, 286, 51676], 'temperature': 0.0, 'avg_logprob': -0.15375119737051066, 'compression_ratio': 1.7867298578199051, 'no_speech_prob': 0.06541142612695694}, {'id': 280, 'seek': 243864, 'start': 2438.64, 'end': 2449.68, 'text': ' have a greatest lower bound 0, but I need a least upper bound. So, what do I do? Give up. We never', 'tokens': [50364, 362, 257, 6636, 3126, 5472, 1958, 11, 457, 286, 643, 257, 1935, 6597, 5472, 13, 407, 11, 437, 360, 286, 360, 30, 5303, 493, 13, 492, 1128, 50916], 'temperature': 0.0, 'avg_logprob': -0.19929478532176906, 'compression_ratio': 1.492537313432836, 'no_speech_prob': 0.1342424899339676}, {'id': 281, 'seek': 243864, 'start': 2449.68, 'end': 2462.8799999999997, 'text': ' give up. No, I want an infinite subset. I want an infinite set. I do not want the set of constraints.', 'tokens': [50916, 976, 493, 13, 883, 11, 286, 528, 364, 13785, 25993, 13, 286, 528, 364, 13785, 992, 13, 286, 360, 406, 528, 264, 992, 295, 18491, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.19929478532176906, 'compression_ratio': 1.492537313432836, 'no_speech_prob': 0.1342424899339676}, {'id': 282, 'seek': 246288, 'start': 2462.88, 'end': 2475.2400000000002, 'text': ' Yes, yes. So, you can now go back to definitions. You can say, oh, my subset also contains these', 'tokens': [50364, 1079, 11, 2086, 13, 407, 11, 291, 393, 586, 352, 646, 281, 21988, 13, 509, 393, 584, 11, 1954, 11, 452, 25993, 611, 8306, 613, 50982], 'temperature': 0.0, 'avg_logprob': -0.19150939252641466, 'compression_ratio': 1.5052083333333333, 'no_speech_prob': 0.033650077879428864}, {'id': 283, 'seek': 246288, 'start': 2475.2400000000002, 'end': 2481.6800000000003, 'text': ' two elements infinity and minus infinity. Nobody knows what they are. That is a different matter,', 'tokens': [50982, 732, 4959, 13202, 293, 3175, 13202, 13, 9297, 3255, 437, 436, 366, 13, 663, 307, 257, 819, 1871, 11, 51304], 'temperature': 0.0, 'avg_logprob': -0.19150939252641466, 'compression_ratio': 1.5052083333333333, 'no_speech_prob': 0.033650077879428864}, {'id': 284, 'seek': 246288, 'start': 2481.6800000000003, 'end': 2486.7200000000003, 'text': ' but I say that they exist, right? That is cool thing about mathematics. Whenever you are stuck', 'tokens': [51304, 457, 286, 584, 300, 436, 2514, 11, 558, 30, 663, 307, 1627, 551, 466, 18666, 13, 14159, 291, 366, 5541, 51556], 'temperature': 0.0, 'avg_logprob': -0.19150939252641466, 'compression_ratio': 1.5052083333333333, 'no_speech_prob': 0.033650077879428864}, {'id': 285, 'seek': 248672, 'start': 2486.72, 'end': 2495.56, 'text': ' on a problem, define something and get out of it. So, then essentially you can say that there', 'tokens': [50364, 322, 257, 1154, 11, 6964, 746, 293, 483, 484, 295, 309, 13, 407, 11, 550, 4476, 291, 393, 584, 300, 456, 50806], 'temperature': 0.0, 'avg_logprob': -0.14218791563119462, 'compression_ratio': 1.6746987951807228, 'no_speech_prob': 0.22213737666606903}, {'id': 286, 'seek': 248672, 'start': 2495.56, 'end': 2501.3199999999997, 'text': ' exist these elements infinity and minus infinity, and then you say that no matter what, there is', 'tokens': [50806, 2514, 613, 4959, 13202, 293, 3175, 13202, 11, 293, 550, 291, 584, 300, 572, 1871, 437, 11, 456, 307, 51094], 'temperature': 0.0, 'avg_logprob': -0.14218791563119462, 'compression_ratio': 1.6746987951807228, 'no_speech_prob': 0.22213737666606903}, {'id': 287, 'seek': 248672, 'start': 2501.3199999999997, 'end': 2509.08, 'text': ' nothing bigger than infinity, right? So, now no matter what infinite subset I give you,', 'tokens': [51094, 1825, 3801, 813, 13202, 11, 558, 30, 407, 11, 586, 572, 1871, 437, 13785, 25993, 286, 976, 291, 11, 51482], 'temperature': 0.0, 'avg_logprob': -0.14218791563119462, 'compression_ratio': 1.6746987951807228, 'no_speech_prob': 0.22213737666606903}, {'id': 288, 'seek': 250908, 'start': 2509.08, 'end': 2518.08, 'text': ' you surely know infinity is my, it is bounded by infinity. If I give you well-ordered set,', 'tokens': [50364, 291, 11468, 458, 13202, 307, 452, 11, 309, 307, 37498, 538, 13202, 13, 759, 286, 976, 291, 731, 12, 765, 4073, 992, 11, 50814], 'temperature': 0.0, 'avg_logprob': -0.17323178213995857, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.08725694566965103}, {'id': 289, 'seek': 250908, 'start': 2518.08, 'end': 2525.84, 'text': ' if I say that all numbers greater than 2500 million, which is the greatest, the lowest', 'tokens': [50814, 498, 286, 584, 300, 439, 3547, 5044, 813, 41171, 2459, 11, 597, 307, 264, 6636, 11, 264, 12437, 51202], 'temperature': 0.0, 'avg_logprob': -0.17323178213995857, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.08725694566965103}, {'id': 290, 'seek': 250908, 'start': 2525.84, 'end': 2533.68, 'text': ' upper bound, 2500 million, right? Not a problem, right? But if I give you an open end where I say', 'tokens': [51202, 6597, 5472, 11, 41171, 2459, 11, 558, 30, 1726, 257, 1154, 11, 558, 30, 583, 498, 286, 976, 291, 364, 1269, 917, 689, 286, 584, 51594], 'temperature': 0.0, 'avg_logprob': -0.17323178213995857, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.08725694566965103}, {'id': 291, 'seek': 253368, 'start': 2533.68, 'end': 2539.9199999999996, 'text': ' all numbers greater than 0, then you say infinity. All numbers less than 0, minus infinity is the', 'tokens': [50364, 439, 3547, 5044, 813, 1958, 11, 550, 291, 584, 13202, 13, 1057, 3547, 1570, 813, 1958, 11, 3175, 13202, 307, 264, 50676], 'temperature': 0.0, 'avg_logprob': -0.14588356018066406, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.08025719970464706}, {'id': 292, 'seek': 253368, 'start': 2539.9199999999996, 'end': 2548.16, 'text': ' greatest lower bound, right? So, essentially that is what you do. So, you define these arbitrary', 'tokens': [50676, 6636, 3126, 5472, 11, 558, 30, 407, 11, 4476, 300, 307, 437, 291, 360, 13, 407, 11, 291, 6964, 613, 23211, 51088], 'temperature': 0.0, 'avg_logprob': -0.14588356018066406, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.08025719970464706}, {'id': 293, 'seek': 253368, 'start': 2548.16, 'end': 2553.44, 'text': ' elements, this minus infinity and plus infinity or something like that, to say that it is bounded', 'tokens': [51088, 4959, 11, 341, 3175, 13202, 293, 1804, 13202, 420, 746, 411, 300, 11, 281, 584, 300, 309, 307, 37498, 51352], 'temperature': 0.0, 'avg_logprob': -0.14588356018066406, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.08025719970464706}, {'id': 294, 'seek': 253368, 'start': 2553.44, 'end': 2558.8799999999997, 'text': ' by these guys. And they may not even mean anything very meaningful for you, but they are just', 'tokens': [51352, 538, 613, 1074, 13, 400, 436, 815, 406, 754, 914, 1340, 588, 10995, 337, 291, 11, 457, 436, 366, 445, 51624], 'temperature': 0.0, 'avg_logprob': -0.14588356018066406, 'compression_ratio': 1.746606334841629, 'no_speech_prob': 0.08025719970464706}, {'id': 295, 'seek': 255888, 'start': 2558.88, 'end': 2564.04, 'text': ' definitions. They are just saying that these elements exist. With the element set of integers,', 'tokens': [50364, 21988, 13, 814, 366, 445, 1566, 300, 613, 4959, 2514, 13, 2022, 264, 4478, 992, 295, 41674, 11, 50622], 'temperature': 0.0, 'avg_logprob': -0.2292044681051503, 'compression_ratio': 1.532967032967033, 'no_speech_prob': 0.3539220988750458}, {'id': 296, 'seek': 255888, 'start': 2564.04, 'end': 2569.56, 'text': ' I union these two extra elements, infinity and minus infinity, and I say this is the subset set', 'tokens': [50622, 286, 11671, 613, 732, 2857, 4959, 11, 13202, 293, 3175, 13202, 11, 293, 286, 584, 341, 307, 264, 25993, 992, 50898], 'temperature': 0.0, 'avg_logprob': -0.2292044681051503, 'compression_ratio': 1.532967032967033, 'no_speech_prob': 0.3539220988750458}, {'id': 297, 'seek': 255888, 'start': 2569.56, 'end': 2581.6, 'text': ' S that I want to work with, right? Good you brought it up. And we will do that business,', 'tokens': [50898, 318, 300, 286, 528, 281, 589, 365, 11, 558, 30, 2205, 291, 3038, 309, 493, 13, 400, 321, 486, 360, 300, 1606, 11, 51500], 'temperature': 0.0, 'avg_logprob': -0.2292044681051503, 'compression_ratio': 1.532967032967033, 'no_speech_prob': 0.3539220988750458}, {'id': 298, 'seek': 258160, 'start': 2581.6, 'end': 2592.92, 'text': ' actually. So, okay. Is an empty lattice a complete lattice? Yeah, again a matter of definitions.', 'tokens': [50364, 767, 13, 407, 11, 1392, 13, 1119, 364, 6707, 34011, 257, 3566, 34011, 30, 865, 11, 797, 257, 1871, 295, 21988, 13, 50930], 'temperature': 0.0, 'avg_logprob': -0.2388940786386465, 'compression_ratio': 1.558011049723757, 'no_speech_prob': 0.05239659920334816}, {'id': 299, 'seek': 258160, 'start': 2592.92, 'end': 2599.72, 'text': ' I just say that, okay, my meat of empty is empty and I mean join of empty is also empty. Done. I', 'tokens': [50930, 286, 445, 584, 300, 11, 1392, 11, 452, 4615, 295, 6707, 307, 6707, 293, 286, 914, 3917, 295, 6707, 307, 611, 6707, 13, 18658, 13, 286, 51270], 'temperature': 0.0, 'avg_logprob': -0.2388940786386465, 'compression_ratio': 1.558011049723757, 'no_speech_prob': 0.05239659920334816}, {'id': 300, 'seek': 258160, 'start': 2599.72, 'end': 2607.72, 'text': ' define it and I am out of that problem. Okay. The next is a notion of something called a', 'tokens': [51270, 6964, 309, 293, 286, 669, 484, 295, 300, 1154, 13, 1033, 13, 440, 958, 307, 257, 10710, 295, 746, 1219, 257, 51670], 'temperature': 0.0, 'avg_logprob': -0.2388940786386465, 'compression_ratio': 1.558011049723757, 'no_speech_prob': 0.05239659920334816}, {'id': 301, 'seek': 260772, 'start': 2607.72, 'end': 2616.56, 'text': ' distributive lattice, right? So, a lattice which allows the meat and join operators to', 'tokens': [50364, 4400, 17254, 34011, 11, 558, 30, 407, 11, 257, 34011, 597, 4045, 264, 4615, 293, 3917, 19077, 281, 50806], 'temperature': 0.0, 'avg_logprob': -0.10872399405147253, 'compression_ratio': 2.1073446327683616, 'no_speech_prob': 0.07146944105625153}, {'id': 302, 'seek': 260772, 'start': 2616.56, 'end': 2622.2, 'text': ' distribute among themselves is referred to as a distributive lattice. So, the meat can distribute', 'tokens': [50806, 20594, 3654, 2969, 307, 10839, 281, 382, 257, 4400, 17254, 34011, 13, 407, 11, 264, 4615, 393, 20594, 51088], 'temperature': 0.0, 'avg_logprob': -0.10872399405147253, 'compression_ratio': 2.1073446327683616, 'no_speech_prob': 0.07146944105625153}, {'id': 303, 'seek': 260772, 'start': 2622.2, 'end': 2626.7999999999997, 'text': ' over the join and the join can distribute over the meat. So, if this happens, then this is referred', 'tokens': [51088, 670, 264, 3917, 293, 264, 3917, 393, 20594, 670, 264, 4615, 13, 407, 11, 498, 341, 2314, 11, 550, 341, 307, 10839, 51318], 'temperature': 0.0, 'avg_logprob': -0.10872399405147253, 'compression_ratio': 2.1073446327683616, 'no_speech_prob': 0.07146944105625153}, {'id': 304, 'seek': 260772, 'start': 2626.7999999999997, 'end': 2633.52, 'text': ' to as a distributive lattice. So, lattices, because of this nice symmetry, there is this', 'tokens': [51318, 281, 382, 257, 4400, 17254, 34011, 13, 407, 11, 29025, 1473, 11, 570, 295, 341, 1481, 25440, 11, 456, 307, 341, 51654], 'temperature': 0.0, 'avg_logprob': -0.10872399405147253, 'compression_ratio': 2.1073446327683616, 'no_speech_prob': 0.07146944105625153}, {'id': 305, 'seek': 263352, 'start': 2633.52, 'end': 2641.24, 'text': ' very interesting notion of duality. So, duality says that if I consistently rename things,', 'tokens': [50364, 588, 1880, 10710, 295, 11848, 507, 13, 407, 11, 11848, 507, 1619, 300, 498, 286, 14961, 36741, 721, 11, 50750], 'temperature': 0.0, 'avg_logprob': -0.17031873239053263, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.2869568467140198}, {'id': 306, 'seek': 263352, 'start': 2641.24, 'end': 2649.36, 'text': ' like for instance, I just invert my relation. So, like I just flip my lattice, right? So,', 'tokens': [50750, 411, 337, 5197, 11, 286, 445, 33966, 452, 9721, 13, 407, 11, 411, 286, 445, 7929, 452, 34011, 11, 558, 30, 407, 11, 51156], 'temperature': 0.0, 'avg_logprob': -0.17031873239053263, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.2869568467140198}, {'id': 307, 'seek': 263352, 'start': 2649.36, 'end': 2658.28, 'text': ' my GLB becomes my LUB, my LUB becomes my upper bound become my lower bounds, right? All definitions', 'tokens': [51156, 452, 16225, 33, 3643, 452, 441, 23553, 11, 452, 441, 23553, 3643, 452, 6597, 5472, 1813, 452, 3126, 29905, 11, 558, 30, 1057, 21988, 51602], 'temperature': 0.0, 'avg_logprob': -0.17031873239053263, 'compression_ratio': 1.5819209039548023, 'no_speech_prob': 0.2869568467140198}, {'id': 308, 'seek': 265828, 'start': 2658.28, 'end': 2662.96, 'text': ' would still stand. Maybe I should say in a slightly different way. So, I am saying any', 'tokens': [50364, 576, 920, 1463, 13, 2704, 286, 820, 584, 294, 257, 4748, 819, 636, 13, 407, 11, 286, 669, 1566, 604, 50598], 'temperature': 0.0, 'avg_logprob': -0.11845351374426553, 'compression_ratio': 1.9387755102040816, 'no_speech_prob': 0.07140088826417923}, {'id': 309, 'seek': 265828, 'start': 2662.96, 'end': 2672.2000000000003, 'text': ' statement I make about say upper bounds or least upper bounds, if I consistently rename things like', 'tokens': [50598, 5629, 286, 652, 466, 584, 6597, 29905, 420, 1935, 6597, 29905, 11, 498, 286, 14961, 36741, 721, 411, 51060], 'temperature': 0.0, 'avg_logprob': -0.11845351374426553, 'compression_ratio': 1.9387755102040816, 'no_speech_prob': 0.07140088826417923}, {'id': 310, 'seek': 265828, 'start': 2672.2000000000003, 'end': 2678.88, 'text': ' joins by meats and upper bounds by lower bounds, least by upper, if I consistently rename them,', 'tokens': [51060, 24397, 538, 38106, 293, 6597, 29905, 538, 3126, 29905, 11, 1935, 538, 6597, 11, 498, 286, 14961, 36741, 552, 11, 51394], 'temperature': 0.0, 'avg_logprob': -0.11845351374426553, 'compression_ratio': 1.9387755102040816, 'no_speech_prob': 0.07140088826417923}, {'id': 311, 'seek': 265828, 'start': 2678.88, 'end': 2687.4, 'text': ' then whatever theorem works on the meats and the upper bounds and like meats and the lower bounds', 'tokens': [51394, 550, 2035, 20904, 1985, 322, 264, 38106, 293, 264, 6597, 29905, 293, 411, 38106, 293, 264, 3126, 29905, 51820], 'temperature': 0.0, 'avg_logprob': -0.11845351374426553, 'compression_ratio': 1.9387755102040816, 'no_speech_prob': 0.07140088826417923}, {'id': 312, 'seek': 268740, 'start': 2687.4, 'end': 2691.6800000000003, 'text': ' and the greatest lower bounds that will also work on the joins and the upper bounds and the', 'tokens': [50364, 293, 264, 6636, 3126, 29905, 300, 486, 611, 589, 322, 264, 24397, 293, 264, 6597, 29905, 293, 264, 50578], 'temperature': 0.0, 'avg_logprob': -0.1466820198192931, 'compression_ratio': 1.8543307086614174, 'no_speech_prob': 0.0024706146214157343}, {'id': 313, 'seek': 268740, 'start': 2691.6800000000003, 'end': 2698.32, 'text': ' lowest upper bounds, right? So, there is this like other side you get it for free essentially. It is', 'tokens': [50578, 12437, 6597, 29905, 11, 558, 30, 407, 11, 456, 307, 341, 411, 661, 1252, 291, 483, 309, 337, 1737, 4476, 13, 467, 307, 50910], 'temperature': 0.0, 'avg_logprob': -0.1466820198192931, 'compression_ratio': 1.8543307086614174, 'no_speech_prob': 0.0024706146214157343}, {'id': 314, 'seek': 268740, 'start': 2698.32, 'end': 2701.6800000000003, 'text': ' saying the whole thing is symmetric. Whatever happens upwards, very similar thing happens', 'tokens': [50910, 1566, 264, 1379, 551, 307, 32330, 13, 8541, 2314, 22167, 11, 588, 2531, 551, 2314, 51078], 'temperature': 0.0, 'avg_logprob': -0.1466820198192931, 'compression_ratio': 1.8543307086614174, 'no_speech_prob': 0.0024706146214157343}, {'id': 315, 'seek': 268740, 'start': 2701.6800000000003, 'end': 2710.8, 'text': ' downwards, right? So, here also this is simply distributivity, simply duality. So, what I did', 'tokens': [51078, 39880, 11, 558, 30, 407, 11, 510, 611, 341, 307, 2935, 4400, 325, 4253, 11, 2935, 11848, 507, 13, 407, 11, 437, 286, 630, 51534], 'temperature': 0.0, 'avg_logprob': -0.1466820198192931, 'compression_ratio': 1.8543307086614174, 'no_speech_prob': 0.0024706146214157343}, {'id': 316, 'seek': 268740, 'start': 2710.8, 'end': 2714.8, 'text': ' was I consistently, so this was a theorem. So, I say some lattice is a distributive lattice if', 'tokens': [51534, 390, 286, 14961, 11, 370, 341, 390, 257, 20904, 13, 407, 11, 286, 584, 512, 34011, 307, 257, 4400, 17254, 34011, 498, 51734], 'temperature': 0.0, 'avg_logprob': -0.1466820198192931, 'compression_ratio': 1.8543307086614174, 'no_speech_prob': 0.0024706146214157343}, {'id': 317, 'seek': 271480, 'start': 2714.8, 'end': 2721.84, 'text': ' this holds. So, I can simply rename all my meats I just replace by joins and join my meat and that', 'tokens': [50364, 341, 9190, 13, 407, 11, 286, 393, 2935, 36741, 439, 452, 38106, 286, 445, 7406, 538, 24397, 293, 3917, 452, 4615, 293, 300, 50716], 'temperature': 0.0, 'avg_logprob': -0.14345167284813998, 'compression_ratio': 1.6982758620689655, 'no_speech_prob': 0.09773898124694824}, {'id': 318, 'seek': 271480, 'start': 2721.84, 'end': 2728.84, 'text': ' gives me the distributivity for the meats over joins and joins over meats, ok? So, the next notion', 'tokens': [50716, 2709, 385, 264, 4400, 325, 4253, 337, 264, 38106, 670, 24397, 293, 24397, 670, 38106, 11, 3133, 30, 407, 11, 264, 958, 10710, 51066], 'temperature': 0.0, 'avg_logprob': -0.14345167284813998, 'compression_ratio': 1.6982758620689655, 'no_speech_prob': 0.09773898124694824}, {'id': 319, 'seek': 271480, 'start': 2728.84, 'end': 2738.0, 'text': ' is the notion of something known as a semi-lattice. In many applications, I really do not need both', 'tokens': [51066, 307, 264, 10710, 295, 746, 2570, 382, 257, 12909, 12, 75, 1591, 573, 13, 682, 867, 5821, 11, 286, 534, 360, 406, 643, 1293, 51524], 'temperature': 0.0, 'avg_logprob': -0.14345167284813998, 'compression_ratio': 1.6982758620689655, 'no_speech_prob': 0.09773898124694824}, {'id': 320, 'seek': 271480, 'start': 2738.0, 'end': 2743.96, 'text': ' the join and the meat. I do not care if there a meat exists or not. Let us say if I have a join,', 'tokens': [51524, 264, 3917, 293, 264, 4615, 13, 286, 360, 406, 1127, 498, 456, 257, 4615, 8198, 420, 406, 13, 961, 505, 584, 498, 286, 362, 257, 3917, 11, 51822], 'temperature': 0.0, 'avg_logprob': -0.14345167284813998, 'compression_ratio': 1.6982758620689655, 'no_speech_prob': 0.09773898124694824}, {'id': 321, 'seek': 274396, 'start': 2743.96, 'end': 2750.32, 'text': ' I am good enough. The whole application on which this thing is based on that works. So,', 'tokens': [50364, 286, 669, 665, 1547, 13, 440, 1379, 3861, 322, 597, 341, 551, 307, 2361, 322, 300, 1985, 13, 407, 11, 50682], 'temperature': 0.0, 'avg_logprob': -0.1469576125051461, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0021391056943684816}, {'id': 322, 'seek': 274396, 'start': 2750.32, 'end': 2757.28, 'text': ' then why bother about the other side, right? So, we define a upper semi-lattice or a lower', 'tokens': [50682, 550, 983, 8677, 466, 264, 661, 1252, 11, 558, 30, 407, 11, 321, 6964, 257, 6597, 12909, 12, 75, 1591, 573, 420, 257, 3126, 51030], 'temperature': 0.0, 'avg_logprob': -0.1469576125051461, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0021391056943684816}, {'id': 323, 'seek': 274396, 'start': 2757.28, 'end': 2765.96, 'text': ' semi-lattice depending on, I just defined the conditions on one side. I say that every finite', 'tokens': [51030, 12909, 12, 75, 1591, 573, 5413, 322, 11, 286, 445, 7642, 264, 4487, 322, 472, 1252, 13, 286, 584, 300, 633, 19362, 51464], 'temperature': 0.0, 'avg_logprob': -0.1469576125051461, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0021391056943684816}, {'id': 324, 'seek': 274396, 'start': 2765.96, 'end': 2772.88, 'text': ' subset of elements must have an lub. That is all I care about. Then I have a upper semi-lattice.', 'tokens': [51464, 25993, 295, 4959, 1633, 362, 364, 15980, 13, 663, 307, 439, 286, 1127, 466, 13, 1396, 286, 362, 257, 6597, 12909, 12, 75, 1591, 573, 13, 51810], 'temperature': 0.0, 'avg_logprob': -0.1469576125051461, 'compression_ratio': 1.6772727272727272, 'no_speech_prob': 0.0021391056943684816}, {'id': 325, 'seek': 277288, 'start': 2772.88, 'end': 2778.52, 'text': ' I do not say that thing. It should have both an lub and a glb. I do not say that. I just say', 'tokens': [50364, 286, 360, 406, 584, 300, 551, 13, 467, 820, 362, 1293, 364, 15980, 293, 257, 1563, 65, 13, 286, 360, 406, 584, 300, 13, 286, 445, 584, 50646], 'temperature': 0.0, 'avg_logprob': -0.13941457617373867, 'compression_ratio': 1.7923076923076924, 'no_speech_prob': 0.003320918418467045}, {'id': 326, 'seek': 277288, 'start': 2778.52, 'end': 2783.32, 'text': ' that every element should have a lub. I am happy with it. They have a glb or not, I do not care.', 'tokens': [50646, 300, 633, 4478, 820, 362, 257, 15980, 13, 286, 669, 2055, 365, 309, 13, 814, 362, 257, 1563, 65, 420, 406, 11, 286, 360, 406, 1127, 13, 50886], 'temperature': 0.0, 'avg_logprob': -0.13941457617373867, 'compression_ratio': 1.7923076923076924, 'no_speech_prob': 0.003320918418467045}, {'id': 327, 'seek': 277288, 'start': 2783.32, 'end': 2789.12, 'text': ' Right? So, it is a relaxed definition. So, it will allow other things to become semi-lattices', 'tokens': [50886, 1779, 30, 407, 11, 309, 307, 257, 14628, 7123, 13, 407, 11, 309, 486, 2089, 661, 721, 281, 1813, 12909, 12, 75, 1591, 1473, 51176], 'temperature': 0.0, 'avg_logprob': -0.13941457617373867, 'compression_ratio': 1.7923076923076924, 'no_speech_prob': 0.003320918418467045}, {'id': 328, 'seek': 277288, 'start': 2789.12, 'end': 2794.1600000000003, 'text': ' which were not actually lattices, right? And that the reason is because I do not really', 'tokens': [51176, 597, 645, 406, 767, 29025, 1473, 11, 558, 30, 400, 300, 264, 1778, 307, 570, 286, 360, 406, 534, 51428], 'temperature': 0.0, 'avg_logprob': -0.13941457617373867, 'compression_ratio': 1.7923076923076924, 'no_speech_prob': 0.003320918418467045}, {'id': 329, 'seek': 277288, 'start': 2794.1600000000003, 'end': 2799.28, 'text': ' care what happens on the other side. Similarly, I can do things for meats and I can say I have', 'tokens': [51428, 1127, 437, 2314, 322, 264, 661, 1252, 13, 13157, 11, 286, 393, 360, 721, 337, 38106, 293, 286, 393, 584, 286, 362, 51684], 'temperature': 0.0, 'avg_logprob': -0.13941457617373867, 'compression_ratio': 1.7923076923076924, 'no_speech_prob': 0.003320918418467045}, {'id': 330, 'seek': 279928, 'start': 2799.28, 'end': 2805.8, 'text': ' lower semi-lattices. So, now essentially the structure is only on one side. The other side', 'tokens': [50364, 3126, 12909, 12, 75, 1591, 1473, 13, 407, 11, 586, 4476, 264, 3877, 307, 787, 322, 472, 1252, 13, 440, 661, 1252, 50690], 'temperature': 0.0, 'avg_logprob': -0.15813159942626953, 'compression_ratio': 1.6884615384615385, 'no_speech_prob': 0.10073261708021164}, {'id': 331, 'seek': 279928, 'start': 2805.8, 'end': 2812.1200000000003, 'text': ' there may not be any structure. Okay. So, any questions on lattices? So, I am just doing', 'tokens': [50690, 456, 815, 406, 312, 604, 3877, 13, 1033, 13, 407, 11, 604, 1651, 322, 29025, 1473, 30, 407, 11, 286, 669, 445, 884, 51006], 'temperature': 0.0, 'avg_logprob': -0.15813159942626953, 'compression_ratio': 1.6884615384615385, 'no_speech_prob': 0.10073261708021164}, {'id': 332, 'seek': 279928, 'start': 2812.1200000000003, 'end': 2817.32, 'text': ' whatever is required to talk about data flow analysis. I will not go anywhere outside that.', 'tokens': [51006, 2035, 307, 4739, 281, 751, 466, 1412, 3095, 5215, 13, 286, 486, 406, 352, 4992, 2380, 300, 13, 51266], 'temperature': 0.0, 'avg_logprob': -0.15813159942626953, 'compression_ratio': 1.6884615384615385, 'no_speech_prob': 0.10073261708021164}, {'id': 333, 'seek': 279928, 'start': 2817.32, 'end': 2823.4, 'text': ' Right? So, but it is a very interesting mathematical structure. So, I would really', 'tokens': [51266, 1779, 30, 407, 11, 457, 309, 307, 257, 588, 1880, 18894, 3877, 13, 407, 11, 286, 576, 534, 51570], 'temperature': 0.0, 'avg_logprob': -0.15813159942626953, 'compression_ratio': 1.6884615384615385, 'no_speech_prob': 0.10073261708021164}, {'id': 334, 'seek': 279928, 'start': 2823.4, 'end': 2826.8, 'text': ' encourage you to go back and read more on lattices and see how they are used in many', 'tokens': [51570, 5373, 291, 281, 352, 646, 293, 1401, 544, 322, 29025, 1473, 293, 536, 577, 436, 366, 1143, 294, 867, 51740], 'temperature': 0.0, 'avg_logprob': -0.15813159942626953, 'compression_ratio': 1.6884615384615385, 'no_speech_prob': 0.10073261708021164}, {'id': 335, 'seek': 282680, 'start': 2826.8, 'end': 2833.44, 'text': ' disciplines in computer science. Are we good? Are we good with all definitions? Any questions?', 'tokens': [50364, 21919, 294, 3820, 3497, 13, 2014, 321, 665, 30, 2014, 321, 665, 365, 439, 21988, 30, 2639, 1651, 30, 50696], 'temperature': 0.0, 'avg_logprob': -0.37353130340576174, 'compression_ratio': 1.6547619047619047, 'no_speech_prob': 0.15102244913578033}, {'id': 336, 'seek': 282680, 'start': 2833.44, 'end': 2835.04, 'text': ' Let us discuss things on lattice if anything. Sir, even lattice is not possible.', 'tokens': [50696, 961, 505, 2248, 721, 322, 34011, 498, 1340, 13, 6144, 11, 754, 34011, 307, 406, 1944, 13, 50776], 'temperature': 0.0, 'avg_logprob': -0.37353130340576174, 'compression_ratio': 1.6547619047619047, 'no_speech_prob': 0.15102244913578033}, {'id': 337, 'seek': 282680, 'start': 2835.04, 'end': 2846.2000000000003, 'text': ' What programming? Yeah, yeah. I am not so much aware of that, but surely it is very much possible', 'tokens': [50776, 708, 9410, 30, 865, 11, 1338, 13, 286, 669, 406, 370, 709, 3650, 295, 300, 11, 457, 11468, 309, 307, 588, 709, 1944, 51334], 'temperature': 0.0, 'avg_logprob': -0.37353130340576174, 'compression_ratio': 1.6547619047619047, 'no_speech_prob': 0.15102244913578033}, {'id': 338, 'seek': 282680, 'start': 2846.2000000000003, 'end': 2850.28, 'text': ' that there are applications there. Your model.', 'tokens': [51334, 300, 456, 366, 5821, 456, 13, 2260, 2316, 13, 51538], 'temperature': 0.0, 'avg_logprob': -0.37353130340576174, 'compression_ratio': 1.6547619047619047, 'no_speech_prob': 0.15102244913578033}, {'id': 339, 'seek': 282680, 'start': 2850.28, 'end': 2854.8, 'text': ' I see. Possible, possible. So, essentially this is used for modelling problems into mathematics.', 'tokens': [51538, 286, 536, 13, 430, 5785, 11, 1944, 13, 407, 11, 4476, 341, 307, 1143, 337, 42253, 2740, 666, 18666, 13, 51764], 'temperature': 0.0, 'avg_logprob': -0.37353130340576174, 'compression_ratio': 1.6547619047619047, 'no_speech_prob': 0.15102244913578033}, {'id': 340, 'seek': 285480, 'start': 2854.8, 'end': 2859.2400000000002, 'text': ' So, any problem that you think needs this particular structure, you can just say that,', 'tokens': [50364, 407, 11, 604, 1154, 300, 291, 519, 2203, 341, 1729, 3877, 11, 291, 393, 445, 584, 300, 11, 50586], 'temperature': 0.0, 'avg_logprob': -0.17173342082811438, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.041940730065107346}, {'id': 341, 'seek': 285480, 'start': 2859.2400000000002, 'end': 2863.52, 'text': ' okay, I need to need it to be a lattice and all the theorems you prove on this mathematical', 'tokens': [50586, 1392, 11, 286, 643, 281, 643, 309, 281, 312, 257, 34011, 293, 439, 264, 10299, 2592, 291, 7081, 322, 341, 18894, 50800], 'temperature': 0.0, 'avg_logprob': -0.17173342082811438, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.041940730065107346}, {'id': 342, 'seek': 285480, 'start': 2863.52, 'end': 2869.5600000000004, 'text': ' structure will hold on that. So, you can use all those theorems directly to prove your applied', 'tokens': [50800, 3877, 486, 1797, 322, 300, 13, 407, 11, 291, 393, 764, 439, 729, 10299, 2592, 3838, 281, 7081, 428, 6456, 51102], 'temperature': 0.0, 'avg_logprob': -0.17173342082811438, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.041940730065107346}, {'id': 343, 'seek': 285480, 'start': 2869.5600000000004, 'end': 2877.7200000000003, 'text': ' thing, whatever you are applying it to. Right? Okay. So, now next we come to what are called', 'tokens': [51102, 551, 11, 2035, 291, 366, 9275, 309, 281, 13, 1779, 30, 1033, 13, 407, 11, 586, 958, 321, 808, 281, 437, 366, 1219, 51510], 'temperature': 0.0, 'avg_logprob': -0.17173342082811438, 'compression_ratio': 1.6944444444444444, 'no_speech_prob': 0.041940730065107346}, {'id': 344, 'seek': 287772, 'start': 2878.68, 'end': 2884.9599999999996, 'text': ' come to functions on lattices. Now, basically we have we talk about functions which operate', 'tokens': [50412, 808, 281, 6828, 322, 29025, 1473, 13, 823, 11, 1936, 321, 362, 321, 751, 466, 6828, 597, 9651, 50726], 'temperature': 0.0, 'avg_logprob': -0.14762115478515625, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.17274630069732666}, {'id': 345, 'seek': 287772, 'start': 2884.9599999999996, 'end': 2893.12, 'text': ' on the elements in the lattice. Right? So, the first definition is about something called', 'tokens': [50726, 322, 264, 4959, 294, 264, 34011, 13, 1779, 30, 407, 11, 264, 700, 7123, 307, 466, 746, 1219, 51134], 'temperature': 0.0, 'avg_logprob': -0.14762115478515625, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.17274630069732666}, {'id': 346, 'seek': 287772, 'start': 2893.12, 'end': 2899.08, 'text': ' a monotonic function or a order preserving function. So, I say that f a function f is', 'tokens': [51134, 257, 1108, 310, 11630, 2445, 420, 257, 1668, 33173, 2445, 13, 407, 11, 286, 584, 300, 283, 257, 2445, 283, 307, 51432], 'temperature': 0.0, 'avg_logprob': -0.14762115478515625, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.17274630069732666}, {'id': 347, 'seek': 287772, 'start': 2899.08, 'end': 2906.7599999999998, 'text': ' an monotonic function. If I pick two arbitrary elements x and y in my set, which are related', 'tokens': [51432, 364, 1108, 310, 11630, 2445, 13, 759, 286, 1888, 732, 23211, 4959, 2031, 293, 288, 294, 452, 992, 11, 597, 366, 4077, 51816], 'temperature': 0.0, 'avg_logprob': -0.14762115478515625, 'compression_ratio': 1.6901408450704225, 'no_speech_prob': 0.17274630069732666}, {'id': 348, 'seek': 290676, 'start': 2906.76, 'end': 2913.88, 'text': ' by the ordering relation, then I can surely say that the results of applying the function', 'tokens': [50364, 538, 264, 21739, 9721, 11, 550, 286, 393, 11468, 584, 300, 264, 3542, 295, 9275, 264, 2445, 50720], 'temperature': 0.0, 'avg_logprob': -0.11894630855984158, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.008552582003176212}, {'id': 349, 'seek': 290676, 'start': 2913.88, 'end': 2920.1200000000003, 'text': ' f on those two elements will also be related by the order that by the same ordering relation.', 'tokens': [50720, 283, 322, 729, 732, 4959, 486, 611, 312, 4077, 538, 264, 1668, 300, 538, 264, 912, 21739, 9721, 13, 51032], 'temperature': 0.0, 'avg_logprob': -0.11894630855984158, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.008552582003176212}, {'id': 350, 'seek': 290676, 'start': 2920.1200000000003, 'end': 2924.84, 'text': ' Right? So, essentially it means that it looks something like this. So, if you have an x', 'tokens': [51032, 1779, 30, 407, 11, 4476, 309, 1355, 300, 309, 1542, 746, 411, 341, 13, 407, 11, 498, 291, 362, 364, 2031, 51268], 'temperature': 0.0, 'avg_logprob': -0.11894630855984158, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.008552582003176212}, {'id': 351, 'seek': 290676, 'start': 2924.84, 'end': 2932.28, 'text': ' and if you have a y, I know that they are related. So, I have an edge between them.', 'tokens': [51268, 293, 498, 291, 362, 257, 288, 11, 286, 458, 300, 436, 366, 4077, 13, 407, 11, 286, 362, 364, 4691, 1296, 552, 13, 51640], 'temperature': 0.0, 'avg_logprob': -0.11894630855984158, 'compression_ratio': 1.7317073170731707, 'no_speech_prob': 0.008552582003176212}, {'id': 352, 'seek': 293228, 'start': 2932.28, 'end': 2940.44, 'text': ' If I apply f to x and I apply f to y f to y and f to x, then whatever I get. So, this', 'tokens': [50364, 759, 286, 3079, 283, 281, 2031, 293, 286, 3079, 283, 281, 288, 283, 281, 288, 293, 283, 281, 2031, 11, 550, 2035, 286, 483, 13, 407, 11, 341, 50772], 'temperature': 0.0, 'avg_logprob': -0.18760574073122258, 'compression_ratio': 1.4516129032258065, 'no_speech_prob': 0.042082950472831726}, {'id': 353, 'seek': 293228, 'start': 2940.44, 'end': 2951.44, 'text': ' would be f of y and this is f of x. These elements must surely also have an edge between them.', 'tokens': [50772, 576, 312, 283, 295, 288, 293, 341, 307, 283, 295, 2031, 13, 1981, 4959, 1633, 11468, 611, 362, 364, 4691, 1296, 552, 13, 51322], 'temperature': 0.0, 'avg_logprob': -0.18760574073122258, 'compression_ratio': 1.4516129032258065, 'no_speech_prob': 0.042082950472831726}, {'id': 354, 'seek': 295144, 'start': 2951.44, 'end': 2963.4, 'text': ' Right? So, if my for any such x and y arbitrary elements x and y in my set, if my function', 'tokens': [50364, 1779, 30, 407, 11, 498, 452, 337, 604, 1270, 2031, 293, 288, 23211, 4959, 2031, 293, 288, 294, 452, 992, 11, 498, 452, 2445, 50962], 'temperature': 0.0, 'avg_logprob': -0.2050253739997522, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.010151982307434082}, {'id': 355, 'seek': 295144, 'start': 2963.4, 'end': 2968.68, 'text': ' f hold this property holds for my function f, then I say my function f is a monotonic', 'tokens': [50962, 283, 1797, 341, 4707, 9190, 337, 452, 2445, 283, 11, 550, 286, 584, 452, 2445, 283, 307, 257, 1108, 310, 11630, 51226], 'temperature': 0.0, 'avg_logprob': -0.2050253739997522, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.010151982307434082}, {'id': 356, 'seek': 295144, 'start': 2968.68, 'end': 2976.32, 'text': ' function or an order preserving function. Very simple definition, but yeah.', 'tokens': [51226, 2445, 420, 364, 1668, 33173, 2445, 13, 4372, 2199, 7123, 11, 457, 1338, 13, 51608], 'temperature': 0.0, 'avg_logprob': -0.2050253739997522, 'compression_ratio': 1.6470588235294117, 'no_speech_prob': 0.010151982307434082}, {'id': 357, 'seek': 297632, 'start': 2976.32, 'end': 2987.4, 'text': ' No, we do not know that relation. No, so essentially what I all I am saying is I know the relation', 'tokens': [50364, 883, 11, 321, 360, 406, 458, 300, 9721, 13, 883, 11, 370, 4476, 437, 286, 439, 286, 669, 1566, 307, 286, 458, 264, 9721, 50918], 'temperature': 0.0, 'avg_logprob': -0.23489048480987548, 'compression_ratio': 1.725, 'no_speech_prob': 0.5221558213233948}, {'id': 358, 'seek': 297632, 'start': 2987.4, 'end': 2993.6000000000004, 'text': ' between x and y. I am saying if I apply f to it, I do not know what f does. f can get', 'tokens': [50918, 1296, 2031, 293, 288, 13, 286, 669, 1566, 498, 286, 3079, 283, 281, 309, 11, 286, 360, 406, 458, 437, 283, 775, 13, 283, 393, 483, 51228], 'temperature': 0.0, 'avg_logprob': -0.23489048480987548, 'compression_ratio': 1.725, 'no_speech_prob': 0.5221558213233948}, {'id': 359, 'seek': 297632, 'start': 2993.6000000000004, 'end': 3001.32, 'text': ' x to somewhere upper for y it can go it somewhere below. I do not know what happens. Just f', 'tokens': [51228, 2031, 281, 4079, 6597, 337, 288, 309, 393, 352, 309, 4079, 2507, 13, 286, 360, 406, 458, 437, 2314, 13, 1449, 283, 51614], 'temperature': 0.0, 'avg_logprob': -0.23489048480987548, 'compression_ratio': 1.725, 'no_speech_prob': 0.5221558213233948}, {'id': 360, 'seek': 300132, 'start': 3001.48, 'end': 3008.48, 'text': ' x and f y will have a relation under the same relation under the same relation r. Right?', 'tokens': [50372, 2031, 293, 283, 288, 486, 362, 257, 9721, 833, 264, 912, 9721, 833, 264, 912, 9721, 367, 13, 1779, 30, 50722], 'temperature': 0.0, 'avg_logprob': -0.29691216605050225, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.13464868068695068}, {'id': 361, 'seek': 300132, 'start': 3008.48, 'end': 3014.04, 'text': ' So, I do not know what happens between these two guys, but I just say that if these two', 'tokens': [50722, 407, 11, 286, 360, 406, 458, 437, 2314, 1296, 613, 732, 1074, 11, 457, 286, 445, 584, 300, 498, 613, 732, 51000], 'temperature': 0.0, 'avg_logprob': -0.29691216605050225, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.13464868068695068}, {'id': 362, 'seek': 300132, 'start': 3014.04, 'end': 3023.04, 'text': ' guys were related, these two guys are surely going to be related as well. Agreed? Done?', 'tokens': [51000, 1074, 645, 4077, 11, 613, 732, 1074, 366, 11468, 516, 281, 312, 4077, 382, 731, 13, 29324, 292, 30, 18658, 30, 51450], 'temperature': 0.0, 'avg_logprob': -0.29691216605050225, 'compression_ratio': 1.6923076923076923, 'no_speech_prob': 0.13464868068695068}, {'id': 363, 'seek': 302304, 'start': 3023.04, 'end': 3033.36, 'text': ' Yes, yes. So, I can pick any two elements x and y from my set S. Right? So, it should', 'tokens': [50364, 1079, 11, 2086, 13, 407, 11, 286, 393, 1888, 604, 732, 4959, 2031, 293, 288, 490, 452, 992, 318, 13, 1779, 30, 407, 11, 309, 820, 50880], 'temperature': 0.0, 'avg_logprob': -0.17518741701856072, 'compression_ratio': 1.64375, 'no_speech_prob': 0.030296429991722107}, {'id': 364, 'seek': 302304, 'start': 3033.36, 'end': 3039.72, 'text': ' hold for any such x and y in my set X. So, if it holds for any domain of a function is', 'tokens': [50880, 1797, 337, 604, 1270, 2031, 293, 288, 294, 452, 992, 1783, 13, 407, 11, 498, 309, 9190, 337, 604, 9274, 295, 257, 2445, 307, 51198], 'temperature': 0.0, 'avg_logprob': -0.17518741701856072, 'compression_ratio': 1.64375, 'no_speech_prob': 0.030296429991722107}, {'id': 365, 'seek': 302304, 'start': 3039.72, 'end': 3045.08, 'text': ' this set S. So, if it works for any two elements in this domain, only then will I say that', 'tokens': [51198, 341, 992, 318, 13, 407, 11, 498, 309, 1985, 337, 604, 732, 4959, 294, 341, 9274, 11, 787, 550, 486, 286, 584, 300, 51466], 'temperature': 0.0, 'avg_logprob': -0.17518741701856072, 'compression_ratio': 1.64375, 'no_speech_prob': 0.030296429991722107}, {'id': 366, 'seek': 304508, 'start': 3045.08, 'end': 3052.08, 'text': ' it is a not a preserving function. No, no, no. f x and f y are also elements in this', 'tokens': [50364, 309, 307, 257, 406, 257, 33173, 2445, 13, 883, 11, 572, 11, 572, 13, 283, 2031, 293, 283, 288, 366, 611, 4959, 294, 341, 50714], 'temperature': 0.0, 'avg_logprob': -0.33665040823129505, 'compression_ratio': 1.3125, 'no_speech_prob': 0.15241360664367676}, {'id': 367, 'seek': 304508, 'start': 3059.44, 'end': 3066.44, 'text': ' set. Right? So, I am assuming my function f is closed. I mean let us let that makes', 'tokens': [51082, 992, 13, 1779, 30, 407, 11, 286, 669, 11926, 452, 2445, 283, 307, 5395, 13, 286, 914, 718, 505, 718, 300, 1669, 51432], 'temperature': 0.0, 'avg_logprob': -0.33665040823129505, 'compression_ratio': 1.3125, 'no_speech_prob': 0.15241360664367676}, {'id': 368, 'seek': 306644, 'start': 3066.44, 'end': 3073.44, 'text': ' things easier. So, let my domain and range of this function is the same set S. That is', 'tokens': [50364, 721, 3571, 13, 407, 11, 718, 452, 9274, 293, 3613, 295, 341, 2445, 307, 264, 912, 992, 318, 13, 663, 307, 50714], 'temperature': 0.0, 'avg_logprob': -0.26033246176583424, 'compression_ratio': 1.5340909090909092, 'no_speech_prob': 0.006270772777497768}, {'id': 369, 'seek': 306644, 'start': 3079.0, 'end': 3084.2400000000002, 'text': ' a easier thing to understand. So, then essentially I take x and y they also go somewhere in this', 'tokens': [50992, 257, 3571, 551, 281, 1223, 13, 407, 11, 550, 4476, 286, 747, 2031, 293, 288, 436, 611, 352, 4079, 294, 341, 51254], 'temperature': 0.0, 'avg_logprob': -0.26033246176583424, 'compression_ratio': 1.5340909090909092, 'no_speech_prob': 0.006270772777497768}, {'id': 370, 'seek': 306644, 'start': 3084.2400000000002, 'end': 3091.2400000000002, 'text': ' set, but they will also be related by the same ordering relation. Right? So, I can say', 'tokens': [51254, 992, 11, 457, 436, 486, 611, 312, 4077, 538, 264, 912, 21739, 9721, 13, 1779, 30, 407, 11, 286, 393, 584, 51604], 'temperature': 0.0, 'avg_logprob': -0.26033246176583424, 'compression_ratio': 1.5340909090909092, 'no_speech_prob': 0.006270772777497768}, {'id': 371, 'seek': 309644, 'start': 3097.4, 'end': 3104.4, 'text': ' can you give me an example of an order preserving function? Plus by any constant addition with', 'tokens': [50412, 393, 291, 976, 385, 364, 1365, 295, 364, 1668, 33173, 2445, 30, 7721, 538, 604, 5754, 4500, 365, 50762], 'temperature': 0.0, 'avg_logprob': -0.35218941370646156, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.06420756131410599}, {'id': 372, 'seek': 309644, 'start': 3109.7200000000003, 'end': 3116.7200000000003, 'text': ' any constant that gives me an order preserving function. Multiplication by positive number,', 'tokens': [51028, 604, 5754, 300, 2709, 385, 364, 1668, 33173, 2445, 13, 29238, 4770, 399, 538, 3353, 1230, 11, 51378], 'temperature': 0.0, 'avg_logprob': -0.35218941370646156, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.06420756131410599}, {'id': 373, 'seek': 309644, 'start': 3120.7200000000003, 'end': 3125.88, 'text': ' multiplication by negative number. It change the order between the elements. So, that is', 'tokens': [51578, 27290, 538, 3671, 1230, 13, 467, 1319, 264, 1668, 1296, 264, 4959, 13, 407, 11, 300, 307, 51836], 'temperature': 0.0, 'avg_logprob': -0.35218941370646156, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.06420756131410599}, {'id': 374, 'seek': 312588, 'start': 3125.88, 'end': 3132.88, 'text': ' not order preserving. Right? As simple as that. Log order preserving. Right? So, things', 'tokens': [50364, 406, 1668, 33173, 13, 1779, 30, 1018, 2199, 382, 300, 13, 10824, 1668, 33173, 13, 1779, 30, 407, 11, 721, 50714], 'temperature': 0.0, 'avg_logprob': -0.24321885039840918, 'compression_ratio': 1.537037037037037, 'no_speech_prob': 0.0009239564533345401}, {'id': 375, 'seek': 312588, 'start': 3137.28, 'end': 3144.28, 'text': ' can get skewed right badly, but it is still like as long as I the resultant elements the', 'tokens': [50934, 393, 483, 8756, 26896, 558, 13425, 11, 457, 309, 307, 920, 411, 382, 938, 382, 286, 264, 1874, 394, 4959, 264, 51284], 'temperature': 0.0, 'avg_logprob': -0.24321885039840918, 'compression_ratio': 1.537037037037037, 'no_speech_prob': 0.0009239564533345401}, {'id': 376, 'seek': 312588, 'start': 3145.6800000000003, 'end': 3152.6800000000003, 'text': ' order is the same I am good. So, next is commutativity of functions. So,', 'tokens': [51354, 1668, 307, 264, 912, 286, 669, 665, 13, 407, 11, 958, 307, 800, 325, 30142, 295, 6828, 13, 407, 11, 51704], 'temperature': 0.0, 'avg_logprob': -0.24321885039840918, 'compression_ratio': 1.537037037037037, 'no_speech_prob': 0.0009239564533345401}, {'id': 377, 'seek': 315268, 'start': 3153.2, 'end': 3160.2, 'text': ' I will say the functions f and g commute if I can apply them in any order and the result', 'tokens': [50390, 286, 486, 584, 264, 6828, 283, 293, 290, 36750, 498, 286, 393, 3079, 552, 294, 604, 1668, 293, 264, 1874, 50740], 'temperature': 0.0, 'avg_logprob': -0.1990335782368978, 'compression_ratio': 1.416, 'no_speech_prob': 0.0028857924044132233}, {'id': 378, 'seek': 315268, 'start': 3161.7599999999998, 'end': 3168.7599999999998, 'text': ' is the same. So, if I compute f of g of some x or g of f of x for any x then I would say', 'tokens': [50818, 307, 264, 912, 13, 407, 11, 498, 286, 14722, 283, 295, 290, 295, 512, 2031, 420, 290, 295, 283, 295, 2031, 337, 604, 2031, 550, 286, 576, 584, 51168], 'temperature': 0.0, 'avg_logprob': -0.1990335782368978, 'compression_ratio': 1.416, 'no_speech_prob': 0.0028857924044132233}, {'id': 379, 'seek': 316876, 'start': 3168.76, 'end': 3175.76, 'text': ' that f and g commute not so important actually. This is important. So, this is this is distributivity', 'tokens': [50364, 300, 283, 293, 290, 36750, 406, 370, 1021, 767, 13, 639, 307, 1021, 13, 407, 11, 341, 307, 341, 307, 4400, 325, 4253, 50714], 'temperature': 0.0, 'avg_logprob': -0.17888393004735312, 'compression_ratio': 1.48, 'no_speech_prob': 0.006439471151679754}, {'id': 380, 'seek': 316876, 'start': 3187.8, 'end': 3194.8, 'text': ' of functions over joints. Right? So, if I say my function distributes over my joint', 'tokens': [51316, 295, 6828, 670, 19949, 13, 1779, 30, 407, 11, 498, 286, 584, 452, 2445, 4400, 1819, 670, 452, 7225, 51666], 'temperature': 0.0, 'avg_logprob': -0.17888393004735312, 'compression_ratio': 1.48, 'no_speech_prob': 0.006439471151679754}, {'id': 381, 'seek': 319480, 'start': 3195.8, 'end': 3201.2400000000002, 'text': ' which means that I can take the joint of my elements first and then apply the function', 'tokens': [50414, 597, 1355, 300, 286, 393, 747, 264, 7225, 295, 452, 4959, 700, 293, 550, 3079, 264, 2445, 50686], 'temperature': 0.0, 'avg_logprob': -0.16132290784050438, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.0027043898589909077}, {'id': 382, 'seek': 319480, 'start': 3201.2400000000002, 'end': 3207.7200000000003, 'text': ' on it or I can do it the other way I just get the images of all my elements and then', 'tokens': [50686, 322, 309, 420, 286, 393, 360, 309, 264, 661, 636, 286, 445, 483, 264, 5267, 295, 439, 452, 4959, 293, 550, 51010], 'temperature': 0.0, 'avg_logprob': -0.16132290784050438, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.0027043898589909077}, {'id': 383, 'seek': 319480, 'start': 3207.7200000000003, 'end': 3213.28, 'text': ' take their joint. Both of them will give me the same result. If that happens I would say', 'tokens': [51010, 747, 641, 7225, 13, 6767, 295, 552, 486, 976, 385, 264, 912, 1874, 13, 759, 300, 2314, 286, 576, 584, 51288], 'temperature': 0.0, 'avg_logprob': -0.16132290784050438, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.0027043898589909077}, {'id': 384, 'seek': 319480, 'start': 3213.28, 'end': 3220.28, 'text': ' that it is a distributive function. See I have already switched to my semi lattice', 'tokens': [51288, 300, 309, 307, 257, 4400, 17254, 2445, 13, 3008, 286, 362, 1217, 16858, 281, 452, 12909, 34011, 51638], 'temperature': 0.0, 'avg_logprob': -0.16132290784050438, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.0027043898589909077}, {'id': 385, 'seek': 322028, 'start': 3220.28, 'end': 3227.28, 'text': ' thing. I did not even talk about meat. So, we will now start living in semi lattices.', 'tokens': [50364, 551, 13, 286, 630, 406, 754, 751, 466, 4615, 13, 407, 11, 321, 486, 586, 722, 2647, 294, 12909, 29025, 1473, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.25300632582770455, 'compression_ratio': 1.6125, 'no_speech_prob': 0.006341549102216959}, {'id': 386, 'seek': 322028, 'start': 3228.52, 'end': 3235.52, 'text': ' So, the next topic is about fixed points. So, remember what was the definition of fixed', 'tokens': [50776, 407, 11, 264, 958, 4829, 307, 466, 6806, 2793, 13, 407, 11, 1604, 437, 390, 264, 7123, 295, 6806, 51126], 'temperature': 0.0, 'avg_logprob': -0.25300632582770455, 'compression_ratio': 1.6125, 'no_speech_prob': 0.006341549102216959}, {'id': 387, 'seek': 322028, 'start': 3237.6400000000003, 'end': 3244.6400000000003, 'text': ' point? I say that if I have an element E. So, who remembers the definition? Yes. So,', 'tokens': [51232, 935, 30, 286, 584, 300, 498, 286, 362, 364, 4478, 462, 13, 407, 11, 567, 26228, 264, 7123, 30, 1079, 13, 407, 11, 51582], 'temperature': 0.0, 'avg_logprob': -0.25300632582770455, 'compression_ratio': 1.6125, 'no_speech_prob': 0.006341549102216959}, {'id': 388, 'seek': 324464, 'start': 3244.64, 'end': 3251.64, 'text': ' if I say x 0 is a fixed point of some function f it means that if I apply x 0 to f I would', 'tokens': [50364, 498, 286, 584, 2031, 1958, 307, 257, 6806, 935, 295, 512, 2445, 283, 309, 1355, 300, 498, 286, 3079, 2031, 1958, 281, 283, 286, 576, 50714], 'temperature': 0.0, 'avg_logprob': -0.17021253373887804, 'compression_ratio': 1.4596774193548387, 'no_speech_prob': 0.004002389498054981}, {'id': 389, 'seek': 324464, 'start': 3262.8799999999997, 'end': 3269.8799999999997, 'text': ' end up getting x 0. So, what it means is that like if I have this element x 0 then I would', 'tokens': [51276, 917, 493, 1242, 2031, 1958, 13, 407, 11, 437, 309, 1355, 307, 300, 411, 498, 286, 362, 341, 4478, 2031, 1958, 550, 286, 576, 51626], 'temperature': 0.0, 'avg_logprob': -0.17021253373887804, 'compression_ratio': 1.4596774193548387, 'no_speech_prob': 0.004002389498054981}, {'id': 390, 'seek': 327464, 'start': 3274.64, 'end': 3281.64, 'text': ' get x 0. I apply f to it. It will go back and f of x 0 will again come back to the same', 'tokens': [50364, 483, 2031, 1958, 13, 286, 3079, 283, 281, 309, 13, 467, 486, 352, 646, 293, 283, 295, 2031, 1958, 486, 797, 808, 646, 281, 264, 912, 50714], 'temperature': 0.0, 'avg_logprob': -0.41648796626499723, 'compression_ratio': 1.75, 'no_speech_prob': 0.008050031960010529}, {'id': 391, 'seek': 327464, 'start': 3281.68, 'end': 3288.68, 'text': ' point. So, the next definition is something called a prefix point. Prefix point means', 'tokens': [50716, 935, 13, 407, 11, 264, 958, 7123, 307, 746, 1219, 257, 46969, 935, 13, 6001, 69, 970, 935, 1355, 51066], 'temperature': 0.0, 'avg_logprob': -0.41648796626499723, 'compression_ratio': 1.75, 'no_speech_prob': 0.008050031960010529}, {'id': 392, 'seek': 327464, 'start': 3294.92, 'end': 3301.92, 'text': ' that if I have an x 0, I would get x 0. So, I would get x 0. So, I would get x 0. So,', 'tokens': [51378, 300, 498, 286, 362, 364, 2031, 1958, 11, 286, 576, 483, 2031, 1958, 13, 407, 11, 286, 576, 483, 2031, 1958, 13, 407, 11, 286, 576, 483, 2031, 1958, 13, 407, 11, 51728], 'temperature': 0.0, 'avg_logprob': -0.41648796626499723, 'compression_ratio': 1.75, 'no_speech_prob': 0.008050031960010529}, {'id': 393, 'seek': 330464, 'start': 3305.48, 'end': 3312.48, 'text': ' if I apply f to it, it will always jump to an element higher. So, now here we have this', 'tokens': [50406, 498, 286, 3079, 283, 281, 309, 11, 309, 486, 1009, 3012, 281, 364, 4478, 2946, 13, 407, 11, 586, 510, 321, 362, 341, 50756], 'temperature': 0.0, 'avg_logprob': -0.14299450457935603, 'compression_ratio': 1.5654761904761905, 'no_speech_prob': 0.0014082611305639148}, {'id': 394, 'seek': 330464, 'start': 3318.52, 'end': 3325.52, 'text': ' relation between the element and its image. Here we are saying that if I apply my f to', 'tokens': [51058, 9721, 1296, 264, 4478, 293, 1080, 3256, 13, 1692, 321, 366, 1566, 300, 498, 286, 3079, 452, 283, 281, 51408], 'temperature': 0.0, 'avg_logprob': -0.14299450457935603, 'compression_ratio': 1.5654761904761905, 'no_speech_prob': 0.0014082611305639148}, {'id': 395, 'seek': 330464, 'start': 3325.7999999999997, 'end': 3332.7999999999997, 'text': ' this x 0 then it will always give me something larger than f 0. Similarly, I can come up', 'tokens': [51422, 341, 2031, 1958, 550, 309, 486, 1009, 976, 385, 746, 4833, 813, 283, 1958, 13, 13157, 11, 286, 393, 808, 493, 51772], 'temperature': 0.0, 'avg_logprob': -0.14299450457935603, 'compression_ratio': 1.5654761904761905, 'no_speech_prob': 0.0014082611305639148}, {'id': 396, 'seek': 333280, 'start': 3333.8, 'end': 3340.4, 'text': ' with something called a postfix point which means that if I have an x 0 and if I apply', 'tokens': [50414, 365, 746, 1219, 257, 2183, 69, 970, 935, 597, 1355, 300, 498, 286, 362, 364, 2031, 1958, 293, 498, 286, 3079, 50744], 'temperature': 0.0, 'avg_logprob': -0.18388105898487325, 'compression_ratio': 1.3700787401574803, 'no_speech_prob': 0.001168703311122954}, {'id': 397, 'seek': 333280, 'start': 3340.4, 'end': 3347.4, 'text': ' x 0 to this I will end up getting an element which is lower than x 0. So, any questions', 'tokens': [50744, 2031, 1958, 281, 341, 286, 486, 917, 493, 1242, 364, 4478, 597, 307, 3126, 813, 2031, 1958, 13, 407, 11, 604, 1651, 51094], 'temperature': 0.0, 'avg_logprob': -0.18388105898487325, 'compression_ratio': 1.3700787401574803, 'no_speech_prob': 0.001168703311122954}, {'id': 398, 'seek': 334740, 'start': 3347.4, 'end': 3363.64, 'text': ' till all this business? Now is the question why now is the place where we will start', 'tokens': [50364, 4288, 439, 341, 1606, 30, 823, 307, 264, 1168, 983, 586, 307, 264, 1081, 689, 321, 486, 722, 51176], 'temperature': 0.0, 'avg_logprob': -0.34794478946261936, 'compression_ratio': 1.2952380952380953, 'no_speech_prob': 0.0066764759831130505}, {'id': 399, 'seek': 334740, 'start': 3363.64, 'end': 3370.64, 'text': ' at looking at why we did we do so many definitions.', 'tokens': [51176, 412, 1237, 412, 983, 321, 630, 321, 360, 370, 867, 21988, 13, 51526], 'temperature': 0.0, 'avg_logprob': -0.34794478946261936, 'compression_ratio': 1.2952380952380953, 'no_speech_prob': 0.0066764759831130505}, {'id': 400, 'seek': 337064, 'start': 3370.64, 'end': 3377.64, 'text': ' For the fix point. It is a different x 0. So, I am saying so see here what did I say?', 'tokens': [50364, 1171, 264, 3191, 935, 13, 467, 307, 257, 819, 2031, 1958, 13, 407, 11, 286, 669, 1566, 370, 536, 510, 437, 630, 286, 584, 30, 50714], 'temperature': 0.0, 'avg_logprob': -0.24009564139626244, 'compression_ratio': 1.3934426229508197, 'no_speech_prob': 0.14752495288848877}, {'id': 401, 'seek': 337064, 'start': 3385.8399999999997, 'end': 3392.8399999999997, 'text': ' I said that x 0 is the fix point of f. So, it is a relation between its both x 0 and', 'tokens': [51124, 286, 848, 300, 2031, 1958, 307, 264, 3191, 935, 295, 283, 13, 407, 11, 309, 307, 257, 9721, 1296, 1080, 1293, 2031, 1958, 293, 51474], 'temperature': 0.0, 'avg_logprob': -0.24009564139626244, 'compression_ratio': 1.3934426229508197, 'no_speech_prob': 0.14752495288848877}, {'id': 402, 'seek': 339284, 'start': 3393.84, 'end': 3400.84, 'text': ' f. So, I say x 0 is a fix point of f if I apply x 0 to f it gives me x 0 back. If it', 'tokens': [50414, 283, 13, 407, 11, 286, 584, 2031, 1958, 307, 257, 3191, 935, 295, 283, 498, 286, 3079, 2031, 1958, 281, 283, 309, 2709, 385, 2031, 1958, 646, 13, 759, 309, 50764], 'temperature': 0.0, 'avg_logprob': -0.18630737350100562, 'compression_ratio': 1.832167832167832, 'no_speech_prob': 0.009677709080278873}, {'id': 403, 'seek': 339284, 'start': 3402.6800000000003, 'end': 3409.6800000000003, 'text': ' gives me something for some other x 0 or some other let us say x 1 if I apply f 0 and I', 'tokens': [50856, 2709, 385, 746, 337, 512, 661, 2031, 1958, 420, 512, 661, 718, 505, 584, 2031, 502, 498, 286, 3079, 283, 1958, 293, 286, 51206], 'temperature': 0.0, 'avg_logprob': -0.18630737350100562, 'compression_ratio': 1.832167832167832, 'no_speech_prob': 0.009677709080278873}, {'id': 404, 'seek': 339284, 'start': 3411.2000000000003, 'end': 3418.2000000000003, 'text': ' if I apply f to it if I get something bigger then x 1 is a prefix point. If there is some', 'tokens': [51282, 498, 286, 3079, 283, 281, 309, 498, 286, 483, 746, 3801, 550, 2031, 502, 307, 257, 46969, 935, 13, 759, 456, 307, 512, 51632], 'temperature': 0.0, 'avg_logprob': -0.18630737350100562, 'compression_ratio': 1.832167832167832, 'no_speech_prob': 0.009677709080278873}, {'id': 405, 'seek': 341820, 'start': 3419.2, 'end': 3426.2, 'text': ' x 2 if I apply f to x 2 if I get something lower then x 2 is a postfix point. Now of', 'tokens': [50414, 2031, 568, 498, 286, 3079, 283, 281, 2031, 568, 498, 286, 483, 746, 3126, 550, 2031, 568, 307, 257, 2183, 69, 970, 935, 13, 823, 295, 50764], 'temperature': 0.0, 'avg_logprob': -0.16087834458602102, 'compression_ratio': 1.7207792207792207, 'no_speech_prob': 0.002667279914021492}, {'id': 406, 'seek': 341820, 'start': 3428.12, 'end': 3433.12, 'text': ' course, any element in this set I can classify it as a fix point prefix point or postfix', 'tokens': [50860, 1164, 11, 604, 4478, 294, 341, 992, 286, 393, 33872, 309, 382, 257, 3191, 935, 46969, 935, 420, 2183, 69, 970, 51110], 'temperature': 0.0, 'avg_logprob': -0.16087834458602102, 'compression_ratio': 1.7207792207792207, 'no_speech_prob': 0.002667279914021492}, {'id': 407, 'seek': 341820, 'start': 3433.12, 'end': 3440.12, 'text': ' point. So, note that fix points are both prefix points and postfix points this is less than', 'tokens': [51110, 935, 13, 407, 11, 3637, 300, 3191, 2793, 366, 1293, 46969, 2793, 293, 2183, 69, 970, 2793, 341, 307, 1570, 813, 51460], 'temperature': 0.0, 'avg_logprob': -0.16087834458602102, 'compression_ratio': 1.7207792207792207, 'no_speech_prob': 0.002667279914021492}, {'id': 408, 'seek': 344012, 'start': 3441.12, 'end': 3448.12, 'text': ' equal to. So, if you diagrammatically want to see it looks like this. So, you have your', 'tokens': [50414, 2681, 281, 13, 407, 11, 498, 291, 10686, 76, 5030, 528, 281, 536, 309, 1542, 411, 341, 13, 407, 11, 291, 362, 428, 50764], 'temperature': 0.0, 'avg_logprob': -0.20794421604701452, 'compression_ratio': 1.6838709677419355, 'no_speech_prob': 0.002211783779785037}, {'id': 409, 'seek': 344012, 'start': 3452.8399999999997, 'end': 3459.8399999999997, 'text': ' bottom here you have your top here and all these things let us say these are all prefix', 'tokens': [51000, 2767, 510, 291, 362, 428, 1192, 510, 293, 439, 613, 721, 718, 505, 584, 613, 366, 439, 46969, 51350], 'temperature': 0.0, 'avg_logprob': -0.20794421604701452, 'compression_ratio': 1.6838709677419355, 'no_speech_prob': 0.002211783779785037}, {'id': 410, 'seek': 344012, 'start': 3460.68, 'end': 3467.68, 'text': ' points and all these are my postfix points. So, it should cover it properly. So, this', 'tokens': [51392, 2793, 293, 439, 613, 366, 452, 2183, 69, 970, 2793, 13, 407, 11, 309, 820, 2060, 309, 6108, 13, 407, 11, 341, 51742], 'temperature': 0.0, 'avg_logprob': -0.20794421604701452, 'compression_ratio': 1.6838709677419355, 'no_speech_prob': 0.002211783779785037}, {'id': 411, 'seek': 347012, 'start': 3470.2, 'end': 3477.2, 'text': ' is f and these are the elements which are my fix points. So, here if I apply f to any', 'tokens': [50368, 307, 283, 293, 613, 366, 264, 4959, 597, 366, 452, 3191, 2793, 13, 407, 11, 510, 498, 286, 3079, 283, 281, 604, 50718], 'temperature': 0.0, 'avg_logprob': -0.28242259190000335, 'compression_ratio': 1.6159420289855073, 'no_speech_prob': 0.004716022405773401}, {'id': 412, 'seek': 347012, 'start': 3481.68, 'end': 3486.72, 'text': ' element it should climb higher if I apply anything to this it climbs lower goes lower', 'tokens': [50942, 4478, 309, 820, 10724, 2946, 498, 286, 3079, 1340, 281, 341, 309, 48439, 3126, 1709, 3126, 51194], 'temperature': 0.0, 'avg_logprob': -0.28242259190000335, 'compression_ratio': 1.6159420289855073, 'no_speech_prob': 0.004716022405773401}, {'id': 413, 'seek': 347012, 'start': 3486.72, 'end': 3493.72, 'text': ' and if I apply anybody to this it just stays there.', 'tokens': [51194, 293, 498, 286, 3079, 4472, 281, 341, 309, 445, 10834, 456, 13, 51544], 'temperature': 0.0, 'avg_logprob': -0.28242259190000335, 'compression_ratio': 1.6159420289855073, 'no_speech_prob': 0.004716022405773401}, {'id': 414, 'seek': 349372, 'start': 3494.72, 'end': 3501.72, 'text': ' So, now let us come to back to our data flow analysis let us come to our reaching definitions', 'tokens': [50414, 407, 11, 586, 718, 505, 808, 281, 646, 281, 527, 1412, 3095, 5215, 718, 505, 808, 281, 527, 9906, 21988, 50764], 'temperature': 0.0, 'avg_logprob': -0.21759930900905444, 'compression_ratio': 1.4796747967479675, 'no_speech_prob': 0.011618901044130325}, {'id': 415, 'seek': 349372, 'start': 3505.7999999999997, 'end': 3512.7999999999997, 'text': ' problem. So, now with all these things think of your set of data flow facts what was the', 'tokens': [50968, 1154, 13, 407, 11, 586, 365, 439, 613, 721, 519, 295, 428, 992, 295, 1412, 3095, 9130, 437, 390, 264, 51318], 'temperature': 0.0, 'avg_logprob': -0.21759930900905444, 'compression_ratio': 1.4796747967479675, 'no_speech_prob': 0.011618901044130325}, {'id': 416, 'seek': 351280, 'start': 3512.8, 'end': 3519.8, 'text': ' set of set of data flow facts in reaching definitions? What was it what was it? Remember', 'tokens': [50364, 992, 295, 992, 295, 1412, 3095, 9130, 294, 9906, 21988, 30, 708, 390, 309, 437, 390, 309, 30, 5459, 50714], 'temperature': 0.0, 'avg_logprob': -0.31480698252833167, 'compression_ratio': 1.5636363636363637, 'no_speech_prob': 0.004827916156500578}, {'id': 417, 'seek': 351280, 'start': 3528.2000000000003, 'end': 3535.2000000000003, 'text': ' the what was the solution look like? What is it? Set of all definitions and what is', 'tokens': [51134, 264, 437, 390, 264, 3827, 574, 411, 30, 708, 307, 309, 30, 8928, 295, 439, 21988, 293, 437, 307, 51484], 'temperature': 0.0, 'avg_logprob': -0.31480698252833167, 'compression_ratio': 1.5636363636363637, 'no_speech_prob': 0.004827916156500578}, {'id': 418, 'seek': 354280, 'start': 3542.8, 'end': 3549.8, 'text': ' it? What did we want to compute? At every point I wanted to compute what are the what', 'tokens': [50364, 309, 30, 708, 630, 321, 528, 281, 14722, 30, 1711, 633, 935, 286, 1415, 281, 14722, 437, 366, 264, 437, 50714], 'temperature': 0.0, 'avg_logprob': -0.17233210802078247, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.0028316236566752195}, {'id': 419, 'seek': 354280, 'start': 3551.1200000000003, 'end': 3557.36, 'text': ' is the reaching definitions reaching a particular point? So, think about the solution at let', 'tokens': [50780, 307, 264, 9906, 21988, 9906, 257, 1729, 935, 30, 407, 11, 519, 466, 264, 3827, 412, 718, 51092], 'temperature': 0.0, 'avg_logprob': -0.17233210802078247, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.0028316236566752195}, {'id': 420, 'seek': 354280, 'start': 3557.36, 'end': 3563.5600000000004, 'text': ' us say to begin with I have a very simple problem say simple analysis which is trying', 'tokens': [51092, 505, 584, 281, 1841, 365, 286, 362, 257, 588, 2199, 1154, 584, 2199, 5215, 597, 307, 1382, 51402], 'temperature': 0.0, 'avg_logprob': -0.17233210802078247, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.0028316236566752195}, {'id': 421, 'seek': 354280, 'start': 3563.5600000000004, 'end': 3570.4, 'text': ' to compute the reaching definitions only for one variable in the program just to make things', 'tokens': [51402, 281, 14722, 264, 9906, 21988, 787, 337, 472, 7006, 294, 264, 1461, 445, 281, 652, 721, 51744], 'temperature': 0.0, 'avg_logprob': -0.17233210802078247, 'compression_ratio': 1.7163461538461537, 'no_speech_prob': 0.0028316236566752195}, {'id': 422, 'seek': 357040, 'start': 3570.4, 'end': 3573.32, 'text': ' simpler we will see what happens to extended case.', 'tokens': [50364, 18587, 321, 486, 536, 437, 2314, 281, 10913, 1389, 13, 50510], 'temperature': 0.0, 'avg_logprob': -0.15955958495268951, 'compression_ratio': 1.5979899497487438, 'no_speech_prob': 0.0012032402446493506}, {'id': 423, 'seek': 357040, 'start': 3573.32, 'end': 3579.12, 'text': ' To begin with let us assume that I have only one variable in the program that I am interested', 'tokens': [50510, 1407, 1841, 365, 718, 505, 6552, 300, 286, 362, 787, 472, 7006, 294, 264, 1461, 300, 286, 669, 3102, 50800], 'temperature': 0.0, 'avg_logprob': -0.15955958495268951, 'compression_ratio': 1.5979899497487438, 'no_speech_prob': 0.0012032402446493506}, {'id': 424, 'seek': 357040, 'start': 3579.12, 'end': 3586.12, 'text': ' in for computing the reaching definitions for that particular variable at a program', 'tokens': [50800, 294, 337, 15866, 264, 9906, 21988, 337, 300, 1729, 7006, 412, 257, 1461, 51150], 'temperature': 0.0, 'avg_logprob': -0.15955958495268951, 'compression_ratio': 1.5979899497487438, 'no_speech_prob': 0.0012032402446493506}, {'id': 425, 'seek': 357040, 'start': 3586.56, 'end': 3593.56, 'text': ' point what all can be can the solutions look like? So, that is going to be my set of like', 'tokens': [51172, 935, 437, 439, 393, 312, 393, 264, 6547, 574, 411, 30, 407, 11, 300, 307, 516, 281, 312, 452, 992, 295, 411, 51522], 'temperature': 0.0, 'avg_logprob': -0.15955958495268951, 'compression_ratio': 1.5979899497487438, 'no_speech_prob': 0.0012032402446493506}, {'id': 426, 'seek': 359356, 'start': 3594.56, 'end': 3601.56, 'text': ' my set S over which I am doing my computation I am trying to figure out let us go back.', 'tokens': [50414, 452, 992, 318, 670, 597, 286, 669, 884, 452, 24903, 286, 669, 1382, 281, 2573, 484, 718, 505, 352, 646, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.172377242416632, 'compression_ratio': 1.51875, 'no_speech_prob': 0.0032991040498018265}, {'id': 427, 'seek': 359356, 'start': 3603.64, 'end': 3610.54, 'text': ' So, I am given a program point I would like to find out what will the solution at this', 'tokens': [50868, 407, 11, 286, 669, 2212, 257, 1461, 935, 286, 576, 411, 281, 915, 484, 437, 486, 264, 3827, 412, 341, 51213], 'temperature': 0.0, 'avg_logprob': -0.172377242416632, 'compression_ratio': 1.51875, 'no_speech_prob': 0.0032991040498018265}, {'id': 428, 'seek': 359356, 'start': 3610.54, 'end': 3617.54, 'text': ' location for reaching definitions look like? What will it look like?', 'tokens': [51213, 4914, 337, 9906, 21988, 574, 411, 30, 708, 486, 309, 574, 411, 30, 51563], 'temperature': 0.0, 'avg_logprob': -0.172377242416632, 'compression_ratio': 1.51875, 'no_speech_prob': 0.0032991040498018265}, {'id': 429, 'seek': 362356, 'start': 3623.68, 'end': 3630.68, 'text': ' It is going to be. So, it is going to be a set of definitions right. So, what is the', 'tokens': [50370, 467, 307, 516, 281, 312, 13, 407, 11, 309, 307, 516, 281, 312, 257, 992, 295, 21988, 558, 13, 407, 11, 437, 307, 264, 50720], 'temperature': 0.0, 'avg_logprob': -0.22322507888551743, 'compression_ratio': 1.6265822784810127, 'no_speech_prob': 0.006880264263600111}, {'id': 430, 'seek': 362356, 'start': 3637.36, 'end': 3643.96, 'text': ' possible set of solutions from which this solution has to be extracted? So, now think', 'tokens': [51054, 1944, 992, 295, 6547, 490, 597, 341, 3827, 575, 281, 312, 34086, 30, 407, 11, 586, 519, 51384], 'temperature': 0.0, 'avg_logprob': -0.22322507888551743, 'compression_ratio': 1.6265822784810127, 'no_speech_prob': 0.006880264263600111}, {'id': 431, 'seek': 362356, 'start': 3643.96, 'end': 3648.52, 'text': ' of a like think more mathematically think about that I have extracting this particular', 'tokens': [51384, 295, 257, 411, 519, 544, 44003, 519, 466, 300, 286, 362, 49844, 341, 1729, 51612], 'temperature': 0.0, 'avg_logprob': -0.22322507888551743, 'compression_ratio': 1.6265822784810127, 'no_speech_prob': 0.006880264263600111}, {'id': 432, 'seek': 364852, 'start': 3648.52, 'end': 3654.44, 'text': ' solution D1 D5 right. So, what is this possible space of solutions from which I am extracting', 'tokens': [50364, 3827, 413, 16, 413, 20, 558, 13, 407, 11, 437, 307, 341, 1944, 1901, 295, 6547, 490, 597, 286, 669, 49844, 50660], 'temperature': 0.0, 'avg_logprob': -0.31781864166259766, 'compression_ratio': 1.3008849557522124, 'no_speech_prob': 0.05329999700188637}, {'id': 433, 'seek': 364852, 'start': 3654.44, 'end': 3661.44, 'text': ' this particular solution? Which are which is all the?', 'tokens': [50660, 341, 1729, 3827, 30, 3013, 366, 597, 307, 439, 264, 30, 51010], 'temperature': 0.0, 'avg_logprob': -0.31781864166259766, 'compression_ratio': 1.3008849557522124, 'no_speech_prob': 0.05329999700188637}, {'id': 434, 'seek': 366144, 'start': 3661.44, 'end': 3668.44, 'text': ' Not. So, let us let us take a set if you are having problem explaining. So, let us', 'tokens': [50364, 1726, 13, 407, 11, 718, 505, 718, 505, 747, 257, 992, 498, 291, 366, 1419, 1154, 13468, 13, 407, 11, 718, 505, 50714], 'temperature': 0.0, 'avg_logprob': -0.2301075988345676, 'compression_ratio': 1.572289156626506, 'no_speech_prob': 0.009382057934999466}, {'id': 435, 'seek': 366144, 'start': 3678.2000000000003, 'end': 3685.04, 'text': ' say D1 D2 D3 this is the set of elements this set of definitions then what is the set from', 'tokens': [51202, 584, 413, 16, 413, 17, 413, 18, 341, 307, 264, 992, 295, 4959, 341, 992, 295, 21988, 550, 437, 307, 264, 992, 490, 51544], 'temperature': 0.0, 'avg_logprob': -0.2301075988345676, 'compression_ratio': 1.572289156626506, 'no_speech_prob': 0.009382057934999466}, {'id': 436, 'seek': 366144, 'start': 3685.04, 'end': 3690.16, 'text': ' which this particular solution will come out? Yes the power set of this right. So, what', 'tokens': [51544, 597, 341, 1729, 3827, 486, 808, 484, 30, 1079, 264, 1347, 992, 295, 341, 558, 13, 407, 11, 437, 51800], 'temperature': 0.0, 'avg_logprob': -0.2301075988345676, 'compression_ratio': 1.572289156626506, 'no_speech_prob': 0.009382057934999466}, {'id': 437, 'seek': 369016, 'start': 3690.16, 'end': 3693.7999999999997, 'text': ' will that look like? It can either be empty set there is no definition reaching here or', 'tokens': [50364, 486, 300, 574, 411, 30, 467, 393, 2139, 312, 6707, 992, 456, 307, 572, 7123, 9906, 510, 420, 50546], 'temperature': 0.0, 'avg_logprob': -0.16035505294799804, 'compression_ratio': 1.8020304568527918, 'no_speech_prob': 0.0064522637985646725}, {'id': 438, 'seek': 369016, 'start': 3693.7999999999997, 'end': 3700.7999999999997, 'text': ' it can be single ten set there is either D1 or D2 or D3 coming here or it can be sets', 'tokens': [50546, 309, 393, 312, 2167, 2064, 992, 456, 307, 2139, 413, 16, 420, 413, 17, 420, 413, 18, 1348, 510, 420, 309, 393, 312, 6352, 50896], 'temperature': 0.0, 'avg_logprob': -0.16035505294799804, 'compression_ratio': 1.8020304568527918, 'no_speech_prob': 0.0064522637985646725}, {'id': 439, 'seek': 369016, 'start': 3702.08, 'end': 3709.08, 'text': ' of twos D1 D2 D2 D3 these guys coming in now there is only one remaining or it can be the', 'tokens': [50960, 295, 683, 329, 413, 16, 413, 17, 413, 17, 413, 18, 613, 1074, 1348, 294, 586, 456, 307, 787, 472, 8877, 420, 309, 393, 312, 264, 51310], 'temperature': 0.0, 'avg_logprob': -0.16035505294799804, 'compression_ratio': 1.8020304568527918, 'no_speech_prob': 0.0064522637985646725}, {'id': 440, 'seek': 369016, 'start': 3712.7599999999998, 'end': 3719.7599999999998, 'text': ' whole set D1 D2 D3 all definitions reach here right. So, this is my space of solutions from', 'tokens': [51494, 1379, 992, 413, 16, 413, 17, 413, 18, 439, 21988, 2524, 510, 558, 13, 407, 11, 341, 307, 452, 1901, 295, 6547, 490, 51844], 'temperature': 0.0, 'avg_logprob': -0.16035505294799804, 'compression_ratio': 1.8020304568527918, 'no_speech_prob': 0.0064522637985646725}, {'id': 441, 'seek': 372016, 'start': 3720.16, 'end': 3724.8399999999997, 'text': ' this solution I will eventually get one element which will be the solution at this particular', 'tokens': [50364, 341, 3827, 286, 486, 4728, 483, 472, 4478, 597, 486, 312, 264, 3827, 412, 341, 1729, 50598], 'temperature': 0.0, 'avg_logprob': -0.2279633080087057, 'compression_ratio': 1.6889952153110048, 'no_speech_prob': 0.001257141469977796}, {'id': 442, 'seek': 372016, 'start': 3724.8399999999997, 'end': 3731.8399999999997, 'text': ' program this is going to be my S from which I will get a solution. Now we will we are', 'tokens': [50598, 1461, 341, 307, 516, 281, 312, 452, 318, 490, 597, 286, 486, 483, 257, 3827, 13, 823, 321, 486, 321, 366, 50948], 'temperature': 0.0, 'avg_logprob': -0.2279633080087057, 'compression_ratio': 1.6889952153110048, 'no_speech_prob': 0.001257141469977796}, {'id': 443, 'seek': 372016, 'start': 3732.44, 'end': 3736.56, 'text': ' switching to a very abstract very mathematical domain right now we are not even. So, now', 'tokens': [50978, 16493, 281, 257, 588, 12649, 588, 18894, 9274, 558, 586, 321, 366, 406, 754, 13, 407, 11, 586, 51184], 'temperature': 0.0, 'avg_logprob': -0.2279633080087057, 'compression_ratio': 1.6889952153110048, 'no_speech_prob': 0.001257141469977796}, {'id': 444, 'seek': 372016, 'start': 3736.56, 'end': 3743.56, 'text': ' this is a possible solution to the set of equations that I came about next time last', 'tokens': [51184, 341, 307, 257, 1944, 3827, 281, 264, 992, 295, 11787, 300, 286, 1361, 466, 958, 565, 1036, 51534], 'temperature': 0.0, 'avg_logprob': -0.2279633080087057, 'compression_ratio': 1.6889952153110048, 'no_speech_prob': 0.001257141469977796}, {'id': 445, 'seek': 374356, 'start': 3743.56, 'end': 3750.6, 'text': ' class right. Now can I so can I think about how to put it. So, how do I how do I think', 'tokens': [50366, 1508, 558, 13, 823, 393, 286, 370, 393, 286, 519, 466, 577, 281, 829, 309, 13, 407, 11, 577, 360, 286, 577, 360, 286, 519, 50716], 'temperature': 0.0, 'avg_logprob': -0.3754711832318987, 'compression_ratio': 1.2112676056338028, 'no_speech_prob': 0.04771186783909798}, {'id': 446, 'seek': 377356, 'start': 3774.04, 'end': 3781.04, 'text': ' so let us say this particular ok. So, think about this particular case. So, this particular', 'tokens': [50388, 370, 718, 505, 584, 341, 1729, 3133, 13, 407, 11, 519, 466, 341, 1729, 1389, 13, 407, 11, 341, 1729, 50738], 'temperature': 0.0, 'avg_logprob': -0.1944096932044396, 'compression_ratio': 1.71875, 'no_speech_prob': 0.019022535532712936}, {'id': 447, 'seek': 377356, 'start': 3781.6, 'end': 3788.6, 'text': ' at in of a particular basic block I am trying to compute this solution to begin with how', 'tokens': [50766, 412, 294, 295, 257, 1729, 3875, 3461, 286, 669, 1382, 281, 14722, 341, 3827, 281, 1841, 365, 577, 51116], 'temperature': 0.0, 'avg_logprob': -0.1944096932044396, 'compression_ratio': 1.71875, 'no_speech_prob': 0.019022535532712936}, {'id': 448, 'seek': 377356, 'start': 3789.0, 'end': 3796.0, 'text': ' did I initialize it empty right to begin with it was empty then I would have maybe one element', 'tokens': [51136, 630, 286, 5883, 1125, 309, 6707, 558, 281, 1841, 365, 309, 390, 6707, 550, 286, 576, 362, 1310, 472, 4478, 51486], 'temperature': 0.0, 'avg_logprob': -0.1944096932044396, 'compression_ratio': 1.71875, 'no_speech_prob': 0.019022535532712936}, {'id': 449, 'seek': 380356, 'start': 3803.68, 'end': 3810.68, 'text': ' one arm became something came from one arm maybe D1 came from one arm right then maybe', 'tokens': [50370, 472, 3726, 3062, 746, 1361, 490, 472, 3726, 1310, 413, 16, 1361, 490, 472, 3726, 558, 550, 1310, 50720], 'temperature': 0.0, 'avg_logprob': -0.16642809475169462, 'compression_ratio': 1.8421052631578947, 'no_speech_prob': 0.002175285015255213}, {'id': 450, 'seek': 380356, 'start': 3810.68, 'end': 3816.6, 'text': ' D2 came from the other arm maybe this also changed and brought in D3 also. So, the set', 'tokens': [50720, 413, 17, 1361, 490, 264, 661, 3726, 1310, 341, 611, 3105, 293, 3038, 294, 413, 18, 611, 13, 407, 11, 264, 992, 51016], 'temperature': 0.0, 'avg_logprob': -0.16642809475169462, 'compression_ratio': 1.8421052631578947, 'no_speech_prob': 0.002175285015255213}, {'id': 451, 'seek': 380356, 'start': 3816.6, 'end': 3822.92, 'text': ' of val the set of elements from this set that you see here can you see some relation among', 'tokens': [51016, 295, 1323, 264, 992, 295, 4959, 490, 341, 992, 300, 291, 536, 510, 393, 291, 536, 512, 9721, 3654, 51332], 'temperature': 0.0, 'avg_logprob': -0.16642809475169462, 'compression_ratio': 1.8421052631578947, 'no_speech_prob': 0.002175285015255213}, {'id': 452, 'seek': 380356, 'start': 3822.92, 'end': 3829.92, 'text': ' those elements just try to think about how the this thing is growing how the elements', 'tokens': [51332, 729, 4959, 445, 853, 281, 519, 466, 577, 264, 341, 551, 307, 4194, 577, 264, 4959, 51682], 'temperature': 0.0, 'avg_logprob': -0.16642809475169462, 'compression_ratio': 1.8421052631578947, 'no_speech_prob': 0.002175285015255213}, {'id': 453, 'seek': 382992, 'start': 3829.92, 'end': 3836.92, 'text': ' the how this particular solution is changing at every iteration of my fixed point iteration.', 'tokens': [50364, 264, 577, 341, 1729, 3827, 307, 4473, 412, 633, 24784, 295, 452, 6806, 935, 24784, 13, 50714], 'temperature': 0.0, 'avg_logprob': -0.1977199496644916, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.0025020104367285967}, {'id': 454, 'seek': 382992, 'start': 3840.12, 'end': 3845.12, 'text': ' What is increasing size is increasing, but anything more can you see about the elements.', 'tokens': [50874, 708, 307, 5662, 2744, 307, 5662, 11, 457, 1340, 544, 393, 291, 536, 466, 264, 4959, 13, 51124], 'temperature': 0.0, 'avg_logprob': -0.1977199496644916, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.0025020104367285967}, {'id': 455, 'seek': 382992, 'start': 3845.12, 'end': 3852.12, 'text': ' So, let us say in one first time I got a solution S0 second time I got a solution S1 these are', 'tokens': [51124, 407, 11, 718, 505, 584, 294, 472, 700, 565, 286, 658, 257, 3827, 318, 15, 1150, 565, 286, 658, 257, 3827, 318, 16, 613, 366, 51474], 'temperature': 0.0, 'avg_logprob': -0.1977199496644916, 'compression_ratio': 1.6046511627906976, 'no_speech_prob': 0.0025020104367285967}, {'id': 456, 'seek': 385212, 'start': 3852.12, 'end': 3859.12, 'text': ' all subsets of S surely right can I find some relation between let us say these are', 'tokens': [50364, 439, 2090, 1385, 295, 318, 11468, 558, 393, 286, 915, 512, 9721, 1296, 718, 505, 584, 613, 366, 50714], 'temperature': 0.0, 'avg_logprob': -0.21428114368069556, 'compression_ratio': 1.5290697674418605, 'no_speech_prob': 0.008100204169750214}, {'id': 457, 'seek': 385212, 'start': 3862.56, 'end': 3869.56, 'text': ' S1 and S2 are different iterations agreed agreed this is going to be the case right', 'tokens': [50886, 318, 16, 293, 318, 17, 366, 819, 36540, 9166, 9166, 341, 307, 516, 281, 312, 264, 1389, 558, 51236], 'temperature': 0.0, 'avg_logprob': -0.21428114368069556, 'compression_ratio': 1.5290697674418605, 'no_speech_prob': 0.008100204169750214}, {'id': 458, 'seek': 385212, 'start': 3873.16, 'end': 3877.08, 'text': ' you will never be able to pull out a definition remember that is what we argued about yesterday', 'tokens': [51416, 291, 486, 1128, 312, 1075, 281, 2235, 484, 257, 7123, 1604, 300, 307, 437, 321, 20219, 466, 5186, 51612], 'temperature': 0.0, 'avg_logprob': -0.21428114368069556, 'compression_ratio': 1.5290697674418605, 'no_speech_prob': 0.008100204169750214}, {'id': 459, 'seek': 387708, 'start': 3877.08, 'end': 3882.08, 'text': ' right you only union you are just unioning new definitions you are putting in new definitions.', 'tokens': [50364, 558, 291, 787, 11671, 291, 366, 445, 11671, 278, 777, 21988, 291, 366, 3372, 294, 777, 21988, 13, 50614], 'temperature': 0.0, 'avg_logprob': -0.1952771899066394, 'compression_ratio': 1.91005291005291, 'no_speech_prob': 0.007211363408714533}, {'id': 460, 'seek': 387708, 'start': 3882.08, 'end': 3889.08, 'text': ' So, what so now subset looks to be a interesting relation to describe this to describe this', 'tokens': [50614, 407, 11, 437, 370, 586, 25993, 1542, 281, 312, 257, 1880, 9721, 281, 6786, 341, 281, 6786, 341, 50964], 'temperature': 0.0, 'avg_logprob': -0.1952771899066394, 'compression_ratio': 1.91005291005291, 'no_speech_prob': 0.007211363408714533}, {'id': 461, 'seek': 387708, 'start': 3890.2799999999997, 'end': 3896.0, 'text': ' computation right because every solution that I get every sequence of solutions that I get', 'tokens': [51024, 24903, 558, 570, 633, 3827, 300, 286, 483, 633, 8310, 295, 6547, 300, 286, 483, 51310], 'temperature': 0.0, 'avg_logprob': -0.1952771899066394, 'compression_ratio': 1.91005291005291, 'no_speech_prob': 0.007211363408714533}, {'id': 462, 'seek': 387708, 'start': 3896.0, 'end': 3903.0, 'text': ' at a point are related by the subsetting relation on this on this set of solutions.', 'tokens': [51310, 412, 257, 935, 366, 4077, 538, 264, 25993, 783, 9721, 322, 341, 322, 341, 992, 295, 6547, 13, 51660], 'temperature': 0.0, 'avg_logprob': -0.1952771899066394, 'compression_ratio': 1.91005291005291, 'no_speech_prob': 0.007211363408714533}, {'id': 463, 'seek': 390300, 'start': 3904.0, 'end': 3911.0, 'text': ' Then for this particular set for this relation subset equal to can I come up with can you', 'tokens': [50414, 1396, 337, 341, 1729, 992, 337, 341, 9721, 25993, 2681, 281, 393, 286, 808, 493, 365, 393, 291, 50764], 'temperature': 0.0, 'avg_logprob': -0.17636427012356845, 'compression_ratio': 1.512396694214876, 'no_speech_prob': 0.012371980585157871}, {'id': 464, 'seek': 390300, 'start': 3916.56, 'end': 3923.56, 'text': ' describe the lattice. So, for I want the lattice for less than under the subset relation. So,', 'tokens': [51042, 6786, 264, 34011, 13, 407, 11, 337, 286, 528, 264, 34011, 337, 1570, 813, 833, 264, 25993, 9721, 13, 407, 11, 51392], 'temperature': 0.0, 'avg_logprob': -0.17636427012356845, 'compression_ratio': 1.512396694214876, 'no_speech_prob': 0.012371980585157871}, {'id': 465, 'seek': 393300, 'start': 3933.2, 'end': 3940.2, 'text': ' how will the lattice look like can you give me the hash diagram of the lattice. So, what', 'tokens': [50374, 577, 486, 264, 34011, 574, 411, 393, 291, 976, 385, 264, 22019, 10686, 295, 264, 34011, 13, 407, 11, 437, 50724], 'temperature': 0.0, 'avg_logprob': -0.2889097113358347, 'compression_ratio': 1.8611111111111112, 'no_speech_prob': 0.015696672722697258}, {'id': 466, 'seek': 393300, 'start': 3941.28, 'end': 3948.28, 'text': ' is the bottom element empty set is going to be the bottom element then the singleton elements', 'tokens': [50778, 307, 264, 2767, 4478, 6707, 992, 307, 516, 281, 312, 264, 2767, 4478, 550, 264, 1522, 14806, 4959, 51128], 'temperature': 0.0, 'avg_logprob': -0.2889097113358347, 'compression_ratio': 1.8611111111111112, 'no_speech_prob': 0.015696672722697258}, {'id': 467, 'seek': 393300, 'start': 3948.28, 'end': 3955.28, 'text': ' D1 D2 D3 then sets of two D1 D2 D1 D3 D2 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 D3', 'tokens': [51128, 413, 16, 413, 17, 413, 18, 550, 6352, 295, 732, 413, 16, 413, 17, 413, 16, 413, 18, 413, 17, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 413, 18, 51478], 'temperature': 0.0, 'avg_logprob': -0.2889097113358347, 'compression_ratio': 1.8611111111111112, 'no_speech_prob': 0.015696672722697258}, {'id': 468, 'seek': 396300, 'start': 3963.78, 'end': 3970.78, 'text': ' D3 and D2 D3 right and then the top element which is D1 D2 D3 agreed yeah, yes.', 'tokens': [50403, 413, 18, 293, 413, 17, 413, 18, 558, 293, 550, 264, 1192, 4478, 597, 307, 413, 16, 413, 17, 413, 18, 9166, 1338, 11, 2086, 13, 50753], 'temperature': 0.6, 'avg_logprob': -0.6156934102376302, 'compression_ratio': 1.0533333333333332, 'no_speech_prob': 0.01493922621011734}, {'id': 469, 'seek': 397078, 'start': 3970.78, 'end': 3999.1400000000003, 'text': ' the top element which is d1, d2, d3 agreed. Yes, yes, yeah, but that is exactly what we', 'tokens': [50364, 264, 1192, 4478, 597, 307, 274, 16, 11, 274, 17, 11, 274, 18, 9166, 13, 1079, 11, 2086, 11, 1338, 11, 457, 300, 307, 2293, 437, 321, 51782], 'temperature': 0.0, 'avg_logprob': -0.39671119566886653, 'compression_ratio': 1.0740740740740742, 'no_speech_prob': 0.11841459572315216}, {'id': 470, 'seek': 399914, 'start': 3999.14, 'end': 4004.62, 'text': ' did. Last time the proof we gave was exactly this. We did not really set up it as an inductive', 'tokens': [50364, 630, 13, 5264, 565, 264, 8177, 321, 2729, 390, 2293, 341, 13, 492, 630, 406, 534, 992, 493, 309, 382, 364, 31612, 488, 50638], 'temperature': 0.0, 'avg_logprob': -0.1851508666057976, 'compression_ratio': 1.4296296296296296, 'no_speech_prob': 0.5951785445213318}, {'id': 471, 'seek': 399914, 'start': 4004.62, 'end': 4026.06, 'text': ' proof but the argument was exactly that. Excellent, exactly. That is the next question I was going', 'tokens': [50638, 8177, 457, 264, 6770, 390, 2293, 300, 13, 16723, 11, 2293, 13, 663, 307, 264, 958, 1168, 286, 390, 516, 51710], 'temperature': 0.0, 'avg_logprob': -0.1851508666057976, 'compression_ratio': 1.4296296296296296, 'no_speech_prob': 0.5951785445213318}, {'id': 472, 'seek': 402606, 'start': 4026.06, 'end': 4035.18, 'text': ' to put. So essentially all my solutions would form a chain in this lattice. See how beautiful', 'tokens': [50364, 281, 829, 13, 407, 4476, 439, 452, 6547, 576, 1254, 257, 5021, 294, 341, 34011, 13, 3008, 577, 2238, 50820], 'temperature': 0.0, 'avg_logprob': -0.1874912693386986, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.9027941823005676}, {'id': 473, 'seek': 402606, 'start': 4035.18, 'end': 4040.98, 'text': ' the structure is now. So we came up with an ad hoc algorithm which was supposed to be', 'tokens': [50820, 264, 3877, 307, 586, 13, 407, 321, 1361, 493, 365, 364, 614, 16708, 9284, 597, 390, 3442, 281, 312, 51110], 'temperature': 0.0, 'avg_logprob': -0.1874912693386986, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.9027941823005676}, {'id': 474, 'seek': 402606, 'start': 4040.98, 'end': 4046.18, 'text': ' doing something. I do not even know. Then I defined some abstract mathematical concepts', 'tokens': [51110, 884, 746, 13, 286, 360, 406, 754, 458, 13, 1396, 286, 7642, 512, 12649, 18894, 10392, 51370], 'temperature': 0.0, 'avg_logprob': -0.1874912693386986, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.9027941823005676}, {'id': 475, 'seek': 402606, 'start': 4046.18, 'end': 4051.02, 'text': ' which none of you had a clue why we are doing all this business. And then the problem essentially', 'tokens': [51370, 597, 6022, 295, 291, 632, 257, 13602, 983, 321, 366, 884, 439, 341, 1606, 13, 400, 550, 264, 1154, 4476, 51612], 'temperature': 0.0, 'avg_logprob': -0.1874912693386986, 'compression_ratio': 1.5869565217391304, 'no_speech_prob': 0.9027941823005676}, {'id': 476, 'seek': 405102, 'start': 4051.02, 'end': 4056.94, 'text': ' boils down to computing, essentially computing along a chain in this lattice.', 'tokens': [50364, 35049, 760, 281, 15866, 11, 4476, 15866, 2051, 257, 5021, 294, 341, 34011, 13, 50660], 'temperature': 0.0, 'avg_logprob': -0.43485827195016963, 'compression_ratio': 1.6265060240963856, 'no_speech_prob': 0.5848951935768127}, {'id': 477, 'seek': 405102, 'start': 4056.94, 'end': 4063.54, 'text': ' Now I am going too far.', 'tokens': [50660, 823, 286, 669, 516, 886, 1400, 13, 50990], 'temperature': 0.0, 'avg_logprob': -0.43485827195016963, 'compression_ratio': 1.6265060240963856, 'no_speech_prob': 0.5848951935768127}, {'id': 478, 'seek': 405102, 'start': 4063.54, 'end': 4075.82, 'text': ' Okay, now you are going too far. Look who. Okay, so this is nice, right? Okay, there', 'tokens': [50990, 1033, 11, 586, 291, 366, 516, 886, 1400, 13, 2053, 567, 13, 1033, 11, 370, 341, 307, 1481, 11, 558, 30, 1033, 11, 456, 51604], 'temperature': 0.0, 'avg_logprob': -0.43485827195016963, 'compression_ratio': 1.6265060240963856, 'no_speech_prob': 0.5848951935768127}, {'id': 479, 'seek': 405102, 'start': 4075.82, 'end': 4080.42, 'text': ' is more to it. The drama is not over yet. Now think about the case. Now think about', 'tokens': [51604, 307, 544, 281, 309, 13, 440, 9412, 307, 406, 670, 1939, 13, 823, 519, 466, 264, 1389, 13, 823, 519, 466, 51834], 'temperature': 0.0, 'avg_logprob': -0.43485827195016963, 'compression_ratio': 1.6265060240963856, 'no_speech_prob': 0.5848951935768127}, {'id': 480, 'seek': 408042, 'start': 4080.42, 'end': 4087.7000000000003, 'text': ' the case. Now we talked about the over approximate solutions. Remember we talked about something', 'tokens': [50364, 264, 1389, 13, 823, 321, 2825, 466, 264, 670, 30874, 6547, 13, 5459, 321, 2825, 466, 746, 50728], 'temperature': 0.0, 'avg_logprob': -0.12960355243985616, 'compression_ratio': 1.7048192771084338, 'no_speech_prob': 0.07531341165304184}, {'id': 481, 'seek': 408042, 'start': 4087.7000000000003, 'end': 4103.06, 'text': ' called over approximation. What is over approximation? Yes, we can miss out on optimizations but', 'tokens': [50728, 1219, 670, 28023, 13, 708, 307, 670, 28023, 30, 1079, 11, 321, 393, 1713, 484, 322, 5028, 14455, 457, 51496], 'temperature': 0.0, 'avg_logprob': -0.12960355243985616, 'compression_ratio': 1.7048192771084338, 'no_speech_prob': 0.07531341165304184}, {'id': 482, 'seek': 408042, 'start': 4103.06, 'end': 4109.02, 'text': ' it is still safe. Can you give me a structure on the over approximations possible on that', 'tokens': [51496, 309, 307, 920, 3273, 13, 1664, 291, 976, 385, 257, 3877, 322, 264, 670, 8542, 763, 1944, 322, 300, 51794], 'temperature': 0.0, 'avg_logprob': -0.12960355243985616, 'compression_ratio': 1.7048192771084338, 'no_speech_prob': 0.07531341165304184}, {'id': 483, 'seek': 410902, 'start': 4109.02, 'end': 4120.06, 'text': ' set here? So my solution can be any of these sets here, right? So let us say my solution', 'tokens': [50364, 992, 510, 30, 407, 452, 3827, 393, 312, 604, 295, 613, 6352, 510, 11, 558, 30, 407, 718, 505, 584, 452, 3827, 50916], 'temperature': 0.0, 'avg_logprob': -0.15164376576741537, 'compression_ratio': 1.5317919075144508, 'no_speech_prob': 0.3045411705970764}, {'id': 484, 'seek': 410902, 'start': 4120.06, 'end': 4127.740000000001, 'text': ' is D2. That is a big deal. Let us say D2 was my actual solution that I got. Can you tell', 'tokens': [50916, 307, 413, 17, 13, 663, 307, 257, 955, 2028, 13, 961, 505, 584, 413, 17, 390, 452, 3539, 3827, 300, 286, 658, 13, 1664, 291, 980, 51300], 'temperature': 0.0, 'avg_logprob': -0.15164376576741537, 'compression_ratio': 1.5317919075144508, 'no_speech_prob': 0.3045411705970764}, {'id': 485, 'seek': 410902, 'start': 4127.740000000001, 'end': 4134.9800000000005, 'text': ' me what are the over approximations of this particular set? How do I get this from this', 'tokens': [51300, 385, 437, 366, 264, 670, 8542, 763, 295, 341, 1729, 992, 30, 1012, 360, 286, 483, 341, 490, 341, 51662], 'temperature': 0.0, 'avg_logprob': -0.15164376576741537, 'compression_ratio': 1.5317919075144508, 'no_speech_prob': 0.3045411705970764}, {'id': 486, 'seek': 413498, 'start': 4134.98, 'end': 4141.299999999999, 'text': ' lattice? Upwards means what? Can you define it in terms of lattice theory whatever we', 'tokens': [50364, 34011, 30, 5858, 2015, 1355, 437, 30, 1664, 291, 6964, 309, 294, 2115, 295, 34011, 5261, 2035, 321, 50680], 'temperature': 0.0, 'avg_logprob': -0.24066795935997595, 'compression_ratio': 1.433862433862434, 'no_speech_prob': 0.17146511375904083}, {'id': 487, 'seek': 413498, 'start': 4141.299999999999, 'end': 4156.54, 'text': ' learnt? Need not be. Yes. The upper bounds of this particular solution are my over approximations.', 'tokens': [50680, 18991, 30, 16984, 406, 312, 13, 1079, 13, 440, 6597, 29905, 295, 341, 1729, 3827, 366, 452, 670, 8542, 763, 13, 51442], 'temperature': 0.0, 'avg_logprob': -0.24066795935997595, 'compression_ratio': 1.433862433862434, 'no_speech_prob': 0.17146511375904083}, {'id': 488, 'seek': 413498, 'start': 4156.54, 'end': 4163.459999999999, 'text': ' If there are elements which are some people are still quizzical. Are you convinced? So', 'tokens': [51442, 759, 456, 366, 4959, 597, 366, 512, 561, 366, 920, 43425, 804, 13, 2014, 291, 12561, 30, 407, 51788], 'temperature': 0.0, 'avg_logprob': -0.24066795935997595, 'compression_ratio': 1.433862433862434, 'no_speech_prob': 0.17146511375904083}, {'id': 489, 'seek': 416346, 'start': 4163.46, 'end': 4177.02, 'text': ' upper bounds means what? It has this element but maybe something more. I see a quizzical', 'tokens': [50364, 6597, 29905, 1355, 437, 30, 467, 575, 341, 4478, 457, 1310, 746, 544, 13, 286, 536, 257, 43425, 804, 51042], 'temperature': 0.0, 'avg_logprob': -0.21422826482894572, 'compression_ratio': 1.3284671532846715, 'no_speech_prob': 0.2544819116592407}, {'id': 490, 'seek': 416346, 'start': 4177.02, 'end': 4191.22, 'text': ' face. I do not like it. Tell me. Over approximation in this case meant that what happens if I', 'tokens': [51042, 1851, 13, 286, 360, 406, 411, 309, 13, 5115, 385, 13, 4886, 28023, 294, 341, 1389, 4140, 300, 437, 2314, 498, 286, 51752], 'temperature': 0.0, 'avg_logprob': -0.21422826482894572, 'compression_ratio': 1.3284671532846715, 'no_speech_prob': 0.2544819116592407}, {'id': 491, 'seek': 419122, 'start': 4191.22, 'end': 4196.7, 'text': ' let us say I have a set of definitions. What if I say that there is an extra definition', 'tokens': [50364, 718, 505, 584, 286, 362, 257, 992, 295, 21988, 13, 708, 498, 286, 584, 300, 456, 307, 364, 2857, 7123, 50638], 'temperature': 0.0, 'avg_logprob': -0.1691288195158306, 'compression_ratio': 1.871900826446281, 'no_speech_prob': 0.8161566257476807}, {'id': 492, 'seek': 419122, 'start': 4196.7, 'end': 4200.1, 'text': ' in that set though it was not there? Like for instance let us say the definition was', 'tokens': [50638, 294, 300, 992, 1673, 309, 390, 406, 456, 30, 1743, 337, 5197, 718, 505, 584, 264, 7123, 390, 50808], 'temperature': 0.0, 'avg_logprob': -0.1691288195158306, 'compression_ratio': 1.871900826446281, 'no_speech_prob': 0.8161566257476807}, {'id': 493, 'seek': 419122, 'start': 4200.1, 'end': 4206.46, 'text': ' D2 but I simply put another definition D1 in this and though D1 was not actually in', 'tokens': [50808, 413, 17, 457, 286, 2935, 829, 1071, 7123, 413, 16, 294, 341, 293, 1673, 413, 16, 390, 406, 767, 294, 51126], 'temperature': 0.0, 'avg_logprob': -0.1691288195158306, 'compression_ratio': 1.871900826446281, 'no_speech_prob': 0.8161566257476807}, {'id': 494, 'seek': 419122, 'start': 4206.46, 'end': 4212.58, 'text': ' the set is not actually a reaching definition. Let us say put it and say okay take this solution.', 'tokens': [51126, 264, 992, 307, 406, 767, 257, 9906, 7123, 13, 961, 505, 584, 829, 309, 293, 584, 1392, 747, 341, 3827, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.1691288195158306, 'compression_ratio': 1.871900826446281, 'no_speech_prob': 0.8161566257476807}, {'id': 495, 'seek': 419122, 'start': 4212.58, 'end': 4218.900000000001, 'text': ' The solver has a bug and gives you the solution. What does it do? So first there are two questions', 'tokens': [51432, 440, 1404, 331, 575, 257, 7426, 293, 2709, 291, 264, 3827, 13, 708, 775, 309, 360, 30, 407, 700, 456, 366, 732, 1651, 51748], 'temperature': 0.0, 'avg_logprob': -0.1691288195158306, 'compression_ratio': 1.871900826446281, 'no_speech_prob': 0.8161566257476807}, {'id': 496, 'seek': 421890, 'start': 4218.9, 'end': 4224.7, 'text': ' we were talking about yesterday. One question was about safety. Safety was about can my', 'tokens': [50364, 321, 645, 1417, 466, 5186, 13, 1485, 1168, 390, 466, 4514, 13, 21340, 390, 466, 393, 452, 50654], 'temperature': 0.0, 'avg_logprob': -0.19640350341796875, 'compression_ratio': 1.7882352941176471, 'no_speech_prob': 0.498828649520874}, {'id': 497, 'seek': 421890, 'start': 4224.7, 'end': 4230.42, 'text': ' optimization go wrong? Remember the constant propagation application we were talking about.', 'tokens': [50654, 19618, 352, 2085, 30, 5459, 264, 5754, 38377, 3861, 321, 645, 1417, 466, 13, 50940], 'temperature': 0.0, 'avg_logprob': -0.19640350341796875, 'compression_ratio': 1.7882352941176471, 'no_speech_prob': 0.498828649520874}, {'id': 498, 'seek': 421890, 'start': 4230.42, 'end': 4235.94, 'text': ' If I put a new element D1 in this set the algorithm will not go wrong. It will not do', 'tokens': [50940, 759, 286, 829, 257, 777, 4478, 413, 16, 294, 341, 992, 264, 9284, 486, 406, 352, 2085, 13, 467, 486, 406, 360, 51216], 'temperature': 0.0, 'avg_logprob': -0.19640350341796875, 'compression_ratio': 1.7882352941176471, 'no_speech_prob': 0.498828649520874}, {'id': 499, 'seek': 421890, 'start': 4235.94, 'end': 4240.66, 'text': ' a transformation that will. So what? So otherwise what was happening was because D2 was a singleton', 'tokens': [51216, 257, 9887, 300, 486, 13, 407, 437, 30, 407, 5911, 437, 390, 2737, 390, 570, 413, 17, 390, 257, 1522, 14806, 51452], 'temperature': 0.0, 'avg_logprob': -0.19640350341796875, 'compression_ratio': 1.7882352941176471, 'no_speech_prob': 0.498828649520874}, {'id': 500, 'seek': 421890, 'start': 4240.66, 'end': 4245.58, 'text': ' set maybe it would have enabled an optimization. Maybe D2 was a singleton set and maybe D2', 'tokens': [51452, 992, 1310, 309, 576, 362, 15172, 364, 19618, 13, 2704, 413, 17, 390, 257, 1522, 14806, 992, 293, 1310, 413, 17, 51698], 'temperature': 0.0, 'avg_logprob': -0.19640350341796875, 'compression_ratio': 1.7882352941176471, 'no_speech_prob': 0.498828649520874}, {'id': 501, 'seek': 424558, 'start': 4245.58, 'end': 4249.74, 'text': ' was something like x equals 5. Then it could have just pulled in that value 5 into the', 'tokens': [50364, 390, 746, 411, 2031, 6915, 1025, 13, 1396, 309, 727, 362, 445, 7373, 294, 300, 2158, 1025, 666, 264, 50572], 'temperature': 0.0, 'avg_logprob': -0.19373271109043866, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.09795829653739929}, {'id': 502, 'seek': 424558, 'start': 4249.74, 'end': 4256.26, 'text': ' set into that computation. But because now with D1 also being the set it is no more a', 'tokens': [50572, 992, 666, 300, 24903, 13, 583, 570, 586, 365, 413, 16, 611, 885, 264, 992, 309, 307, 572, 544, 257, 50898], 'temperature': 0.0, 'avg_logprob': -0.19373271109043866, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.09795829653739929}, {'id': 503, 'seek': 424558, 'start': 4256.26, 'end': 4261.86, 'text': ' singleton set I cannot do that optimization. So I will not be able to enable the optimization', 'tokens': [50898, 1522, 14806, 992, 286, 2644, 360, 300, 19618, 13, 407, 286, 486, 406, 312, 1075, 281, 9528, 264, 19618, 51178], 'temperature': 0.0, 'avg_logprob': -0.19373271109043866, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.09795829653739929}, {'id': 504, 'seek': 424558, 'start': 4261.86, 'end': 4269.82, 'text': ' but I will not do something which makes the program wrong. So the other thing was accuracy.', 'tokens': [51178, 457, 286, 486, 406, 360, 746, 597, 1669, 264, 1461, 2085, 13, 407, 264, 661, 551, 390, 14170, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.19373271109043866, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.09795829653739929}, {'id': 505, 'seek': 426982, 'start': 4269.82, 'end': 4279.54, 'text': ' So essentially what is happening is my accuracy is getting compromised but it is still safe.', 'tokens': [50364, 407, 4476, 437, 307, 2737, 307, 452, 14170, 307, 1242, 32463, 457, 309, 307, 920, 3273, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.1739295550755092, 'compression_ratio': 1.46448087431694, 'no_speech_prob': 0.10945489257574081}, {'id': 506, 'seek': 426982, 'start': 4279.54, 'end': 4284.94, 'text': ' Think about the other situation. If I had a set D1 D2 actual mass solution was D1 D2', 'tokens': [50850, 6557, 466, 264, 661, 2590, 13, 759, 286, 632, 257, 992, 413, 16, 413, 17, 3539, 2758, 3827, 390, 413, 16, 413, 17, 51120], 'temperature': 0.0, 'avg_logprob': -0.1739295550755092, 'compression_ratio': 1.46448087431694, 'no_speech_prob': 0.10945489257574081}, {'id': 507, 'seek': 426982, 'start': 4284.94, 'end': 4296.86, 'text': ' but if I somehow my solver does not give me D1. What about this? This is dangerous because', 'tokens': [51120, 457, 498, 286, 6063, 452, 1404, 331, 775, 406, 976, 385, 413, 16, 13, 708, 466, 341, 30, 639, 307, 5795, 570, 51716], 'temperature': 0.0, 'avg_logprob': -0.1739295550755092, 'compression_ratio': 1.46448087431694, 'no_speech_prob': 0.10945489257574081}, {'id': 508, 'seek': 429686, 'start': 4296.86, 'end': 4303.259999999999, 'text': ' let us say D1 was of the form x equals 5 D2 was of the form x equals 2 and both the', 'tokens': [50364, 718, 505, 584, 413, 16, 390, 295, 264, 1254, 2031, 6915, 1025, 413, 17, 390, 295, 264, 1254, 2031, 6915, 568, 293, 1293, 264, 50684], 'temperature': 0.0, 'avg_logprob': -0.18092397625526685, 'compression_ratio': 1.7236180904522613, 'no_speech_prob': 0.2002555876970291}, {'id': 509, 'seek': 429686, 'start': 4303.259999999999, 'end': 4307.7, 'text': ' definitions were reaching me. That was the actual solution. So I could not have done', 'tokens': [50684, 21988, 645, 9906, 385, 13, 663, 390, 264, 3539, 3827, 13, 407, 286, 727, 406, 362, 1096, 50906], 'temperature': 0.0, 'avg_logprob': -0.18092397625526685, 'compression_ratio': 1.7236180904522613, 'no_speech_prob': 0.2002555876970291}, {'id': 510, 'seek': 429686, 'start': 4307.7, 'end': 4312.82, 'text': ' the optimization but because I disallowed D1 I only see one reaching definition which', 'tokens': [50906, 264, 19618, 457, 570, 286, 717, 13253, 292, 413, 16, 286, 787, 536, 472, 9906, 7123, 597, 51162], 'temperature': 0.0, 'avg_logprob': -0.18092397625526685, 'compression_ratio': 1.7236180904522613, 'no_speech_prob': 0.2002555876970291}, {'id': 511, 'seek': 429686, 'start': 4312.82, 'end': 4318.0199999999995, 'text': ' is x equals 2 and I say do the optimization. Looks good to me. That will make my program', 'tokens': [51162, 307, 2031, 6915, 568, 293, 286, 584, 360, 264, 19618, 13, 10027, 665, 281, 385, 13, 663, 486, 652, 452, 1461, 51422], 'temperature': 0.0, 'avg_logprob': -0.18092397625526685, 'compression_ratio': 1.7236180904522613, 'no_speech_prob': 0.2002555876970291}, {'id': 512, 'seek': 431802, 'start': 4318.02, 'end': 4333.06, 'text': ' wrong. So it is not safe anymore. So yes the bad solution is the inaccurate solution which', 'tokens': [50364, 2085, 13, 407, 309, 307, 406, 3273, 3602, 13, 407, 2086, 264, 1578, 3827, 307, 264, 46443, 3827, 597, 51116], 'temperature': 0.0, 'avg_logprob': -0.21059255751352463, 'compression_ratio': 1.7466666666666666, 'no_speech_prob': 0.25979191064834595}, {'id': 513, 'seek': 431802, 'start': 4333.06, 'end': 4337.42, 'text': ' is the larger set and bad because it is not able to let me do the optimization. It is', 'tokens': [51116, 307, 264, 4833, 992, 293, 1578, 570, 309, 307, 406, 1075, 281, 718, 385, 360, 264, 19618, 13, 467, 307, 51334], 'temperature': 0.0, 'avg_logprob': -0.21059255751352463, 'compression_ratio': 1.7466666666666666, 'no_speech_prob': 0.25979191064834595}, {'id': 514, 'seek': 431802, 'start': 4337.42, 'end': 4347.700000000001, 'text': ' stopping me from doing an optimization. But the unsafe solution is bad because it can', 'tokens': [51334, 12767, 385, 490, 884, 364, 19618, 13, 583, 264, 35948, 3827, 307, 1578, 570, 309, 393, 51848], 'temperature': 0.0, 'avg_logprob': -0.21059255751352463, 'compression_ratio': 1.7466666666666666, 'no_speech_prob': 0.25979191064834595}, {'id': 515, 'seek': 434770, 'start': 4347.7, 'end': 4352.74, 'text': ' make the program go wrong. So it is not even a solution to be very frank because I cannot', 'tokens': [50364, 652, 264, 1461, 352, 2085, 13, 407, 309, 307, 406, 754, 257, 3827, 281, 312, 588, 10455, 570, 286, 2644, 50616], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 516, 'seek': 434770, 'start': 4352.74, 'end': 4357.98, 'text': ' even allow that.', 'tokens': [50616, 754, 2089, 300, 13, 50878], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 517, 'seek': 434770, 'start': 4357.98, 'end': 4364.179999999999, 'text': ' So now as you can see all the upper bounds of this actual solution will be a superset', 'tokens': [50878, 407, 586, 382, 291, 393, 536, 439, 264, 6597, 29905, 295, 341, 3539, 3827, 486, 312, 257, 37906, 302, 51188], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 518, 'seek': 434770, 'start': 4364.179999999999, 'end': 4367.82, 'text': ' of that. That is my relation on which I am doing the construction of this lattice. It', 'tokens': [51188, 295, 300, 13, 663, 307, 452, 9721, 322, 597, 286, 669, 884, 264, 6435, 295, 341, 34011, 13, 467, 51370], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 519, 'seek': 434770, 'start': 4367.82, 'end': 4370.98, 'text': ' means that it will surely have the set of definitions that are in the actual solution', 'tokens': [51370, 1355, 300, 309, 486, 11468, 362, 264, 992, 295, 21988, 300, 366, 294, 264, 3539, 3827, 51528], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 520, 'seek': 434770, 'start': 4370.98, 'end': 4375.3, 'text': ' plus maybe something more. So they are all going to be over approximate. They are all', 'tokens': [51528, 1804, 1310, 746, 544, 13, 407, 436, 366, 439, 516, 281, 312, 670, 30874, 13, 814, 366, 439, 51744], 'temperature': 0.0, 'avg_logprob': -0.15290393829345703, 'compression_ratio': 1.8, 'no_speech_prob': 0.0471394881606102}, {'id': 521, 'seek': 437530, 'start': 4375.3, 'end': 4384.14, 'text': ' going to be inaccurate but all sound solutions, all safe solutions. So all safe solutions', 'tokens': [50364, 516, 281, 312, 46443, 457, 439, 1626, 6547, 11, 439, 3273, 6547, 13, 407, 439, 3273, 6547, 50806], 'temperature': 0.0, 'avg_logprob': -0.22569845403943742, 'compression_ratio': 1.6158940397350994, 'no_speech_prob': 0.3683432340621948}, {'id': 522, 'seek': 437530, 'start': 4384.14, 'end': 4393.34, 'text': ' are my upper bounds of my optimal solution, my best solution.', 'tokens': [50806, 366, 452, 6597, 29905, 295, 452, 16252, 3827, 11, 452, 1151, 3827, 13, 51266], 'temperature': 0.0, 'avg_logprob': -0.22569845403943742, 'compression_ratio': 1.6158940397350994, 'no_speech_prob': 0.3683432340621948}, {'id': 523, 'seek': 437530, 'start': 4393.34, 'end': 4400.14, 'text': ' Now staring at you at this can you give me a constant time algorithm to compute the reaching', 'tokens': [51266, 823, 18043, 412, 291, 412, 341, 393, 291, 976, 385, 257, 5754, 565, 9284, 281, 14722, 264, 9906, 51606], 'temperature': 0.0, 'avg_logprob': -0.22569845403943742, 'compression_ratio': 1.6158940397350994, 'no_speech_prob': 0.3683432340621948}, {'id': 524, 'seek': 440014, 'start': 4400.14, 'end': 4413.660000000001, 'text': ' definitions which gives me a safe solution. This is sort of half a joke but think about', 'tokens': [50364, 21988, 597, 2709, 385, 257, 3273, 3827, 13, 639, 307, 1333, 295, 1922, 257, 7647, 457, 519, 466, 51040], 'temperature': 0.0, 'avg_logprob': -0.21552020853215997, 'compression_ratio': 1.3515625, 'no_speech_prob': 0.6807457804679871}, {'id': 525, 'seek': 440014, 'start': 4413.660000000001, 'end': 4424.9400000000005, 'text': ' it. Upper bound but which one? But I need to know the solution first to get the least', 'tokens': [51040, 309, 13, 36926, 5472, 457, 597, 472, 30, 583, 286, 643, 281, 458, 264, 3827, 700, 281, 483, 264, 1935, 51604], 'temperature': 0.0, 'avg_logprob': -0.21552020853215997, 'compression_ratio': 1.3515625, 'no_speech_prob': 0.6807457804679871}, {'id': 526, 'seek': 442494, 'start': 4425.94, 'end': 4436.46, 'text': ' So how can I give you in constant time I can give you a solution. The top element. Say', 'tokens': [50414, 407, 577, 393, 286, 976, 291, 294, 5754, 565, 286, 393, 976, 291, 257, 3827, 13, 440, 1192, 4478, 13, 6463, 50940], 'temperature': 0.0, 'avg_logprob': -0.31305871080996384, 'compression_ratio': 1.646341463414634, 'no_speech_prob': 0.7516486048698425}, {'id': 527, 'seek': 442494, 'start': 4436.46, 'end': 4444.259999999999, 'text': ' everything reaches everywhere, done. No optimization will be enabled anywhere but it is a safe', 'tokens': [50940, 1203, 14235, 5315, 11, 1096, 13, 883, 19618, 486, 312, 15172, 4992, 457, 309, 307, 257, 3273, 51330], 'temperature': 0.0, 'avg_logprob': -0.31305871080996384, 'compression_ratio': 1.646341463414634, 'no_speech_prob': 0.7516486048698425}, {'id': 528, 'seek': 442494, 'start': 4444.259999999999, 'end': 4451.98, 'text': ' solution and it is a solution. So I can always take the top element and say oh here is a', 'tokens': [51330, 3827, 293, 309, 307, 257, 3827, 13, 407, 286, 393, 1009, 747, 264, 1192, 4478, 293, 584, 1954, 510, 307, 257, 51716], 'temperature': 0.0, 'avg_logprob': -0.31305871080996384, 'compression_ratio': 1.646341463414634, 'no_speech_prob': 0.7516486048698425}, {'id': 529, 'seek': 445198, 'start': 4451.98, 'end': 4468.179999999999, 'text': ' solution. So now the other thing is that. So now let us look at the nature of this computation', 'tokens': [50364, 3827, 13, 407, 586, 264, 661, 551, 307, 300, 13, 407, 586, 718, 505, 574, 412, 264, 3687, 295, 341, 24903, 51174], 'temperature': 0.0, 'avg_logprob': -0.1928501323777802, 'compression_ratio': 1.6517857142857142, 'no_speech_prob': 0.19080224633216858}, {'id': 530, 'seek': 445198, 'start': 4468.179999999999, 'end': 4474.98, 'text': ' here. There are too many curves here. So now let us try to look at the nature of this what', 'tokens': [51174, 510, 13, 821, 366, 886, 867, 19490, 510, 13, 407, 586, 718, 505, 853, 281, 574, 412, 264, 3687, 295, 341, 437, 51514], 'temperature': 0.0, 'avg_logprob': -0.1928501323777802, 'compression_ratio': 1.6517857142857142, 'no_speech_prob': 0.19080224633216858}, {'id': 531, 'seek': 447498, 'start': 4474.98, 'end': 4483.0199999999995, 'text': ' is happening at this basic block at this program point. So there are there is some', 'tokens': [50364, 307, 2737, 412, 341, 3875, 3461, 412, 341, 1461, 935, 13, 407, 456, 366, 456, 307, 512, 50766], 'temperature': 0.0, 'avg_logprob': -0.2317441463470459, 'compression_ratio': 1.694267515923567, 'no_speech_prob': 0.33208709955215454}, {'id': 532, 'seek': 447498, 'start': 4483.0199999999995, 'end': 4488.7, 'text': ' solutions coming from here. There are some solutions coming from here and they are getting', 'tokens': [50766, 6547, 1348, 490, 510, 13, 821, 366, 512, 6547, 1348, 490, 510, 293, 436, 366, 1242, 51050], 'temperature': 0.0, 'avg_logprob': -0.2317441463470459, 'compression_ratio': 1.694267515923567, 'no_speech_prob': 0.33208709955215454}, {'id': 533, 'seek': 447498, 'start': 4488.7, 'end': 4497.7, 'text': ' combined. Can you visualize that what is happening on this lattice? What is really going on?', 'tokens': [51050, 9354, 13, 1664, 291, 23273, 300, 437, 307, 2737, 322, 341, 34011, 30, 708, 307, 534, 516, 322, 30, 51500], 'temperature': 0.0, 'avg_logprob': -0.2317441463470459, 'compression_ratio': 1.694267515923567, 'no_speech_prob': 0.33208709955215454}, {'id': 534, 'seek': 449770, 'start': 4497.7, 'end': 4512.82, 'text': ' What am I doing? How do I combine? Join. So I take the join of the solutions from my', 'tokens': [50364, 708, 669, 286, 884, 30, 1012, 360, 286, 10432, 30, 19642, 13, 407, 286, 747, 264, 3917, 295, 264, 6547, 490, 452, 51120], 'temperature': 0.0, 'avg_logprob': -0.15698888897895813, 'compression_ratio': 1.368, 'no_speech_prob': 0.1178070604801178}, {'id': 535, 'seek': 449770, 'start': 4512.82, 'end': 4525.139999999999, 'text': ' left arm and my right arm. So this is how we like compute the next solution on my this', 'tokens': [51120, 1411, 3726, 293, 452, 558, 3726, 13, 407, 341, 307, 577, 321, 411, 14722, 264, 958, 3827, 322, 452, 341, 51736], 'temperature': 0.0, 'avg_logprob': -0.15698888897895813, 'compression_ratio': 1.368, 'no_speech_prob': 0.1178070604801178}, {'id': 536, 'seek': 452514, 'start': 4525.14, 'end': 4535.860000000001, 'text': ' set. That is the other question. So let us yeah I will just take that up now. So now', 'tokens': [50364, 992, 13, 663, 307, 264, 661, 1168, 13, 407, 718, 505, 1338, 286, 486, 445, 747, 300, 493, 586, 13, 407, 586, 50900], 'temperature': 0.0, 'avg_logprob': -0.20467105278602013, 'compression_ratio': 1.6352201257861636, 'no_speech_prob': 0.07705259323120117}, {'id': 537, 'seek': 452514, 'start': 4535.860000000001, 'end': 4544.58, 'text': ' essentially you can see that. So essentially to get the new solution I always take the', 'tokens': [50900, 4476, 291, 393, 536, 300, 13, 407, 4476, 281, 483, 264, 777, 3827, 286, 1009, 747, 264, 51336], 'temperature': 0.0, 'avg_logprob': -0.20467105278602013, 'compression_ratio': 1.6352201257861636, 'no_speech_prob': 0.07705259323120117}, {'id': 538, 'seek': 452514, 'start': 4544.58, 'end': 4551.18, 'text': ' join of these elements along these two points. So okay I kept on saying meet of elements', 'tokens': [51336, 3917, 295, 613, 4959, 2051, 613, 732, 2793, 13, 407, 1392, 286, 4305, 322, 1566, 1677, 295, 4959, 51666], 'temperature': 0.0, 'avg_logprob': -0.20467105278602013, 'compression_ratio': 1.6352201257861636, 'no_speech_prob': 0.07705259323120117}, {'id': 539, 'seek': 455118, 'start': 4552.1, 'end': 4560.5, 'text': ' but I am switching to saying join of elements now. Do not get confused. Duality. As long', 'tokens': [50410, 457, 286, 669, 16493, 281, 1566, 3917, 295, 4959, 586, 13, 1144, 406, 483, 9019, 13, 37625, 507, 13, 1018, 938, 50830], 'temperature': 0.0, 'avg_logprob': -0.19850491314399532, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.37515726685523987}, {'id': 540, 'seek': 455118, 'start': 4560.5, 'end': 4568.9400000000005, 'text': ' as I am consistent I say meet or I say join it is the same thing. Do not get confused.', 'tokens': [50830, 382, 286, 669, 8398, 286, 584, 1677, 420, 286, 584, 3917, 309, 307, 264, 912, 551, 13, 1144, 406, 483, 9019, 13, 51252], 'temperature': 0.0, 'avg_logprob': -0.19850491314399532, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.37515726685523987}, {'id': 541, 'seek': 455118, 'start': 4568.9400000000005, 'end': 4573.22, 'text': ' So actually in the data flow literature people were talking about computing in the other', 'tokens': [51252, 407, 767, 294, 264, 1412, 3095, 10394, 561, 645, 1417, 466, 15866, 294, 264, 661, 51466], 'temperature': 0.0, 'avg_logprob': -0.19850491314399532, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.37515726685523987}, {'id': 542, 'seek': 455118, 'start': 4573.22, 'end': 4581.06, 'text': ' direction actually going starting with top and going down and slightly newer there is', 'tokens': [51466, 3513, 767, 516, 2891, 365, 1192, 293, 516, 760, 293, 4748, 17628, 456, 307, 51858], 'temperature': 0.0, 'avg_logprob': -0.19850491314399532, 'compression_ratio': 1.6826923076923077, 'no_speech_prob': 0.37515726685523987}, {'id': 543, 'seek': 458106, 'start': 4581.06, 'end': 4584.900000000001, 'text': ' a framework of abstract interpretation where people do it sort of the other way. So I will', 'tokens': [50364, 257, 8388, 295, 12649, 14174, 689, 561, 360, 309, 1333, 295, 264, 661, 636, 13, 407, 286, 486, 50556], 'temperature': 0.0, 'avg_logprob': -0.21043604975161345, 'compression_ratio': 1.8471074380165289, 'no_speech_prob': 0.004462406039237976}, {'id': 544, 'seek': 458106, 'start': 4584.900000000001, 'end': 4590.580000000001, 'text': ' use I will consistently use the other notation where we always go up as we compute solution.', 'tokens': [50556, 764, 286, 486, 14961, 764, 264, 661, 24657, 689, 321, 1009, 352, 493, 382, 321, 14722, 3827, 13, 50840], 'temperature': 0.0, 'avg_logprob': -0.21043604975161345, 'compression_ratio': 1.8471074380165289, 'no_speech_prob': 0.004462406039237976}, {'id': 545, 'seek': 458106, 'start': 4590.580000000001, 'end': 4598.54, 'text': ' We will go up the chain. So I will talk about the I will only talk about the taking a join.', 'tokens': [50840, 492, 486, 352, 493, 264, 5021, 13, 407, 286, 486, 751, 466, 264, 286, 486, 787, 751, 466, 264, 1940, 257, 3917, 13, 51238], 'temperature': 0.0, 'avg_logprob': -0.21043604975161345, 'compression_ratio': 1.8471074380165289, 'no_speech_prob': 0.004462406039237976}, {'id': 546, 'seek': 458106, 'start': 4598.54, 'end': 4604.26, 'text': ' I will not talk about taking a meet. So even if I say meet please rephrase it to join.', 'tokens': [51238, 286, 486, 406, 751, 466, 1940, 257, 1677, 13, 407, 754, 498, 286, 584, 1677, 1767, 319, 44598, 651, 309, 281, 3917, 13, 51524], 'temperature': 0.0, 'avg_logprob': -0.21043604975161345, 'compression_ratio': 1.8471074380165289, 'no_speech_prob': 0.004462406039237976}, {'id': 547, 'seek': 458106, 'start': 4604.26, 'end': 4610.1, 'text': ' It is just the same does not matter. I am only concerned with like one side of it. I', 'tokens': [51524, 467, 307, 445, 264, 912, 775, 406, 1871, 13, 286, 669, 787, 5922, 365, 411, 472, 1252, 295, 309, 13, 286, 51816], 'temperature': 0.0, 'avg_logprob': -0.21043604975161345, 'compression_ratio': 1.8471074380165289, 'no_speech_prob': 0.004462406039237976}, {'id': 548, 'seek': 461010, 'start': 4610.1, 'end': 4614.46, 'text': ' am only concerned with the semi lattice. I do not bother about if it is a upper semi', 'tokens': [50364, 669, 787, 5922, 365, 264, 12909, 34011, 13, 286, 360, 406, 8677, 466, 498, 309, 307, 257, 6597, 12909, 50582], 'temperature': 0.0, 'avg_logprob': -0.14773535173992777, 'compression_ratio': 1.7342995169082125, 'no_speech_prob': 0.010300444439053535}, {'id': 549, 'seek': 461010, 'start': 4614.46, 'end': 4623.22, 'text': ' lattice or bottom semi lattice. So correspondingly I will use meet and join. So now so the next', 'tokens': [50582, 34011, 420, 2767, 12909, 34011, 13, 407, 11760, 356, 286, 486, 764, 1677, 293, 3917, 13, 407, 586, 370, 264, 958, 51020], 'temperature': 0.0, 'avg_logprob': -0.14773535173992777, 'compression_ratio': 1.7342995169082125, 'no_speech_prob': 0.010300444439053535}, {'id': 550, 'seek': 461010, 'start': 4623.22, 'end': 4630.860000000001, 'text': ' thing is that so every time what is happening is remember the nature of our computation.', 'tokens': [51020, 551, 307, 300, 370, 633, 565, 437, 307, 2737, 307, 1604, 264, 3687, 295, 527, 24903, 13, 51402], 'temperature': 0.0, 'avg_logprob': -0.14773535173992777, 'compression_ratio': 1.7342995169082125, 'no_speech_prob': 0.010300444439053535}, {'id': 551, 'seek': 461010, 'start': 4630.860000000001, 'end': 4638.5, 'text': ' The nature of our computation was that I had this set of in and outs for each basic block', 'tokens': [51402, 440, 3687, 295, 527, 24903, 390, 300, 286, 632, 341, 992, 295, 294, 293, 14758, 337, 1184, 3875, 3461, 51784], 'temperature': 0.0, 'avg_logprob': -0.14773535173992777, 'compression_ratio': 1.7342995169082125, 'no_speech_prob': 0.010300444439053535}, {'id': 552, 'seek': 463850, 'start': 4638.7, 'end': 4643.98, 'text': ' and I had this function which was a function corresponding to each of these elements and', 'tokens': [50374, 293, 286, 632, 341, 2445, 597, 390, 257, 2445, 11760, 281, 1184, 295, 613, 4959, 293, 50638], 'temperature': 0.0, 'avg_logprob': -0.13750086634992117, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.03613575920462608}, {'id': 553, 'seek': 463850, 'start': 4643.98, 'end': 4655.46, 'text': ' every time I was computing the new element. So now so you guys said already said that', 'tokens': [50638, 633, 565, 286, 390, 15866, 264, 777, 4478, 13, 407, 586, 370, 291, 1074, 848, 1217, 848, 300, 51212], 'temperature': 0.0, 'avg_logprob': -0.13750086634992117, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.03613575920462608}, {'id': 554, 'seek': 463850, 'start': 4655.46, 'end': 4660.98, 'text': ' we are we follow this particular chain. We follow a chain. So this guy will only see', 'tokens': [51212, 321, 366, 321, 1524, 341, 1729, 5021, 13, 492, 1524, 257, 5021, 13, 407, 341, 2146, 486, 787, 536, 51488], 'temperature': 0.0, 'avg_logprob': -0.13750086634992117, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.03613575920462608}, {'id': 555, 'seek': 463850, 'start': 4660.98, 'end': 4666.22, 'text': ' values in a certain chain. So why is that the case? Why is it happening that I will', 'tokens': [51488, 4190, 294, 257, 1629, 5021, 13, 407, 983, 307, 300, 264, 1389, 30, 1545, 307, 309, 2737, 300, 286, 486, 51750], 'temperature': 0.0, 'avg_logprob': -0.13750086634992117, 'compression_ratio': 1.673170731707317, 'no_speech_prob': 0.03613575920462608}, {'id': 556, 'seek': 466622, 'start': 4666.22, 'end': 4675.66, 'text': ' only take values in that chain under what? Solution set cannot be monotonically increasing.', 'tokens': [50364, 787, 747, 4190, 294, 300, 5021, 833, 437, 30, 318, 3386, 992, 2644, 312, 1108, 27794, 984, 5662, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.24288627079554967, 'compression_ratio': 1.4094488188976377, 'no_speech_prob': 0.5344305038452148}, {'id': 557, 'seek': 466622, 'start': 4675.66, 'end': 4688.22, 'text': ' Something else has to be. How? Why? Why? Why are they lucky? Why are they on the chain?', 'tokens': [50836, 6595, 1646, 575, 281, 312, 13, 1012, 30, 1545, 30, 1545, 30, 1545, 366, 436, 6356, 30, 1545, 366, 436, 322, 264, 5021, 30, 51464], 'temperature': 0.0, 'avg_logprob': -0.24288627079554967, 'compression_ratio': 1.4094488188976377, 'no_speech_prob': 0.5344305038452148}, {'id': 558, 'seek': 468822, 'start': 4688.22, 'end': 4700.62, 'text': ' What is what is making them beyond the chain? Why is it the case? So let us try to write', 'tokens': [50364, 708, 307, 437, 307, 1455, 552, 4399, 264, 5021, 30, 1545, 307, 309, 264, 1389, 30, 407, 718, 505, 853, 281, 2464, 50984], 'temperature': 0.0, 'avg_logprob': -0.13958504464891222, 'compression_ratio': 1.6770186335403727, 'no_speech_prob': 0.0397036112844944}, {'id': 559, 'seek': 468822, 'start': 4700.62, 'end': 4710.740000000001, 'text': ' the solution here. The function that is coming here. What does this function look like? What', 'tokens': [50984, 264, 3827, 510, 13, 440, 2445, 300, 307, 1348, 510, 13, 708, 775, 341, 2445, 574, 411, 30, 708, 51490], 'temperature': 0.0, 'avg_logprob': -0.13958504464891222, 'compression_ratio': 1.6770186335403727, 'no_speech_prob': 0.0397036112844944}, {'id': 560, 'seek': 468822, 'start': 4710.740000000001, 'end': 4715.5, 'text': ' is this function? This is the in of a basic block. So how do I compute the in of a basic', 'tokens': [51490, 307, 341, 2445, 30, 639, 307, 264, 294, 295, 257, 3875, 3461, 13, 407, 577, 360, 286, 14722, 264, 294, 295, 257, 3875, 51728], 'temperature': 0.0, 'avg_logprob': -0.13958504464891222, 'compression_ratio': 1.6770186335403727, 'no_speech_prob': 0.0397036112844944}, {'id': 561, 'seek': 471550, 'start': 4715.5, 'end': 4729.58, 'text': ' block? I take a union of the predecessors of B and out of that. If I expand upon this', 'tokens': [50364, 3461, 30, 286, 747, 257, 11671, 295, 264, 24874, 45700, 295, 363, 293, 484, 295, 300, 13, 759, 286, 5268, 3564, 341, 51068], 'temperature': 0.0, 'avg_logprob': -0.14265500174628365, 'compression_ratio': 1.4112903225806452, 'no_speech_prob': 0.4674440026283264}, {'id': 562, 'seek': 471550, 'start': 4729.58, 'end': 4742.3, 'text': ' then what is out of B? Out of P? It is nothing but gen of P minus kill of P sorry in of P', 'tokens': [51068, 550, 437, 307, 484, 295, 363, 30, 5925, 295, 430, 30, 467, 307, 1825, 457, 1049, 295, 430, 3175, 1961, 295, 430, 2597, 294, 295, 430, 51704], 'temperature': 0.0, 'avg_logprob': -0.14265500174628365, 'compression_ratio': 1.4112903225806452, 'no_speech_prob': 0.4674440026283264}, {'id': 563, 'seek': 474230, 'start': 4742.3, 'end': 4749.42, 'text': ' minus kill of P plus gen of P. So if you think about the whole function that is happening', 'tokens': [50364, 3175, 1961, 295, 430, 1804, 1049, 295, 430, 13, 407, 498, 291, 519, 466, 264, 1379, 2445, 300, 307, 2737, 50720], 'temperature': 0.0, 'avg_logprob': -0.18372957096543424, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.2553500831127167}, {'id': 564, 'seek': 474230, 'start': 4749.42, 'end': 4754.42, 'text': ' is it is basically two functions. One is this function which come to my transfer function', 'tokens': [50720, 307, 309, 307, 1936, 732, 6828, 13, 1485, 307, 341, 2445, 597, 808, 281, 452, 5003, 2445, 50970], 'temperature': 0.0, 'avg_logprob': -0.18372957096543424, 'compression_ratio': 1.4672131147540983, 'no_speech_prob': 0.2553500831127167}, {'id': 565, 'seek': 475442, 'start': 4754.42, 'end': 4773.38, 'text': ' which essentially looks like out is equal to and my meet function or the join function', 'tokens': [50364, 597, 4476, 1542, 411, 484, 307, 2681, 281, 293, 452, 1677, 2445, 420, 264, 3917, 2445, 51312], 'temperature': 0.0, 'avg_logprob': -0.1527153479086386, 'compression_ratio': 1.425, 'no_speech_prob': 0.011995810084044933}, {'id': 566, 'seek': 475442, 'start': 4773.38, 'end': 4781.38, 'text': ' which joins the values. So my computation is happening under this transfer function.', 'tokens': [51312, 597, 24397, 264, 4190, 13, 407, 452, 24903, 307, 2737, 833, 341, 5003, 2445, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.1527153479086386, 'compression_ratio': 1.425, 'no_speech_prob': 0.011995810084044933}, {'id': 567, 'seek': 478138, 'start': 4781.38, 'end': 4794.1, 'text': ' Same with gen right? Gen also does not change. Only chain that changes is in and out. That', 'tokens': [50364, 10635, 365, 1049, 558, 30, 3632, 611, 775, 406, 1319, 13, 5686, 5021, 300, 2962, 307, 294, 293, 484, 13, 663, 51000], 'temperature': 0.0, 'avg_logprob': -0.23900007164996603, 'compression_ratio': 1.5689655172413792, 'no_speech_prob': 0.9203512072563171}, {'id': 568, 'seek': 478138, 'start': 4794.1, 'end': 4803.18, 'text': ' is fine but what can you say about the nature of this function now? Yeah that any function', 'tokens': [51000, 307, 2489, 457, 437, 393, 291, 584, 466, 264, 3687, 295, 341, 2445, 586, 30, 865, 300, 604, 2445, 51454], 'temperature': 0.0, 'avg_logprob': -0.23900007164996603, 'compression_ratio': 1.5689655172413792, 'no_speech_prob': 0.9203512072563171}, {'id': 569, 'seek': 478138, 'start': 4803.18, 'end': 4809.3, 'text': ' should be always be the same on the same value. You are on the right track. Now think about', 'tokens': [51454, 820, 312, 1009, 312, 264, 912, 322, 264, 912, 2158, 13, 509, 366, 322, 264, 558, 2837, 13, 823, 519, 466, 51760], 'temperature': 0.0, 'avg_logprob': -0.23900007164996603, 'compression_ratio': 1.5689655172413792, 'no_speech_prob': 0.9203512072563171}, {'id': 570, 'seek': 480930, 'start': 4809.3, 'end': 4817.38, 'text': ' in terms of whatever definition we learnt. What type of function is this? No, no, no.', 'tokens': [50364, 294, 2115, 295, 2035, 7123, 321, 18991, 13, 708, 2010, 295, 2445, 307, 341, 30, 883, 11, 572, 11, 572, 13, 50768], 'temperature': 0.0, 'avg_logprob': -0.3070315008294092, 'compression_ratio': 1.4627659574468086, 'no_speech_prob': 0.31164929270744324}, {'id': 571, 'seek': 480930, 'start': 4817.38, 'end': 4826.66, 'text': ' It is a order of assuming function. So if I add a new thing to in that is that can only be equal', 'tokens': [50768, 467, 307, 257, 1668, 295, 11926, 2445, 13, 407, 498, 286, 909, 257, 777, 551, 281, 294, 300, 307, 300, 393, 787, 312, 2681, 51232], 'temperature': 0.0, 'avg_logprob': -0.3070315008294092, 'compression_ratio': 1.4627659574468086, 'no_speech_prob': 0.31164929270744324}, {'id': 572, 'seek': 480930, 'start': 4826.66, 'end': 4836.54, 'text': ' to or greater than the previous out that I got. Because my kill and my gen sets are constant', 'tokens': [51232, 281, 420, 5044, 813, 264, 3894, 484, 300, 286, 658, 13, 1436, 452, 1961, 293, 452, 1049, 6352, 366, 5754, 51726], 'temperature': 0.0, 'avg_logprob': -0.3070315008294092, 'compression_ratio': 1.4627659574468086, 'no_speech_prob': 0.31164929270744324}, {'id': 573, 'seek': 483654, 'start': 4836.74, 'end': 4842.54, 'text': ' for a given basic block they are constants. They do not change. So what can happen is if a new', 'tokens': [50374, 337, 257, 2212, 3875, 3461, 436, 366, 35870, 13, 814, 360, 406, 1319, 13, 407, 437, 393, 1051, 307, 498, 257, 777, 50664], 'temperature': 0.0, 'avg_logprob': -0.20557858393742487, 'compression_ratio': 1.7022222222222223, 'no_speech_prob': 0.24996770918369293}, {'id': 574, 'seek': 483654, 'start': 4842.54, 'end': 4850.34, 'text': ' definition sneaks into in so either my out remains the same if that gets killed let us say right or', 'tokens': [50664, 7123, 9244, 5461, 666, 294, 370, 2139, 452, 484, 7023, 264, 912, 498, 300, 2170, 4652, 718, 505, 584, 558, 420, 51054], 'temperature': 0.0, 'avg_logprob': -0.20557858393742487, 'compression_ratio': 1.7022222222222223, 'no_speech_prob': 0.24996770918369293}, {'id': 575, 'seek': 483654, 'start': 4850.34, 'end': 4859.3, 'text': ' it can increase because that new definition can also get inside this. So if the previous', 'tokens': [51054, 309, 393, 3488, 570, 300, 777, 7123, 393, 611, 483, 1854, 341, 13, 407, 498, 264, 3894, 51502], 'temperature': 0.0, 'avg_logprob': -0.20557858393742487, 'compression_ratio': 1.7022222222222223, 'no_speech_prob': 0.24996770918369293}, {'id': 576, 'seek': 483654, 'start': 4859.3, 'end': 4866.14, 'text': ' output without the with the old value of in was let us say less than out the same will be preserved', 'tokens': [51502, 5598, 1553, 264, 365, 264, 1331, 2158, 295, 294, 390, 718, 505, 584, 1570, 813, 484, 264, 912, 486, 312, 22242, 51844], 'temperature': 0.0, 'avg_logprob': -0.20557858393742487, 'compression_ratio': 1.7022222222222223, 'no_speech_prob': 0.24996770918369293}, {'id': 577, 'seek': 486614, 'start': 4866.14, 'end': 4875.02, 'text': ' even for the new values or the other way round whatever it is. And because there is a loop this', 'tokens': [50364, 754, 337, 264, 777, 4190, 420, 264, 661, 636, 3098, 2035, 309, 307, 13, 400, 570, 456, 307, 257, 6367, 341, 50808], 'temperature': 0.0, 'avg_logprob': -0.16465856862622638, 'compression_ratio': 1.8465346534653466, 'no_speech_prob': 0.0023202293086797}, {'id': 578, 'seek': 486614, 'start': 4875.02, 'end': 4881.820000000001, 'text': ' whole thing is so the whole so the total function that is reaching here for this computation is sort', 'tokens': [50808, 1379, 551, 307, 370, 264, 1379, 370, 264, 3217, 2445, 300, 307, 9906, 510, 337, 341, 24903, 307, 1333, 51148], 'temperature': 0.0, 'avg_logprob': -0.16465856862622638, 'compression_ratio': 1.8465346534653466, 'no_speech_prob': 0.0023202293086797}, {'id': 579, 'seek': 486614, 'start': 4881.820000000001, 'end': 4887.3, 'text': ' of a you can think of that as a composition of these all the functions in the on that line.', 'tokens': [51148, 295, 257, 291, 393, 519, 295, 300, 382, 257, 12686, 295, 613, 439, 264, 6828, 294, 264, 322, 300, 1622, 13, 51422], 'temperature': 0.0, 'avg_logprob': -0.16465856862622638, 'compression_ratio': 1.8465346534653466, 'no_speech_prob': 0.0023202293086797}, {'id': 580, 'seek': 486614, 'start': 4887.3, 'end': 4893.54, 'text': ' So compositions of order preserving functions that is what we are sort of computing.', 'tokens': [51422, 407, 43401, 295, 1668, 33173, 6828, 300, 307, 437, 321, 366, 1333, 295, 15866, 13, 51734], 'temperature': 0.0, 'avg_logprob': -0.16465856862622638, 'compression_ratio': 1.8465346534653466, 'no_speech_prob': 0.0023202293086797}, {'id': 581, 'seek': 489354, 'start': 4893.54, 'end': 4902.86, 'text': ' Number of loops into because every iteration of my while loop I do multiple updates of my basic', 'tokens': [50364, 5118, 295, 16121, 666, 570, 633, 24784, 295, 452, 1339, 6367, 286, 360, 3866, 9205, 295, 452, 3875, 50830], 'temperature': 0.0, 'avg_logprob': -0.2342526592425446, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.05471524968743324}, {'id': 582, 'seek': 489354, 'start': 4902.86, 'end': 4910.54, 'text': ' blocks like multiple basic blocks can get updated. No are you assuming order on the iteration of the', 'tokens': [50830, 8474, 411, 3866, 3875, 8474, 393, 483, 10588, 13, 883, 366, 291, 11926, 1668, 322, 264, 24784, 295, 264, 51214], 'temperature': 0.0, 'avg_logprob': -0.2342526592425446, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.05471524968743324}, {'id': 583, 'seek': 489354, 'start': 4910.54, 'end': 4921.66, 'text': ' basic blocks the best order. So then what yes yes yes so no loop does not it should one shot it', 'tokens': [51214, 3875, 8474, 264, 1151, 1668, 13, 407, 550, 437, 2086, 2086, 2086, 370, 572, 6367, 775, 406, 309, 820, 472, 3347, 309, 51770], 'temperature': 0.0, 'avg_logprob': -0.2342526592425446, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.05471524968743324}, {'id': 584, 'seek': 492166, 'start': 4921.66, 'end': 4929.0199999999995, 'text': ' should get terminate it should terminate. So let us pull this question so now if there is no loop', 'tokens': [50364, 820, 483, 10761, 473, 309, 820, 10761, 473, 13, 407, 718, 505, 2235, 341, 1168, 370, 586, 498, 456, 307, 572, 6367, 50732], 'temperature': 0.0, 'avg_logprob': -0.23934255620484712, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.047222718596458435}, {'id': 585, 'seek': 492166, 'start': 4929.0199999999995, 'end': 4938.7, 'text': ' how many iterations of the while loop will be there. Two why two yes yes first move to compute', 'tokens': [50732, 577, 867, 36540, 295, 264, 1339, 6367, 486, 312, 456, 13, 4453, 983, 732, 2086, 2086, 700, 1286, 281, 14722, 51216], 'temperature': 0.0, 'avg_logprob': -0.23934255620484712, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.047222718596458435}, {'id': 586, 'seek': 492166, 'start': 4938.7, 'end': 4944.34, 'text': ' the values the second to check the values do not change. So the last iteration is always going to', 'tokens': [51216, 264, 4190, 264, 1150, 281, 1520, 264, 4190, 360, 406, 1319, 13, 407, 264, 1036, 24784, 307, 1009, 516, 281, 51498], 'temperature': 0.0, 'avg_logprob': -0.23934255620484712, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.047222718596458435}, {'id': 587, 'seek': 492166, 'start': 4944.34, 'end': 4948.78, 'text': ' the check loop which will just see that nothing changed okay I am good. So the flag will be set', 'tokens': [51498, 264, 1520, 6367, 597, 486, 445, 536, 300, 1825, 3105, 1392, 286, 669, 665, 13, 407, 264, 7166, 486, 312, 992, 51720], 'temperature': 0.0, 'avg_logprob': -0.23934255620484712, 'compression_ratio': 1.787037037037037, 'no_speech_prob': 0.047222718596458435}, {'id': 588, 'seek': 494878, 'start': 4948.78, 'end': 4955.9, 'text': ' flag will not get set and it will come out right two iterations. What if there is a loop then as', 'tokens': [50364, 7166, 486, 406, 483, 992, 293, 309, 486, 808, 484, 558, 732, 36540, 13, 708, 498, 456, 307, 257, 6367, 550, 382, 50720], 'temperature': 0.0, 'avg_logprob': -0.1406635011945452, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.018448807299137115}, {'id': 589, 'seek': 494878, 'start': 4955.9, 'end': 4963.34, 'text': ' you said whatever got computed to the last that the bottom of the loop that will get propagated', 'tokens': [50720, 291, 848, 2035, 658, 40610, 281, 264, 1036, 300, 264, 2767, 295, 264, 6367, 300, 486, 483, 12425, 770, 51092], 'temperature': 0.0, 'avg_logprob': -0.1406635011945452, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.018448807299137115}, {'id': 590, 'seek': 494878, 'start': 4963.34, 'end': 4972.7, 'text': ' to the head of the loop again. So very very very good point so essentially what it depends on is', 'tokens': [51092, 281, 264, 1378, 295, 264, 6367, 797, 13, 407, 588, 588, 588, 665, 935, 370, 4476, 437, 309, 5946, 322, 307, 51560], 'temperature': 0.0, 'avg_logprob': -0.1406635011945452, 'compression_ratio': 1.660919540229885, 'no_speech_prob': 0.018448807299137115}, {'id': 591, 'seek': 497270, 'start': 4973.179999999999, 'end': 4980.62, 'text': ' something known as the loop depth. The loop depth looks like this so essentially it says that if', 'tokens': [50388, 746, 2570, 382, 264, 6367, 7161, 13, 440, 6367, 7161, 1542, 411, 341, 370, 4476, 309, 1619, 300, 498, 50760], 'temperature': 0.0, 'avg_logprob': -0.1424681495217716, 'compression_ratio': 1.8495145631067962, 'no_speech_prob': 0.08253166079521179}, {'id': 592, 'seek': 497270, 'start': 4980.62, 'end': 4987.62, 'text': ' you have back edges what if you have sequence of such back edges then the first iteration one of', 'tokens': [50760, 291, 362, 646, 8819, 437, 498, 291, 362, 8310, 295, 1270, 646, 8819, 550, 264, 700, 24784, 472, 295, 51110], 'temperature': 0.0, 'avg_logprob': -0.1424681495217716, 'compression_ratio': 1.8495145631067962, 'no_speech_prob': 0.08253166079521179}, {'id': 593, 'seek': 497270, 'start': 4987.62, 'end': 4993.5, 'text': ' them will get fine but the second time whatever got propagated here will get propagated here and', 'tokens': [51110, 552, 486, 483, 2489, 457, 264, 1150, 565, 2035, 658, 12425, 770, 510, 486, 483, 12425, 770, 510, 293, 51404], 'temperature': 0.0, 'avg_logprob': -0.1424681495217716, 'compression_ratio': 1.8495145631067962, 'no_speech_prob': 0.08253166079521179}, {'id': 594, 'seek': 497270, 'start': 4993.5, 'end': 5002.139999999999, 'text': ' the again the same thing will happen. So it depends on the loop depth and interestingly in', 'tokens': [51404, 264, 797, 264, 912, 551, 486, 1051, 13, 407, 309, 5946, 322, 264, 6367, 7161, 293, 25873, 294, 51836], 'temperature': 0.0, 'avg_logprob': -0.1424681495217716, 'compression_ratio': 1.8495145631067962, 'no_speech_prob': 0.08253166079521179}, {'id': 595, 'seek': 500214, 'start': 5002.14, 'end': 5008.5, 'text': ' this case not on the size of the set of the definitions how many definitions are there.', 'tokens': [50364, 341, 1389, 406, 322, 264, 2744, 295, 264, 992, 295, 264, 21988, 577, 867, 21988, 366, 456, 13, 50682], 'temperature': 0.0, 'avg_logprob': -0.14895529747009278, 'compression_ratio': 1.6419753086419753, 'no_speech_prob': 0.0009693749598227441}, {'id': 596, 'seek': 500214, 'start': 5008.5, 'end': 5016.34, 'text': ' Assuming that we are assuming that the updates on those sets are constant like the transfer', 'tokens': [50682, 6281, 24919, 300, 321, 366, 11926, 300, 264, 9205, 322, 729, 6352, 366, 5754, 411, 264, 5003, 51074], 'temperature': 0.0, 'avg_logprob': -0.14895529747009278, 'compression_ratio': 1.6419753086419753, 'no_speech_prob': 0.0009693749598227441}, {'id': 597, 'seek': 500214, 'start': 5016.34, 'end': 5027.3, 'text': ' function I can apply in constant time right excellent really happy. So okay so now the', 'tokens': [51074, 2445, 286, 393, 3079, 294, 5754, 565, 558, 7103, 534, 2055, 13, 407, 1392, 370, 586, 264, 51622], 'temperature': 0.0, 'avg_logprob': -0.14895529747009278, 'compression_ratio': 1.6419753086419753, 'no_speech_prob': 0.0009693749598227441}, {'id': 598, 'seek': 502730, 'start': 5027.3, 'end': 5034.66, 'text': ' business is that we are here and so it looks like our function is a order preserving function', 'tokens': [50364, 1606, 307, 300, 321, 366, 510, 293, 370, 309, 1542, 411, 527, 2445, 307, 257, 1668, 33173, 2445, 50732], 'temperature': 0.0, 'avg_logprob': -0.12613902319045295, 'compression_ratio': 1.826086956521739, 'no_speech_prob': 0.15151455998420715}, {'id': 599, 'seek': 502730, 'start': 5034.66, 'end': 5041.14, 'text': ' a monotonic function and we seem to be going along a chain right by that will happen right', 'tokens': [50732, 257, 1108, 310, 11630, 2445, 293, 321, 1643, 281, 312, 516, 2051, 257, 5021, 558, 538, 300, 486, 1051, 558, 51056], 'temperature': 0.0, 'avg_logprob': -0.12613902319045295, 'compression_ratio': 1.826086956521739, 'no_speech_prob': 0.15151455998420715}, {'id': 600, 'seek': 502730, 'start': 5041.14, 'end': 5046.74, 'text': ' because you are so okay. So can you see the connection of why we did all this business', 'tokens': [51056, 570, 291, 366, 370, 1392, 13, 407, 393, 291, 536, 264, 4984, 295, 983, 321, 630, 439, 341, 1606, 51336], 'temperature': 0.0, 'avg_logprob': -0.12613902319045295, 'compression_ratio': 1.826086956521739, 'no_speech_prob': 0.15151455998420715}, {'id': 601, 'seek': 502730, 'start': 5046.74, 'end': 5051.9400000000005, 'text': ' why we talked about lattice theory because now you can put a lot more structure to the type of', 'tokens': [51336, 983, 321, 2825, 466, 34011, 5261, 570, 586, 291, 393, 829, 257, 688, 544, 3877, 281, 264, 2010, 295, 51596], 'temperature': 0.0, 'avg_logprob': -0.12613902319045295, 'compression_ratio': 1.826086956521739, 'no_speech_prob': 0.15151455998420715}, {'id': 602, 'seek': 502730, 'start': 5051.9400000000005, 'end': 5056.34, 'text': ' computation that is happening. It does not look like that insane some weird computation that is', 'tokens': [51596, 24903, 300, 307, 2737, 13, 467, 775, 406, 574, 411, 300, 10838, 512, 3657, 24903, 300, 307, 51816], 'temperature': 0.0, 'avg_logprob': -0.12613902319045295, 'compression_ratio': 1.826086956521739, 'no_speech_prob': 0.15151455998420715}, {'id': 603, 'seek': 505634, 'start': 5056.34, 'end': 5061.06, 'text': ' happening this actually has a lot of structure in it there is a very deep mathematical structure', 'tokens': [50364, 2737, 341, 767, 575, 257, 688, 295, 3877, 294, 309, 456, 307, 257, 588, 2452, 18894, 3877, 50600], 'temperature': 0.0, 'avg_logprob': -0.140531832521612, 'compression_ratio': 1.7442922374429224, 'no_speech_prob': 0.005900856107473373}, {'id': 604, 'seek': 505634, 'start': 5061.06, 'end': 5068.900000000001, 'text': ' to how the solution is be computed right. So these all we have answered very busy expressions', 'tokens': [50600, 281, 577, 264, 3827, 307, 312, 40610, 558, 13, 407, 613, 439, 321, 362, 10103, 588, 5856, 15277, 50992], 'temperature': 0.0, 'avg_logprob': -0.140531832521612, 'compression_ratio': 1.7442922374429224, 'no_speech_prob': 0.005900856107473373}, {'id': 605, 'seek': 505634, 'start': 5068.900000000001, 'end': 5075.5, 'text': ' again you guys can figure it out so I will not bore you with this now. So what is the this thing', 'tokens': [50992, 797, 291, 1074, 393, 2573, 309, 484, 370, 286, 486, 406, 26002, 291, 365, 341, 586, 13, 407, 437, 307, 264, 341, 551, 51322], 'temperature': 0.0, 'avg_logprob': -0.140531832521612, 'compression_ratio': 1.7442922374429224, 'no_speech_prob': 0.005900856107473373}, {'id': 606, 'seek': 505634, 'start': 5075.5, 'end': 5082.42, 'text': ' here it is the very similar thing so the set is the power set of the expressions right and you', 'tokens': [51322, 510, 309, 307, 264, 588, 2531, 551, 370, 264, 992, 307, 264, 1347, 992, 295, 264, 15277, 558, 293, 291, 51668], 'temperature': 0.0, 'avg_logprob': -0.140531832521612, 'compression_ratio': 1.7442922374429224, 'no_speech_prob': 0.005900856107473373}, {'id': 607, 'seek': 508242, 'start': 5082.42, 'end': 5088.06, 'text': ' have to think which ordering relation they are ordered now what is the bottom element.', 'tokens': [50364, 362, 281, 519, 597, 21739, 9721, 436, 366, 8866, 586, 437, 307, 264, 2767, 4478, 13, 50646], 'temperature': 0.0, 'avg_logprob': -0.11283183097839355, 'compression_ratio': 1.6358024691358024, 'no_speech_prob': 0.016216464340686798}, {'id': 608, 'seek': 508242, 'start': 5088.06, 'end': 5100.7, 'text': ' So one more small thing maybe that will help you think and what did I initialize my lattice', 'tokens': [50646, 407, 472, 544, 1359, 551, 1310, 300, 486, 854, 291, 519, 293, 437, 630, 286, 5883, 1125, 452, 34011, 51278], 'temperature': 0.0, 'avg_logprob': -0.11283183097839355, 'compression_ratio': 1.6358024691358024, 'no_speech_prob': 0.016216464340686798}, {'id': 609, 'seek': 508242, 'start': 5100.7, 'end': 5110.1, 'text': ' with my solution with to begin with empty empty is what here the bottom of the lattice', 'tokens': [51278, 365, 452, 3827, 365, 281, 1841, 365, 6707, 6707, 307, 437, 510, 264, 2767, 295, 264, 34011, 51748], 'temperature': 0.0, 'avg_logprob': -0.11283183097839355, 'compression_ratio': 1.6358024691358024, 'no_speech_prob': 0.016216464340686798}, {'id': 610, 'seek': 511010, 'start': 5110.1, 'end': 5120.58, 'text': ' so looks like what we are doing is initializing our solution with the bottom of the lattice', 'tokens': [50364, 370, 1542, 411, 437, 321, 366, 884, 307, 5883, 3319, 527, 3827, 365, 264, 2767, 295, 264, 34011, 50888], 'temperature': 0.0, 'avg_logprob': -0.10536032456618089, 'compression_ratio': 1.4596774193548387, 'no_speech_prob': 0.00309585127979517}, {'id': 611, 'seek': 511010, 'start': 5120.58, 'end': 5131.660000000001, 'text': ' and applying some order preserving transfer function which looks to be giving me the best', 'tokens': [50888, 293, 9275, 512, 1668, 33173, 5003, 2445, 597, 1542, 281, 312, 2902, 385, 264, 1151, 51442], 'temperature': 0.0, 'avg_logprob': -0.10536032456618089, 'compression_ratio': 1.4596774193548387, 'no_speech_prob': 0.00309585127979517}, {'id': 612, 'seek': 513166, 'start': 5131.66, 'end': 5141.0599999999995, 'text': ' solution I do not know why it happens looks like that is happening is not it ok.', 'tokens': [50364, 3827, 286, 360, 406, 458, 983, 309, 2314, 1542, 411, 300, 307, 2737, 307, 406, 309, 3133, 13, 50834], 'temperature': 0.0, 'avg_logprob': -0.15297432551308285, 'compression_ratio': 1.6496815286624205, 'no_speech_prob': 0.22617198526859283}, {'id': 613, 'seek': 513166, 'start': 5141.0599999999995, 'end': 5151.58, 'text': ' So now let us talk about very busy expressions so very busy expressions just to make sure tell', 'tokens': [50834, 407, 586, 718, 505, 751, 466, 588, 5856, 15277, 370, 588, 5856, 15277, 445, 281, 652, 988, 980, 51360], 'temperature': 0.0, 'avg_logprob': -0.15297432551308285, 'compression_ratio': 1.6496815286624205, 'no_speech_prob': 0.22617198526859283}, {'id': 614, 'seek': 513166, 'start': 5151.58, 'end': 5157.9, 'text': ' you that this was not a fluke looks to be the pattern looks to be consistent a very', 'tokens': [51360, 291, 300, 341, 390, 406, 257, 5029, 330, 1542, 281, 312, 264, 5102, 1542, 281, 312, 8398, 257, 588, 51676], 'temperature': 0.0, 'avg_logprob': -0.15297432551308285, 'compression_ratio': 1.6496815286624205, 'no_speech_prob': 0.22617198526859283}, {'id': 615, 'seek': 515790, 'start': 5157.9, 'end': 5161.66, 'text': ' busy expression what was the lattice can you think about what the lattice would be.', 'tokens': [50364, 5856, 6114, 437, 390, 264, 34011, 393, 291, 519, 466, 437, 264, 34011, 576, 312, 13, 50552], 'temperature': 0.0, 'avg_logprob': -0.23475417783183436, 'compression_ratio': 1.6987179487179487, 'no_speech_prob': 0.033066947013139725}, {'id': 616, 'seek': 515790, 'start': 5161.66, 'end': 5169.139999999999, 'text': ' So very busy expression was doing what it was trying to compute the it was a all path or a', 'tokens': [50552, 407, 588, 5856, 6114, 390, 884, 437, 309, 390, 1382, 281, 14722, 264, 309, 390, 257, 439, 3100, 420, 257, 50926], 'temperature': 0.0, 'avg_logprob': -0.23475417783183436, 'compression_ratio': 1.6987179487179487, 'no_speech_prob': 0.033066947013139725}, {'id': 617, 'seek': 515790, 'start': 5169.139999999999, 'end': 5183.94, 'text': ' any path solution all path so what should I initialize it with the universal set right and', 'tokens': [50926, 604, 3100, 3827, 439, 3100, 370, 437, 820, 286, 5883, 1125, 309, 365, 264, 11455, 992, 558, 293, 51666], 'temperature': 0.0, 'avg_logprob': -0.23475417783183436, 'compression_ratio': 1.6987179487179487, 'no_speech_prob': 0.033066947013139725}, {'id': 618, 'seek': 518394, 'start': 5184.94, 'end': 5193.86, 'text': ' then every time my solution will happen what will happen to the solution decrease right', 'tokens': [50414, 550, 633, 565, 452, 3827, 486, 1051, 437, 486, 1051, 281, 264, 3827, 11514, 558, 50860], 'temperature': 0.0, 'avg_logprob': -0.14114323415254293, 'compression_ratio': 1.9574468085106382, 'no_speech_prob': 0.03840102255344391}, {'id': 619, 'seek': 518394, 'start': 5193.86, 'end': 5202.0599999999995, 'text': ' because something will because of the intersection something will be thrown out right the transfer', 'tokens': [50860, 570, 746, 486, 570, 295, 264, 15236, 746, 486, 312, 11732, 484, 558, 264, 5003, 51270], 'temperature': 0.0, 'avg_logprob': -0.14114323415254293, 'compression_ratio': 1.9574468085106382, 'no_speech_prob': 0.03840102255344391}, {'id': 620, 'seek': 518394, 'start': 5202.0599999999995, 'end': 5205.54, 'text': ' function will kill something and something will reduce an intersection will throw that', 'tokens': [51270, 2445, 486, 1961, 746, 293, 746, 486, 5407, 364, 15236, 486, 3507, 300, 51444], 'temperature': 0.0, 'avg_logprob': -0.14114323415254293, 'compression_ratio': 1.9574468085106382, 'no_speech_prob': 0.03840102255344391}, {'id': 621, 'seek': 518394, 'start': 5205.54, 'end': 5213.179999999999, 'text': ' part out in the for the next guy. So if I want to create a chain for this what would the chain', 'tokens': [51444, 644, 484, 294, 264, 337, 264, 958, 2146, 13, 407, 498, 286, 528, 281, 1884, 257, 5021, 337, 341, 437, 576, 264, 5021, 51826], 'temperature': 0.0, 'avg_logprob': -0.14114323415254293, 'compression_ratio': 1.9574468085106382, 'no_speech_prob': 0.03840102255344391}, {'id': 622, 'seek': 521318, 'start': 5213.18, 'end': 5220.58, 'text': ' look like yes so it will start with the set of expressions now so we have this set of all', 'tokens': [50364, 574, 411, 2086, 370, 309, 486, 722, 365, 264, 992, 295, 15277, 586, 370, 321, 362, 341, 992, 295, 439, 50734], 'temperature': 0.0, 'avg_logprob': -0.216998291015625, 'compression_ratio': 1.6, 'no_speech_prob': 0.3046477138996124}, {'id': 623, 'seek': 521318, 'start': 5220.58, 'end': 5241.34, 'text': ' expressions then I will have the 3 3 yeah right something like this then I will have what this', 'tokens': [50734, 15277, 550, 286, 486, 362, 264, 805, 805, 1338, 558, 746, 411, 341, 550, 286, 486, 362, 437, 341, 51772], 'temperature': 0.0, 'avg_logprob': -0.216998291015625, 'compression_ratio': 1.6, 'no_speech_prob': 0.3046477138996124}, {'id': 624, 'seek': 524134, 'start': 5241.34, 'end': 5256.7, 'text': ' guy will be what which what will be this element yeah so intersection of these two is what e 2', 'tokens': [50364, 2146, 486, 312, 437, 597, 437, 486, 312, 341, 4478, 1338, 370, 15236, 295, 613, 732, 307, 437, 308, 568, 51132], 'temperature': 0.0, 'avg_logprob': -0.15997462471326193, 'compression_ratio': 1.5206611570247934, 'no_speech_prob': 0.02842945046722889}, {'id': 625, 'seek': 524134, 'start': 5256.7, 'end': 5266.34, 'text': ' e 3 then so on and finally you will have the empty set here so now can so now your set is', 'tokens': [51132, 308, 805, 550, 370, 322, 293, 2721, 291, 486, 362, 264, 6707, 992, 510, 370, 586, 393, 370, 586, 428, 992, 307, 51614], 'temperature': 0.0, 'avg_logprob': -0.15997462471326193, 'compression_ratio': 1.5206611570247934, 'no_speech_prob': 0.02842945046722889}, {'id': 626, 'seek': 526634, 'start': 5266.34, 'end': 5274.1, 'text': ' the set of all expressions e 1 e 2 e n and what is my relation my ordering relation', 'tokens': [50364, 264, 992, 295, 439, 15277, 308, 502, 308, 568, 308, 297, 293, 437, 307, 452, 9721, 452, 21739, 9721, 50752], 'temperature': 0.0, 'avg_logprob': -0.20862358940972223, 'compression_ratio': 1.3884297520661157, 'no_speech_prob': 0.16184721887111664}, {'id': 627, 'seek': 526634, 'start': 5274.1, 'end': 5295.14, 'text': " hey look at it right so now I am doing my computation is on this lot of people don't", 'tokens': [50752, 4177, 574, 412, 309, 558, 370, 586, 286, 669, 884, 452, 24903, 307, 322, 341, 688, 295, 561, 500, 380, 51804], 'temperature': 0.0, 'avg_logprob': -0.20862358940972223, 'compression_ratio': 1.3884297520661157, 'no_speech_prob': 0.16184721887111664}, {'id': 628, 'seek': 529514, 'start': 5295.14, 'end': 5299.18, 'text': ' like this symbol actually I was little scared like writing it but you can and let us write it', 'tokens': [50364, 411, 341, 5986, 767, 286, 390, 707, 5338, 411, 3579, 309, 457, 291, 393, 293, 718, 505, 2464, 309, 50566], 'temperature': 0.0, 'avg_logprob': -0.23501719803106588, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.10769406706094742}, {'id': 629, 'seek': 529514, 'start': 5299.18, 'end': 5314.9800000000005, 'text': ' yes yes so now do I see the same pattern again we initialize our computation with the bottom', 'tokens': [50566, 2086, 2086, 370, 586, 360, 286, 536, 264, 912, 5102, 797, 321, 5883, 1125, 527, 24903, 365, 264, 2767, 51356], 'temperature': 0.0, 'avg_logprob': -0.23501719803106588, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.10769406706094742}, {'id': 630, 'seek': 529514, 'start': 5314.9800000000005, 'end': 5322.02, 'text': ' of my lattice and keep on applying the transfer function which reaches a particular solution', 'tokens': [51356, 295, 452, 34011, 293, 1066, 322, 9275, 264, 5003, 2445, 597, 14235, 257, 1729, 3827, 51708], 'temperature': 0.0, 'avg_logprob': -0.23501719803106588, 'compression_ratio': 1.5674157303370786, 'no_speech_prob': 0.10769406706094742}, {'id': 631, 'seek': 532202, 'start': 5322.02, 'end': 5330.700000000001, 'text': ' and are all my other candidates all the other possible solutions are they over approximations', 'tokens': [50364, 293, 366, 439, 452, 661, 11255, 439, 264, 661, 1944, 6547, 366, 436, 670, 8542, 763, 50798], 'temperature': 0.0, 'avg_logprob': -0.15845410029093424, 'compression_ratio': 1.7531645569620253, 'no_speech_prob': 0.03906829655170441}, {'id': 632, 'seek': 532202, 'start': 5330.700000000001, 'end': 5339.3, 'text': ' are my upper bound still in over approximations empty set is an over approximation so nothing', 'tokens': [50798, 366, 452, 6597, 5472, 920, 294, 670, 8542, 763, 6707, 992, 307, 364, 670, 28023, 370, 1825, 51228], 'temperature': 0.0, 'avg_logprob': -0.15845410029093424, 'compression_ratio': 1.7531645569620253, 'no_speech_prob': 0.03906829655170441}, {'id': 633, 'seek': 532202, 'start': 5339.3, 'end': 5347.5, 'text': " is busy don't do that optimization fine right so see there is so much of structure in all", 'tokens': [51228, 307, 5856, 500, 380, 360, 300, 19618, 2489, 558, 370, 536, 456, 307, 370, 709, 295, 3877, 294, 439, 51638], 'temperature': 0.0, 'avg_logprob': -0.15845410029093424, 'compression_ratio': 1.7531645569620253, 'no_speech_prob': 0.03906829655170441}, {'id': 634, 'seek': 534750, 'start': 5347.5, 'end': 5356.26, 'text': ' these problems right so now it has become very simple matter of figuring out the lattice which', 'tokens': [50364, 613, 2740, 558, 370, 586, 309, 575, 1813, 588, 2199, 1871, 295, 15213, 484, 264, 34011, 597, 50802], 'temperature': 0.0, 'avg_logprob': -0.11980693768232296, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.06541740149259567}, {'id': 635, 'seek': 534750, 'start': 5356.26, 'end': 5360.18, 'text': ' means figuring out the set over which I am doing this computation what what does my space of', 'tokens': [50802, 1355, 15213, 484, 264, 992, 670, 597, 286, 669, 884, 341, 24903, 437, 437, 775, 452, 1901, 295, 50998], 'temperature': 0.0, 'avg_logprob': -0.11980693768232296, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.06541740149259567}, {'id': 636, 'seek': 534750, 'start': 5360.18, 'end': 5367.46, 'text': ' solutions look like and how are they structured right by what operation are they structured and', 'tokens': [50998, 6547, 574, 411, 293, 577, 366, 436, 18519, 558, 538, 437, 6916, 366, 436, 18519, 293, 51362], 'temperature': 0.0, 'avg_logprob': -0.11980693768232296, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.06541740149259567}, {'id': 637, 'seek': 534750, 'start': 5367.46, 'end': 5375.3, 'text': ' just by telling by by just knowing that and figuring out the nature of my transfer function', 'tokens': [51362, 445, 538, 3585, 538, 538, 445, 5276, 300, 293, 15213, 484, 264, 3687, 295, 452, 5003, 2445, 51754], 'temperature': 0.0, 'avg_logprob': -0.11980693768232296, 'compression_ratio': 1.838235294117647, 'no_speech_prob': 0.06541740149259567}, {'id': 638, 'seek': 537530, 'start': 5375.3, 'end': 5381.74, 'text': ' is it a order preserving transfer function if that is the case I can simply say that the way', 'tokens': [50364, 307, 309, 257, 1668, 33173, 5003, 2445, 498, 300, 307, 264, 1389, 286, 393, 2935, 584, 300, 264, 636, 50686], 'temperature': 0.0, 'avg_logprob': -0.15821915581112816, 'compression_ratio': 1.7688679245283019, 'no_speech_prob': 0.0486987866461277}, {'id': 639, 'seek': 537530, 'start': 5381.74, 'end': 5387.900000000001, 'text': ' I should do this computation is initialize my computation at the bottom of the lattice', 'tokens': [50686, 286, 820, 360, 341, 24903, 307, 5883, 1125, 452, 24903, 412, 264, 2767, 295, 264, 34011, 50994], 'temperature': 0.0, 'avg_logprob': -0.15821915581112816, 'compression_ratio': 1.7688679245283019, 'no_speech_prob': 0.0486987866461277}, {'id': 640, 'seek': 537530, 'start': 5387.900000000001, 'end': 5393.66, 'text': ' and keep on applying this order for the transfer function till you reach a solution any upper', 'tokens': [50994, 293, 1066, 322, 9275, 341, 1668, 337, 264, 5003, 2445, 4288, 291, 2524, 257, 3827, 604, 6597, 51282], 'temperature': 0.0, 'avg_logprob': -0.15821915581112816, 'compression_ratio': 1.7688679245283019, 'no_speech_prob': 0.0486987866461277}, {'id': 641, 'seek': 537530, 'start': 5393.66, 'end': 5398.860000000001, 'text': " bound on that is going to be an over approximation which says which you can as well take I don't care", 'tokens': [51282, 5472, 322, 300, 307, 516, 281, 312, 364, 670, 28023, 597, 1619, 597, 291, 393, 382, 731, 747, 286, 500, 380, 1127, 51542], 'temperature': 0.0, 'avg_logprob': -0.15821915581112816, 'compression_ratio': 1.7688679245283019, 'no_speech_prob': 0.0486987866461277}, {'id': 642, 'seek': 539886, 'start': 5398.86, 'end': 5407.219999999999, 'text': ' so now there are few questions remaining one is that why does it happen that so first is that', 'tokens': [50364, 370, 586, 456, 366, 1326, 1651, 8877, 472, 307, 300, 983, 775, 309, 1051, 300, 370, 700, 307, 300, 50782], 'temperature': 0.0, 'avg_logprob': -0.1183348055239077, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.06735672801733017}, {'id': 643, 'seek': 539886, 'start': 5407.219999999999, 'end': 5413.54, 'text': ' for such a lattice is it given guaranteed that a solution would exist all the questions we were', 'tokens': [50782, 337, 1270, 257, 34011, 307, 309, 2212, 18031, 300, 257, 3827, 576, 2514, 439, 264, 1651, 321, 645, 51098], 'temperature': 0.0, 'avg_logprob': -0.1183348055239077, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.06735672801733017}, {'id': 644, 'seek': 539886, 'start': 5413.54, 'end': 5418.219999999999, 'text': ' posing yesterday the second is now you should not think about only these four problems we had talked', 'tokens': [51098, 40378, 5186, 264, 1150, 307, 586, 291, 820, 406, 519, 466, 787, 613, 1451, 2740, 321, 632, 2825, 51332], 'temperature': 0.0, 'avg_logprob': -0.1183348055239077, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.06735672801733017}, {'id': 645, 'seek': 539886, 'start': 5418.219999999999, 'end': 5423.66, 'text': ' about two other problems yesterday we have talked about constant propagation and we have talked about', 'tokens': [51332, 466, 732, 661, 2740, 5186, 321, 362, 2825, 466, 5754, 38377, 293, 321, 362, 2825, 466, 51604], 'temperature': 0.0, 'avg_logprob': -0.1183348055239077, 'compression_ratio': 1.8666666666666667, 'no_speech_prob': 0.06735672801733017}, {'id': 646, 'seek': 542366, 'start': 5423.66, 'end': 5430.34, 'text': ' interval analysis right so we have even talked about other problems so for constant propagation', 'tokens': [50364, 15035, 5215, 558, 370, 321, 362, 754, 2825, 466, 661, 2740, 370, 337, 5754, 38377, 50698], 'temperature': 0.0, 'avg_logprob': -0.16187316576639812, 'compression_ratio': 1.7212121212121212, 'no_speech_prob': 0.15506058931350708}, {'id': 647, 'seek': 542366, 'start': 5430.34, 'end': 5443.9, 'text': ' what would the lattice look like no constant to all constant where are the constants the set', 'tokens': [50698, 437, 576, 264, 34011, 574, 411, 572, 5754, 281, 439, 5754, 689, 366, 264, 35870, 264, 992, 51376], 'temperature': 0.0, 'avg_logprob': -0.16187316576639812, 'compression_ratio': 1.7212121212121212, 'no_speech_prob': 0.15506058931350708}, {'id': 648, 'seek': 542366, 'start': 5443.9, 'end': 5449.22, 'text': ' was what what is the set of values I could have assigned to any location it could be either not', 'tokens': [51376, 390, 437, 437, 307, 264, 992, 295, 4190, 286, 727, 362, 13279, 281, 604, 4914, 309, 727, 312, 2139, 406, 51642], 'temperature': 0.0, 'avg_logprob': -0.16187316576639812, 'compression_ratio': 1.7212121212121212, 'no_speech_prob': 0.15506058931350708}, {'id': 649, 'seek': 544922, 'start': 5449.22, 'end': 5456.34, 'text': " constant or don't know or the set of all constants 1 2 whatever right this was a set of values I was", 'tokens': [50364, 5754, 420, 500, 380, 458, 420, 264, 992, 295, 439, 35870, 502, 568, 2035, 558, 341, 390, 257, 992, 295, 4190, 286, 390, 50720], 'temperature': 0.0, 'avg_logprob': -0.1712195733014275, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.4421044886112213}, {'id': 650, 'seek': 544922, 'start': 5456.34, 'end': 5470.06, 'text': ' working on right so how would what the lack what would the lattice for this look like I know I', 'tokens': [50720, 1364, 322, 558, 370, 577, 576, 437, 264, 5011, 437, 576, 264, 34011, 337, 341, 574, 411, 286, 458, 286, 51406], 'temperature': 0.0, 'avg_logprob': -0.1712195733014275, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.4421044886112213}, {'id': 651, 'seek': 544922, 'start': 5470.06, 'end': 5472.740000000001, 'text': ' know so what should the lattice look like what should the computation on the lattice look like', 'tokens': [51406, 458, 370, 437, 820, 264, 34011, 574, 411, 437, 820, 264, 24903, 322, 264, 34011, 574, 411, 51540], 'temperature': 0.0, 'avg_logprob': -0.1712195733014275, 'compression_ratio': 1.8954248366013071, 'no_speech_prob': 0.4421044886112213}, {'id': 652, 'seek': 547274, 'start': 5472.74, 'end': 5483.26, 'text': " okay don't know people like don't know to be at the bottom because we initialize again to don't", 'tokens': [50364, 1392, 500, 380, 458, 561, 411, 500, 380, 458, 281, 312, 412, 264, 2767, 570, 321, 5883, 1125, 797, 281, 500, 380, 50890], 'temperature': 0.0, 'avg_logprob': -0.21523778915405273, 'compression_ratio': 1.6724137931034482, 'no_speech_prob': 0.07991976290941238}, {'id': 653, 'seek': 547274, 'start': 5483.26, 'end': 5494.34, 'text': " know again you should actually so don't know then what to non-constant then don't know to constant", 'tokens': [50890, 458, 797, 291, 820, 767, 370, 500, 380, 458, 550, 437, 281, 2107, 12, 25279, 394, 550, 500, 380, 458, 281, 5754, 51444], 'temperature': 0.0, 'avg_logprob': -0.21523778915405273, 'compression_ratio': 1.6724137931034482, 'no_speech_prob': 0.07991976290941238}, {'id': 654, 'seek': 549434, 'start': 5494.34, 'end': 5508.58, 'text': " okay and constant to non-constant right but this is a hasher diagram right so we don't we get rid", 'tokens': [50364, 1392, 293, 5754, 281, 2107, 12, 25279, 394, 558, 457, 341, 307, 257, 575, 511, 10686, 558, 370, 321, 500, 380, 321, 483, 3973, 51076], 'temperature': 0.0, 'avg_logprob': -0.1735881688643475, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.017863938584923744}, {'id': 655, 'seek': 549434, 'start': 5508.58, 'end': 5521.58, 'text': " of transit dependencies do you see a transit dependency here don't know to non-constant right", 'tokens': [51076, 295, 17976, 36606, 360, 291, 536, 257, 17976, 33621, 510, 500, 380, 458, 281, 2107, 12, 25279, 394, 558, 51726], 'temperature': 0.0, 'avg_logprob': -0.1735881688643475, 'compression_ratio': 1.646551724137931, 'no_speech_prob': 0.017863938584923744}, {'id': 656, 'seek': 552158, 'start': 5521.62, 'end': 5527.26, 'text': " that is also represented by this particular relation right don't know to a constant to", 'tokens': [50366, 300, 307, 611, 10379, 538, 341, 1729, 9721, 558, 500, 380, 458, 281, 257, 5754, 281, 50648], 'temperature': 0.0, 'avg_logprob': -0.15212749853366758, 'compression_ratio': 1.7621359223300972, 'no_speech_prob': 0.008961913175880909}, {'id': 657, 'seek': 552158, 'start': 5527.26, 'end': 5533.34, 'text': " don't know not constant so that implies that don't know to not constant will be related so I can get", 'tokens': [50648, 500, 380, 458, 406, 5754, 370, 300, 18779, 300, 500, 380, 458, 281, 406, 5754, 486, 312, 4077, 370, 286, 393, 483, 50952], 'temperature': 0.0, 'avg_logprob': -0.15212749853366758, 'compression_ratio': 1.7621359223300972, 'no_speech_prob': 0.008961913175880909}, {'id': 658, 'seek': 552158, 'start': 5533.34, 'end': 5539.82, 'text': ' rid of that right so my lattice essentially then looks like this I mean you guys are right', 'tokens': [50952, 3973, 295, 300, 558, 370, 452, 34011, 4476, 550, 1542, 411, 341, 286, 914, 291, 1074, 366, 558, 51276], 'temperature': 0.0, 'avg_logprob': -0.15212749853366758, 'compression_ratio': 1.7621359223300972, 'no_speech_prob': 0.008961913175880909}, {'id': 659, 'seek': 552158, 'start': 5539.82, 'end': 5544.58, 'text': ' but it is just that my hasher diagram does not allow me to keep transit dependencies', 'tokens': [51276, 457, 309, 307, 445, 300, 452, 575, 511, 10686, 775, 406, 2089, 385, 281, 1066, 17976, 36606, 51514], 'temperature': 0.0, 'avg_logprob': -0.15212749853366758, 'compression_ratio': 1.7621359223300972, 'no_speech_prob': 0.008961913175880909}, {'id': 660, 'seek': 555158, 'start': 5552.58, 'end': 5562.78, 'text': ' this is my constant propagation lattice and remember we said we can make only two updates', 'tokens': [50414, 341, 307, 452, 5754, 38377, 34011, 293, 1604, 321, 848, 321, 393, 652, 787, 732, 9205, 50924], 'temperature': 0.0, 'avg_logprob': -0.2602805204169695, 'compression_ratio': 1.512396694214876, 'no_speech_prob': 0.03098057024180889}, {'id': 661, 'seek': 555158, 'start': 5562.78, 'end': 5572.98, 'text': ' at most worst case was it in terms of the lattice what is it it is the height of this lattice', 'tokens': [50924, 412, 881, 5855, 1389, 390, 309, 294, 2115, 295, 264, 34011, 437, 307, 309, 309, 307, 264, 6681, 295, 341, 34011, 51434], 'temperature': 0.0, 'avg_logprob': -0.2602805204169695, 'compression_ratio': 1.512396694214876, 'no_speech_prob': 0.03098057024180889}, {'id': 662, 'seek': 557298, 'start': 5572.98, 'end': 5589.74, 'text': ' so height of the lattice is the can you define it formally many on the lattice there is no', 'tokens': [50364, 370, 6681, 295, 264, 34011, 307, 264, 393, 291, 6964, 309, 25983, 867, 322, 264, 34011, 456, 307, 572, 51202], 'temperature': 0.0, 'avg_logprob': -0.11326107867928438, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.005938705522567034}, {'id': 663, 'seek': 557298, 'start': 5589.74, 'end': 5598.62, 'text': ' operation it is the length of the longest chain excellent right the height is the length of the', 'tokens': [51202, 6916, 309, 307, 264, 4641, 295, 264, 15438, 5021, 7103, 558, 264, 6681, 307, 264, 4641, 295, 264, 51646], 'temperature': 0.0, 'avg_logprob': -0.11326107867928438, 'compression_ratio': 1.690909090909091, 'no_speech_prob': 0.005938705522567034}, {'id': 664, 'seek': 559862, 'start': 5598.62, 'end': 5606.54, 'text': ' longest chain in the lattice right so looks to be that is the that is what was like telling', 'tokens': [50364, 15438, 5021, 294, 264, 34011, 558, 370, 1542, 281, 312, 300, 307, 264, 300, 307, 437, 390, 411, 3585, 50760], 'temperature': 0.0, 'avg_logprob': -0.11767228681649734, 'compression_ratio': 1.7961783439490446, 'no_speech_prob': 0.056481774896383286}, {'id': 665, 'seek': 559862, 'start': 5606.54, 'end': 5615.78, 'text': ' me how long you have to go and good good good good good so okay but one thing is that this is', 'tokens': [50760, 385, 577, 938, 291, 362, 281, 352, 293, 665, 665, 665, 665, 665, 370, 1392, 457, 472, 551, 307, 300, 341, 307, 51222], 'temperature': 0.0, 'avg_logprob': -0.11767228681649734, 'compression_ratio': 1.7961783439490446, 'no_speech_prob': 0.056481774896383286}, {'id': 666, 'seek': 559862, 'start': 5615.78, 'end': 5625.58, 'text': ' a this is a constant propagation lattice for a single variable right so I will have this lattice', 'tokens': [51222, 257, 341, 307, 257, 5754, 38377, 34011, 337, 257, 2167, 7006, 558, 370, 286, 486, 362, 341, 34011, 51712], 'temperature': 0.0, 'avg_logprob': -0.11767228681649734, 'compression_ratio': 1.7961783439490446, 'no_speech_prob': 0.056481774896383286}, {'id': 667, 'seek': 562558, 'start': 5625.58, 'end': 5630.82, 'text': ' for some variable x similarly I will have another lattice for y and so on what will the', 'tokens': [50364, 337, 512, 7006, 2031, 14138, 286, 486, 362, 1071, 34011, 337, 288, 293, 370, 322, 437, 486, 264, 50626], 'temperature': 0.0, 'avg_logprob': -0.15442029891475553, 'compression_ratio': 1.6772151898734178, 'no_speech_prob': 0.023508712649345398}, {'id': 668, 'seek': 562558, 'start': 5630.82, 'end': 5640.0199999999995, 'text': ' actual solution the lattice of the actual solution look like yeah so how do I get it', 'tokens': [50626, 3539, 3827, 264, 34011, 295, 264, 3539, 3827, 574, 411, 1338, 370, 577, 360, 286, 483, 309, 51086], 'temperature': 0.0, 'avg_logprob': -0.15442029891475553, 'compression_ratio': 1.6772151898734178, 'no_speech_prob': 0.023508712649345398}, {'id': 669, 'seek': 562558, 'start': 5640.0199999999995, 'end': 5654.74, 'text': " so initial will be all don't knows right right so one of them one constant becomes one other", 'tokens': [51086, 370, 5883, 486, 312, 439, 500, 380, 3255, 558, 558, 370, 472, 295, 552, 472, 5754, 3643, 472, 661, 51822], 'temperature': 0.0, 'avg_logprob': -0.15442029891475553, 'compression_ratio': 1.6772151898734178, 'no_speech_prob': 0.023508712649345398}, {'id': 670, 'seek': 565474, 'start': 5654.78, 'end': 5663.219999999999, 'text': " don't knows remain this becomes can become two similarly some other guy can change so this is", 'tokens': [50366, 500, 380, 3255, 6222, 341, 3643, 393, 1813, 732, 14138, 512, 661, 2146, 393, 1319, 370, 341, 307, 50788], 'temperature': 0.0, 'avg_logprob': -0.14839630860548753, 'compression_ratio': 1.85, 'no_speech_prob': 0.001096164807677269}, {'id': 671, 'seek': 565474, 'start': 5663.219999999999, 'end': 5671.66, 'text': ' essentially the product lattice of the lattices of the single variables how do you construct', 'tokens': [50788, 4476, 264, 1674, 34011, 295, 264, 29025, 1473, 295, 264, 2167, 9102, 577, 360, 291, 7690, 51210], 'temperature': 0.0, 'avg_logprob': -0.14839630860548753, 'compression_ratio': 1.85, 'no_speech_prob': 0.001096164807677269}, {'id': 672, 'seek': 565474, 'start': 5671.66, 'end': 5675.5, 'text': ' the product lattice you basically take all possible combinations so you have you just', 'tokens': [51210, 264, 1674, 34011, 291, 1936, 747, 439, 1944, 21267, 370, 291, 362, 291, 445, 51402], 'temperature': 0.0, 'avg_logprob': -0.14839630860548753, 'compression_ratio': 1.85, 'no_speech_prob': 0.001096164807677269}, {'id': 673, 'seek': 565474, 'start': 5675.5, 'end': 5682.62, 'text': ' lay down the lattices for each of the variables separately x y z w and then take all combinations', 'tokens': [51402, 2360, 760, 264, 29025, 1473, 337, 1184, 295, 264, 9102, 14759, 2031, 288, 710, 261, 293, 550, 747, 439, 21267, 51758], 'temperature': 0.0, 'avg_logprob': -0.14839630860548753, 'compression_ratio': 1.85, 'no_speech_prob': 0.001096164807677269}, {'id': 674, 'seek': 568262, 'start': 5682.62, 'end': 5693.82, 'text': ' right and when can you put a edge between two elements in that product lattice whenever there', 'tokens': [50364, 558, 293, 562, 393, 291, 829, 257, 4691, 1296, 732, 4959, 294, 300, 1674, 34011, 5699, 456, 50924], 'temperature': 0.0, 'avg_logprob': -0.13915942436040835, 'compression_ratio': 1.5666666666666667, 'no_speech_prob': 0.0017514840001240373}, {'id': 675, 'seek': 568262, 'start': 5693.82, 'end': 5701.3, 'text': ' is a corresponding edge for each of these cases each of the elements in the tuple then only is', 'tokens': [50924, 307, 257, 11760, 4691, 337, 1184, 295, 613, 3331, 1184, 295, 264, 4959, 294, 264, 2604, 781, 550, 787, 307, 51298], 'temperature': 0.0, 'avg_logprob': -0.13915942436040835, 'compression_ratio': 1.5666666666666667, 'no_speech_prob': 0.0017514840001240373}, {'id': 676, 'seek': 570130, 'start': 5701.3, 'end': 5713.62, 'text': ' that related like for instance like bottom bottom one bottom bottom and bottom one bottom', 'tokens': [50364, 300, 4077, 411, 337, 5197, 411, 2767, 2767, 472, 2767, 2767, 293, 2767, 472, 2767, 50980], 'temperature': 0.0, 'avg_logprob': -0.1330960158145789, 'compression_ratio': 1.8675496688741722, 'no_speech_prob': 0.42073488235473633}, {'id': 677, 'seek': 570130, 'start': 5713.62, 'end': 5719.860000000001, 'text': " bottom bottom I don't know how many I put here one two three four five looks like it I am done", 'tokens': [50980, 2767, 2767, 286, 500, 380, 458, 577, 867, 286, 829, 510, 472, 732, 1045, 1451, 1732, 1542, 411, 309, 286, 669, 1096, 51292], 'temperature': 0.0, 'avg_logprob': -0.1330960158145789, 'compression_ratio': 1.8675496688741722, 'no_speech_prob': 0.42073488235473633}, {'id': 678, 'seek': 570130, 'start': 5719.860000000001, 'end': 5729.78, 'text': " so so bottom is nothing but don't know I am just writing bottom so now are they related are these", 'tokens': [51292, 370, 370, 2767, 307, 1825, 457, 500, 380, 458, 286, 669, 445, 3579, 2767, 370, 586, 366, 436, 4077, 366, 613, 51788], 'temperature': 0.0, 'avg_logprob': -0.1330960158145789, 'compression_ratio': 1.8675496688741722, 'no_speech_prob': 0.42073488235473633}, {'id': 679, 'seek': 572978, 'start': 5729.78, 'end': 5747.5, 'text': ' two related huh why no no no so now if you not think I just talking about that these elements', 'tokens': [50364, 732, 4077, 7020, 983, 572, 572, 572, 370, 586, 498, 291, 406, 519, 286, 445, 1417, 466, 300, 613, 4959, 51250], 'temperature': 0.0, 'avg_logprob': -0.2173992395401001, 'compression_ratio': 1.80625, 'no_speech_prob': 0.017288541421294212}, {'id': 680, 'seek': 572978, 'start': 5747.5, 'end': 5752.82, 'text': ' in this forget the constant propagation problem now right think about the mathematical description', 'tokens': [51250, 294, 341, 2870, 264, 5754, 38377, 1154, 586, 558, 519, 466, 264, 18894, 3855, 51516], 'temperature': 0.0, 'avg_logprob': -0.2173992395401001, 'compression_ratio': 1.80625, 'no_speech_prob': 0.017288541421294212}, {'id': 681, 'seek': 572978, 'start': 5752.82, 'end': 5757.38, 'text': ' of these points so this is a point this is also a point they are they are both of them belong to', 'tokens': [51516, 295, 613, 2793, 370, 341, 307, 257, 935, 341, 307, 611, 257, 935, 436, 366, 436, 366, 1293, 295, 552, 5784, 281, 51744], 'temperature': 0.0, 'avg_logprob': -0.2173992395401001, 'compression_ratio': 1.80625, 'no_speech_prob': 0.017288541421294212}, {'id': 682, 'seek': 575738, 'start': 5757.38, 'end': 5764.02, 'text': ' the set S right so these are two arbitrary points question is should we have a so this', 'tokens': [50364, 264, 992, 318, 558, 370, 613, 366, 732, 23211, 2793, 1168, 307, 820, 321, 362, 257, 370, 341, 50696], 'temperature': 0.0, 'avg_logprob': -0.10921377688646317, 'compression_ratio': 1.6826347305389222, 'no_speech_prob': 0.02670486830174923}, {'id': 683, 'seek': 575738, 'start': 5764.02, 'end': 5774.78, 'text': ' is what I got by taking the product of five such component lattices so now the question is are do', 'tokens': [50696, 307, 437, 286, 658, 538, 1940, 264, 1674, 295, 1732, 1270, 6542, 29025, 1473, 370, 586, 264, 1168, 307, 366, 360, 51234], 'temperature': 0.0, 'avg_logprob': -0.10921377688646317, 'compression_ratio': 1.6826347305389222, 'no_speech_prob': 0.02670486830174923}, {'id': 684, 'seek': 575738, 'start': 5774.78, 'end': 5785.66, 'text': " these two elements relate can these two elements relate again again please don't think about the", 'tokens': [51234, 613, 732, 4959, 10961, 393, 613, 732, 4959, 10961, 797, 797, 1767, 500, 380, 519, 466, 264, 51778], 'temperature': 0.0, 'avg_logprob': -0.10921377688646317, 'compression_ratio': 1.6826347305389222, 'no_speech_prob': 0.02670486830174923}, {'id': 685, 'seek': 578566, 'start': 5785.66, 'end': 5791.0199999999995, 'text': " problem so the function also is not in the in the this thing now I mean we don't even have the I'm", 'tokens': [50364, 1154, 370, 264, 2445, 611, 307, 406, 294, 264, 294, 264, 341, 551, 586, 286, 914, 321, 500, 380, 754, 362, 264, 286, 478, 50632], 'temperature': 0.0, 'avg_logprob': -0.13183250098392882, 'compression_ratio': 2.209090909090909, 'no_speech_prob': 0.3263653814792633}, {'id': 686, 'seek': 578566, 'start': 5791.0199999999995, 'end': 5794.78, 'text': " not even talking about the function right now what function what is the transform function I'm not", 'tokens': [50632, 406, 754, 1417, 466, 264, 2445, 558, 586, 437, 2445, 437, 307, 264, 4088, 2445, 286, 478, 406, 50820], 'temperature': 0.0, 'avg_logprob': -0.13183250098392882, 'compression_ratio': 2.209090909090909, 'no_speech_prob': 0.3263653814792633}, {'id': 687, 'seek': 578566, 'start': 5794.78, 'end': 5799.74, 'text': " even talking about it I'm just saying that this is the space of our solutions right this is a", 'tokens': [50820, 754, 1417, 466, 309, 286, 478, 445, 1566, 300, 341, 307, 264, 1901, 295, 527, 6547, 558, 341, 307, 257, 51068], 'temperature': 0.0, 'avg_logprob': -0.13183250098392882, 'compression_ratio': 2.209090909090909, 'no_speech_prob': 0.3263653814792633}, {'id': 688, 'seek': 578566, 'start': 5799.74, 'end': 5806.099999999999, 'text': " element of that solution solution space this is also an element of the solution space it's possible", 'tokens': [51068, 4478, 295, 300, 3827, 3827, 1901, 341, 307, 611, 364, 4478, 295, 264, 3827, 1901, 309, 311, 1944, 51386], 'temperature': 0.0, 'avg_logprob': -0.13183250098392882, 'compression_ratio': 2.209090909090909, 'no_speech_prob': 0.3263653814792633}, {'id': 689, 'seek': 578566, 'start': 5806.099999999999, 'end': 5810.099999999999, 'text': " that you get either that as a solution or this as a solution so I'm I'm just picking a set I'm", 'tokens': [51386, 300, 291, 483, 2139, 300, 382, 257, 3827, 420, 341, 382, 257, 3827, 370, 286, 478, 286, 478, 445, 8867, 257, 992, 286, 478, 51586], 'temperature': 0.0, 'avg_logprob': -0.13183250098392882, 'compression_ratio': 2.209090909090909, 'no_speech_prob': 0.3263653814792633}, {'id': 690, 'seek': 581010, 'start': 5810.1, 'end': 5816.18, 'text': " describing a lattice by describing a set and describing a relation on it right I'm not even", 'tokens': [50364, 16141, 257, 34011, 538, 16141, 257, 992, 293, 16141, 257, 9721, 322, 309, 558, 286, 478, 406, 754, 50668], 'temperature': 0.0, 'avg_logprob': -0.16110864499720132, 'compression_ratio': 1.9137055837563453, 'no_speech_prob': 0.10958290100097656}, {'id': 691, 'seek': 581010, 'start': 5816.18, 'end': 5821.22, 'text': ' talking about what function we are using both of these are points in that space both of them', 'tokens': [50668, 1417, 466, 437, 2445, 321, 366, 1228, 1293, 295, 613, 366, 2793, 294, 300, 1901, 1293, 295, 552, 50920], 'temperature': 0.0, 'avg_logprob': -0.16110864499720132, 'compression_ratio': 1.9137055837563453, 'no_speech_prob': 0.10958290100097656}, {'id': 692, 'seek': 581010, 'start': 5821.22, 'end': 5828.02, 'text': ' are elements of s now I want to say that this ordinate relation now what does that this order', 'tokens': [50920, 366, 4959, 295, 262, 586, 286, 528, 281, 584, 300, 341, 4792, 13923, 9721, 586, 437, 775, 300, 341, 1668, 51260], 'temperature': 0.0, 'avg_logprob': -0.16110864499720132, 'compression_ratio': 1.9137055837563453, 'no_speech_prob': 0.10958290100097656}, {'id': 693, 'seek': 581010, 'start': 5828.02, 'end': 5836.26, 'text': ' relation look like now this s itself looks like multiple like an element corresponding to multiple', 'tokens': [51260, 9721, 574, 411, 586, 341, 262, 2564, 1542, 411, 3866, 411, 364, 4478, 11760, 281, 3866, 51672], 'temperature': 0.0, 'avg_logprob': -0.16110864499720132, 'compression_ratio': 1.9137055837563453, 'no_speech_prob': 0.10958290100097656}, {'id': 694, 'seek': 583626, 'start': 5836.26, 'end': 5844.22, 'text': " elements like whatever you would have got for s of x s of y s of z and so on right because it's", 'tokens': [50364, 4959, 411, 2035, 291, 576, 362, 658, 337, 262, 295, 2031, 262, 295, 288, 262, 295, 710, 293, 370, 322, 558, 570, 309, 311, 50762], 'temperature': 0.0, 'avg_logprob': -0.12473843123886612, 'compression_ratio': 1.893719806763285, 'no_speech_prob': 0.05992855504155159}, {'id': 695, 'seek': 583626, 'start': 5844.22, 'end': 5848.62, 'text': ' a product lattice you are allowed to pick elements from each of these things what will this order', 'tokens': [50762, 257, 1674, 34011, 291, 366, 4350, 281, 1888, 4959, 490, 1184, 295, 613, 721, 437, 486, 341, 1668, 50982], 'temperature': 0.0, 'avg_logprob': -0.12473843123886612, 'compression_ratio': 1.893719806763285, 'no_speech_prob': 0.05992855504155159}, {'id': 696, 'seek': 583626, 'start': 5848.62, 'end': 5856.14, 'text': ' relation look like this is a component by component ordering relation so this will say this is a', 'tokens': [50982, 9721, 574, 411, 341, 307, 257, 6542, 538, 6542, 21739, 9721, 370, 341, 486, 584, 341, 307, 257, 51358], 'temperature': 0.0, 'avg_logprob': -0.12473843123886612, 'compression_ratio': 1.893719806763285, 'no_speech_prob': 0.05992855504155159}, {'id': 697, 'seek': 583626, 'start': 5856.14, 'end': 5863.820000000001, 'text': ' ordering on x ordering on y ordering on z something like that and the final ordering is if there is a', 'tokens': [51358, 21739, 322, 2031, 21739, 322, 288, 21739, 322, 710, 746, 411, 300, 293, 264, 2572, 21739, 307, 498, 456, 307, 257, 51742], 'temperature': 0.0, 'avg_logprob': -0.12473843123886612, 'compression_ratio': 1.893719806763285, 'no_speech_prob': 0.05992855504155159}, {'id': 698, 'seek': 586382, 'start': 5863.82, 'end': 5874.9, 'text': ' ordering established by all of them so here what is the problem that this one is larger than bottom', 'tokens': [50364, 21739, 7545, 538, 439, 295, 552, 370, 510, 437, 307, 264, 1154, 300, 341, 472, 307, 4833, 813, 2767, 50918], 'temperature': 0.0, 'avg_logprob': -0.10530196703397311, 'compression_ratio': 1.775, 'no_speech_prob': 0.03598228842020035}, {'id': 699, 'seek': 586382, 'start': 5874.9, 'end': 5883.74, 'text': ' for the second component but here this bottom is smaller than this one so one of the relation', 'tokens': [50918, 337, 264, 1150, 6542, 457, 510, 341, 2767, 307, 4356, 813, 341, 472, 370, 472, 295, 264, 9721, 51360], 'temperature': 0.0, 'avg_logprob': -0.10530196703397311, 'compression_ratio': 1.775, 'no_speech_prob': 0.03598228842020035}, {'id': 700, 'seek': 586382, 'start': 5883.74, 'end': 5893.0199999999995, 'text': ' hits the other one misses so I cannot say that this is less than this right if all of them', 'tokens': [51360, 8664, 264, 661, 472, 29394, 370, 286, 2644, 584, 300, 341, 307, 1570, 813, 341, 558, 498, 439, 295, 552, 51824], 'temperature': 0.0, 'avg_logprob': -0.10530196703397311, 'compression_ratio': 1.775, 'no_speech_prob': 0.03598228842020035}, {'id': 701, 'seek': 589302, 'start': 5893.02, 'end': 5900.3, 'text': ' consistently are less then I can say this whole element is less than this whole element so just', 'tokens': [50364, 14961, 366, 1570, 550, 286, 393, 584, 341, 1379, 4478, 307, 1570, 813, 341, 1379, 4478, 370, 445, 50728], 'temperature': 0.0, 'avg_logprob': -0.11445718461816962, 'compression_ratio': 1.9211822660098523, 'no_speech_prob': 0.003941347356885672}, {'id': 702, 'seek': 589302, 'start': 5900.3, 'end': 5904.900000000001, 'text': " imagine this big lattice in your head I don't want to write it so the elements they look like", 'tokens': [50728, 3811, 341, 955, 34011, 294, 428, 1378, 286, 500, 380, 528, 281, 2464, 309, 370, 264, 4959, 436, 574, 411, 50958], 'temperature': 0.0, 'avg_logprob': -0.11445718461816962, 'compression_ratio': 1.9211822660098523, 'no_speech_prob': 0.003941347356885672}, {'id': 703, 'seek': 589302, 'start': 5904.900000000001, 'end': 5913.660000000001, 'text': ' this and the bottom element is all bottoms the top element is all not constants why is that because', 'tokens': [50958, 341, 293, 264, 2767, 4478, 307, 439, 43413, 264, 1192, 4478, 307, 439, 406, 35870, 983, 307, 300, 570, 51396], 'temperature': 0.0, 'avg_logprob': -0.11445718461816962, 'compression_ratio': 1.9211822660098523, 'no_speech_prob': 0.003941347356885672}, {'id': 704, 'seek': 589302, 'start': 5913.660000000001, 'end': 5919.22, 'text': ' not constants to all of them will surely be bigger than not constant or any of them right so it will', 'tokens': [51396, 406, 35870, 281, 439, 295, 552, 486, 11468, 312, 3801, 813, 406, 5754, 420, 604, 295, 552, 558, 370, 309, 486, 51674], 'temperature': 0.0, 'avg_logprob': -0.11445718461816962, 'compression_ratio': 1.9211822660098523, 'no_speech_prob': 0.003941347356885672}, {'id': 705, 'seek': 591922, 'start': 5919.22, 'end': 5936.9800000000005, 'text': " surely be a superset of an upper bound of that got it so now let's again revisit this look at", 'tokens': [50364, 11468, 312, 257, 37906, 302, 295, 364, 6597, 5472, 295, 300, 658, 309, 370, 586, 718, 311, 797, 32676, 341, 574, 412, 51252], 'temperature': 0.0, 'avg_logprob': -0.14670036103990342, 'compression_ratio': 1.4878048780487805, 'no_speech_prob': 0.022252457216382027}, {'id': 706, 'seek': 591922, 'start': 5936.9800000000005, 'end': 5945.06, 'text': ' this particular lattice this power lattice I got now this can be decomposed into lattices', 'tokens': [51252, 341, 1729, 34011, 341, 1347, 34011, 286, 658, 586, 341, 393, 312, 22867, 1744, 666, 29025, 1473, 51656], 'temperature': 0.0, 'avg_logprob': -0.14670036103990342, 'compression_ratio': 1.4878048780487805, 'no_speech_prob': 0.022252457216382027}, {'id': 707, 'seek': 594506, 'start': 5945.06, 'end': 5950.820000000001, 'text': ' corresponding to each definitions and lattice corresponding to each definition will be what', 'tokens': [50364, 11760, 281, 1184, 21988, 293, 34011, 11760, 281, 1184, 7123, 486, 312, 437, 50652], 'temperature': 0.0, 'avg_logprob': -0.12282926695687431, 'compression_ratio': 1.9081632653061225, 'no_speech_prob': 0.10924285650253296}, {'id': 708, 'seek': 594506, 'start': 5950.820000000001, 'end': 5958.06, 'text': ' either it is true or it is false is given in the set or given is not in the set so this big lattice', 'tokens': [50652, 2139, 309, 307, 2074, 420, 309, 307, 7908, 307, 2212, 294, 264, 992, 420, 2212, 307, 406, 294, 264, 992, 370, 341, 955, 34011, 51014], 'temperature': 0.0, 'avg_logprob': -0.12282926695687431, 'compression_ratio': 1.9081632653061225, 'no_speech_prob': 0.10924285650253296}, {'id': 709, 'seek': 594506, 'start': 5958.06, 'end': 5964.1, 'text': ' is nothing but the power lattice of this right okay so I think we are getting too abstract so', 'tokens': [51014, 307, 1825, 457, 264, 1347, 34011, 295, 341, 558, 1392, 370, 286, 519, 321, 366, 1242, 886, 12649, 370, 51316], 'temperature': 0.0, 'avg_logprob': -0.12282926695687431, 'compression_ratio': 1.9081632653061225, 'no_speech_prob': 0.10924285650253296}, {'id': 710, 'seek': 594506, 'start': 5964.1, 'end': 5969.860000000001, 'text': ' what was a big vector a big vector was just represented that an element was there or the', 'tokens': [51316, 437, 390, 257, 955, 8062, 257, 955, 8062, 390, 445, 10379, 300, 364, 4478, 390, 456, 420, 264, 51604], 'temperature': 0.0, 'avg_logprob': -0.12282926695687431, 'compression_ratio': 1.9081632653061225, 'no_speech_prob': 0.10924285650253296}, {'id': 711, 'seek': 596986, 'start': 5969.86, 'end': 5977.179999999999, 'text': ' element was not there the big vector was either 0 or 1 right so 0 is lesser than 1 so my lattice', 'tokens': [50364, 4478, 390, 406, 456, 264, 955, 8062, 390, 2139, 1958, 420, 502, 558, 370, 1958, 307, 22043, 813, 502, 370, 452, 34011, 50730], 'temperature': 0.0, 'avg_logprob': -0.16757730505932336, 'compression_ratio': 1.8155339805825244, 'no_speech_prob': 0.08001433312892914}, {'id': 712, 'seek': 596986, 'start': 5977.179999999999, 'end': 5988.0599999999995, 'text': ' is very simple my lattice is 0 and 1 that is my lattice for every definition di right now I can', 'tokens': [50730, 307, 588, 2199, 452, 34011, 307, 1958, 293, 502, 300, 307, 452, 34011, 337, 633, 7123, 1026, 558, 586, 286, 393, 51274], 'temperature': 0.0, 'avg_logprob': -0.16757730505932336, 'compression_ratio': 1.8155339805825244, 'no_speech_prob': 0.08001433312892914}, {'id': 713, 'seek': 596986, 'start': 5988.0599999999995, 'end': 5993.259999999999, 'text': ' simply get the power of the product lattice by picking zeros or one for the corresponding', 'tokens': [51274, 2935, 483, 264, 1347, 295, 264, 1674, 34011, 538, 8867, 35193, 420, 472, 337, 264, 11760, 51534], 'temperature': 0.0, 'avg_logprob': -0.16757730505932336, 'compression_ratio': 1.8155339805825244, 'no_speech_prob': 0.08001433312892914}, {'id': 714, 'seek': 596986, 'start': 5993.259999999999, 'end': 5998.74, 'text': ' definitions once I pick that that becomes one set that set will be part of this big lattice', 'tokens': [51534, 21988, 1564, 286, 1888, 300, 300, 3643, 472, 992, 300, 992, 486, 312, 644, 295, 341, 955, 34011, 51808], 'temperature': 0.0, 'avg_logprob': -0.16757730505932336, 'compression_ratio': 1.8155339805825244, 'no_speech_prob': 0.08001433312892914}, {'id': 715, 'seek': 599874, 'start': 5998.74, 'end': 6005.42, 'text': ' somewhere and I can exactly use the same thing and the ordering is the subset relation is nothing', 'tokens': [50364, 4079, 293, 286, 393, 2293, 764, 264, 912, 551, 293, 264, 21739, 307, 264, 25993, 9721, 307, 1825, 50698], 'temperature': 0.0, 'avg_logprob': -0.15224406719207764, 'compression_ratio': 1.8009478672985781, 'no_speech_prob': 0.0059027038514614105}, {'id': 716, 'seek': 599874, 'start': 6005.42, 'end': 6012.0599999999995, 'text': ' but that right key it has to be like either 0 or 1 of the corresponding elements like greater', 'tokens': [50698, 457, 300, 558, 2141, 309, 575, 281, 312, 411, 2139, 1958, 420, 502, 295, 264, 11760, 4959, 411, 5044, 51030], 'temperature': 0.0, 'avg_logprob': -0.15224406719207764, 'compression_ratio': 1.8009478672985781, 'no_speech_prob': 0.0059027038514614105}, {'id': 717, 'seek': 599874, 'start': 6012.0599999999995, 'end': 6019.0599999999995, 'text': ' than the corresponding elements right so you would also start thinking about them as like', 'tokens': [51030, 813, 264, 11760, 4959, 558, 370, 291, 576, 611, 722, 1953, 466, 552, 382, 411, 51380], 'temperature': 0.0, 'avg_logprob': -0.15224406719207764, 'compression_ratio': 1.8009478672985781, 'no_speech_prob': 0.0059027038514614105}, {'id': 718, 'seek': 599874, 'start': 6019.0599999999995, 'end': 6028.42, 'text': ' component lattices what happens to them when they compose so on so there are some more interesting', 'tokens': [51380, 6542, 29025, 1473, 437, 2314, 281, 552, 562, 436, 35925, 370, 322, 370, 456, 366, 512, 544, 1880, 51848], 'temperature': 0.0, 'avg_logprob': -0.15224406719207764, 'compression_ratio': 1.8009478672985781, 'no_speech_prob': 0.0059027038514614105}, {'id': 719, 'seek': 602842, 'start': 6028.42, 'end': 6033.22, 'text': ' things about it actually so actually the computation just happens of because it is a separable problem', 'tokens': [50364, 721, 466, 309, 767, 370, 767, 264, 24903, 445, 2314, 295, 570, 309, 307, 257, 3128, 712, 1154, 50604], 'temperature': 0.4, 'avg_logprob': -0.15163841653377452, 'compression_ratio': 2.4, 'no_speech_prob': 0.005207531154155731}, {'id': 720, 'seek': 602842, 'start': 6033.22, 'end': 6038.34, 'text': ' the computation only happens on this component lattice almost in parallel for each of the', 'tokens': [50604, 264, 24903, 787, 2314, 322, 341, 6542, 34011, 1920, 294, 8952, 337, 1184, 295, 264, 50860], 'temperature': 0.4, 'avg_logprob': -0.15163841653377452, 'compression_ratio': 2.4, 'no_speech_prob': 0.005207531154155731}, {'id': 721, 'seek': 602842, 'start': 6038.34, 'end': 6043.54, 'text': ' component lattices almost in parallel so actually you are not computing directly on this big', 'tokens': [50860, 6542, 29025, 1473, 1920, 294, 8952, 370, 767, 291, 366, 406, 15866, 3838, 322, 341, 955, 51120], 'temperature': 0.4, 'avg_logprob': -0.15163841653377452, 'compression_ratio': 2.4, 'no_speech_prob': 0.005207531154155731}, {'id': 722, 'seek': 602842, 'start': 6043.54, 'end': 6050.9800000000005, 'text': ' lattice you are actually computing on these binary lattices almost in parallel no almost', 'tokens': [51120, 34011, 291, 366, 767, 15866, 322, 613, 17434, 29025, 1473, 1920, 294, 8952, 572, 1920, 51492], 'temperature': 0.4, 'avg_logprob': -0.15163841653377452, 'compression_ratio': 2.4, 'no_speech_prob': 0.005207531154155731}, {'id': 723, 'seek': 602842, 'start': 6050.9800000000005, 'end': 6056.86, 'text': ' in parallel because and it is possible because it is a separable problem what happens in case', 'tokens': [51492, 294, 8952, 570, 293, 309, 307, 1944, 570, 309, 307, 257, 3128, 712, 1154, 437, 2314, 294, 1389, 51786], 'temperature': 0.4, 'avg_logprob': -0.15163841653377452, 'compression_ratio': 2.4, 'no_speech_prob': 0.005207531154155731}, {'id': 724, 'seek': 605686, 'start': 6056.86, 'end': 6061.099999999999, 'text': ' of constant propagation it was not a separable problem because it is not separable problem there', 'tokens': [50364, 295, 5754, 38377, 309, 390, 406, 257, 3128, 712, 1154, 570, 309, 307, 406, 3128, 712, 1154, 456, 50576], 'temperature': 0.0, 'avg_logprob': -0.11261355990455264, 'compression_ratio': 2.1300448430493275, 'no_speech_prob': 0.015404436737298965}, {'id': 725, 'seek': 605686, 'start': 6061.099999999999, 'end': 6067.66, 'text': ' will be interaction across the lattices and that is why this product it is actually computing on', 'tokens': [50576, 486, 312, 9285, 2108, 264, 29025, 1473, 293, 300, 307, 983, 341, 1674, 309, 307, 767, 15866, 322, 50904], 'temperature': 0.0, 'avg_logprob': -0.11261355990455264, 'compression_ratio': 2.1300448430493275, 'no_speech_prob': 0.015404436737298965}, {'id': 726, 'seek': 605686, 'start': 6067.66, 'end': 6071.58, 'text': ' the product lattice and that is why the height of the lattice comes into the picture because it is', 'tokens': [50904, 264, 1674, 34011, 293, 300, 307, 983, 264, 6681, 295, 264, 34011, 1487, 666, 264, 3036, 570, 309, 307, 51100], 'temperature': 0.0, 'avg_logprob': -0.11261355990455264, 'compression_ratio': 2.1300448430493275, 'no_speech_prob': 0.015404436737298965}, {'id': 727, 'seek': 605686, 'start': 6071.58, 'end': 6076.46, 'text': ' the height of the lattice and the number of variables that can also affect it right so the', 'tokens': [51100, 264, 6681, 295, 264, 34011, 293, 264, 1230, 295, 9102, 300, 393, 611, 3345, 309, 558, 370, 264, 51344], 'temperature': 0.0, 'avg_logprob': -0.11261355990455264, 'compression_ratio': 2.1300448430493275, 'no_speech_prob': 0.015404436737298965}, {'id': 728, 'seek': 605686, 'start': 6076.46, 'end': 6081.5, 'text': ' so let us say there is a big dependence chain across a set of lot of variables so the there', 'tokens': [51344, 370, 718, 505, 584, 456, 307, 257, 955, 31704, 5021, 2108, 257, 992, 295, 688, 295, 9102, 370, 264, 456, 51596], 'temperature': 0.0, 'avg_logprob': -0.11261355990455264, 'compression_ratio': 2.1300448430493275, 'no_speech_prob': 0.015404436737298965}, {'id': 729, 'seek': 608150, 'start': 6081.5, 'end': 6087.26, 'text': ' is a now the first variable to stabilize will take three steps two steps that can affect the', 'tokens': [50364, 307, 257, 586, 264, 700, 7006, 281, 31870, 486, 747, 1045, 4439, 732, 4439, 300, 393, 3345, 264, 50652], 'temperature': 0.0, 'avg_logprob': -0.14340477898007348, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.030166922137141228}, {'id': 730, 'seek': 608150, 'start': 6087.26, 'end': 6092.7, 'text': ' second variable again it might take two steps might affect the third variable so it is a chain', 'tokens': [50652, 1150, 7006, 797, 309, 1062, 747, 732, 4439, 1062, 3345, 264, 2636, 7006, 370, 309, 307, 257, 5021, 50924], 'temperature': 0.0, 'avg_logprob': -0.14340477898007348, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.030166922137141228}, {'id': 731, 'seek': 608150, 'start': 6092.7, 'end': 6099.74, 'text': ' on how many variables are there and and this power lattice can construct I mean has all of them the', 'tokens': [50924, 322, 577, 867, 9102, 366, 456, 293, 293, 341, 1347, 34011, 393, 7690, 286, 914, 575, 439, 295, 552, 264, 51276], 'temperature': 0.0, 'avg_logprob': -0.14340477898007348, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.030166922137141228}, {'id': 732, 'seek': 608150, 'start': 6099.74, 'end': 6105.46, 'text': ' height of the power lattice think about it it captures both of it so when we are doing', 'tokens': [51276, 6681, 295, 264, 1347, 34011, 519, 466, 309, 309, 27986, 1293, 295, 309, 370, 562, 321, 366, 884, 51562], 'temperature': 0.0, 'avg_logprob': -0.14340477898007348, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.030166922137141228}, {'id': 733, 'seek': 610546, 'start': 6105.46, 'end': 6109.5, 'text': ' constant propagation we are actually computing on this power lattice not power lattice product', 'tokens': [50364, 5754, 38377, 321, 366, 767, 15866, 322, 341, 1347, 34011, 406, 1347, 34011, 1674, 50566], 'temperature': 0.0, 'avg_logprob': -0.19470082651270498, 'compression_ratio': 1.859922178988327, 'no_speech_prob': 0.383285790681839}, {'id': 734, 'seek': 610546, 'start': 6109.5, 'end': 6116.58, 'text': ' lattice okay so I think we will again go back to maths after this so but I see I hope you have', 'tokens': [50566, 34011, 1392, 370, 286, 519, 321, 486, 797, 352, 646, 281, 36287, 934, 341, 370, 457, 286, 536, 286, 1454, 291, 362, 50920], 'temperature': 0.0, 'avg_logprob': -0.19470082651270498, 'compression_ratio': 1.859922178988327, 'no_speech_prob': 0.383285790681839}, {'id': 735, 'seek': 610546, 'start': 6116.58, 'end': 6120.9, 'text': ' seen some connection between why we did all this business so there is such a beautiful structure', 'tokens': [50920, 1612, 512, 4984, 1296, 983, 321, 630, 439, 341, 1606, 370, 456, 307, 1270, 257, 2238, 3877, 51136], 'temperature': 0.0, 'avg_logprob': -0.19470082651270498, 'compression_ratio': 1.859922178988327, 'no_speech_prob': 0.383285790681839}, {'id': 736, 'seek': 610546, 'start': 6120.9, 'end': 6125.66, 'text': ' to the computation that we are doing right it has a completely beautiful mathematical description', 'tokens': [51136, 281, 264, 24903, 300, 321, 366, 884, 558, 309, 575, 257, 2584, 2238, 18894, 3855, 51374], 'temperature': 0.0, 'avg_logprob': -0.19470082651270498, 'compression_ratio': 1.859922178988327, 'no_speech_prob': 0.383285790681839}, {'id': 737, 'seek': 610546, 'start': 6125.66, 'end': 6131.58, 'text': ' of what we are doing look like complete ad hoc algorithm but no that is not true so I think I', 'tokens': [51374, 295, 437, 321, 366, 884, 574, 411, 3566, 614, 16708, 9284, 457, 572, 300, 307, 406, 2074, 370, 286, 519, 286, 51670], 'temperature': 0.0, 'avg_logprob': -0.19470082651270498, 'compression_ratio': 1.859922178988327, 'no_speech_prob': 0.383285790681839}, {'id': 738, 'seek': 613158, 'start': 6131.58, 'end': 6132.46, 'text': ' can stop here', 'tokens': [50364, 393, 1590, 510, 50408], 'temperature': 0.0, 'avg_logprob': -0.2967555522918701, 'compression_ratio': 0.6190476190476191, 'no_speech_prob': 0.7675041556358337}]