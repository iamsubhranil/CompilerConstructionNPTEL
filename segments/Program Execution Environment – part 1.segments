[{'id': 0, 'seek': 0, 'start': 0.0, 'end': 8.24, 'text': ' Hi everyone, my name is Girish Bhaarambhe.', 'tokens': [50364, 2421, 1518, 11, 452, 1315, 307, 36306, 742, 363, 1641, 289, 2173, 675, 13, 50776], 'temperature': 0.0, 'avg_logprob': -0.20891571044921875, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.32354164123535156}, {'id': 1, 'seek': 0, 'start': 8.24, 'end': 14.84, 'text': ' I actually work in NVIDIA and I am responsible for the PTX compiler group within NVIDIA.', 'tokens': [50776, 286, 767, 589, 294, 426, 3958, 6914, 293, 286, 669, 6250, 337, 264, 35460, 55, 31958, 1594, 1951, 426, 3958, 6914, 13, 51106], 'temperature': 0.0, 'avg_logprob': -0.20891571044921875, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.32354164123535156}, {'id': 2, 'seek': 0, 'start': 14.84, 'end': 20.56, 'text': ' So my work essentially involves working with the language design and some of the later', 'tokens': [51106, 407, 452, 589, 4476, 11626, 1364, 365, 264, 2856, 1715, 293, 512, 295, 264, 1780, 51392], 'temperature': 0.0, 'avg_logprob': -0.20891571044921875, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.32354164123535156}, {'id': 3, 'seek': 0, 'start': 20.56, 'end': 25.42, 'text': ' aspects of the compilation like linker and loader related things.', 'tokens': [51392, 7270, 295, 264, 40261, 411, 2113, 260, 293, 3677, 260, 4077, 721, 13, 51635], 'temperature': 0.0, 'avg_logprob': -0.20891571044921875, 'compression_ratio': 1.471502590673575, 'no_speech_prob': 0.32354164123535156}, {'id': 4, 'seek': 2542, 'start': 25.42, 'end': 31.14, 'text': ' So this module is essentially going to talk about the things which happen after compilation.', 'tokens': [50364, 407, 341, 10088, 307, 4476, 516, 281, 751, 466, 264, 721, 597, 1051, 934, 40261, 13, 50650], 'temperature': 0.0, 'avg_logprob': -0.17444727155897352, 'compression_ratio': 1.67, 'no_speech_prob': 0.17601381242275238}, {'id': 5, 'seek': 2542, 'start': 31.14, 'end': 36.1, 'text': ' So far in first two weeks you have learned mostly what will happen during compilation', 'tokens': [50650, 407, 1400, 294, 700, 732, 3259, 291, 362, 3264, 5240, 437, 486, 1051, 1830, 40261, 50898], 'temperature': 0.0, 'avg_logprob': -0.17444727155897352, 'compression_ratio': 1.67, 'no_speech_prob': 0.17601381242275238}, {'id': 6, 'seek': 2542, 'start': 36.1, 'end': 39.38, 'text': ' right including optimizations and code generation.', 'tokens': [50898, 558, 3009, 5028, 14455, 293, 3089, 5125, 13, 51062], 'temperature': 0.0, 'avg_logprob': -0.17444727155897352, 'compression_ratio': 1.67, 'no_speech_prob': 0.17601381242275238}, {'id': 7, 'seek': 2542, 'start': 39.38, 'end': 44.540000000000006, 'text': ' So this module kind of focuses on the other things which need to be there for program', 'tokens': [51062, 407, 341, 10088, 733, 295, 16109, 322, 264, 661, 721, 597, 643, 281, 312, 456, 337, 1461, 51320], 'temperature': 0.0, 'avg_logprob': -0.17444727155897352, 'compression_ratio': 1.67, 'no_speech_prob': 0.17601381242275238}, {'id': 8, 'seek': 2542, 'start': 44.540000000000006, 'end': 46.540000000000006, 'text': ' to work correctly.', 'tokens': [51320, 281, 589, 8944, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.17444727155897352, 'compression_ratio': 1.67, 'no_speech_prob': 0.17601381242275238}, {'id': 9, 'seek': 4654, 'start': 46.54, 'end': 64.62, 'text': ' Now just to kind of give some examples of why this is interesting.', 'tokens': [50364, 823, 445, 281, 733, 295, 976, 512, 5110, 295, 983, 341, 307, 1880, 13, 51268], 'temperature': 0.0, 'avg_logprob': -0.4779124789767795, 'compression_ratio': 0.9705882352941176, 'no_speech_prob': 0.8477120399475098}, {'id': 10, 'seek': 6462, 'start': 64.62, 'end': 80.66, 'text': ' Can everyone read the code?', 'tokens': [50364, 1664, 1518, 1401, 264, 3089, 30, 51166], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 11, 'seek': 6462, 'start': 80.66, 'end': 83.66, 'text': ' So can you tell me what will be the output of this code?', 'tokens': [51166, 407, 393, 291, 980, 385, 437, 486, 312, 264, 5598, 295, 341, 3089, 30, 51316], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 12, 'seek': 6462, 'start': 83.66, 'end': 84.66, 'text': ' What?', 'tokens': [51316, 708, 30, 51366], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 13, 'seek': 6462, 'start': 84.66, 'end': 85.66, 'text': ' Error.', 'tokens': [51366, 3300, 2874, 13, 51416], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 14, 'seek': 6462, 'start': 85.66, 'end': 88.7, 'text': ' So how many of you think it is error?', 'tokens': [51416, 407, 577, 867, 295, 291, 519, 309, 307, 6713, 30, 51568], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 15, 'seek': 6462, 'start': 88.7, 'end': 91.46000000000001, 'text': ' Why do you think it is an error?', 'tokens': [51568, 1545, 360, 291, 519, 309, 307, 364, 6713, 30, 51706], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 16, 'seek': 6462, 'start': 91.46000000000001, 'end': 92.46000000000001, 'text': ' Correct.', 'tokens': [51706, 12753, 13, 51756], 'temperature': 0.0, 'avg_logprob': -0.26800410978255734, 'compression_ratio': 1.4390243902439024, 'no_speech_prob': 0.38242802023887634}, {'id': 17, 'seek': 9246, 'start': 92.46, 'end': 95.66, 'text': ' So the symbol gbl is being defined twice.', 'tokens': [50364, 407, 264, 5986, 290, 5199, 307, 885, 7642, 6091, 13, 50524], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 18, 'seek': 9246, 'start': 95.66, 'end': 97.3, 'text': ' So it should result in error.', 'tokens': [50524, 407, 309, 820, 1874, 294, 6713, 13, 50606], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 19, 'seek': 9246, 'start': 97.3, 'end': 99.67999999999999, 'text': ' Now let us see this code in action.', 'tokens': [50606, 823, 718, 505, 536, 341, 3089, 294, 3069, 13, 50725], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 20, 'seek': 9246, 'start': 99.67999999999999, 'end': 102.89999999999999, 'text': ' So I do gcc sample dot c.', 'tokens': [50725, 407, 286, 360, 290, 1914, 6889, 5893, 269, 13, 50886], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 21, 'seek': 9246, 'start': 102.89999999999999, 'end': 108.74, 'text': ' There is no error and it actually works.', 'tokens': [50886, 821, 307, 572, 6713, 293, 309, 767, 1985, 13, 51178], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 22, 'seek': 9246, 'start': 108.74, 'end': 111.61999999999999, 'text': ' Any idea why?', 'tokens': [51178, 2639, 1558, 983, 30, 51322], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 23, 'seek': 9246, 'start': 111.61999999999999, 'end': 120.02, 'text': ' It is the simplest thing for compiler to realize that gbl is a symbol which is defined twice.', 'tokens': [51322, 467, 307, 264, 22811, 551, 337, 31958, 281, 4325, 300, 290, 5199, 307, 257, 5986, 597, 307, 7642, 6091, 13, 51742], 'temperature': 0.0, 'avg_logprob': -0.18847128323146276, 'compression_ratio': 1.5326086956521738, 'no_speech_prob': 0.18681655824184418}, {'id': 24, 'seek': 12002, 'start': 120.17999999999999, 'end': 125.06, 'text': ' Let us try something different.', 'tokens': [50372, 961, 505, 853, 746, 819, 13, 50616], 'temperature': 0.0, 'avg_logprob': -0.3919927156888522, 'compression_ratio': 1.3106060606060606, 'no_speech_prob': 0.6857261657714844}, {'id': 25, 'seek': 12002, 'start': 125.06, 'end': 135.85999999999999, 'text': ' So I am defining a function called start in which I will do say printf hello.', 'tokens': [50616, 407, 286, 669, 17827, 257, 2445, 1219, 722, 294, 597, 286, 486, 360, 584, 4482, 69, 7751, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.3919927156888522, 'compression_ratio': 1.3106060606060606, 'no_speech_prob': 0.6857261657714844}, {'id': 26, 'seek': 12002, 'start': 135.85999999999999, 'end': 140.04, 'text': ' And let me call start.', 'tokens': [51156, 400, 718, 385, 818, 722, 13, 51365], 'temperature': 0.0, 'avg_logprob': -0.3919927156888522, 'compression_ratio': 1.3106060606060606, 'no_speech_prob': 0.6857261657714844}, {'id': 27, 'seek': 12002, 'start': 140.04, 'end': 143.94, 'text': ' What will be output of this code?', 'tokens': [51365, 708, 486, 312, 5598, 295, 341, 3089, 30, 51560], 'temperature': 0.0, 'avg_logprob': -0.3919927156888522, 'compression_ratio': 1.3106060606060606, 'no_speech_prob': 0.6857261657714844}, {'id': 28, 'seek': 12002, 'start': 143.94, 'end': 148.98, 'text': ' Hello.', 'tokens': [51560, 2425, 13, 51812], 'temperature': 0.0, 'avg_logprob': -0.3919927156888522, 'compression_ratio': 1.3106060606060606, 'no_speech_prob': 0.6857261657714844}, {'id': 29, 'seek': 14898, 'start': 148.98, 'end': 159.45999999999998, 'text': ' How many of you think hello?', 'tokens': [50364, 1012, 867, 295, 291, 519, 7751, 30, 50888], 'temperature': 0.0, 'avg_logprob': -0.16230633794044963, 'compression_ratio': 1.381294964028777, 'no_speech_prob': 0.00020002532983198762}, {'id': 30, 'seek': 14898, 'start': 159.45999999999998, 'end': 164.17999999999998, 'text': ' Some error, multiple definition of start.', 'tokens': [50888, 2188, 6713, 11, 3866, 7123, 295, 722, 13, 51124], 'temperature': 0.0, 'avg_logprob': -0.16230633794044963, 'compression_ratio': 1.381294964028777, 'no_speech_prob': 0.00020002532983198762}, {'id': 31, 'seek': 14898, 'start': 164.17999999999998, 'end': 171.73999999999998, 'text': ' So whatever error we were expecting in the prior code we are getting in this code.', 'tokens': [51124, 407, 2035, 6713, 321, 645, 9650, 294, 264, 4059, 3089, 321, 366, 1242, 294, 341, 3089, 13, 51502], 'temperature': 0.0, 'avg_logprob': -0.16230633794044963, 'compression_ratio': 1.381294964028777, 'no_speech_prob': 0.00020002532983198762}, {'id': 32, 'seek': 14898, 'start': 171.73999999999998, 'end': 174.78, 'text': ' Let us try something more interesting.', 'tokens': [51502, 961, 505, 853, 746, 544, 1880, 13, 51654], 'temperature': 0.0, 'avg_logprob': -0.16230633794044963, 'compression_ratio': 1.381294964028777, 'no_speech_prob': 0.00020002532983198762}, {'id': 33, 'seek': 17478, 'start': 174.78, 'end': 185.02, 'text': ' So let us say I define an array whose size is say 3 gb.', 'tokens': [50364, 407, 718, 505, 584, 286, 6964, 364, 10225, 6104, 2744, 307, 584, 805, 290, 65, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.5090239952350485, 'compression_ratio': 1.028169014084507, 'no_speech_prob': 0.9220411777496338}, {'id': 34, 'seek': 17478, 'start': 185.02, 'end': 202.54, 'text': ' How much is 3 gb?', 'tokens': [50876, 1012, 709, 307, 805, 290, 65, 30, 51752], 'temperature': 0.0, 'avg_logprob': -0.5090239952350485, 'compression_ratio': 1.028169014084507, 'no_speech_prob': 0.9220411777496338}, {'id': 35, 'seek': 20254, 'start': 202.54, 'end': 228.98, 'text': ' 3 gb.', 'tokens': [50364, 805, 290, 65, 13, 51686], 'temperature': 0.0, 'avg_logprob': -0.909869372844696, 'compression_ratio': 0.38461538461538464, 'no_speech_prob': 0.9518078565597534}, {'id': 36, 'seek': 22898, 'start': 228.98, 'end': 238.33999999999997, 'text': ' Any idea what will be output of this?', 'tokens': [50364, 2639, 1558, 437, 486, 312, 5598, 295, 341, 30, 50832], 'temperature': 0.0, 'avg_logprob': -0.1930993398030599, 'compression_ratio': 1.330827067669173, 'no_speech_prob': 0.6314346790313721}, {'id': 37, 'seek': 22898, 'start': 238.33999999999997, 'end': 243.54, 'text': ' So someone is thinking it is related to how much memory compiler can allocate.', 'tokens': [50832, 407, 1580, 307, 1953, 309, 307, 4077, 281, 577, 709, 4675, 31958, 393, 35713, 13, 51092], 'temperature': 0.0, 'avg_logprob': -0.1930993398030599, 'compression_ratio': 1.330827067669173, 'no_speech_prob': 0.6314346790313721}, {'id': 38, 'seek': 22898, 'start': 243.54, 'end': 249.01999999999998, 'text': ' Any other things?', 'tokens': [51092, 2639, 661, 721, 30, 51366], 'temperature': 0.0, 'avg_logprob': -0.1930993398030599, 'compression_ratio': 1.330827067669173, 'no_speech_prob': 0.6314346790313721}, {'id': 39, 'seek': 22898, 'start': 249.01999999999998, 'end': 252.57999999999998, 'text': ' Let us try this.', 'tokens': [51366, 961, 505, 853, 341, 13, 51544], 'temperature': 0.0, 'avg_logprob': -0.1930993398030599, 'compression_ratio': 1.330827067669173, 'no_speech_prob': 0.6314346790313721}, {'id': 40, 'seek': 22898, 'start': 252.57999999999998, 'end': 255.38, 'text': ' So it worked as expected.', 'tokens': [51544, 407, 309, 2732, 382, 5176, 13, 51684], 'temperature': 0.0, 'avg_logprob': -0.1930993398030599, 'compression_ratio': 1.330827067669173, 'no_speech_prob': 0.6314346790313721}, {'id': 41, 'seek': 25538, 'start': 255.38, 'end': 262.18, 'text': ' Let us try to increase size a bit.', 'tokens': [50364, 961, 505, 853, 281, 3488, 2744, 257, 857, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.29596398093483667, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.8724669814109802}, {'id': 42, 'seek': 25538, 'start': 262.18, 'end': 263.18, 'text': ' Still worked.', 'tokens': [50704, 8291, 2732, 13, 50754], 'temperature': 0.0, 'avg_logprob': -0.29596398093483667, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.8724669814109802}, {'id': 43, 'seek': 25538, 'start': 263.18, 'end': 270.1, 'text': ' Let us try to increase bit more.', 'tokens': [50754, 961, 505, 853, 281, 3488, 857, 544, 13, 51100], 'temperature': 0.0, 'avg_logprob': -0.29596398093483667, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.8724669814109802}, {'id': 44, 'seek': 25538, 'start': 270.1, 'end': 274.82, 'text': ' Still worked.', 'tokens': [51100, 8291, 2732, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.29596398093483667, 'compression_ratio': 1.3768115942028984, 'no_speech_prob': 0.8724669814109802}, {'id': 45, 'seek': 27482, 'start': 274.82, 'end': 299.5, 'text': ' Some reason this is still worked.', 'tokens': [50364, 2188, 1778, 341, 307, 920, 2732, 13, 51598], 'temperature': 0.0, 'avg_logprob': -0.38092656569047406, 'compression_ratio': 1.0140845070422535, 'no_speech_prob': 0.11249963194131851}, {'id': 46, 'seek': 27482, 'start': 299.5, 'end': 302.7, 'text': ' So do we really have this much memory?', 'tokens': [51598, 407, 360, 321, 534, 362, 341, 709, 4675, 30, 51758], 'temperature': 0.0, 'avg_logprob': -0.38092656569047406, 'compression_ratio': 1.0140845070422535, 'no_speech_prob': 0.11249963194131851}, {'id': 47, 'seek': 30270, 'start': 302.7, 'end': 307.18, 'text': ' Now something is, but this is size of array too large.', 'tokens': [50364, 823, 746, 307, 11, 457, 341, 307, 2744, 295, 10225, 886, 2416, 13, 50588], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 48, 'seek': 30270, 'start': 307.18, 'end': 310.53999999999996, 'text': ' So at some point it said I cannot allocate.', 'tokens': [50588, 407, 412, 512, 935, 309, 848, 286, 2644, 35713, 13, 50756], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 49, 'seek': 30270, 'start': 310.53999999999996, 'end': 316.62, 'text': ' But do we really have this much memory just prior to that point?', 'tokens': [50756, 583, 360, 321, 534, 362, 341, 709, 4675, 445, 4059, 281, 300, 935, 30, 51060], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 50, 'seek': 30270, 'start': 316.62, 'end': 322.38, 'text': ' So essentially this module is going to talk about these kind of things.', 'tokens': [51060, 407, 4476, 341, 10088, 307, 516, 281, 751, 466, 613, 733, 295, 721, 13, 51348], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 51, 'seek': 30270, 'start': 322.38, 'end': 325.98, 'text': ' Whatever happened behind the CS.', 'tokens': [51348, 8541, 2011, 2261, 264, 9460, 13, 51528], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 52, 'seek': 30270, 'start': 325.98, 'end': 328.34, 'text': ' So far like this was surprising.', 'tokens': [51528, 407, 1400, 411, 341, 390, 8830, 13, 51646], 'temperature': 0.0, 'avg_logprob': -0.1971445083618164, 'compression_ratio': 1.4975124378109452, 'no_speech_prob': 0.4590991139411926}, {'id': 53, 'seek': 32834, 'start': 328.34, 'end': 334.14, 'text': ' My compiler did not error out on a symbol which was defined one after other.', 'tokens': [50364, 1222, 31958, 630, 406, 6713, 484, 322, 257, 5986, 597, 390, 7642, 472, 934, 661, 13, 50654], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 54, 'seek': 32834, 'start': 334.14, 'end': 337.38, 'text': ' What is the reason why it did not do that?', 'tokens': [50654, 708, 307, 264, 1778, 983, 309, 630, 406, 360, 300, 30, 50816], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 55, 'seek': 32834, 'start': 337.38, 'end': 339.58, 'text': ' Why was start a problem?', 'tokens': [50816, 1545, 390, 722, 257, 1154, 30, 50926], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 56, 'seek': 32834, 'start': 339.58, 'end': 344.5, 'text': ' I defined a function called underscore start and it was a problem.', 'tokens': [50926, 286, 7642, 257, 2445, 1219, 37556, 722, 293, 309, 390, 257, 1154, 13, 51172], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 57, 'seek': 32834, 'start': 344.5, 'end': 350.5, 'text': ' So outcome of this module is to teach you things which go under the hood.', 'tokens': [51172, 407, 9700, 295, 341, 10088, 307, 281, 2924, 291, 721, 597, 352, 833, 264, 13376, 13, 51472], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 58, 'seek': 32834, 'start': 350.5, 'end': 355.62, 'text': ' Whatever is not observable to you when you write program, but is actually happening within', 'tokens': [51472, 8541, 307, 406, 9951, 712, 281, 291, 562, 291, 2464, 1461, 11, 457, 307, 767, 2737, 1951, 51728], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 59, 'seek': 32834, 'start': 355.62, 'end': 357.73999999999995, 'text': ' the system.', 'tokens': [51728, 264, 1185, 13, 51834], 'temperature': 0.0, 'avg_logprob': -0.15590939229848433, 'compression_ratio': 1.6581196581196582, 'no_speech_prob': 0.8233578205108643}, {'id': 60, 'seek': 35774, 'start': 358.7, 'end': 365.74, 'text': ' Not just what happens, but why it is that way and how it is implemented.', 'tokens': [50412, 1726, 445, 437, 2314, 11, 457, 983, 309, 307, 300, 636, 293, 577, 309, 307, 12270, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 61, 'seek': 35774, 'start': 365.74, 'end': 370.94, 'text': ' And that essentially will enable you to understand how the programs are actually being executed', 'tokens': [50764, 400, 300, 4476, 486, 9528, 291, 281, 1223, 577, 264, 4268, 366, 767, 885, 17577, 51024], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 62, 'seek': 35774, 'start': 370.94, 'end': 374.1, 'text': ' by the processor.', 'tokens': [51024, 538, 264, 15321, 13, 51182], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 63, 'seek': 35774, 'start': 374.1, 'end': 379.42, 'text': ' Any idea why you should learn these topics?', 'tokens': [51182, 2639, 1558, 983, 291, 820, 1466, 613, 8378, 30, 51448], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 64, 'seek': 35774, 'start': 379.42, 'end': 384.58, 'text': ' How many of you think it is interesting to learn about these topics?', 'tokens': [51448, 1012, 867, 295, 291, 519, 309, 307, 1880, 281, 1466, 466, 613, 8378, 30, 51706], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 65, 'seek': 35774, 'start': 384.58, 'end': 386.74, 'text': ' Almost everyone.', 'tokens': [51706, 12627, 1518, 13, 51814], 'temperature': 0.0, 'avg_logprob': -0.16089862271359093, 'compression_ratio': 1.595959595959596, 'no_speech_prob': 0.3339841067790985}, {'id': 66, 'seek': 38674, 'start': 386.74, 'end': 392.02, 'text': ' So the reason you should learn these topics is because it makes you a better programmer.', 'tokens': [50364, 407, 264, 1778, 291, 820, 1466, 613, 8378, 307, 570, 309, 1669, 291, 257, 1101, 32116, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 67, 'seek': 38674, 'start': 392.02, 'end': 397.90000000000003, 'text': ' A better programmer is always cognizant about the fact that whatever things are happening', 'tokens': [50628, 316, 1101, 32116, 307, 1009, 11786, 590, 394, 466, 264, 1186, 300, 2035, 721, 366, 2737, 50922], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 68, 'seek': 38674, 'start': 397.90000000000003, 'end': 399.38, 'text': ' in the system.', 'tokens': [50922, 294, 264, 1185, 13, 50996], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 69, 'seek': 38674, 'start': 399.38, 'end': 404.38, 'text': ' Because that allows you to design your programs in much more intelligent way and to be able', 'tokens': [50996, 1436, 300, 4045, 291, 281, 1715, 428, 4268, 294, 709, 544, 13232, 636, 293, 281, 312, 1075, 51246], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 70, 'seek': 38674, 'start': 404.38, 'end': 406.54, 'text': ' to exploit things in better way.', 'tokens': [51246, 281, 25924, 721, 294, 1101, 636, 13, 51354], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 71, 'seek': 38674, 'start': 406.54, 'end': 410.82, 'text': ' For example, you have learned matrix multiply.', 'tokens': [51354, 1171, 1365, 11, 291, 362, 3264, 8141, 12972, 13, 51568], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 72, 'seek': 38674, 'start': 410.82, 'end': 416.66, 'text': ' And you probably saw an example where simply swapping the order of loop gave lot of performance.', 'tokens': [51568, 400, 291, 1391, 1866, 364, 1365, 689, 2935, 1693, 10534, 264, 1668, 295, 6367, 2729, 688, 295, 3389, 13, 51860], 'temperature': 0.0, 'avg_logprob': -0.17259566897437686, 'compression_ratio': 1.7047970479704797, 'no_speech_prob': 0.0008157931733876467}, {'id': 73, 'seek': 41666, 'start': 417.62, 'end': 419.06, 'text': ' Why did that happen?', 'tokens': [50412, 1545, 630, 300, 1051, 30, 50484], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 74, 'seek': 41666, 'start': 419.06, 'end': 423.1, 'text': ' Because you know in the system in which you are running your program there is a cache', 'tokens': [50484, 1436, 291, 458, 294, 264, 1185, 294, 597, 291, 366, 2614, 428, 1461, 456, 307, 257, 19459, 50686], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 75, 'seek': 41666, 'start': 423.1, 'end': 424.1, 'text': ' sitting there.', 'tokens': [50686, 3798, 456, 13, 50736], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 76, 'seek': 41666, 'start': 424.1, 'end': 430.70000000000005, 'text': ' And how to program things so that you efficiently utilize the cache.', 'tokens': [50736, 400, 577, 281, 1461, 721, 370, 300, 291, 19621, 16117, 264, 19459, 13, 51066], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 77, 'seek': 41666, 'start': 430.70000000000005, 'end': 438.06, 'text': ' So knowing these things will help you become better at in general programming.', 'tokens': [51066, 407, 5276, 613, 721, 486, 854, 291, 1813, 1101, 412, 294, 2674, 9410, 13, 51434], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 78, 'seek': 41666, 'start': 438.06, 'end': 440.46000000000004, 'text': ' It will make you really good at debugging.', 'tokens': [51434, 467, 486, 652, 291, 534, 665, 412, 45592, 13, 51554], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 79, 'seek': 41666, 'start': 440.46000000000004, 'end': 445.98, 'text': " Because whenever you are faced with a nasty bug and you don't know why this is happening,", 'tokens': [51554, 1436, 5699, 291, 366, 11446, 365, 257, 17923, 7426, 293, 291, 500, 380, 458, 983, 341, 307, 2737, 11, 51830], 'temperature': 0.0, 'avg_logprob': -0.16501813133557638, 'compression_ratio': 1.675, 'no_speech_prob': 0.0001230039051733911}, {'id': 80, 'seek': 44598, 'start': 446.02000000000004, 'end': 451.38, 'text': ' like this in GBL, GBL thing, there is no sane way of thinking of why this happened.', 'tokens': [50366, 411, 341, 294, 460, 17624, 11, 460, 17624, 551, 11, 456, 307, 572, 45610, 636, 295, 1953, 295, 983, 341, 2011, 13, 50634], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 81, 'seek': 44598, 'start': 451.38, 'end': 456.18, 'text': ' But if you know what goes on under the hood, then it is much easier for you to reason about', 'tokens': [50634, 583, 498, 291, 458, 437, 1709, 322, 833, 264, 13376, 11, 550, 309, 307, 709, 3571, 337, 291, 281, 1778, 466, 50874], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 82, 'seek': 44598, 'start': 456.18, 'end': 457.78000000000003, 'text': ' those things.', 'tokens': [50874, 729, 721, 13, 50954], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 83, 'seek': 44598, 'start': 457.78000000000003, 'end': 461.22, 'text': ' And then it enables you to build more systems.', 'tokens': [50954, 400, 550, 309, 17077, 291, 281, 1322, 544, 3652, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 84, 'seek': 44598, 'start': 461.22, 'end': 464.62, 'text': ' Whatever we are going to learn is going to talk about how a system is built and what', 'tokens': [51126, 8541, 321, 366, 516, 281, 1466, 307, 516, 281, 751, 466, 577, 257, 1185, 307, 3094, 293, 437, 51296], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 85, 'seek': 44598, 'start': 464.62, 'end': 467.78000000000003, 'text': ' all constitutes a system.', 'tokens': [51296, 439, 44204, 257, 1185, 13, 51454], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 86, 'seek': 44598, 'start': 467.78000000000003, 'end': 472.14000000000004, 'text': " Now when you are actually working in some environment, it's not that you will be able", 'tokens': [51454, 823, 562, 291, 366, 767, 1364, 294, 512, 2823, 11, 309, 311, 406, 300, 291, 486, 312, 1075, 51672], 'temperature': 0.0, 'avg_logprob': -0.15579692874334555, 'compression_ratio': 1.69140625, 'no_speech_prob': 0.0033044677693396807}, {'id': 87, 'seek': 47214, 'start': 472.14, 'end': 476.3, 'text': ' to utilize the ideas which you learn here as it is.', 'tokens': [50364, 281, 16117, 264, 3487, 597, 291, 1466, 510, 382, 309, 307, 13, 50572], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 88, 'seek': 47214, 'start': 476.3, 'end': 480.74, 'text': ' But you will at least have foundation to think about where to start from.', 'tokens': [50572, 583, 291, 486, 412, 1935, 362, 7030, 281, 519, 466, 689, 281, 722, 490, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 89, 'seek': 47214, 'start': 480.74, 'end': 484.58, 'text': ' And new systems can be built using that.', 'tokens': [50794, 400, 777, 3652, 393, 312, 3094, 1228, 300, 13, 50986], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 90, 'seek': 47214, 'start': 484.58, 'end': 490.09999999999997, 'text': ' Now one disclaimer which I want to put here is most of the topics which are being discussed', 'tokens': [50986, 823, 472, 40896, 597, 286, 528, 281, 829, 510, 307, 881, 295, 264, 8378, 597, 366, 885, 7152, 51262], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 91, 'seek': 47214, 'start': 490.09999999999997, 'end': 492.97999999999996, 'text': ' would be very specific to an implementation.', 'tokens': [51262, 576, 312, 588, 2685, 281, 364, 11420, 13, 51406], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 92, 'seek': 47214, 'start': 492.97999999999996, 'end': 494.58, 'text': " It's not a theory.", 'tokens': [51406, 467, 311, 406, 257, 5261, 13, 51486], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 93, 'seek': 47214, 'start': 494.58, 'end': 499.38, 'text': ' Unlike the first two weeks what you have learned, it was a theoretical foundation and it kind', 'tokens': [51486, 17657, 264, 700, 732, 3259, 437, 291, 362, 3264, 11, 309, 390, 257, 20864, 7030, 293, 309, 733, 51726], 'temperature': 0.0, 'avg_logprob': -0.14765449598723768, 'compression_ratio': 1.625, 'no_speech_prob': 0.2614760100841522}, {'id': 94, 'seek': 49938, 'start': 499.46, 'end': 503.18, 'text': ' of hold across the various things.', 'tokens': [50368, 295, 1797, 2108, 264, 3683, 721, 13, 50554], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 95, 'seek': 49938, 'start': 503.18, 'end': 507.06, 'text': ' This topic is very much implementation specific.', 'tokens': [50554, 639, 4829, 307, 588, 709, 11420, 2685, 13, 50748], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 96, 'seek': 49938, 'start': 507.06, 'end': 512.5, 'text': ' There are reasons why things are done this way for a particular implementation which', 'tokens': [50748, 821, 366, 4112, 983, 721, 366, 1096, 341, 636, 337, 257, 1729, 11420, 597, 51020], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 97, 'seek': 49938, 'start': 512.5, 'end': 515.74, 'text': ' may or may not hold in other systems.', 'tokens': [51020, 815, 420, 815, 406, 1797, 294, 661, 3652, 13, 51182], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 98, 'seek': 49938, 'start': 515.74, 'end': 520.74, 'text': ' Most of the content here is specific to Linux and x86.', 'tokens': [51182, 4534, 295, 264, 2701, 510, 307, 2685, 281, 18734, 293, 2031, 22193, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 99, 'seek': 49938, 'start': 520.74, 'end': 523.96, 'text': ' Windows actually might behave very differently.', 'tokens': [51432, 8591, 767, 1062, 15158, 588, 7614, 13, 51593], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 100, 'seek': 49938, 'start': 523.96, 'end': 527.78, 'text': " So don't take this as a universal truth.", 'tokens': [51593, 407, 500, 380, 747, 341, 382, 257, 11455, 3494, 13, 51784], 'temperature': 0.0, 'avg_logprob': -0.16455389204479398, 'compression_ratio': 1.5695067264573992, 'no_speech_prob': 0.13254830241203308}, {'id': 101, 'seek': 52778, 'start': 527.78, 'end': 529.98, 'text': ' But it is one of the implementations.', 'tokens': [50364, 583, 309, 307, 472, 295, 264, 4445, 763, 13, 50474], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 102, 'seek': 52778, 'start': 529.98, 'end': 536.18, 'text': ' And wherever possible I will try to point out that in other systems this differs.', 'tokens': [50474, 400, 8660, 1944, 286, 486, 853, 281, 935, 484, 300, 294, 661, 3652, 341, 37761, 13, 50784], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 103, 'seek': 52778, 'start': 536.18, 'end': 541.3399999999999, 'text': ' But most of the material is kind of Linux and Intel specific.', 'tokens': [50784, 583, 881, 295, 264, 2527, 307, 733, 295, 18734, 293, 19762, 2685, 13, 51042], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 104, 'seek': 52778, 'start': 541.3399999999999, 'end': 545.78, 'text': ' Any questions before we kind of start?', 'tokens': [51042, 2639, 1651, 949, 321, 733, 295, 722, 30, 51264], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 105, 'seek': 52778, 'start': 545.78, 'end': 547.3, 'text': ' So this is the outline.', 'tokens': [51264, 407, 341, 307, 264, 16387, 13, 51340], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 106, 'seek': 52778, 'start': 547.3, 'end': 551.8399999999999, 'text': ' Actually I have just too many things packed in these two days.', 'tokens': [51340, 5135, 286, 362, 445, 886, 867, 721, 13265, 294, 613, 732, 1708, 13, 51567], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 107, 'seek': 52778, 'start': 551.8399999999999, 'end': 557.06, 'text': ' So we will start with life of a program which essentially talks about how the program actually', 'tokens': [51567, 407, 321, 486, 722, 365, 993, 295, 257, 1461, 597, 4476, 6686, 466, 577, 264, 1461, 767, 51828], 'temperature': 0.0, 'avg_logprob': -0.14337893894740514, 'compression_ratio': 1.6015936254980079, 'no_speech_prob': 0.06554830819368362}, {'id': 108, 'seek': 55706, 'start': 557.06, 'end': 559.52, 'text': ' compiles to executable.', 'tokens': [50364, 715, 4680, 281, 7568, 712, 13, 50487], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 109, 'seek': 55706, 'start': 559.52, 'end': 564.3199999999999, 'text': ' Then we will go into details on how functions are actually implemented.', 'tokens': [50487, 1396, 321, 486, 352, 666, 4365, 322, 577, 6828, 366, 767, 12270, 13, 50727], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 110, 'seek': 55706, 'start': 564.3199999999999, 'end': 569.7199999999999, 'text': ' Then we will go into details of object files which are produced by the compiler and assemblers.', 'tokens': [50727, 1396, 321, 486, 352, 666, 4365, 295, 2657, 7098, 597, 366, 7126, 538, 264, 31958, 293, 8438, 11977, 13, 50997], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 111, 'seek': 55706, 'start': 569.7199999999999, 'end': 571.4799999999999, 'text': ' Then we will look into the assembler.', 'tokens': [50997, 1396, 321, 486, 574, 666, 264, 8438, 1918, 13, 51085], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 112, 'seek': 55706, 'start': 571.4799999999999, 'end': 576.8, 'text': ' We will look into linkers in very much detail on how linkers actually work.', 'tokens': [51085, 492, 486, 574, 666, 2113, 433, 294, 588, 709, 2607, 322, 577, 2113, 433, 767, 589, 13, 51351], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 113, 'seek': 55706, 'start': 576.8, 'end': 581.78, 'text': ' And some of the execution aspects are covered in the later half of the session where we', 'tokens': [51351, 400, 512, 295, 264, 15058, 7270, 366, 5343, 294, 264, 1780, 1922, 295, 264, 5481, 689, 321, 51600], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 114, 'seek': 55706, 'start': 581.78, 'end': 586.76, 'text': ' will go into details of processes, virtual memory, how dynamic linking works.', 'tokens': [51600, 486, 352, 666, 4365, 295, 7555, 11, 6374, 4675, 11, 577, 8546, 25775, 1985, 13, 51849], 'temperature': 0.0, 'avg_logprob': -0.15385942799704416, 'compression_ratio': 1.9462809917355373, 'no_speech_prob': 0.053332943469285965}, {'id': 115, 'seek': 58676, 'start': 586.8, 'end': 592.02, 'text': ' And then depending on how time permits we will go into details of various language features', 'tokens': [50366, 400, 550, 5413, 322, 577, 565, 30990, 321, 486, 352, 666, 4365, 295, 3683, 2856, 4122, 50627], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 116, 'seek': 58676, 'start': 592.02, 'end': 595.8199999999999, 'text': ' and how they are actually implemented in the compiler.', 'tokens': [50627, 293, 577, 436, 366, 767, 12270, 294, 264, 31958, 13, 50817], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 117, 'seek': 58676, 'start': 595.8199999999999, 'end': 598.74, 'text': " So let's start with life of program.", 'tokens': [50817, 407, 718, 311, 722, 365, 993, 295, 1461, 13, 50963], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 118, 'seek': 58676, 'start': 598.74, 'end': 606.12, 'text': ' So what you write is some high level source code, CC++, Java, whatever.', 'tokens': [50963, 407, 437, 291, 2464, 307, 512, 1090, 1496, 4009, 3089, 11, 12630, 25472, 11, 10745, 11, 2035, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 119, 'seek': 58676, 'start': 606.12, 'end': 610.8199999999999, 'text': ' It gets translated into an assembly program by the compiler.', 'tokens': [51332, 467, 2170, 16805, 666, 364, 12103, 1461, 538, 264, 31958, 13, 51567], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 120, 'seek': 58676, 'start': 610.8199999999999, 'end': 615.16, 'text': ' And assembler will translate it into actual binary encoding.', 'tokens': [51567, 400, 8438, 1918, 486, 13799, 309, 666, 3539, 17434, 43430, 13, 51784], 'temperature': 0.0, 'avg_logprob': -0.15946584337213066, 'compression_ratio': 1.597457627118644, 'no_speech_prob': 0.00016090927238110453}, {'id': 121, 'seek': 61516, 'start': 615.16, 'end': 619.9, 'text': ' And this binary encoding is what actually the hardware understands.', 'tokens': [50364, 400, 341, 17434, 43430, 307, 437, 767, 264, 8837, 15146, 13, 50601], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 122, 'seek': 61516, 'start': 619.9, 'end': 621.98, 'text': ' And you will run that program.', 'tokens': [50601, 400, 291, 486, 1190, 300, 1461, 13, 50705], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 123, 'seek': 61516, 'start': 621.98, 'end': 627.66, 'text': " Now if you zoom into these steps, what is actually happening is, so let's say you have", 'tokens': [50705, 823, 498, 291, 8863, 666, 613, 4439, 11, 437, 307, 767, 2737, 307, 11, 370, 718, 311, 584, 291, 362, 50989], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 124, 'seek': 61516, 'start': 627.66, 'end': 631.54, 'text': ' program 1.c and program 2.c.', 'tokens': [50989, 1461, 502, 13, 66, 293, 1461, 568, 13, 66, 13, 51183], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 125, 'seek': 61516, 'start': 631.54, 'end': 638.02, 'text': ' You can compile it into an executable saying prog 1.c, prog 2.c and run that program.', 'tokens': [51183, 509, 393, 31413, 309, 666, 364, 7568, 712, 1566, 447, 70, 502, 13, 66, 11, 447, 70, 568, 13, 66, 293, 1190, 300, 1461, 13, 51507], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 126, 'seek': 61516, 'start': 638.02, 'end': 643.36, 'text': ' What is actually happening behind the scenes is you write your program in the text format', 'tokens': [51507, 708, 307, 767, 2737, 2261, 264, 8026, 307, 291, 2464, 428, 1461, 294, 264, 2487, 7877, 51774], 'temperature': 0.0, 'avg_logprob': -0.14343559857711052, 'compression_ratio': 1.748878923766816, 'no_speech_prob': 0.012230120599269867}, {'id': 127, 'seek': 64336, 'start': 643.38, 'end': 646.96, 'text': ' as in something in ASCII form.', 'tokens': [50365, 382, 294, 746, 294, 7469, 34, 9503, 1254, 13, 50544], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 128, 'seek': 64336, 'start': 646.96, 'end': 650.38, 'text': ' You pre-process it.', 'tokens': [50544, 509, 659, 12, 41075, 309, 13, 50715], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 129, 'seek': 64336, 'start': 650.38, 'end': 655.38, 'text': ' Pre-processor is essentially trying to handle all the things like hash include, hash if', 'tokens': [50715, 6001, 12, 4318, 25432, 307, 4476, 1382, 281, 4813, 439, 264, 721, 411, 22019, 4090, 11, 22019, 498, 50965], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 130, 'seek': 64336, 'start': 655.38, 'end': 657.8000000000001, 'text': ' defs, hash defines and so on.', 'tokens': [50965, 1060, 82, 11, 22019, 23122, 293, 370, 322, 13, 51086], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 131, 'seek': 64336, 'start': 657.8000000000001, 'end': 661.38, 'text': ' And pre-processor is actually a language agnostic step.', 'tokens': [51086, 400, 659, 12, 4318, 25432, 307, 767, 257, 2856, 623, 77, 19634, 1823, 13, 51265], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 132, 'seek': 64336, 'start': 661.38, 'end': 663.64, 'text': ' It has nothing to do with language as such.', 'tokens': [51265, 467, 575, 1825, 281, 360, 365, 2856, 382, 1270, 13, 51378], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 133, 'seek': 64336, 'start': 663.64, 'end': 667.5, 'text': ' So pre-processor does not understand your program semantically.', 'tokens': [51378, 407, 659, 12, 4318, 25432, 775, 406, 1223, 428, 1461, 4361, 49505, 13, 51571], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 134, 'seek': 64336, 'start': 667.5, 'end': 670.94, 'text': " It's just a blind string replacement.", 'tokens': [51571, 467, 311, 445, 257, 6865, 6798, 14419, 13, 51743], 'temperature': 0.0, 'avg_logprob': -0.20260476611909412, 'compression_ratio': 1.6591928251121075, 'no_speech_prob': 0.03207309916615486}, {'id': 135, 'seek': 67094, 'start': 670.96, 'end': 674.8800000000001, 'text': ' And it will convert it into a pre-processed source.', 'tokens': [50365, 400, 309, 486, 7620, 309, 666, 257, 659, 12, 41075, 292, 4009, 13, 50561], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 136, 'seek': 67094, 'start': 674.8800000000001, 'end': 679.2800000000001, 'text': ' Then you will get to the compiler, which will actually do all the things which you have', 'tokens': [50561, 1396, 291, 486, 483, 281, 264, 31958, 11, 597, 486, 767, 360, 439, 264, 721, 597, 291, 362, 50781], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 137, 'seek': 67094, 'start': 679.2800000000001, 'end': 684.8000000000001, 'text': ' learned in last two weeks to convert it into an assembly program.', 'tokens': [50781, 3264, 294, 1036, 732, 3259, 281, 7620, 309, 666, 364, 12103, 1461, 13, 51057], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 138, 'seek': 67094, 'start': 684.8000000000001, 'end': 689.84, 'text': " Assembler's job is essentially to create object file or object program, which is essentially", 'tokens': [51057, 1018, 15750, 1918, 311, 1691, 307, 4476, 281, 1884, 2657, 3991, 420, 2657, 1461, 11, 597, 307, 4476, 51309], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 139, 'seek': 67094, 'start': 689.84, 'end': 692.7800000000001, 'text': ' a binary version of the program.', 'tokens': [51309, 257, 17434, 3037, 295, 264, 1461, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 140, 'seek': 67094, 'start': 692.7800000000001, 'end': 699.32, 'text': ' And then you get the executable file by feeding that object file into the linker.', 'tokens': [51456, 400, 550, 291, 483, 264, 7568, 712, 3991, 538, 12919, 300, 2657, 3991, 666, 264, 2113, 260, 13, 51783], 'temperature': 0.0, 'avg_logprob': -0.14567657508472404, 'compression_ratio': 1.8034934497816595, 'no_speech_prob': 0.004607944283634424}, {'id': 141, 'seek': 69932, 'start': 700.0600000000001, 'end': 703.22, 'text': ' This executable you will actually run.', 'tokens': [50401, 639, 7568, 712, 291, 486, 767, 1190, 13, 50559], 'temperature': 0.0, 'avg_logprob': -0.21552841479961687, 'compression_ratio': 1.6136363636363635, 'no_speech_prob': 0.003374689258635044}, {'id': 142, 'seek': 69932, 'start': 703.22, 'end': 709.94, 'text': ' This entire step before the loader is typically called as compiler driver.', 'tokens': [50559, 639, 2302, 1823, 949, 264, 3677, 260, 307, 5850, 1219, 382, 31958, 6787, 13, 50895], 'temperature': 0.0, 'avg_logprob': -0.21552841479961687, 'compression_ratio': 1.6136363636363635, 'no_speech_prob': 0.003374689258635044}, {'id': 143, 'seek': 69932, 'start': 709.94, 'end': 716.5400000000001, 'text': ' So when you say GCC, ABC.C, what is actually GCC is not really a compiler.', 'tokens': [50895, 407, 562, 291, 584, 460, 11717, 11, 22342, 13, 34, 11, 437, 307, 767, 460, 11717, 307, 406, 534, 257, 31958, 13, 51225], 'temperature': 0.0, 'avg_logprob': -0.21552841479961687, 'compression_ratio': 1.6136363636363635, 'no_speech_prob': 0.003374689258635044}, {'id': 144, 'seek': 69932, 'start': 716.5400000000001, 'end': 719.4200000000001, 'text': ' GCC is a compiler driver.', 'tokens': [51225, 460, 11717, 307, 257, 31958, 6787, 13, 51369], 'temperature': 0.0, 'avg_logprob': -0.21552841479961687, 'compression_ratio': 1.6136363636363635, 'no_speech_prob': 0.003374689258635044}, {'id': 145, 'seek': 69932, 'start': 719.4200000000001, 'end': 727.22, 'text': ' So GCC is internally invoking all these tools to achieve these steps.', 'tokens': [51369, 407, 460, 11717, 307, 19501, 1048, 5953, 439, 613, 3873, 281, 4584, 613, 4439, 13, 51759], 'temperature': 0.0, 'avg_logprob': -0.21552841479961687, 'compression_ratio': 1.6136363636363635, 'no_speech_prob': 0.003374689258635044}, {'id': 146, 'seek': 72722, 'start': 727.22, 'end': 732.96, 'text': " Now if we actually look into this, so let's get to a simple step.", 'tokens': [50364, 823, 498, 321, 767, 574, 666, 341, 11, 370, 718, 311, 483, 281, 257, 2199, 1823, 13, 50651], 'temperature': 0.0, 'avg_logprob': -0.24502951199891138, 'compression_ratio': 1.295774647887324, 'no_speech_prob': 0.003026621649041772}, {'id': 147, 'seek': 72722, 'start': 732.96, 'end': 743.0400000000001, 'text': " So let's say I have hash defined max 100.", 'tokens': [50651, 407, 718, 311, 584, 286, 362, 22019, 7642, 11469, 2319, 13, 51155], 'temperature': 0.0, 'avg_logprob': -0.24502951199891138, 'compression_ratio': 1.295774647887324, 'no_speech_prob': 0.003026621649041772}, {'id': 148, 'seek': 72722, 'start': 743.0400000000001, 'end': 745.84, 'text': " Now let's try to pre-process this code.", 'tokens': [51155, 823, 718, 311, 853, 281, 659, 12, 41075, 341, 3089, 13, 51295], 'temperature': 0.0, 'avg_logprob': -0.24502951199891138, 'compression_ratio': 1.295774647887324, 'no_speech_prob': 0.003026621649041772}, {'id': 149, 'seek': 72722, 'start': 745.84, 'end': 751.2, 'text': ' So I can do GCC dash E sample dot C.', 'tokens': [51295, 407, 286, 393, 360, 460, 11717, 8240, 462, 6889, 5893, 383, 13, 51563], 'temperature': 0.0, 'avg_logprob': -0.24502951199891138, 'compression_ratio': 1.295774647887324, 'no_speech_prob': 0.003026621649041772}, {'id': 150, 'seek': 75120, 'start': 751.2, 'end': 758.86, 'text': ' And what you see here is actually all of these lines which you are seeing are actually contents', 'tokens': [50364, 400, 437, 291, 536, 510, 307, 767, 439, 295, 613, 3876, 597, 291, 366, 2577, 366, 767, 15768, 50747], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 151, 'seek': 75120, 'start': 758.86, 'end': 764.32, 'text': ' of STDIO.H.', 'tokens': [50747, 295, 4904, 49021, 13, 39, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 152, 'seek': 75120, 'start': 764.32, 'end': 766.2800000000001, 'text': " So it's quite big.", 'tokens': [51020, 407, 309, 311, 1596, 955, 13, 51118], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 153, 'seek': 75120, 'start': 766.2800000000001, 'end': 767.76, 'text': " Let's step to the end.", 'tokens': [51118, 961, 311, 1823, 281, 264, 917, 13, 51192], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 154, 'seek': 75120, 'start': 767.76, 'end': 773.1600000000001, 'text': ' And you will see the max which was used is actually being replaced with the value of', 'tokens': [51192, 400, 291, 486, 536, 264, 11469, 597, 390, 1143, 307, 767, 885, 10772, 365, 264, 2158, 295, 51462], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 155, 'seek': 75120, 'start': 773.1600000000001, 'end': 774.8000000000001, 'text': ' this.', 'tokens': [51462, 341, 13, 51544], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 156, 'seek': 75120, 'start': 774.8000000000001, 'end': 780.5600000000001, 'text': ' So this is the input which will actually be fed to the compiler.', 'tokens': [51544, 407, 341, 307, 264, 4846, 597, 486, 767, 312, 4636, 281, 264, 31958, 13, 51832], 'temperature': 0.0, 'avg_logprob': -0.16380641626757245, 'compression_ratio': 1.622340425531915, 'no_speech_prob': 0.0044671520590782166}, {'id': 157, 'seek': 78056, 'start': 780.56, 'end': 785.2399999999999, 'text': ' The next step which we saw was essentially the compiler which will actually produce the', 'tokens': [50364, 440, 958, 1823, 597, 321, 1866, 390, 4476, 264, 31958, 597, 486, 767, 5258, 264, 50598], 'temperature': 0.0, 'avg_logprob': -0.16103308341082403, 'compression_ratio': 1.68, 'no_speech_prob': 0.0003199345082975924}, {'id': 158, 'seek': 78056, 'start': 785.2399999999999, 'end': 786.6199999999999, 'text': ' assembly file.', 'tokens': [50598, 12103, 3991, 13, 50667], 'temperature': 0.0, 'avg_logprob': -0.16103308341082403, 'compression_ratio': 1.68, 'no_speech_prob': 0.0003199345082975924}, {'id': 159, 'seek': 78056, 'start': 786.6199999999999, 'end': 801.9599999999999, 'text': ' So if we do that, so this is the actual assembly program which was produced by the compiler.', 'tokens': [50667, 407, 498, 321, 360, 300, 11, 370, 341, 307, 264, 3539, 12103, 1461, 597, 390, 7126, 538, 264, 31958, 13, 51434], 'temperature': 0.0, 'avg_logprob': -0.16103308341082403, 'compression_ratio': 1.68, 'no_speech_prob': 0.0003199345082975924}, {'id': 160, 'seek': 78056, 'start': 801.9599999999999, 'end': 808.7199999999999, 'text': ' Just to begin with you can see there is something called as main which was written in the program.', 'tokens': [51434, 1449, 281, 1841, 365, 291, 393, 536, 456, 307, 746, 1219, 382, 2135, 597, 390, 3720, 294, 264, 1461, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.16103308341082403, 'compression_ratio': 1.68, 'no_speech_prob': 0.0003199345082975924}, {'id': 161, 'seek': 80872, 'start': 808.72, 'end': 816.28, 'text': ' There are some calls to functions which we had called like printf.', 'tokens': [50364, 821, 366, 512, 5498, 281, 6828, 597, 321, 632, 1219, 411, 4482, 69, 13, 50742], 'temperature': 0.0, 'avg_logprob': -0.16989959887604214, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.01797398552298546}, {'id': 162, 'seek': 80872, 'start': 816.28, 'end': 824.7, 'text': ' There is a variable called array and it is taking 400 bytes because it was an integer', 'tokens': [50742, 821, 307, 257, 7006, 1219, 10225, 293, 309, 307, 1940, 8423, 36088, 570, 309, 390, 364, 24922, 51163], 'temperature': 0.0, 'avg_logprob': -0.16989959887604214, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.01797398552298546}, {'id': 163, 'seek': 80872, 'start': 824.7, 'end': 828.0600000000001, 'text': ' and we had said array of 100.', 'tokens': [51163, 293, 321, 632, 848, 10225, 295, 2319, 13, 51331], 'temperature': 0.0, 'avg_logprob': -0.16989959887604214, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.01797398552298546}, {'id': 164, 'seek': 80872, 'start': 828.0600000000001, 'end': 832.84, 'text': ' So you could see that somehow the program whatever we had written in C is also representable', 'tokens': [51331, 407, 291, 727, 536, 300, 6063, 264, 1461, 2035, 321, 632, 3720, 294, 383, 307, 611, 2906, 712, 51570], 'temperature': 0.0, 'avg_logprob': -0.16989959887604214, 'compression_ratio': 1.5277777777777777, 'no_speech_prob': 0.01797398552298546}, {'id': 165, 'seek': 83284, 'start': 833.84, 'end': 839.9200000000001, 'text': ' just that the instructions which are being used are assembly instructions.', 'tokens': [50414, 445, 300, 264, 9415, 597, 366, 885, 1143, 366, 12103, 9415, 13, 50718], 'temperature': 0.0, 'avg_logprob': -0.18649680177930375, 'compression_ratio': 1.5698924731182795, 'no_speech_prob': 0.2390792965888977}, {'id': 166, 'seek': 83284, 'start': 839.9200000000001, 'end': 845.9200000000001, 'text': ' And then you can actually compile this to a sample dot O.', 'tokens': [50718, 400, 550, 291, 393, 767, 31413, 341, 281, 257, 6889, 5893, 422, 13, 51018], 'temperature': 0.0, 'avg_logprob': -0.18649680177930375, 'compression_ratio': 1.5698924731182795, 'no_speech_prob': 0.2390792965888977}, {'id': 167, 'seek': 83284, 'start': 845.9200000000001, 'end': 851.52, 'text': ' We will see what goes into the object file in much more detail.', 'tokens': [51018, 492, 486, 536, 437, 1709, 666, 264, 2657, 3991, 294, 709, 544, 2607, 13, 51298], 'temperature': 0.0, 'avg_logprob': -0.18649680177930375, 'compression_ratio': 1.5698924731182795, 'no_speech_prob': 0.2390792965888977}, {'id': 168, 'seek': 83284, 'start': 851.52, 'end': 860.24, 'text': ' And if you simply do this, then it is actually producing the A dot out which is the executable.', 'tokens': [51298, 400, 498, 291, 2935, 360, 341, 11, 550, 309, 307, 767, 10501, 264, 316, 5893, 484, 597, 307, 264, 7568, 712, 13, 51734], 'temperature': 0.0, 'avg_logprob': -0.18649680177930375, 'compression_ratio': 1.5698924731182795, 'no_speech_prob': 0.2390792965888977}, {'id': 169, 'seek': 86024, 'start': 860.24, 'end': 865.8, 'text': ' And A dot out you can actually run and what will happen is loader in the operating system', 'tokens': [50364, 400, 316, 5893, 484, 291, 393, 767, 1190, 293, 437, 486, 1051, 307, 3677, 260, 294, 264, 7447, 1185, 50642], 'temperature': 0.0, 'avg_logprob': -0.15925268973073653, 'compression_ratio': 1.6916666666666667, 'no_speech_prob': 0.014050392434000969}, {'id': 170, 'seek': 86024, 'start': 865.8, 'end': 870.48, 'text': ' will come into picture and load that program into the memory.', 'tokens': [50642, 486, 808, 666, 3036, 293, 3677, 300, 1461, 666, 264, 4675, 13, 50876], 'temperature': 0.0, 'avg_logprob': -0.15925268973073653, 'compression_ratio': 1.6916666666666667, 'no_speech_prob': 0.014050392434000969}, {'id': 171, 'seek': 86024, 'start': 870.48, 'end': 876.88, 'text': ' Now to zoom into details of each and every component, as I mentioned, preprocessor essentially', 'tokens': [50876, 823, 281, 8863, 666, 4365, 295, 1184, 293, 633, 6542, 11, 382, 286, 2835, 11, 2666, 340, 25432, 4476, 51196], 'temperature': 0.0, 'avg_logprob': -0.15925268973073653, 'compression_ratio': 1.6916666666666667, 'no_speech_prob': 0.014050392434000969}, {'id': 172, 'seek': 86024, 'start': 876.88, 'end': 881.96, 'text': ' takes the high level language source and converts it into the preprocessed source.', 'tokens': [51196, 2516, 264, 1090, 1496, 2856, 4009, 293, 38874, 309, 666, 264, 2666, 340, 780, 292, 4009, 13, 51450], 'temperature': 0.0, 'avg_logprob': -0.15925268973073653, 'compression_ratio': 1.6916666666666667, 'no_speech_prob': 0.014050392434000969}, {'id': 173, 'seek': 86024, 'start': 881.96, 'end': 888.32, 'text': ' And it is responsible for processing all the hash includes and those things.', 'tokens': [51450, 400, 309, 307, 6250, 337, 9007, 439, 264, 22019, 5974, 293, 729, 721, 13, 51768], 'temperature': 0.0, 'avg_logprob': -0.15925268973073653, 'compression_ratio': 1.6916666666666667, 'no_speech_prob': 0.014050392434000969}, {'id': 174, 'seek': 88832, 'start': 888.4000000000001, 'end': 894.7600000000001, 'text': ' So linker is actually translating your high level language source into assembly program.', 'tokens': [50368, 407, 2113, 260, 307, 767, 35030, 428, 1090, 1496, 2856, 4009, 666, 12103, 1461, 13, 50686], 'temperature': 0.0, 'avg_logprob': -0.26973876498994376, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.11906193941831589}, {'id': 175, 'seek': 88832, 'start': 894.7600000000001, 'end': 898.48, 'text': ' And by now you have learned that this is a beast of the task.', 'tokens': [50686, 400, 538, 586, 291, 362, 3264, 300, 341, 307, 257, 13464, 295, 264, 5633, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.26973876498994376, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.11906193941831589}, {'id': 176, 'seek': 88832, 'start': 898.48, 'end': 900.1600000000001, 'text': ' It is not a simple task.', 'tokens': [50872, 467, 307, 406, 257, 2199, 5633, 13, 50956], 'temperature': 0.0, 'avg_logprob': -0.26973876498994376, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.11906193941831589}, {'id': 177, 'seek': 88832, 'start': 900.1600000000001, 'end': 907.8000000000001, 'text': ' It is not merely one to one translation, but it also involves lot of analysis and optimizations.', 'tokens': [50956, 467, 307, 406, 17003, 472, 281, 472, 12853, 11, 457, 309, 611, 11626, 688, 295, 5215, 293, 5028, 14455, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.26973876498994376, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.11906193941831589}, {'id': 178, 'seek': 88832, 'start': 907.8000000000001, 'end': 913.12, 'text': ' Compared to linker compiler, assembler is much more of a translator.', 'tokens': [51338, 30539, 281, 2113, 260, 31958, 11, 8438, 1918, 307, 709, 544, 295, 257, 35223, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.26973876498994376, 'compression_ratio': 1.6238095238095238, 'no_speech_prob': 0.11906193941831589}, {'id': 179, 'seek': 91312, 'start': 913.12, 'end': 918.64, 'text': ' So assembler does not actually do optimizations or analysis.', 'tokens': [50364, 407, 8438, 1918, 775, 406, 767, 360, 5028, 14455, 420, 5215, 13, 50640], 'temperature': 0.0, 'avg_logprob': -0.1489856243133545, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.040819693356752396}, {'id': 180, 'seek': 91312, 'start': 918.64, 'end': 924.68, 'text': ' And assembler is not just meant for translating the instructions into the binary encoding,', 'tokens': [50640, 400, 8438, 1918, 307, 406, 445, 4140, 337, 35030, 264, 9415, 666, 264, 17434, 43430, 11, 50942], 'temperature': 0.0, 'avg_logprob': -0.1489856243133545, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.040819693356752396}, {'id': 181, 'seek': 91312, 'start': 924.68, 'end': 932.44, 'text': ' but also handles things which we saw here like what is this dot string, what is this', 'tokens': [50942, 457, 611, 18722, 721, 597, 321, 1866, 510, 411, 437, 307, 341, 5893, 6798, 11, 437, 307, 341, 51330], 'temperature': 0.0, 'avg_logprob': -0.1489856243133545, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.040819693356752396}, {'id': 182, 'seek': 91312, 'start': 932.44, 'end': 934.4, 'text': ' dot text.', 'tokens': [51330, 5893, 2487, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.1489856243133545, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.040819693356752396}, {'id': 183, 'seek': 91312, 'start': 934.4, 'end': 940.44, 'text': ' So most of the assembler supports some directives for you to write different parts of the programs', 'tokens': [51428, 407, 881, 295, 264, 8438, 1918, 9346, 512, 2047, 1539, 337, 291, 281, 2464, 819, 3166, 295, 264, 4268, 51730], 'temperature': 0.0, 'avg_logprob': -0.1489856243133545, 'compression_ratio': 1.6428571428571428, 'no_speech_prob': 0.040819693356752396}, {'id': 184, 'seek': 94044, 'start': 940.6, 'end': 944.0400000000001, 'text': ' And assembler is obviously responsible for handling them.', 'tokens': [50372, 400, 8438, 1918, 307, 2745, 6250, 337, 13175, 552, 13, 50544], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 185, 'seek': 94044, 'start': 944.0400000000001, 'end': 949.48, 'text': ' And assembler will create the object files which have the information for linker.', 'tokens': [50544, 400, 8438, 1918, 486, 1884, 264, 2657, 7098, 597, 362, 264, 1589, 337, 2113, 260, 13, 50816], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 186, 'seek': 94044, 'start': 949.48, 'end': 955.36, 'text': ' Now linker is essentially responsible for taking bunch of object files and linking them', 'tokens': [50816, 823, 2113, 260, 307, 4476, 6250, 337, 1940, 3840, 295, 2657, 7098, 293, 25775, 552, 51110], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 187, 'seek': 94044, 'start': 955.36, 'end': 956.84, 'text': ' together.', 'tokens': [51110, 1214, 13, 51184], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 188, 'seek': 94044, 'start': 956.84, 'end': 960.36, 'text': ' Linking would essentially involve resolving references.', 'tokens': [51184, 8466, 278, 576, 4476, 9494, 49940, 15400, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 189, 'seek': 94044, 'start': 960.36, 'end': 965.0400000000001, 'text': " So for example, when you write program, when we wrote this program, we didn't know what", 'tokens': [51360, 407, 337, 1365, 11, 562, 291, 2464, 1461, 11, 562, 321, 4114, 341, 1461, 11, 321, 994, 380, 458, 437, 51594], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 190, 'seek': 94044, 'start': 965.0400000000001, 'end': 966.0400000000001, 'text': ' is printf.', 'tokens': [51594, 307, 4482, 69, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.13087140596829927, 'compression_ratio': 1.75, 'no_speech_prob': 0.08026784658432007}, {'id': 191, 'seek': 96604, 'start': 966.76, 'end': 971.8399999999999, 'text': " So linker's job is to figure out where the printf is and kind of pull that in and so", 'tokens': [50400, 407, 2113, 260, 311, 1691, 307, 281, 2573, 484, 689, 264, 4482, 69, 307, 293, 733, 295, 2235, 300, 294, 293, 370, 50654], 'temperature': 0.0, 'avg_logprob': -0.13443067799443784, 'compression_ratio': 1.624203821656051, 'no_speech_prob': 0.008311538025736809}, {'id': 192, 'seek': 96604, 'start': 971.8399999999999, 'end': 972.8399999999999, 'text': ' on.', 'tokens': [50654, 322, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.13443067799443784, 'compression_ratio': 1.624203821656051, 'no_speech_prob': 0.008311538025736809}, {'id': 193, 'seek': 96604, 'start': 972.8399999999999, 'end': 978.24, 'text': ' So linker is responsible for figuring out where is something used and where is something', 'tokens': [50704, 407, 2113, 260, 307, 6250, 337, 15213, 484, 689, 307, 746, 1143, 293, 689, 307, 746, 50974], 'temperature': 0.0, 'avg_logprob': -0.13443067799443784, 'compression_ratio': 1.624203821656051, 'no_speech_prob': 0.008311538025736809}, {'id': 194, 'seek': 96604, 'start': 978.24, 'end': 983.4, 'text': ' defined and connect those two things together.', 'tokens': [50974, 7642, 293, 1745, 729, 732, 721, 1214, 13, 51232], 'temperature': 0.0, 'avg_logprob': -0.13443067799443784, 'compression_ratio': 1.624203821656051, 'no_speech_prob': 0.008311538025736809}, {'id': 195, 'seek': 96604, 'start': 983.4, 'end': 992.76, 'text': ' Any idea why we need a linker?', 'tokens': [51232, 2639, 1558, 983, 321, 643, 257, 2113, 260, 30, 51700], 'temperature': 0.0, 'avg_logprob': -0.13443067799443784, 'compression_ratio': 1.624203821656051, 'no_speech_prob': 0.008311538025736809}, {'id': 196, 'seek': 99276, 'start': 992.76, 'end': 996.8, 'text': ' So why do you want to write code in multiple source files?', 'tokens': [50364, 407, 983, 360, 291, 528, 281, 2464, 3089, 294, 3866, 4009, 7098, 30, 50566], 'temperature': 0.0, 'avg_logprob': -0.3414125442504883, 'compression_ratio': 1.5794392523364487, 'no_speech_prob': 0.1516086459159851}, {'id': 197, 'seek': 99276, 'start': 996.8, 'end': 997.8, 'text': ' Yes.', 'tokens': [50566, 1079, 13, 50616], 'temperature': 0.0, 'avg_logprob': -0.3414125442504883, 'compression_ratio': 1.5794392523364487, 'no_speech_prob': 0.1516086459159851}, {'id': 198, 'seek': 99276, 'start': 997.8, 'end': 998.8, 'text': ' Correct.', 'tokens': [50616, 12753, 13, 50666], 'temperature': 0.0, 'avg_logprob': -0.3414125442504883, 'compression_ratio': 1.5794392523364487, 'no_speech_prob': 0.1516086459159851}, {'id': 199, 'seek': 99276, 'start': 998.8, 'end': 1016.0, 'text': ' So that is actually one of the key ideas of why you want to write code in multiple source', 'tokens': [50666, 407, 300, 307, 767, 472, 295, 264, 2141, 3487, 295, 983, 291, 528, 281, 2464, 3089, 294, 3866, 4009, 51526], 'temperature': 0.0, 'avg_logprob': -0.3414125442504883, 'compression_ratio': 1.5794392523364487, 'no_speech_prob': 0.1516086459159851}, {'id': 200, 'seek': 99276, 'start': 1016.0, 'end': 1017.0, 'text': ' files.', 'tokens': [51526, 7098, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.3414125442504883, 'compression_ratio': 1.5794392523364487, 'no_speech_prob': 0.1516086459159851}, {'id': 201, 'seek': 101700, 'start': 1017.08, 'end': 1024.56, 'text': " So essentially, let's say you have a very big code, let's say 1 MB worth of C code.", 'tokens': [50368, 407, 4476, 11, 718, 311, 584, 291, 362, 257, 588, 955, 3089, 11, 718, 311, 584, 502, 28866, 3163, 295, 383, 3089, 13, 50742], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 202, 'seek': 101700, 'start': 1024.56, 'end': 1026.88, 'text': " And let's say you change one line in it.", 'tokens': [50742, 400, 718, 311, 584, 291, 1319, 472, 1622, 294, 309, 13, 50858], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 203, 'seek': 101700, 'start': 1026.88, 'end': 1032.0, 'text': ' What will happen is entire compiler needs to process the entire code again and again', 'tokens': [50858, 708, 486, 1051, 307, 2302, 31958, 2203, 281, 1399, 264, 2302, 3089, 797, 293, 797, 51114], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 204, 'seek': 101700, 'start': 1032.0, 'end': 1035.66, 'text': ' for every small incremental change you are doing in the code.', 'tokens': [51114, 337, 633, 1359, 35759, 1319, 291, 366, 884, 294, 264, 3089, 13, 51297], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 205, 'seek': 101700, 'start': 1035.66, 'end': 1040.72, 'text': " And that's not developer friendly because imagine every time you are compiling a program,", 'tokens': [51297, 400, 300, 311, 406, 10754, 9208, 570, 3811, 633, 565, 291, 366, 715, 4883, 257, 1461, 11, 51550], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 206, 'seek': 101700, 'start': 1040.72, 'end': 1046.28, 'text': ' your compiler takes five minutes to compile it because it has to compile large chunk of', 'tokens': [51550, 428, 31958, 2516, 1732, 2077, 281, 31413, 309, 570, 309, 575, 281, 31413, 2416, 16635, 295, 51828], 'temperature': 0.0, 'avg_logprob': -0.17610677083333334, 'compression_ratio': 1.774703557312253, 'no_speech_prob': 0.3369593918323517}, {'id': 207, 'seek': 104628, 'start': 1046.44, 'end': 1049.56, 'text': " code, then that's not acceptable.", 'tokens': [50372, 3089, 11, 550, 300, 311, 406, 15513, 13, 50528], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 208, 'seek': 104628, 'start': 1049.56, 'end': 1050.72, 'text': ' So that is one reason.', 'tokens': [50528, 407, 300, 307, 472, 1778, 13, 50586], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 209, 'seek': 104628, 'start': 1050.72, 'end': 1053.08, 'text': ' Any other reasons?', 'tokens': [50586, 2639, 661, 4112, 30, 50704], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 210, 'seek': 104628, 'start': 1053.08, 'end': 1058.0, 'text': " So for example, why can't I create a source file, a separate source file and give it to", 'tokens': [50704, 407, 337, 1365, 11, 983, 393, 380, 286, 1884, 257, 4009, 3991, 11, 257, 4994, 4009, 3991, 293, 976, 309, 281, 50950], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 211, 'seek': 104628, 'start': 1058.0, 'end': 1064.52, 'text': ' my friend and say use this and he can just hash include it.', 'tokens': [50950, 452, 1277, 293, 584, 764, 341, 293, 415, 393, 445, 22019, 4090, 309, 13, 51276], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 212, 'seek': 104628, 'start': 1064.52, 'end': 1068.96, 'text': " So I don't write the entire source in one file, I hash include it.", 'tokens': [51276, 407, 286, 500, 380, 2464, 264, 2302, 4009, 294, 472, 3991, 11, 286, 22019, 4090, 309, 13, 51498], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 213, 'seek': 104628, 'start': 1068.96, 'end': 1075.92, 'text': ' The separate compilation problem still remains, but it at least solves my distribution problem', 'tokens': [51498, 440, 4994, 40261, 1154, 920, 7023, 11, 457, 309, 412, 1935, 39890, 452, 7316, 1154, 51846], 'temperature': 0.0, 'avg_logprob': -0.15229583966850055, 'compression_ratio': 1.6885964912280702, 'no_speech_prob': 0.06359448283910751}, {'id': 214, 'seek': 107592, 'start': 1075.92, 'end': 1081.3600000000001, 'text': " because so one of the things which Aman was saying is essentially you don't want to write", 'tokens': [50364, 570, 370, 472, 295, 264, 721, 597, 35466, 390, 1566, 307, 4476, 291, 500, 380, 528, 281, 2464, 50636], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 215, 'seek': 107592, 'start': 1081.3600000000001, 'end': 1086.48, 'text': ' large programs because it kind of reduces the modularity because it kind of becomes', 'tokens': [50636, 2416, 4268, 570, 309, 733, 295, 18081, 264, 31111, 507, 570, 309, 733, 295, 3643, 50892], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 216, 'seek': 107592, 'start': 1086.48, 'end': 1088.2, 'text': ' a problem.', 'tokens': [50892, 257, 1154, 13, 50978], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 217, 'seek': 107592, 'start': 1088.2, 'end': 1094.92, 'text': ' So you want to write it as collection of source files and it allows you to do code reuse because', 'tokens': [50978, 407, 291, 528, 281, 2464, 309, 382, 5765, 295, 4009, 7098, 293, 309, 4045, 291, 281, 360, 3089, 26225, 570, 51314], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 218, 'seek': 107592, 'start': 1094.92, 'end': 1099.4, 'text': ' once I have written some code, I can reuse it at multiple places.', 'tokens': [51314, 1564, 286, 362, 3720, 512, 3089, 11, 286, 393, 26225, 309, 412, 3866, 3190, 13, 51538], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 219, 'seek': 107592, 'start': 1099.4, 'end': 1105.44, 'text': " For example, let's say you have implemented some set of functions for linked list.", 'tokens': [51538, 1171, 1365, 11, 718, 311, 584, 291, 362, 12270, 512, 992, 295, 6828, 337, 9408, 1329, 13, 51840], 'temperature': 0.0, 'avg_logprob': -0.16082058700860716, 'compression_ratio': 1.7131474103585658, 'no_speech_prob': 0.00047254905803129077}, {'id': 220, 'seek': 110544, 'start': 1105.44, 'end': 1108.92, 'text': ' So linked list, insert, delete, whatever.', 'tokens': [50364, 407, 9408, 1329, 11, 8969, 11, 12097, 11, 2035, 13, 50538], 'temperature': 0.0, 'avg_logprob': -0.2024575173854828, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.00048773176968097687}, {'id': 221, 'seek': 110544, 'start': 1108.92, 'end': 1114.0, 'text': ' And you want to keep reusing it across your multiple projects, then I can simply have', 'tokens': [50538, 400, 291, 528, 281, 1066, 319, 7981, 309, 2108, 428, 3866, 4455, 11, 550, 286, 393, 2935, 362, 50792], 'temperature': 0.0, 'avg_logprob': -0.2024575173854828, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.00048773176968097687}, {'id': 222, 'seek': 110544, 'start': 1114.0, 'end': 1124.0, 'text': ' linked list source code somehow included in my client code and use it.', 'tokens': [50792, 9408, 1329, 4009, 3089, 6063, 5556, 294, 452, 6423, 3089, 293, 764, 309, 13, 51292], 'temperature': 0.0, 'avg_logprob': -0.2024575173854828, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.00048773176968097687}, {'id': 223, 'seek': 110544, 'start': 1124.0, 'end': 1128.96, 'text': ' So essentially it allows you to create library of common utilities.', 'tokens': [51292, 407, 4476, 309, 4045, 291, 281, 1884, 6405, 295, 2689, 30482, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.2024575173854828, 'compression_ratio': 1.4615384615384615, 'no_speech_prob': 0.00048773176968097687}, {'id': 224, 'seek': 112896, 'start': 1129.6000000000001, 'end': 1135.72, 'text': ' One of the interesting aspect is allows you to distribute pre-compiled code.', 'tokens': [50396, 1485, 295, 264, 1880, 4171, 307, 4045, 291, 281, 20594, 659, 12, 21541, 7292, 3089, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.13994001348813376, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.05181196704506874}, {'id': 225, 'seek': 112896, 'start': 1135.72, 'end': 1139.64, 'text': " So for example, let's say you have implemented linked list and you want to share it with", 'tokens': [50702, 407, 337, 1365, 11, 718, 311, 584, 291, 362, 12270, 9408, 1329, 293, 291, 528, 281, 2073, 309, 365, 50898], 'temperature': 0.0, 'avg_logprob': -0.13994001348813376, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.05181196704506874}, {'id': 226, 'seek': 112896, 'start': 1139.64, 'end': 1145.4, 'text': " your friend, but you don't want to share in a form of source code because you don't", 'tokens': [50898, 428, 1277, 11, 457, 291, 500, 380, 528, 281, 2073, 294, 257, 1254, 295, 4009, 3089, 570, 291, 500, 380, 51186], 'temperature': 0.0, 'avg_logprob': -0.13994001348813376, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.05181196704506874}, {'id': 227, 'seek': 112896, 'start': 1145.4, 'end': 1149.96, 'text': ' want your friend to look at how you have implemented linked list.', 'tokens': [51186, 528, 428, 1277, 281, 574, 412, 577, 291, 362, 12270, 9408, 1329, 13, 51414], 'temperature': 0.0, 'avg_logprob': -0.13994001348813376, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.05181196704506874}, {'id': 228, 'seek': 112896, 'start': 1149.96, 'end': 1155.32, 'text': ' You are okay him using the linked list, but not how it is implemented.', 'tokens': [51414, 509, 366, 1392, 796, 1228, 264, 9408, 1329, 11, 457, 406, 577, 309, 307, 12270, 13, 51682], 'temperature': 0.0, 'avg_logprob': -0.13994001348813376, 'compression_ratio': 1.892156862745098, 'no_speech_prob': 0.05181196704506874}, {'id': 229, 'seek': 115532, 'start': 1155.32, 'end': 1163.0, 'text': ' So pre-compiled code, if you give to your friend, he can only see assembly.', 'tokens': [50364, 407, 659, 12, 21541, 7292, 3089, 11, 498, 291, 976, 281, 428, 1277, 11, 415, 393, 787, 536, 12103, 13, 50748], 'temperature': 0.0, 'avg_logprob': -0.13097428112495235, 'compression_ratio': 1.5450236966824644, 'no_speech_prob': 0.0004163183330092579}, {'id': 230, 'seek': 115532, 'start': 1163.0, 'end': 1167.3999999999999, 'text': ' From that he can still reverse engineer it, but less likely.', 'tokens': [50748, 3358, 300, 415, 393, 920, 9943, 11403, 309, 11, 457, 1570, 3700, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.13097428112495235, 'compression_ratio': 1.5450236966824644, 'no_speech_prob': 0.0004163183330092579}, {'id': 231, 'seek': 115532, 'start': 1167.3999999999999, 'end': 1173.0, 'text': ' Source code is much more verbose to understand compared to assembly.', 'tokens': [50968, 29629, 3089, 307, 709, 544, 9595, 541, 281, 1223, 5347, 281, 12103, 13, 51248], 'temperature': 0.0, 'avg_logprob': -0.13097428112495235, 'compression_ratio': 1.5450236966824644, 'no_speech_prob': 0.0004163183330092579}, {'id': 232, 'seek': 115532, 'start': 1173.0, 'end': 1180.2, 'text': " And then the separate compilation is the main reason where you don't want to keep recompiling", 'tokens': [51248, 400, 550, 264, 4994, 40261, 307, 264, 2135, 1778, 689, 291, 500, 380, 528, 281, 1066, 48000, 4883, 51608], 'temperature': 0.0, 'avg_logprob': -0.13097428112495235, 'compression_ratio': 1.5450236966824644, 'no_speech_prob': 0.0004163183330092579}, {'id': 233, 'seek': 115532, 'start': 1180.2, 'end': 1183.12, 'text': ' entire parts of your code.', 'tokens': [51608, 2302, 3166, 295, 428, 3089, 13, 51754], 'temperature': 0.0, 'avg_logprob': -0.13097428112495235, 'compression_ratio': 1.5450236966824644, 'no_speech_prob': 0.0004163183330092579}, {'id': 234, 'seek': 118312, 'start': 1183.12, 'end': 1190.0, 'text': ' But are there any advantages of keeping source code in one file?', 'tokens': [50364, 583, 366, 456, 604, 14906, 295, 5145, 4009, 3089, 294, 472, 3991, 30, 50708], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 235, 'seek': 118312, 'start': 1190.0, 'end': 1194.7199999999998, 'text': ' Are there any reasons why I want to keep source in one file?', 'tokens': [50708, 2014, 456, 604, 4112, 983, 286, 528, 281, 1066, 4009, 294, 472, 3991, 30, 50944], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 236, 'seek': 118312, 'start': 1194.7199999999998, 'end': 1197.08, 'text': ' Correct.', 'tokens': [50944, 12753, 13, 51062], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 237, 'seek': 118312, 'start': 1197.08, 'end': 1199.54, 'text': ' So optimizations, how does compiler work?', 'tokens': [51062, 407, 5028, 14455, 11, 577, 775, 31958, 589, 30, 51185], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 238, 'seek': 118312, 'start': 1199.54, 'end': 1204.84, 'text': ' So for compiler to optimize anything, it needs to have visibility.', 'tokens': [51185, 407, 337, 31958, 281, 19719, 1340, 11, 309, 2203, 281, 362, 19883, 13, 51450], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 239, 'seek': 118312, 'start': 1204.84, 'end': 1212.52, 'text': ' So when main calls foo, if compiler has no idea what foo is, compiler will have to make', 'tokens': [51450, 407, 562, 2135, 5498, 726, 78, 11, 498, 31958, 575, 572, 1558, 437, 726, 78, 307, 11, 31958, 486, 362, 281, 652, 51834], 'temperature': 0.0, 'avg_logprob': -0.17195825467164488, 'compression_ratio': 1.6717171717171717, 'no_speech_prob': 0.004324881359934807}, {'id': 240, 'seek': 121252, 'start': 1212.6399999999999, 'end': 1216.6, 'text': ' conservative assumptions that foo can do anything.', 'tokens': [50370, 13780, 17695, 300, 726, 78, 393, 360, 1340, 13, 50568], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 241, 'seek': 121252, 'start': 1216.6, 'end': 1221.8799999999999, 'text': ' So for example, if you have a global variable, it may have to assume that foo may modify', 'tokens': [50568, 407, 337, 1365, 11, 498, 291, 362, 257, 4338, 7006, 11, 309, 815, 362, 281, 6552, 300, 726, 78, 815, 16927, 50832], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 242, 'seek': 121252, 'start': 1221.8799999999999, 'end': 1222.8799999999999, 'text': ' that variable.', 'tokens': [50832, 300, 7006, 13, 50882], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 243, 'seek': 121252, 'start': 1222.8799999999999, 'end': 1228.92, 'text': " So I can't reuse the value or foo may do something which I don't know about.", 'tokens': [50882, 407, 286, 393, 380, 26225, 264, 2158, 420, 726, 78, 815, 360, 746, 597, 286, 500, 380, 458, 466, 13, 51184], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 244, 'seek': 121252, 'start': 1228.92, 'end': 1233.16, 'text': ' So it reduces visibility of the compiler.', 'tokens': [51184, 407, 309, 18081, 19883, 295, 264, 31958, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 245, 'seek': 121252, 'start': 1233.16, 'end': 1238.6, 'text': ' So there are cases where you may still want to keep things in single source.', 'tokens': [51396, 407, 456, 366, 3331, 689, 291, 815, 920, 528, 281, 1066, 721, 294, 2167, 4009, 13, 51668], 'temperature': 0.0, 'avg_logprob': -0.10762693593790243, 'compression_ratio': 1.650943396226415, 'no_speech_prob': 0.01689598336815834}, {'id': 246, 'seek': 123860, 'start': 1238.6, 'end': 1242.7199999999998, 'text': ' But obviously then you lose the benefit of separate compilation.', 'tokens': [50364, 583, 2745, 550, 291, 3624, 264, 5121, 295, 4994, 40261, 13, 50570], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 247, 'seek': 123860, 'start': 1242.7199999999998, 'end': 1248.0, 'text': ' So it will be a tradeoff between how much optimizations you want compiler to do on your', 'tokens': [50570, 407, 309, 486, 312, 257, 4923, 4506, 1296, 577, 709, 5028, 14455, 291, 528, 31958, 281, 360, 322, 428, 50834], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 248, 'seek': 123860, 'start': 1248.0, 'end': 1255.8799999999999, 'text': ' code versus how much modularity and separate compilation benefits you want.', 'tokens': [50834, 3089, 5717, 577, 709, 31111, 507, 293, 4994, 40261, 5311, 291, 528, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 249, 'seek': 123860, 'start': 1255.8799999999999, 'end': 1260.3999999999999, 'text': ' Now there are link time optimizations also.', 'tokens': [51228, 823, 456, 366, 2113, 565, 5028, 14455, 611, 13, 51454], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 250, 'seek': 123860, 'start': 1260.3999999999999, 'end': 1264.6999999999998, 'text': ' So linker can also do optimizations because at link time you will have everything coming', 'tokens': [51454, 407, 2113, 260, 393, 611, 360, 5028, 14455, 570, 412, 2113, 565, 291, 486, 362, 1203, 1348, 51669], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 251, 'seek': 123860, 'start': 1264.6999999999998, 'end': 1266.6599999999999, 'text': ' together.', 'tokens': [51669, 1214, 13, 51767], 'temperature': 0.0, 'avg_logprob': -0.1449763578527114, 'compression_ratio': 1.7922705314009661, 'no_speech_prob': 0.040830496698617935}, {'id': 252, 'seek': 126666, 'start': 1266.66, 'end': 1273.8600000000001, 'text': ' But the thing is linker is always a bottleneck in the overall compilation process because', 'tokens': [50364, 583, 264, 551, 307, 2113, 260, 307, 1009, 257, 44641, 547, 294, 264, 4787, 40261, 1399, 570, 50724], 'temperature': 0.0, 'avg_logprob': -0.16628652005582242, 'compression_ratio': 1.5693069306930694, 'no_speech_prob': 0.01405118964612484}, {'id': 253, 'seek': 126666, 'start': 1273.8600000000001, 'end': 1278.5400000000002, 'text': ' it has to process thousands of objects feeding in.', 'tokens': [50724, 309, 575, 281, 1399, 5383, 295, 6565, 12919, 294, 13, 50958], 'temperature': 0.0, 'avg_logprob': -0.16628652005582242, 'compression_ratio': 1.5693069306930694, 'no_speech_prob': 0.01405118964612484}, {'id': 254, 'seek': 126666, 'start': 1278.5400000000002, 'end': 1282.98, 'text': ' And if you start putting a lot of complex things into linker, your overall link time', 'tokens': [50958, 400, 498, 291, 722, 3372, 257, 688, 295, 3997, 721, 666, 2113, 260, 11, 428, 4787, 2113, 565, 51180], 'temperature': 0.0, 'avg_logprob': -0.16628652005582242, 'compression_ratio': 1.5693069306930694, 'no_speech_prob': 0.01405118964612484}, {'id': 255, 'seek': 126666, 'start': 1282.98, 'end': 1284.8200000000002, 'text': ' is going to increase.', 'tokens': [51180, 307, 516, 281, 3488, 13, 51272], 'temperature': 0.0, 'avg_logprob': -0.16628652005582242, 'compression_ratio': 1.5693069306930694, 'no_speech_prob': 0.01405118964612484}, {'id': 256, 'seek': 126666, 'start': 1284.8200000000002, 'end': 1290.8600000000001, 'text': ' Plus typically linkers are designed to have very minimal information.', 'tokens': [51272, 7721, 5850, 2113, 433, 366, 4761, 281, 362, 588, 13206, 1589, 13, 51574], 'temperature': 0.0, 'avg_logprob': -0.16628652005582242, 'compression_ratio': 1.5693069306930694, 'no_speech_prob': 0.01405118964612484}, {'id': 257, 'seek': 129086, 'start': 1291.86, 'end': 1298.3799999999999, 'text': " Let's say you had to do optimizations at link time and the code is already scheduled", 'tokens': [50414, 961, 311, 584, 291, 632, 281, 360, 5028, 14455, 412, 2113, 565, 293, 264, 3089, 307, 1217, 15678, 50740], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 258, 'seek': 129086, 'start': 1298.3799999999999, 'end': 1300.3799999999999, 'text': ' and register allocated.', 'tokens': [50740, 293, 7280, 29772, 13, 50840], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 259, 'seek': 129086, 'start': 1300.3799999999999, 'end': 1305.02, 'text': ' Then can linker really undo all the decisions which compiler took?', 'tokens': [50840, 1396, 393, 2113, 260, 534, 23779, 439, 264, 5327, 597, 31958, 1890, 30, 51072], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 260, 'seek': 129086, 'start': 1305.02, 'end': 1307.56, 'text': " It's very hard for linker to undo the...", 'tokens': [51072, 467, 311, 588, 1152, 337, 2113, 260, 281, 23779, 264, 485, 51199], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 261, 'seek': 129086, 'start': 1307.56, 'end': 1311.74, 'text': ' So for example, compiler made some conservative decisions.', 'tokens': [51199, 407, 337, 1365, 11, 31958, 1027, 512, 13780, 5327, 13, 51408], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 262, 'seek': 129086, 'start': 1311.74, 'end': 1313.2199999999998, 'text': ' Linker has to undo them.', 'tokens': [51408, 8466, 260, 575, 281, 23779, 552, 13, 51482], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 263, 'seek': 129086, 'start': 1313.2199999999998, 'end': 1318.6, 'text': ' But to undo them, it has to change the code which was generated by compiler.', 'tokens': [51482, 583, 281, 23779, 552, 11, 309, 575, 281, 1319, 264, 3089, 597, 390, 10833, 538, 31958, 13, 51751], 'temperature': 0.0, 'avg_logprob': -0.22455970446268717, 'compression_ratio': 1.6905829596412556, 'no_speech_prob': 0.29378217458724976}, {'id': 264, 'seek': 131860, 'start': 1318.6, 'end': 1320.2199999999998, 'text': ' And it has to change everything.', 'tokens': [50364, 400, 309, 575, 281, 1319, 1203, 13, 50445], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 265, 'seek': 131860, 'start': 1320.2199999999998, 'end': 1325.24, 'text': ' As soon as it touches something, it kind of will need to touch most of the parts.', 'tokens': [50445, 1018, 2321, 382, 309, 17431, 746, 11, 309, 733, 295, 486, 643, 281, 2557, 881, 295, 264, 3166, 13, 50696], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 266, 'seek': 131860, 'start': 1325.24, 'end': 1330.12, 'text': ' So it becomes a practical problem that linkers cannot do all kinds of optimizations which', 'tokens': [50696, 407, 309, 3643, 257, 8496, 1154, 300, 2113, 433, 2644, 360, 439, 3685, 295, 5028, 14455, 597, 50940], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 267, 'seek': 131860, 'start': 1330.12, 'end': 1331.6799999999998, 'text': ' a compiler can do.', 'tokens': [50940, 257, 31958, 393, 360, 13, 51018], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 268, 'seek': 131860, 'start': 1331.6799999999998, 'end': 1336.32, 'text': ' There are few things which it can do which we will see later.', 'tokens': [51018, 821, 366, 1326, 721, 597, 309, 393, 360, 597, 321, 486, 536, 1780, 13, 51250], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 269, 'seek': 131860, 'start': 1336.32, 'end': 1342.4399999999998, 'text': ' But primarily, remember this, by breaking things up, you are reducing visibility.', 'tokens': [51250, 583, 10029, 11, 1604, 341, 11, 538, 7697, 721, 493, 11, 291, 366, 12245, 19883, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.16351536045903745, 'compression_ratio': 1.5956521739130434, 'no_speech_prob': 0.012928665615618229}, {'id': 270, 'seek': 134244, 'start': 1342.44, 'end': 1349.24, 'text': ' And every component which we are going to study in the whole thing will have some visibility', 'tokens': [50364, 400, 633, 6542, 597, 321, 366, 516, 281, 2979, 294, 264, 1379, 551, 486, 362, 512, 19883, 50704], 'temperature': 0.0, 'avg_logprob': -0.17977979106287803, 'compression_ratio': 1.6951219512195121, 'no_speech_prob': 0.2869618237018585}, {'id': 271, 'seek': 134244, 'start': 1349.24, 'end': 1352.48, 'text': ' and some things which it has to assume.', 'tokens': [50704, 293, 512, 721, 597, 309, 575, 281, 6552, 13, 50866], 'temperature': 0.0, 'avg_logprob': -0.17977979106287803, 'compression_ratio': 1.6951219512195121, 'no_speech_prob': 0.2869618237018585}, {'id': 272, 'seek': 134244, 'start': 1352.48, 'end': 1360.0, 'text': ' And for things which are unknown to that component, it is going to reduce the chances of possibly', 'tokens': [50866, 400, 337, 721, 597, 366, 9841, 281, 300, 6542, 11, 309, 307, 516, 281, 5407, 264, 10486, 295, 6264, 51242], 'temperature': 0.0, 'avg_logprob': -0.17977979106287803, 'compression_ratio': 1.6951219512195121, 'no_speech_prob': 0.2869618237018585}, {'id': 273, 'seek': 134244, 'start': 1360.0, 'end': 1363.0, 'text': ' interesting things happening in that component.', 'tokens': [51242, 1880, 721, 2737, 294, 300, 6542, 13, 51392], 'temperature': 0.0, 'avg_logprob': -0.17977979106287803, 'compression_ratio': 1.6951219512195121, 'no_speech_prob': 0.2869618237018585}, {'id': 274, 'seek': 139300, 'start': 1394.0, 'end': 1399.44, 'text': ' So essentially the object file which is generated inherently is going to be platform and architecture', 'tokens': [50414, 407, 4476, 264, 2657, 3991, 597, 307, 10833, 27993, 307, 516, 281, 312, 3663, 293, 9482, 50686], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 275, 'seek': 139300, 'start': 1399.44, 'end': 1401.04, 'text': ' specific.', 'tokens': [50686, 2685, 13, 50766], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 276, 'seek': 139300, 'start': 1401.04, 'end': 1404.16, 'text': ' And I cannot ship that...', 'tokens': [50766, 400, 286, 2644, 5374, 300, 485, 50922], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 277, 'seek': 139300, 'start': 1404.16, 'end': 1406.92, 'text': " So for example, let's say you have compiled something for Linux.", 'tokens': [50922, 407, 337, 1365, 11, 718, 311, 584, 291, 362, 36548, 746, 337, 18734, 13, 51060], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 278, 'seek': 139300, 'start': 1406.92, 'end': 1412.04, 'text': ' I cannot use that on Windows as it is unless I am doing some sort of virtualization kind', 'tokens': [51060, 286, 2644, 764, 300, 322, 8591, 382, 309, 307, 5969, 286, 669, 884, 512, 1333, 295, 6374, 2144, 733, 51316], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 279, 'seek': 139300, 'start': 1412.04, 'end': 1414.72, 'text': ' of thing.', 'tokens': [51316, 295, 551, 13, 51450], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 280, 'seek': 139300, 'start': 1414.72, 'end': 1417.9, 'text': ' And then I have my source and I need to distribute it.', 'tokens': [51450, 400, 550, 286, 362, 452, 4009, 293, 286, 643, 281, 20594, 309, 13, 51609], 'temperature': 0.0, 'avg_logprob': -0.22023102406705364, 'compression_ratio': 1.5213675213675213, 'no_speech_prob': 0.7674505114555359}, {'id': 281, 'seek': 141790, 'start': 1417.9, 'end': 1423.8600000000001, 'text': ' You need to distribute different versions of your code, of your object files which are', 'tokens': [50364, 509, 643, 281, 20594, 819, 9606, 295, 428, 3089, 11, 295, 428, 2657, 7098, 597, 366, 50662], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 282, 'seek': 141790, 'start': 1423.8600000000001, 'end': 1425.5400000000002, 'text': ' specific to platforms.', 'tokens': [50662, 2685, 281, 9473, 13, 50746], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 283, 'seek': 141790, 'start': 1425.5400000000002, 'end': 1432.46, 'text': " That's why every library or every ISV or every provider of source code, for example, when", 'tokens': [50746, 663, 311, 983, 633, 6405, 420, 633, 6205, 53, 420, 633, 12398, 295, 4009, 3089, 11, 337, 1365, 11, 562, 51092], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 284, 'seek': 141790, 'start': 1432.46, 'end': 1438.52, 'text': ' you download any software, you get option of which platform you are working on.', 'tokens': [51092, 291, 5484, 604, 4722, 11, 291, 483, 3614, 295, 597, 3663, 291, 366, 1364, 322, 13, 51395], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 285, 'seek': 141790, 'start': 1438.52, 'end': 1443.22, 'text': ' And that is the reason because the code is going to be different.', 'tokens': [51395, 400, 300, 307, 264, 1778, 570, 264, 3089, 307, 516, 281, 312, 819, 13, 51630], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 286, 'seek': 141790, 'start': 1443.22, 'end': 1446.0600000000002, 'text': ' Does that answer your question or you had something different?', 'tokens': [51630, 4402, 300, 1867, 428, 1168, 420, 291, 632, 746, 819, 30, 51772], 'temperature': 0.0, 'avg_logprob': -0.18946754054019327, 'compression_ratio': 1.6451612903225807, 'no_speech_prob': 0.05331048369407654}, {'id': 287, 'seek': 144606, 'start': 1446.3, 'end': 1449.1799999999998, 'text': ' Okay.', 'tokens': [50376, 1033, 13, 50520], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 288, 'seek': 144606, 'start': 1449.1799999999998, 'end': 1450.7, 'text': ' Now coming to Loader.', 'tokens': [50520, 823, 1348, 281, 6130, 8312, 13, 50596], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 289, 'seek': 144606, 'start': 1450.7, 'end': 1454.1799999999998, 'text': ' So Loader is essentially part of the operating system.', 'tokens': [50596, 407, 6130, 8312, 307, 4476, 644, 295, 264, 7447, 1185, 13, 50770], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 290, 'seek': 144606, 'start': 1454.1799999999998, 'end': 1458.34, 'text': ' And Loader is going to take your executable file and whatever command line arguments which', 'tokens': [50770, 400, 6130, 8312, 307, 516, 281, 747, 428, 7568, 712, 3991, 293, 2035, 5622, 1622, 12869, 597, 50978], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 291, 'seek': 144606, 'start': 1458.34, 'end': 1462.5, 'text': ' you have given to run your program and is actually going to load it in the memory and', 'tokens': [50978, 291, 362, 2212, 281, 1190, 428, 1461, 293, 307, 767, 516, 281, 3677, 309, 294, 264, 4675, 293, 51186], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 292, 'seek': 144606, 'start': 1462.5, 'end': 1464.1, 'text': ' execute it.', 'tokens': [51186, 14483, 309, 13, 51266], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 293, 'seek': 144606, 'start': 1464.1, 'end': 1468.8999999999999, 'text': " So Loader's job is essentially to read the program from the disk where it is stored.", 'tokens': [51266, 407, 6130, 8312, 311, 1691, 307, 4476, 281, 1401, 264, 1461, 490, 264, 12355, 689, 309, 307, 12187, 13, 51506], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 294, 'seek': 144606, 'start': 1468.8999999999999, 'end': 1474.94, 'text': ' So wherever you have a.out stored, it will read content of that, load it in the memory', 'tokens': [51506, 407, 8660, 291, 362, 257, 13, 346, 12187, 11, 309, 486, 1401, 2701, 295, 300, 11, 3677, 309, 294, 264, 4675, 51808], 'temperature': 0.0, 'avg_logprob': -0.168304675558339, 'compression_ratio': 1.8305785123966942, 'no_speech_prob': 0.0020491075702011585}, {'id': 295, 'seek': 147494, 'start': 1475.14, 'end': 1479.06, 'text': ' and start running the first instruction of the program.', 'tokens': [50374, 293, 722, 2614, 264, 700, 10951, 295, 264, 1461, 13, 50570], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 296, 'seek': 147494, 'start': 1479.06, 'end': 1482.18, 'text': ' Now what is the first instruction in the program?', 'tokens': [50570, 823, 437, 307, 264, 700, 10951, 294, 264, 1461, 30, 50726], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 297, 'seek': 147494, 'start': 1482.18, 'end': 1483.18, 'text': ' Is it main?', 'tokens': [50726, 1119, 309, 2135, 30, 50776], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 298, 'seek': 147494, 'start': 1483.18, 'end': 1484.18, 'text': ' Correct.', 'tokens': [50776, 12753, 13, 50826], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 299, 'seek': 147494, 'start': 1484.18, 'end': 1487.42, 'text': " It's underscore start.", 'tokens': [50826, 467, 311, 37556, 722, 13, 50988], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 300, 'seek': 147494, 'start': 1487.42, 'end': 1492.7, 'text': " And that's why we got that error earlier that there is something called underscore start", 'tokens': [50988, 400, 300, 311, 983, 321, 658, 300, 6713, 3071, 300, 456, 307, 746, 1219, 37556, 722, 51252], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 301, 'seek': 147494, 'start': 1492.7, 'end': 1494.98, 'text': ' already defined.', 'tokens': [51252, 1217, 7642, 13, 51366], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 302, 'seek': 147494, 'start': 1494.98, 'end': 1498.38, 'text': " And we'll see details of that later.", 'tokens': [51366, 400, 321, 603, 536, 4365, 295, 300, 1780, 13, 51536], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 303, 'seek': 147494, 'start': 1498.38, 'end': 1501.06, 'text': ' So what is need for a Loader?', 'tokens': [51536, 407, 437, 307, 643, 337, 257, 6130, 8312, 30, 51670], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 304, 'seek': 147494, 'start': 1501.06, 'end': 1502.06, 'text': ' Yes.', 'tokens': [51670, 1079, 13, 51720], 'temperature': 0.0, 'avg_logprob': -0.2740955352783203, 'compression_ratio': 1.6683673469387754, 'no_speech_prob': 0.006477968767285347}, {'id': 305, 'seek': 150206, 'start': 1502.3, 'end': 1503.3, 'text': ' Okay.', 'tokens': [50376, 1033, 13, 50426], 'temperature': 0.0, 'avg_logprob': -0.48721996943155926, 'compression_ratio': 1.174757281553398, 'no_speech_prob': 0.020277271047234535}, {'id': 306, 'seek': 150206, 'start': 1503.3, 'end': 1520.3, 'text': ' Any other answers?', 'tokens': [50426, 2639, 661, 6338, 30, 51276], 'temperature': 0.0, 'avg_logprob': -0.48721996943155926, 'compression_ratio': 1.174757281553398, 'no_speech_prob': 0.020277271047234535}, {'id': 307, 'seek': 150206, 'start': 1520.3, 'end': 1524.82, 'text': ' Okay.', 'tokens': [51276, 1033, 13, 51502], 'temperature': 0.0, 'avg_logprob': -0.48721996943155926, 'compression_ratio': 1.174757281553398, 'no_speech_prob': 0.020277271047234535}, {'id': 308, 'seek': 150206, 'start': 1524.82, 'end': 1531.1799999999998, 'text': ' So essentially if you had a system where only your program was running, nothing else, then', 'tokens': [51502, 407, 4476, 498, 291, 632, 257, 1185, 689, 787, 428, 1461, 390, 2614, 11, 1825, 1646, 11, 550, 51820], 'temperature': 0.0, 'avg_logprob': -0.48721996943155926, 'compression_ratio': 1.174757281553398, 'no_speech_prob': 0.020277271047234535}, {'id': 309, 'seek': 153118, 'start': 1531.18, 'end': 1536.54, 'text': ' technically there is no need for a Loader because your program has entire access to', 'tokens': [50364, 12120, 456, 307, 572, 643, 337, 257, 6130, 8312, 570, 428, 1461, 575, 2302, 2105, 281, 50632], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 310, 'seek': 153118, 'start': 1536.54, 'end': 1538.9, 'text': ' all the physical resources in the system.', 'tokens': [50632, 439, 264, 4001, 3593, 294, 264, 1185, 13, 50750], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 311, 'seek': 153118, 'start': 1538.9, 'end': 1542.22, 'text': " But we don't live in that world.", 'tokens': [50750, 583, 321, 500, 380, 1621, 294, 300, 1002, 13, 50916], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 312, 'seek': 153118, 'start': 1542.22, 'end': 1546.7, 'text': ' We have processors with support multitasking.', 'tokens': [50916, 492, 362, 27751, 365, 1406, 42338, 47211, 13, 51140], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 313, 'seek': 153118, 'start': 1546.7, 'end': 1551.26, 'text': ' And every time you are running something, there are already running programs behind', 'tokens': [51140, 400, 633, 565, 291, 366, 2614, 746, 11, 456, 366, 1217, 2614, 4268, 2261, 51368], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 314, 'seek': 153118, 'start': 1551.26, 'end': 1552.66, 'text': ' the scenes.', 'tokens': [51368, 264, 8026, 13, 51438], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 315, 'seek': 153118, 'start': 1552.66, 'end': 1558.18, 'text': ' So someone has to manage what is being run, where and who is allocated what memory and', 'tokens': [51438, 407, 1580, 575, 281, 3067, 437, 307, 885, 1190, 11, 689, 293, 567, 307, 29772, 437, 4675, 293, 51714], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 316, 'seek': 153118, 'start': 1558.18, 'end': 1559.7, 'text': ' so on.', 'tokens': [51714, 370, 322, 13, 51790], 'temperature': 0.0, 'avg_logprob': -0.17060885478540794, 'compression_ratio': 1.628099173553719, 'no_speech_prob': 0.0016995086334645748}, {'id': 317, 'seek': 155970, 'start': 1559.7, 'end': 1565.18, 'text': " So that's why you need a Loader because you have multitasking systems.", 'tokens': [50364, 407, 300, 311, 983, 291, 643, 257, 6130, 8312, 570, 291, 362, 42338, 47211, 3652, 13, 50638], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 318, 'seek': 155970, 'start': 1565.18, 'end': 1570.06, 'text': ' So you have physical memory, you need to somehow distribute it across the programs which are', 'tokens': [50638, 407, 291, 362, 4001, 4675, 11, 291, 643, 281, 6063, 20594, 309, 2108, 264, 4268, 597, 366, 50882], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 319, 'seek': 155970, 'start': 1570.06, 'end': 1571.78, 'text': ' already running.', 'tokens': [50882, 1217, 2614, 13, 50968], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 320, 'seek': 155970, 'start': 1571.78, 'end': 1577.3400000000001, 'text': ' And you need a program which can look at the current state of the physical memory and ensure', 'tokens': [50968, 400, 291, 643, 257, 1461, 597, 393, 574, 412, 264, 2190, 1785, 295, 264, 4001, 4675, 293, 5586, 51246], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 321, 'seek': 155970, 'start': 1577.3400000000001, 'end': 1580.1000000000001, 'text': ' that correct things are loaded.', 'tokens': [51246, 300, 3006, 721, 366, 13210, 13, 51384], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 322, 'seek': 155970, 'start': 1580.1000000000001, 'end': 1584.54, 'text': " That's why you need a program which will actually look at the current state of the machine and", 'tokens': [51384, 663, 311, 983, 291, 643, 257, 1461, 597, 486, 767, 574, 412, 264, 2190, 1785, 295, 264, 3479, 293, 51606], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 323, 'seek': 155970, 'start': 1584.54, 'end': 1586.78, 'text': ' do something appropriate.', 'tokens': [51606, 360, 746, 6854, 13, 51718], 'temperature': 0.0, 'avg_logprob': -0.11476872184059837, 'compression_ratio': 1.9017857142857142, 'no_speech_prob': 0.012797816656529903}, {'id': 324, 'seek': 158678, 'start': 1587.1, 'end': 1591.06, 'text': ' And every time a program is run, the situation might be different, right?', 'tokens': [50380, 400, 633, 565, 257, 1461, 307, 1190, 11, 264, 2590, 1062, 312, 819, 11, 558, 30, 50578], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 325, 'seek': 158678, 'start': 1591.06, 'end': 1593.06, 'text': ' Because the system load might be different.', 'tokens': [50578, 1436, 264, 1185, 3677, 1062, 312, 819, 13, 50678], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 326, 'seek': 158678, 'start': 1593.06, 'end': 1599.1399999999999, 'text': ' So Loader cannot, I mean a program cannot be, cannot have all the information pre-baked', 'tokens': [50678, 407, 6130, 8312, 2644, 11, 286, 914, 257, 1461, 2644, 312, 11, 2644, 362, 439, 264, 1589, 659, 12, 65, 7301, 50982], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 327, 'seek': 158678, 'start': 1599.1399999999999, 'end': 1608.3799999999999, 'text': ' in because it is going to be dependent on the time at which it is being run.', 'tokens': [50982, 294, 570, 309, 307, 516, 281, 312, 12334, 322, 264, 565, 412, 597, 309, 307, 885, 1190, 13, 51444], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 328, 'seek': 158678, 'start': 1608.3799999999999, 'end': 1613.66, 'text': " And addresses will actually be unknown because we don't have the full view of what is happening", 'tokens': [51444, 400, 16862, 486, 767, 312, 9841, 570, 321, 500, 380, 362, 264, 1577, 1910, 295, 437, 307, 2737, 51708], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 329, 'seek': 158678, 'start': 1613.66, 'end': 1615.86, 'text': ' in the memory.', 'tokens': [51708, 294, 264, 4675, 13, 51818], 'temperature': 0.0, 'avg_logprob': -0.15914625110048236, 'compression_ratio': 1.6794871794871795, 'no_speech_prob': 0.4142795503139496}, {'id': 330, 'seek': 161586, 'start': 1615.86, 'end': 1620.36, 'text': ' So if you look at it, this is kind of summary of what all is happening.', 'tokens': [50364, 407, 498, 291, 574, 412, 309, 11, 341, 307, 733, 295, 12691, 295, 437, 439, 307, 2737, 13, 50589], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 331, 'seek': 161586, 'start': 1620.36, 'end': 1624.3, 'text': ' So we had source code, right, which got to the compiler.', 'tokens': [50589, 407, 321, 632, 4009, 3089, 11, 558, 11, 597, 658, 281, 264, 31958, 13, 50786], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 332, 'seek': 161586, 'start': 1624.3, 'end': 1630.2199999999998, 'text': ' You possibly had multiple source codes which produced relocatable object files which were', 'tokens': [50786, 509, 6264, 632, 3866, 4009, 14211, 597, 7126, 26981, 31415, 2657, 7098, 597, 645, 51082], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 333, 'seek': 161586, 'start': 1630.2199999999998, 'end': 1637.3, 'text': ' fed to the linker along with some static libraries probably to form an executable.', 'tokens': [51082, 4636, 281, 264, 2113, 260, 2051, 365, 512, 13437, 15148, 1391, 281, 1254, 364, 7568, 712, 13, 51436], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 334, 'seek': 161586, 'start': 1637.3, 'end': 1642.9399999999998, 'text': ' And executable was given to Loader and Loader had something called dynamic libraries which', 'tokens': [51436, 400, 7568, 712, 390, 2212, 281, 6130, 8312, 293, 6130, 8312, 632, 746, 1219, 8546, 15148, 597, 51718], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 335, 'seek': 161586, 'start': 1642.9399999999998, 'end': 1644.8999999999999, 'text': ' was actually executed.', 'tokens': [51718, 390, 767, 17577, 13, 51816], 'temperature': 0.0, 'avg_logprob': -0.1441617401278749, 'compression_ratio': 1.6733870967741935, 'no_speech_prob': 0.0019261236302554607}, {'id': 336, 'seek': 164490, 'start': 1644.94, 'end': 1649.5800000000002, 'text': ' We will see details of the later phases here.', 'tokens': [50366, 492, 486, 536, 4365, 295, 264, 1780, 18764, 510, 13, 50598], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 337, 'seek': 164490, 'start': 1649.5800000000002, 'end': 1652.3000000000002, 'text': ' Relocatable object files, linkers, static libraries.', 'tokens': [50598, 8738, 905, 31415, 2657, 7098, 11, 2113, 433, 11, 13437, 15148, 13, 50734], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 338, 'seek': 164490, 'start': 1652.3000000000002, 'end': 1658.02, 'text': ' So beyond compiler, whatever you see is what is being covered in this model.', 'tokens': [50734, 407, 4399, 31958, 11, 2035, 291, 536, 307, 437, 307, 885, 5343, 294, 341, 2316, 13, 51020], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 339, 'seek': 164490, 'start': 1658.02, 'end': 1663.5400000000002, 'text': ' And typically whatever is happening on the upper side of the screen is at compilation', 'tokens': [51020, 400, 5850, 2035, 307, 2737, 322, 264, 6597, 1252, 295, 264, 2568, 307, 412, 40261, 51296], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 340, 'seek': 164490, 'start': 1663.5400000000002, 'end': 1671.5, 'text': ' time and whatever is happening below is actually when you run the program.', 'tokens': [51296, 565, 293, 2035, 307, 2737, 2507, 307, 767, 562, 291, 1190, 264, 1461, 13, 51694], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 341, 'seek': 164490, 'start': 1671.5, 'end': 1674.02, 'text': ' Any questions so far?', 'tokens': [51694, 2639, 1651, 370, 1400, 30, 51820], 'temperature': 0.0, 'avg_logprob': -0.19003896935041562, 'compression_ratio': 1.6422018348623852, 'no_speech_prob': 0.0002780053182505071}, {'id': 342, 'seek': 167402, 'start': 1674.1399999999999, 'end': 1675.1399999999999, 'text': ' Yes.', 'tokens': [50370, 1079, 13, 50420], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 343, 'seek': 167402, 'start': 1675.1399999999999, 'end': 1680.5, 'text': ' What are the different directions?', 'tokens': [50420, 708, 366, 264, 819, 11095, 30, 50688], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 344, 'seek': 167402, 'start': 1680.5, 'end': 1683.3799999999999, 'text': ' What are?', 'tokens': [50688, 708, 366, 30, 50832], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 345, 'seek': 167402, 'start': 1683.3799999999999, 'end': 1689.66, 'text': ' So essentially we will get to some parts of it but just to answer your questions quickly.', 'tokens': [50832, 407, 4476, 321, 486, 483, 281, 512, 3166, 295, 309, 457, 445, 281, 1867, 428, 1651, 2661, 13, 51146], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 346, 'seek': 167402, 'start': 1689.66, 'end': 1695.5, 'text': ' So essentially if you look at your program, your program largely consists of the instructions', 'tokens': [51146, 407, 4476, 498, 291, 574, 412, 428, 1461, 11, 428, 1461, 11611, 14689, 295, 264, 9415, 51438], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 347, 'seek': 167402, 'start': 1695.5, 'end': 1699.3, 'text': ' which are going to run and some data for the instructions, right.', 'tokens': [51438, 597, 366, 516, 281, 1190, 293, 512, 1412, 337, 264, 9415, 11, 558, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.333790609281357, 'compression_ratio': 1.670391061452514, 'no_speech_prob': 0.000655730371363461}, {'id': 348, 'seek': 169930, 'start': 1699.58, 'end': 1705.06, 'text': ' You might have global variables, you might have static variables and so on.', 'tokens': [50378, 509, 1062, 362, 4338, 9102, 11, 291, 1062, 362, 13437, 9102, 293, 370, 322, 13, 50652], 'temperature': 0.0, 'avg_logprob': -0.16073825359344482, 'compression_ratio': 1.9625668449197862, 'no_speech_prob': 0.09258043766021729}, {'id': 349, 'seek': 169930, 'start': 1705.06, 'end': 1711.06, 'text': ' So there are some directives which are essentially used for representing data in your program', 'tokens': [50652, 407, 456, 366, 512, 2047, 1539, 597, 366, 4476, 1143, 337, 13460, 1412, 294, 428, 1461, 50952], 'temperature': 0.0, 'avg_logprob': -0.16073825359344482, 'compression_ratio': 1.9625668449197862, 'no_speech_prob': 0.09258043766021729}, {'id': 350, 'seek': 169930, 'start': 1711.06, 'end': 1716.26, 'text': ' and there are some directives which are used to represent instructions in your program.', 'tokens': [50952, 293, 456, 366, 512, 2047, 1539, 597, 366, 1143, 281, 2906, 9415, 294, 428, 1461, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.16073825359344482, 'compression_ratio': 1.9625668449197862, 'no_speech_prob': 0.09258043766021729}, {'id': 351, 'seek': 169930, 'start': 1716.26, 'end': 1718.54, 'text': ' Typically the instructions are called dot text.', 'tokens': [51212, 23129, 264, 9415, 366, 1219, 5893, 2487, 13, 51326], 'temperature': 0.0, 'avg_logprob': -0.16073825359344482, 'compression_ratio': 1.9625668449197862, 'no_speech_prob': 0.09258043766021729}, {'id': 352, 'seek': 169930, 'start': 1718.54, 'end': 1724.1399999999999, 'text': ' So anything with dot text is going to be set of instructions.', 'tokens': [51326, 407, 1340, 365, 5893, 2487, 307, 516, 281, 312, 992, 295, 9415, 13, 51606], 'temperature': 0.0, 'avg_logprob': -0.16073825359344482, 'compression_ratio': 1.9625668449197862, 'no_speech_prob': 0.09258043766021729}, {'id': 353, 'seek': 172414, 'start': 1724.14, 'end': 1730.18, 'text': ' And anything with, actually this was a slightly bad example, I should probably.', 'tokens': [50364, 400, 1340, 365, 11, 767, 341, 390, 257, 4748, 1578, 1365, 11, 286, 820, 1391, 13, 50666], 'temperature': 0.0, 'avg_logprob': -0.4160263824462891, 'compression_ratio': 1.0681818181818181, 'no_speech_prob': 0.6343161463737488}, {'id': 354, 'seek': 172414, 'start': 1730.18, 'end': 1732.18, 'text': ' So one second.', 'tokens': [50666, 407, 472, 1150, 13, 50766], 'temperature': 0.0, 'avg_logprob': -0.4160263824462891, 'compression_ratio': 1.0681818181818181, 'no_speech_prob': 0.6343161463737488}, {'id': 355, 'seek': 175414, 'start': 1754.18, 'end': 1783.8600000000001, 'text': ' So typically then there is data for you to declare.', 'tokens': [50366, 407, 5850, 550, 456, 307, 1412, 337, 291, 281, 19710, 13, 51850], 'temperature': 0.0, 'avg_logprob': -0.4760940869649251, 'compression_ratio': 0.9107142857142857, 'no_speech_prob': 0.9294827580451965}, {'id': 356, 'seek': 178386, 'start': 1784.58, 'end': 1790.3, 'text': ' Then there are these kind of things, type and other things which we will get to a little', 'tokens': [50400, 1396, 456, 366, 613, 733, 295, 721, 11, 2010, 293, 661, 721, 597, 321, 486, 483, 281, 257, 707, 50686], 'temperature': 0.0, 'avg_logprob': -0.20046991915316195, 'compression_ratio': 1.553072625698324, 'no_speech_prob': 0.011455695144832134}, {'id': 357, 'seek': 178386, 'start': 1790.3, 'end': 1796.3, 'text': ' later in the session on what they are trying to represent.', 'tokens': [50686, 1780, 294, 264, 5481, 322, 437, 436, 366, 1382, 281, 2906, 13, 50986], 'temperature': 0.0, 'avg_logprob': -0.20046991915316195, 'compression_ratio': 1.553072625698324, 'no_speech_prob': 0.011455695144832134}, {'id': 358, 'seek': 178386, 'start': 1796.3, 'end': 1798.3, 'text': ' Any other questions?', 'tokens': [50986, 2639, 661, 1651, 30, 51086], 'temperature': 0.0, 'avg_logprob': -0.20046991915316195, 'compression_ratio': 1.553072625698324, 'no_speech_prob': 0.011455695144832134}, {'id': 359, 'seek': 178386, 'start': 1798.3, 'end': 1808.1, 'text': ' We will get to that.', 'tokens': [51086, 492, 486, 483, 281, 300, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.20046991915316195, 'compression_ratio': 1.553072625698324, 'no_speech_prob': 0.011455695144832134}, {'id': 360, 'seek': 178386, 'start': 1808.1, 'end': 1813.3, 'text': ' So before we kind of start, I will just give brief intro of x86 assembly so that you are', 'tokens': [51576, 407, 949, 321, 733, 295, 722, 11, 286, 486, 445, 976, 5353, 12897, 295, 2031, 22193, 12103, 370, 300, 291, 366, 51836], 'temperature': 0.0, 'avg_logprob': -0.20046991915316195, 'compression_ratio': 1.553072625698324, 'no_speech_prob': 0.011455695144832134}, {'id': 361, 'seek': 181330, 'start': 1813.3, 'end': 1817.5, 'text': ' aware of the sample codes which we are going to look at.', 'tokens': [50364, 3650, 295, 264, 6889, 14211, 597, 321, 366, 516, 281, 574, 412, 13, 50574], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 362, 'seek': 181330, 'start': 1817.5, 'end': 1822.18, 'text': ' So x86 has actually bunch of registers.', 'tokens': [50574, 407, 2031, 22193, 575, 767, 3840, 295, 38351, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 363, 'seek': 181330, 'start': 1822.18, 'end': 1831.5, 'text': ' So EAX, EBX, ECX, EDX, ESI, EDI, these are 32 bit registers and these are actually general', 'tokens': [50808, 407, 35747, 55, 11, 50148, 55, 11, 19081, 55, 11, 18050, 55, 11, 12564, 40, 11, 462, 3085, 11, 613, 366, 8858, 857, 38351, 293, 613, 366, 767, 2674, 51274], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 364, 'seek': 181330, 'start': 1831.5, 'end': 1832.6, 'text': ' purpose.', 'tokens': [51274, 4334, 13, 51329], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 365, 'seek': 181330, 'start': 1832.6, 'end': 1837.7, 'text': ' So by general purpose I mean you can use them for your general register allocation and so', 'tokens': [51329, 407, 538, 2674, 4334, 286, 914, 291, 393, 764, 552, 337, 428, 2674, 7280, 27599, 293, 370, 51584], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 366, 'seek': 181330, 'start': 1837.7, 'end': 1838.86, 'text': ' on.', 'tokens': [51584, 322, 13, 51642], 'temperature': 0.0, 'avg_logprob': -0.1484061174614485, 'compression_ratio': 1.6111111111111112, 'no_speech_prob': 0.008299004286527634}, {'id': 367, 'seek': 183886, 'start': 1838.86, 'end': 1846.2199999999998, 'text': ' So holding variables in the program or doing anything with respect to spills, other things', 'tokens': [50364, 407, 5061, 9102, 294, 264, 1461, 420, 884, 1340, 365, 3104, 281, 637, 2565, 11, 661, 721, 50732], 'temperature': 0.0, 'avg_logprob': -0.14103169874711471, 'compression_ratio': 1.6009852216748768, 'no_speech_prob': 0.2927388846874237}, {'id': 368, 'seek': 183886, 'start': 1846.2199999999998, 'end': 1850.8, 'text': ' which you might have learned, these are the registers which are actually being used.', 'tokens': [50732, 597, 291, 1062, 362, 3264, 11, 613, 366, 264, 38351, 597, 366, 767, 885, 1143, 13, 50961], 'temperature': 0.0, 'avg_logprob': -0.14103169874711471, 'compression_ratio': 1.6009852216748768, 'no_speech_prob': 0.2927388846874237}, {'id': 369, 'seek': 183886, 'start': 1850.8, 'end': 1857.5, 'text': ' And these are 32 bits and there are lower bit variants of this.', 'tokens': [50961, 400, 613, 366, 8858, 9239, 293, 456, 366, 3126, 857, 21669, 295, 341, 13, 51296], 'temperature': 0.0, 'avg_logprob': -0.14103169874711471, 'compression_ratio': 1.6009852216748768, 'no_speech_prob': 0.2927388846874237}, {'id': 370, 'seek': 183886, 'start': 1857.5, 'end': 1863.3799999999999, 'text': ' So whenever I refer to AL register in my program, I am referring to the lower 8 bits.', 'tokens': [51296, 407, 5699, 286, 2864, 281, 7056, 7280, 294, 452, 1461, 11, 286, 669, 13761, 281, 264, 3126, 1649, 9239, 13, 51590], 'temperature': 0.0, 'avg_logprob': -0.14103169874711471, 'compression_ratio': 1.6009852216748768, 'no_speech_prob': 0.2927388846874237}, {'id': 371, 'seek': 186338, 'start': 1864.38, 'end': 1870.22, 'text': ' So whenever I refer to AH, I am referring to the upper 8 bits in the lower 16 bits and', 'tokens': [50414, 407, 5699, 286, 2864, 281, 25888, 11, 286, 669, 13761, 281, 264, 6597, 1649, 9239, 294, 264, 3126, 3165, 9239, 293, 50706], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 372, 'seek': 186338, 'start': 1870.22, 'end': 1874.5800000000002, 'text': ' AX is essentially the upper 16 bits.', 'tokens': [50706, 316, 55, 307, 4476, 264, 6597, 3165, 9239, 13, 50924], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 373, 'seek': 186338, 'start': 1874.5800000000002, 'end': 1877.9, 'text': ' So this forms EAX registers.', 'tokens': [50924, 407, 341, 6422, 35747, 55, 38351, 13, 51090], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 374, 'seek': 186338, 'start': 1877.9, 'end': 1882.8200000000002, 'text': ' And then there are two special registers ESP and EBP which we are going to learn a bit', 'tokens': [51090, 400, 550, 456, 366, 732, 2121, 38351, 12564, 47, 293, 50148, 47, 597, 321, 366, 516, 281, 1466, 257, 857, 51336], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 375, 'seek': 186338, 'start': 1882.8200000000002, 'end': 1885.5, 'text': ' more later in the session.', 'tokens': [51336, 544, 1780, 294, 264, 5481, 13, 51470], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 376, 'seek': 186338, 'start': 1885.5, 'end': 1890.74, 'text': ' And x86 actually has two syntaxes.', 'tokens': [51470, 400, 2031, 22193, 767, 575, 732, 28431, 279, 13, 51732], 'temperature': 0.0, 'avg_logprob': -0.184690187143725, 'compression_ratio': 1.5759162303664922, 'no_speech_prob': 0.22235652804374695}, {'id': 377, 'seek': 189074, 'start': 1890.74, 'end': 1897.2, 'text': ' So x86 textual program can appear in two syntax formats.', 'tokens': [50364, 407, 2031, 22193, 2487, 901, 1461, 393, 4204, 294, 732, 28431, 25879, 13, 50687], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 378, 'seek': 189074, 'start': 1897.2, 'end': 1901.42, 'text': ' One is called as Intel form and one is called AT&T form.', 'tokens': [50687, 1485, 307, 1219, 382, 19762, 1254, 293, 472, 307, 1219, 8872, 5, 51, 1254, 13, 50898], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 379, 'seek': 189074, 'start': 1901.42, 'end': 1906.74, 'text': ' So in Intel form, the differences are mostly syntactical.', 'tokens': [50898, 407, 294, 19762, 1254, 11, 264, 7300, 366, 5240, 23980, 578, 804, 13, 51164], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 380, 'seek': 189074, 'start': 1906.74, 'end': 1911.18, 'text': ' There is no difference in the set of instructions and so on.', 'tokens': [51164, 821, 307, 572, 2649, 294, 264, 992, 295, 9415, 293, 370, 322, 13, 51386], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 381, 'seek': 189074, 'start': 1911.18, 'end': 1916.82, 'text': ' So the operand order is actually on the Intel syntax, the destination appears on the left', 'tokens': [51386, 407, 264, 2208, 474, 1668, 307, 767, 322, 264, 19762, 28431, 11, 264, 12236, 7038, 322, 264, 1411, 51668], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 382, 'seek': 189074, 'start': 1916.82, 'end': 1920.22, 'text': ' side before the source.', 'tokens': [51668, 1252, 949, 264, 4009, 13, 51838], 'temperature': 0.0, 'avg_logprob': -0.13162034422486693, 'compression_ratio': 1.6796116504854368, 'no_speech_prob': 0.0027115338016301394}, {'id': 383, 'seek': 192022, 'start': 1920.22, 'end': 1927.54, 'text': ' So this instruction is actually saying move value 5 into register EAX.', 'tokens': [50364, 407, 341, 10951, 307, 767, 1566, 1286, 2158, 1025, 666, 7280, 35747, 55, 13, 50730], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 384, 'seek': 192022, 'start': 1927.54, 'end': 1930.66, 'text': " In AT&T syntax, it's kind of reverse.", 'tokens': [50730, 682, 8872, 5, 51, 28431, 11, 309, 311, 733, 295, 9943, 13, 50886], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 385, 'seek': 192022, 'start': 1930.66, 'end': 1933.82, 'text': ' Sources appear before the destination.', 'tokens': [50886, 318, 2749, 4204, 949, 264, 12236, 13, 51044], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 386, 'seek': 192022, 'start': 1933.82, 'end': 1937.7, 'text': ' So 5 is being moved into EAX.', 'tokens': [51044, 407, 1025, 307, 885, 4259, 666, 35747, 55, 13, 51238], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 387, 'seek': 192022, 'start': 1937.7, 'end': 1945.22, 'text': ' Now the registers in Intel syntax are referred directly EAX, EBX and so on.', 'tokens': [51238, 823, 264, 38351, 294, 19762, 28431, 366, 10839, 3838, 35747, 55, 11, 50148, 55, 293, 370, 322, 13, 51614], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 388, 'seek': 192022, 'start': 1945.22, 'end': 1949.8600000000001, 'text': ' In AT&T syntax, they start with percent.', 'tokens': [51614, 682, 8872, 5, 51, 28431, 11, 436, 722, 365, 3043, 13, 51846], 'temperature': 0.0, 'avg_logprob': -0.15489316828110639, 'compression_ratio': 1.5, 'no_speech_prob': 0.0006164241931401193}, {'id': 389, 'seek': 194986, 'start': 1949.86, 'end': 1955.4199999999998, 'text': ' But the instructions need to have the mnemonic which represents the size.', 'tokens': [50364, 583, 264, 9415, 643, 281, 362, 264, 275, 25989, 11630, 597, 8855, 264, 2744, 13, 50642], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 390, 'seek': 194986, 'start': 1955.4199999999998, 'end': 1963.86, 'text': ' For example, here we had to say move l to say it is a word movement or move b to indicate', 'tokens': [50642, 1171, 1365, 11, 510, 321, 632, 281, 584, 1286, 287, 281, 584, 309, 307, 257, 1349, 3963, 420, 1286, 272, 281, 13330, 51064], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 391, 'seek': 194986, 'start': 1963.86, 'end': 1966.5, 'text': " it's a byte movement and so on.", 'tokens': [51064, 309, 311, 257, 40846, 3963, 293, 370, 322, 13, 51196], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 392, 'seek': 194986, 'start': 1966.5, 'end': 1970.4199999999998, 'text': ' In Intel syntax, there is no such suffix.', 'tokens': [51196, 682, 19762, 28431, 11, 456, 307, 572, 1270, 3889, 970, 13, 51392], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 393, 'seek': 194986, 'start': 1970.4199999999998, 'end': 1974.5, 'text': ' And immediate need to have dollar as the prefix.', 'tokens': [51392, 400, 11629, 643, 281, 362, 7241, 382, 264, 46969, 13, 51596], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 394, 'seek': 194986, 'start': 1974.5, 'end': 1978.36, 'text': ' And essentially the addressing modes look something like this.', 'tokens': [51596, 400, 4476, 264, 14329, 14068, 574, 746, 411, 341, 13, 51789], 'temperature': 0.0, 'avg_logprob': -0.21568849584558508, 'compression_ratio': 1.6009174311926606, 'no_speech_prob': 0.010978474281728268}, {'id': 395, 'seek': 197836, 'start': 1978.36, 'end': 1983.52, 'text': " You don't need to kind of know all of these details, but when you read the sample code,", 'tokens': [50364, 509, 500, 380, 643, 281, 733, 295, 458, 439, 295, 613, 4365, 11, 457, 562, 291, 1401, 264, 6889, 3089, 11, 50622], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 396, 'seek': 197836, 'start': 1983.52, 'end': 1986.12, 'text': ' this might act as a reference.', 'tokens': [50622, 341, 1062, 605, 382, 257, 6408, 13, 50752], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 397, 'seek': 197836, 'start': 1986.12, 'end': 1991.6399999999999, 'text': ' And most of the assemblers support Intel syntax, but the glue assembler which is on the Linux', 'tokens': [50752, 400, 881, 295, 264, 8438, 11977, 1406, 19762, 28431, 11, 457, 264, 8998, 8438, 1918, 597, 307, 322, 264, 18734, 51028], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 398, 'seek': 197836, 'start': 1991.6399999999999, 'end': 1995.04, 'text': ' actually by default supports AT&T syntax.', 'tokens': [51028, 767, 538, 7576, 9346, 8872, 5, 51, 28431, 13, 51198], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 399, 'seek': 197836, 'start': 1995.04, 'end': 1998.4799999999998, 'text': ' There is a way to make it support Intel syntax also.', 'tokens': [51198, 821, 307, 257, 636, 281, 652, 309, 1406, 19762, 28431, 611, 13, 51370], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 400, 'seek': 197836, 'start': 1998.4799999999998, 'end': 2005.08, 'text': ' But most of the examples in this slide set are going to use AT&T syntax.', 'tokens': [51370, 583, 881, 295, 264, 5110, 294, 341, 4137, 992, 366, 516, 281, 764, 8872, 5, 51, 28431, 13, 51700], 'temperature': 0.0, 'avg_logprob': -0.15236942366798326, 'compression_ratio': 1.6740088105726871, 'no_speech_prob': 0.09261642396450043}, {'id': 401, 'seek': 200508, 'start': 2005.08, 'end': 2009.8799999999999, 'text': ' For example, this is actually AT&T syntax.', 'tokens': [50364, 1171, 1365, 11, 341, 307, 767, 8872, 5, 51, 28431, 13, 50604], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 402, 'seek': 200508, 'start': 2009.8799999999999, 'end': 2015.76, 'text': ' So you can see that percent is being used before the register names.', 'tokens': [50604, 407, 291, 393, 536, 300, 3043, 307, 885, 1143, 949, 264, 7280, 5288, 13, 50898], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 403, 'seek': 200508, 'start': 2015.76, 'end': 2022.08, 'text': ' There are suffixes which are being used to indicate size.', 'tokens': [50898, 821, 366, 3889, 36005, 597, 366, 885, 1143, 281, 13330, 2744, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 404, 'seek': 200508, 'start': 2022.08, 'end': 2024.52, 'text': ' And source appears before destination.', 'tokens': [51214, 400, 4009, 7038, 949, 12236, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 405, 'seek': 200508, 'start': 2024.52, 'end': 2030.72, 'text': ' So this instruction is actually saying move content of EAX into ESI, not the other way', 'tokens': [51336, 407, 341, 10951, 307, 767, 1566, 1286, 2701, 295, 35747, 55, 666, 12564, 40, 11, 406, 264, 661, 636, 51646], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 406, 'seek': 200508, 'start': 2030.72, 'end': 2031.72, 'text': ' around.', 'tokens': [51646, 926, 13, 51696], 'temperature': 0.0, 'avg_logprob': -0.16297170443412584, 'compression_ratio': 1.5, 'no_speech_prob': 0.02755233272910118}, {'id': 407, 'seek': 203172, 'start': 2032.4, 'end': 2035.64, 'text': ' Now this is how your sample assembly program will look.', 'tokens': [50398, 823, 341, 307, 577, 428, 6889, 12103, 1461, 486, 574, 13, 50560], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 408, 'seek': 203172, 'start': 2035.64, 'end': 2038.68, 'text': ' You might have some data.', 'tokens': [50560, 509, 1062, 362, 512, 1412, 13, 50712], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 409, 'seek': 203172, 'start': 2038.68, 'end': 2043.94, 'text': ' And this dot byte is saying how much size it is occupying.', 'tokens': [50712, 400, 341, 5893, 40846, 307, 1566, 577, 709, 2744, 309, 307, 8073, 1840, 13, 50975], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 410, 'seek': 203172, 'start': 2043.94, 'end': 2047.6000000000001, 'text': ' So var is a 64 byte data.', 'tokens': [50975, 407, 1374, 307, 257, 12145, 40846, 1412, 13, 51158], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 411, 'seek': 203172, 'start': 2047.6000000000001, 'end': 2051.36, 'text': " So it's an array probably of 64 bytes.", 'tokens': [51158, 407, 309, 311, 364, 10225, 1391, 295, 12145, 36088, 13, 51346], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 412, 'seek': 203172, 'start': 2051.36, 'end': 2055.66, 'text': ' X is a word, array of words.', 'tokens': [51346, 1783, 307, 257, 1349, 11, 10225, 295, 2283, 13, 51561], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 413, 'seek': 203172, 'start': 2055.66, 'end': 2059.54, 'text': ' So it has three elements, one, two, and three.', 'tokens': [51561, 407, 309, 575, 1045, 4959, 11, 472, 11, 732, 11, 293, 1045, 13, 51755], 'temperature': 0.0, 'avg_logprob': -0.1681405977271069, 'compression_ratio': 1.5026737967914439, 'no_speech_prob': 0.017434649169445038}, {'id': 414, 'seek': 205954, 'start': 2059.54, 'end': 2064.14, 'text': ' And then I have text program, which is essentially the set of instructions.', 'tokens': [50364, 400, 550, 286, 362, 2487, 1461, 11, 597, 307, 4476, 264, 992, 295, 9415, 13, 50594], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 415, 'seek': 205954, 'start': 2064.14, 'end': 2069.86, 'text': ' And this is saying move the value of EBX is actually a pointer.', 'tokens': [50594, 400, 341, 307, 1566, 1286, 264, 2158, 295, 50148, 55, 307, 767, 257, 23918, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 416, 'seek': 205954, 'start': 2069.86, 'end': 2074.66, 'text': ' So whatever it is pointing to, move that value into EAX.', 'tokens': [50880, 407, 2035, 309, 307, 12166, 281, 11, 1286, 300, 2158, 666, 35747, 55, 13, 51120], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 417, 'seek': 205954, 'start': 2074.66, 'end': 2079.38, 'text': ' This is saying move two into that pointer value and jump.', 'tokens': [51120, 639, 307, 1566, 1286, 732, 666, 300, 23918, 2158, 293, 3012, 13, 51356], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 418, 'seek': 205954, 'start': 2079.38, 'end': 2083.06, 'text': ' Are we OK with this?', 'tokens': [51356, 2014, 321, 2264, 365, 341, 30, 51540], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 419, 'seek': 205954, 'start': 2083.06, 'end': 2089.1, 'text': ' So you need this much understanding to understand the rest of the slides.', 'tokens': [51540, 407, 291, 643, 341, 709, 3701, 281, 1223, 264, 1472, 295, 264, 9788, 13, 51842], 'temperature': 0.0, 'avg_logprob': -0.1576542854309082, 'compression_ratio': 1.661904761904762, 'no_speech_prob': 0.0038231632206588984}, {'id': 420, 'seek': 208910, 'start': 2089.7599999999998, 'end': 2096.46, 'text': ' The next part of this session is going to focus on how actually function calls are implemented.', 'tokens': [50397, 440, 958, 644, 295, 341, 5481, 307, 516, 281, 1879, 322, 577, 767, 2445, 5498, 366, 12270, 13, 50732], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 421, 'seek': 208910, 'start': 2096.46, 'end': 2102.44, 'text': ' So essentially, programming languages support creating abstraction of functions.', 'tokens': [50732, 407, 4476, 11, 9410, 8650, 1406, 4084, 37765, 295, 6828, 13, 51031], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 422, 'seek': 208910, 'start': 2102.44, 'end': 2108.24, 'text': ' So you can think of function as block of code, which is typically intended to do one or related', 'tokens': [51031, 407, 291, 393, 519, 295, 2445, 382, 3461, 295, 3089, 11, 597, 307, 5850, 10226, 281, 360, 472, 420, 4077, 51321], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 423, 'seek': 208910, 'start': 2108.24, 'end': 2109.24, 'text': ' task.', 'tokens': [51321, 5633, 13, 51371], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 424, 'seek': 208910, 'start': 2109.24, 'end': 2113.14, 'text': ' You write functions because you want reusability in your code.', 'tokens': [51371, 509, 2464, 6828, 570, 291, 528, 38860, 2310, 294, 428, 3089, 13, 51566], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 425, 'seek': 208910, 'start': 2113.14, 'end': 2118.22, 'text': ' So for example, if you have done linked list insert once, you can put it in a function', 'tokens': [51566, 407, 337, 1365, 11, 498, 291, 362, 1096, 9408, 1329, 8969, 1564, 11, 291, 393, 829, 309, 294, 257, 2445, 51820], 'temperature': 0.0, 'avg_logprob': -0.1316012549646122, 'compression_ratio': 1.712, 'no_speech_prob': 0.0003053130640182644}, {'id': 426, 'seek': 211822, 'start': 2118.2999999999997, 'end': 2123.66, 'text': " and call it multiple times and don't have to redo the same code again and again.", 'tokens': [50368, 293, 818, 309, 3866, 1413, 293, 500, 380, 362, 281, 29956, 264, 912, 3089, 797, 293, 797, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.1173687395842179, 'compression_ratio': 1.6753246753246753, 'no_speech_prob': 0.0027142923790961504}, {'id': 427, 'seek': 211822, 'start': 2123.66, 'end': 2126.98, 'text': ' So they provide you to write modular programs.', 'tokens': [50636, 407, 436, 2893, 291, 281, 2464, 31111, 4268, 13, 50802], 'temperature': 0.0, 'avg_logprob': -0.1173687395842179, 'compression_ratio': 1.6753246753246753, 'no_speech_prob': 0.0027142923790961504}, {'id': 428, 'seek': 211822, 'start': 2126.98, 'end': 2132.14, 'text': ' And typically, every function will have a name from which you will identify that function.', 'tokens': [50802, 400, 5850, 11, 633, 2445, 486, 362, 257, 1315, 490, 597, 291, 486, 5876, 300, 2445, 13, 51060], 'temperature': 0.0, 'avg_logprob': -0.1173687395842179, 'compression_ratio': 1.6753246753246753, 'no_speech_prob': 0.0027142923790961504}, {'id': 429, 'seek': 211822, 'start': 2132.14, 'end': 2138.9399999999996, 'text': ' It will have parameters which are used by function to actually do the computation.', 'tokens': [51060, 467, 486, 362, 9834, 597, 366, 1143, 538, 2445, 281, 767, 360, 264, 24903, 13, 51400], 'temperature': 0.0, 'avg_logprob': -0.1173687395842179, 'compression_ratio': 1.6753246753246753, 'no_speech_prob': 0.0027142923790961504}, {'id': 430, 'seek': 211822, 'start': 2138.9399999999996, 'end': 2146.4199999999996, 'text': ' So for example, if I want to compute power of two raised to five, so two and five can', 'tokens': [51400, 407, 337, 1365, 11, 498, 286, 528, 281, 14722, 1347, 295, 732, 6005, 281, 1732, 11, 370, 732, 293, 1732, 393, 51774], 'temperature': 0.0, 'avg_logprob': -0.1173687395842179, 'compression_ratio': 1.6753246753246753, 'no_speech_prob': 0.0027142923790961504}, {'id': 431, 'seek': 214642, 'start': 2146.5, 'end': 2150.38, 'text': " be parameters which dictate what should be the function's output.", 'tokens': [50368, 312, 9834, 597, 36071, 437, 820, 312, 264, 2445, 311, 5598, 13, 50562], 'temperature': 0.0, 'avg_logprob': -0.14924551719842954, 'compression_ratio': 1.7577092511013215, 'no_speech_prob': 0.002888340037316084}, {'id': 432, 'seek': 214642, 'start': 2150.38, 'end': 2155.14, 'text': ' And just like they have input parameters, there are written values.', 'tokens': [50562, 400, 445, 411, 436, 362, 4846, 9834, 11, 456, 366, 3720, 4190, 13, 50800], 'temperature': 0.0, 'avg_logprob': -0.14924551719842954, 'compression_ratio': 1.7577092511013215, 'no_speech_prob': 0.002888340037316084}, {'id': 433, 'seek': 214642, 'start': 2155.14, 'end': 2160.46, 'text': ' So typically, a computed value from a function can be written and function will have body,', 'tokens': [50800, 407, 5850, 11, 257, 40610, 2158, 490, 257, 2445, 393, 312, 3720, 293, 2445, 486, 362, 1772, 11, 51066], 'temperature': 0.0, 'avg_logprob': -0.14924551719842954, 'compression_ratio': 1.7577092511013215, 'no_speech_prob': 0.002888340037316084}, {'id': 434, 'seek': 214642, 'start': 2160.46, 'end': 2165.54, 'text': ' which essentially is set of instructions, which will actually do the computation.', 'tokens': [51066, 597, 4476, 307, 992, 295, 9415, 11, 597, 486, 767, 360, 264, 24903, 13, 51320], 'temperature': 0.0, 'avg_logprob': -0.14924551719842954, 'compression_ratio': 1.7577092511013215, 'no_speech_prob': 0.002888340037316084}, {'id': 435, 'seek': 214642, 'start': 2165.54, 'end': 2172.66, 'text': ' And function can have local variables to actually allocate memory and do some stuff with it.', 'tokens': [51320, 400, 2445, 393, 362, 2654, 9102, 281, 767, 35713, 4675, 293, 360, 512, 1507, 365, 309, 13, 51676], 'temperature': 0.0, 'avg_logprob': -0.14924551719842954, 'compression_ratio': 1.7577092511013215, 'no_speech_prob': 0.002888340037316084}, {'id': 436, 'seek': 217266, 'start': 2172.66, 'end': 2176.54, 'text': ' Now every function typically has a single entry point.', 'tokens': [50364, 823, 633, 2445, 5850, 575, 257, 2167, 8729, 935, 13, 50558], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 437, 'seek': 217266, 'start': 2176.54, 'end': 2182.1, 'text': ' So whenever you call a function, you always start at start of the function.', 'tokens': [50558, 407, 5699, 291, 818, 257, 2445, 11, 291, 1009, 722, 412, 722, 295, 264, 2445, 13, 50836], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 438, 'seek': 217266, 'start': 2182.1, 'end': 2188.02, 'text': ' And the caller function, the function which is calling is called caller, that will typically', 'tokens': [50836, 400, 264, 48324, 2445, 11, 264, 2445, 597, 307, 5141, 307, 1219, 48324, 11, 300, 486, 5850, 51132], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 439, 'seek': 217266, 'start': 2188.02, 'end': 2191.8999999999996, 'text': ' be suspended when the callee is being executed.', 'tokens': [51132, 312, 23437, 562, 264, 818, 1653, 307, 885, 17577, 13, 51326], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 440, 'seek': 217266, 'start': 2191.8999999999996, 'end': 2196.7799999999997, 'text': ' So whenever you call a function, the function which has called the other function will be', 'tokens': [51326, 407, 5699, 291, 818, 257, 2445, 11, 264, 2445, 597, 575, 1219, 264, 661, 2445, 486, 312, 51570], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 441, 'seek': 217266, 'start': 2196.7799999999997, 'end': 2201.74, 'text': ' suspended and the callee function will start executing.', 'tokens': [51570, 23437, 293, 264, 818, 1653, 2445, 486, 722, 32368, 13, 51818], 'temperature': 0.0, 'avg_logprob': -0.13357185810170275, 'compression_ratio': 2.183246073298429, 'no_speech_prob': 0.06750291585922241}, {'id': 442, 'seek': 220174, 'start': 2201.74, 'end': 2207.2599999999998, 'text': ' And once the callee function is done, it will return the control back to the caller and', 'tokens': [50364, 400, 1564, 264, 818, 1653, 2445, 307, 1096, 11, 309, 486, 2736, 264, 1969, 646, 281, 264, 48324, 293, 50640], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 443, 'seek': 220174, 'start': 2207.2599999999998, 'end': 2210.1, 'text': ' then caller will continue.', 'tokens': [50640, 550, 48324, 486, 2354, 13, 50782], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 444, 'seek': 220174, 'start': 2210.1, 'end': 2215.14, 'text': " So essentially, so let's say I had main, I call foo.", 'tokens': [50782, 407, 4476, 11, 370, 718, 311, 584, 286, 632, 2135, 11, 286, 818, 726, 78, 13, 51034], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 445, 'seek': 220174, 'start': 2215.14, 'end': 2217.5, 'text': ' So main is now suspended.', 'tokens': [51034, 407, 2135, 307, 586, 23437, 13, 51152], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 446, 'seek': 220174, 'start': 2217.5, 'end': 2219.66, 'text': ' Main is not actually executing.', 'tokens': [51152, 12383, 307, 406, 767, 32368, 13, 51260], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 447, 'seek': 220174, 'start': 2219.66, 'end': 2221.3399999999997, 'text': ' Foo will start executing.', 'tokens': [51260, 479, 1986, 486, 722, 32368, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 448, 'seek': 220174, 'start': 2221.3399999999997, 'end': 2225.2599999999998, 'text': ' Then foo might execute some instructions and then call a function bar.', 'tokens': [51344, 1396, 726, 78, 1062, 14483, 512, 9415, 293, 550, 818, 257, 2445, 2159, 13, 51540], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 449, 'seek': 220174, 'start': 2225.2599999999998, 'end': 2227.22, 'text': ' Then it might call foo bar.', 'tokens': [51540, 1396, 309, 1062, 818, 726, 78, 2159, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 450, 'seek': 220174, 'start': 2227.22, 'end': 2231.68, 'text': ' Then foo bar returns to the caller function.', 'tokens': [51638, 1396, 726, 78, 2159, 11247, 281, 264, 48324, 2445, 13, 51861], 'temperature': 0.0, 'avg_logprob': -0.16178477894176135, 'compression_ratio': 1.872037914691943, 'no_speech_prob': 0.0006877413252368569}, {'id': 451, 'seek': 223168, 'start': 2231.68, 'end': 2236.14, 'text': ' So a function will always return to its caller function.', 'tokens': [50364, 407, 257, 2445, 486, 1009, 2736, 281, 1080, 48324, 2445, 13, 50587], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 452, 'seek': 223168, 'start': 2236.14, 'end': 2240.22, 'text': ' And then bar will return to its caller function, ultimately to main.', 'tokens': [50587, 400, 550, 2159, 486, 2736, 281, 1080, 48324, 2445, 11, 6284, 281, 2135, 13, 50791], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 453, 'seek': 223168, 'start': 2240.22, 'end': 2245.66, 'text': ' And then main is again free to do another set of function calls.', 'tokens': [50791, 400, 550, 2135, 307, 797, 1737, 281, 360, 1071, 992, 295, 2445, 5498, 13, 51063], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 454, 'seek': 223168, 'start': 2245.66, 'end': 2250.64, 'text': ' This is how standard functions work in languages like C.', 'tokens': [51063, 639, 307, 577, 3832, 6828, 589, 294, 8650, 411, 383, 13, 51312], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 455, 'seek': 223168, 'start': 2250.64, 'end': 2254.74, 'text': ' Now there are alternative execution semantics also.', 'tokens': [51312, 823, 456, 366, 8535, 15058, 4361, 45298, 611, 13, 51517], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 456, 'seek': 223168, 'start': 2254.74, 'end': 2257.12, 'text': ' What we have seen is the standard function.', 'tokens': [51517, 708, 321, 362, 1612, 307, 264, 3832, 2445, 13, 51636], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 457, 'seek': 223168, 'start': 2257.12, 'end': 2259.0, 'text': ' But there is something called as co-routines.', 'tokens': [51636, 583, 456, 307, 746, 1219, 382, 598, 12, 81, 346, 1652, 13, 51730], 'temperature': 0.0, 'avg_logprob': -0.1315694252649943, 'compression_ratio': 1.7844036697247707, 'no_speech_prob': 0.00013763157767243683}, {'id': 458, 'seek': 225900, 'start': 2259.0, 'end': 2261.68, 'text': ' How many of you have heard of co-routines?', 'tokens': [50364, 1012, 867, 295, 291, 362, 2198, 295, 598, 12, 81, 346, 1652, 30, 50498], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 459, 'seek': 225900, 'start': 2261.68, 'end': 2266.88, 'text': ' Two people.', 'tokens': [50498, 4453, 561, 13, 50758], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 460, 'seek': 225900, 'start': 2266.88, 'end': 2275.44, 'text': ' So co-routines are essentially, you can think of them like some sort of resume and return', 'tokens': [50758, 407, 598, 12, 81, 346, 1652, 366, 4476, 11, 291, 393, 519, 295, 552, 411, 512, 1333, 295, 15358, 293, 2736, 51186], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 461, 'seek': 225900, 'start': 2275.44, 'end': 2277.08, 'text': ' kind of a control flow.', 'tokens': [51186, 733, 295, 257, 1969, 3095, 13, 51268], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 462, 'seek': 225900, 'start': 2277.08, 'end': 2285.32, 'text': ' So when you call a co-routine, you initially start at the start of the function.', 'tokens': [51268, 407, 562, 291, 818, 257, 598, 12, 81, 45075, 11, 291, 9105, 722, 412, 264, 722, 295, 264, 2445, 13, 51680], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 463, 'seek': 225900, 'start': 2285.32, 'end': 2288.64, 'text': ' And you can return to the caller function.', 'tokens': [51680, 400, 291, 393, 2736, 281, 264, 48324, 2445, 13, 51846], 'temperature': 0.0, 'avg_logprob': -0.18710881610249364, 'compression_ratio': 1.6878612716763006, 'no_speech_prob': 0.0229666605591774}, {'id': 464, 'seek': 228864, 'start': 2288.7599999999998, 'end': 2292.48, 'text': " When you are called again, you don't again start from the start.", 'tokens': [50370, 1133, 291, 366, 1219, 797, 11, 291, 500, 380, 797, 722, 490, 264, 722, 13, 50556], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 465, 'seek': 228864, 'start': 2292.48, 'end': 2297.56, 'text': ' But you start from the point where you were suspended earlier.', 'tokens': [50556, 583, 291, 722, 490, 264, 935, 689, 291, 645, 23437, 3071, 13, 50810], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 466, 'seek': 228864, 'start': 2297.56, 'end': 2301.6, 'text': " So it's more like a resume and suspend semantic.", 'tokens': [50810, 407, 309, 311, 544, 411, 257, 15358, 293, 42546, 47982, 13, 51012], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 467, 'seek': 228864, 'start': 2301.6, 'end': 2304.64, 'text': ' So the caller function will call it.', 'tokens': [51012, 407, 264, 48324, 2445, 486, 818, 309, 13, 51164], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 468, 'seek': 228864, 'start': 2304.64, 'end': 2307.24, 'text': ' Then co-routine will start executing.', 'tokens': [51164, 1396, 598, 12, 81, 45075, 486, 722, 32368, 13, 51294], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 469, 'seek': 228864, 'start': 2307.24, 'end': 2311.6, 'text': ' Then it will suspend for some time, return back the control to the caller.', 'tokens': [51294, 1396, 309, 486, 42546, 337, 512, 565, 11, 2736, 646, 264, 1969, 281, 264, 48324, 13, 51512], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 470, 'seek': 228864, 'start': 2311.6, 'end': 2316.56, 'text': ' And caller can again resume it from the point where it started.', 'tokens': [51512, 400, 48324, 393, 797, 15358, 309, 490, 264, 935, 689, 309, 1409, 13, 51760], 'temperature': 0.0, 'avg_logprob': -0.12080408096313476, 'compression_ratio': 1.8396226415094339, 'no_speech_prob': 0.003271820954978466}, {'id': 471, 'seek': 231656, 'start': 2316.56, 'end': 2319.48, 'text': " Just like C, don't support co-routines.", 'tokens': [50364, 1449, 411, 383, 11, 500, 380, 1406, 598, 12, 81, 346, 1652, 13, 50510], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 472, 'seek': 231656, 'start': 2319.48, 'end': 2323.2, 'text': ' Newer standards in C++ have added support for it.', 'tokens': [50510, 1873, 260, 7787, 294, 383, 25472, 362, 3869, 1406, 337, 309, 13, 50696], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 473, 'seek': 231656, 'start': 2323.2, 'end': 2327.0, 'text': ' But there is also something called as asynchronous execution.', 'tokens': [50696, 583, 456, 307, 611, 746, 1219, 382, 49174, 15058, 13, 50886], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 474, 'seek': 231656, 'start': 2327.0, 'end': 2332.96, 'text': ' Where what I said earlier is whenever caller function calls the callee function, caller', 'tokens': [50886, 2305, 437, 286, 848, 3071, 307, 5699, 48324, 2445, 5498, 264, 818, 1653, 2445, 11, 48324, 51184], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 475, 'seek': 231656, 'start': 2332.96, 'end': 2335.04, 'text': ' function is suspended.', 'tokens': [51184, 2445, 307, 23437, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 476, 'seek': 231656, 'start': 2335.04, 'end': 2339.04, 'text': ' But in asynchronous executions, that may not happen.', 'tokens': [51288, 583, 294, 49174, 4454, 3666, 11, 300, 815, 406, 1051, 13, 51488], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 477, 'seek': 231656, 'start': 2339.04, 'end': 2344.48, 'text': ' That means whenever caller function calls the callee function, both caller and callee', 'tokens': [51488, 663, 1355, 5699, 48324, 2445, 5498, 264, 818, 1653, 2445, 11, 1293, 48324, 293, 818, 1653, 51760], 'temperature': 0.0, 'avg_logprob': -0.21564806724081234, 'compression_ratio': 1.8915094339622642, 'no_speech_prob': 0.09799159318208694}, {'id': 478, 'seek': 234448, 'start': 2344.48, 'end': 2350.36, 'text': ' are still active and executing concurrently.', 'tokens': [50364, 366, 920, 4967, 293, 32368, 37702, 356, 13, 50658], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 479, 'seek': 234448, 'start': 2350.36, 'end': 2355.44, 'text': ' And then there is something in functional languages called as higher order functions,', 'tokens': [50658, 400, 550, 456, 307, 746, 294, 11745, 8650, 1219, 382, 2946, 1668, 6828, 11, 50912], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 480, 'seek': 234448, 'start': 2355.44, 'end': 2358.52, 'text': ' where you can return functions as values and so on.', 'tokens': [50912, 689, 291, 393, 2736, 6828, 382, 4190, 293, 370, 322, 13, 51066], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 481, 'seek': 234448, 'start': 2358.52, 'end': 2363.04, 'text': ' This will actually be covered in much more detail later this week when there is a module', 'tokens': [51066, 639, 486, 767, 312, 5343, 294, 709, 544, 2607, 1780, 341, 1243, 562, 456, 307, 257, 10088, 51292], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 482, 'seek': 234448, 'start': 2363.04, 'end': 2365.68, 'text': ' on functional programming.', 'tokens': [51292, 322, 11745, 9410, 13, 51424], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 483, 'seek': 234448, 'start': 2365.68, 'end': 2371.44, 'text': ' So all these semantics which I just mentioned are out of scope for this module.', 'tokens': [51424, 407, 439, 613, 4361, 45298, 597, 286, 445, 2835, 366, 484, 295, 11923, 337, 341, 10088, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 484, 'seek': 234448, 'start': 2371.44, 'end': 2373.88, 'text': ' So we are not going to talk about how co-routines work.', 'tokens': [51712, 407, 321, 366, 406, 516, 281, 751, 466, 577, 598, 12, 81, 346, 1652, 589, 13, 51834], 'temperature': 0.0, 'avg_logprob': -0.12685205404040883, 'compression_ratio': 1.682170542635659, 'no_speech_prob': 0.07579794526100159}, {'id': 485, 'seek': 237388, 'start': 2373.88, 'end': 2376.84, 'text': ' We are not going to talk about how concurrency works.', 'tokens': [50364, 492, 366, 406, 516, 281, 751, 466, 577, 23702, 10457, 1985, 13, 50512], 'temperature': 0.0, 'avg_logprob': -0.12277855524202673, 'compression_ratio': 1.6350710900473933, 'no_speech_prob': 0.0038225138559937477}, {'id': 486, 'seek': 237388, 'start': 2376.84, 'end': 2381.48, 'text': ' And some higher order functions will actually be covered in this next session.', 'tokens': [50512, 400, 512, 2946, 1668, 6828, 486, 767, 312, 5343, 294, 341, 958, 5481, 13, 50744], 'temperature': 0.0, 'avg_logprob': -0.12277855524202673, 'compression_ratio': 1.6350710900473933, 'no_speech_prob': 0.0038225138559937477}, {'id': 487, 'seek': 237388, 'start': 2381.48, 'end': 2388.44, 'text': ' So we will stick to the details of how traditional function calls are implemented.', 'tokens': [50744, 407, 321, 486, 2897, 281, 264, 4365, 295, 577, 5164, 2445, 5498, 366, 12270, 13, 51092], 'temperature': 0.0, 'avg_logprob': -0.12277855524202673, 'compression_ratio': 1.6350710900473933, 'no_speech_prob': 0.0038225138559937477}, {'id': 488, 'seek': 237388, 'start': 2388.44, 'end': 2393.02, 'text': ' So what is needed to implement a function call?', 'tokens': [51092, 407, 437, 307, 2978, 281, 4445, 257, 2445, 818, 30, 51321], 'temperature': 0.0, 'avg_logprob': -0.12277855524202673, 'compression_ratio': 1.6350710900473933, 'no_speech_prob': 0.0038225138559937477}, {'id': 489, 'seek': 237388, 'start': 2393.02, 'end': 2399.48, 'text': ' So here I have a sample code which is saying that main is calling a function foo.', 'tokens': [51321, 407, 510, 286, 362, 257, 6889, 3089, 597, 307, 1566, 300, 2135, 307, 5141, 257, 2445, 726, 78, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.12277855524202673, 'compression_ratio': 1.6350710900473933, 'no_speech_prob': 0.0038225138559937477}, {'id': 490, 'seek': 239948, 'start': 2400.0, 'end': 2409.72, 'text': ' Main passes a parameter p which is accepted as m and then foo can have local variables', 'tokens': [50390, 12383, 11335, 257, 13075, 280, 597, 307, 9035, 382, 275, 293, 550, 726, 78, 393, 362, 2654, 9102, 50876], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 491, 'seek': 239948, 'start': 2409.72, 'end': 2414.72, 'text': ' and return a value which can then be used by main.', 'tokens': [50876, 293, 2736, 257, 2158, 597, 393, 550, 312, 1143, 538, 2135, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 492, 'seek': 239948, 'start': 2414.72, 'end': 2421.36, 'text': ' So what all things you think are involved in a function call?', 'tokens': [51126, 407, 437, 439, 721, 291, 519, 366, 3288, 294, 257, 2445, 818, 30, 51458], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 493, 'seek': 239948, 'start': 2421.36, 'end': 2423.36, 'text': ' What all is needed?', 'tokens': [51458, 708, 439, 307, 2978, 30, 51558], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 494, 'seek': 239948, 'start': 2423.36, 'end': 2424.36, 'text': ' Yes?', 'tokens': [51558, 1079, 30, 51608], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 495, 'seek': 239948, 'start': 2424.36, 'end': 2425.36, 'text': ' Sorry.', 'tokens': [51608, 4919, 13, 51658], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 496, 'seek': 239948, 'start': 2425.36, 'end': 2426.36, 'text': ' Return address is 1.', 'tokens': [51658, 24350, 2985, 307, 502, 13, 51708], 'temperature': 0.0, 'avg_logprob': -0.32753839884718805, 'compression_ratio': 1.4482758620689655, 'no_speech_prob': 0.3480517864227295}, {'id': 497, 'seek': 242636, 'start': 2426.36, 'end': 2427.36, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 498, 'seek': 242636, 'start': 2427.36, 'end': 2434.36, 'text': ' There is some need to be able to pass parameters.', 'tokens': [50414, 821, 307, 512, 643, 281, 312, 1075, 281, 1320, 9834, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 499, 'seek': 242636, 'start': 2434.36, 'end': 2435.36, 'text': ' Yes?', 'tokens': [50764, 1079, 30, 50814], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 500, 'seek': 242636, 'start': 2435.36, 'end': 2436.36, 'text': ' Correct.', 'tokens': [50814, 12753, 13, 50864], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 501, 'seek': 242636, 'start': 2436.36, 'end': 2446.96, 'text': ' So you need some way to say what was the state of the caller.', 'tokens': [50864, 407, 291, 643, 512, 636, 281, 584, 437, 390, 264, 1785, 295, 264, 48324, 13, 51394], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 502, 'seek': 242636, 'start': 2446.96, 'end': 2449.0, 'text': ' Any other things?', 'tokens': [51394, 2639, 661, 721, 30, 51496], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 503, 'seek': 242636, 'start': 2449.0, 'end': 2453.78, 'text': ' Return value.', 'tokens': [51496, 24350, 2158, 13, 51735], 'temperature': 0.0, 'avg_logprob': -0.33980418118563566, 'compression_ratio': 1.3387096774193548, 'no_speech_prob': 0.007043381687253714}, {'id': 504, 'seek': 245378, 'start': 2453.78, 'end': 2458.7400000000002, 'text': ' So essentially we need some way to transfer the control from caller to callee and this', 'tokens': [50364, 407, 4476, 321, 643, 512, 636, 281, 5003, 264, 1969, 490, 48324, 281, 818, 1653, 293, 341, 50612], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 505, 'seek': 245378, 'start': 2458.7400000000002, 'end': 2463.7000000000003, 'text': ' will involve return address because you somehow need to get back to the caller.', 'tokens': [50612, 486, 9494, 2736, 2985, 570, 291, 6063, 643, 281, 483, 646, 281, 264, 48324, 13, 50860], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 506, 'seek': 245378, 'start': 2463.7000000000003, 'end': 2468.52, 'text': ' You need some way to pass the parameters and get the return value.', 'tokens': [50860, 509, 643, 512, 636, 281, 1320, 264, 9834, 293, 483, 264, 2736, 2158, 13, 51101], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 507, 'seek': 245378, 'start': 2468.52, 'end': 2474.8, 'text': ' You need some way for the callee function to create its own local variables.', 'tokens': [51101, 509, 643, 512, 636, 337, 264, 818, 1653, 2445, 281, 1884, 1080, 1065, 2654, 9102, 13, 51415], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 508, 'seek': 245378, 'start': 2474.8, 'end': 2479.6000000000004, 'text': ' And you need some way to do register usage which is essentially the context what you', 'tokens': [51415, 400, 291, 643, 512, 636, 281, 360, 7280, 14924, 597, 307, 4476, 264, 4319, 437, 291, 51655], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 509, 'seek': 245378, 'start': 2479.6000000000004, 'end': 2481.5800000000004, 'text': ' are talking about.', 'tokens': [51655, 366, 1417, 466, 13, 51754], 'temperature': 0.0, 'avg_logprob': -0.1196662684281667, 'compression_ratio': 1.831858407079646, 'no_speech_prob': 0.015892626717686653}, {'id': 510, 'seek': 248158, 'start': 2481.58, 'end': 2487.4, 'text': ' So we will go into details of each of these steps and how they are implemented.', 'tokens': [50364, 407, 321, 486, 352, 666, 4365, 295, 1184, 295, 613, 4439, 293, 577, 436, 366, 12270, 13, 50655], 'temperature': 0.0, 'avg_logprob': -0.14118339590830345, 'compression_ratio': 1.7105263157894737, 'no_speech_prob': 0.027565518394112587}, {'id': 511, 'seek': 248158, 'start': 2487.4, 'end': 2495.64, 'text': ' So the transferring control mechanism essentially requires when the caller is executed, when', 'tokens': [50655, 407, 264, 31437, 1969, 7513, 4476, 7029, 562, 264, 48324, 307, 17577, 11, 562, 51067], 'temperature': 0.0, 'avg_logprob': -0.14118339590830345, 'compression_ratio': 1.7105263157894737, 'no_speech_prob': 0.027565518394112587}, {'id': 512, 'seek': 248158, 'start': 2495.64, 'end': 2500.7599999999998, 'text': ' the caller function calls a function, somehow the transfer needs to happen from caller to', 'tokens': [51067, 264, 48324, 2445, 5498, 257, 2445, 11, 6063, 264, 5003, 2203, 281, 1051, 490, 48324, 281, 51323], 'temperature': 0.0, 'avg_logprob': -0.14118339590830345, 'compression_ratio': 1.7105263157894737, 'no_speech_prob': 0.027565518394112587}, {'id': 513, 'seek': 248158, 'start': 2500.7599999999998, 'end': 2507.12, 'text': ' callee and once the call is done, somehow we need to get back.', 'tokens': [51323, 818, 1653, 293, 1564, 264, 818, 307, 1096, 11, 6063, 321, 643, 281, 483, 646, 13, 51641], 'temperature': 0.0, 'avg_logprob': -0.14118339590830345, 'compression_ratio': 1.7105263157894737, 'no_speech_prob': 0.027565518394112587}, {'id': 514, 'seek': 250712, 'start': 2507.12, 'end': 2513.2999999999997, 'text': ' So most of the processors have instructions like branch and jump where they say that once', 'tokens': [50364, 407, 881, 295, 264, 27751, 362, 9415, 411, 9819, 293, 3012, 689, 436, 584, 300, 1564, 50673], 'temperature': 0.0, 'avg_logprob': -0.1376794398516074, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.10078031569719315}, {'id': 515, 'seek': 250712, 'start': 2513.2999999999997, 'end': 2518.4, 'text': ' the branch is done, it will start executing from that program counter.', 'tokens': [50673, 264, 9819, 307, 1096, 11, 309, 486, 722, 32368, 490, 300, 1461, 5682, 13, 50928], 'temperature': 0.0, 'avg_logprob': -0.1376794398516074, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.10078031569719315}, {'id': 516, 'seek': 250712, 'start': 2518.4, 'end': 2522.9, 'text': ' So we can very easily implement function call using that.', 'tokens': [50928, 407, 321, 393, 588, 3612, 4445, 2445, 818, 1228, 300, 13, 51153], 'temperature': 0.0, 'avg_logprob': -0.1376794398516074, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.10078031569719315}, {'id': 517, 'seek': 250712, 'start': 2522.9, 'end': 2527.98, 'text': ' So x86 has an instruction called jump which we can use.', 'tokens': [51153, 407, 2031, 22193, 575, 364, 10951, 1219, 3012, 597, 321, 393, 764, 13, 51407], 'temperature': 0.0, 'avg_logprob': -0.1376794398516074, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.10078031569719315}, {'id': 518, 'seek': 250712, 'start': 2527.98, 'end': 2537.02, 'text': ' So essentially in main I am calling a function foo and I can simply do jump to foo.', 'tokens': [51407, 407, 4476, 294, 2135, 286, 669, 5141, 257, 2445, 726, 78, 293, 286, 393, 2935, 360, 3012, 281, 726, 78, 13, 51859], 'temperature': 0.0, 'avg_logprob': -0.1376794398516074, 'compression_ratio': 1.6497695852534562, 'no_speech_prob': 0.10078031569719315}, {'id': 519, 'seek': 253702, 'start': 2537.02, 'end': 2538.36, 'text': ' That is sufficient.', 'tokens': [50364, 663, 307, 11563, 13, 50431], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 520, 'seek': 253702, 'start': 2538.36, 'end': 2544.84, 'text': ' I can simply say jump to foo and that will jump to foo and start executing that.', 'tokens': [50431, 286, 393, 2935, 584, 3012, 281, 726, 78, 293, 300, 486, 3012, 281, 726, 78, 293, 722, 32368, 300, 13, 50755], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 521, 'seek': 253702, 'start': 2544.84, 'end': 2549.64, 'text': ' But how do we get back to the caller?', 'tokens': [50755, 583, 577, 360, 321, 483, 646, 281, 264, 48324, 30, 50995], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 522, 'seek': 253702, 'start': 2549.64, 'end': 2554.2599999999998, 'text': ' So how does callee know where we need to return to?', 'tokens': [50995, 407, 577, 775, 818, 1653, 458, 689, 321, 643, 281, 2736, 281, 30, 51226], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 523, 'seek': 253702, 'start': 2554.2599999999998, 'end': 2560.88, 'text': ' Any idea?', 'tokens': [51226, 2639, 1558, 30, 51557], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 524, 'seek': 253702, 'start': 2560.88, 'end': 2566.78, 'text': ' So it needs to return to the next instruction following the call.', 'tokens': [51557, 407, 309, 2203, 281, 2736, 281, 264, 958, 10951, 3480, 264, 818, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.1597610820423473, 'compression_ratio': 1.5833333333333333, 'no_speech_prob': 0.0010642512934282422}, {'id': 525, 'seek': 256678, 'start': 2566.78, 'end': 2573.86, 'text': ' So we can save that address somehow where we need to return to and use that saved address', 'tokens': [50364, 407, 321, 393, 3155, 300, 2985, 6063, 689, 321, 643, 281, 2736, 281, 293, 764, 300, 6624, 2985, 50718], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 526, 'seek': 256678, 'start': 2573.86, 'end': 2574.86, 'text': ' to jump back.', 'tokens': [50718, 281, 3012, 646, 13, 50768], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 527, 'seek': 256678, 'start': 2574.86, 'end': 2579.9, 'text': ' So we know that when the function call happened, we need to come back to the next instruction', 'tokens': [50768, 407, 321, 458, 300, 562, 264, 2445, 818, 2011, 11, 321, 643, 281, 808, 646, 281, 264, 958, 10951, 51020], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 528, 'seek': 256678, 'start': 2579.9, 'end': 2583.2400000000002, 'text': ' following call instruction.', 'tokens': [51020, 3480, 818, 10951, 13, 51187], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 529, 'seek': 256678, 'start': 2583.2400000000002, 'end': 2589.3, 'text': ' So we save that address and we do all the function which is being called and come back', 'tokens': [51187, 407, 321, 3155, 300, 2985, 293, 321, 360, 439, 264, 2445, 597, 307, 885, 1219, 293, 808, 646, 51490], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 530, 'seek': 256678, 'start': 2589.3, 'end': 2592.6800000000003, 'text': ' to the address which was saved.', 'tokens': [51490, 281, 264, 2985, 597, 390, 6624, 13, 51659], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 531, 'seek': 256678, 'start': 2592.6800000000003, 'end': 2596.1000000000004, 'text': ' Which address really we already answered?', 'tokens': [51659, 3013, 2985, 534, 321, 1217, 10103, 30, 51830], 'temperature': 0.0, 'avg_logprob': -0.16007025523852275, 'compression_ratio': 1.9108910891089108, 'no_speech_prob': 0.0023212390951812267}, {'id': 532, 'seek': 259610, 'start': 2596.1, 'end': 2598.72, 'text': ' And where to save it?', 'tokens': [50364, 400, 689, 281, 3155, 309, 30, 50495], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 533, 'seek': 259610, 'start': 2598.72, 'end': 2599.72, 'text': ' You are jumping ahead.', 'tokens': [50495, 509, 366, 11233, 2286, 13, 50545], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 534, 'seek': 259610, 'start': 2599.72, 'end': 2606.6, 'text': ' We will get there step by step and I will show you why stack makes most sense.', 'tokens': [50545, 492, 486, 483, 456, 1823, 538, 1823, 293, 286, 486, 855, 291, 983, 8630, 1669, 881, 2020, 13, 50889], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 535, 'seek': 259610, 'start': 2606.6, 'end': 2612.2, 'text': " So why can't we simply do, why do we even need to save the address?", 'tokens': [50889, 407, 983, 393, 380, 321, 2935, 360, 11, 983, 360, 321, 754, 643, 281, 3155, 264, 2985, 30, 51169], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 536, 'seek': 259610, 'start': 2612.2, 'end': 2614.08, 'text': " Why can't we simply jump back to the address?", 'tokens': [51169, 1545, 393, 380, 321, 2935, 3012, 646, 281, 264, 2985, 30, 51263], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 537, 'seek': 259610, 'start': 2614.08, 'end': 2621.4, 'text': ' So for example, I know that JMP is at location this.', 'tokens': [51263, 407, 337, 1365, 11, 286, 458, 300, 508, 12224, 307, 412, 4914, 341, 13, 51629], 'temperature': 0.0, 'avg_logprob': -0.18644055654836256, 'compression_ratio': 1.5508021390374331, 'no_speech_prob': 0.012807520106434822}, {'id': 538, 'seek': 262140, 'start': 2621.48, 'end': 2627.44, 'text': ' In foo, I can simply say jump to this location which is the instruction following it.', 'tokens': [50368, 682, 726, 78, 11, 286, 393, 2935, 584, 3012, 281, 341, 4914, 597, 307, 264, 10951, 3480, 309, 13, 50666], 'temperature': 0.0, 'avg_logprob': -0.23987868337920218, 'compression_ratio': 1.4722222222222223, 'no_speech_prob': 0.16821077466011047}, {'id': 539, 'seek': 262140, 'start': 2627.44, 'end': 2629.7200000000003, 'text': ' I can do that.', 'tokens': [50666, 286, 393, 360, 300, 13, 50780], 'temperature': 0.0, 'avg_logprob': -0.23987868337920218, 'compression_ratio': 1.4722222222222223, 'no_speech_prob': 0.16821077466011047}, {'id': 540, 'seek': 262140, 'start': 2629.7200000000003, 'end': 2635.7400000000002, 'text': ' Here I said jump to foo and in foo I said jump to this address.', 'tokens': [50780, 1692, 286, 848, 3012, 281, 726, 78, 293, 294, 726, 78, 286, 848, 3012, 281, 341, 2985, 13, 51081], 'temperature': 0.0, 'avg_logprob': -0.23987868337920218, 'compression_ratio': 1.4722222222222223, 'no_speech_prob': 0.16821077466011047}, {'id': 541, 'seek': 262140, 'start': 2635.7400000000002, 'end': 2640.1800000000003, 'text': ' Will this work?', 'tokens': [51081, 3099, 341, 589, 30, 51303], 'temperature': 0.0, 'avg_logprob': -0.23987868337920218, 'compression_ratio': 1.4722222222222223, 'no_speech_prob': 0.16821077466011047}, {'id': 542, 'seek': 262140, 'start': 2640.1800000000003, 'end': 2645.2200000000003, 'text': ' Why it will not make any sense?', 'tokens': [51303, 1545, 309, 486, 406, 652, 604, 2020, 30, 51555], 'temperature': 0.0, 'avg_logprob': -0.23987868337920218, 'compression_ratio': 1.4722222222222223, 'no_speech_prob': 0.16821077466011047}, {'id': 543, 'seek': 264522, 'start': 2645.22, 'end': 2653.0, 'text': ' So one of the issues with this is essentially it will always return to the same address.', 'tokens': [50364, 407, 472, 295, 264, 2663, 365, 341, 307, 4476, 309, 486, 1009, 2736, 281, 264, 912, 2985, 13, 50753], 'temperature': 0.0, 'avg_logprob': -0.14683813797800163, 'compression_ratio': 1.641025641025641, 'no_speech_prob': 0.014935578219592571}, {'id': 544, 'seek': 264522, 'start': 2653.0, 'end': 2660.9599999999996, 'text': ' So you cannot call this function multiple times because remember the semantics were', 'tokens': [50753, 407, 291, 2644, 818, 341, 2445, 3866, 1413, 570, 1604, 264, 4361, 45298, 645, 51151], 'temperature': 0.0, 'avg_logprob': -0.14683813797800163, 'compression_ratio': 1.641025641025641, 'no_speech_prob': 0.014935578219592571}, {'id': 545, 'seek': 264522, 'start': 2660.9599999999996, 'end': 2666.5, 'text': ' from the point where it is called, you need to return to the instruction following it.', 'tokens': [51151, 490, 264, 935, 689, 309, 307, 1219, 11, 291, 643, 281, 2736, 281, 264, 10951, 3480, 309, 13, 51428], 'temperature': 0.0, 'avg_logprob': -0.14683813797800163, 'compression_ratio': 1.641025641025641, 'no_speech_prob': 0.014935578219592571}, {'id': 546, 'seek': 264522, 'start': 2666.5, 'end': 2671.08, 'text': ' If I do it this way, I will always jump back to the address.', 'tokens': [51428, 759, 286, 360, 309, 341, 636, 11, 286, 486, 1009, 3012, 646, 281, 264, 2985, 13, 51657], 'temperature': 0.0, 'avg_logprob': -0.14683813797800163, 'compression_ratio': 1.641025641025641, 'no_speech_prob': 0.014935578219592571}, {'id': 547, 'seek': 267108, 'start': 2671.08, 'end': 2678.84, 'text': ' So if this function was called only once, if foo was called only once, this is actually', 'tokens': [50364, 407, 498, 341, 2445, 390, 1219, 787, 1564, 11, 498, 726, 78, 390, 1219, 787, 1564, 11, 341, 307, 767, 50752], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 548, 'seek': 267108, 'start': 2678.84, 'end': 2681.1, 'text': ' something which will work.', 'tokens': [50752, 746, 597, 486, 589, 13, 50865], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 549, 'seek': 267108, 'start': 2681.1, 'end': 2683.14, 'text': ' So it is not a problem.', 'tokens': [50865, 407, 309, 307, 406, 257, 1154, 13, 50967], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 550, 'seek': 267108, 'start': 2683.14, 'end': 2686.16, 'text': ' It just that it is not general purpose.', 'tokens': [50967, 467, 445, 300, 309, 307, 406, 2674, 4334, 13, 51118], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 551, 'seek': 267108, 'start': 2686.16, 'end': 2693.38, 'text': ' So if compiler could prove that this function is called only once, compiler is fairly, compiler', 'tokens': [51118, 407, 498, 31958, 727, 7081, 300, 341, 2445, 307, 1219, 787, 1564, 11, 31958, 307, 6457, 11, 31958, 51479], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 552, 'seek': 267108, 'start': 2693.38, 'end': 2699.3199999999997, 'text': ' is legal to do this optimization where it can simply say that jump back to this address', 'tokens': [51479, 307, 5089, 281, 360, 341, 19618, 689, 309, 393, 2935, 584, 300, 3012, 646, 281, 341, 2985, 51776], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 553, 'seek': 267108, 'start': 2699.3199999999997, 'end': 2700.52, 'text': ' and you are done.', 'tokens': [51776, 293, 291, 366, 1096, 13, 51836], 'temperature': 0.0, 'avg_logprob': -0.12488431045689534, 'compression_ratio': 1.8181818181818181, 'no_speech_prob': 0.04082277789711952}, {'id': 554, 'seek': 270052, 'start': 2700.52, 'end': 2703.16, 'text': ' You do not need anything else.', 'tokens': [50364, 509, 360, 406, 643, 1340, 1646, 13, 50496], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 555, 'seek': 270052, 'start': 2703.16, 'end': 2705.92, 'text': ' And that is where visibility comes into picture.', 'tokens': [50496, 400, 300, 307, 689, 19883, 1487, 666, 3036, 13, 50634], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 556, 'seek': 270052, 'start': 2705.92, 'end': 2710.52, 'text': ' So for example, if foo was defined in other file, will compiler ever know whether it is', 'tokens': [50634, 407, 337, 1365, 11, 498, 726, 78, 390, 7642, 294, 661, 3991, 11, 486, 31958, 1562, 458, 1968, 309, 307, 50864], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 557, 'seek': 270052, 'start': 2710.52, 'end': 2713.16, 'text': ' called only once or multiple times?', 'tokens': [50864, 1219, 787, 1564, 420, 3866, 1413, 30, 50996], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 558, 'seek': 270052, 'start': 2713.16, 'end': 2714.16, 'text': ' No.', 'tokens': [50996, 883, 13, 51046], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 559, 'seek': 270052, 'start': 2714.16, 'end': 2719.28, 'text': ' So by putting things together, you increase the visibility of compiler, but you obviously', 'tokens': [51046, 407, 538, 3372, 721, 1214, 11, 291, 3488, 264, 19883, 295, 31958, 11, 457, 291, 2745, 51302], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 560, 'seek': 270052, 'start': 2719.28, 'end': 2721.04, 'text': ' have other disadvantages.', 'tokens': [51302, 362, 661, 37431, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 561, 'seek': 270052, 'start': 2721.04, 'end': 2723.8, 'text': ' So you will have to trade off.', 'tokens': [51390, 407, 291, 486, 362, 281, 4923, 766, 13, 51528], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 562, 'seek': 270052, 'start': 2723.8, 'end': 2726.28, 'text': ' What is the other disadvantage of this?', 'tokens': [51528, 708, 307, 264, 661, 24292, 295, 341, 30, 51652], 'temperature': 0.0, 'avg_logprob': -0.17595234483775526, 'compression_ratio': 1.6624472573839661, 'no_speech_prob': 0.01639273390173912}, {'id': 563, 'seek': 272628, 'start': 2726.28, 'end': 2731.78, 'text': ' So that is one disadvantage that we cannot call this function from different locations.', 'tokens': [50364, 407, 300, 307, 472, 24292, 300, 321, 2644, 818, 341, 2445, 490, 819, 9253, 13, 50639], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 564, 'seek': 272628, 'start': 2731.78, 'end': 2735.6800000000003, 'text': ' Any other issues with this?', 'tokens': [50639, 2639, 661, 2663, 365, 341, 30, 50834], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 565, 'seek': 272628, 'start': 2735.6800000000003, 'end': 2739.84, 'text': ' Sorry, someone said something.', 'tokens': [50834, 4919, 11, 1580, 848, 746, 13, 51042], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 566, 'seek': 272628, 'start': 2739.84, 'end': 2741.88, 'text': ' Recursion, correct.', 'tokens': [51042, 9647, 2156, 313, 11, 3006, 13, 51144], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 567, 'seek': 272628, 'start': 2741.88, 'end': 2745.1000000000004, 'text': ' So this will actually also not work in recursion.', 'tokens': [51144, 407, 341, 486, 767, 611, 406, 589, 294, 20560, 313, 13, 51305], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 568, 'seek': 272628, 'start': 2745.1000000000004, 'end': 2747.2000000000003, 'text': ' Why will it not work in recursion?', 'tokens': [51305, 1545, 486, 309, 406, 589, 294, 20560, 313, 30, 51410], 'temperature': 0.0, 'avg_logprob': -0.32005218961345616, 'compression_ratio': 1.56875, 'no_speech_prob': 0.3254518508911133}, {'id': 569, 'seek': 274720, 'start': 2747.2, 'end': 2753.3599999999997, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50672], 'temperature': 0.0, 'avg_logprob': -0.14613932873829302, 'compression_ratio': 1.824468085106383, 'no_speech_prob': 0.006093211472034454}, {'id': 570, 'seek': 274720, 'start': 2753.3599999999997, 'end': 2760.16, 'text': ' In fact, recursion has at least two call points, one from the main from where it is called', 'tokens': [50672, 682, 1186, 11, 20560, 313, 575, 412, 1935, 732, 818, 2793, 11, 472, 490, 264, 2135, 490, 689, 309, 307, 1219, 51012], 'temperature': 0.0, 'avg_logprob': -0.14613932873829302, 'compression_ratio': 1.824468085106383, 'no_speech_prob': 0.006093211472034454}, {'id': 571, 'seek': 274720, 'start': 2760.16, 'end': 2764.08, 'text': ' and one probably within the function where it is doing a recursive call.', 'tokens': [51012, 293, 472, 1391, 1951, 264, 2445, 689, 309, 307, 884, 257, 20560, 488, 818, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.14613932873829302, 'compression_ratio': 1.824468085106383, 'no_speech_prob': 0.006093211472034454}, {'id': 572, 'seek': 274720, 'start': 2764.08, 'end': 2769.2799999999997, 'text': ' So it kind of falls into the same thing that a recursive function will be called multiple', 'tokens': [51208, 407, 309, 733, 295, 8804, 666, 264, 912, 551, 300, 257, 20560, 488, 2445, 486, 312, 1219, 3866, 51468], 'temperature': 0.0, 'avg_logprob': -0.14613932873829302, 'compression_ratio': 1.824468085106383, 'no_speech_prob': 0.006093211472034454}, {'id': 573, 'seek': 274720, 'start': 2769.2799999999997, 'end': 2775.64, 'text': ' times, once from the original caller and once probably from within the function.', 'tokens': [51468, 1413, 11, 1564, 490, 264, 3380, 48324, 293, 1564, 1391, 490, 1951, 264, 2445, 13, 51786], 'temperature': 0.0, 'avg_logprob': -0.14613932873829302, 'compression_ratio': 1.824468085106383, 'no_speech_prob': 0.006093211472034454}, {'id': 574, 'seek': 277564, 'start': 2775.64, 'end': 2778.66, 'text': ' So it has to return to two different points.', 'tokens': [50364, 407, 309, 575, 281, 2736, 281, 732, 819, 2793, 13, 50515], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 575, 'seek': 277564, 'start': 2778.66, 'end': 2780.96, 'text': ' So that does not work.', 'tokens': [50515, 407, 300, 775, 406, 589, 13, 50630], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 576, 'seek': 277564, 'start': 2780.96, 'end': 2784.8799999999997, 'text': ' Now let us say I store it in a global variable.', 'tokens': [50630, 823, 718, 505, 584, 286, 3531, 309, 294, 257, 4338, 7006, 13, 50826], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 577, 'seek': 277564, 'start': 2784.8799999999997, 'end': 2793.12, 'text': ' So I create a global variable and before I do a call, I save the address of next instruction', 'tokens': [50826, 407, 286, 1884, 257, 4338, 7006, 293, 949, 286, 360, 257, 818, 11, 286, 3155, 264, 2985, 295, 958, 10951, 51238], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 578, 'seek': 277564, 'start': 2793.12, 'end': 2796.2799999999997, 'text': ' into the global variable.', 'tokens': [51238, 666, 264, 4338, 7006, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 579, 'seek': 277564, 'start': 2796.2799999999997, 'end': 2801.62, 'text': ' And in this function, I return to the content of that global variable.', 'tokens': [51396, 400, 294, 341, 2445, 11, 286, 2736, 281, 264, 2701, 295, 300, 4338, 7006, 13, 51663], 'temperature': 0.0, 'avg_logprob': -0.14076204997737232, 'compression_ratio': 1.7039106145251397, 'no_speech_prob': 0.11575806885957718}, {'id': 580, 'seek': 280162, 'start': 2801.62, 'end': 2806.62, 'text': ' So if there were multiple calls, just before the call, I will update the value of global', 'tokens': [50364, 407, 498, 456, 645, 3866, 5498, 11, 445, 949, 264, 818, 11, 286, 486, 5623, 264, 2158, 295, 4338, 50614], 'temperature': 0.0, 'avg_logprob': -0.37405956034757654, 'compression_ratio': 1.2913385826771653, 'no_speech_prob': 0.1285679191350937}, {'id': 581, 'seek': 280162, 'start': 2806.62, 'end': 2809.62, 'text': ' variable and save it.', 'tokens': [50614, 7006, 293, 3155, 309, 13, 50764], 'temperature': 0.0, 'avg_logprob': -0.37405956034757654, 'compression_ratio': 1.2913385826771653, 'no_speech_prob': 0.1285679191350937}, {'id': 582, 'seek': 280162, 'start': 2809.62, 'end': 2812.62, 'text': ' Will this work?', 'tokens': [50764, 3099, 341, 589, 30, 50914], 'temperature': 0.0, 'avg_logprob': -0.37405956034757654, 'compression_ratio': 1.2913385826771653, 'no_speech_prob': 0.1285679191350937}, {'id': 583, 'seek': 280162, 'start': 2812.62, 'end': 2815.62, 'text': ' Why?', 'tokens': [50914, 1545, 30, 51064], 'temperature': 0.0, 'avg_logprob': -0.37405956034757654, 'compression_ratio': 1.2913385826771653, 'no_speech_prob': 0.1285679191350937}, {'id': 584, 'seek': 280162, 'start': 2815.62, 'end': 2826.38, 'text': ' Lot of variables is one problem.', 'tokens': [51064, 20131, 295, 9102, 307, 472, 1154, 13, 51602], 'temperature': 0.0, 'avg_logprob': -0.37405956034757654, 'compression_ratio': 1.2913385826771653, 'no_speech_prob': 0.1285679191350937}, {'id': 585, 'seek': 282638, 'start': 2827.38, 'end': 2834.42, 'text': ' So how many variables you need?', 'tokens': [50414, 407, 577, 867, 9102, 291, 643, 30, 50766], 'temperature': 0.0, 'avg_logprob': -0.3622622197988082, 'compression_ratio': 1.5686274509803921, 'no_speech_prob': 0.756687581539154}, {'id': 586, 'seek': 282638, 'start': 2834.42, 'end': 2840.38, 'text': ' Will you need one per call or one per function?', 'tokens': [50766, 3099, 291, 643, 472, 680, 818, 420, 472, 680, 2445, 30, 51064], 'temperature': 0.0, 'avg_logprob': -0.3622622197988082, 'compression_ratio': 1.5686274509803921, 'no_speech_prob': 0.756687581539154}, {'id': 587, 'seek': 282638, 'start': 2840.38, 'end': 2850.3, 'text': ' Why do you need one per call?', 'tokens': [51064, 1545, 360, 291, 643, 472, 680, 818, 30, 51560], 'temperature': 0.0, 'avg_logprob': -0.3622622197988082, 'compression_ratio': 1.5686274509803921, 'no_speech_prob': 0.756687581539154}, {'id': 588, 'seek': 282638, 'start': 2850.3, 'end': 2854.38, 'text': ' What do you mean by calls are nested in this case?', 'tokens': [51560, 708, 360, 291, 914, 538, 5498, 366, 15646, 292, 294, 341, 1389, 30, 51764], 'temperature': 0.0, 'avg_logprob': -0.3622622197988082, 'compression_ratio': 1.5686274509803921, 'no_speech_prob': 0.756687581539154}, {'id': 589, 'seek': 285438, 'start': 2854.38, 'end': 2855.38, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.5624938218489938, 'compression_ratio': 1.0149253731343284, 'no_speech_prob': 0.06523393094539642}, {'id': 590, 'seek': 285438, 'start': 2855.38, 'end': 2874.38, 'text': ' But that will still come down to one per function.', 'tokens': [50414, 583, 300, 486, 920, 808, 760, 281, 472, 680, 2445, 13, 51364], 'temperature': 0.0, 'avg_logprob': -0.5624938218489938, 'compression_ratio': 1.0149253731343284, 'no_speech_prob': 0.06523393094539642}, {'id': 591, 'seek': 285438, 'start': 2874.38, 'end': 2879.38, 'text': ' Correct.', 'tokens': [51364, 12753, 13, 51614], 'temperature': 0.0, 'avg_logprob': -0.5624938218489938, 'compression_ratio': 1.0149253731343284, 'no_speech_prob': 0.06523393094539642}, {'id': 592, 'seek': 287938, 'start': 2879.38, 'end': 2882.06, 'text': ' So recursion cannot be done.', 'tokens': [50364, 407, 20560, 313, 2644, 312, 1096, 13, 50498], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 593, 'seek': 287938, 'start': 2882.06, 'end': 2888.98, 'text': ' But if recursion is not a feature in the language, then I can actually get away with one per', 'tokens': [50498, 583, 498, 20560, 313, 307, 406, 257, 4111, 294, 264, 2856, 11, 550, 286, 393, 767, 483, 1314, 365, 472, 680, 50844], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 594, 'seek': 287938, 'start': 2888.98, 'end': 2891.9, 'text': ' function, not one per call.', 'tokens': [50844, 2445, 11, 406, 472, 680, 818, 13, 50990], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 595, 'seek': 287938, 'start': 2891.9, 'end': 2897.1400000000003, 'text': ' So for every function, I will have a return at a global variable which holds the return', 'tokens': [50990, 407, 337, 633, 2445, 11, 286, 486, 362, 257, 2736, 412, 257, 4338, 7006, 597, 9190, 264, 2736, 51252], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 596, 'seek': 287938, 'start': 2897.1400000000003, 'end': 2898.62, 'text': ' address of that.', 'tokens': [51252, 2985, 295, 300, 13, 51326], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 597, 'seek': 287938, 'start': 2898.62, 'end': 2902.38, 'text': ' Wherever I am calling that function, I will save.', 'tokens': [51326, 30903, 286, 669, 5141, 300, 2445, 11, 286, 486, 3155, 13, 51514], 'temperature': 0.0, 'avg_logprob': -0.18611947501577983, 'compression_ratio': 1.6344086021505377, 'no_speech_prob': 0.4085841476917267}, {'id': 598, 'seek': 290238, 'start': 2902.38, 'end': 2910.82, 'text': ' So when I am calling function foo, I know I need to update variable called rate addr', 'tokens': [50364, 407, 562, 286, 669, 5141, 2445, 726, 78, 11, 286, 458, 286, 643, 281, 5623, 7006, 1219, 3314, 909, 81, 50786], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 599, 'seek': 290238, 'start': 2910.82, 'end': 2912.2200000000003, 'text': ' underscore foo.', 'tokens': [50786, 37556, 726, 78, 13, 50856], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 600, 'seek': 290238, 'start': 2912.2200000000003, 'end': 2917.1, 'text': ' Whenever I am calling function bar, I will do rate addr underscore bar.', 'tokens': [50856, 14159, 286, 669, 5141, 2445, 2159, 11, 286, 486, 360, 3314, 909, 81, 37556, 2159, 13, 51100], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 601, 'seek': 290238, 'start': 2917.1, 'end': 2922.9, 'text': ' Whenever I am calling function xyz, I know I will use a variable called rate addr underscore', 'tokens': [51100, 14159, 286, 669, 5141, 2445, 2031, 37433, 11, 286, 458, 286, 486, 764, 257, 7006, 1219, 3314, 909, 81, 37556, 51390], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 602, 'seek': 290238, 'start': 2922.9, 'end': 2923.9, 'text': ' xyz.', 'tokens': [51390, 2031, 37433, 13, 51440], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 603, 'seek': 290238, 'start': 2923.9, 'end': 2925.6600000000003, 'text': " Recursion doesn't work.", 'tokens': [51440, 9647, 2156, 313, 1177, 380, 589, 13, 51528], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 604, 'seek': 290238, 'start': 2925.6600000000003, 'end': 2927.42, 'text': ' Any other issues with this scheme?', 'tokens': [51528, 2639, 661, 2663, 365, 341, 12232, 30, 51616], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 605, 'seek': 290238, 'start': 2927.42, 'end': 2930.94, 'text': ' Every time do you know which function you are calling?', 'tokens': [51616, 2048, 565, 360, 291, 458, 597, 2445, 291, 366, 5141, 30, 51792], 'temperature': 0.0, 'avg_logprob': -0.21509323479994288, 'compression_ratio': 1.9492385786802031, 'no_speech_prob': 0.10595445334911346}, {'id': 606, 'seek': 293094, 'start': 2930.94, 'end': 2933.66, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50500], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 607, 'seek': 293094, 'start': 2933.66, 'end': 2937.9, 'text': ' So when you have function pointer, does everyone understand function pointer?', 'tokens': [50500, 407, 562, 291, 362, 2445, 23918, 11, 775, 1518, 1223, 2445, 23918, 30, 50712], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 608, 'seek': 293094, 'start': 2937.9, 'end': 2941.5, 'text': ' So pointer to function, right?', 'tokens': [50712, 407, 23918, 281, 2445, 11, 558, 30, 50892], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 609, 'seek': 293094, 'start': 2941.5, 'end': 2945.02, 'text': ' And it can be changed to different pointers.', 'tokens': [50892, 400, 309, 393, 312, 3105, 281, 819, 44548, 13, 51068], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 610, 'seek': 293094, 'start': 2945.02, 'end': 2952.42, 'text': " So if this call was actually a function pointer call, then I don't even know which function", 'tokens': [51068, 407, 498, 341, 818, 390, 767, 257, 2445, 23918, 818, 11, 550, 286, 500, 380, 754, 458, 597, 2445, 51438], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 611, 'seek': 293094, 'start': 2952.42, 'end': 2953.62, 'text': ' I am going to call.', 'tokens': [51438, 286, 669, 516, 281, 818, 13, 51498], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 612, 'seek': 293094, 'start': 2953.62, 'end': 2956.82, 'text': ' So which global variable will I use?', 'tokens': [51498, 407, 597, 4338, 7006, 486, 286, 764, 30, 51658], 'temperature': 0.0, 'avg_logprob': -0.1768890142440796, 'compression_ratio': 1.6368421052631579, 'no_speech_prob': 0.010643139481544495}, {'id': 613, 'seek': 295682, 'start': 2956.82, 'end': 2963.42, 'text': " I don't know whether it will be rate addr foo or rate addr bar or rate addr xyz.", 'tokens': [50364, 286, 500, 380, 458, 1968, 309, 486, 312, 3314, 909, 81, 726, 78, 420, 3314, 909, 81, 2159, 420, 3314, 909, 81, 2031, 37433, 13, 50694], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 614, 'seek': 295682, 'start': 2963.42, 'end': 2965.5800000000004, 'text': ' So two issues with this scheme.', 'tokens': [50694, 407, 732, 2663, 365, 341, 12232, 13, 50802], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 615, 'seek': 295682, 'start': 2965.5800000000004, 'end': 2967.02, 'text': " Recursion doesn't work.", 'tokens': [50802, 9647, 2156, 313, 1177, 380, 589, 13, 50874], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 616, 'seek': 295682, 'start': 2967.02, 'end': 2968.3, 'text': " Function pointers don't work.", 'tokens': [50874, 11166, 882, 44548, 500, 380, 589, 13, 50938], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 617, 'seek': 295682, 'start': 2968.3, 'end': 2975.5800000000004, 'text': ' If those two are not the features in your language, you can still use it.', 'tokens': [50938, 759, 729, 732, 366, 406, 264, 4122, 294, 428, 2856, 11, 291, 393, 920, 764, 309, 13, 51302], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 618, 'seek': 295682, 'start': 2975.5800000000004, 'end': 2977.82, 'text': " Let's use a register.", 'tokens': [51302, 961, 311, 764, 257, 7280, 13, 51414], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 619, 'seek': 295682, 'start': 2977.82, 'end': 2979.6600000000003, 'text': ' We have registers.', 'tokens': [51414, 492, 362, 38351, 13, 51506], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 620, 'seek': 295682, 'start': 2979.6600000000003, 'end': 2986.38, 'text': " So let's say just like global variable, why can't I store it in register?", 'tokens': [51506, 407, 718, 311, 584, 445, 411, 4338, 7006, 11, 983, 393, 380, 286, 3531, 309, 294, 7280, 30, 51842], 'temperature': 0.0, 'avg_logprob': -0.16973495483398438, 'compression_ratio': 1.5990990990990992, 'no_speech_prob': 0.5381625294685364}, {'id': 621, 'seek': 298638, 'start': 2986.38, 'end': 2991.82, 'text': " So let's say I say eax is my register where I am going to store it.", 'tokens': [50364, 407, 718, 311, 584, 286, 584, 308, 2797, 307, 452, 7280, 689, 286, 669, 516, 281, 3531, 309, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.19598595992378567, 'compression_ratio': 1.4967320261437909, 'no_speech_prob': 0.024373095482587814}, {'id': 622, 'seek': 298638, 'start': 2991.82, 'end': 2996.26, 'text': ' So just before the function call, I am going to store it in eax.', 'tokens': [50636, 407, 445, 949, 264, 2445, 818, 11, 286, 669, 516, 281, 3531, 309, 294, 308, 2797, 13, 50858], 'temperature': 0.0, 'avg_logprob': -0.19598595992378567, 'compression_ratio': 1.4967320261437909, 'no_speech_prob': 0.024373095482587814}, {'id': 623, 'seek': 298638, 'start': 2996.26, 'end': 3001.7400000000002, 'text': ' Then do the call and then use the content of eax to come back.', 'tokens': [50858, 1396, 360, 264, 818, 293, 550, 764, 264, 2701, 295, 308, 2797, 281, 808, 646, 13, 51132], 'temperature': 0.0, 'avg_logprob': -0.19598595992378567, 'compression_ratio': 1.4967320261437909, 'no_speech_prob': 0.024373095482587814}, {'id': 624, 'seek': 298638, 'start': 3001.7400000000002, 'end': 3002.7400000000002, 'text': ' What are issues with this scheme?', 'tokens': [51132, 708, 366, 2663, 365, 341, 12232, 30, 51182], 'temperature': 0.0, 'avg_logprob': -0.19598595992378567, 'compression_ratio': 1.4967320261437909, 'no_speech_prob': 0.024373095482587814}, {'id': 625, 'seek': 300274, 'start': 3002.74, 'end': 3017.7799999999997, 'text': ' Okay.', 'tokens': [50364, 1033, 13, 51116], 'temperature': 0.0, 'avg_logprob': -0.2197707089510831, 'compression_ratio': 1.4342105263157894, 'no_speech_prob': 0.10486561805009842}, {'id': 626, 'seek': 300274, 'start': 3017.7799999999997, 'end': 3019.9399999999996, 'text': " That's actually a good point and we'll come to that.", 'tokens': [51116, 663, 311, 767, 257, 665, 935, 293, 321, 603, 808, 281, 300, 13, 51224], 'temperature': 0.0, 'avg_logprob': -0.2197707089510831, 'compression_ratio': 1.4342105263157894, 'no_speech_prob': 0.10486561805009842}, {'id': 627, 'seek': 300274, 'start': 3019.9399999999996, 'end': 3025.2599999999998, 'text': ' So one problem which one person is saying is that there are limited number of registers.', 'tokens': [51224, 407, 472, 1154, 597, 472, 954, 307, 1566, 307, 300, 456, 366, 5567, 1230, 295, 38351, 13, 51490], 'temperature': 0.0, 'avg_logprob': -0.2197707089510831, 'compression_ratio': 1.4342105263157894, 'no_speech_prob': 0.10486561805009842}, {'id': 628, 'seek': 300274, 'start': 3025.2599999999998, 'end': 3029.06, 'text': ' We saw in the previous slide there were six general purpose registers.', 'tokens': [51490, 492, 1866, 294, 264, 3894, 4137, 456, 645, 2309, 2674, 4334, 38351, 13, 51680], 'temperature': 0.0, 'avg_logprob': -0.2197707089510831, 'compression_ratio': 1.4342105263157894, 'no_speech_prob': 0.10486561805009842}, {'id': 629, 'seek': 302906, 'start': 3029.06, 'end': 3031.58, 'text': ' So we have only six registers.', 'tokens': [50364, 407, 321, 362, 787, 2309, 38351, 13, 50490], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 630, 'seek': 302906, 'start': 3031.58, 'end': 3038.06, 'text': ' And the other issue is that the function itself may want to use eax for normal use, then I', 'tokens': [50490, 400, 264, 661, 2734, 307, 300, 264, 2445, 2564, 815, 528, 281, 764, 308, 2797, 337, 2710, 764, 11, 550, 286, 50814], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 631, 'seek': 302906, 'start': 3038.06, 'end': 3040.46, 'text': ' might end up overwriting it.', 'tokens': [50814, 1062, 917, 493, 670, 19868, 309, 13, 50934], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 632, 'seek': 302906, 'start': 3040.46, 'end': 3044.18, 'text': ' Any other issues with this?', 'tokens': [50934, 2639, 661, 2663, 365, 341, 30, 51120], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 633, 'seek': 302906, 'start': 3044.18, 'end': 3047.82, 'text': ' Can I implement recursion using this?', 'tokens': [51120, 1664, 286, 4445, 20560, 313, 1228, 341, 30, 51302], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 634, 'seek': 302906, 'start': 3047.82, 'end': 3051.46, 'text': ' No.', 'tokens': [51302, 883, 13, 51484], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 635, 'seek': 302906, 'start': 3051.46, 'end': 3053.38, 'text': ' By default we cannot use.', 'tokens': [51484, 3146, 7576, 321, 2644, 764, 13, 51580], 'temperature': 0.0, 'avg_logprob': -0.2618167563660504, 'compression_ratio': 1.430232558139535, 'no_speech_prob': 0.6831139326095581}, {'id': 636, 'seek': 305338, 'start': 3053.38, 'end': 3061.98, 'text': " So I'll somehow need a way to save the value of eax, then I could do that.", 'tokens': [50364, 407, 286, 603, 6063, 643, 257, 636, 281, 3155, 264, 2158, 295, 308, 2797, 11, 550, 286, 727, 360, 300, 13, 50794], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 637, 'seek': 305338, 'start': 3061.98, 'end': 3068.78, 'text': ' And if you call some other function bar, then I need to have either a different register', 'tokens': [50794, 400, 498, 291, 818, 512, 661, 2445, 2159, 11, 550, 286, 643, 281, 362, 2139, 257, 819, 7280, 51134], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 638, 'seek': 305338, 'start': 3068.78, 'end': 3071.86, 'text': ' or do something with it.', 'tokens': [51134, 420, 360, 746, 365, 309, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 639, 'seek': 305338, 'start': 3071.86, 'end': 3073.2200000000003, 'text': ' So this does not work.', 'tokens': [51288, 407, 341, 775, 406, 589, 13, 51356], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 640, 'seek': 305338, 'start': 3073.2200000000003, 'end': 3078.2200000000003, 'text': ' Plus the other problem which kind of the other person was coming to that architectures typically', 'tokens': [51356, 7721, 264, 661, 1154, 597, 733, 295, 264, 661, 954, 390, 1348, 281, 300, 6331, 1303, 5850, 51606], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 641, 'seek': 305338, 'start': 3078.2200000000003, 'end': 3080.46, 'text': ' have very few registers.', 'tokens': [51606, 362, 588, 1326, 38351, 13, 51718], 'temperature': 0.0, 'avg_logprob': -0.1843267199636876, 'compression_ratio': 1.5933014354066986, 'no_speech_prob': 0.41364914178848267}, {'id': 642, 'seek': 308046, 'start': 3080.46, 'end': 3084.66, 'text': ' And I may not want to waste my register for a return address.', 'tokens': [50364, 400, 286, 815, 406, 528, 281, 5964, 452, 7280, 337, 257, 2736, 2985, 13, 50574], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 643, 'seek': 308046, 'start': 3084.66, 'end': 3088.98, 'text': ' Because you must have already learned that register allocation is hard.', 'tokens': [50574, 1436, 291, 1633, 362, 1217, 3264, 300, 7280, 27599, 307, 1152, 13, 50790], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 644, 'seek': 308046, 'start': 3088.98, 'end': 3092.7, 'text': ' And if you have fewer registers, it becomes further hard.', 'tokens': [50790, 400, 498, 291, 362, 13366, 38351, 11, 309, 3643, 3052, 1152, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 645, 'seek': 308046, 'start': 3092.7, 'end': 3097.34, 'text': ' And registers are key for performance.', 'tokens': [50976, 400, 38351, 366, 2141, 337, 3389, 13, 51208], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 646, 'seek': 308046, 'start': 3097.34, 'end': 3103.58, 'text': ' But if your architecture has a lot of registers, this may or may not be a concern.', 'tokens': [51208, 583, 498, 428, 9482, 575, 257, 688, 295, 38351, 11, 341, 815, 420, 815, 406, 312, 257, 3136, 13, 51520], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 647, 'seek': 308046, 'start': 3103.58, 'end': 3107.9, 'text': ' So there are some processors which may have large number of registers, in which case it', 'tokens': [51520, 407, 456, 366, 512, 27751, 597, 815, 362, 2416, 1230, 295, 38351, 11, 294, 597, 1389, 309, 51736], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 648, 'seek': 308046, 'start': 3107.9, 'end': 3108.9, 'text': ' might be okay.', 'tokens': [51736, 1062, 312, 1392, 13, 51786], 'temperature': 0.0, 'avg_logprob': -0.1504583169918249, 'compression_ratio': 1.7405857740585775, 'no_speech_prob': 0.6356117129325867}, {'id': 649, 'seek': 310890, 'start': 3109.46, 'end': 3114.42, 'text': ' So far we have seen that somehow caller and callee need to agree on where the return address', 'tokens': [50392, 407, 1400, 321, 362, 1612, 300, 6063, 48324, 293, 818, 1653, 643, 281, 3986, 322, 689, 264, 2736, 2985, 50640], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 650, 'seek': 310890, 'start': 3114.42, 'end': 3116.38, 'text': ' is.', 'tokens': [50640, 307, 13, 50738], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 651, 'seek': 310890, 'start': 3116.38, 'end': 3120.9, 'text': ' And return address is specific for every invocation.', 'tokens': [50738, 400, 2736, 2985, 307, 2685, 337, 633, 1048, 27943, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 652, 'seek': 310890, 'start': 3120.9, 'end': 3125.1800000000003, 'text': " It's not once per function, it's once per call.", 'tokens': [50964, 467, 311, 406, 1564, 680, 2445, 11, 309, 311, 1564, 680, 818, 13, 51178], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 653, 'seek': 310890, 'start': 3125.1800000000003, 'end': 3129.96, 'text': " And it needs to be that's why instantiated every time a function is called.", 'tokens': [51178, 400, 309, 2203, 281, 312, 300, 311, 983, 9836, 72, 770, 633, 565, 257, 2445, 307, 1219, 13, 51417], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 654, 'seek': 310890, 'start': 3129.96, 'end': 3134.26, 'text': ' And so far the schemes which we saw had some limitations.', 'tokens': [51417, 400, 370, 1400, 264, 26954, 597, 321, 1866, 632, 512, 15705, 13, 51632], 'temperature': 0.0, 'avg_logprob': -0.17126482183283026, 'compression_ratio': 1.6802030456852792, 'no_speech_prob': 0.01449507288634777}, {'id': 655, 'seek': 313426, 'start': 3134.26, 'end': 3138.94, 'text': ' Now coming to the answer which was already given, stack.', 'tokens': [50364, 823, 1348, 281, 264, 1867, 597, 390, 1217, 2212, 11, 8630, 13, 50598], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 656, 'seek': 313426, 'start': 3138.94, 'end': 3145.42, 'text': ' So essentially the intuition of stack really comes because you have programming languages', 'tokens': [50598, 407, 4476, 264, 24002, 295, 8630, 534, 1487, 570, 291, 362, 9410, 8650, 50922], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 657, 'seek': 313426, 'start': 3145.42, 'end': 3148.36, 'text': ' which have recursive functions.', 'tokens': [50922, 597, 362, 20560, 488, 6828, 13, 51069], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 658, 'seek': 313426, 'start': 3148.36, 'end': 3153.1800000000003, 'text': " If you didn't have recursive functions, some of the schemes which you already saw earlier", 'tokens': [51069, 759, 291, 994, 380, 362, 20560, 488, 6828, 11, 512, 295, 264, 26954, 597, 291, 1217, 1866, 3071, 51310], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 659, 'seek': 313426, 'start': 3153.1800000000003, 'end': 3156.7000000000003, 'text': ' like global variable would have actually worked.', 'tokens': [51310, 411, 4338, 7006, 576, 362, 767, 2732, 13, 51486], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 660, 'seek': 313426, 'start': 3156.7000000000003, 'end': 3162.6400000000003, 'text': ' But since languages support recursion, inherently the notion of stack comes into the picture.', 'tokens': [51486, 583, 1670, 8650, 1406, 20560, 313, 11, 27993, 264, 10710, 295, 8630, 1487, 666, 264, 3036, 13, 51783], 'temperature': 0.0, 'avg_logprob': -0.13495588302612305, 'compression_ratio': 1.7415254237288136, 'no_speech_prob': 0.031121939420700073}, {'id': 661, 'seek': 316264, 'start': 3162.64, 'end': 3168.2, 'text': ' So stack is a region of memory that will work in last in first out manner.', 'tokens': [50364, 407, 8630, 307, 257, 4458, 295, 4675, 300, 486, 589, 294, 1036, 294, 700, 484, 9060, 13, 50642], 'temperature': 0.0, 'avg_logprob': -0.13147414602884433, 'compression_ratio': 1.6056338028169015, 'no_speech_prob': 0.0037063551135361195}, {'id': 662, 'seek': 316264, 'start': 3168.2, 'end': 3173.44, 'text': ' I hope everyone understands what is a stack data structure and so on.', 'tokens': [50642, 286, 1454, 1518, 15146, 437, 307, 257, 8630, 1412, 3877, 293, 370, 322, 13, 50904], 'temperature': 0.0, 'avg_logprob': -0.13147414602884433, 'compression_ratio': 1.6056338028169015, 'no_speech_prob': 0.0037063551135361195}, {'id': 663, 'seek': 316264, 'start': 3173.44, 'end': 3178.8799999999997, 'text': ' And most of the processors which are modern do have native support for stack.', 'tokens': [50904, 400, 881, 295, 264, 27751, 597, 366, 4363, 360, 362, 8470, 1406, 337, 8630, 13, 51176], 'temperature': 0.0, 'avg_logprob': -0.13147414602884433, 'compression_ratio': 1.6056338028169015, 'no_speech_prob': 0.0037063551135361195}, {'id': 664, 'seek': 316264, 'start': 3178.8799999999997, 'end': 3184.68, 'text': ' By native support I mean they inherently implement stack in the hardware.', 'tokens': [51176, 3146, 8470, 1406, 286, 914, 436, 27993, 4445, 8630, 294, 264, 8837, 13, 51466], 'temperature': 0.0, 'avg_logprob': -0.13147414602884433, 'compression_ratio': 1.6056338028169015, 'no_speech_prob': 0.0037063551135361195}, {'id': 665, 'seek': 316264, 'start': 3184.68, 'end': 3189.9, 'text': ' So x86 actually has a stack which grows down.', 'tokens': [51466, 407, 2031, 22193, 767, 575, 257, 8630, 597, 13156, 760, 13, 51727], 'temperature': 0.0, 'avg_logprob': -0.13147414602884433, 'compression_ratio': 1.6056338028169015, 'no_speech_prob': 0.0037063551135361195}, {'id': 666, 'seek': 318990, 'start': 3189.9, 'end': 3195.7000000000003, 'text': ' So it starts at some higher address and as you keep adding stuff into the stack, it will', 'tokens': [50364, 407, 309, 3719, 412, 512, 2946, 2985, 293, 382, 291, 1066, 5127, 1507, 666, 264, 8630, 11, 309, 486, 50654], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 667, 'seek': 318990, 'start': 3195.7000000000003, 'end': 3198.1800000000003, 'text': ' keep going down.', 'tokens': [50654, 1066, 516, 760, 13, 50778], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 668, 'seek': 318990, 'start': 3198.1800000000003, 'end': 3202.86, 'text': ' Stack will always grow down in x86 style architecture.', 'tokens': [50778, 37649, 486, 1009, 1852, 760, 294, 2031, 22193, 3758, 9482, 13, 51012], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 669, 'seek': 318990, 'start': 3202.86, 'end': 3209.6600000000003, 'text': ' And x86, remember we saw something called as ESP register, which I said is not a general', 'tokens': [51012, 400, 2031, 22193, 11, 1604, 321, 1866, 746, 1219, 382, 12564, 47, 7280, 11, 597, 286, 848, 307, 406, 257, 2674, 51352], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 670, 'seek': 318990, 'start': 3209.6600000000003, 'end': 3211.26, 'text': ' purpose register.', 'tokens': [51352, 4334, 7280, 13, 51432], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 671, 'seek': 318990, 'start': 3211.26, 'end': 3216.9, 'text': ' So ESP is actually a pointer which is pointing to top of the stack.', 'tokens': [51432, 407, 12564, 47, 307, 767, 257, 23918, 597, 307, 12166, 281, 1192, 295, 264, 8630, 13, 51714], 'temperature': 0.0, 'avg_logprob': -0.16392699154940518, 'compression_ratio': 1.5654205607476634, 'no_speech_prob': 0.032083265483379364}, {'id': 672, 'seek': 321690, 'start': 3216.9, 'end': 3220.08, 'text': ' So ESP is always pointing to top of the stack.', 'tokens': [50364, 407, 12564, 47, 307, 1009, 12166, 281, 1192, 295, 264, 8630, 13, 50523], 'temperature': 0.0, 'avg_logprob': -0.1492779682844113, 'compression_ratio': 1.5846153846153845, 'no_speech_prob': 0.05828666314482689}, {'id': 673, 'seek': 321690, 'start': 3220.08, 'end': 3226.78, 'text': ' Then x86 hardware supports instructions to push new stuff onto the stack.', 'tokens': [50523, 1396, 2031, 22193, 8837, 9346, 9415, 281, 2944, 777, 1507, 3911, 264, 8630, 13, 50858], 'temperature': 0.0, 'avg_logprob': -0.1492779682844113, 'compression_ratio': 1.5846153846153845, 'no_speech_prob': 0.05828666314482689}, {'id': 674, 'seek': 321690, 'start': 3226.78, 'end': 3232.34, 'text': ' So there is an instruction called push L. Remember L is a suffix to indicate 32 bit', 'tokens': [50858, 407, 456, 307, 364, 10951, 1219, 2944, 441, 13, 5459, 441, 307, 257, 3889, 970, 281, 13330, 8858, 857, 51136], 'temperature': 0.0, 'avg_logprob': -0.1492779682844113, 'compression_ratio': 1.5846153846153845, 'no_speech_prob': 0.05828666314482689}, {'id': 675, 'seek': 321690, 'start': 3232.34, 'end': 3233.34, 'text': ' data.', 'tokens': [51136, 1412, 13, 51186], 'temperature': 0.0, 'avg_logprob': -0.1492779682844113, 'compression_ratio': 1.5846153846153845, 'no_speech_prob': 0.05828666314482689}, {'id': 676, 'seek': 321690, 'start': 3233.34, 'end': 3241.7000000000003, 'text': ' So push L is pushing 32 bits into the stack and it will increment the stack pointer automatically.', 'tokens': [51186, 407, 2944, 441, 307, 7380, 8858, 9239, 666, 264, 8630, 293, 309, 486, 26200, 264, 8630, 23918, 6772, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.1492779682844113, 'compression_ratio': 1.5846153846153845, 'no_speech_prob': 0.05828666314482689}, {'id': 677, 'seek': 324170, 'start': 3242.4199999999996, 'end': 3248.7799999999997, 'text': ' So what push L instruction is doing is essentially it is subtracting the stack pointer by 4 and', 'tokens': [50400, 407, 437, 2944, 441, 10951, 307, 884, 307, 4476, 309, 307, 16390, 278, 264, 8630, 23918, 538, 1017, 293, 50718], 'temperature': 0.0, 'avg_logprob': -0.20253631867558122, 'compression_ratio': 1.7989949748743719, 'no_speech_prob': 0.0533747598528862}, {'id': 678, 'seek': 324170, 'start': 3248.7799999999997, 'end': 3254.54, 'text': ' copying the data which is given into the stack location.', 'tokens': [50718, 27976, 264, 1412, 597, 307, 2212, 666, 264, 8630, 4914, 13, 51006], 'temperature': 0.0, 'avg_logprob': -0.20253631867558122, 'compression_ratio': 1.7989949748743719, 'no_speech_prob': 0.0533747598528862}, {'id': 679, 'seek': 324170, 'start': 3254.54, 'end': 3261.16, 'text': ' Pop does the reverse of it where it will update the stack pointer to actually go back.', 'tokens': [51006, 10215, 775, 264, 9943, 295, 309, 689, 309, 486, 5623, 264, 8630, 23918, 281, 767, 352, 646, 13, 51337], 'temperature': 0.0, 'avg_logprob': -0.20253631867558122, 'compression_ratio': 1.7989949748743719, 'no_speech_prob': 0.0533747598528862}, {'id': 680, 'seek': 324170, 'start': 3261.16, 'end': 3267.8999999999996, 'text': ' So push is going to decrement the stack pointer and pop is going to increment the stack pointer.', 'tokens': [51337, 407, 2944, 307, 516, 281, 6853, 518, 264, 8630, 23918, 293, 1665, 307, 516, 281, 26200, 264, 8630, 23918, 13, 51674], 'temperature': 0.0, 'avg_logprob': -0.20253631867558122, 'compression_ratio': 1.7989949748743719, 'no_speech_prob': 0.0533747598528862}, {'id': 681, 'seek': 324170, 'start': 3267.8999999999996, 'end': 3270.04, 'text': ' Everyone understands?', 'tokens': [51674, 5198, 15146, 30, 51781], 'temperature': 0.0, 'avg_logprob': -0.20253631867558122, 'compression_ratio': 1.7989949748743719, 'no_speech_prob': 0.0533747598528862}, {'id': 682, 'seek': 327004, 'start': 3270.04, 'end': 3277.32, 'text': ' So this is x86 64 architecture which is the 64 bit variant of the x86.', 'tokens': [50364, 407, 341, 307, 2031, 22193, 12145, 9482, 597, 307, 264, 12145, 857, 17501, 295, 264, 2031, 22193, 13, 50728], 'temperature': 0.0, 'avg_logprob': -0.21617523642147288, 'compression_ratio': 1.6844919786096257, 'no_speech_prob': 0.00940759852528572}, {'id': 683, 'seek': 327004, 'start': 3277.32, 'end': 3281.92, 'text': ' Whatever most of the laptops which you will have will be 64 bit.', 'tokens': [50728, 8541, 881, 295, 264, 27642, 597, 291, 486, 362, 486, 312, 12145, 857, 13, 50958], 'temperature': 0.0, 'avg_logprob': -0.21617523642147288, 'compression_ratio': 1.6844919786096257, 'no_speech_prob': 0.00940759852528572}, {'id': 684, 'seek': 327004, 'start': 3281.92, 'end': 3291.04, 'text': ' So x86 64 actually needs a stack pointer which is 64 bit because the addresses are all 64', 'tokens': [50958, 407, 2031, 22193, 12145, 767, 2203, 257, 8630, 23918, 597, 307, 12145, 857, 570, 264, 16862, 366, 439, 12145, 51414], 'temperature': 0.0, 'avg_logprob': -0.21617523642147288, 'compression_ratio': 1.6844919786096257, 'no_speech_prob': 0.00940759852528572}, {'id': 685, 'seek': 327004, 'start': 3291.04, 'end': 3292.2799999999997, 'text': ' bit.', 'tokens': [51414, 857, 13, 51476], 'temperature': 0.0, 'avg_logprob': -0.21617523642147288, 'compression_ratio': 1.6844919786096257, 'no_speech_prob': 0.00940759852528572}, {'id': 686, 'seek': 327004, 'start': 3292.2799999999997, 'end': 3298.88, 'text': ' So it has a register called RSP which is a 64 bit register and it will decrement the', 'tokens': [51476, 407, 309, 575, 257, 7280, 1219, 25855, 47, 597, 307, 257, 12145, 857, 7280, 293, 309, 486, 6853, 518, 264, 51806], 'temperature': 0.0, 'avg_logprob': -0.21617523642147288, 'compression_ratio': 1.6844919786096257, 'no_speech_prob': 0.00940759852528572}, {'id': 687, 'seek': 329888, 'start': 3298.88, 'end': 3305.32, 'text': ' push instruction will decrement stack pointer by 8 and pop will increment the pointer by', 'tokens': [50364, 2944, 10951, 486, 6853, 518, 8630, 23918, 538, 1649, 293, 1665, 486, 26200, 264, 23918, 538, 50686], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 688, 'seek': 329888, 'start': 3305.32, 'end': 3307.56, 'text': ' 8.', 'tokens': [50686, 1649, 13, 50798], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 689, 'seek': 329888, 'start': 3307.56, 'end': 3308.88, 'text': ' Does that make sense?', 'tokens': [50798, 4402, 300, 652, 2020, 30, 50864], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 690, 'seek': 329888, 'start': 3308.88, 'end': 3321.52, 'text': ' So x86 architecture had 32 bit stack pointer, x86 64 had 64 bit stack pointer and x86 also', 'tokens': [50864, 407, 2031, 22193, 9482, 632, 8858, 857, 8630, 23918, 11, 2031, 22193, 12145, 632, 12145, 857, 8630, 23918, 293, 2031, 22193, 611, 51496], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 691, 'seek': 329888, 'start': 3321.52, 'end': 3323.2000000000003, 'text': ' supports two instructions.', 'tokens': [51496, 9346, 732, 9415, 13, 51580], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 692, 'seek': 329888, 'start': 3323.2000000000003, 'end': 3328.7400000000002, 'text': ' Instead of using jump, we were manually trying to jump to some location.', 'tokens': [51580, 7156, 295, 1228, 3012, 11, 321, 645, 16945, 1382, 281, 3012, 281, 512, 4914, 13, 51857], 'temperature': 0.0, 'avg_logprob': -0.21070177127153444, 'compression_ratio': 1.6084656084656084, 'no_speech_prob': 0.02031335048377514}, {'id': 693, 'seek': 332874, 'start': 3328.74, 'end': 3336.2999999999997, 'text': ' There is a support for call instruction and call is essentially going to call the function', 'tokens': [50364, 821, 307, 257, 1406, 337, 818, 10951, 293, 818, 307, 4476, 516, 281, 818, 264, 2445, 50742], 'temperature': 0.0, 'avg_logprob': -0.14322241046760656, 'compression_ratio': 1.941860465116279, 'no_speech_prob': 0.009997842833399773}, {'id': 694, 'seek': 332874, 'start': 3336.2999999999997, 'end': 3339.02, 'text': ' but it is not simply that.', 'tokens': [50742, 457, 309, 307, 406, 2935, 300, 13, 50878], 'temperature': 0.0, 'avg_logprob': -0.14322241046760656, 'compression_ratio': 1.941860465116279, 'no_speech_prob': 0.009997842833399773}, {'id': 695, 'seek': 332874, 'start': 3339.02, 'end': 3344.9199999999996, 'text': ' It is implicitly going to push address of the next instruction on to the stack.', 'tokens': [50878, 467, 307, 26947, 356, 516, 281, 2944, 2985, 295, 264, 958, 10951, 322, 281, 264, 8630, 13, 51173], 'temperature': 0.0, 'avg_logprob': -0.14322241046760656, 'compression_ratio': 1.941860465116279, 'no_speech_prob': 0.009997842833399773}, {'id': 696, 'seek': 332874, 'start': 3344.9199999999996, 'end': 3348.06, 'text': ' So call instruction is actually doing two things.', 'tokens': [51173, 407, 818, 10951, 307, 767, 884, 732, 721, 13, 51330], 'temperature': 0.0, 'avg_logprob': -0.14322241046760656, 'compression_ratio': 1.941860465116279, 'no_speech_prob': 0.009997842833399773}, {'id': 697, 'seek': 332874, 'start': 3348.06, 'end': 3354.9199999999996, 'text': ' It is pushing address of the new next instruction on the stack and then it is jumping.', 'tokens': [51330, 467, 307, 7380, 2985, 295, 264, 777, 958, 10951, 322, 264, 8630, 293, 550, 309, 307, 11233, 13, 51673], 'temperature': 0.0, 'avg_logprob': -0.14322241046760656, 'compression_ratio': 1.941860465116279, 'no_speech_prob': 0.009997842833399773}, {'id': 698, 'seek': 335492, 'start': 3354.92, 'end': 3357.76, 'text': ' So it is similar to update stack jump.', 'tokens': [50364, 407, 309, 307, 2531, 281, 5623, 8630, 3012, 13, 50506], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 699, 'seek': 335492, 'start': 3357.76, 'end': 3361.46, 'text': ' Written instruction is actually going to do the reverse.', 'tokens': [50506, 10159, 2987, 10951, 307, 767, 516, 281, 360, 264, 9943, 13, 50691], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 700, 'seek': 335492, 'start': 3361.46, 'end': 3368.76, 'text': ' It is first going to pop whatever is top of the stack and then going to jump back.', 'tokens': [50691, 467, 307, 700, 516, 281, 1665, 2035, 307, 1192, 295, 264, 8630, 293, 550, 516, 281, 3012, 646, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 701, 'seek': 335492, 'start': 3368.76, 'end': 3370.9, 'text': ' Does that make sense?', 'tokens': [51056, 4402, 300, 652, 2020, 30, 51163], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 702, 'seek': 335492, 'start': 3370.9, 'end': 3374.94, 'text': ' So essentially just to demonstrate, so let us say I had this code.', 'tokens': [51163, 407, 4476, 445, 281, 11698, 11, 370, 718, 505, 584, 286, 632, 341, 3089, 13, 51365], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 703, 'seek': 335492, 'start': 3374.94, 'end': 3381.82, 'text': ' So I have a call instruction which is calling some address and the next address is this.', 'tokens': [51365, 407, 286, 362, 257, 818, 10951, 597, 307, 5141, 512, 2985, 293, 264, 958, 2985, 307, 341, 13, 51709], 'temperature': 0.0, 'avg_logprob': -0.17498907152113025, 'compression_ratio': 1.6635514018691588, 'no_speech_prob': 0.07153590023517609}, {'id': 704, 'seek': 338182, 'start': 3381.82, 'end': 3389.2000000000003, 'text': ' Then my current instruction pointer is pointing to the call instruction and stack state is', 'tokens': [50364, 1396, 452, 2190, 10951, 23918, 307, 12166, 281, 264, 818, 10951, 293, 8630, 1785, 307, 50733], 'temperature': 0.0, 'avg_logprob': -0.12469642106876817, 'compression_ratio': 1.9076923076923078, 'no_speech_prob': 0.15186730027198792}, {'id': 705, 'seek': 338182, 'start': 3389.2000000000003, 'end': 3392.94, 'text': ' something like this where it is pointing to some data into the stack.', 'tokens': [50733, 746, 411, 341, 689, 309, 307, 12166, 281, 512, 1412, 666, 264, 8630, 13, 50920], 'temperature': 0.0, 'avg_logprob': -0.12469642106876817, 'compression_ratio': 1.9076923076923078, 'no_speech_prob': 0.15186730027198792}, {'id': 706, 'seek': 338182, 'start': 3392.94, 'end': 3398.9, 'text': ' What will happen is whenever I do a call, the address of the next instruction is going', 'tokens': [50920, 708, 486, 1051, 307, 5699, 286, 360, 257, 818, 11, 264, 2985, 295, 264, 958, 10951, 307, 516, 51218], 'temperature': 0.0, 'avg_logprob': -0.12469642106876817, 'compression_ratio': 1.9076923076923078, 'no_speech_prob': 0.15186730027198792}, {'id': 707, 'seek': 338182, 'start': 3398.9, 'end': 3400.92, 'text': ' to get pushed on to the stack.', 'tokens': [51218, 281, 483, 9152, 322, 281, 264, 8630, 13, 51319], 'temperature': 0.0, 'avg_logprob': -0.12469642106876817, 'compression_ratio': 1.9076923076923078, 'no_speech_prob': 0.15186730027198792}, {'id': 708, 'seek': 338182, 'start': 3400.92, 'end': 3409.34, 'text': ' The stack pointer is going to be updated to point to that and my stack pointer is decremented', 'tokens': [51319, 440, 8630, 23918, 307, 516, 281, 312, 10588, 281, 935, 281, 300, 293, 452, 8630, 23918, 307, 6853, 14684, 51740], 'temperature': 0.0, 'avg_logprob': -0.12469642106876817, 'compression_ratio': 1.9076923076923078, 'no_speech_prob': 0.15186730027198792}, {'id': 709, 'seek': 340934, 'start': 3409.52, 'end': 3414.88, 'text': ' because stack is going down and my instruction pointer is updated to the actual function', 'tokens': [50373, 570, 8630, 307, 516, 760, 293, 452, 10951, 23918, 307, 10588, 281, 264, 3539, 2445, 50641], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 710, 'seek': 340934, 'start': 3414.88, 'end': 3416.54, 'text': ' call which is being done.', 'tokens': [50641, 818, 597, 307, 885, 1096, 13, 50724], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 711, 'seek': 340934, 'start': 3416.54, 'end': 3422.02, 'text': ' So instruction will start executing from that function.', 'tokens': [50724, 407, 10951, 486, 722, 32368, 490, 300, 2445, 13, 50998], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 712, 'seek': 340934, 'start': 3422.02, 'end': 3425.1400000000003, 'text': ' Return is going to do the opposite.', 'tokens': [50998, 24350, 307, 516, 281, 360, 264, 6182, 13, 51154], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 713, 'seek': 340934, 'start': 3425.1400000000003, 'end': 3432.98, 'text': ' So when I was going to do return, my stack pointer was pointing to the return address', 'tokens': [51154, 407, 562, 286, 390, 516, 281, 360, 2736, 11, 452, 8630, 23918, 390, 12166, 281, 264, 2736, 2985, 51546], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 714, 'seek': 340934, 'start': 3432.98, 'end': 3437.06, 'text': ' and my instruction pointer was pointing to the return instruction.', 'tokens': [51546, 293, 452, 10951, 23918, 390, 12166, 281, 264, 2736, 10951, 13, 51750], 'temperature': 0.0, 'avg_logprob': -0.16986783345540366, 'compression_ratio': 2.039772727272727, 'no_speech_prob': 0.09261687844991684}, {'id': 715, 'seek': 343706, 'start': 3437.06, 'end': 3440.86, 'text': ' The return instruction is going to update the stack pointer by 4.', 'tokens': [50364, 440, 2736, 10951, 307, 516, 281, 5623, 264, 8630, 23918, 538, 1017, 13, 50554], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 716, 'seek': 343706, 'start': 3440.86, 'end': 3447.1, 'text': ' So it is going to actually increment it and popping the data which was on the stack and', 'tokens': [50554, 407, 309, 307, 516, 281, 767, 26200, 309, 293, 18374, 264, 1412, 597, 390, 322, 264, 8630, 293, 50866], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 717, 'seek': 343706, 'start': 3447.1, 'end': 3449.32, 'text': ' jump to that address.', 'tokens': [50866, 3012, 281, 300, 2985, 13, 50977], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 718, 'seek': 343706, 'start': 3449.32, 'end': 3456.36, 'text': ' So just to summarize, call instruction will push things on to the stack and start executing', 'tokens': [50977, 407, 445, 281, 20858, 11, 818, 10951, 486, 2944, 721, 322, 281, 264, 8630, 293, 722, 32368, 51329], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 719, 'seek': 343706, 'start': 3456.36, 'end': 3458.04, 'text': ' the function.', 'tokens': [51329, 264, 2445, 13, 51413], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 720, 'seek': 343706, 'start': 3458.04, 'end': 3464.22, 'text': ' Rate instruction is going to pop the return address from the stack and going to start', 'tokens': [51413, 49583, 10951, 307, 516, 281, 1665, 264, 2736, 2985, 490, 264, 8630, 293, 516, 281, 722, 51722], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 721, 'seek': 343706, 'start': 3464.22, 'end': 3466.22, 'text': ' executing.', 'tokens': [51722, 32368, 13, 51822], 'temperature': 0.0, 'avg_logprob': -0.1864159901936849, 'compression_ratio': 1.9285714285714286, 'no_speech_prob': 0.004197264090180397}, {'id': 722, 'seek': 346622, 'start': 3466.3799999999997, 'end': 3469.3799999999997, 'text': ' Kids, what does this code do?', 'tokens': [50372, 15694, 11, 437, 775, 341, 3089, 360, 30, 50522], 'temperature': 0.0, 'avg_logprob': -0.5717612535525591, 'compression_ratio': 1.2941176470588236, 'no_speech_prob': 0.839033305644989}, {'id': 723, 'seek': 346622, 'start': 3473.3799999999997, 'end': 3476.3799999999997, 'text': ' It will give the address of LBL.', 'tokens': [50722, 467, 486, 976, 264, 2985, 295, 441, 17624, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.5717612535525591, 'compression_ratio': 1.2941176470588236, 'no_speech_prob': 0.839033305644989}, {'id': 724, 'seek': 346622, 'start': 3476.3799999999997, 'end': 3479.3799999999997, 'text': ' It will give address of LBL.', 'tokens': [50872, 467, 486, 976, 2985, 295, 441, 17624, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.5717612535525591, 'compression_ratio': 1.2941176470588236, 'no_speech_prob': 0.839033305644989}, {'id': 725, 'seek': 346622, 'start': 3479.3799999999997, 'end': 3484.3799999999997, 'text': ' Any other answers?', 'tokens': [51022, 2639, 661, 6338, 30, 51272], 'temperature': 0.0, 'avg_logprob': -0.5717612535525591, 'compression_ratio': 1.2941176470588236, 'no_speech_prob': 0.839033305644989}, {'id': 726, 'seek': 348438, 'start': 3484.54, 'end': 3495.54, 'text': ' So remember, try to do.', 'tokens': [50372, 407, 1604, 11, 853, 281, 360, 13, 50922], 'temperature': 0.0, 'avg_logprob': -0.2589452324843988, 'compression_ratio': 1.2727272727272727, 'no_speech_prob': 0.0341467410326004}, {'id': 727, 'seek': 348438, 'start': 3495.54, 'end': 3500.54, 'text': ' Call instruction, what is it going to do with stack and then what the next instruction will', 'tokens': [50922, 7807, 10951, 11, 437, 307, 309, 516, 281, 360, 365, 8630, 293, 550, 437, 264, 958, 10951, 486, 51172], 'temperature': 0.0, 'avg_logprob': -0.2589452324843988, 'compression_ratio': 1.2727272727272727, 'no_speech_prob': 0.0341467410326004}, {'id': 728, 'seek': 348438, 'start': 3500.54, 'end': 3503.54, 'text': ' do?', 'tokens': [51172, 360, 30, 51322], 'temperature': 0.0, 'avg_logprob': -0.2589452324843988, 'compression_ratio': 1.2727272727272727, 'no_speech_prob': 0.0341467410326004}, {'id': 729, 'seek': 348438, 'start': 3503.54, 'end': 3510.54, 'text': ' Can you explain how?', 'tokens': [51322, 1664, 291, 2903, 577, 30, 51672], 'temperature': 0.0, 'avg_logprob': -0.2589452324843988, 'compression_ratio': 1.2727272727272727, 'no_speech_prob': 0.0341467410326004}, {'id': 730, 'seek': 351438, 'start': 3514.54, 'end': 3521.54, 'text': ' Correct.', 'tokens': [50372, 12753, 13, 50722], 'temperature': 0.0, 'avg_logprob': -0.5992589678083148, 'compression_ratio': 0.8571428571428571, 'no_speech_prob': 0.013789108954370022}, {'id': 731, 'seek': 351438, 'start': 3535.7000000000003, 'end': 3537.94, 'text': ' Does everyone understand what happened?', 'tokens': [51430, 4402, 1518, 1223, 437, 2011, 30, 51542], 'temperature': 0.0, 'avg_logprob': -0.5992589678083148, 'compression_ratio': 0.8571428571428571, 'no_speech_prob': 0.013789108954370022}, {'id': 732, 'seek': 353794, 'start': 3538.5, 'end': 3544.7400000000002, 'text': ' So call instruction, before doing the call, is going to push the address of the next instruction.', 'tokens': [50392, 407, 818, 10951, 11, 949, 884, 264, 818, 11, 307, 516, 281, 2944, 264, 2985, 295, 264, 958, 10951, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 733, 'seek': 353794, 'start': 3544.7400000000002, 'end': 3548.78, 'text': ' The next instruction itself is whatever is being pointed by LBL.', 'tokens': [50704, 440, 958, 10951, 2564, 307, 2035, 307, 885, 10932, 538, 441, 17624, 13, 50906], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 734, 'seek': 353794, 'start': 3548.78, 'end': 3554.3, 'text': ' So the address of LBL is what is pushed on to the stack.', 'tokens': [50906, 407, 264, 2985, 295, 441, 17624, 307, 437, 307, 9152, 322, 281, 264, 8630, 13, 51182], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 735, 'seek': 353794, 'start': 3554.3, 'end': 3559.58, 'text': ' And call is going to start again executing from that instruction itself.', 'tokens': [51182, 400, 818, 307, 516, 281, 722, 797, 32368, 490, 300, 10951, 2564, 13, 51446], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 736, 'seek': 353794, 'start': 3559.58, 'end': 3564.98, 'text': ' And then you hit this instruction pop and pop is going to pop whatever is top of the', 'tokens': [51446, 400, 550, 291, 2045, 341, 10951, 1665, 293, 1665, 307, 516, 281, 1665, 2035, 307, 1192, 295, 264, 51716], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 737, 'seek': 353794, 'start': 3564.98, 'end': 3566.6, 'text': ' stack.', 'tokens': [51716, 8630, 13, 51797], 'temperature': 0.0, 'avg_logprob': -0.15943573399593955, 'compression_ratio': 2.0, 'no_speech_prob': 0.03958872705698013}, {'id': 738, 'seek': 356660, 'start': 3566.6, 'end': 3569.96, 'text': ' So it will actually pop the address of LBL.', 'tokens': [50364, 407, 309, 486, 767, 1665, 264, 2985, 295, 441, 17624, 13, 50532], 'temperature': 0.0, 'avg_logprob': -0.1878779729207357, 'compression_ratio': 1.617801047120419, 'no_speech_prob': 0.00109742337372154}, {'id': 739, 'seek': 356660, 'start': 3569.96, 'end': 3574.96, 'text': ' So it is essentially getting address of the current instruction itself.', 'tokens': [50532, 407, 309, 307, 4476, 1242, 2985, 295, 264, 2190, 10951, 2564, 13, 50782], 'temperature': 0.0, 'avg_logprob': -0.1878779729207357, 'compression_ratio': 1.617801047120419, 'no_speech_prob': 0.00109742337372154}, {'id': 740, 'seek': 356660, 'start': 3574.96, 'end': 3581.96, 'text': ' Are there any issues since there is no return?', 'tokens': [50782, 2014, 456, 604, 2663, 1670, 456, 307, 572, 2736, 30, 51132], 'temperature': 0.0, 'avg_logprob': -0.1878779729207357, 'compression_ratio': 1.617801047120419, 'no_speech_prob': 0.00109742337372154}, {'id': 741, 'seek': 356660, 'start': 3581.96, 'end': 3588.96, 'text': ' Yeah, so return is not a must instruction for every call.', 'tokens': [51132, 865, 11, 370, 2736, 307, 406, 257, 1633, 10951, 337, 633, 818, 13, 51482], 'temperature': 0.0, 'avg_logprob': -0.1878779729207357, 'compression_ratio': 1.617801047120419, 'no_speech_prob': 0.00109742337372154}, {'id': 742, 'seek': 356660, 'start': 3589.48, 'end': 3595.4, 'text': ' As long as you keep your stack in the correct form, it does not matter whether you had a', 'tokens': [51508, 1018, 938, 382, 291, 1066, 428, 8630, 294, 264, 3006, 1254, 11, 309, 775, 406, 1871, 1968, 291, 632, 257, 51804], 'temperature': 0.0, 'avg_logprob': -0.1878779729207357, 'compression_ratio': 1.617801047120419, 'no_speech_prob': 0.00109742337372154}, {'id': 743, 'seek': 359540, 'start': 3595.4, 'end': 3601.04, 'text': ' ret instruction or you did not have a ret instruction.', 'tokens': [50364, 1533, 10951, 420, 291, 630, 406, 362, 257, 1533, 10951, 13, 50646], 'temperature': 0.0, 'avg_logprob': -0.22915882899843412, 'compression_ratio': 1.6014492753623188, 'no_speech_prob': 0.003374329302459955}, {'id': 744, 'seek': 359540, 'start': 3601.04, 'end': 3603.86, 'text': ' Can someone tell me why we do this?', 'tokens': [50646, 1664, 1580, 980, 385, 983, 321, 360, 341, 30, 50787], 'temperature': 0.0, 'avg_logprob': -0.22915882899843412, 'compression_ratio': 1.6014492753623188, 'no_speech_prob': 0.003374329302459955}, {'id': 745, 'seek': 359540, 'start': 3603.86, 'end': 3610.86, 'text': ' Is there any use of this code you can think of?', 'tokens': [50787, 1119, 456, 604, 764, 295, 341, 3089, 291, 393, 519, 295, 30, 51137], 'temperature': 0.0, 'avg_logprob': -0.22915882899843412, 'compression_ratio': 1.6014492753623188, 'no_speech_prob': 0.003374329302459955}, {'id': 746, 'seek': 359540, 'start': 3612.2400000000002, 'end': 3619.2400000000002, 'text': ' To get address of the current instruction, is there any use of that functionality?', 'tokens': [51206, 1407, 483, 2985, 295, 264, 2190, 10951, 11, 307, 456, 604, 764, 295, 300, 14980, 30, 51556], 'temperature': 0.0, 'avg_logprob': -0.22915882899843412, 'compression_ratio': 1.6014492753623188, 'no_speech_prob': 0.003374329302459955}, {'id': 747, 'seek': 361924, 'start': 3619.24, 'end': 3626.24, 'text': ' Why do you want address of current instruction?', 'tokens': [50364, 1545, 360, 291, 528, 2985, 295, 2190, 10951, 30, 50714], 'temperature': 0.0, 'avg_logprob': -0.3003116730720766, 'compression_ratio': 1.2197802197802199, 'no_speech_prob': 0.008255358785390854}, {'id': 748, 'seek': 361924, 'start': 3627.8799999999997, 'end': 3634.8799999999997, 'text': ' What can you do with it?', 'tokens': [50796, 708, 393, 291, 360, 365, 309, 30, 51146], 'temperature': 0.0, 'avg_logprob': -0.3003116730720766, 'compression_ratio': 1.2197802197802199, 'no_speech_prob': 0.008255358785390854}, {'id': 749, 'seek': 361924, 'start': 3645.24, 'end': 3648.7999999999997, 'text': ' Does everyone understand what he said?', 'tokens': [51664, 4402, 1518, 1223, 437, 415, 848, 30, 51842], 'temperature': 0.0, 'avg_logprob': -0.3003116730720766, 'compression_ratio': 1.2197802197802199, 'no_speech_prob': 0.008255358785390854}, {'id': 750, 'seek': 364880, 'start': 3648.8, 'end': 3655.8, 'text': ' So there is something called a set jump and long jump in C. So you can think of it like', 'tokens': [50364, 407, 456, 307, 746, 1219, 257, 992, 3012, 293, 938, 3012, 294, 383, 13, 407, 291, 393, 519, 295, 309, 411, 50714], 'temperature': 0.0, 'avg_logprob': -0.2020906066894531, 'compression_ratio': 1.7456140350877194, 'no_speech_prob': 0.12782396376132965}, {'id': 751, 'seek': 364880, 'start': 3657.0800000000004, 'end': 3663.0, 'text': ' similar to exception handling in C++ where instead of returning to caller, immediate', 'tokens': [50778, 2531, 281, 11183, 13175, 294, 383, 25472, 689, 2602, 295, 12678, 281, 48324, 11, 11629, 51074], 'temperature': 0.0, 'avg_logprob': -0.2020906066894531, 'compression_ratio': 1.7456140350877194, 'no_speech_prob': 0.12782396376132965}, {'id': 752, 'seek': 364880, 'start': 3663.0, 'end': 3666.88, 'text': ' caller, you may return to arbitrary points.', 'tokens': [51074, 48324, 11, 291, 815, 2736, 281, 23211, 2793, 13, 51268], 'temperature': 0.0, 'avg_logprob': -0.2020906066894531, 'compression_ratio': 1.7456140350877194, 'no_speech_prob': 0.12782396376132965}, {'id': 753, 'seek': 364880, 'start': 3666.88, 'end': 3672.52, 'text': ' So let us say you have main was calling foo, foo was calling bar, bar was calling foo bar.', 'tokens': [51268, 407, 718, 505, 584, 291, 362, 2135, 390, 5141, 726, 78, 11, 726, 78, 390, 5141, 2159, 11, 2159, 390, 5141, 726, 78, 2159, 13, 51550], 'temperature': 0.0, 'avg_logprob': -0.2020906066894531, 'compression_ratio': 1.7456140350877194, 'no_speech_prob': 0.12782396376132965}, {'id': 754, 'seek': 364880, 'start': 3672.52, 'end': 3678.04, 'text': ' You can actually jump back directly from foo bar to main without having to go through this', 'tokens': [51550, 509, 393, 767, 3012, 646, 3838, 490, 726, 78, 2159, 281, 2135, 1553, 1419, 281, 352, 807, 341, 51826], 'temperature': 0.0, 'avg_logprob': -0.2020906066894531, 'compression_ratio': 1.7456140350877194, 'no_speech_prob': 0.12782396376132965}, {'id': 755, 'seek': 367804, 'start': 3678.04, 'end': 3679.2, 'text': ' chain.', 'tokens': [50364, 5021, 13, 50422], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 756, 'seek': 367804, 'start': 3679.2, 'end': 3682.7599999999998, 'text': ' But that is again out of scope for this module just for the record.', 'tokens': [50422, 583, 300, 307, 797, 484, 295, 11923, 337, 341, 10088, 445, 337, 264, 2136, 13, 50600], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 757, 'seek': 367804, 'start': 3682.7599999999998, 'end': 3688.4, 'text': ' I am not going to talk about how set jumps and long jumps are implemented.', 'tokens': [50600, 286, 669, 406, 516, 281, 751, 466, 577, 992, 16704, 293, 938, 16704, 366, 12270, 13, 50882], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 758, 'seek': 367804, 'start': 3688.4, 'end': 3692.4, 'text': ' Any other use you can think of?', 'tokens': [50882, 2639, 661, 764, 291, 393, 519, 295, 30, 51082], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 759, 'seek': 367804, 'start': 3692.4, 'end': 3696.92, 'text': ' It does not seem like something very common.', 'tokens': [51082, 467, 775, 406, 1643, 411, 746, 588, 2689, 13, 51308], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 760, 'seek': 367804, 'start': 3696.92, 'end': 3701.6, 'text': ' But we will see tomorrow where to use this.', 'tokens': [51308, 583, 321, 486, 536, 4153, 689, 281, 764, 341, 13, 51542], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 761, 'seek': 367804, 'start': 3701.6, 'end': 3707.92, 'text': ' So remember this that way to get address of the current instruction is by doing this where', 'tokens': [51542, 407, 1604, 341, 300, 636, 281, 483, 2985, 295, 264, 2190, 10951, 307, 538, 884, 341, 689, 51858], 'temperature': 0.0, 'avg_logprob': -0.1847127893919586, 'compression_ratio': 1.6116071428571428, 'no_speech_prob': 0.0008687451481819153}, {'id': 762, 'seek': 370792, 'start': 3707.92, 'end': 3712.6, 'text': ' you call the next instruction and you pop from the stack.', 'tokens': [50364, 291, 818, 264, 958, 10951, 293, 291, 1665, 490, 264, 8630, 13, 50598], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 763, 'seek': 370792, 'start': 3712.6, 'end': 3717.28, 'text': ' And we will see tomorrow where we actually can use this trick to implement something.', 'tokens': [50598, 400, 321, 486, 536, 4153, 689, 321, 767, 393, 764, 341, 4282, 281, 4445, 746, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 764, 'seek': 370792, 'start': 3717.28, 'end': 3723.16, 'text': ' Now so far what we have seen is how the control transfer happened.', 'tokens': [50832, 823, 370, 1400, 437, 321, 362, 1612, 307, 577, 264, 1969, 5003, 2011, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 765, 'seek': 370792, 'start': 3723.16, 'end': 3725.04, 'text': ' Any doubts in that?', 'tokens': [51126, 2639, 22618, 294, 300, 30, 51220], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 766, 'seek': 370792, 'start': 3725.04, 'end': 3728.04, 'text': ' How call and return happened?', 'tokens': [51220, 1012, 818, 293, 2736, 2011, 30, 51370], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 767, 'seek': 370792, 'start': 3728.04, 'end': 3729.04, 'text': ' Yes.', 'tokens': [51370, 1079, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 768, 'seek': 370792, 'start': 3729.04, 'end': 3736.04, 'text': ' What is the function to call?', 'tokens': [51420, 708, 307, 264, 2445, 281, 818, 30, 51770], 'temperature': 0.0, 'avg_logprob': -0.30989769177559096, 'compression_ratio': 1.5051020408163265, 'no_speech_prob': 0.0002958312106784433}, {'id': 769, 'seek': 373604, 'start': 3736.04, 'end': 3737.24, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50424], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 770, 'seek': 373604, 'start': 3737.24, 'end': 3744.08, 'text': ' So that goes into, so proper use requires just before the write instruction to have', 'tokens': [50424, 407, 300, 1709, 666, 11, 370, 2296, 764, 7029, 445, 949, 264, 2464, 10951, 281, 362, 50766], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 771, 'seek': 373604, 'start': 3744.08, 'end': 3746.0, 'text': ' written address on the stack.', 'tokens': [50766, 3720, 2985, 322, 264, 8630, 13, 50862], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 772, 'seek': 373604, 'start': 3746.0, 'end': 3753.52, 'text': ' If you do not do this, then you have arbitrary code and then anything can happen.', 'tokens': [50862, 759, 291, 360, 406, 360, 341, 11, 550, 291, 362, 23211, 3089, 293, 550, 1340, 393, 1051, 13, 51238], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 773, 'seek': 373604, 'start': 3753.52, 'end': 3761.72, 'text': ' So if you do not, that is why compiler generated code typically will not have such things.', 'tokens': [51238, 407, 498, 291, 360, 406, 11, 300, 307, 983, 31958, 10833, 3089, 5850, 486, 406, 362, 1270, 721, 13, 51648], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 774, 'seek': 373604, 'start': 3761.72, 'end': 3765.8, 'text': ' And whenever you are writing, that is why you need to be aware of these kinds of things.', 'tokens': [51648, 400, 5699, 291, 366, 3579, 11, 300, 307, 983, 291, 643, 281, 312, 3650, 295, 613, 3685, 295, 721, 13, 51852], 'temperature': 0.0, 'avg_logprob': -0.174658203125, 'compression_ratio': 1.6916299559471366, 'no_speech_prob': 0.000345758133335039}, {'id': 775, 'seek': 376580, 'start': 3765.8, 'end': 3771.96, 'text': ' So if you are aware of these semantics, then you can generate code that way.', 'tokens': [50364, 407, 498, 291, 366, 3650, 295, 613, 4361, 45298, 11, 550, 291, 393, 8460, 3089, 300, 636, 13, 50672], 'temperature': 0.0, 'avg_logprob': -0.16367149353027344, 'compression_ratio': 1.5635359116022098, 'no_speech_prob': 0.0021811567712575197}, {'id': 776, 'seek': 376580, 'start': 3771.96, 'end': 3777.1200000000003, 'text': ' What will happen is if you have arbitrary thing on the stack, it will simply happily', 'tokens': [50672, 708, 486, 1051, 307, 498, 291, 362, 23211, 551, 322, 264, 8630, 11, 309, 486, 2935, 19909, 50930], 'temperature': 0.0, 'avg_logprob': -0.16367149353027344, 'compression_ratio': 1.5635359116022098, 'no_speech_prob': 0.0021811567712575197}, {'id': 777, 'seek': 376580, 'start': 3777.1200000000003, 'end': 3781.8, 'text': ' use that address and start executing that.', 'tokens': [50930, 764, 300, 2985, 293, 722, 32368, 300, 13, 51164], 'temperature': 0.0, 'avg_logprob': -0.16367149353027344, 'compression_ratio': 1.5635359116022098, 'no_speech_prob': 0.0021811567712575197}, {'id': 778, 'seek': 376580, 'start': 3781.8, 'end': 3785.1200000000003, 'text': ' No.', 'tokens': [51164, 883, 13, 51330], 'temperature': 0.0, 'avg_logprob': -0.16367149353027344, 'compression_ratio': 1.5635359116022098, 'no_speech_prob': 0.0021811567712575197}, {'id': 779, 'seek': 376580, 'start': 3785.1200000000003, 'end': 3790.6000000000004, 'text': ' Can you write analysis which will detect if stack is in the correct state?', 'tokens': [51330, 1664, 291, 2464, 5215, 597, 486, 5531, 498, 8630, 307, 294, 264, 3006, 1785, 30, 51604], 'temperature': 0.0, 'avg_logprob': -0.16367149353027344, 'compression_ratio': 1.5635359116022098, 'no_speech_prob': 0.0021811567712575197}, {'id': 780, 'seek': 379060, 'start': 3790.6, 'end': 3794.3399999999997, 'text': ' So let us say you are seeing the assembly code.', 'tokens': [50364, 407, 718, 505, 584, 291, 366, 2577, 264, 12103, 3089, 13, 50551], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 781, 'seek': 379060, 'start': 3794.3399999999997, 'end': 3803.08, 'text': ' How will you analyze that stack is in the correct shape just before the return?', 'tokens': [50551, 1012, 486, 291, 12477, 300, 8630, 307, 294, 264, 3006, 3909, 445, 949, 264, 2736, 30, 50988], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 782, 'seek': 379060, 'start': 3803.08, 'end': 3804.7999999999997, 'text': ' Do you always know?', 'tokens': [50988, 1144, 291, 1009, 458, 30, 51074], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 783, 'seek': 379060, 'start': 3804.7999999999997, 'end': 3808.96, 'text': ' What if there is a loop with n and I am doing something?', 'tokens': [51074, 708, 498, 456, 307, 257, 6367, 365, 297, 293, 286, 669, 884, 746, 30, 51282], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 784, 'seek': 379060, 'start': 3808.96, 'end': 3814.88, 'text': ' I mean you could do something statically, but may not be possible always.', 'tokens': [51282, 286, 914, 291, 727, 360, 746, 2219, 984, 11, 457, 815, 406, 312, 1944, 1009, 13, 51578], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 785, 'seek': 379060, 'start': 3814.88, 'end': 3819.24, 'text': ' But in simplistic case, yes, you could say that there are three pushes here and three', 'tokens': [51578, 583, 294, 44199, 1389, 11, 2086, 11, 291, 727, 584, 300, 456, 366, 1045, 21020, 510, 293, 1045, 51796], 'temperature': 0.0, 'avg_logprob': -0.21048827881508686, 'compression_ratio': 1.60352422907489, 'no_speech_prob': 0.031527720391750336}, {'id': 786, 'seek': 381924, 'start': 3819.24, 'end': 3820.24, 'text': ' pops here.', 'tokens': [50364, 16795, 510, 13, 50414], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 787, 'seek': 381924, 'start': 3820.24, 'end': 3823.24, 'text': ' So I must be in good shape.', 'tokens': [50414, 407, 286, 1633, 312, 294, 665, 3909, 13, 50564], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 788, 'seek': 381924, 'start': 3823.24, 'end': 3824.24, 'text': ' Correct.', 'tokens': [50564, 12753, 13, 50614], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 789, 'seek': 381924, 'start': 3824.24, 'end': 3825.24, 'text': ' Yes.', 'tokens': [50614, 1079, 13, 50664], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 790, 'seek': 381924, 'start': 3825.24, 'end': 3832.12, 'text': ' So now let us look at the local variables.', 'tokens': [50664, 407, 586, 718, 505, 574, 412, 264, 2654, 9102, 13, 51008], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 791, 'seek': 381924, 'start': 3832.12, 'end': 3838.16, 'text': ' So a function can essentially define local variables which it can use for its operation.', 'tokens': [51008, 407, 257, 2445, 393, 4476, 6964, 2654, 9102, 597, 309, 393, 764, 337, 1080, 6916, 13, 51310], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 792, 'seek': 381924, 'start': 3838.16, 'end': 3843.4799999999996, 'text': ' And there are two types of local variables, CC++ supports.', 'tokens': [51310, 400, 456, 366, 732, 3467, 295, 2654, 9102, 11, 12630, 25472, 9346, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 793, 'seek': 381924, 'start': 3843.4799999999996, 'end': 3847.14, 'text': ' One is variables which have auto storage or default storage.', 'tokens': [51576, 1485, 307, 9102, 597, 362, 8399, 6725, 420, 7576, 6725, 13, 51759], 'temperature': 0.0, 'avg_logprob': -0.2605070550757718, 'compression_ratio': 1.6170212765957446, 'no_speech_prob': 0.20156925916671753}, {'id': 794, 'seek': 384714, 'start': 3847.14, 'end': 3852.7799999999997, 'text': ' So whenever you write something like int var, it is something with the auto storage', 'tokens': [50364, 407, 5699, 291, 2464, 746, 411, 560, 1374, 11, 309, 307, 746, 365, 264, 8399, 6725, 50646], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 795, 'seek': 384714, 'start': 3852.7799999999997, 'end': 3856.5, 'text': ' and you can also write something as static.', 'tokens': [50646, 293, 291, 393, 611, 2464, 746, 382, 13437, 13, 50832], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 796, 'seek': 384714, 'start': 3856.5, 'end': 3858.9, 'text': ' What is the difference between the two?', 'tokens': [50832, 708, 307, 264, 2649, 1296, 264, 732, 30, 50952], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 797, 'seek': 384714, 'start': 3858.9, 'end': 3859.9, 'text': ' Yes.', 'tokens': [50952, 1079, 13, 51002], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 798, 'seek': 384714, 'start': 3859.9, 'end': 3860.9, 'text': ' Correct.', 'tokens': [51002, 12753, 13, 51052], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 799, 'seek': 384714, 'start': 3860.9, 'end': 3869.46, 'text': ' So essentially, the scope of the variables is only within the function.', 'tokens': [51052, 407, 4476, 11, 264, 11923, 295, 264, 9102, 307, 787, 1951, 264, 2445, 13, 51480], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 800, 'seek': 384714, 'start': 3869.46, 'end': 3874.1, 'text': ' That means I cannot access CNT outside this function.', 'tokens': [51480, 663, 1355, 286, 2644, 2105, 14589, 51, 2380, 341, 2445, 13, 51712], 'temperature': 0.0, 'avg_logprob': -0.22680373069567558, 'compression_ratio': 1.566326530612245, 'no_speech_prob': 0.12553071975708008}, {'id': 801, 'seek': 387410, 'start': 3874.1, 'end': 3878.3199999999997, 'text': ' Same way I cannot access var outside this function.', 'tokens': [50364, 10635, 636, 286, 2644, 2105, 1374, 2380, 341, 2445, 13, 50575], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 802, 'seek': 387410, 'start': 3878.3199999999997, 'end': 3881.2999999999997, 'text': ' But the lifetime is actually different.', 'tokens': [50575, 583, 264, 11364, 307, 767, 819, 13, 50724], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 803, 'seek': 387410, 'start': 3881.2999999999997, 'end': 3888.18, 'text': ' So var and arr are actually have lifetime only of the function.', 'tokens': [50724, 407, 1374, 293, 5539, 366, 767, 362, 11364, 787, 295, 264, 2445, 13, 51068], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 804, 'seek': 387410, 'start': 3888.18, 'end': 3892.06, 'text': ' So whenever the function is called, they are created and whenever the function returns,', 'tokens': [51068, 407, 5699, 264, 2445, 307, 1219, 11, 436, 366, 2942, 293, 5699, 264, 2445, 11247, 11, 51262], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 805, 'seek': 387410, 'start': 3892.06, 'end': 3893.7999999999997, 'text': ' they are destroyed.', 'tokens': [51262, 436, 366, 8937, 13, 51349], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 806, 'seek': 387410, 'start': 3893.7999999999997, 'end': 3898.22, 'text': ' Static variables on the other hand are created for the entire life of the program.', 'tokens': [51349, 745, 2399, 9102, 322, 264, 661, 1011, 366, 2942, 337, 264, 2302, 993, 295, 264, 1461, 13, 51570], 'temperature': 0.0, 'avg_logprob': -0.16138568925268856, 'compression_ratio': 1.8210526315789475, 'no_speech_prob': 0.147867813706398}, {'id': 807, 'seek': 389822, 'start': 3899.22, 'end': 3904.5, 'text': ' their values even if you call the same function multiple times.', 'tokens': [50414, 641, 4190, 754, 498, 291, 818, 264, 912, 2445, 3866, 1413, 13, 50678], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 808, 'seek': 389822, 'start': 3904.5, 'end': 3909.7, 'text': ' And when do you think are auto variables allocated?', 'tokens': [50678, 400, 562, 360, 291, 519, 366, 8399, 9102, 29772, 30, 50938], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 809, 'seek': 389822, 'start': 3909.7, 'end': 3913.18, 'text': ' So every time you call a function, you need to allocate them.', 'tokens': [50938, 407, 633, 565, 291, 818, 257, 2445, 11, 291, 643, 281, 35713, 552, 13, 51112], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 810, 'seek': 389822, 'start': 3913.18, 'end': 3918.3799999999997, 'text': ' So every time a function is called, they are allocated, initialized and deallocated every', 'tokens': [51112, 407, 633, 565, 257, 2445, 307, 1219, 11, 436, 366, 29772, 11, 5883, 1602, 293, 368, 336, 905, 770, 633, 51372], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 811, 'seek': 389822, 'start': 3918.3799999999997, 'end': 3920.8199999999997, 'text': ' time the function returns.', 'tokens': [51372, 565, 264, 2445, 11247, 13, 51494], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 812, 'seek': 389822, 'start': 3920.8199999999997, 'end': 3927.66, 'text': ' Static variables we will see later on how they are allocated and what happens to them.', 'tokens': [51494, 745, 2399, 9102, 321, 486, 536, 1780, 322, 577, 436, 366, 29772, 293, 437, 2314, 281, 552, 13, 51836], 'temperature': 0.0, 'avg_logprob': -0.1461261421121577, 'compression_ratio': 1.8955223880597014, 'no_speech_prob': 0.4756297171115875}, {'id': 813, 'seek': 392766, 'start': 3927.66, 'end': 3932.02, 'text': ' So where should we store auto variables?', 'tokens': [50364, 407, 689, 820, 321, 3531, 8399, 9102, 30, 50582], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 814, 'seek': 392766, 'start': 3932.02, 'end': 3933.98, 'text': ' Still go step by step.', 'tokens': [50582, 8291, 352, 1823, 538, 1823, 13, 50680], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 815, 'seek': 392766, 'start': 3933.98, 'end': 3937.46, 'text': ' Can we store them in registers?', 'tokens': [50680, 1664, 321, 3531, 552, 294, 38351, 30, 50854], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 816, 'seek': 392766, 'start': 3937.46, 'end': 3938.46, 'text': ' Why not?', 'tokens': [50854, 1545, 406, 30, 50904], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 817, 'seek': 392766, 'start': 3938.46, 'end': 3939.46, 'text': ' Correct.', 'tokens': [50904, 12753, 13, 50954], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 818, 'seek': 392766, 'start': 3939.46, 'end': 3945.54, 'text': ' So the first problem is limited registers.', 'tokens': [50954, 407, 264, 700, 1154, 307, 5567, 38351, 13, 51258], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 819, 'seek': 392766, 'start': 3945.54, 'end': 3948.54, 'text': ' But are there any other cases?', 'tokens': [51258, 583, 366, 456, 604, 661, 3331, 30, 51408], 'temperature': 0.0, 'avg_logprob': -0.34461232235557154, 'compression_ratio': 1.3955223880597014, 'no_speech_prob': 0.07589361071586609}, {'id': 820, 'seek': 394854, 'start': 3948.54, 'end': 3964.94, 'text': ' Okay, so we will come to that.', 'tokens': [50364, 1033, 11, 370, 321, 486, 808, 281, 300, 13, 51184], 'temperature': 0.0, 'avg_logprob': -0.47981492678324383, 'compression_ratio': 1.3571428571428572, 'no_speech_prob': 0.12575092911720276}, {'id': 821, 'seek': 394854, 'start': 3964.94, 'end': 3969.86, 'text': ' So let us say I have a function, let us say which it does not call any other function.', 'tokens': [51184, 407, 718, 505, 584, 286, 362, 257, 2445, 11, 718, 505, 584, 597, 309, 775, 406, 818, 604, 661, 2445, 13, 51430], 'temperature': 0.0, 'avg_logprob': -0.47981492678324383, 'compression_ratio': 1.3571428571428572, 'no_speech_prob': 0.12575092911720276}, {'id': 822, 'seek': 394854, 'start': 3969.86, 'end': 3972.86, 'text': ' Let us hypothetically assume.', 'tokens': [51430, 961, 505, 24371, 22652, 6552, 13, 51580], 'temperature': 0.0, 'avg_logprob': -0.47981492678324383, 'compression_ratio': 1.3571428571428572, 'no_speech_prob': 0.12575092911720276}, {'id': 823, 'seek': 394854, 'start': 3972.86, 'end': 3973.86, 'text': ' Yes.', 'tokens': [51580, 1079, 13, 51630], 'temperature': 0.0, 'avg_logprob': -0.47981492678324383, 'compression_ratio': 1.3571428571428572, 'no_speech_prob': 0.12575092911720276}, {'id': 824, 'seek': 397386, 'start': 3973.86, 'end': 3982.02, 'text': ' So that is one problem you already discussed that you have more number of variables than', 'tokens': [50364, 407, 300, 307, 472, 1154, 291, 1217, 7152, 300, 291, 362, 544, 1230, 295, 9102, 813, 50772], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 825, 'seek': 397386, 'start': 3982.02, 'end': 3987.1800000000003, 'text': ' you have registers.', 'tokens': [50772, 291, 362, 38351, 13, 51030], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 826, 'seek': 397386, 'start': 3987.1800000000003, 'end': 3991.3, 'text': ' So let us say I have array of four elements.', 'tokens': [51030, 407, 718, 505, 584, 286, 362, 10225, 295, 1451, 4959, 13, 51236], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 827, 'seek': 397386, 'start': 3991.3, 'end': 3995.26, 'text': ' Can I store it in four registers?', 'tokens': [51236, 1664, 286, 3531, 309, 294, 1451, 38351, 30, 51434], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 828, 'seek': 397386, 'start': 3995.26, 'end': 3999.46, 'text': ' So let us say number of registers is not an issue.', 'tokens': [51434, 407, 718, 505, 584, 1230, 295, 38351, 307, 406, 364, 2734, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 829, 'seek': 397386, 'start': 3999.46, 'end': 4000.46, 'text': ' For now.', 'tokens': [51644, 1171, 586, 13, 51694], 'temperature': 0.0, 'avg_logprob': -0.27094243554507985, 'compression_ratio': 1.625, 'no_speech_prob': 0.07992745190858841}, {'id': 830, 'seek': 400046, 'start': 4001.02, 'end': 4002.54, 'text': ' That is always a practical problem.', 'tokens': [50392, 663, 307, 1009, 257, 8496, 1154, 13, 50468], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 831, 'seek': 400046, 'start': 4002.54, 'end': 4008.58, 'text': ' But for now, let us assume you have either two very few local variables or you have many', 'tokens': [50468, 583, 337, 586, 11, 718, 505, 6552, 291, 362, 2139, 732, 588, 1326, 2654, 9102, 420, 291, 362, 867, 50770], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 832, 'seek': 400046, 'start': 4008.58, 'end': 4009.58, 'text': ' registers.', 'tokens': [50770, 38351, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 833, 'seek': 400046, 'start': 4009.58, 'end': 4011.3, 'text': ' In that case, what are the problems?', 'tokens': [50820, 682, 300, 1389, 11, 437, 366, 264, 2740, 30, 50906], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 834, 'seek': 400046, 'start': 4011.3, 'end': 4012.92, 'text': ' Can you still have?', 'tokens': [50906, 1664, 291, 920, 362, 30, 50987], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 835, 'seek': 400046, 'start': 4012.92, 'end': 4016.78, 'text': ' So let us say you had five variables and five registers available.', 'tokens': [50987, 407, 718, 505, 584, 291, 632, 1732, 9102, 293, 1732, 38351, 2435, 13, 51180], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 836, 'seek': 400046, 'start': 4016.78, 'end': 4022.98, 'text': ' Can I always store my variables into registers?', 'tokens': [51180, 1664, 286, 1009, 3531, 452, 9102, 666, 38351, 30, 51490], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 837, 'seek': 400046, 'start': 4022.98, 'end': 4027.34, 'text': ' So that is also not an issue.', 'tokens': [51490, 407, 300, 307, 611, 406, 364, 2734, 13, 51708], 'temperature': 0.0, 'avg_logprob': -0.2719360775417752, 'compression_ratio': 1.719387755102041, 'no_speech_prob': 0.49810487031936646}, {'id': 838, 'seek': 402734, 'start': 4027.34, 'end': 4031.6600000000003, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50580], 'temperature': 0.0, 'avg_logprob': -0.29448675641826555, 'compression_ratio': 1.3221476510067114, 'no_speech_prob': 0.01034009549766779}, {'id': 839, 'seek': 402734, 'start': 4031.6600000000003, 'end': 4048.86, 'text': ' So essentially, you might have ISA constraints, where a particular register may need to be', 'tokens': [50580, 407, 4476, 11, 291, 1062, 362, 6205, 32, 18491, 11, 689, 257, 1729, 7280, 815, 643, 281, 312, 51440], 'temperature': 0.0, 'avg_logprob': -0.29448675641826555, 'compression_ratio': 1.3221476510067114, 'no_speech_prob': 0.01034009549766779}, {'id': 840, 'seek': 402734, 'start': 4048.86, 'end': 4055.1800000000003, 'text': ' free for some reason, because the instruction implicitly modifies it and so on.', 'tokens': [51440, 1737, 337, 512, 1778, 11, 570, 264, 10951, 26947, 356, 1072, 11221, 309, 293, 370, 322, 13, 51756], 'temperature': 0.0, 'avg_logprob': -0.29448675641826555, 'compression_ratio': 1.3221476510067114, 'no_speech_prob': 0.01034009549766779}, {'id': 841, 'seek': 402734, 'start': 4055.1800000000003, 'end': 4056.54, 'text': ' Leave that aside.', 'tokens': [51756, 9825, 300, 7359, 13, 51824], 'temperature': 0.0, 'avg_logprob': -0.29448675641826555, 'compression_ratio': 1.3221476510067114, 'no_speech_prob': 0.01034009549766779}, {'id': 842, 'seek': 405654, 'start': 4056.54, 'end': 4060.38, 'text': ' So let us leave aside all the register related issues.', 'tokens': [50364, 407, 718, 505, 1856, 7359, 439, 264, 7280, 4077, 2663, 13, 50556], 'temperature': 0.0, 'avg_logprob': -0.22535297917384728, 'compression_ratio': 1.5182481751824817, 'no_speech_prob': 0.004887452814728022}, {'id': 843, 'seek': 405654, 'start': 4060.38, 'end': 4062.46, 'text': ' You have sufficient registers.', 'tokens': [50556, 509, 362, 11563, 38351, 13, 50660], 'temperature': 0.0, 'avg_logprob': -0.22535297917384728, 'compression_ratio': 1.5182481751824817, 'no_speech_prob': 0.004887452814728022}, {'id': 844, 'seek': 405654, 'start': 4062.46, 'end': 4070.18, 'text': ' You have registers which you can truly use for your purpose and there is no other issue.', 'tokens': [50660, 509, 362, 38351, 597, 291, 393, 4908, 764, 337, 428, 4334, 293, 456, 307, 572, 661, 2734, 13, 51046], 'temperature': 0.0, 'avg_logprob': -0.22535297917384728, 'compression_ratio': 1.5182481751824817, 'no_speech_prob': 0.004887452814728022}, {'id': 845, 'seek': 405654, 'start': 4070.18, 'end': 4078.62, 'text': ' So why do you think that matters?', 'tokens': [51046, 407, 983, 360, 291, 519, 300, 7001, 30, 51468], 'temperature': 0.0, 'avg_logprob': -0.22535297917384728, 'compression_ratio': 1.5182481751824817, 'no_speech_prob': 0.004887452814728022}, {'id': 846, 'seek': 408654, 'start': 4087.34, 'end': 4091.82, 'text': ' So one issue which she is saying is data types might create a problem.', 'tokens': [50404, 407, 472, 2734, 597, 750, 307, 1566, 307, 1412, 3467, 1062, 1884, 257, 1154, 13, 50628], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 847, 'seek': 408654, 'start': 4091.82, 'end': 4096.3, 'text': ' But so to answer to that, what might happen is you might waste space.', 'tokens': [50628, 583, 370, 281, 1867, 281, 300, 11, 437, 1062, 1051, 307, 291, 1062, 5964, 1901, 13, 50852], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 848, 'seek': 408654, 'start': 4096.3, 'end': 4101.5, 'text': ' For example, you might say that even character I am storing in a 32 bit register.', 'tokens': [50852, 1171, 1365, 11, 291, 1062, 584, 300, 754, 2517, 286, 669, 26085, 294, 257, 8858, 857, 7280, 13, 51112], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 849, 'seek': 408654, 'start': 4101.5, 'end': 4109.74, 'text': ' So it is a waste of space in the register, but that is not the most interesting problem.', 'tokens': [51112, 407, 309, 307, 257, 5964, 295, 1901, 294, 264, 7280, 11, 457, 300, 307, 406, 264, 881, 1880, 1154, 13, 51524], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 850, 'seek': 408654, 'start': 4109.74, 'end': 4110.74, 'text': ' Let us say array.', 'tokens': [51524, 961, 505, 584, 10225, 13, 51574], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 851, 'seek': 408654, 'start': 4110.74, 'end': 4113.18, 'text': ' So let us say I have declared an array.', 'tokens': [51574, 407, 718, 505, 584, 286, 362, 15489, 364, 10225, 13, 51696], 'temperature': 0.0, 'avg_logprob': -0.2188761380254006, 'compression_ratio': 1.669683257918552, 'no_speech_prob': 0.3578360378742218}, {'id': 852, 'seek': 411318, 'start': 4113.66, 'end': 4117.26, 'text': ' Array of four and I have four registers available.', 'tokens': [50388, 1587, 3458, 295, 1451, 293, 286, 362, 1451, 38351, 2435, 13, 50568], 'temperature': 0.0, 'avg_logprob': -0.45664379643458947, 'compression_ratio': 1.2377049180327868, 'no_speech_prob': 0.6576539874076843}, {'id': 853, 'seek': 411318, 'start': 4117.26, 'end': 4119.26, 'text': ' Can I store array in?', 'tokens': [50568, 1664, 286, 3531, 10225, 294, 30, 50668], 'temperature': 0.0, 'avg_logprob': -0.45664379643458947, 'compression_ratio': 1.2377049180327868, 'no_speech_prob': 0.6576539874076843}, {'id': 854, 'seek': 411318, 'start': 4119.26, 'end': 4121.26, 'text': ' How?', 'tokens': [50668, 1012, 30, 50768], 'temperature': 0.0, 'avg_logprob': -0.45664379643458947, 'compression_ratio': 1.2377049180327868, 'no_speech_prob': 0.6576539874076843}, {'id': 855, 'seek': 411318, 'start': 4135.26, 'end': 4142.3, 'text': ' So when I do EA, somehow when I do address of EAX plus one, do I get EBX?', 'tokens': [51468, 407, 562, 286, 360, 35747, 11, 6063, 562, 286, 360, 2985, 295, 35747, 55, 1804, 472, 11, 360, 286, 483, 50148, 55, 30, 51820], 'temperature': 0.0, 'avg_logprob': -0.45664379643458947, 'compression_ratio': 1.2377049180327868, 'no_speech_prob': 0.6576539874076843}, {'id': 856, 'seek': 414318, 'start': 4143.18, 'end': 4147.18, 'text': ' Okay.', 'tokens': [50364, 1033, 13, 50564], 'temperature': 0.0, 'avg_logprob': -0.4360691381960499, 'compression_ratio': 1.2372881355932204, 'no_speech_prob': 0.009784640744328499}, {'id': 857, 'seek': 414318, 'start': 4161.18, 'end': 4162.22, 'text': ' Correct.', 'tokens': [51264, 12753, 13, 51316], 'temperature': 0.0, 'avg_logprob': -0.4360691381960499, 'compression_ratio': 1.2372881355932204, 'no_speech_prob': 0.009784640744328499}, {'id': 858, 'seek': 414318, 'start': 4162.22, 'end': 4165.18, 'text': ' So that is getting to core of the issue.', 'tokens': [51316, 407, 300, 307, 1242, 281, 4965, 295, 264, 2734, 13, 51464], 'temperature': 0.0, 'avg_logprob': -0.4360691381960499, 'compression_ratio': 1.2372881355932204, 'no_speech_prob': 0.009784640744328499}, {'id': 859, 'seek': 414318, 'start': 4165.18, 'end': 4168.22, 'text': ' So essentially think of it this way.', 'tokens': [51464, 407, 4476, 519, 295, 309, 341, 636, 13, 51616], 'temperature': 0.0, 'avg_logprob': -0.4360691381960499, 'compression_ratio': 1.2372881355932204, 'no_speech_prob': 0.009784640744328499}, {'id': 860, 'seek': 414318, 'start': 4168.22, 'end': 4172.38, 'text': ' So let us say I had declared a, can I use whiteboard?', 'tokens': [51616, 407, 718, 505, 584, 286, 632, 15489, 257, 11, 393, 286, 764, 2418, 3787, 30, 51824], 'temperature': 0.0, 'avg_logprob': -0.4360691381960499, 'compression_ratio': 1.2372881355932204, 'no_speech_prob': 0.009784640744328499}, {'id': 861, 'seek': 417238, 'start': 4172.38, 'end': 4173.58, 'text': ' I will switch to terminal.', 'tokens': [50364, 286, 486, 3679, 281, 14709, 13, 50424], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 862, 'seek': 417238, 'start': 4173.58, 'end': 4176.22, 'text': ' I think that might be easy.', 'tokens': [50424, 286, 519, 300, 1062, 312, 1858, 13, 50556], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 863, 'seek': 417238, 'start': 4176.22, 'end': 4181.42, 'text': ' So let us say I have this function foo, to which I get an index.', 'tokens': [50556, 407, 718, 505, 584, 286, 362, 341, 2445, 726, 78, 11, 281, 597, 286, 483, 364, 8186, 13, 50816], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 864, 'seek': 417238, 'start': 4181.42, 'end': 4190.3, 'text': ' And I declare int error of four.', 'tokens': [50816, 400, 286, 19710, 560, 6713, 295, 1451, 13, 51260], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 865, 'seek': 417238, 'start': 4190.3, 'end': 4199.82, 'text': ' And I do printf percent d error of i.', 'tokens': [51260, 400, 286, 360, 4482, 69, 3043, 274, 6713, 295, 741, 13, 51736], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 866, 'seek': 417238, 'start': 4199.82, 'end': 4201.26, 'text': ' How will this code work?', 'tokens': [51736, 1012, 486, 341, 3089, 589, 30, 51808], 'temperature': 0.0, 'avg_logprob': -0.2435650416782924, 'compression_ratio': 1.4052287581699345, 'no_speech_prob': 0.0005609774962067604}, {'id': 867, 'seek': 420126, 'start': 4201.26, 'end': 4212.62, 'text': ' So let us say I have put this in EAX, EBX, ECX, EDX.', 'tokens': [50364, 407, 718, 505, 584, 286, 362, 829, 341, 294, 35747, 55, 11, 50148, 55, 11, 19081, 55, 11, 18050, 55, 13, 50932], 'temperature': 0.0, 'avg_logprob': -0.24260817182824967, 'compression_ratio': 1.099009900990099, 'no_speech_prob': 0.0037441737949848175}, {'id': 868, 'seek': 420126, 'start': 4212.62, 'end': 4214.62, 'text': ' How will that work?', 'tokens': [50932, 1012, 486, 300, 589, 30, 51032], 'temperature': 0.0, 'avg_logprob': -0.24260817182824967, 'compression_ratio': 1.099009900990099, 'no_speech_prob': 0.0037441737949848175}, {'id': 869, 'seek': 420126, 'start': 4214.62, 'end': 4219.5, 'text': ' Correct.', 'tokens': [51032, 12753, 13, 51276], 'temperature': 0.0, 'avg_logprob': -0.24260817182824967, 'compression_ratio': 1.099009900990099, 'no_speech_prob': 0.0037441737949848175}, {'id': 870, 'seek': 420126, 'start': 4219.5, 'end': 4223.1, 'text': ' So one bad way is to do this.', 'tokens': [51276, 407, 472, 1578, 636, 307, 281, 360, 341, 13, 51456], 'temperature': 0.0, 'avg_logprob': -0.24260817182824967, 'compression_ratio': 1.099009900990099, 'no_speech_prob': 0.0037441737949848175}, {'id': 871, 'seek': 422310, 'start': 4223.900000000001, 'end': 4238.9400000000005, 'text': ' So it kind of undoes whatever optimizations you have learned and says generate bad code.', 'tokens': [50404, 407, 309, 733, 295, 23779, 279, 2035, 5028, 14455, 291, 362, 3264, 293, 1619, 8460, 1578, 3089, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.3019691733426826, 'compression_ratio': 1.3495934959349594, 'no_speech_prob': 0.03614366054534912}, {'id': 872, 'seek': 422310, 'start': 4238.9400000000005, 'end': 4240.9400000000005, 'text': ' So bad option.', 'tokens': [51156, 407, 1578, 3614, 13, 51256], 'temperature': 0.0, 'avg_logprob': -0.3019691733426826, 'compression_ratio': 1.3495934959349594, 'no_speech_prob': 0.03614366054534912}, {'id': 873, 'seek': 422310, 'start': 4240.9400000000005, 'end': 4246.9400000000005, 'text': ' The fundamental reason for this is what she was trying to say.', 'tokens': [51256, 440, 8088, 1778, 337, 341, 307, 437, 750, 390, 1382, 281, 584, 13, 51556], 'temperature': 0.0, 'avg_logprob': -0.3019691733426826, 'compression_ratio': 1.3495934959349594, 'no_speech_prob': 0.03614366054534912}, {'id': 874, 'seek': 424694, 'start': 4246.94, 'end': 4254.219999999999, 'text': ' That there is some indexing which is happening in my code, but the registers which I have', 'tokens': [50364, 663, 456, 307, 512, 8186, 278, 597, 307, 2737, 294, 452, 3089, 11, 457, 264, 38351, 597, 286, 362, 50728], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 875, 'seek': 424694, 'start': 4254.219999999999, 'end': 4255.82, 'text': ' are not indexable.', 'tokens': [50728, 366, 406, 8186, 712, 13, 50808], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 876, 'seek': 424694, 'start': 4255.82, 'end': 4257.099999999999, 'text': ' So I cannot do.', 'tokens': [50808, 407, 286, 2644, 360, 13, 50872], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 877, 'seek': 424694, 'start': 4257.099999999999, 'end': 4266.0599999999995, 'text': ' So if I had something like this, base register plus i gives me base reg of i.', 'tokens': [50872, 407, 498, 286, 632, 746, 411, 341, 11, 3096, 7280, 1804, 741, 2709, 385, 3096, 1121, 295, 741, 13, 51320], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 878, 'seek': 424694, 'start': 4266.0599999999995, 'end': 4270.7, 'text': ' If something like this was there, then I could actually do it.', 'tokens': [51320, 759, 746, 411, 341, 390, 456, 11, 550, 286, 727, 767, 360, 309, 13, 51552], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 879, 'seek': 424694, 'start': 4270.7, 'end': 4272.0199999999995, 'text': ' Okay.', 'tokens': [51552, 1033, 13, 51618], 'temperature': 0.0, 'avg_logprob': -0.14743795150365585, 'compression_ratio': 1.5941176470588236, 'no_speech_prob': 0.1598864644765854}, {'id': 880, 'seek': 427202, 'start': 4272.02, 'end': 4278.820000000001, 'text': ' So if my hardware had something like this, where if I do r0 plus 1, I get r1.', 'tokens': [50364, 407, 498, 452, 8837, 632, 746, 411, 341, 11, 689, 498, 286, 360, 367, 15, 1804, 502, 11, 286, 483, 367, 16, 13, 50704], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 881, 'seek': 427202, 'start': 4278.820000000001, 'end': 4282.820000000001, 'text': ' r1 plus 2, I get r4 and so on.', 'tokens': [50704, 367, 16, 1804, 568, 11, 286, 483, 367, 19, 293, 370, 322, 13, 50904], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 882, 'seek': 427202, 'start': 4282.820000000001, 'end': 4284.820000000001, 'text': ' Then I will actually be able to do it.', 'tokens': [50904, 1396, 286, 486, 767, 312, 1075, 281, 360, 309, 13, 51004], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 883, 'seek': 427202, 'start': 4284.820000000001, 'end': 4289.02, 'text': ' Otherwise the only option is to do this bad thing.', 'tokens': [51004, 10328, 264, 787, 3614, 307, 281, 360, 341, 1578, 551, 13, 51214], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 884, 'seek': 427202, 'start': 4289.02, 'end': 4292.1, 'text': ' Any other reasons which will force you to not use a register.', 'tokens': [51214, 2639, 661, 4112, 597, 486, 3464, 291, 281, 406, 764, 257, 7280, 13, 51368], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 885, 'seek': 427202, 'start': 4292.1, 'end': 4297.780000000001, 'text': ' So we saw one case where indexing is causing a problem.', 'tokens': [51368, 407, 321, 1866, 472, 1389, 689, 8186, 278, 307, 9853, 257, 1154, 13, 51652], 'temperature': 0.0, 'avg_logprob': -0.16991998731475516, 'compression_ratio': 1.5119617224880382, 'no_speech_prob': 0.015416935086250305}, {'id': 886, 'seek': 429778, 'start': 4297.78, 'end': 4301.78, 'text': ' Any other issues why you cannot use registers?', 'tokens': [50364, 2639, 661, 2663, 983, 291, 2644, 764, 38351, 30, 50564], 'temperature': 0.0, 'avg_logprob': -0.24774007236256318, 'compression_ratio': 1.5574712643678161, 'no_speech_prob': 0.017703194171190262}, {'id': 887, 'seek': 429778, 'start': 4301.78, 'end': 4308.46, 'text': ' Correct.', 'tokens': [50564, 12753, 13, 50898], 'temperature': 0.0, 'avg_logprob': -0.24774007236256318, 'compression_ratio': 1.5574712643678161, 'no_speech_prob': 0.017703194171190262}, {'id': 888, 'seek': 429778, 'start': 4308.46, 'end': 4312.62, 'text': ' But that is something register allocation should have already done.', 'tokens': [50898, 583, 300, 307, 746, 7280, 27599, 820, 362, 1217, 1096, 13, 51106], 'temperature': 0.0, 'avg_logprob': -0.24774007236256318, 'compression_ratio': 1.5574712643678161, 'no_speech_prob': 0.017703194171190262}, {'id': 889, 'seek': 429778, 'start': 4312.62, 'end': 4318.78, 'text': " So whenever you had a variable v, it was let's say allocated by register allocator to eax,", 'tokens': [51106, 407, 5699, 291, 632, 257, 7006, 371, 11, 309, 390, 718, 311, 584, 29772, 538, 7280, 12660, 1639, 281, 308, 2797, 11, 51414], 'temperature': 0.0, 'avg_logprob': -0.24774007236256318, 'compression_ratio': 1.5574712643678161, 'no_speech_prob': 0.017703194171190262}, {'id': 890, 'seek': 429778, 'start': 4318.78, 'end': 4322.5, 'text': ' then register allocator is keeping the map of some sort.', 'tokens': [51414, 550, 7280, 12660, 1639, 307, 5145, 264, 4471, 295, 512, 1333, 13, 51600], 'temperature': 0.0, 'avg_logprob': -0.24774007236256318, 'compression_ratio': 1.5574712643678161, 'no_speech_prob': 0.017703194171190262}, {'id': 891, 'seek': 432250, 'start': 4322.5, 'end': 4327.02, 'text': ' That wherever var is used, use eax.', 'tokens': [50364, 663, 8660, 1374, 307, 1143, 11, 764, 308, 2797, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 892, 'seek': 432250, 'start': 4327.02, 'end': 4329.02, 'text': ' Correct.', 'tokens': [50590, 12753, 13, 50690], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 893, 'seek': 432250, 'start': 4329.02, 'end': 4335.22, 'text': ' So, yeah.', 'tokens': [50690, 407, 11, 1338, 13, 51000], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 894, 'seek': 432250, 'start': 4335.22, 'end': 4341.7, 'text': ' So large, I mean data which does not fit into registers, there could be two reasons for', 'tokens': [51000, 407, 2416, 11, 286, 914, 1412, 597, 775, 406, 3318, 666, 38351, 11, 456, 727, 312, 732, 4112, 337, 51324], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 895, 'seek': 432250, 'start': 4341.7, 'end': 4342.7, 'text': ' it.', 'tokens': [51324, 309, 13, 51374], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 896, 'seek': 432250, 'start': 4342.7, 'end': 4347.74, 'text': " One is you don't have sufficient registers or the data size itself is not sufficient", 'tokens': [51374, 1485, 307, 291, 500, 380, 362, 11563, 38351, 420, 264, 1412, 2744, 2564, 307, 406, 11563, 51626], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 897, 'seek': 432250, 'start': 4347.74, 'end': 4350.18, 'text': ' within the registers.', 'tokens': [51626, 1951, 264, 38351, 13, 51748], 'temperature': 0.0, 'avg_logprob': -0.3527388376732395, 'compression_ratio': 1.4795321637426901, 'no_speech_prob': 0.23873049020767212}, {'id': 898, 'seek': 435018, 'start': 4350.18, 'end': 4352.46, 'text': ' And then second is this indexing.', 'tokens': [50364, 400, 550, 1150, 307, 341, 8186, 278, 13, 50478], 'temperature': 0.0, 'avg_logprob': -0.30250753675188335, 'compression_ratio': 1.29, 'no_speech_prob': 0.2619798183441162}, {'id': 899, 'seek': 435018, 'start': 4352.46, 'end': 4358.900000000001, 'text': ' Any other reasons?', 'tokens': [50478, 2639, 661, 4112, 30, 50800], 'temperature': 0.0, 'avg_logprob': -0.30250753675188335, 'compression_ratio': 1.29, 'no_speech_prob': 0.2619798183441162}, {'id': 900, 'seek': 435018, 'start': 4358.900000000001, 'end': 4362.02, 'text': ' Let me write some code.', 'tokens': [50800, 961, 385, 2464, 512, 3089, 13, 50956], 'temperature': 0.0, 'avg_logprob': -0.30250753675188335, 'compression_ratio': 1.29, 'no_speech_prob': 0.2619798183441162}, {'id': 901, 'seek': 435018, 'start': 4362.02, 'end': 4364.02, 'text': " So let's say I had var.", 'tokens': [50956, 407, 718, 311, 584, 286, 632, 1374, 13, 51056], 'temperature': 0.0, 'avg_logprob': -0.30250753675188335, 'compression_ratio': 1.29, 'no_speech_prob': 0.2619798183441162}, {'id': 902, 'seek': 435018, 'start': 4364.02, 'end': 4371.22, 'text': " So let's say I had var,var2.", 'tokens': [51056, 407, 718, 311, 584, 286, 632, 1374, 11, 8517, 17, 13, 51416], 'temperature': 0.0, 'avg_logprob': -0.30250753675188335, 'compression_ratio': 1.29, 'no_speech_prob': 0.2619798183441162}, {'id': 903, 'seek': 437122, 'start': 4371.22, 'end': 4389.860000000001, 'text': ' I do something like this.', 'tokens': [50364, 286, 360, 746, 411, 341, 13, 51296], 'temperature': 0.0, 'avg_logprob': -0.2832654040792714, 'compression_ratio': 0.9428571428571428, 'no_speech_prob': 0.9080445170402527}, {'id': 904, 'seek': 437122, 'start': 4389.860000000001, 'end': 4400.06, 'text': ' Now can I put var and var2 in registers?', 'tokens': [51296, 823, 393, 286, 829, 1374, 293, 1374, 17, 294, 38351, 30, 51806], 'temperature': 0.0, 'avg_logprob': -0.2832654040792714, 'compression_ratio': 0.9428571428571428, 'no_speech_prob': 0.9080445170402527}, {'id': 905, 'seek': 440006, 'start': 4400.06, 'end': 4401.06, 'text': ' Why?', 'tokens': [50364, 1545, 30, 50414], 'temperature': 0.0, 'avg_logprob': -0.388802830765887, 'compression_ratio': 1.2432432432432432, 'no_speech_prob': 0.061877164989709854}, {'id': 906, 'seek': 440006, 'start': 4401.06, 'end': 4402.06, 'text': ' Correct.', 'tokens': [50414, 12753, 13, 50464], 'temperature': 0.0, 'avg_logprob': -0.388802830765887, 'compression_ratio': 1.2432432432432432, 'no_speech_prob': 0.061877164989709854}, {'id': 907, 'seek': 440006, 'start': 4402.06, 'end': 4405.1, 'text': " So registers don't have address.", 'tokens': [50464, 407, 38351, 500, 380, 362, 2985, 13, 50616], 'temperature': 0.0, 'avg_logprob': -0.388802830765887, 'compression_ratio': 1.2432432432432432, 'no_speech_prob': 0.061877164989709854}, {'id': 908, 'seek': 440006, 'start': 4405.1, 'end': 4428.22, 'text': ' So whenever there is a variable whose address is taken, I somehow have to put it in memory.', 'tokens': [50616, 407, 5699, 456, 307, 257, 7006, 6104, 2985, 307, 2726, 11, 286, 6063, 362, 281, 829, 309, 294, 4675, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.388802830765887, 'compression_ratio': 1.2432432432432432, 'no_speech_prob': 0.061877164989709854}, {'id': 909, 'seek': 442822, 'start': 4429.14, 'end': 4432.9800000000005, 'text': ' Otherwise, there is a problem.', 'tokens': [50410, 10328, 11, 456, 307, 257, 1154, 13, 50602], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 910, 'seek': 442822, 'start': 4432.9800000000005, 'end': 4434.900000000001, 'text': ' What if I do something like this?', 'tokens': [50602, 708, 498, 286, 360, 746, 411, 341, 30, 50698], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 911, 'seek': 442822, 'start': 4434.900000000001, 'end': 4440.820000000001, 'text': " I mean let's say compiler was still put var in eax and var2 in ebx.", 'tokens': [50698, 286, 914, 718, 311, 584, 31958, 390, 920, 829, 1374, 294, 308, 2797, 293, 1374, 17, 294, 308, 65, 87, 13, 50994], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 912, 'seek': 442822, 'start': 4440.820000000001, 'end': 4442.64, 'text': " Why can't compiler do this?", 'tokens': [50994, 1545, 393, 380, 31958, 360, 341, 30, 51085], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 913, 'seek': 442822, 'start': 4442.64, 'end': 4455.02, 'text': ' If condition ptr is equal to content of star ptr is equal to content of eax, else star', 'tokens': [51085, 759, 4188, 280, 6903, 307, 2681, 281, 2701, 295, 3543, 280, 6903, 307, 2681, 281, 2701, 295, 308, 2797, 11, 1646, 3543, 51704], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 914, 'seek': 442822, 'start': 4455.02, 'end': 4457.900000000001, 'text': ' ptr is equal to ebx.', 'tokens': [51704, 280, 6903, 307, 2681, 281, 308, 65, 87, 13, 51848], 'temperature': 0.0, 'avg_logprob': -0.2078334851698442, 'compression_ratio': 1.6645962732919255, 'no_speech_prob': 0.5533737540245056}, {'id': 915, 'seek': 445790, 'start': 4457.9, 'end': 4464.66, 'text': " Why can't compiler do this?", 'tokens': [50364, 1545, 393, 380, 31958, 360, 341, 30, 50702], 'temperature': 0.0, 'avg_logprob': -0.19979718879417138, 'compression_ratio': 1.328125, 'no_speech_prob': 0.056330811232328415}, {'id': 916, 'seek': 445790, 'start': 4464.66, 'end': 4471.42, 'text': ' So I have still allocated var in eax, var2 in ebx and I did something like this.', 'tokens': [50702, 407, 286, 362, 920, 29772, 1374, 294, 308, 2797, 11, 1374, 17, 294, 308, 65, 87, 293, 286, 630, 746, 411, 341, 13, 51040], 'temperature': 0.0, 'avg_logprob': -0.19979718879417138, 'compression_ratio': 1.328125, 'no_speech_prob': 0.056330811232328415}, {'id': 917, 'seek': 445790, 'start': 4471.42, 'end': 4476.62, 'text': ' Is it valid?', 'tokens': [51040, 1119, 309, 7363, 30, 51300], 'temperature': 0.0, 'avg_logprob': -0.19979718879417138, 'compression_ratio': 1.328125, 'no_speech_prob': 0.056330811232328415}, {'id': 918, 'seek': 445790, 'start': 4476.62, 'end': 4481.78, 'text': ' Is this code valid for compiler to translate to?', 'tokens': [51300, 1119, 341, 3089, 7363, 337, 31958, 281, 13799, 281, 30, 51558], 'temperature': 0.0, 'avg_logprob': -0.19979718879417138, 'compression_ratio': 1.328125, 'no_speech_prob': 0.056330811232328415}, {'id': 919, 'seek': 448178, 'start': 4481.78, 'end': 4496.7, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 51110], 'temperature': 0.0, 'avg_logprob': -0.19676490263505417, 'compression_ratio': 1.3934426229508197, 'no_speech_prob': 0.06696774810552597}, {'id': 920, 'seek': 448178, 'start': 4496.7, 'end': 4501.38, 'text': ' So it goes back to the same point of registers not having address.', 'tokens': [51110, 407, 309, 1709, 646, 281, 264, 912, 935, 295, 38351, 406, 1419, 2985, 13, 51344], 'temperature': 0.0, 'avg_logprob': -0.19676490263505417, 'compression_ratio': 1.3934426229508197, 'no_speech_prob': 0.06696774810552597}, {'id': 921, 'seek': 448178, 'start': 4501.38, 'end': 4506.9, 'text': ' But the practical problem to be able to translate it into this is it has to be able to analyze', 'tokens': [51344, 583, 264, 8496, 1154, 281, 312, 1075, 281, 13799, 309, 666, 341, 307, 309, 575, 281, 312, 1075, 281, 12477, 51620], 'temperature': 0.0, 'avg_logprob': -0.19676490263505417, 'compression_ratio': 1.3934426229508197, 'no_speech_prob': 0.06696774810552597}, {'id': 922, 'seek': 450690, 'start': 4506.9, 'end': 4512.54, 'text': ' that ptr actually points to these two variables.', 'tokens': [50364, 300, 280, 6903, 767, 2793, 281, 613, 732, 9102, 13, 50646], 'temperature': 0.0, 'avg_logprob': -0.19403509532704072, 'compression_ratio': 1.3928571428571428, 'no_speech_prob': 0.7813507318496704}, {'id': 923, 'seek': 450690, 'start': 4512.54, 'end': 4517.219999999999, 'text': " And in a sufficiently large code, it's going to be a Herculean task.", 'tokens': [50646, 400, 294, 257, 31868, 2416, 3089, 11, 309, 311, 516, 281, 312, 257, 389, 2869, 2271, 282, 5633, 13, 50880], 'temperature': 0.0, 'avg_logprob': -0.19403509532704072, 'compression_ratio': 1.3928571428571428, 'no_speech_prob': 0.7813507318496704}, {'id': 924, 'seek': 450690, 'start': 4517.219999999999, 'end': 4520.099999999999, 'text': " You've learned pointer analysis.", 'tokens': [50880, 509, 600, 3264, 23918, 5215, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.19403509532704072, 'compression_ratio': 1.3928571428571428, 'no_speech_prob': 0.7813507318496704}, {'id': 925, 'seek': 450690, 'start': 4520.099999999999, 'end': 4523.46, 'text': ' How was it?', 'tokens': [51024, 1012, 390, 309, 30, 51192], 'temperature': 0.0, 'avg_logprob': -0.19403509532704072, 'compression_ratio': 1.3928571428571428, 'no_speech_prob': 0.7813507318496704}, {'id': 926, 'seek': 450690, 'start': 4523.46, 'end': 4530.5, 'text': ' So it kind of starts getting impractical to be able to do it precisely.', 'tokens': [51192, 407, 309, 733, 295, 3719, 1242, 704, 1897, 804, 281, 312, 1075, 281, 360, 309, 13402, 13, 51544], 'temperature': 0.0, 'avg_logprob': -0.19403509532704072, 'compression_ratio': 1.3928571428571428, 'no_speech_prob': 0.7813507318496704}, {'id': 927, 'seek': 453050, 'start': 4530.5, 'end': 4536.78, 'text': " So that's a, I mean, if you could figure out that this variable is only pointed by", 'tokens': [50364, 407, 300, 311, 257, 11, 286, 914, 11, 498, 291, 727, 2573, 484, 300, 341, 7006, 307, 787, 10932, 538, 50678], 'temperature': 0.0, 'avg_logprob': -0.1579434076944987, 'compression_ratio': 1.6244541484716157, 'no_speech_prob': 0.1007801741361618}, {'id': 928, 'seek': 453050, 'start': 4536.78, 'end': 4541.34, 'text': " this pointer and it's always dereferenced this way, in theory you can do this.", 'tokens': [50678, 341, 23918, 293, 309, 311, 1009, 15969, 612, 14672, 341, 636, 11, 294, 5261, 291, 393, 360, 341, 13, 50906], 'temperature': 0.0, 'avg_logprob': -0.1579434076944987, 'compression_ratio': 1.6244541484716157, 'no_speech_prob': 0.1007801741361618}, {'id': 929, 'seek': 453050, 'start': 4541.34, 'end': 4546.42, 'text': ' But it goes back to the problem of pointer analysis being very hard.', 'tokens': [50906, 583, 309, 1709, 646, 281, 264, 1154, 295, 23918, 5215, 885, 588, 1152, 13, 51160], 'temperature': 0.0, 'avg_logprob': -0.1579434076944987, 'compression_ratio': 1.6244541484716157, 'no_speech_prob': 0.1007801741361618}, {'id': 930, 'seek': 453050, 'start': 4546.42, 'end': 4553.58, 'text': ' So these two, apart from not enough registers, whenever you have address of a variable taken,', 'tokens': [51160, 407, 613, 732, 11, 4936, 490, 406, 1547, 38351, 11, 5699, 291, 362, 2985, 295, 257, 7006, 2726, 11, 51518], 'temperature': 0.0, 'avg_logprob': -0.1579434076944987, 'compression_ratio': 1.6244541484716157, 'no_speech_prob': 0.1007801741361618}, {'id': 931, 'seek': 453050, 'start': 4553.58, 'end': 4557.48, 'text': ' you will have challenge storing it in register.', 'tokens': [51518, 291, 486, 362, 3430, 26085, 309, 294, 7280, 13, 51713], 'temperature': 0.0, 'avg_logprob': -0.1579434076944987, 'compression_ratio': 1.6244541484716157, 'no_speech_prob': 0.1007801741361618}, {'id': 932, 'seek': 455748, 'start': 4557.48, 'end': 4562.2, 'text': ' And whenever you have indexed accessing, you have problem because typically, hardware', 'tokens': [50364, 400, 5699, 291, 362, 8186, 292, 26440, 11, 291, 362, 1154, 570, 5850, 11, 8837, 50600], 'temperature': 0.0, 'avg_logprob': -0.21104656948762782, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.2224634438753128}, {'id': 933, 'seek': 455748, 'start': 4562.2, 'end': 4566.94, 'text': " don't have indexed register accesses.", 'tokens': [50600, 500, 380, 362, 8186, 292, 7280, 2105, 279, 13, 50837], 'temperature': 0.0, 'avg_logprob': -0.21104656948762782, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.2224634438753128}, {'id': 934, 'seek': 455748, 'start': 4566.94, 'end': 4569.839999999999, 'text': ' So can we store them in global variables?', 'tokens': [50837, 407, 393, 321, 3531, 552, 294, 4338, 9102, 30, 50982], 'temperature': 0.0, 'avg_logprob': -0.21104656948762782, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.2224634438753128}, {'id': 935, 'seek': 455748, 'start': 4569.839999999999, 'end': 4574.919999999999, 'text': ' So whatever local variables I had, can I create a global variable corresponding to that and', 'tokens': [50982, 407, 2035, 2654, 9102, 286, 632, 11, 393, 286, 1884, 257, 4338, 7006, 11760, 281, 300, 293, 51236], 'temperature': 0.0, 'avg_logprob': -0.21104656948762782, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.2224634438753128}, {'id': 936, 'seek': 455748, 'start': 4574.919999999999, 'end': 4586.54, 'text': ' allocate them in global variables?', 'tokens': [51236, 35713, 552, 294, 4338, 9102, 30, 51817], 'temperature': 0.0, 'avg_logprob': -0.21104656948762782, 'compression_ratio': 1.7176470588235293, 'no_speech_prob': 0.2224634438753128}, {'id': 937, 'seek': 458654, 'start': 4586.54, 'end': 4588.62, 'text': ' What kind of scope violation?', 'tokens': [50364, 708, 733, 295, 11923, 22840, 30, 50468], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 938, 'seek': 458654, 'start': 4588.62, 'end': 4593.66, 'text': ' So this, remember this is being done by compiler, right?', 'tokens': [50468, 407, 341, 11, 1604, 341, 307, 885, 1096, 538, 31958, 11, 558, 30, 50720], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 939, 'seek': 458654, 'start': 4593.66, 'end': 4597.3, 'text': " So compiler, it's not the programmer which is trying to do.", 'tokens': [50720, 407, 31958, 11, 309, 311, 406, 264, 32116, 597, 307, 1382, 281, 360, 13, 50902], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 940, 'seek': 458654, 'start': 4597.3, 'end': 4603.98, 'text': " So let's say for every local variable compiler allocated a global variable while generating", 'tokens': [50902, 407, 718, 311, 584, 337, 633, 2654, 7006, 31958, 29772, 257, 4338, 7006, 1339, 17746, 51236], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 941, 'seek': 458654, 'start': 4603.98, 'end': 4606.22, 'text': ' assembly and use that.', 'tokens': [51236, 12103, 293, 764, 300, 13, 51348], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 942, 'seek': 458654, 'start': 4606.22, 'end': 4612.34, 'text': ' So just, so for example, for in this case, it created foo underscore var as a global', 'tokens': [51348, 407, 445, 11, 370, 337, 1365, 11, 337, 294, 341, 1389, 11, 309, 2942, 726, 78, 37556, 1374, 382, 257, 4338, 51654], 'temperature': 0.0, 'avg_logprob': -0.22307974641973322, 'compression_ratio': 1.6168224299065421, 'no_speech_prob': 0.5994775295257568}, {'id': 943, 'seek': 461234, 'start': 4612.34, 'end': 4618.900000000001, 'text': ' variable, foo underscore arr as a global variable.', 'tokens': [50364, 7006, 11, 726, 78, 37556, 5539, 382, 257, 4338, 7006, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.19871267221741756, 'compression_ratio': 1.3687943262411348, 'no_speech_prob': 0.6350013017654419}, {'id': 944, 'seek': 461234, 'start': 4618.900000000001, 'end': 4626.08, 'text': ' What are the issues with that?', 'tokens': [50692, 708, 366, 264, 2663, 365, 300, 30, 51051], 'temperature': 0.0, 'avg_logprob': -0.19871267221741756, 'compression_ratio': 1.3687943262411348, 'no_speech_prob': 0.6350013017654419}, {'id': 945, 'seek': 461234, 'start': 4626.08, 'end': 4632.3, 'text': ' But for every function, it will create a, I mean, it has to just create a unique prefix,', 'tokens': [51051, 583, 337, 633, 2445, 11, 309, 486, 1884, 257, 11, 286, 914, 11, 309, 575, 281, 445, 1884, 257, 3845, 46969, 11, 51362], 'temperature': 0.0, 'avg_logprob': -0.19871267221741756, 'compression_ratio': 1.3687943262411348, 'no_speech_prob': 0.6350013017654419}, {'id': 946, 'seek': 461234, 'start': 4632.3, 'end': 4633.3, 'text': ' right?', 'tokens': [51362, 558, 30, 51412], 'temperature': 0.0, 'avg_logprob': -0.19871267221741756, 'compression_ratio': 1.3687943262411348, 'no_speech_prob': 0.6350013017654419}, {'id': 947, 'seek': 461234, 'start': 4633.3, 'end': 4635.46, 'text': ' It can do that.', 'tokens': [51412, 467, 393, 360, 300, 13, 51520], 'temperature': 0.0, 'avg_logprob': -0.19871267221741756, 'compression_ratio': 1.3687943262411348, 'no_speech_prob': 0.6350013017654419}, {'id': 948, 'seek': 463546, 'start': 4635.46, 'end': 4652.46, 'text': " Any functional issue, why you can't create a global version of a local variable?", 'tokens': [50364, 2639, 11745, 2734, 11, 983, 291, 393, 380, 1884, 257, 4338, 3037, 295, 257, 2654, 7006, 30, 51214], 'temperature': 0.0, 'avg_logprob': -0.2882720299486844, 'compression_ratio': 1.368421052631579, 'no_speech_prob': 0.39635664224624634}, {'id': 949, 'seek': 463546, 'start': 4652.46, 'end': 4657.1, 'text': ' So one answer is it could impact how much memory is available.', 'tokens': [51214, 407, 472, 1867, 307, 309, 727, 2712, 577, 709, 4675, 307, 2435, 13, 51446], 'temperature': 0.0, 'avg_logprob': -0.2882720299486844, 'compression_ratio': 1.368421052631579, 'no_speech_prob': 0.39635664224624634}, {'id': 950, 'seek': 463546, 'start': 4657.1, 'end': 4661.18, 'text': " That's strictly not true, but yeah, it could be a consideration.", 'tokens': [51446, 663, 311, 20792, 406, 2074, 11, 457, 1338, 11, 309, 727, 312, 257, 12381, 13, 51650], 'temperature': 0.0, 'avg_logprob': -0.2882720299486844, 'compression_ratio': 1.368421052631579, 'no_speech_prob': 0.39635664224624634}, {'id': 951, 'seek': 466118, 'start': 4661.18, 'end': 4666.9400000000005, 'text': ' Correct.', 'tokens': [50364, 12753, 13, 50652], 'temperature': 0.0, 'avg_logprob': -0.22517833709716797, 'compression_ratio': 1.4680851063829787, 'no_speech_prob': 0.21678078174591064}, {'id': 952, 'seek': 466118, 'start': 4666.9400000000005, 'end': 4673.58, 'text': ' So what will happen is as soon as you create a global variable, you are breaking the recursion', 'tokens': [50652, 407, 437, 486, 1051, 307, 382, 2321, 382, 291, 1884, 257, 4338, 7006, 11, 291, 366, 7697, 264, 20560, 313, 50984], 'temperature': 0.0, 'avg_logprob': -0.22517833709716797, 'compression_ratio': 1.4680851063829787, 'no_speech_prob': 0.21678078174591064}, {'id': 953, 'seek': 466118, 'start': 4673.58, 'end': 4678.900000000001, 'text': ' semantics because every time the function is called, you have to somehow initialize', 'tokens': [50984, 4361, 45298, 570, 633, 565, 264, 2445, 307, 1219, 11, 291, 362, 281, 6063, 5883, 1125, 51250], 'temperature': 0.0, 'avg_logprob': -0.22517833709716797, 'compression_ratio': 1.4680851063829787, 'no_speech_prob': 0.21678078174591064}, {'id': 954, 'seek': 466118, 'start': 4678.900000000001, 'end': 4680.62, 'text': ' it properly.', 'tokens': [51250, 309, 6108, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.22517833709716797, 'compression_ratio': 1.4680851063829787, 'no_speech_prob': 0.21678078174591064}, {'id': 955, 'seek': 466118, 'start': 4680.62, 'end': 4685.06, 'text': ' And what is, this is the exact same problem we had with the return address.', 'tokens': [51336, 400, 437, 307, 11, 341, 307, 264, 1900, 912, 1154, 321, 632, 365, 264, 2736, 2985, 13, 51558], 'temperature': 0.0, 'avg_logprob': -0.22517833709716797, 'compression_ratio': 1.4680851063829787, 'no_speech_prob': 0.21678078174591064}, {'id': 956, 'seek': 468506, 'start': 4685.06, 'end': 4693.18, 'text': ' Global variables will create one copy of a variable per function, but is that what', 'tokens': [50364, 14465, 9102, 486, 1884, 472, 5055, 295, 257, 7006, 680, 2445, 11, 457, 307, 300, 437, 50770], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 957, 'seek': 468506, 'start': 4693.18, 'end': 4696.02, 'text': ' really local variables are?', 'tokens': [50770, 534, 2654, 9102, 366, 30, 50912], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 958, 'seek': 468506, 'start': 4696.02, 'end': 4700.580000000001, 'text': ' Local variables are ones per invocation of the call, right?', 'tokens': [50912, 22755, 9102, 366, 2306, 680, 1048, 27943, 295, 264, 818, 11, 558, 30, 51140], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 959, 'seek': 468506, 'start': 4700.580000000001, 'end': 4702.96, 'text': " And that's how they get the semantics.", 'tokens': [51140, 400, 300, 311, 577, 436, 483, 264, 4361, 45298, 13, 51259], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 960, 'seek': 468506, 'start': 4702.96, 'end': 4707.26, 'text': ' So this will not work in recursion.', 'tokens': [51259, 407, 341, 486, 406, 589, 294, 20560, 313, 13, 51474], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 961, 'seek': 468506, 'start': 4707.26, 'end': 4708.26, 'text': ' What about stat?', 'tokens': [51474, 708, 466, 2219, 30, 51524], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 962, 'seek': 468506, 'start': 4708.26, 'end': 4709.26, 'text': ' Right?', 'tokens': [51524, 1779, 30, 51574], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 963, 'seek': 468506, 'start': 4709.26, 'end': 4710.54, 'text': ' That was the answer.', 'tokens': [51574, 663, 390, 264, 1867, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.21562285539580556, 'compression_ratio': 1.5846994535519126, 'no_speech_prob': 0.42975983023643494}, {'id': 964, 'seek': 471054, 'start': 4711.54, 'end': 4715.98, 'text': " And where we have static local variables, we'll see later.", 'tokens': [50414, 400, 689, 321, 362, 13437, 2654, 9102, 11, 321, 603, 536, 1780, 13, 50636], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 965, 'seek': 471054, 'start': 4715.98, 'end': 4722.54, 'text': ' So stack is essentially where actually local variables are stored, right?', 'tokens': [50636, 407, 8630, 307, 4476, 689, 767, 2654, 9102, 366, 12187, 11, 558, 30, 50964], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 966, 'seek': 471054, 'start': 4722.54, 'end': 4728.22, 'text': ' So there is a term called a stack frame, which is essentially the stack which is allocated', 'tokens': [50964, 407, 456, 307, 257, 1433, 1219, 257, 8630, 3920, 11, 597, 307, 4476, 264, 8630, 597, 307, 29772, 51248], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 967, 'seek': 471054, 'start': 4728.22, 'end': 4730.28, 'text': ' for a function.', 'tokens': [51248, 337, 257, 2445, 13, 51351], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 968, 'seek': 471054, 'start': 4730.28, 'end': 4736.66, 'text': ' So every, so region of stack which is allocated for a function is called a stack frame of', 'tokens': [51351, 407, 633, 11, 370, 4458, 295, 8630, 597, 307, 29772, 337, 257, 2445, 307, 1219, 257, 8630, 3920, 295, 51670], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 969, 'seek': 471054, 'start': 4736.66, 'end': 4737.66, 'text': ' that function.', 'tokens': [51670, 300, 2445, 13, 51720], 'temperature': 0.0, 'avg_logprob': -0.17238953000023252, 'compression_ratio': 1.9770114942528736, 'no_speech_prob': 0.4298199415206909}, {'id': 970, 'seek': 473766, 'start': 4737.66, 'end': 4745.18, 'text': ' So for example, this is the stack frame of foo and this is the stack frame of main.', 'tokens': [50364, 407, 337, 1365, 11, 341, 307, 264, 8630, 3920, 295, 726, 78, 293, 341, 307, 264, 8630, 3920, 295, 2135, 13, 50740], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 971, 'seek': 473766, 'start': 4745.18, 'end': 4750.78, 'text': ' So we already saw when the call happened, the return address was actually pushed onto', 'tokens': [50740, 407, 321, 1217, 1866, 562, 264, 818, 2011, 11, 264, 2736, 2985, 390, 767, 9152, 3911, 51020], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 972, 'seek': 473766, 'start': 4750.78, 'end': 4752.28, 'text': ' the stack.', 'tokens': [51020, 264, 8630, 13, 51095], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 973, 'seek': 473766, 'start': 4752.28, 'end': 4754.5, 'text': ' So this return address lives here.', 'tokens': [51095, 407, 341, 2736, 2985, 2909, 510, 13, 51206], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 974, 'seek': 473766, 'start': 4754.5, 'end': 4759.46, 'text': ' There is something called a saved EBP, which we will get to later.', 'tokens': [51206, 821, 307, 746, 1219, 257, 6624, 50148, 47, 11, 597, 321, 486, 483, 281, 1780, 13, 51454], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 975, 'seek': 473766, 'start': 4759.46, 'end': 4764.42, 'text': ' And then whatever local variables I have, I have stored them.', 'tokens': [51454, 400, 550, 2035, 2654, 9102, 286, 362, 11, 286, 362, 12187, 552, 13, 51702], 'temperature': 0.0, 'avg_logprob': -0.162962457868788, 'compression_ratio': 1.645933014354067, 'no_speech_prob': 0.007814775221049786}, {'id': 976, 'seek': 476442, 'start': 4764.42, 'end': 4770.22, 'text': ' So I have stored var, I have stored err of 6, err of 5 up to err of 0.', 'tokens': [50364, 407, 286, 362, 12187, 1374, 11, 286, 362, 12187, 1189, 81, 295, 1386, 11, 1189, 81, 295, 1025, 493, 281, 1189, 81, 295, 1958, 13, 50654], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 977, 'seek': 476442, 'start': 4770.22, 'end': 4774.14, 'text': ' And my stack pointer points to the bottom of the stack.', 'tokens': [50654, 400, 452, 8630, 23918, 2793, 281, 264, 2767, 295, 264, 8630, 13, 50850], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 978, 'seek': 476442, 'start': 4774.14, 'end': 4777.58, 'text': ' This is one of the ways to implement an activation record.', 'tokens': [50850, 639, 307, 472, 295, 264, 2098, 281, 4445, 364, 24433, 2136, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 979, 'seek': 476442, 'start': 4777.58, 'end': 4782.26, 'text': ' Is everyone aware of something called as activation record?', 'tokens': [51022, 1119, 1518, 3650, 295, 746, 1219, 382, 24433, 2136, 30, 51256], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 980, 'seek': 476442, 'start': 4782.26, 'end': 4787.78, 'text': ' So essentially, whenever you do a function call, right, whatever state is needed to be', 'tokens': [51256, 407, 4476, 11, 5699, 291, 360, 257, 2445, 818, 11, 558, 11, 2035, 1785, 307, 2978, 281, 312, 51532], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 981, 'seek': 476442, 'start': 4787.78, 'end': 4791.24, 'text': ' saved is called as activation record.', 'tokens': [51532, 6624, 307, 1219, 382, 24433, 2136, 13, 51705], 'temperature': 0.0, 'avg_logprob': -0.161272331159942, 'compression_ratio': 1.7370892018779343, 'no_speech_prob': 0.10080626606941223}, {'id': 982, 'seek': 479124, 'start': 4791.24, 'end': 4794.96, 'text': ' And stack frame is one of the ways to implement an activation record.', 'tokens': [50364, 400, 8630, 3920, 307, 472, 295, 264, 2098, 281, 4445, 364, 24433, 2136, 13, 50550], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 983, 'seek': 479124, 'start': 4794.96, 'end': 4795.96, 'text': ' There are different mechanics.', 'tokens': [50550, 821, 366, 819, 12939, 13, 50600], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 984, 'seek': 479124, 'start': 4795.96, 'end': 4801.599999999999, 'text': ' For example, coroutines and higher order functions require a different type of activation record', 'tokens': [50600, 1171, 1365, 11, 1181, 346, 1652, 293, 2946, 1668, 6828, 3651, 257, 819, 2010, 295, 24433, 2136, 50882], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 985, 'seek': 479124, 'start': 4801.599999999999, 'end': 4803.48, 'text': ' than a stack frame.', 'tokens': [50882, 813, 257, 8630, 3920, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 986, 'seek': 479124, 'start': 4803.48, 'end': 4807.26, 'text': ' So it will vary based on what are the semantics you are trying to support.', 'tokens': [50976, 407, 309, 486, 10559, 2361, 322, 437, 366, 264, 4361, 45298, 291, 366, 1382, 281, 1406, 13, 51165], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 987, 'seek': 479124, 'start': 4807.26, 'end': 4810.599999999999, 'text': ' So stack frame is not the only activation record.', 'tokens': [51165, 407, 8630, 3920, 307, 406, 264, 787, 24433, 2136, 13, 51332], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 988, 'seek': 479124, 'start': 4810.599999999999, 'end': 4815.48, 'text': ' Depending on the feature you are implementing, it may be different.', 'tokens': [51332, 22539, 322, 264, 4111, 291, 366, 18114, 11, 309, 815, 312, 819, 13, 51576], 'temperature': 0.0, 'avg_logprob': -0.14368020873708823, 'compression_ratio': 1.7982456140350878, 'no_speech_prob': 0.046014610677957535}, {'id': 989, 'seek': 481548, 'start': 4816.48, 'end': 4822.2, 'text': ' Yeah, so any questions so far on this?', 'tokens': [50414, 865, 11, 370, 604, 1651, 370, 1400, 322, 341, 30, 50700], 'temperature': 0.0, 'avg_logprob': -0.2182702584700151, 'compression_ratio': 1.320754716981132, 'no_speech_prob': 0.0803024098277092}, {'id': 990, 'seek': 481548, 'start': 4822.2, 'end': 4825.0, 'text': ' Now how do you allocate space in the stack?', 'tokens': [50700, 823, 577, 360, 291, 35713, 1901, 294, 264, 8630, 30, 50840], 'temperature': 0.0, 'avg_logprob': -0.2182702584700151, 'compression_ratio': 1.320754716981132, 'no_speech_prob': 0.0803024098277092}, {'id': 991, 'seek': 481548, 'start': 4825.0, 'end': 4828.839999999999, 'text': " So let's say I am compiling this function foo.", 'tokens': [50840, 407, 718, 311, 584, 286, 669, 715, 4883, 341, 2445, 726, 78, 13, 51032], 'temperature': 0.0, 'avg_logprob': -0.2182702584700151, 'compression_ratio': 1.320754716981132, 'no_speech_prob': 0.0803024098277092}, {'id': 992, 'seek': 481548, 'start': 4828.839999999999, 'end': 4835.32, 'text': ' I know it requires 7 integers for err and 1 integer for var.', 'tokens': [51032, 286, 458, 309, 7029, 1614, 41674, 337, 1189, 81, 293, 502, 24922, 337, 1374, 13, 51356], 'temperature': 0.0, 'avg_logprob': -0.2182702584700151, 'compression_ratio': 1.320754716981132, 'no_speech_prob': 0.0803024098277092}, {'id': 993, 'seek': 481548, 'start': 4835.32, 'end': 4838.04, 'text': ' So I need 32 bytes.', 'tokens': [51356, 407, 286, 643, 8858, 36088, 13, 51492], 'temperature': 0.0, 'avg_logprob': -0.2182702584700151, 'compression_ratio': 1.320754716981132, 'no_speech_prob': 0.0803024098277092}, {'id': 994, 'seek': 483804, 'start': 4838.04, 'end': 4845.6, 'text': ' So what will compiler simply do is it will insert an instruction called subtract 32 from', 'tokens': [50364, 407, 437, 486, 31958, 2935, 360, 307, 309, 486, 8969, 364, 10951, 1219, 16390, 8858, 490, 50742], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 995, 'seek': 483804, 'start': 4845.6, 'end': 4847.12, 'text': ' ESP.', 'tokens': [50742, 12564, 47, 13, 50818], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 996, 'seek': 483804, 'start': 4847.12, 'end': 4852.2, 'text': ' So whenever you look at the disassembly of any function, you would see an instruction', 'tokens': [50818, 407, 5699, 291, 574, 412, 264, 717, 29386, 356, 295, 604, 2445, 11, 291, 576, 536, 364, 10951, 51072], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 997, 'seek': 483804, 'start': 4852.2, 'end': 4857.8, 'text': ' like this, which is essentially allocating space in the stack.', 'tokens': [51072, 411, 341, 11, 597, 307, 4476, 12660, 990, 1901, 294, 264, 8630, 13, 51352], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 998, 'seek': 483804, 'start': 4857.8, 'end': 4863.76, 'text': ' So whatever is your requirement of that function, those stack pointer will be subtracted by', 'tokens': [51352, 407, 2035, 307, 428, 11695, 295, 300, 2445, 11, 729, 8630, 23918, 486, 312, 16390, 292, 538, 51650], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 999, 'seek': 483804, 'start': 4863.76, 'end': 4866.84, 'text': ' that much.', 'tokens': [51650, 300, 709, 13, 51804], 'temperature': 0.0, 'avg_logprob': -0.1366270042601086, 'compression_ratio': 1.619718309859155, 'no_speech_prob': 0.00926479883491993}, {'id': 1000, 'seek': 486684, 'start': 4866.84, 'end': 4870.72, 'text': ' Now how do you access actually the variables?', 'tokens': [50364, 823, 577, 360, 291, 2105, 767, 264, 9102, 30, 50558], 'temperature': 0.0, 'avg_logprob': -0.08397665950987074, 'compression_ratio': 1.5975609756097562, 'no_speech_prob': 0.003373875981196761}, {'id': 1001, 'seek': 486684, 'start': 4870.72, 'end': 4873.52, 'text': ' So what is address of the var?', 'tokens': [50558, 407, 437, 307, 2985, 295, 264, 1374, 30, 50698], 'temperature': 0.0, 'avg_logprob': -0.08397665950987074, 'compression_ratio': 1.5975609756097562, 'no_speech_prob': 0.003373875981196761}, {'id': 1002, 'seek': 486684, 'start': 4873.52, 'end': 4881.24, 'text': ' So whenever I want to refer to var in the program, how will I refer to var?', 'tokens': [50698, 407, 5699, 286, 528, 281, 2864, 281, 1374, 294, 264, 1461, 11, 577, 486, 286, 2864, 281, 1374, 30, 51084], 'temperature': 0.0, 'avg_logprob': -0.08397665950987074, 'compression_ratio': 1.5975609756097562, 'no_speech_prob': 0.003373875981196761}, {'id': 1003, 'seek': 486684, 'start': 4881.24, 'end': 4887.04, 'text': ' So my stack pointer is here and my var is here.', 'tokens': [51084, 407, 452, 8630, 23918, 307, 510, 293, 452, 1374, 307, 510, 13, 51374], 'temperature': 0.0, 'avg_logprob': -0.08397665950987074, 'compression_ratio': 1.5975609756097562, 'no_speech_prob': 0.003373875981196761}, {'id': 1004, 'seek': 486684, 'start': 4887.04, 'end': 4892.04, 'text': ' So I could simply compute its address based on stack pointer.', 'tokens': [51374, 407, 286, 727, 2935, 14722, 1080, 2985, 2361, 322, 8630, 23918, 13, 51624], 'temperature': 0.0, 'avg_logprob': -0.08397665950987074, 'compression_ratio': 1.5975609756097562, 'no_speech_prob': 0.003373875981196761}, {'id': 1005, 'seek': 489204, 'start': 4892.04, 'end': 4898.96, 'text': ' So I can compute how far is the variable from the stack pointer and use that.', 'tokens': [50364, 407, 286, 393, 14722, 577, 1400, 307, 264, 7006, 490, 264, 8630, 23918, 293, 764, 300, 13, 50710], 'temperature': 0.0, 'avg_logprob': -0.09490011288569523, 'compression_ratio': 1.4074074074074074, 'no_speech_prob': 0.028410296887159348}, {'id': 1006, 'seek': 489204, 'start': 4898.96, 'end': 4905.4, 'text': ' So in this case, it is 28 because we had 7 integers in between.', 'tokens': [50710, 407, 294, 341, 1389, 11, 309, 307, 7562, 570, 321, 632, 1614, 41674, 294, 1296, 13, 51032], 'temperature': 0.0, 'avg_logprob': -0.09490011288569523, 'compression_ratio': 1.4074074074074074, 'no_speech_prob': 0.028410296887159348}, {'id': 1007, 'seek': 489204, 'start': 4905.4, 'end': 4910.56, 'text': ' So var will be at stack pointer plus 28 address.', 'tokens': [51032, 407, 1374, 486, 312, 412, 8630, 23918, 1804, 7562, 2985, 13, 51290], 'temperature': 0.0, 'avg_logprob': -0.09490011288569523, 'compression_ratio': 1.4074074074074074, 'no_speech_prob': 0.028410296887159348}, {'id': 1008, 'seek': 491056, 'start': 4910.56, 'end': 4929.56, 'text': ' So what you will see is if you look at the actual generated code.', 'tokens': [50364, 407, 437, 291, 486, 536, 307, 498, 291, 574, 412, 264, 3539, 10833, 3089, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.49603206232974406, 'compression_ratio': 0.9848484848484849, 'no_speech_prob': 0.9013704061508179}, {'id': 1009, 'seek': 495956, 'start': 4959.56, 'end': 4978.6, 'text': ' So what you can see is there is some subtraction of stack pointer which has happened, which', 'tokens': [50364, 407, 437, 291, 393, 536, 307, 456, 307, 512, 16390, 313, 295, 8630, 23918, 597, 575, 2011, 11, 597, 51316], 'temperature': 0.0, 'avg_logprob': -0.204948732929845, 'compression_ratio': 1.24, 'no_speech_prob': 0.08494143187999725}, {'id': 1010, 'seek': 495956, 'start': 4978.6, 'end': 4981.68, 'text': ' is essentially allocating stack.', 'tokens': [51316, 307, 4476, 12660, 990, 8630, 13, 51470], 'temperature': 0.0, 'avg_logprob': -0.204948732929845, 'compression_ratio': 1.24, 'no_speech_prob': 0.08494143187999725}, {'id': 1011, 'seek': 498168, 'start': 4981.68, 'end': 5010.8, 'text': ' And then you can actually see the stack pointer being actually.', 'tokens': [50364, 400, 550, 291, 393, 767, 536, 264, 8630, 23918, 885, 767, 13, 51820], 'temperature': 0.0, 'avg_logprob': -0.3355742394924164, 'compression_ratio': 1.0161290322580645, 'no_speech_prob': 0.9240069389343262}, {'id': 1012, 'seek': 501080, 'start': 5010.92, 'end': 5021.76, 'text': ' So you can see that the variables are being accessed relative to the stack pointer.', 'tokens': [50370, 407, 291, 393, 536, 300, 264, 9102, 366, 885, 34211, 4972, 281, 264, 8630, 23918, 13, 50912], 'temperature': 0.0, 'avg_logprob': -0.18934922218322753, 'compression_ratio': 1.218487394957983, 'no_speech_prob': 0.5292971134185791}, {'id': 1013, 'seek': 501080, 'start': 5021.76, 'end': 5025.46, 'text': ' Now frame pointer, which is EBP.', 'tokens': [50912, 823, 3920, 23918, 11, 597, 307, 50148, 47, 13, 51097], 'temperature': 0.0, 'avg_logprob': -0.18934922218322753, 'compression_ratio': 1.218487394957983, 'no_speech_prob': 0.5292971134185791}, {'id': 1014, 'seek': 501080, 'start': 5025.46, 'end': 5028.08, 'text': ' Any idea why is that needed?', 'tokens': [51097, 2639, 1558, 983, 307, 300, 2978, 30, 51228], 'temperature': 0.0, 'avg_logprob': -0.18934922218322753, 'compression_ratio': 1.218487394957983, 'no_speech_prob': 0.5292971134185791}, {'id': 1015, 'seek': 502808, 'start': 5028.08, 'end': 5036.24, 'text': ' Why do we have a pointer which is pointing here and stack pointer is pointing here?', 'tokens': [50364, 1545, 360, 321, 362, 257, 23918, 597, 307, 12166, 510, 293, 8630, 23918, 307, 12166, 510, 30, 50772], 'temperature': 0.0, 'avg_logprob': -0.5856365993105132, 'compression_ratio': 1.2531645569620253, 'no_speech_prob': 0.5742170214653015}, {'id': 1016, 'seek': 502808, 'start': 5036.24, 'end': 5039.24, 'text': ' Sorry.', 'tokens': [50772, 4919, 13, 50922], 'temperature': 0.0, 'avg_logprob': -0.5856365993105132, 'compression_ratio': 1.2531645569620253, 'no_speech_prob': 0.5742170214653015}, {'id': 1017, 'seek': 502808, 'start': 5039.24, 'end': 5043.08, 'text': ' Correct.', 'tokens': [50922, 12753, 13, 51114], 'temperature': 0.0, 'avg_logprob': -0.5856365993105132, 'compression_ratio': 1.2531645569620253, 'no_speech_prob': 0.5742170214653015}, {'id': 1018, 'seek': 504308, 'start': 5043.08, 'end': 5062.08, 'text': ' I will get to that.', 'tokens': [50364, 286, 486, 483, 281, 300, 13, 51314], 'temperature': 0.0, 'avg_logprob': -0.8040972437177386, 'compression_ratio': 0.75, 'no_speech_prob': 0.681056559085846}, {'id': 1019, 'seek': 504308, 'start': 5062.08, 'end': 5068.68, 'text': ' Yes.', 'tokens': [51314, 1079, 13, 51644], 'temperature': 0.0, 'avg_logprob': -0.8040972437177386, 'compression_ratio': 0.75, 'no_speech_prob': 0.681056559085846}, {'id': 1020, 'seek': 506868, 'start': 5068.68, 'end': 5082.320000000001, 'text': ' But how will frame pointer ensure that?', 'tokens': [50364, 583, 577, 486, 3920, 23918, 5586, 300, 30, 51046], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1021, 'seek': 506868, 'start': 5082.320000000001, 'end': 5091.16, 'text': ' But so are you expecting hardware to report some sort of error when someone accesses ESP', 'tokens': [51046, 583, 370, 366, 291, 9650, 8837, 281, 2275, 512, 1333, 295, 6713, 562, 1580, 2105, 279, 12564, 47, 51488], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1022, 'seek': 506868, 'start': 5091.16, 'end': 5093.84, 'text': ' plus some offset which goes beyond EBP?', 'tokens': [51488, 1804, 512, 18687, 597, 1709, 4399, 50148, 47, 30, 51622], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1023, 'seek': 506868, 'start': 5093.84, 'end': 5095.84, 'text': ' Is that what you were expecting?', 'tokens': [51622, 1119, 300, 437, 291, 645, 9650, 30, 51722], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1024, 'seek': 506868, 'start': 5095.84, 'end': 5096.84, 'text': ' Okay.', 'tokens': [51722, 1033, 13, 51772], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1025, 'seek': 506868, 'start': 5096.84, 'end': 5097.84, 'text': ' Yes.', 'tokens': [51772, 1079, 13, 51822], 'temperature': 0.0, 'avg_logprob': -0.27016115188598633, 'compression_ratio': 1.3503184713375795, 'no_speech_prob': 0.7536523342132568}, {'id': 1026, 'seek': 509784, 'start': 5098.0, 'end': 5099.0, 'text': ' Correct.', 'tokens': [50372, 12753, 13, 50422], 'temperature': 0.0, 'avg_logprob': -0.6060945238385882, 'compression_ratio': 1.0978260869565217, 'no_speech_prob': 0.8341258764266968}, {'id': 1027, 'seek': 509784, 'start': 5099.0, 'end': 5100.0, 'text': ' Okay.', 'tokens': [50422, 1033, 13, 50472], 'temperature': 0.0, 'avg_logprob': -0.6060945238385882, 'compression_ratio': 1.0978260869565217, 'no_speech_prob': 0.8341258764266968}, {'id': 1028, 'seek': 509784, 'start': 5100.0, 'end': 5117.32, 'text': ' So far we have three answers.', 'tokens': [50472, 407, 1400, 321, 362, 1045, 6338, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.6060945238385882, 'compression_ratio': 1.0978260869565217, 'no_speech_prob': 0.8341258764266968}, {'id': 1029, 'seek': 509784, 'start': 5117.32, 'end': 5122.32, 'text': ' Any other things then we will try to summarize.', 'tokens': [51338, 2639, 661, 721, 550, 321, 486, 853, 281, 20858, 13, 51588], 'temperature': 0.0, 'avg_logprob': -0.6060945238385882, 'compression_ratio': 1.0978260869565217, 'no_speech_prob': 0.8341258764266968}, {'id': 1030, 'seek': 509784, 'start': 5122.32, 'end': 5125.32, 'text': ' Correct.', 'tokens': [51588, 12753, 13, 51738], 'temperature': 0.0, 'avg_logprob': -0.6060945238385882, 'compression_ratio': 1.0978260869565217, 'no_speech_prob': 0.8341258764266968}, {'id': 1031, 'seek': 512532, 'start': 5125.799999999999, 'end': 5134.799999999999, 'text': ' So first I will kind of answer your questions, your things.', 'tokens': [50388, 407, 700, 286, 486, 733, 295, 1867, 428, 1651, 11, 428, 721, 13, 50838], 'temperature': 0.0, 'avg_logprob': -0.2009942421546349, 'compression_ratio': 1.5310734463276836, 'no_speech_prob': 0.008028224110603333}, {'id': 1032, 'seek': 512532, 'start': 5134.799999999999, 'end': 5141.54, 'text': ' So one is there is no such mechanism which tries to check whether we are trying to access', 'tokens': [50838, 407, 472, 307, 456, 307, 572, 1270, 7513, 597, 9898, 281, 1520, 1968, 321, 366, 1382, 281, 2105, 51175], 'temperature': 0.0, 'avg_logprob': -0.2009942421546349, 'compression_ratio': 1.5310734463276836, 'no_speech_prob': 0.008028224110603333}, {'id': 1033, 'seek': 512532, 'start': 5141.54, 'end': 5143.84, 'text': ' something in the caller frame.', 'tokens': [51175, 746, 294, 264, 48324, 3920, 13, 51290], 'temperature': 0.0, 'avg_logprob': -0.2009942421546349, 'compression_ratio': 1.5310734463276836, 'no_speech_prob': 0.008028224110603333}, {'id': 1034, 'seek': 512532, 'start': 5143.84, 'end': 5151.04, 'text': ' There are some security measures which do that, but by default those are not what happens.', 'tokens': [51290, 821, 366, 512, 3825, 8000, 597, 360, 300, 11, 457, 538, 7576, 729, 366, 406, 437, 2314, 13, 51650], 'temperature': 0.0, 'avg_logprob': -0.2009942421546349, 'compression_ratio': 1.5310734463276836, 'no_speech_prob': 0.008028224110603333}, {'id': 1035, 'seek': 515104, 'start': 5151.56, 'end': 5158.36, 'text': ' To answer your question, your thing, see whenever you are referring to the variables, even in', 'tokens': [50390, 1407, 1867, 428, 1168, 11, 428, 551, 11, 536, 5699, 291, 366, 13761, 281, 264, 9102, 11, 754, 294, 50730], 'temperature': 0.0, 'avg_logprob': -0.18812026533969614, 'compression_ratio': 1.8342541436464088, 'no_speech_prob': 0.5409868359565735}, {'id': 1036, 'seek': 515104, 'start': 5158.36, 'end': 5166.88, 'text': ' case of recursion, you are always referring to the variables which are in your stack frame.', 'tokens': [50730, 1389, 295, 20560, 313, 11, 291, 366, 1009, 13761, 281, 264, 9102, 597, 366, 294, 428, 8630, 3920, 13, 51156], 'temperature': 0.0, 'avg_logprob': -0.18812026533969614, 'compression_ratio': 1.8342541436464088, 'no_speech_prob': 0.5409868359565735}, {'id': 1037, 'seek': 515104, 'start': 5166.88, 'end': 5173.64, 'text': " So for example, when I am, let's say when foo calls foo, the second foo is still referring", 'tokens': [51156, 407, 337, 1365, 11, 562, 286, 669, 11, 718, 311, 584, 562, 726, 78, 5498, 726, 78, 11, 264, 1150, 726, 78, 307, 920, 13761, 51494], 'temperature': 0.0, 'avg_logprob': -0.18812026533969614, 'compression_ratio': 1.8342541436464088, 'no_speech_prob': 0.5409868359565735}, {'id': 1038, 'seek': 515104, 'start': 5173.64, 'end': 5176.6, 'text': ' to the variables which are of that instance of the foo.', 'tokens': [51494, 281, 264, 9102, 597, 366, 295, 300, 5197, 295, 264, 726, 78, 13, 51642], 'temperature': 0.0, 'avg_logprob': -0.18812026533969614, 'compression_ratio': 1.8342541436464088, 'no_speech_prob': 0.5409868359565735}, {'id': 1039, 'seek': 517660, 'start': 5176.6, 'end': 5181.400000000001, 'text': " There is no way to say refer to the parent's variable.", 'tokens': [50364, 821, 307, 572, 636, 281, 584, 2864, 281, 264, 2596, 311, 7006, 13, 50604], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1040, 'seek': 517660, 'start': 5181.400000000001, 'end': 5186.56, 'text': ' So there is no need for you to generate code which will try to access.', 'tokens': [50604, 407, 456, 307, 572, 643, 337, 291, 281, 8460, 3089, 597, 486, 853, 281, 2105, 13, 50862], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1041, 'seek': 517660, 'start': 5186.56, 'end': 5192.96, 'text': " So for example, when let's look at this code, so let's say this was calling foo recursively.", 'tokens': [50862, 407, 337, 1365, 11, 562, 718, 311, 574, 412, 341, 3089, 11, 370, 718, 311, 584, 341, 390, 5141, 726, 78, 20560, 3413, 13, 51182], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1042, 'seek': 517660, 'start': 5192.96, 'end': 5197.200000000001, 'text': ' There is no way for me to say access var which is of the parent.', 'tokens': [51182, 821, 307, 572, 636, 337, 385, 281, 584, 2105, 1374, 597, 307, 295, 264, 2596, 13, 51394], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1043, 'seek': 517660, 'start': 5197.200000000001, 'end': 5201.04, 'text': ' There is no construct and see which will allow you to do that.', 'tokens': [51394, 821, 307, 572, 7690, 293, 536, 597, 486, 2089, 291, 281, 360, 300, 13, 51586], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1044, 'seek': 517660, 'start': 5201.04, 'end': 5205.4400000000005, 'text': ' Whenever you refer to var or arr, you are always referring to the ones which exist in', 'tokens': [51586, 14159, 291, 2864, 281, 1374, 420, 5539, 11, 291, 366, 1009, 13761, 281, 264, 2306, 597, 2514, 294, 51806], 'temperature': 0.0, 'avg_logprob': -0.1448147151781165, 'compression_ratio': 1.8864628820960698, 'no_speech_prob': 0.08483817428350449}, {'id': 1045, 'seek': 520544, 'start': 5205.44, 'end': 5206.679999999999, 'text': ' your stack frame.', 'tokens': [50364, 428, 8630, 3920, 13, 50426], 'temperature': 0.0, 'avg_logprob': -0.15369171845285515, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.012042071670293808}, {'id': 1046, 'seek': 520544, 'start': 5206.679999999999, 'end': 5211.5199999999995, 'text': ' So this will always be the same place from your stack point.', 'tokens': [50426, 407, 341, 486, 1009, 312, 264, 912, 1081, 490, 428, 8630, 935, 13, 50668], 'temperature': 0.0, 'avg_logprob': -0.15369171845285515, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.012042071670293808}, {'id': 1047, 'seek': 520544, 'start': 5211.5199999999995, 'end': 5219.44, 'text': ' So what happens is as stack keeps growing, the offset of the variables will keep changing.', 'tokens': [50668, 407, 437, 2314, 307, 382, 8630, 5965, 4194, 11, 264, 18687, 295, 264, 9102, 486, 1066, 4473, 13, 51064], 'temperature': 0.0, 'avg_logprob': -0.15369171845285515, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.012042071670293808}, {'id': 1048, 'seek': 520544, 'start': 5219.44, 'end': 5226.32, 'text': ' So var at this point in time is at 28 offset from ESP.', 'tokens': [51064, 407, 1374, 412, 341, 935, 294, 565, 307, 412, 7562, 18687, 490, 12564, 47, 13, 51408], 'temperature': 0.0, 'avg_logprob': -0.15369171845285515, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.012042071670293808}, {'id': 1049, 'seek': 520544, 'start': 5226.32, 'end': 5232.2, 'text': " Let's say within the same stack frame, I allocate more stack.", 'tokens': [51408, 961, 311, 584, 1951, 264, 912, 8630, 3920, 11, 286, 35713, 544, 8630, 13, 51702], 'temperature': 0.0, 'avg_logprob': -0.15369171845285515, 'compression_ratio': 1.5888888888888888, 'no_speech_prob': 0.012042071670293808}, {'id': 1050, 'seek': 523220, 'start': 5232.2, 'end': 5238.76, 'text': ' Then relative address of var from foo, from the stack pointer is going to change.', 'tokens': [50364, 1396, 4972, 2985, 295, 1374, 490, 726, 78, 11, 490, 264, 8630, 23918, 307, 516, 281, 1319, 13, 50692], 'temperature': 0.0, 'avg_logprob': -0.15575419415484418, 'compression_ratio': 1.8418367346938775, 'no_speech_prob': 0.2118528038263321}, {'id': 1051, 'seek': 523220, 'start': 5238.76, 'end': 5245.36, 'text': ' See if stack is going down, then the var also is going up from the stack pointer.', 'tokens': [50692, 3008, 498, 8630, 307, 516, 760, 11, 550, 264, 1374, 611, 307, 516, 493, 490, 264, 8630, 23918, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.15575419415484418, 'compression_ratio': 1.8418367346938775, 'no_speech_prob': 0.2118528038263321}, {'id': 1052, 'seek': 523220, 'start': 5245.36, 'end': 5251.139999999999, 'text': ' So it might be at 28, then it might become 32, then it might become 36 and so on.', 'tokens': [51022, 407, 309, 1062, 312, 412, 7562, 11, 550, 309, 1062, 1813, 8858, 11, 550, 309, 1062, 1813, 8652, 293, 370, 322, 13, 51311], 'temperature': 0.0, 'avg_logprob': -0.15575419415484418, 'compression_ratio': 1.8418367346938775, 'no_speech_prob': 0.2118528038263321}, {'id': 1053, 'seek': 523220, 'start': 5251.139999999999, 'end': 5256.4, 'text': ' So what happens is it creates issues because the same variable has different addresses', 'tokens': [51311, 407, 437, 2314, 307, 309, 7829, 2663, 570, 264, 912, 7006, 575, 819, 16862, 51574], 'temperature': 0.0, 'avg_logprob': -0.15575419415484418, 'compression_ratio': 1.8418367346938775, 'no_speech_prob': 0.2118528038263321}, {'id': 1054, 'seek': 523220, 'start': 5256.4, 'end': 5258.12, 'text': ' at different points in time.', 'tokens': [51574, 412, 819, 2793, 294, 565, 13, 51660], 'temperature': 0.0, 'avg_logprob': -0.15575419415484418, 'compression_ratio': 1.8418367346938775, 'no_speech_prob': 0.2118528038263321}, {'id': 1055, 'seek': 525812, 'start': 5258.92, 'end': 5264.2, 'text': ' But if you look at the frame pointer, frame pointer is always at the start of the frame.', 'tokens': [50404, 583, 498, 291, 574, 412, 264, 3920, 23918, 11, 3920, 23918, 307, 1009, 412, 264, 722, 295, 264, 3920, 13, 50668], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1056, 'seek': 525812, 'start': 5264.2, 'end': 5268.08, 'text': ' So all the variables are always at the fixed offset from it.', 'tokens': [50668, 407, 439, 264, 9102, 366, 1009, 412, 264, 6806, 18687, 490, 309, 13, 50862], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1057, 'seek': 525812, 'start': 5268.08, 'end': 5271.28, 'text': ' So for example, var is always at EBP plus 4.', 'tokens': [50862, 407, 337, 1365, 11, 1374, 307, 1009, 412, 50148, 47, 1804, 1017, 13, 51022], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1058, 'seek': 525812, 'start': 5271.28, 'end': 5278.04, 'text': ' arr of 6 is always at EBP plus 8, EBP minus 8, minus 12 and so on.', 'tokens': [51022, 5539, 295, 1386, 307, 1009, 412, 50148, 47, 1804, 1649, 11, 50148, 47, 3175, 1649, 11, 3175, 2272, 293, 370, 322, 13, 51360], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1059, 'seek': 525812, 'start': 5278.04, 'end': 5283.08, 'text': ' No matter how much stack grows, once you have allocated something on the stack, it will', 'tokens': [51360, 883, 1871, 577, 709, 8630, 13156, 11, 1564, 291, 362, 29772, 746, 322, 264, 8630, 11, 309, 486, 51612], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1060, 'seek': 525812, 'start': 5283.08, 'end': 5287.28, 'text': ' always be at the fixed offset from the EBP.', 'tokens': [51612, 1009, 312, 412, 264, 6806, 18687, 490, 264, 50148, 47, 13, 51822], 'temperature': 0.0, 'avg_logprob': -0.1303508002478797, 'compression_ratio': 1.8364485981308412, 'no_speech_prob': 0.20666047930717468}, {'id': 1061, 'seek': 528728, 'start': 5287.28, 'end': 5289.44, 'text': ' Does that make sense?', 'tokens': [50364, 4402, 300, 652, 2020, 30, 50472], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1062, 'seek': 528728, 'start': 5289.44, 'end': 5292.4, 'text': ' And you can actually access it like this.', 'tokens': [50472, 400, 291, 393, 767, 2105, 309, 411, 341, 13, 50620], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1063, 'seek': 528728, 'start': 5292.4, 'end': 5300.599999999999, 'text': ' So 5 is being moved into EBP minus 4, which is what is this statement trying to do.', 'tokens': [50620, 407, 1025, 307, 885, 4259, 666, 50148, 47, 3175, 1017, 11, 597, 307, 437, 307, 341, 5629, 1382, 281, 360, 13, 51030], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1064, 'seek': 528728, 'start': 5300.599999999999, 'end': 5302.84, 'text': ' Fair enough?', 'tokens': [51030, 12157, 1547, 30, 51142], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1065, 'seek': 528728, 'start': 5302.84, 'end': 5305.48, 'text': " Now why can't compiler handle this?", 'tokens': [51142, 823, 983, 393, 380, 31958, 4813, 341, 30, 51274], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1066, 'seek': 528728, 'start': 5305.48, 'end': 5311.96, 'text': ' See the reason which I gave is kind of bit not good because what I am saying is it is', 'tokens': [51274, 3008, 264, 1778, 597, 286, 2729, 307, 733, 295, 857, 406, 665, 570, 437, 286, 669, 1566, 307, 309, 307, 51598], 'temperature': 0.0, 'avg_logprob': -0.1837039113044739, 'compression_ratio': 1.4242424242424243, 'no_speech_prob': 0.0013666244922205806}, {'id': 1067, 'seek': 531196, 'start': 5311.96, 'end': 5317.6, 'text': ' a complexity to track what is the address of var relative to stack.', 'tokens': [50364, 257, 14024, 281, 2837, 437, 307, 264, 2985, 295, 1374, 4972, 281, 8630, 13, 50646], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1068, 'seek': 531196, 'start': 5317.6, 'end': 5319.44, 'text': " So why can't compiler do it this way?", 'tokens': [50646, 407, 983, 393, 380, 31958, 360, 309, 341, 636, 30, 50738], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1069, 'seek': 531196, 'start': 5319.44, 'end': 5326.76, 'text': ' So we have var and in the current set of code, var is at ESP plus 28.', 'tokens': [50738, 407, 321, 362, 1374, 293, 294, 264, 2190, 992, 295, 3089, 11, 1374, 307, 412, 12564, 47, 1804, 7562, 13, 51104], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1070, 'seek': 531196, 'start': 5326.76, 'end': 5328.92, 'text': ' Then compiler updates the stack pointer.', 'tokens': [51104, 1396, 31958, 9205, 264, 8630, 23918, 13, 51212], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1071, 'seek': 531196, 'start': 5328.92, 'end': 5331.4, 'text': ' Remember compiler is updating the stack pointer.', 'tokens': [51212, 5459, 31958, 307, 25113, 264, 8630, 23918, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1072, 'seek': 531196, 'start': 5331.4, 'end': 5333.84, 'text': ' So compiler allocates space in the stack.', 'tokens': [51336, 407, 31958, 12660, 1024, 1901, 294, 264, 8630, 13, 51458], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1073, 'seek': 531196, 'start': 5333.84, 'end': 5340.1, 'text': ' Then it knows now var is now offsetted at 32 instead of 28.', 'tokens': [51458, 1396, 309, 3255, 586, 1374, 307, 586, 18687, 14727, 412, 8858, 2602, 295, 7562, 13, 51771], 'temperature': 0.0, 'avg_logprob': -0.1338129910555753, 'compression_ratio': 1.68348623853211, 'no_speech_prob': 0.21191710233688354}, {'id': 1074, 'seek': 534010, 'start': 5340.1, 'end': 5344.820000000001, 'text': " So why can't compiler do that?", 'tokens': [50364, 407, 983, 393, 380, 31958, 360, 300, 30, 50600], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1075, 'seek': 534010, 'start': 5344.820000000001, 'end': 5347.22, 'text': ' Does everyone understand what I am saying?', 'tokens': [50600, 4402, 1518, 1223, 437, 286, 669, 1566, 30, 50720], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1076, 'seek': 534010, 'start': 5347.22, 'end': 5354.38, 'text': ' So essentially what we said is from EBP a variable is always at fixed offset.', 'tokens': [50720, 407, 4476, 437, 321, 848, 307, 490, 50148, 47, 257, 7006, 307, 1009, 412, 6806, 18687, 13, 51078], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1077, 'seek': 534010, 'start': 5354.38, 'end': 5358.58, 'text': ' From ESP it is going to be at variable offset at different types.', 'tokens': [51078, 3358, 12564, 47, 309, 307, 516, 281, 312, 412, 7006, 18687, 412, 819, 3467, 13, 51288], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1078, 'seek': 534010, 'start': 5358.58, 'end': 5362.58, 'text': " Now the question is why can't we have compiler track it?", 'tokens': [51288, 823, 264, 1168, 307, 983, 393, 380, 321, 362, 31958, 2837, 309, 30, 51488], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1079, 'seek': 534010, 'start': 5362.58, 'end': 5368.54, 'text': ' So compiler can track variable var now is at ESP plus 8.', 'tokens': [51488, 407, 31958, 393, 2837, 7006, 1374, 586, 307, 412, 12564, 47, 1804, 1649, 13, 51786], 'temperature': 0.0, 'avg_logprob': -0.1302750405300869, 'compression_ratio': 1.5761904761904761, 'no_speech_prob': 0.002672380767762661}, {'id': 1080, 'seek': 536854, 'start': 5368.54, 'end': 5374.58, 'text': ' At some point when the stack pointer is updated variable var is...', 'tokens': [50364, 1711, 512, 935, 562, 264, 8630, 23918, 307, 10588, 7006, 1374, 307, 485, 50666], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1081, 'seek': 536854, 'start': 5374.58, 'end': 5375.58, 'text': ' Yes?', 'tokens': [50666, 1079, 30, 50716], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1082, 'seek': 536854, 'start': 5375.58, 'end': 5376.58, 'text': ' Correct.', 'tokens': [50716, 12753, 13, 50766], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1083, 'seek': 536854, 'start': 5376.58, 'end': 5385.86, 'text': ' So it is a complexity which you have to deal with.', 'tokens': [50766, 407, 309, 307, 257, 14024, 597, 291, 362, 281, 2028, 365, 13, 51230], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1084, 'seek': 536854, 'start': 5385.86, 'end': 5391.36, 'text': " So let's say I had a loop something like this.", 'tokens': [51230, 407, 718, 311, 584, 286, 632, 257, 6367, 746, 411, 341, 13, 51505], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1085, 'seek': 536854, 'start': 5391.36, 'end': 5396.46, 'text': " So in this region of code let's say var is at ESP plus 28.", 'tokens': [51505, 407, 294, 341, 4458, 295, 3089, 718, 311, 584, 1374, 307, 412, 12564, 47, 1804, 7562, 13, 51760], 'temperature': 0.0, 'avg_logprob': -0.29093125131395126, 'compression_ratio': 1.4107142857142858, 'no_speech_prob': 0.0900195762515068}, {'id': 1086, 'seek': 539646, 'start': 5397.38, 'end': 5406.26, 'text': ' Then I have a loop which creates additional variables.', 'tokens': [50410, 1396, 286, 362, 257, 6367, 597, 7829, 4497, 9102, 13, 50854], 'temperature': 0.0, 'avg_logprob': -0.17057907063028085, 'compression_ratio': 1.3432835820895523, 'no_speech_prob': 0.013220657594501972}, {'id': 1087, 'seek': 539646, 'start': 5406.26, 'end': 5417.58, 'text': ' So stack pointer is updated and then int dummy 2.', 'tokens': [50854, 407, 8630, 23918, 307, 10588, 293, 550, 560, 35064, 568, 13, 51420], 'temperature': 0.0, 'avg_logprob': -0.17057907063028085, 'compression_ratio': 1.3432835820895523, 'no_speech_prob': 0.013220657594501972}, {'id': 1088, 'seek': 539646, 'start': 5417.58, 'end': 5425.44, 'text': ' So my stack pointer further goes down by 8 bytes and now here I access var.', 'tokens': [51420, 407, 452, 8630, 23918, 3052, 1709, 760, 538, 1649, 36088, 293, 586, 510, 286, 2105, 1374, 13, 51813], 'temperature': 0.0, 'avg_logprob': -0.17057907063028085, 'compression_ratio': 1.3432835820895523, 'no_speech_prob': 0.013220657594501972}, {'id': 1089, 'seek': 542544, 'start': 5425.44, 'end': 5433.919999999999, 'text': ' So var is now at actually address ESP plus 36.', 'tokens': [50364, 407, 1374, 307, 586, 412, 767, 2985, 12564, 47, 1804, 8652, 13, 50788], 'temperature': 0.0, 'avg_logprob': -0.2774490876631303, 'compression_ratio': 1.1900826446280992, 'no_speech_prob': 0.004193871282041073}, {'id': 1090, 'seek': 542544, 'start': 5433.919999999999, 'end': 5444.719999999999, 'text': ' But what if this was a loop which goes on from i equal to 0 to n types.', 'tokens': [50788, 583, 437, 498, 341, 390, 257, 6367, 597, 1709, 322, 490, 741, 2681, 281, 1958, 281, 297, 3467, 13, 51328], 'temperature': 0.0, 'avg_logprob': -0.2774490876631303, 'compression_ratio': 1.1900826446280992, 'no_speech_prob': 0.004193871282041073}, {'id': 1091, 'seek': 542544, 'start': 5444.719999999999, 'end': 5449.719999999999, 'text': ' Can compiler handle this?', 'tokens': [51328, 1664, 31958, 4813, 341, 30, 51578], 'temperature': 0.0, 'avg_logprob': -0.2774490876631303, 'compression_ratio': 1.1900826446280992, 'no_speech_prob': 0.004193871282041073}, {'id': 1092, 'seek': 544972, 'start': 5449.72, 'end': 5462.08, 'text': ' If value of n is fixed then it can.', 'tokens': [50364, 759, 2158, 295, 297, 307, 6806, 550, 309, 393, 13, 50982], 'temperature': 0.0, 'avg_logprob': -0.26271307468414307, 'compression_ratio': 1.1785714285714286, 'no_speech_prob': 0.19716967642307281}, {'id': 1093, 'seek': 544972, 'start': 5462.08, 'end': 5474.68, 'text': ' If value of n is unknown then?', 'tokens': [50982, 759, 2158, 295, 297, 307, 9841, 550, 30, 51612], 'temperature': 0.0, 'avg_logprob': -0.26271307468414307, 'compression_ratio': 1.1785714285714286, 'no_speech_prob': 0.19716967642307281}, {'id': 1094, 'seek': 547468, 'start': 5474.68, 'end': 5482.320000000001, 'text': ' The language semantics say these are created at every iteration of the loop.', 'tokens': [50364, 440, 2856, 4361, 45298, 584, 613, 366, 2942, 412, 633, 24784, 295, 264, 6367, 13, 50746], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1095, 'seek': 547468, 'start': 5482.320000000001, 'end': 5484.320000000001, 'text': ' I mean you can save the space.', 'tokens': [50746, 286, 914, 291, 393, 3155, 264, 1901, 13, 50846], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1096, 'seek': 547468, 'start': 5484.320000000001, 'end': 5486.92, 'text': " You don't have to allocate new space every time.", 'tokens': [50846, 509, 500, 380, 362, 281, 35713, 777, 1901, 633, 565, 13, 50976], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1097, 'seek': 547468, 'start': 5486.92, 'end': 5491.8, 'text': ' But the semantics are these are not created only once.', 'tokens': [50976, 583, 264, 4361, 45298, 366, 613, 366, 406, 2942, 787, 1564, 13, 51220], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1098, 'seek': 547468, 'start': 5491.8, 'end': 5496.320000000001, 'text': ' They do get created at every iteration.', 'tokens': [51220, 814, 360, 483, 2942, 412, 633, 24784, 13, 51446], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1099, 'seek': 547468, 'start': 5496.320000000001, 'end': 5497.320000000001, 'text': " I'll come to that.", 'tokens': [51446, 286, 603, 808, 281, 300, 13, 51496], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1100, 'seek': 547468, 'start': 5497.320000000001, 'end': 5501.92, 'text': " It's bit more subtle but I'll come to that.", 'tokens': [51496, 467, 311, 857, 544, 13743, 457, 286, 603, 808, 281, 300, 13, 51726], 'temperature': 0.0, 'avg_logprob': -0.21465232155539773, 'compression_ratio': 1.7640449438202248, 'no_speech_prob': 0.6933625340461731}, {'id': 1101, 'seek': 550192, 'start': 5501.92, 'end': 5504.88, 'text': ' So essentially actually compiler can deal with this.', 'tokens': [50364, 407, 4476, 767, 31958, 393, 2028, 365, 341, 13, 50512], 'temperature': 0.0, 'avg_logprob': -0.18418089059682993, 'compression_ratio': 1.5421686746987953, 'no_speech_prob': 0.08262720704078674}, {'id': 1102, 'seek': 550192, 'start': 5504.88, 'end': 5513.04, 'text': ' Instead of accessing this as ESP plus 36 it can use a dynamic offset.', 'tokens': [50512, 7156, 295, 26440, 341, 382, 12564, 47, 1804, 8652, 309, 393, 764, 257, 8546, 18687, 13, 50920], 'temperature': 0.0, 'avg_logprob': -0.18418089059682993, 'compression_ratio': 1.5421686746987953, 'no_speech_prob': 0.08262720704078674}, {'id': 1103, 'seek': 550192, 'start': 5513.04, 'end': 5518.4, 'text': ' So it can keep adjusting the dynamic offset also as it is incrementing the stack point', 'tokens': [50920, 407, 309, 393, 1066, 23559, 264, 8546, 18687, 611, 382, 309, 307, 26200, 278, 264, 8630, 935, 51188], 'temperature': 0.0, 'avg_logprob': -0.18418089059682993, 'compression_ratio': 1.5421686746987953, 'no_speech_prob': 0.08262720704078674}, {'id': 1104, 'seek': 550192, 'start': 5518.4, 'end': 5519.68, 'text': ' and access.', 'tokens': [51188, 293, 2105, 13, 51252], 'temperature': 0.0, 'avg_logprob': -0.18418089059682993, 'compression_ratio': 1.5421686746987953, 'no_speech_prob': 0.08262720704078674}, {'id': 1105, 'seek': 550192, 'start': 5519.68, 'end': 5521.68, 'text': ' So this is not actually a problem.', 'tokens': [51252, 407, 341, 307, 406, 767, 257, 1154, 13, 51352], 'temperature': 0.0, 'avg_logprob': -0.18418089059682993, 'compression_ratio': 1.5421686746987953, 'no_speech_prob': 0.08262720704078674}, {'id': 1106, 'seek': 552168, 'start': 5521.68, 'end': 5543.240000000001, 'text': ' Yeah but that all it can account for in the offset computer.', 'tokens': [50364, 865, 457, 300, 439, 309, 393, 2696, 337, 294, 264, 18687, 3820, 13, 51442], 'temperature': 0.0, 'avg_logprob': -0.15770243463062106, 'compression_ratio': 1.3898305084745763, 'no_speech_prob': 0.03841353952884674}, {'id': 1107, 'seek': 552168, 'start': 5543.240000000001, 'end': 5546.700000000001, 'text': ' See the stack pointer is being manipulated by the compiler.', 'tokens': [51442, 3008, 264, 8630, 23918, 307, 885, 37161, 538, 264, 31958, 13, 51615], 'temperature': 0.0, 'avg_logprob': -0.15770243463062106, 'compression_ratio': 1.3898305084745763, 'no_speech_prob': 0.03841353952884674}, {'id': 1108, 'seek': 552168, 'start': 5546.700000000001, 'end': 5550.400000000001, 'text': ' So it knows at which points how the offset.', 'tokens': [51615, 407, 309, 3255, 412, 597, 2793, 577, 264, 18687, 13, 51800], 'temperature': 0.0, 'avg_logprob': -0.15770243463062106, 'compression_ratio': 1.3898305084745763, 'no_speech_prob': 0.03841353952884674}, {'id': 1109, 'seek': 555040, 'start': 5550.4, 'end': 5552.719999999999, 'text': ' So think of it this way.', 'tokens': [50364, 407, 519, 295, 309, 341, 636, 13, 50480], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1110, 'seek': 555040, 'start': 5552.719999999999, 'end': 5557.24, 'text': ' For every variable compiler keeps track of what is the offset of that.', 'tokens': [50480, 1171, 633, 7006, 31958, 5965, 2837, 295, 437, 307, 264, 18687, 295, 300, 13, 50706], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1111, 'seek': 555040, 'start': 5557.24, 'end': 5561.759999999999, 'text': ' In common cases it will always be a constant as in an image.', 'tokens': [50706, 682, 2689, 3331, 309, 486, 1009, 312, 257, 5754, 382, 294, 364, 3256, 13, 50932], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1112, 'seek': 555040, 'start': 5561.759999999999, 'end': 5567.44, 'text': ' But in some cases it may be a dynamic value which adjusts itself in tandem with how the', 'tokens': [50932, 583, 294, 512, 3331, 309, 815, 312, 257, 8546, 2158, 597, 4369, 82, 2564, 294, 48120, 365, 577, 264, 51216], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1113, 'seek': 555040, 'start': 5567.44, 'end': 5569.879999999999, 'text': ' stack pointer is being updated by the compiler.', 'tokens': [51216, 8630, 23918, 307, 885, 10588, 538, 264, 31958, 13, 51338], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1114, 'seek': 555040, 'start': 5569.879999999999, 'end': 5573.36, 'text': ' So if stack pointer increments this offset value also increments.', 'tokens': [51338, 407, 498, 8630, 23918, 1946, 1117, 341, 18687, 2158, 611, 1946, 1117, 13, 51512], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1115, 'seek': 555040, 'start': 5573.36, 'end': 5576.24, 'text': ' If stack pointer decrements this value also decrements.', 'tokens': [51512, 759, 8630, 23918, 6853, 1117, 341, 2158, 611, 6853, 1117, 13, 51656], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1116, 'seek': 555040, 'start': 5576.24, 'end': 5580.04, 'text': ' So compiler can deal with it.', 'tokens': [51656, 407, 31958, 393, 2028, 365, 309, 13, 51846], 'temperature': 0.0, 'avg_logprob': -0.14952565942491805, 'compression_ratio': 1.8577405857740585, 'no_speech_prob': 0.033073823899030685}, {'id': 1117, 'seek': 558004, 'start': 5580.12, 'end': 5582.88, 'text': ' But in fact you could see that.', 'tokens': [50368, 583, 294, 1186, 291, 727, 536, 300, 13, 50506], 'temperature': 0.0, 'avg_logprob': -0.15290296077728271, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.017977535724639893}, {'id': 1118, 'seek': 558004, 'start': 5582.88, 'end': 5588.88, 'text': ' So in the code which I had shown you earlier compiler is doing accessing variables relative', 'tokens': [50506, 407, 294, 264, 3089, 597, 286, 632, 4898, 291, 3071, 31958, 307, 884, 26440, 9102, 4972, 50806], 'temperature': 0.0, 'avg_logprob': -0.15290296077728271, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.017977535724639893}, {'id': 1119, 'seek': 558004, 'start': 5588.88, 'end': 5592.8, 'text': ' to stack pointer.', 'tokens': [50806, 281, 8630, 23918, 13, 51002], 'temperature': 0.0, 'avg_logprob': -0.15290296077728271, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.017977535724639893}, {'id': 1120, 'seek': 558004, 'start': 5592.8, 'end': 5600.56, 'text': ' Now what actually happens is frame pointers actually form a linked list of frames.', 'tokens': [51002, 823, 437, 767, 2314, 307, 3920, 44548, 767, 1254, 257, 9408, 1329, 295, 12083, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.15290296077728271, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.017977535724639893}, {'id': 1121, 'seek': 558004, 'start': 5600.56, 'end': 5608.3, 'text': ' So remember this saved EBP is actually holding the original EBP of the main.', 'tokens': [51390, 407, 1604, 341, 6624, 50148, 47, 307, 767, 5061, 264, 3380, 50148, 47, 295, 264, 2135, 13, 51777], 'temperature': 0.0, 'avg_logprob': -0.15290296077728271, 'compression_ratio': 1.5357142857142858, 'no_speech_prob': 0.017977535724639893}, {'id': 1122, 'seek': 560830, 'start': 5608.3, 'end': 5616.860000000001, 'text': ' So this is actually a content which is pointing to start of the stack frame of main function.', 'tokens': [50364, 407, 341, 307, 767, 257, 2701, 597, 307, 12166, 281, 722, 295, 264, 8630, 3920, 295, 2135, 2445, 13, 50792], 'temperature': 0.0, 'avg_logprob': -0.15469045992250796, 'compression_ratio': 1.7526315789473683, 'no_speech_prob': 0.005998704582452774}, {'id': 1123, 'seek': 560830, 'start': 5616.860000000001, 'end': 5618.9400000000005, 'text': ' Then main will have its own thing.', 'tokens': [50792, 1396, 2135, 486, 362, 1080, 1065, 551, 13, 50896], 'temperature': 0.0, 'avg_logprob': -0.15469045992250796, 'compression_ratio': 1.7526315789473683, 'no_speech_prob': 0.005998704582452774}, {'id': 1124, 'seek': 560830, 'start': 5618.9400000000005, 'end': 5625.34, 'text': ' So every time I am calling a function and I am saving my EBP what is happening is I', 'tokens': [50896, 407, 633, 565, 286, 669, 5141, 257, 2445, 293, 286, 669, 6816, 452, 50148, 47, 437, 307, 2737, 307, 286, 51216], 'temperature': 0.0, 'avg_logprob': -0.15469045992250796, 'compression_ratio': 1.7526315789473683, 'no_speech_prob': 0.005998704582452774}, {'id': 1125, 'seek': 560830, 'start': 5625.34, 'end': 5631.54, 'text': ' am creating a reverse linked list from one function to other prior function to the prior', 'tokens': [51216, 669, 4084, 257, 9943, 9408, 1329, 490, 472, 2445, 281, 661, 4059, 2445, 281, 264, 4059, 51526], 'temperature': 0.0, 'avg_logprob': -0.15469045992250796, 'compression_ratio': 1.7526315789473683, 'no_speech_prob': 0.005998704582452774}, {'id': 1126, 'seek': 560830, 'start': 5631.54, 'end': 5634.46, 'text': ' function to the prior function.', 'tokens': [51526, 2445, 281, 264, 4059, 2445, 13, 51672], 'temperature': 0.0, 'avg_logprob': -0.15469045992250796, 'compression_ratio': 1.7526315789473683, 'no_speech_prob': 0.005998704582452774}, {'id': 1127, 'seek': 563446, 'start': 5634.46, 'end': 5639.26, 'text': ' And this is actually used by debugger to implement backtrace.', 'tokens': [50364, 400, 341, 307, 767, 1143, 538, 24083, 1321, 281, 4445, 646, 6903, 617, 13, 50604], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1128, 'seek': 563446, 'start': 5639.26, 'end': 5642.22, 'text': ' So how does debugger know where is the caller function?', 'tokens': [50604, 407, 577, 775, 24083, 1321, 458, 689, 307, 264, 48324, 2445, 30, 50752], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1129, 'seek': 563446, 'start': 5642.22, 'end': 5649.38, 'text': ' It knows by reading the EBP value this value at EBP and then reads that and goes to that', 'tokens': [50752, 467, 3255, 538, 3760, 264, 50148, 47, 2158, 341, 2158, 412, 50148, 47, 293, 550, 15700, 300, 293, 1709, 281, 300, 51110], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1130, 'seek': 563446, 'start': 5649.38, 'end': 5653.02, 'text': ' and goes to that and goes to that and so on.', 'tokens': [51110, 293, 1709, 281, 300, 293, 1709, 281, 300, 293, 370, 322, 13, 51292], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1131, 'seek': 563446, 'start': 5653.02, 'end': 5654.42, 'text': ' Does that make sense?', 'tokens': [51292, 4402, 300, 652, 2020, 30, 51362], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1132, 'seek': 563446, 'start': 5654.42, 'end': 5658.06, 'text': ' So frame pointer is serving two purposes.', 'tokens': [51362, 407, 3920, 23918, 307, 8148, 732, 9932, 13, 51544], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1133, 'seek': 563446, 'start': 5658.06, 'end': 5663.04, 'text': ' One is it is giving you a way to access your variables at fixed offset.', 'tokens': [51544, 1485, 307, 309, 307, 2902, 291, 257, 636, 281, 2105, 428, 9102, 412, 6806, 18687, 13, 51793], 'temperature': 0.0, 'avg_logprob': -0.1188504695892334, 'compression_ratio': 1.7123893805309736, 'no_speech_prob': 0.02257043495774269}, {'id': 1134, 'seek': 566304, 'start': 5663.04, 'end': 5666.96, 'text': ' So that reduces the complexity which compiler had to deal with.', 'tokens': [50364, 407, 300, 18081, 264, 14024, 597, 31958, 632, 281, 2028, 365, 13, 50560], 'temperature': 0.0, 'avg_logprob': -0.14594462939671107, 'compression_ratio': 1.5829596412556053, 'no_speech_prob': 0.02757120691239834}, {'id': 1135, 'seek': 566304, 'start': 5666.96, 'end': 5672.2, 'text': " But let's say your compiler is sophisticated enough to deal with that complexity.", 'tokens': [50560, 583, 718, 311, 584, 428, 31958, 307, 16950, 1547, 281, 2028, 365, 300, 14024, 13, 50822], 'temperature': 0.0, 'avg_logprob': -0.14594462939671107, 'compression_ratio': 1.5829596412556053, 'no_speech_prob': 0.02757120691239834}, {'id': 1136, 'seek': 566304, 'start': 5672.2, 'end': 5677.84, 'text': ' Then still frame pointer is useful for tools like debugger, profiler or any binary tool', 'tokens': [50822, 1396, 920, 3920, 23918, 307, 4420, 337, 3873, 411, 24083, 1321, 11, 1740, 5441, 420, 604, 17434, 2290, 51104], 'temperature': 0.0, 'avg_logprob': -0.14594462939671107, 'compression_ratio': 1.5829596412556053, 'no_speech_prob': 0.02757120691239834}, {'id': 1137, 'seek': 566304, 'start': 5677.84, 'end': 5684.08, 'text': ' which is going to operate on the program to figure out the call stack.', 'tokens': [51104, 597, 307, 516, 281, 9651, 322, 264, 1461, 281, 2573, 484, 264, 818, 8630, 13, 51416], 'temperature': 0.0, 'avg_logprob': -0.14594462939671107, 'compression_ratio': 1.5829596412556053, 'no_speech_prob': 0.02757120691239834}, {'id': 1138, 'seek': 566304, 'start': 5684.08, 'end': 5688.32, 'text': ' Now what I did here I kind of went over quickly.', 'tokens': [51416, 823, 437, 286, 630, 510, 286, 733, 295, 1437, 670, 2661, 13, 51628], 'temperature': 0.0, 'avg_logprob': -0.14594462939671107, 'compression_ratio': 1.5829596412556053, 'no_speech_prob': 0.02757120691239834}, {'id': 1139, 'seek': 568832, 'start': 5688.32, 'end': 5696.2, 'text': ' So by default when you compile using the compiler it is going to use the frame pointer.', 'tokens': [50364, 407, 538, 7576, 562, 291, 31413, 1228, 264, 31958, 309, 307, 516, 281, 764, 264, 3920, 23918, 13, 50758], 'temperature': 0.0, 'avg_logprob': -0.11687573045492172, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.01167959626764059}, {'id': 1140, 'seek': 568832, 'start': 5696.2, 'end': 5708.84, 'text': ' So if I generate my assembly it is actually going to access variables using frame pointer.', 'tokens': [50758, 407, 498, 286, 8460, 452, 12103, 309, 307, 767, 516, 281, 2105, 9102, 1228, 3920, 23918, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.11687573045492172, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.01167959626764059}, {'id': 1141, 'seek': 568832, 'start': 5708.84, 'end': 5715.36, 'text': " But I have an option to say f omit frame pointer to tell compiler please don't use frame pointer", 'tokens': [51390, 583, 286, 362, 364, 3614, 281, 584, 283, 3406, 270, 3920, 23918, 281, 980, 31958, 1767, 500, 380, 764, 3920, 23918, 51716], 'temperature': 0.0, 'avg_logprob': -0.11687573045492172, 'compression_ratio': 1.6975308641975309, 'no_speech_prob': 0.01167959626764059}, {'id': 1142, 'seek': 571536, 'start': 5715.36, 'end': 5719.86, 'text': ' for being a frame pointer use it as a general purpose register.', 'tokens': [50364, 337, 885, 257, 3920, 23918, 764, 309, 382, 257, 2674, 4334, 7280, 13, 50589], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1143, 'seek': 571536, 'start': 5719.86, 'end': 5725.639999999999, 'text': ' So frame pointer can actually be made a general purpose and in that case I will actually have', 'tokens': [50589, 407, 3920, 23918, 393, 767, 312, 1027, 257, 2674, 4334, 293, 294, 300, 1389, 286, 486, 767, 362, 50878], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1144, 'seek': 571536, 'start': 5725.639999999999, 'end': 5730.639999999999, 'text': ' all the accesses relative to stack pointer.', 'tokens': [50878, 439, 264, 2105, 279, 4972, 281, 8630, 23918, 13, 51128], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1145, 'seek': 571536, 'start': 5730.639999999999, 'end': 5731.639999999999, 'text': ' Yes.', 'tokens': [51128, 1079, 13, 51178], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1146, 'seek': 571536, 'start': 5731.639999999999, 'end': 5732.639999999999, 'text': ' Correct.', 'tokens': [51178, 12753, 13, 51228], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1147, 'seek': 571536, 'start': 5732.639999999999, 'end': 5742.82, 'text': " So that's what I was saying earlier.", 'tokens': [51228, 407, 300, 311, 437, 286, 390, 1566, 3071, 13, 51737], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1148, 'seek': 571536, 'start': 5742.82, 'end': 5744.0, 'text': " So let's try to do that.", 'tokens': [51737, 407, 718, 311, 853, 281, 360, 300, 13, 51796], 'temperature': 0.0, 'avg_logprob': -0.2602327767904703, 'compression_ratio': 1.6294117647058823, 'no_speech_prob': 0.8114299178123474}, {'id': 1149, 'seek': 574400, 'start': 5744.64, 'end': 5748.52, 'text': " Let's say I had this code.", 'tokens': [50396, 961, 311, 584, 286, 632, 341, 3089, 13, 50590], 'temperature': 0.0, 'avg_logprob': -0.1999226070585705, 'compression_ratio': 1.5337423312883436, 'no_speech_prob': 0.08028332889080048}, {'id': 1150, 'seek': 574400, 'start': 5748.52, 'end': 5753.12, 'text': ' So here I know because things are statically allocated.', 'tokens': [50590, 407, 510, 286, 458, 570, 721, 366, 2219, 984, 29772, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.1999226070585705, 'compression_ratio': 1.5337423312883436, 'no_speech_prob': 0.08028332889080048}, {'id': 1151, 'seek': 574400, 'start': 5753.12, 'end': 5760.76, 'text': ' Now here the problem comes because the offset of var has suddenly changed.', 'tokens': [50820, 823, 510, 264, 1154, 1487, 570, 264, 18687, 295, 1374, 575, 5800, 3105, 13, 51202], 'temperature': 0.0, 'avg_logprob': -0.1999226070585705, 'compression_ratio': 1.5337423312883436, 'no_speech_prob': 0.08028332889080048}, {'id': 1152, 'seek': 574400, 'start': 5760.76, 'end': 5770.28, 'text': " And let's say here I create a few more variables new var then here offset has again changed.", 'tokens': [51202, 400, 718, 311, 584, 510, 286, 1884, 257, 1326, 544, 9102, 777, 1374, 550, 510, 18687, 575, 797, 3105, 13, 51678], 'temperature': 0.0, 'avg_logprob': -0.1999226070585705, 'compression_ratio': 1.5337423312883436, 'no_speech_prob': 0.08028332889080048}, {'id': 1153, 'seek': 577028, 'start': 5770.28, 'end': 5775.54, 'text': " Now one option which you have let's say you were writing the compiler what can you do.", 'tokens': [50364, 823, 472, 3614, 597, 291, 362, 718, 311, 584, 291, 645, 3579, 264, 31958, 437, 393, 291, 360, 13, 50627], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1154, 'seek': 577028, 'start': 5775.54, 'end': 5783.44, 'text': ' So one option you have is you get the initial thing and here whenever you create new variables', 'tokens': [50627, 407, 472, 3614, 291, 362, 307, 291, 483, 264, 5883, 551, 293, 510, 5699, 291, 1884, 777, 9102, 51022], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1155, 'seek': 577028, 'start': 5783.44, 'end': 5785.259999999999, 'text': ' you update your stack pointer.', 'tokens': [51022, 291, 5623, 428, 8630, 23918, 13, 51113], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1156, 'seek': 577028, 'start': 5785.259999999999, 'end': 5790.24, 'text': ' So you keep track of how your stack pointer is being updated and change the offset for', 'tokens': [51113, 407, 291, 1066, 2837, 295, 577, 428, 8630, 23918, 307, 885, 10588, 293, 1319, 264, 18687, 337, 51362], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1157, 'seek': 577028, 'start': 5790.24, 'end': 5793.08, 'text': ' every variable accordingly.', 'tokens': [51362, 633, 7006, 19717, 13, 51504], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1158, 'seek': 577028, 'start': 5793.08, 'end': 5797.84, 'text': ' Now compilers actually do something more simpler than this.', 'tokens': [51504, 823, 715, 388, 433, 767, 360, 746, 544, 18587, 813, 341, 13, 51742], 'temperature': 0.0, 'avg_logprob': -0.1392261611090766, 'compression_ratio': 1.7432432432432432, 'no_speech_prob': 0.00400557741522789}, {'id': 1159, 'seek': 579784, 'start': 5797.84, 'end': 5800.360000000001, 'text': " Compilers actually don't.", 'tokens': [50364, 6620, 388, 433, 767, 500, 380, 13, 50490], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1160, 'seek': 579784, 'start': 5800.360000000001, 'end': 5806.68, 'text': ' So if you look at the semantics of the language it says dummy and dummy2 are created every', 'tokens': [50490, 407, 498, 291, 574, 412, 264, 4361, 45298, 295, 264, 2856, 309, 1619, 35064, 293, 35064, 17, 366, 2942, 633, 50806], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1161, 'seek': 579784, 'start': 5806.68, 'end': 5809.84, 'text': ' time this loop is entered.', 'tokens': [50806, 565, 341, 6367, 307, 9065, 13, 50964], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1162, 'seek': 579784, 'start': 5809.84, 'end': 5812.22, 'text': " But compilers actually don't do that.", 'tokens': [50964, 583, 715, 388, 433, 767, 500, 380, 360, 300, 13, 51083], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1163, 'seek': 579784, 'start': 5812.22, 'end': 5820.84, 'text': ' What compilers will do is here only they will allocate space for space for var arr dummy', 'tokens': [51083, 708, 715, 388, 433, 486, 360, 307, 510, 787, 436, 486, 35713, 1901, 337, 1901, 337, 1374, 5539, 35064, 51514], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1164, 'seek': 579784, 'start': 5820.84, 'end': 5823.32, 'text': ' dummy2.', 'tokens': [51514, 35064, 17, 13, 51638], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1165, 'seek': 579784, 'start': 5823.32, 'end': 5827.16, 'text': ' See because when compiler is analyzing code it is doing multiple passes.', 'tokens': [51638, 3008, 570, 562, 31958, 307, 23663, 3089, 309, 307, 884, 3866, 11335, 13, 51830], 'temperature': 0.0, 'avg_logprob': -0.17222605360315202, 'compression_ratio': 1.6635071090047393, 'no_speech_prob': 0.004194725304841995}, {'id': 1166, 'seek': 582716, 'start': 5827.16, 'end': 5829.639999999999, 'text': " It's not that it is interpreter.", 'tokens': [50364, 467, 311, 406, 300, 309, 307, 34132, 13, 50488], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1167, 'seek': 582716, 'start': 5829.639999999999, 'end': 5833.48, 'text': " So it's not that it doesn't have visibility of what is going to happen next.", 'tokens': [50488, 407, 309, 311, 406, 300, 309, 1177, 380, 362, 19883, 295, 437, 307, 516, 281, 1051, 958, 13, 50680], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1168, 'seek': 582716, 'start': 5833.48, 'end': 5835.44, 'text': ' It does have.', 'tokens': [50680, 467, 775, 362, 13, 50778], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1169, 'seek': 582716, 'start': 5835.44, 'end': 5839.84, 'text': ' So it is going to allocate space for everything.', 'tokens': [50778, 407, 309, 307, 516, 281, 35713, 1901, 337, 1203, 13, 50998], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1170, 'seek': 582716, 'start': 5839.84, 'end': 5845.08, 'text': ' At this point it is just going to insert code which will reinitialize dummy and dummy2.', 'tokens': [50998, 1711, 341, 935, 309, 307, 445, 516, 281, 8969, 3089, 597, 486, 6561, 270, 831, 1125, 35064, 293, 35064, 17, 13, 51260], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1171, 'seek': 582716, 'start': 5845.08, 'end': 5848.5, 'text': ' It will not actually allocate more space into the stack.', 'tokens': [51260, 467, 486, 406, 767, 35713, 544, 1901, 666, 264, 8630, 13, 51431], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1172, 'seek': 582716, 'start': 5848.5, 'end': 5856.76, 'text': ' So compiler will actually try to allocate most of the stack space at start of the function.', 'tokens': [51431, 407, 31958, 486, 767, 853, 281, 35713, 881, 295, 264, 8630, 1901, 412, 722, 295, 264, 2445, 13, 51844], 'temperature': 0.0, 'avg_logprob': -0.12054473948928546, 'compression_ratio': 1.8177777777777777, 'no_speech_prob': 0.001031896797940135}, {'id': 1173, 'seek': 585676, 'start': 5856.76, 'end': 5859.64, 'text': " So let's try to do let's look at this.", 'tokens': [50364, 407, 718, 311, 853, 281, 360, 718, 311, 574, 412, 341, 13, 50508], 'temperature': 0.0, 'avg_logprob': -0.3777719736099243, 'compression_ratio': 1.1506849315068493, 'no_speech_prob': 0.6912794709205627}, {'id': 1174, 'seek': 585676, 'start': 5859.64, 'end': 5878.92, 'text': " So let's say I had var and var is equal to 7.", 'tokens': [50508, 407, 718, 311, 584, 286, 632, 1374, 293, 1374, 307, 2681, 281, 1614, 13, 51472], 'temperature': 0.0, 'avg_logprob': -0.3777719736099243, 'compression_ratio': 1.1506849315068493, 'no_speech_prob': 0.6912794709205627}, {'id': 1175, 'seek': 590892, 'start': 5909.6, 'end': 5922.12, 'text': ' So if you look at the sub l instruction it occurs only once.', 'tokens': [50398, 407, 498, 291, 574, 412, 264, 1422, 287, 10951, 309, 11843, 787, 1564, 13, 51024], 'temperature': 0.0, 'avg_logprob': -0.1738483696653132, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.009066417813301086}, {'id': 1176, 'seek': 590892, 'start': 5922.12, 'end': 5925.64, 'text': " It didn't occur in the loop.", 'tokens': [51024, 467, 994, 380, 5160, 294, 264, 6367, 13, 51200], 'temperature': 0.0, 'avg_logprob': -0.1738483696653132, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.009066417813301086}, {'id': 1177, 'seek': 590892, 'start': 5925.64, 'end': 5930.8, 'text': ' So what compiler simply did is it figured out how much stack space is needed and whatever', 'tokens': [51200, 407, 437, 31958, 2935, 630, 307, 309, 8932, 484, 577, 709, 8630, 1901, 307, 2978, 293, 2035, 51458], 'temperature': 0.0, 'avg_logprob': -0.1738483696653132, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.009066417813301086}, {'id': 1178, 'seek': 590892, 'start': 5930.8, 'end': 5933.38, 'text': ' is needed it allocated it at once.', 'tokens': [51458, 307, 2978, 309, 29772, 309, 412, 1564, 13, 51587], 'temperature': 0.0, 'avg_logprob': -0.1738483696653132, 'compression_ratio': 1.4657534246575343, 'no_speech_prob': 0.009066417813301086}, {'id': 1179, 'seek': 593338, 'start': 5933.38, 'end': 5937.900000000001, 'text': ' So by then it would know where I am putting var, where I am putting i, where I am putting', 'tokens': [50364, 407, 538, 550, 309, 576, 458, 689, 286, 669, 3372, 1374, 11, 689, 286, 669, 3372, 741, 11, 689, 286, 669, 3372, 50590], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1180, 'seek': 593338, 'start': 5937.900000000001, 'end': 5939.46, 'text': ' dummy.', 'tokens': [50590, 35064, 13, 50668], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1181, 'seek': 593338, 'start': 5939.46, 'end': 5942.7, 'text': ' So that simplifies the tracking part for compiler.', 'tokens': [50668, 407, 300, 6883, 11221, 264, 11603, 644, 337, 31958, 13, 50830], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1182, 'seek': 593338, 'start': 5942.7, 'end': 5947.86, 'text': " But it's more of an implementation simplicity nothing more.", 'tokens': [50830, 583, 309, 311, 544, 295, 364, 11420, 25632, 1825, 544, 13, 51088], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1183, 'seek': 593338, 'start': 5947.86, 'end': 5952.62, 'text': ' In theory compiler should be able to track whenever stack pointer is updated update the', 'tokens': [51088, 682, 5261, 31958, 820, 312, 1075, 281, 2837, 5699, 8630, 23918, 307, 10588, 5623, 264, 51326], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1184, 'seek': 593338, 'start': 5952.62, 'end': 5954.02, 'text': ' corresponding offsets.', 'tokens': [51326, 11760, 39457, 1385, 13, 51396], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1185, 'seek': 593338, 'start': 5954.02, 'end': 5961.12, 'text': ' But compilers kind of hesitate to do that because it causes unnecessary work.', 'tokens': [51396, 583, 715, 388, 433, 733, 295, 20842, 281, 360, 300, 570, 309, 7700, 19350, 589, 13, 51751], 'temperature': 0.0, 'avg_logprob': -0.18210824330647787, 'compression_ratio': 1.7444933920704846, 'no_speech_prob': 0.04880275949835777}, {'id': 1186, 'seek': 596112, 'start': 5961.12, 'end': 5967.8, 'text': ' So we saw that frame pointer is useful for referencing variables within the stack frame.', 'tokens': [50364, 407, 321, 1866, 300, 3920, 23918, 307, 4420, 337, 40582, 9102, 1951, 264, 8630, 3920, 13, 50698], 'temperature': 0.0, 'avg_logprob': -0.15918951256330624, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.028403669595718384}, {'id': 1187, 'seek': 596112, 'start': 5967.8, 'end': 5973.599999999999, 'text': ' But also it forms the ability to create backtracks.', 'tokens': [50698, 583, 611, 309, 6422, 264, 3485, 281, 1884, 646, 6903, 7424, 13, 50988], 'temperature': 0.0, 'avg_logprob': -0.15918951256330624, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.028403669595718384}, {'id': 1188, 'seek': 596112, 'start': 5973.599999999999, 'end': 5979.42, 'text': ' Now to be able to figure out now what all is needed to return to the caller.', 'tokens': [50988, 823, 281, 312, 1075, 281, 2573, 484, 586, 437, 439, 307, 2978, 281, 2736, 281, 264, 48324, 13, 51279], 'temperature': 0.0, 'avg_logprob': -0.15918951256330624, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.028403669595718384}, {'id': 1189, 'seek': 596112, 'start': 5979.42, 'end': 5984.84, 'text': ' So remember what all happened within the callee function.', 'tokens': [51279, 407, 1604, 437, 439, 2011, 1951, 264, 818, 1653, 2445, 13, 51550], 'temperature': 0.0, 'avg_logprob': -0.15918951256330624, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.028403669595718384}, {'id': 1190, 'seek': 596112, 'start': 5984.84, 'end': 5989.099999999999, 'text': ' Apart from the body of the callee function itself callee function did update the stack', 'tokens': [51550, 24111, 490, 264, 1772, 295, 264, 818, 1653, 2445, 2564, 818, 1653, 2445, 630, 5623, 264, 8630, 51763], 'temperature': 0.0, 'avg_logprob': -0.15918951256330624, 'compression_ratio': 1.723809523809524, 'no_speech_prob': 0.028403669595718384}, {'id': 1191, 'seek': 598910, 'start': 5989.3, 'end': 5991.900000000001, 'text': ' pointer.', 'tokens': [50374, 23918, 13, 50504], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1192, 'seek': 598910, 'start': 5991.900000000001, 'end': 5997.06, 'text': ' And coming back to the point which you were raising earlier what will happen when I do', 'tokens': [50504, 400, 1348, 646, 281, 264, 935, 597, 291, 645, 11225, 3071, 437, 486, 1051, 562, 286, 360, 50762], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1193, 'seek': 598910, 'start': 5997.06, 'end': 6003.740000000001, 'text': ' return when the return address is not at top of the stack.', 'tokens': [50762, 2736, 562, 264, 2736, 2985, 307, 406, 412, 1192, 295, 264, 8630, 13, 51096], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1194, 'seek': 598910, 'start': 6003.740000000001, 'end': 6010.0, 'text': ' So we need to ensure just before return the stack pointer is always pointing to the return', 'tokens': [51096, 407, 321, 643, 281, 5586, 445, 949, 2736, 264, 8630, 23918, 307, 1009, 12166, 281, 264, 2736, 51409], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1195, 'seek': 598910, 'start': 6010.0, 'end': 6011.0, 'text': ' address.', 'tokens': [51409, 2985, 13, 51459], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1196, 'seek': 598910, 'start': 6011.0, 'end': 6019.08, 'text': ' And compiler can simply do that by updating stack pointer to move point to the frame pointer', 'tokens': [51459, 400, 31958, 393, 2935, 360, 300, 538, 25113, 8630, 23918, 281, 1286, 935, 281, 264, 3920, 23918, 51863], 'temperature': 0.0, 'avg_logprob': -0.1725961173452982, 'compression_ratio': 1.788659793814433, 'no_speech_prob': 0.3005191683769226}, {'id': 1197, 'seek': 601908, 'start': 6019.08, 'end': 6020.92, 'text': ' and then return.', 'tokens': [50364, 293, 550, 2736, 13, 50456], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1198, 'seek': 601908, 'start': 6020.92, 'end': 6025.84, 'text': ' Because see what compiler is doing is it is moving the base pointer into the frame pointer.', 'tokens': [50456, 1436, 536, 437, 31958, 307, 884, 307, 309, 307, 2684, 264, 3096, 23918, 666, 264, 3920, 23918, 13, 50702], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1199, 'seek': 601908, 'start': 6025.84, 'end': 6029.64, 'text': ' So stack pointer also started pointing here.', 'tokens': [50702, 407, 8630, 23918, 611, 1409, 12166, 510, 13, 50892], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1200, 'seek': 601908, 'start': 6029.64, 'end': 6033.86, 'text': ' Then it popped the EBP from here.', 'tokens': [50892, 1396, 309, 21545, 264, 50148, 47, 490, 510, 13, 51103], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1201, 'seek': 601908, 'start': 6033.86, 'end': 6040.66, 'text': ' That means stack pointer is actually pointing to the return address and then it did return.', 'tokens': [51103, 663, 1355, 8630, 23918, 307, 767, 12166, 281, 264, 2736, 2985, 293, 550, 309, 630, 2736, 13, 51443], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1202, 'seek': 601908, 'start': 6040.66, 'end': 6041.84, 'text': ' Does that make sense?', 'tokens': [51443, 4402, 300, 652, 2020, 30, 51502], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1203, 'seek': 601908, 'start': 6041.84, 'end': 6047.0599999999995, 'text': ' So just before returning you had allocated space into the stack.', 'tokens': [51502, 407, 445, 949, 12678, 291, 632, 29772, 1901, 666, 264, 8630, 13, 51763], 'temperature': 0.0, 'avg_logprob': -0.1500363082028507, 'compression_ratio': 1.7596153846153846, 'no_speech_prob': 0.0002529874036554247}, {'id': 1204, 'seek': 604706, 'start': 6047.06, 'end': 6051.4400000000005, 'text': ' So you need to ensure the stack pointer is now pointing to the return address so that', 'tokens': [50364, 407, 291, 643, 281, 5586, 264, 8630, 23918, 307, 586, 12166, 281, 264, 2736, 2985, 370, 300, 50583], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1205, 'seek': 604706, 'start': 6051.4400000000005, 'end': 6058.120000000001, 'text': ' when ret instruction executes it will actually return to the correct address.', 'tokens': [50583, 562, 1533, 10951, 4454, 1819, 309, 486, 767, 2736, 281, 264, 3006, 2985, 13, 50917], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1206, 'seek': 604706, 'start': 6058.120000000001, 'end': 6065.0, 'text': ' So this is essentially called as a stack clean up from callee function.', 'tokens': [50917, 407, 341, 307, 4476, 1219, 382, 257, 8630, 2541, 493, 490, 818, 1653, 2445, 13, 51261], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1207, 'seek': 604706, 'start': 6065.0, 'end': 6067.96, 'text': ' So there are two terms which you might hear.', 'tokens': [51261, 407, 456, 366, 732, 2115, 597, 291, 1062, 1568, 13, 51409], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1208, 'seek': 604706, 'start': 6067.96, 'end': 6071.52, 'text': ' There is something called as function prologue and then there is something called as function', 'tokens': [51409, 821, 307, 746, 1219, 382, 2445, 447, 4987, 622, 293, 550, 456, 307, 746, 1219, 382, 2445, 51587], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1209, 'seek': 604706, 'start': 6071.52, 'end': 6072.8, 'text': ' epilogue.', 'tokens': [51587, 2388, 388, 7213, 13, 51651], 'temperature': 0.0, 'avg_logprob': -0.15568287817986456, 'compression_ratio': 1.8640776699029127, 'no_speech_prob': 0.003821380902081728}, {'id': 1210, 'seek': 607280, 'start': 6072.8, 'end': 6077.1, 'text': ' So the set of instructions which you see at the beginning of the function is essentially', 'tokens': [50364, 407, 264, 992, 295, 9415, 597, 291, 536, 412, 264, 2863, 295, 264, 2445, 307, 4476, 50579], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1211, 'seek': 607280, 'start': 6077.1, 'end': 6078.76, 'text': ' function prologue.', 'tokens': [50579, 2445, 447, 4987, 622, 13, 50662], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1212, 'seek': 607280, 'start': 6078.76, 'end': 6085.66, 'text': ' And function prologue typically includes saving the base pointer, original base pointer, updating', 'tokens': [50662, 400, 2445, 447, 4987, 622, 5850, 5974, 6816, 264, 3096, 23918, 11, 3380, 3096, 23918, 11, 25113, 51007], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1213, 'seek': 607280, 'start': 6085.66, 'end': 6090.860000000001, 'text': ' the stack pointer and then subtracting space into the stack.', 'tokens': [51007, 264, 8630, 23918, 293, 550, 16390, 278, 1901, 666, 264, 8630, 13, 51267], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1214, 'seek': 607280, 'start': 6090.860000000001, 'end': 6094.4800000000005, 'text': ' That means you are allocating space onto the stack.', 'tokens': [51267, 663, 1355, 291, 366, 12660, 990, 1901, 3911, 264, 8630, 13, 51448], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1215, 'seek': 607280, 'start': 6094.4800000000005, 'end': 6099.56, 'text': ' So all of these instructions will happen at start of the function typically.', 'tokens': [51448, 407, 439, 295, 613, 9415, 486, 1051, 412, 722, 295, 264, 2445, 5850, 13, 51702], 'temperature': 0.0, 'avg_logprob': -0.1430139434471559, 'compression_ratio': 1.984924623115578, 'no_speech_prob': 0.03207557275891304}, {'id': 1216, 'seek': 609956, 'start': 6099.56, 'end': 6106.72, 'text': ' And at the epilogue which is just before the return you will update the stack pointer', 'tokens': [50364, 400, 412, 264, 2388, 388, 7213, 597, 307, 445, 949, 264, 2736, 291, 486, 5623, 264, 8630, 23918, 50722], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1217, 'seek': 609956, 'start': 6106.72, 'end': 6108.68, 'text': ' to point to the base pointer.', 'tokens': [50722, 281, 935, 281, 264, 3096, 23918, 13, 50820], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1218, 'seek': 609956, 'start': 6108.68, 'end': 6115.080000000001, 'text': ' You get the value of the base pointer and you pop the return address when you do the', 'tokens': [50820, 509, 483, 264, 2158, 295, 264, 3096, 23918, 293, 291, 1665, 264, 2736, 2985, 562, 291, 360, 264, 51140], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1219, 'seek': 609956, 'start': 6115.080000000001, 'end': 6116.9800000000005, 'text': ' return instruction.', 'tokens': [51140, 2736, 10951, 13, 51235], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1220, 'seek': 609956, 'start': 6116.9800000000005, 'end': 6121.76, 'text': ' So these two instruction sequences are called function prologue and function epilogue.', 'tokens': [51235, 407, 613, 732, 10951, 22978, 366, 1219, 2445, 447, 4987, 622, 293, 2445, 2388, 388, 7213, 13, 51474], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1221, 'seek': 609956, 'start': 6121.76, 'end': 6124.72, 'text': ' And you can actually see them in this.', 'tokens': [51474, 400, 291, 393, 767, 536, 552, 294, 341, 13, 51622], 'temperature': 0.0, 'avg_logprob': -0.14843545958053234, 'compression_ratio': 1.8020833333333333, 'no_speech_prob': 0.10659237951040268}, {'id': 1222, 'seek': 612472, 'start': 6124.72, 'end': 6134.84, 'text': ' So if you look at this, so here we see saving of the frame pointer and subtraction of the', 'tokens': [50364, 407, 498, 291, 574, 412, 341, 11, 370, 510, 321, 536, 6816, 295, 264, 3920, 23918, 293, 16390, 313, 295, 264, 50870], 'temperature': 0.0, 'avg_logprob': -0.16500470175671933, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.011323864571750164}, {'id': 1223, 'seek': 612472, 'start': 6134.84, 'end': 6140.08, 'text': ' stack pointer and pushing the original value of the base pointer.', 'tokens': [50870, 8630, 23918, 293, 7380, 264, 3380, 2158, 295, 264, 3096, 23918, 13, 51132], 'temperature': 0.0, 'avg_logprob': -0.16500470175671933, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.011323864571750164}, {'id': 1224, 'seek': 612472, 'start': 6140.08, 'end': 6143.76, 'text': ' So this forms the function prologue pretty much.', 'tokens': [51132, 407, 341, 6422, 264, 2445, 447, 4987, 622, 1238, 709, 13, 51316], 'temperature': 0.0, 'avg_logprob': -0.16500470175671933, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.011323864571750164}, {'id': 1225, 'seek': 612472, 'start': 6143.76, 'end': 6149.68, 'text': ' Epilogue actually is kind of handled by instruction called leave.', 'tokens': [51316, 9970, 388, 7213, 767, 307, 733, 295, 18033, 538, 10951, 1219, 1856, 13, 51612], 'temperature': 0.0, 'avg_logprob': -0.16500470175671933, 'compression_ratio': 1.569767441860465, 'no_speech_prob': 0.011323864571750164}, {'id': 1226, 'seek': 614968, 'start': 6149.68, 'end': 6156.0, 'text': ' So in x86 there is an instruction called leave which essentially does this.', 'tokens': [50364, 407, 294, 2031, 22193, 456, 307, 364, 10951, 1219, 1856, 597, 4476, 775, 341, 13, 50680], 'temperature': 0.0, 'avg_logprob': -0.1570930627676157, 'compression_ratio': 1.8278145695364238, 'no_speech_prob': 0.1094466894865036}, {'id': 1227, 'seek': 614968, 'start': 6156.0, 'end': 6160.62, 'text': ' And then there is also an instruction called enter which is equivalent to this.', 'tokens': [50680, 400, 550, 456, 307, 611, 364, 10951, 1219, 3242, 597, 307, 10344, 281, 341, 13, 50911], 'temperature': 0.0, 'avg_logprob': -0.1570930627676157, 'compression_ratio': 1.8278145695364238, 'no_speech_prob': 0.1094466894865036}, {'id': 1228, 'seek': 614968, 'start': 6160.62, 'end': 6164.96, 'text': ' So you either might see these instructions or you might see a leave instruction or enter', 'tokens': [50911, 407, 291, 2139, 1062, 536, 613, 9415, 420, 291, 1062, 536, 257, 1856, 10951, 420, 3242, 51128], 'temperature': 0.0, 'avg_logprob': -0.1570930627676157, 'compression_ratio': 1.8278145695364238, 'no_speech_prob': 0.1094466894865036}, {'id': 1229, 'seek': 614968, 'start': 6164.96, 'end': 6169.12, 'text': ' instruction.', 'tokens': [51128, 10951, 13, 51336], 'temperature': 0.0, 'avg_logprob': -0.1570930627676157, 'compression_ratio': 1.8278145695364238, 'no_speech_prob': 0.1094466894865036}, {'id': 1230, 'seek': 614968, 'start': 6169.12, 'end': 6173.8, 'text': ' Any doubts so far?', 'tokens': [51336, 2639, 22618, 370, 1400, 30, 51570], 'temperature': 0.0, 'avg_logprob': -0.1570930627676157, 'compression_ratio': 1.8278145695364238, 'no_speech_prob': 0.1094466894865036}, {'id': 1231, 'seek': 617380, 'start': 6173.8, 'end': 6197.400000000001, 'text': ' So can you tell me what is output of this code?', 'tokens': [50364, 407, 393, 291, 980, 385, 437, 307, 5598, 295, 341, 3089, 30, 51544], 'temperature': 0.0, 'avg_logprob': -0.3109346798488072, 'compression_ratio': 1.0975609756097562, 'no_speech_prob': 0.7705742120742798}, {'id': 1232, 'seek': 617380, 'start': 6197.400000000001, 'end': 6200.0, 'text': ' How many of you think it is garbage value?', 'tokens': [51544, 1012, 867, 295, 291, 519, 309, 307, 14150, 2158, 30, 51674], 'temperature': 0.0, 'avg_logprob': -0.3109346798488072, 'compression_ratio': 1.0975609756097562, 'no_speech_prob': 0.7705742120742798}, {'id': 1233, 'seek': 620000, 'start': 6200.88, 'end': 6205.4, 'text': ' Two people, three people.', 'tokens': [50408, 4453, 561, 11, 1045, 561, 13, 50634], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1234, 'seek': 620000, 'start': 6205.4, 'end': 6208.06, 'text': ' Garbage okay.', 'tokens': [50634, 7995, 9742, 1392, 13, 50767], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1235, 'seek': 620000, 'start': 6208.06, 'end': 6210.12, 'text': ' So four or five people think it is garbage.', 'tokens': [50767, 407, 1451, 420, 1732, 561, 519, 309, 307, 14150, 13, 50870], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1236, 'seek': 620000, 'start': 6210.12, 'end': 6213.3, 'text': ' What do others think?', 'tokens': [50870, 708, 360, 2357, 519, 30, 51029], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1237, 'seek': 620000, 'start': 6213.3, 'end': 6218.56, 'text': ' Undefined behaviour.', 'tokens': [51029, 2719, 5666, 2001, 17229, 13, 51292], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1238, 'seek': 620000, 'start': 6218.56, 'end': 6221.24, 'text': ' Can someone explain what is the problem in this code?', 'tokens': [51292, 1664, 1580, 2903, 437, 307, 264, 1154, 294, 341, 3089, 30, 51426], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1239, 'seek': 620000, 'start': 6221.24, 'end': 6222.24, 'text': ' Yes.', 'tokens': [51426, 1079, 13, 51476], 'temperature': 0.0, 'avg_logprob': -0.41327234041892874, 'compression_ratio': 1.3405797101449275, 'no_speech_prob': 0.8232229351997375}, {'id': 1240, 'seek': 622224, 'start': 6222.36, 'end': 6227.36, 'text': ' Okay.', 'tokens': [50370, 1033, 13, 50620], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1241, 'seek': 622224, 'start': 6227.36, 'end': 6236.96, 'text': ' Then what is the problem with that?', 'tokens': [50620, 1396, 437, 307, 264, 1154, 365, 300, 30, 51100], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1242, 'seek': 622224, 'start': 6236.96, 'end': 6239.16, 'text': ' So does everyone understand the problem?', 'tokens': [51100, 407, 775, 1518, 1223, 264, 1154, 30, 51210], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1243, 'seek': 622224, 'start': 6239.16, 'end': 6241.0, 'text': ' So remember what we did.', 'tokens': [51210, 407, 1604, 437, 321, 630, 13, 51302], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1244, 'seek': 622224, 'start': 6241.0, 'end': 6246.04, 'text': ' In the prior thing I said that once just before the function is returning the stack pointer', 'tokens': [51302, 682, 264, 4059, 551, 286, 848, 300, 1564, 445, 949, 264, 2445, 307, 12678, 264, 8630, 23918, 51554], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1245, 'seek': 622224, 'start': 6246.04, 'end': 6247.04, 'text': ' was updated.', 'tokens': [51554, 390, 10588, 13, 51604], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1246, 'seek': 622224, 'start': 6247.04, 'end': 6248.04, 'text': ' Right.', 'tokens': [51604, 1779, 13, 51654], 'temperature': 0.0, 'avg_logprob': -0.2711887046939037, 'compression_ratio': 1.4313725490196079, 'no_speech_prob': 0.06177141144871712}, {'id': 1247, 'seek': 624804, 'start': 6248.28, 'end': 6253.92, 'text': ' So it was pointing to now the caller function.', 'tokens': [50376, 407, 309, 390, 12166, 281, 586, 264, 48324, 2445, 13, 50658], 'temperature': 0.0, 'avg_logprob': -0.15101965268452963, 'compression_ratio': 1.516778523489933, 'no_speech_prob': 0.06748805940151215}, {'id': 1248, 'seek': 624804, 'start': 6253.92, 'end': 6261.14, 'text': ' So what happened in this case is I created this arr variable and I returned address of', 'tokens': [50658, 407, 437, 2011, 294, 341, 1389, 307, 286, 2942, 341, 5539, 7006, 293, 286, 8752, 2985, 295, 51019], 'temperature': 0.0, 'avg_logprob': -0.15101965268452963, 'compression_ratio': 1.516778523489933, 'no_speech_prob': 0.06748805940151215}, {'id': 1249, 'seek': 624804, 'start': 6261.14, 'end': 6262.28, 'text': ' it.', 'tokens': [51019, 309, 13, 51076], 'temperature': 0.0, 'avg_logprob': -0.15101965268452963, 'compression_ratio': 1.516778523489933, 'no_speech_prob': 0.06748805940151215}, {'id': 1250, 'seek': 624804, 'start': 6262.28, 'end': 6266.4, 'text': ' And before I returned the stack pointer was updated.', 'tokens': [51076, 400, 949, 286, 8752, 264, 8630, 23918, 390, 10588, 13, 51282], 'temperature': 0.0, 'avg_logprob': -0.15101965268452963, 'compression_ratio': 1.516778523489933, 'no_speech_prob': 0.06748805940151215}, {'id': 1251, 'seek': 624804, 'start': 6266.4, 'end': 6270.92, 'text': ' So this was no longer in the stack.', 'tokens': [51282, 407, 341, 390, 572, 2854, 294, 264, 8630, 13, 51508], 'temperature': 0.0, 'avg_logprob': -0.15101965268452963, 'compression_ratio': 1.516778523489933, 'no_speech_prob': 0.06748805940151215}, {'id': 1252, 'seek': 627092, 'start': 6270.92, 'end': 6280.4, 'text': ' Now the question will it actually print garbage or will it print valid value?', 'tokens': [50364, 823, 264, 1168, 486, 309, 767, 4482, 14150, 420, 486, 309, 4482, 7363, 2158, 30, 50838], 'temperature': 0.0, 'avg_logprob': -0.5095420951273903, 'compression_ratio': 1.6236559139784945, 'no_speech_prob': 0.03612777963280678}, {'id': 1253, 'seek': 627092, 'start': 6280.4, 'end': 6289.4, 'text': ' I guess it prints some valid value because the stack manipulation has to be defined to', 'tokens': [50838, 286, 2041, 309, 22305, 512, 7363, 2158, 570, 264, 8630, 26475, 575, 281, 312, 7642, 281, 51288], 'temperature': 0.0, 'avg_logprob': -0.5095420951273903, 'compression_ratio': 1.6236559139784945, 'no_speech_prob': 0.03612777963280678}, {'id': 1254, 'seek': 627092, 'start': 6289.4, 'end': 6293.4, 'text': ' implement the increment of the stack.', 'tokens': [51288, 4445, 264, 26200, 295, 264, 8630, 13, 51488], 'temperature': 0.0, 'avg_logprob': -0.5095420951273903, 'compression_ratio': 1.6236559139784945, 'no_speech_prob': 0.03612777963280678}, {'id': 1255, 'seek': 627092, 'start': 6293.4, 'end': 6294.4, 'text': ' Correct.', 'tokens': [51488, 12753, 13, 51538], 'temperature': 0.0, 'avg_logprob': -0.5095420951273903, 'compression_ratio': 1.6236559139784945, 'no_speech_prob': 0.03612777963280678}, {'id': 1256, 'seek': 627092, 'start': 6294.4, 'end': 6300.4800000000005, 'text': ' So that is the difference between someone knowing the internals versus someone just saying', 'tokens': [51538, 407, 300, 307, 264, 2649, 1296, 1580, 5276, 264, 2154, 1124, 5717, 1580, 445, 1566, 51842], 'temperature': 0.0, 'avg_logprob': -0.5095420951273903, 'compression_ratio': 1.6236559139784945, 'no_speech_prob': 0.03612777963280678}, {'id': 1257, 'seek': 630048, 'start': 6300.48, 'end': 6303.2, 'text': ' this is not going to work.', 'tokens': [50364, 341, 307, 406, 516, 281, 589, 13, 50500], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1258, 'seek': 630048, 'start': 6303.2, 'end': 6308.28, 'text': ' See these type of things will actually help you debug things easily.', 'tokens': [50500, 3008, 613, 2010, 295, 721, 486, 767, 854, 291, 24083, 721, 3612, 13, 50754], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1259, 'seek': 630048, 'start': 6308.28, 'end': 6312.62, 'text': ' This code will actually print a valid value.', 'tokens': [50754, 639, 3089, 486, 767, 4482, 257, 7363, 2158, 13, 50971], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1260, 'seek': 630048, 'start': 6312.62, 'end': 6318.16, 'text': ' So from if you just observe the execution of the program there is nothing wrong with', 'tokens': [50971, 407, 490, 498, 291, 445, 11441, 264, 15058, 295, 264, 1461, 456, 307, 1825, 2085, 365, 51248], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1261, 'seek': 630048, 'start': 6318.16, 'end': 6323.639999999999, 'text': ' it because you will still get the expected value.', 'tokens': [51248, 309, 570, 291, 486, 920, 483, 264, 5176, 2158, 13, 51522], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1262, 'seek': 630048, 'start': 6323.639999999999, 'end': 6329.419999999999, 'text': ' And the reason for that is stack allocation, deallocation simply move the stack pointer.', 'tokens': [51522, 400, 264, 1778, 337, 300, 307, 8630, 27599, 11, 368, 336, 27943, 2935, 1286, 264, 8630, 23918, 13, 51811], 'temperature': 0.0, 'avg_logprob': -0.16030038636306237, 'compression_ratio': 1.6930232558139535, 'no_speech_prob': 0.0005877671646885574}, {'id': 1263, 'seek': 632942, 'start': 6329.42, 'end': 6333.66, 'text': " It didn't really modified the content of the memory.", 'tokens': [50364, 467, 994, 380, 534, 15873, 264, 2701, 295, 264, 4675, 13, 50576], 'temperature': 0.0, 'avg_logprob': -0.15963185351827872, 'compression_ratio': 1.6149425287356323, 'no_speech_prob': 0.010325108654797077}, {'id': 1264, 'seek': 632942, 'start': 6333.66, 'end': 6341.3, 'text': ' So unless something happened with modified that content you would still have that value.', 'tokens': [50576, 407, 5969, 746, 2011, 365, 15873, 300, 2701, 291, 576, 920, 362, 300, 2158, 13, 50958], 'temperature': 0.0, 'avg_logprob': -0.15963185351827872, 'compression_ratio': 1.6149425287356323, 'no_speech_prob': 0.010325108654797077}, {'id': 1265, 'seek': 632942, 'start': 6341.3, 'end': 6347.06, 'text': ' So in most of the cases when you run this program you will actually get a correct and', 'tokens': [50958, 407, 294, 881, 295, 264, 3331, 562, 291, 1190, 341, 1461, 291, 486, 767, 483, 257, 3006, 293, 51246], 'temperature': 0.0, 'avg_logprob': -0.15963185351827872, 'compression_ratio': 1.6149425287356323, 'no_speech_prob': 0.010325108654797077}, {'id': 1266, 'seek': 632942, 'start': 6347.06, 'end': 6348.06, 'text': ' expected value.', 'tokens': [51246, 5176, 2158, 13, 51296], 'temperature': 0.0, 'avg_logprob': -0.15963185351827872, 'compression_ratio': 1.6149425287356323, 'no_speech_prob': 0.010325108654797077}, {'id': 1267, 'seek': 632942, 'start': 6348.06, 'end': 6351.16, 'text': ' It just that the code is still buggy.', 'tokens': [51296, 467, 445, 300, 264, 3089, 307, 920, 7426, 1480, 13, 51451], 'temperature': 0.0, 'avg_logprob': -0.15963185351827872, 'compression_ratio': 1.6149425287356323, 'no_speech_prob': 0.010325108654797077}, {'id': 1268, 'seek': 635116, 'start': 6351.16, 'end': 6359.7, 'text': ' The code is still buggy because in some cases it may actually result in set-fog.', 'tokens': [50364, 440, 3089, 307, 920, 7426, 1480, 570, 294, 512, 3331, 309, 815, 767, 1874, 294, 992, 12, 69, 664, 13, 50791], 'temperature': 0.0, 'avg_logprob': -0.285459109715053, 'compression_ratio': 1.458100558659218, 'no_speech_prob': 0.14024025201797485}, {'id': 1269, 'seek': 635116, 'start': 6359.7, 'end': 6362.88, 'text': ' Now he coined something like undefined behavior.', 'tokens': [50791, 823, 415, 45222, 746, 411, 674, 5666, 2001, 5223, 13, 50950], 'temperature': 0.0, 'avg_logprob': -0.285459109715053, 'compression_ratio': 1.458100558659218, 'no_speech_prob': 0.14024025201797485}, {'id': 1270, 'seek': 635116, 'start': 6362.88, 'end': 6371.4, 'text': ' Does everyone know what is undefined behavior?', 'tokens': [50950, 4402, 1518, 458, 437, 307, 674, 5666, 2001, 5223, 30, 51376], 'temperature': 0.0, 'avg_logprob': -0.285459109715053, 'compression_ratio': 1.458100558659218, 'no_speech_prob': 0.14024025201797485}, {'id': 1271, 'seek': 635116, 'start': 6371.4, 'end': 6380.3, 'text': ' So if you read any language standard, especially C, C++, it has three terminologies.', 'tokens': [51376, 407, 498, 291, 1401, 604, 2856, 3832, 11, 2318, 383, 11, 383, 25472, 11, 309, 575, 1045, 10761, 6204, 13, 51821], 'temperature': 0.0, 'avg_logprob': -0.285459109715053, 'compression_ratio': 1.458100558659218, 'no_speech_prob': 0.14024025201797485}, {'id': 1272, 'seek': 638030, 'start': 6380.3, 'end': 6385.84, 'text': ' It has something called as implementation defined behavior.', 'tokens': [50364, 467, 575, 746, 1219, 382, 11420, 7642, 5223, 13, 50641], 'temperature': 0.0, 'avg_logprob': -0.1807989756266276, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.004753937013447285}, {'id': 1273, 'seek': 638030, 'start': 6385.84, 'end': 6393.28, 'text': ' So what C says is if your program does this then it is implementation defined behavior.', 'tokens': [50641, 407, 437, 383, 1619, 307, 498, 428, 1461, 775, 341, 550, 309, 307, 11420, 7642, 5223, 13, 51013], 'temperature': 0.0, 'avg_logprob': -0.1807989756266276, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.004753937013447285}, {'id': 1274, 'seek': 638030, 'start': 6393.28, 'end': 6397.1, 'text': ' The conditions are there are just too many conditions.', 'tokens': [51013, 440, 4487, 366, 456, 366, 445, 886, 867, 4487, 13, 51204], 'temperature': 0.0, 'avg_logprob': -0.1807989756266276, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.004753937013447285}, {'id': 1275, 'seek': 638030, 'start': 6397.1, 'end': 6402.42, 'text': ' But essentially whenever you hear a term called as implementation defined behavior what it', 'tokens': [51204, 583, 4476, 5699, 291, 1568, 257, 1433, 1219, 382, 11420, 7642, 5223, 437, 309, 51470], 'temperature': 0.0, 'avg_logprob': -0.1807989756266276, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.004753937013447285}, {'id': 1276, 'seek': 638030, 'start': 6402.42, 'end': 6407.9400000000005, 'text': " means is C language doesn't say only this thing should happen.", 'tokens': [51470, 1355, 307, 383, 2856, 1177, 380, 584, 787, 341, 551, 820, 1051, 13, 51746], 'temperature': 0.0, 'avg_logprob': -0.1807989756266276, 'compression_ratio': 1.816326530612245, 'no_speech_prob': 0.004753937013447285}, {'id': 1277, 'seek': 640794, 'start': 6407.94, 'end': 6414.12, 'text': " C language says compiler and the platform and the system it's free to implement anything", 'tokens': [50364, 383, 2856, 1619, 31958, 293, 264, 3663, 293, 264, 1185, 309, 311, 1737, 281, 4445, 1340, 50673], 'temperature': 0.0, 'avg_logprob': -0.12513330537978917, 'compression_ratio': 1.6494845360824741, 'no_speech_prob': 0.09798752516508102}, {'id': 1278, 'seek': 640794, 'start': 6414.12, 'end': 6421.54, 'text': ' for this particular case but it must document what it is doing.', 'tokens': [50673, 337, 341, 1729, 1389, 457, 309, 1633, 4166, 437, 309, 307, 884, 13, 51044], 'temperature': 0.0, 'avg_logprob': -0.12513330537978917, 'compression_ratio': 1.6494845360824741, 'no_speech_prob': 0.09798752516508102}, {'id': 1279, 'seek': 640794, 'start': 6421.54, 'end': 6430.86, 'text': ' So for example C might say that size of integer is implementation defined behavior.', 'tokens': [51044, 407, 337, 1365, 383, 1062, 584, 300, 2744, 295, 24922, 307, 11420, 7642, 5223, 13, 51510], 'temperature': 0.0, 'avg_logprob': -0.12513330537978917, 'compression_ratio': 1.6494845360824741, 'no_speech_prob': 0.09798752516508102}, {'id': 1280, 'seek': 640794, 'start': 6430.86, 'end': 6436.82, 'text': " So C says I don't know what is size of int but every implementation must define it.", 'tokens': [51510, 407, 383, 1619, 286, 500, 380, 458, 437, 307, 2744, 295, 560, 457, 633, 11420, 1633, 6964, 309, 13, 51808], 'temperature': 0.0, 'avg_logprob': -0.12513330537978917, 'compression_ratio': 1.6494845360824741, 'no_speech_prob': 0.09798752516508102}, {'id': 1281, 'seek': 643682, 'start': 6436.82, 'end': 6441.38, 'text': ' So this is implementation defined which means implementation must document what is the size', 'tokens': [50364, 407, 341, 307, 11420, 7642, 597, 1355, 11420, 1633, 4166, 437, 307, 264, 2744, 50592], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1282, 'seek': 643682, 'start': 6441.38, 'end': 6442.38, 'text': ' of integer.', 'tokens': [50592, 295, 24922, 13, 50642], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1283, 'seek': 643682, 'start': 6442.38, 'end': 6447.9, 'text': ' There is something called as unspecified behavior.', 'tokens': [50642, 821, 307, 746, 1219, 382, 2693, 494, 66, 2587, 5223, 13, 50918], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1284, 'seek': 643682, 'start': 6447.9, 'end': 6453.34, 'text': ' Unspecified behavior implies it is again not spelled out by the standard that in this case', 'tokens': [50918, 1156, 7053, 66, 2587, 5223, 18779, 309, 307, 797, 406, 34388, 484, 538, 264, 3832, 300, 294, 341, 1389, 51190], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1285, 'seek': 643682, 'start': 6453.34, 'end': 6460.98, 'text': ' this should happen but it is a bit lower than implementation defined where compiler does', 'tokens': [51190, 341, 820, 1051, 457, 309, 307, 257, 857, 3126, 813, 11420, 7642, 689, 31958, 775, 51572], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1286, 'seek': 643682, 'start': 6460.98, 'end': 6463.74, 'text': ' not even need to document what it does.', 'tokens': [51572, 406, 754, 643, 281, 4166, 437, 309, 775, 13, 51710], 'temperature': 0.0, 'avg_logprob': -0.12607076308306525, 'compression_ratio': 1.8514851485148516, 'no_speech_prob': 0.0023965404834598303}, {'id': 1287, 'seek': 646374, 'start': 6463.74, 'end': 6467.94, 'text': ' And we will see one example of unspecified behavior later.', 'tokens': [50364, 400, 321, 486, 536, 472, 1365, 295, 2693, 494, 66, 2587, 5223, 1780, 13, 50574], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}, {'id': 1288, 'seek': 646374, 'start': 6467.94, 'end': 6474.26, 'text': ' And third is undefined behavior in which case C standard says anything can happen including', 'tokens': [50574, 400, 2636, 307, 674, 5666, 2001, 5223, 294, 597, 1389, 383, 3832, 1619, 1340, 393, 1051, 3009, 50890], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}, {'id': 1289, 'seek': 646374, 'start': 6474.26, 'end': 6478.98, 'text': ' compiler generating code which will do RM minus RF slash.', 'tokens': [50890, 31958, 17746, 3089, 597, 486, 360, 23790, 3175, 26204, 17330, 13, 51126], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}, {'id': 1290, 'seek': 646374, 'start': 6478.98, 'end': 6484.26, 'text': ' So compiler is free to do anything if your code has undefined behavior.', 'tokens': [51126, 407, 31958, 307, 1737, 281, 360, 1340, 498, 428, 3089, 575, 674, 5666, 2001, 5223, 13, 51390], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}, {'id': 1291, 'seek': 646374, 'start': 6484.26, 'end': 6488.0, 'text': ' And these kind of things are defined because they give flexibility to the compiler and', 'tokens': [51390, 400, 613, 733, 295, 721, 366, 7642, 570, 436, 976, 12635, 281, 264, 31958, 293, 51577], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}, {'id': 1292, 'seek': 646374, 'start': 6488.0, 'end': 6490.78, 'text': ' optimizers to do something.', 'tokens': [51577, 5028, 22525, 281, 360, 746, 13, 51716], 'temperature': 0.0, 'avg_logprob': -0.14165002366770868, 'compression_ratio': 1.7324561403508771, 'no_speech_prob': 0.7820909023284912}]