 Technical Terms:

1. Relocation: Metadata generated by assembler to instruct linker on how to change addresses or fill in addresses which assembler couldn’t fill due to lack of address information.
2. Strong Symbol: Functions and initialized globals; only one strong symbol is allowed for a given name.
3. Weak Symbol: Uninitialized globals; multiple weak symbols are allowed, and any weak symbol can be chosen for resolution.
4. Tentative Definitions: Feature of C allowing multiple uninitialized variables with the same name. At link time, the largest one will be chosen.
5. One Definition Rule (ODR): C++ rule stating that every variable must have a single definition and no more and no less.
6. Static Library: Collection of object files packaged together for ease of distribution and usage. Contains archive format on Linux.
7. Archive Utility: Tool (ar) to create a static library by combining multiple object files. Command: `ar rs <library_name> <list_of_objects>`
8. Object Files: Compiler outputs containing machine code, debugging information, and relocation entries. Linked together by linker.
9. Linker: Combines multiple relocatable object files into a single executable file, performs symbol resolution, and applies relocations.
10. Program Headers: Describe each segment in the executable, including type, offset, virtual address, file size, memory size, and permissions.
11. Entry Point: Starting point of the program, specified in the program header as a virtual address.
12. Process: Instance of a running program with its own context, including the program’s memory, file descriptors, and environment variables.
13. Context Switching: Operating System kernel functionality that saves the state of the currently running process and restores the state of another process. Provides the illusion of continuous execution for each process.
14. Private Address Space: Abstraction provided by processes, ensuring that each process believes it has exclusive use of the CPU and memory. Enforced by virtual memory.
15. Virtual Memory: Indirection layer that manages the mapping between virtual addresses and physical addresses, providing benefits such as efficient memory usage, protection of data, and sharing of data between processes.
16. Page Table: Per-process data structure storing the mapping between virtual addresses and physical addresses. Updated by the operating system and consulted by the CPU for address translation.
17. Translation Look-Aside Buffer (TLB): Cache of recently used virtual-to-physical mappings maintained by the CPU to speed up address translation.
18. Shared Physical Copy: Method of sharing data between processes, where both processes map the same physical memory location to potentially different virtual addresses.

These terms cover the concepts presented in the lecture regarding the organization and functioning of object files, linking, relocation, processes, and virtual memory. Understanding these concepts is crucial for effectively working with low-level programming, operating systems, and system software.