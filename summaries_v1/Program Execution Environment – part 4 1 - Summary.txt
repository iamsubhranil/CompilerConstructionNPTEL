 Assembly & Linkers:

1. **Assembly**: Translates textual assembly programs into binary object files. Tasks include converting text instructions to machine code, resolving internal references, and recording metadata for the linker.

2. **Two-pass Algorithm**: Assemblers typically perform a two-pass algorithm for handling labels and addressing:
	* Pass 1: Assign temporary addresses to labels and calculate sizes.
	* Pass 2: Replace label references with actual addresses and update the final object file.

3. **Address Types**: Three types of addresses can be used for branch targets:
	* PC-relative: Based on the distance from the current instruction.
	* Section-relative: Within the text or data section.
	* File-relative: Absolute address from the start of the file.

4. **Data Alignment**: Data is often aligned to multiples of its size for improved performance and compatibility with certain architectures.

5. **Linkers**: Merge multiple relocatable object files and produce a single executable file. Main tasks include symbol resolution and relocation.

6. **Segments**: Created by collecting similar sections from different object files. Common segments include text, data, and heap.

7. **Symbol Visibility**: Linkers treat symbols as either strong (functions and initialized globals) or weak (uninitialized globals). Multiple strong symbols cause linker errors, while multiple weak symbols allow choosing any for resolution.

8. **Relocations**: Additional metadata generated by the assembler to guide the linker in updating memory addresses. Two common relocations are R386PC32 (change with PC-relative offset) and R38632 (change with absolute address + addend).

9. **Tentative Definitions**: A feature of C that allows multiple uninitialized global variables with the same name. At link time, the largest variable wins unless overridden with initialization.

10. **One Definition Rule (ODR)**: A rule in C++ stating that every variable must have a single definition and no more and no less. Violations lead to linker errors.

In summary, assemblers and linkers play crucial roles in translating high-level programming constructs into low-level machine code. Understanding their operation is essential for developing efficient and reliable software systems. Knowledge of symbol resolution, relocations, and segment creation enables developers to diagnose and fix potential issues during the development lifecycle.