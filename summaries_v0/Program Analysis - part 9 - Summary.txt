 Pointer analysis is a method used in compiler optimization to determine what memory locations a given pointer variable may access. The data flow problem consists of finding the points-to set for each variable, representing the set of memory locations it could point to. A flow sensitive analysis is conducted, maintaining pointer sets at the end of each basic block. Important statements include assignment and dereferencing operations, which affect the points-to sets. Meet and transfer functions are defined to combine and update pointer sets accordingly. The lattice for this analysis consists of sets of memory locations ordered by subset inclusion, forming a product lattice with one component lattice per variable. The analysis is not separable due to interactions between pointer dereferences. Arrays can be challenging to model, often approximated as a single location or split into accessible and inaccessible portions. Steamgraph is a fast, flow-insensitive pointer analysis useful for large codebases, grouping variables and memory locations into equivalence classes based on their points-to relationships. Strong and weak updates ensure accurate points-to sets regardless of statement order within basic blocks.