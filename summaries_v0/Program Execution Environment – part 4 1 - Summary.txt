  Assemblers translate textual assembly programs into binary object files by converting text instructions into machine code, resolving internal references, and recording metadata for the linker. The assembler performs a two-pass algorithm, first assigning addresses to labels and then replacing references with actual addresses. Branch instructions often use PC-relative addressing, which calculates the target address relative to the current instruction. Data variables are handled similarly, with the assembler assigning addresses during the first pass and updating references during the second pass. Alignment is crucial for efficient data access, particularly on architectures that do not support unaligned access. The linker merges object files and resolves symbol references, while maintaining the integrity of strong and weak symbols. Additionally, linkers perform relocation, modifying addresses or filling in addresses based on relocation information provided by the assembler.